
connecteur_bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042a8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004480  08004480  00005480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c0  080044c0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044c8  080044c8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  080044dc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080044dc  00006164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd83  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d92  00000000  00000000  00012dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00014b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b1  00000000  00000000  00015558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cad2  00000000  00000000  00015d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c534  00000000  00000000  000327db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5e71  00000000  00000000  0003ed0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000f4bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000f73d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004468 	.word	0x08004468

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004468 	.word	0x08004468

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800023c:	f000 b96a 	b.w	8000514 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	460c      	mov	r4, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14e      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000264:	4694      	mov	ip, r2
 8000266:	458c      	cmp	ip, r1
 8000268:	4686      	mov	lr, r0
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	d962      	bls.n	8000336 <__udivmoddi4+0xde>
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0320 	rsb	r3, r2, #32
 8000276:	4091      	lsls	r1, r2
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	4319      	orrs	r1, r3
 8000282:	fa00 fe02 	lsl.w	lr, r0, r2
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fa1f f68c 	uxth.w	r6, ip
 800028e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb04 f106 	mul.w	r1, r4, r6
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002ae:	f080 8112 	bcs.w	80004d6 <__udivmoddi4+0x27e>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 810f 	bls.w	80004d6 <__udivmoddi4+0x27e>
 80002b8:	3c02      	subs	r4, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a59      	subs	r1, r3, r1
 80002be:	fa1f f38e 	uxth.w	r3, lr
 80002c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002c6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	429e      	cmp	r6, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x94>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002de:	f080 80fc 	bcs.w	80004da <__udivmoddi4+0x282>
 80002e2:	429e      	cmp	r6, r3
 80002e4:	f240 80f9 	bls.w	80004da <__udivmoddi4+0x282>
 80002e8:	4463      	add	r3, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	1b9b      	subs	r3, r3, r6
 80002ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa6>
 80002f6:	40d3      	lsrs	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xba>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb4>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa6>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x150>
 800031a:	42a3      	cmp	r3, r4
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xcc>
 800031e:	4290      	cmp	r0, r2
 8000320:	f0c0 80f0 	bcc.w	8000504 <__udivmoddi4+0x2ac>
 8000324:	1a86      	subs	r6, r0, r2
 8000326:	eb64 0303 	sbc.w	r3, r4, r3
 800032a:	2001      	movs	r0, #1
 800032c:	2d00      	cmp	r5, #0
 800032e:	d0e6      	beq.n	80002fe <__udivmoddi4+0xa6>
 8000330:	e9c5 6300 	strd	r6, r3, [r5]
 8000334:	e7e3      	b.n	80002fe <__udivmoddi4+0xa6>
 8000336:	2a00      	cmp	r2, #0
 8000338:	f040 8090 	bne.w	800045c <__udivmoddi4+0x204>
 800033c:	eba1 040c 	sub.w	r4, r1, ip
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	fa1f f78c 	uxth.w	r7, ip
 8000348:	2101      	movs	r1, #1
 800034a:	fbb4 f6f8 	udiv	r6, r4, r8
 800034e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000352:	fb08 4416 	mls	r4, r8, r6, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	4298      	cmp	r0, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x11c>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x11a>
 800036c:	4298      	cmp	r0, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2b4>
 8000372:	4626      	mov	r6, r4
 8000374:	1a1c      	subs	r4, r3, r0
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb4 f0f8 	udiv	r0, r4, r8
 800037e:	fb08 4410 	mls	r4, r8, r0, r4
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	429f      	cmp	r7, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x148>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x146>
 8000398:	429f      	cmp	r7, r3
 800039a:	f200 80b0 	bhi.w	80004fe <__udivmoddi4+0x2a6>
 800039e:	4620      	mov	r0, r4
 80003a0:	1bdb      	subs	r3, r3, r7
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x9c>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b8:	fa04 f301 	lsl.w	r3, r4, r1
 80003bc:	ea43 030c 	orr.w	r3, r3, ip
 80003c0:	40f4      	lsrs	r4, r6
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	0c38      	lsrs	r0, r7, #16
 80003c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003cc:	fbb4 fef0 	udiv	lr, r4, r0
 80003d0:	fa1f fc87 	uxth.w	ip, r7
 80003d4:	fb00 441e 	mls	r4, r0, lr, r4
 80003d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003dc:	fb0e f90c 	mul.w	r9, lr, ip
 80003e0:	45a1      	cmp	r9, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90a      	bls.n	80003fe <__udivmoddi4+0x1a6>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ee:	f080 8084 	bcs.w	80004fa <__udivmoddi4+0x2a2>
 80003f2:	45a1      	cmp	r9, r4
 80003f4:	f240 8081 	bls.w	80004fa <__udivmoddi4+0x2a2>
 80003f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	eba4 0409 	sub.w	r4, r4, r9
 8000402:	fa1f f983 	uxth.w	r9, r3
 8000406:	fbb4 f3f0 	udiv	r3, r4, r0
 800040a:	fb00 4413 	mls	r4, r0, r3, r4
 800040e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000412:	fb03 fc0c 	mul.w	ip, r3, ip
 8000416:	45a4      	cmp	ip, r4
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1d2>
 800041a:	193c      	adds	r4, r7, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000420:	d267      	bcs.n	80004f2 <__udivmoddi4+0x29a>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0x29a>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800042e:	fba0 9302 	umull	r9, r3, r0, r2
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	429c      	cmp	r4, r3
 8000438:	46ce      	mov	lr, r9
 800043a:	469c      	mov	ip, r3
 800043c:	d351      	bcc.n	80004e2 <__udivmoddi4+0x28a>
 800043e:	d04e      	beq.n	80004de <__udivmoddi4+0x286>
 8000440:	b155      	cbz	r5, 8000458 <__udivmoddi4+0x200>
 8000442:	ebb8 030e 	subs.w	r3, r8, lr
 8000446:	eb64 040c 	sbc.w	r4, r4, ip
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	40cb      	lsrs	r3, r1
 8000450:	431e      	orrs	r6, r3
 8000452:	40cc      	lsrs	r4, r1
 8000454:	e9c5 6400 	strd	r6, r4, [r5]
 8000458:	2100      	movs	r1, #0
 800045a:	e750      	b.n	80002fe <__udivmoddi4+0xa6>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f103 	lsr.w	r1, r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa24 f303 	lsr.w	r3, r4, r3
 800046c:	4094      	lsls	r4, r2
 800046e:	430c      	orrs	r4, r1
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000480:	fb08 3110 	mls	r1, r8, r0, r3
 8000484:	0c23      	lsrs	r3, r4, #16
 8000486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048a:	fb00 f107 	mul.w	r1, r0, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x24c>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800049a:	d22c      	bcs.n	80004f6 <__udivmoddi4+0x29e>
 800049c:	4299      	cmp	r1, r3
 800049e:	d92a      	bls.n	80004f6 <__udivmoddi4+0x29e>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ac:	fb08 3311 	mls	r3, r8, r1, r3
 80004b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b4:	fb01 f307 	mul.w	r3, r1, r7
 80004b8:	42a3      	cmp	r3, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x276>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004c4:	d213      	bcs.n	80004ee <__udivmoddi4+0x296>
 80004c6:	42a3      	cmp	r3, r4
 80004c8:	d911      	bls.n	80004ee <__udivmoddi4+0x296>
 80004ca:	3902      	subs	r1, #2
 80004cc:	4464      	add	r4, ip
 80004ce:	1ae4      	subs	r4, r4, r3
 80004d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d4:	e739      	b.n	800034a <__udivmoddi4+0xf2>
 80004d6:	4604      	mov	r4, r0
 80004d8:	e6f0      	b.n	80002bc <__udivmoddi4+0x64>
 80004da:	4608      	mov	r0, r1
 80004dc:	e706      	b.n	80002ec <__udivmoddi4+0x94>
 80004de:	45c8      	cmp	r8, r9
 80004e0:	d2ae      	bcs.n	8000440 <__udivmoddi4+0x1e8>
 80004e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7a8      	b.n	8000440 <__udivmoddi4+0x1e8>
 80004ee:	4631      	mov	r1, r6
 80004f0:	e7ed      	b.n	80004ce <__udivmoddi4+0x276>
 80004f2:	4603      	mov	r3, r0
 80004f4:	e799      	b.n	800042a <__udivmoddi4+0x1d2>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e7d4      	b.n	80004a4 <__udivmoddi4+0x24c>
 80004fa:	46d6      	mov	lr, sl
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1a6>
 80004fe:	4463      	add	r3, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e74d      	b.n	80003a0 <__udivmoddi4+0x148>
 8000504:	4606      	mov	r6, r0
 8000506:	4623      	mov	r3, r4
 8000508:	4608      	mov	r0, r1
 800050a:	e70f      	b.n	800032c <__udivmoddi4+0xd4>
 800050c:	3e02      	subs	r6, #2
 800050e:	4463      	add	r3, ip
 8000510:	e730      	b.n	8000374 <__udivmoddi4+0x11c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 facf 	bl	8000abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f81a 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8fc 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f8ae 	bl	8000688 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f860 	bl	80005f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, buffer_rx_connecteur_bluetooth, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	4905      	ldr	r1, [pc, #20]	@ (8000548 <main+0x30>)
 8000534:	4805      	ldr	r0, [pc, #20]	@ (800054c <main+0x34>)
 8000536:	f001 ff4d 	bl	80023d4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, buffer_rx_pc, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	4904      	ldr	r1, [pc, #16]	@ (8000550 <main+0x38>)
 800053e:	4805      	ldr	r0, [pc, #20]	@ (8000554 <main+0x3c>)
 8000540:	f001 ff48 	bl	80023d4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x2c>
 8000548:	20000150 	.word	0x20000150
 800054c:	20000028 	.word	0x20000028
 8000550:	20000158 	.word	0x20000158
 8000554:	200000bc 	.word	0x200000bc

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0318 	add.w	r3, r7, #24
 8000562:	2238      	movs	r2, #56	@ 0x38
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 ff52 	bl	8004410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fe7a 	bl	8001274 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2340      	movs	r3, #64	@ 0x40
 800058c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000596:	2304      	movs	r3, #4
 8000598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800059a:	2355      	movs	r3, #85	@ 0x55
 800059c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 ff14 	bl	80013dc <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ba:	f000 f92f 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2104      	movs	r1, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fa12 	bl	8001a00 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e2:	f000 f91b 	bl	800081c <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	@ 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 80005f6:	4a23      	ldr	r2, [pc, #140]	@ (8000684 <MX_USART1_UART_Init+0x94>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000632:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000638:	4811      	ldr	r0, [pc, #68]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 800063a:	f001 fded 	bl	8002218 <HAL_UART_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000644:	f000 f8ea 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	480d      	ldr	r0, [pc, #52]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 800064c:	f003 fe15 	bl	800427a <HAL_UARTEx_SetTxFifoThreshold>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000656:	f000 f8e1 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065a:	2100      	movs	r1, #0
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 800065e:	f003 fe4a 	bl	80042f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000668:	f000 f8d8 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_USART1_UART_Init+0x90>)
 800066e:	f003 fdcb 	bl	8004208 <HAL_UARTEx_DisableFifoMode>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000678:	f000 f8d0 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40013800 	.word	0x40013800

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 800068e:	4a23      	ldr	r2, [pc, #140]	@ (800071c <MX_USART2_UART_Init+0x94>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c4:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ca:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d0:	4811      	ldr	r0, [pc, #68]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006d2:	f001 fda1 	bl	8002218 <HAL_UART_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006dc:	f000 f89e 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006e4:	f003 fdc9 	bl	800427a <HAL_UARTEx_SetTxFifoThreshold>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006ee:	f000 f895 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4808      	ldr	r0, [pc, #32]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 80006f6:	f003 fdfe 	bl	80042f6 <HAL_UARTEx_SetRxFifoThreshold>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000700:	f000 f88c 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_USART2_UART_Init+0x90>)
 8000706:	f003 fd7f 	bl	8004208 <HAL_UARTEx_DisableFifoMode>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000710:	f000 f884 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000bc 	.word	0x200000bc
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_GPIO_Init+0x78>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <MX_GPIO_Init+0x78>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_GPIO_Init+0x78>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_GPIO_Init+0x78>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a11      	ldr	r2, [pc, #68]	@ (8000798 <MX_GPIO_Init+0x78>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_GPIO_Init+0x78>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800076c:	480b      	ldr	r0, [pc, #44]	@ (800079c <MX_GPIO_Init+0x7c>)
 800076e:	f000 fd69 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0x7c>)
 800078c:	f000 fbd8 	bl	8000f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400

080007a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	// Si on reçoie des trucs depuis le pc
	if (huart->Instance == USART2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a15      	ldr	r2, [pc, #84]	@ (8000804 <HAL_UART_RxCpltCallback+0x64>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10f      	bne.n	80007d2 <HAL_UART_RxCpltCallback+0x32>
	{
		// On les envoi au connecteur
		HAL_UART_Transmit(&huart1, buffer_rx_pc, strlen(buffer_rx_pc), HAL_MAX_DELAY);
 80007b2:	4815      	ldr	r0, [pc, #84]	@ (8000808 <HAL_UART_RxCpltCallback+0x68>)
 80007b4:	f7ff fd30 	bl	8000218 <strlen>
 80007b8:	4603      	mov	r3, r0
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007c0:	4911      	ldr	r1, [pc, #68]	@ (8000808 <HAL_UART_RxCpltCallback+0x68>)
 80007c2:	4812      	ldr	r0, [pc, #72]	@ (800080c <HAL_UART_RxCpltCallback+0x6c>)
 80007c4:	f001 fd78 	bl	80022b8 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, buffer_rx_pc, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	490f      	ldr	r1, [pc, #60]	@ (8000808 <HAL_UART_RxCpltCallback+0x68>)
 80007cc:	4810      	ldr	r0, [pc, #64]	@ (8000810 <HAL_UART_RxCpltCallback+0x70>)
 80007ce:	f001 fe01 	bl	80023d4 <HAL_UART_Receive_IT>
	}

	// Si on reçoie des trucs depuis le connecteur
	if (huart->Instance == USART1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <HAL_UART_RxCpltCallback+0x74>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d10f      	bne.n	80007fc <HAL_UART_RxCpltCallback+0x5c>
	{
		// On les envoi au pc
		HAL_UART_Transmit(&huart2, buffer_rx_connecteur_bluetooth, strlen(buffer_rx_connecteur_bluetooth), HAL_MAX_DELAY);
 80007dc:	480e      	ldr	r0, [pc, #56]	@ (8000818 <HAL_UART_RxCpltCallback+0x78>)
 80007de:	f7ff fd1b 	bl	8000218 <strlen>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ea:	490b      	ldr	r1, [pc, #44]	@ (8000818 <HAL_UART_RxCpltCallback+0x78>)
 80007ec:	4808      	ldr	r0, [pc, #32]	@ (8000810 <HAL_UART_RxCpltCallback+0x70>)
 80007ee:	f001 fd63 	bl	80022b8 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, buffer_rx_connecteur_bluetooth, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	4908      	ldr	r1, [pc, #32]	@ (8000818 <HAL_UART_RxCpltCallback+0x78>)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <HAL_UART_RxCpltCallback+0x6c>)
 80007f8:	f001 fdec 	bl	80023d4 <HAL_UART_Receive_IT>
	}
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40004400 	.word	0x40004400
 8000808:	20000158 	.word	0x20000158
 800080c:	20000028 	.word	0x20000028
 8000810:	200000bc 	.word	0x200000bc
 8000814:	40013800 	.word	0x40013800
 8000818:	20000150 	.word	0x20000150

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	@ 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	@ 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800085e:	f000 fdad 	bl	80013bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	@ 0x70
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	2244      	movs	r2, #68	@ 0x44
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fdbd 	bl	8004410 <memset>
  if(huart->Instance==USART1)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a46      	ldr	r2, [pc, #280]	@ (80009b4 <HAL_UART_MspInit+0x144>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d140      	bne.n	8000922 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fac3 	bl	8001e38 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b8:	f7ff ffb0 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008bc:	4b3e      	ldr	r3, [pc, #248]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 80008be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c0:	4a3d      	ldr	r2, [pc, #244]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c8:	4b3b      	ldr	r3, [pc, #236]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 80008ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b38      	ldr	r3, [pc, #224]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d8:	4a37      	ldr	r2, [pc, #220]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e0:	4b35      	ldr	r3, [pc, #212]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008fe:	2307      	movs	r3, #7
 8000900:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090c:	f000 fb18 	bl	8000f40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	2025      	movs	r0, #37	@ 0x25
 8000916:	f000 fa1e 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800091a:	2025      	movs	r0, #37	@ 0x25
 800091c:	f000 fa35 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000920:	e043      	b.n	80009aa <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a25      	ldr	r2, [pc, #148]	@ (80009bc <HAL_UART_MspInit+0x14c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d13e      	bne.n	80009aa <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fa7d 	bl	8001e38 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000944:	f7ff ff6a 	bl	800081c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 800094a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094c:	4a1a      	ldr	r2, [pc, #104]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 800094e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000952:	6593      	str	r3, [r2, #88]	@ 0x58
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 8000956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000964:	4a14      	ldr	r2, [pc, #80]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_UART_MspInit+0x148>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000978:	230c      	movs	r3, #12
 800097a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000988:	2307      	movs	r3, #7
 800098a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000990:	4619      	mov	r1, r3
 8000992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000996:	f000 fad3 	bl	8000f40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2026      	movs	r0, #38	@ 0x26
 80009a0:	f000 f9d9 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009a4:	2026      	movs	r0, #38	@ 0x26
 80009a6:	f000 f9f0 	bl	8000d8a <HAL_NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3770      	adds	r7, #112	@ 0x70
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40013800 	.word	0x40013800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40004400 	.word	0x40004400

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f000 f8a5 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <USART1_IRQHandler+0x10>)
 8000a26:	f001 fd21 	bl	800246c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000028 	.word	0x20000028

08000a34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <USART2_IRQHandler+0x10>)
 8000a3a:	f001 fd17 	bl	800246c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000bc 	.word	0x200000bc

08000a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	@ (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f003 fcc1 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fd3b 	bl	8000518 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab0:	080044d0 	.word	0x080044d0
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab8:	20000164 	.word	0x20000164

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>

08000abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f939 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f80e 	bl	8000af0 <HAL_InitTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e001      	b.n	8000ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae0:	f7ff fea2 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_InitTick+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d022      	beq.n	8000b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_InitTick+0x6c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <HAL_InitTick+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f944 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10f      	bne.n	8000b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	d809      	bhi.n	8000b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b32:	f000 f910 	bl	8000d56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_InitTick+0x70>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e007      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e004      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_IncTick+0x1c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <HAL_IncTick+0x20>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <HAL_IncTick+0x1c>)
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000160 	.word	0x20000160
 8000b84:	20000008 	.word	0x20000008

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000160 	.word	0x20000160

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	@ (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	@ 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff29 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff40 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff90 	bl	8000c94 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5f 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff33 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffa4 	bl	8000cfc <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d005      	beq.n	8000de2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2204      	movs	r2, #4
 8000dda:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e037      	b.n	8000e52 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 020e 	bic.w	r2, r2, #14
 8000df0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e00:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	f003 021f 	and.w	r2, r3, #31
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e2e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00c      	beq.n	8000e52 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e46:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e50:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	e047      	b.n	8000f34 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 020e 	bic.w	r2, r2, #14
 8000eb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ece:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ed2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ef0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00c      	beq.n	8000f14 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f08:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f12:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	4798      	blx	r3
    }
  }
  return status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f4e:	e15a      	b.n	8001206 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 814c 	beq.w	8001200 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d005      	beq.n	8000f80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 0201 	and.w	r2, r3, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d017      	beq.n	800101e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d123      	bne.n	8001072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0203 	and.w	r2, r3, #3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80a6 	beq.w	8001200 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001224 <HAL_GPIO_Init+0x2e4>)
 80010b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001224 <HAL_GPIO_Init+0x2e4>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c0:	4b58      	ldr	r3, [pc, #352]	@ (8001224 <HAL_GPIO_Init+0x2e4>)
 80010c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010cc:	4a56      	ldr	r2, [pc, #344]	@ (8001228 <HAL_GPIO_Init+0x2e8>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010f6:	d01f      	beq.n	8001138 <HAL_GPIO_Init+0x1f8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4c      	ldr	r2, [pc, #304]	@ (800122c <HAL_GPIO_Init+0x2ec>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d019      	beq.n	8001134 <HAL_GPIO_Init+0x1f4>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4b      	ldr	r2, [pc, #300]	@ (8001230 <HAL_GPIO_Init+0x2f0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d013      	beq.n	8001130 <HAL_GPIO_Init+0x1f0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4a      	ldr	r2, [pc, #296]	@ (8001234 <HAL_GPIO_Init+0x2f4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d00d      	beq.n	800112c <HAL_GPIO_Init+0x1ec>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a49      	ldr	r2, [pc, #292]	@ (8001238 <HAL_GPIO_Init+0x2f8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0x1e8>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a48      	ldr	r2, [pc, #288]	@ (800123c <HAL_GPIO_Init+0x2fc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d101      	bne.n	8001124 <HAL_GPIO_Init+0x1e4>
 8001120:	2305      	movs	r3, #5
 8001122:	e00a      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001124:	2306      	movs	r3, #6
 8001126:	e008      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001128:	2304      	movs	r3, #4
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 800112c:	2303      	movs	r3, #3
 800112e:	e004      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001130:	2302      	movs	r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001138:	2300      	movs	r3, #0
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114a:	4937      	ldr	r1, [pc, #220]	@ (8001228 <HAL_GPIO_Init+0x2e8>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001158:	4b39      	ldr	r3, [pc, #228]	@ (8001240 <HAL_GPIO_Init+0x300>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117c:	4a30      	ldr	r2, [pc, #192]	@ (8001240 <HAL_GPIO_Init+0x300>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <HAL_GPIO_Init+0x300>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a6:	4a26      	ldr	r2, [pc, #152]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fa:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	f47f ae9d 	bne.w	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800
 8001234:	48000c00 	.word	0x48000c00
 8001238:	48001000 	.word	0x48001000
 800123c:	48001400 	.word	0x48001400
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001260:	e002      	b.n	8001268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d141      	bne.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001282:	4b4b      	ldr	r3, [pc, #300]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800128a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128e:	d131      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001290:	4b47      	ldr	r3, [pc, #284]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001296:	4a46      	ldr	r2, [pc, #280]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800129c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	4b43      	ldr	r3, [pc, #268]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012a8:	4a41      	ldr	r2, [pc, #260]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012b0:	4b40      	ldr	r3, [pc, #256]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2232      	movs	r2, #50	@ 0x32
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	4a3f      	ldr	r2, [pc, #252]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	0c9b      	lsrs	r3, r3, #18
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c6:	e002      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ce:	4b38      	ldr	r3, [pc, #224]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012da:	d102      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f2      	bne.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e2:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ee:	d158      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e057      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f4:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012fa:	4a2d      	ldr	r2, [pc, #180]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001304:	e04d      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800130c:	d141      	bne.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800130e:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131a:	d131      	bne.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800131c:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001322:	4a23      	ldr	r2, [pc, #140]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001328:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	4b20      	ldr	r3, [pc, #128]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001334:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2232      	movs	r2, #50	@ 0x32
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	0c9b      	lsrs	r3, r3, #18
 800134e:	3301      	adds	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001352:	e002      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3b01      	subs	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001366:	d102      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f2      	bne.n	8001354 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137a:	d112      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e011      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001390:	e007      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40007000 	.word	0x40007000
 80013b4:	20000000 	.word	0x20000000
 80013b8:	431bde83 	.word	0x431bde83

080013bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ca:	6093      	str	r3, [r2, #8]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40007000 	.word	0x40007000

080013dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e2fe      	b.n	80019ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d075      	beq.n	80014e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fa:	4b97      	ldr	r3, [pc, #604]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001404:	4b94      	ldr	r3, [pc, #592]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d102      	bne.n	800141a <HAL_RCC_OscConfig+0x3e>
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d002      	beq.n	8001420 <HAL_RCC_OscConfig+0x44>
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b08      	cmp	r3, #8
 800141e:	d10b      	bne.n	8001438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	4b8d      	ldr	r3, [pc, #564]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d05b      	beq.n	80014e4 <HAL_RCC_OscConfig+0x108>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d157      	bne.n	80014e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e2d9      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d106      	bne.n	8001450 <HAL_RCC_OscConfig+0x74>
 8001442:	4b85      	ldr	r3, [pc, #532]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a84      	ldr	r2, [pc, #528]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e01d      	b.n	800148c <HAL_RCC_OscConfig+0xb0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x98>
 800145a:	4b7f      	ldr	r3, [pc, #508]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7e      	ldr	r2, [pc, #504]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b7c      	ldr	r3, [pc, #496]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7b      	ldr	r2, [pc, #492]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0xb0>
 8001474:	4b78      	ldr	r3, [pc, #480]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a77      	ldr	r2, [pc, #476]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800147a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b75      	ldr	r3, [pc, #468]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a74      	ldr	r2, [pc, #464]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fb78 	bl	8000b88 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fb74 	bl	8000b88 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e29e      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0xc0>
 80014ba:	e014      	b.n	80014e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb64 	bl	8000b88 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fb60 	bl	8000b88 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e28a      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d6:	4b60      	ldr	r3, [pc, #384]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0xe8>
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d075      	beq.n	80015de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f2:	4b59      	ldr	r3, [pc, #356]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fc:	4b56      	ldr	r3, [pc, #344]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d102      	bne.n	8001512 <HAL_RCC_OscConfig+0x136>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d002      	beq.n	8001518 <HAL_RCC_OscConfig+0x13c>
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d11f      	bne.n	8001558 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	4b4f      	ldr	r3, [pc, #316]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x154>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e25d      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b49      	ldr	r3, [pc, #292]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	4946      	ldr	r1, [pc, #280]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001544:	4b45      	ldr	r3, [pc, #276]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fad1 	bl	8000af0 <HAL_InitTick>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d043      	beq.n	80015dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e249      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001560:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a3c      	ldr	r2, [pc, #240]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fb0c 	bl	8000b88 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fb08 	bl	8000b88 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e232      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	492d      	ldr	r1, [pc, #180]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
 80015a6:	e01a      	b.n	80015de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fae8 	bl	8000b88 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fae4 	bl	8000b88 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e20e      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x1e0>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d041      	beq.n	800166e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f2:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f8:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7ff fac1 	bl	8000b88 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fabd 	bl	8000b88 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1e7      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ef      	beq.n	800160a <HAL_RCC_OscConfig+0x22e>
 800162a:	e020      	b.n	800166e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001632:	4a09      	ldr	r2, [pc, #36]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff faa4 	bl	8000b88 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001642:	e00d      	b.n	8001660 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff faa0 	bl	8000b88 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d906      	bls.n	8001660 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1ca      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b8c      	ldr	r3, [pc, #560]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ea      	bne.n	8001644 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001680:	4b84      	ldr	r3, [pc, #528]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x2b4>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x2b6>
 8001690:	2300      	movs	r3, #0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00d      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	4a7e      	ldr	r2, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b79      	ldr	r3, [pc, #484]	@ (8001898 <HAL_RCC_OscConfig+0x4bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016be:	4b76      	ldr	r3, [pc, #472]	@ (8001898 <HAL_RCC_OscConfig+0x4bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a75      	ldr	r2, [pc, #468]	@ (8001898 <HAL_RCC_OscConfig+0x4bc>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fa5d 	bl	8000b88 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fa59 	bl	8000b88 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e183      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001898 <HAL_RCC_OscConfig+0x4bc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d108      	bne.n	800170a <HAL_RCC_OscConfig+0x32e>
 80016f8:	4b66      	ldr	r3, [pc, #408]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fe:	4a65      	ldr	r2, [pc, #404]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001708:	e024      	b.n	8001754 <HAL_RCC_OscConfig+0x378>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d110      	bne.n	8001734 <HAL_RCC_OscConfig+0x358>
 8001712:	4b60      	ldr	r3, [pc, #384]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001718:	4a5e      	ldr	r2, [pc, #376]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001722:	4b5c      	ldr	r3, [pc, #368]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001728:	4a5a      	ldr	r2, [pc, #360]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001732:	e00f      	b.n	8001754 <HAL_RCC_OscConfig+0x378>
 8001734:	4b57      	ldr	r3, [pc, #348]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	4a56      	ldr	r2, [pc, #344]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001744:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	4a52      	ldr	r2, [pc, #328]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d016      	beq.n	800178a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa14 	bl	8000b88 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fa10 	bl	8000b88 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e138      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	4b46      	ldr	r3, [pc, #280]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ed      	beq.n	8001764 <HAL_RCC_OscConfig+0x388>
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff f9fd 	bl	8000b88 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f9f9 	bl	8000b88 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e121      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ed      	bne.n	8001792 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	4a34      	ldr	r2, [pc, #208]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d03c      	beq.n	800184e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01c      	beq.n	8001816 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f9cc 	bl	8000b88 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f4:	f7ff f9c8 	bl	8000b88 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0f2      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001806:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ef      	beq.n	80017f4 <HAL_RCC_OscConfig+0x418>
 8001814:	e01b      	b.n	800184e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001816:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001818:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181c:	4a1d      	ldr	r2, [pc, #116]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff f9af 	bl	8000b88 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182e:	f7ff f9ab 	bl	8000b88 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0d5      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ef      	bne.n	800182e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80c9 	beq.w	80019ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b0c      	cmp	r3, #12
 8001862:	f000 8083 	beq.w	800196c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d15e      	bne.n	800192c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff f985 	bl	8000b88 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	e00c      	b.n	800189c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff f981 	bl	8000b88 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d905      	bls.n	800189c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0ab      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
 8001894:	40021000 	.word	0x40021000
 8001898:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189c:	4b55      	ldr	r3, [pc, #340]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ec      	bne.n	8001882 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b52      	ldr	r3, [pc, #328]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4b52      	ldr	r3, [pc, #328]	@ (80019f8 <HAL_RCC_OscConfig+0x61c>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6a11      	ldr	r1, [r2, #32]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018b8:	3a01      	subs	r2, #1
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	4311      	orrs	r1, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018c2:	0212      	lsls	r2, r2, #8
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018ca:	0852      	lsrs	r2, r2, #1
 80018cc:	3a01      	subs	r2, #1
 80018ce:	0552      	lsls	r2, r2, #21
 80018d0:	4311      	orrs	r1, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018d6:	0852      	lsrs	r2, r2, #1
 80018d8:	3a01      	subs	r2, #1
 80018da:	0652      	lsls	r2, r2, #25
 80018dc:	4311      	orrs	r1, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018e2:	06d2      	lsls	r2, r2, #27
 80018e4:	430a      	orrs	r2, r1
 80018e6:	4943      	ldr	r1, [pc, #268]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b41      	ldr	r3, [pc, #260]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a40      	ldr	r2, [pc, #256]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f8:	4b3e      	ldr	r3, [pc, #248]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4a3d      	ldr	r2, [pc, #244]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f940 	bl	8000b88 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f93c 	bl	8000b88 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e066      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x530>
 800192a:	e05e      	b.n	80019ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192c:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f926 	bl	8000b88 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff f922 	bl	8000b88 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e04c      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001952:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800195e:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	4924      	ldr	r1, [pc, #144]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_RCC_OscConfig+0x620>)
 8001966:	4013      	ands	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
 800196a:	e03e      	b.n	80019ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e039      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001978:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	429a      	cmp	r2, r3
 800198a:	d12c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	3b01      	subs	r3, #1
 8001998:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d123      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d113      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	3b01      	subs	r3, #1
 80019cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	3b01      	subs	r3, #1
 80019e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	019f800c 	.word	0x019f800c
 80019fc:	feeefffc 	.word	0xfeeefffc

08001a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e11e      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b91      	ldr	r3, [pc, #580]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d910      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b8e      	ldr	r3, [pc, #568]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 020f 	bic.w	r2, r3, #15
 8001a2e:	498c      	ldr	r1, [pc, #560]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b8a      	ldr	r3, [pc, #552]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e106      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d073      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d129      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5c:	4b81      	ldr	r3, [pc, #516]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0f4      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a6c:	f000 f99e 	bl	8001dac <RCC_GetSysClockFreqFromPLLSource>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4a7c      	ldr	r2, [pc, #496]	@ (8001c68 <HAL_RCC_ClockConfig+0x268>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d93f      	bls.n	8001afa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d033      	beq.n	8001afa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d12f      	bne.n	8001afa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a9a:	4b72      	ldr	r3, [pc, #456]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aa2:	4a70      	ldr	r2, [pc, #448]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e024      	b.n	8001afa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0c6      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	4b66      	ldr	r3, [pc, #408]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0be      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ad8:	f000 f8ce 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4a61      	ldr	r2, [pc, #388]	@ (8001c68 <HAL_RCC_ClockConfig+0x268>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d909      	bls.n	8001afa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aee:	4a5d      	ldr	r2, [pc, #372]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001af6:	2380      	movs	r3, #128	@ 0x80
 8001af8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	4b5a      	ldr	r3, [pc, #360]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 0203 	bic.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4957      	ldr	r1, [pc, #348]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b0c:	f7ff f83c 	bl	8000b88 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff f838 	bl	8000b88 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e095      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 020c 	and.w	r2, r3, #12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1eb      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d023      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b54:	4b43      	ldr	r3, [pc, #268]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a42      	ldr	r2, [pc, #264]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b74:	4a3b      	ldr	r2, [pc, #236]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4936      	ldr	r1, [pc, #216]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b80      	cmp	r3, #128	@ 0x80
 8001b94:	d105      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b96:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ba0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d21d      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 020f 	bic.w	r2, r3, #15
 8001bb8:	4929      	ldr	r1, [pc, #164]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bc0:	f7fe ffe2 	bl	8000b88 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7fe ffde 	bl	8000b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e03b      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1ed      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4917      	ldr	r1, [pc, #92]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490f      	ldr	r1, [pc, #60]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c2a:	f000 f825 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490c      	ldr	r1, [pc, #48]	@ (8001c6c <HAL_RCC_ClockConfig+0x26c>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_RCC_ClockConfig+0x274>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe ff4e 	bl	8000af0 <HAL_InitTick>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	04c4b400 	.word	0x04c4b400
 8001c6c:	08004480 	.word	0x08004480
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d102      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	e047      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	e03e      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ca2:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d136      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d10c      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd6:	68d2      	ldr	r2, [r2, #12]
 8001cd8:	0a12      	lsrs	r2, r2, #8
 8001cda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
      break;
 8001ce4:	e00c      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce6:	4a13      	ldr	r2, [pc, #76]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4a10      	ldr	r2, [pc, #64]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf0:	68d2      	ldr	r2, [r2, #12]
 8001cf2:	0a12      	lsrs	r2, r2, #8
 8001cf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
      break;
 8001cfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0e5b      	lsrs	r3, r3, #25
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e001      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d20:	693b      	ldr	r3, [r7, #16]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	007a1200 	.word	0x007a1200

08001d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d58:	f7ff fff0 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4904      	ldr	r1, [pc, #16]	@ (8001d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08004490 	.word	0x08004490

08001d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d84:	f7ff ffda 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0adb      	lsrs	r3, r3, #11
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4904      	ldr	r1, [pc, #16]	@ (8001da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08004490 	.word	0x08004490

08001dac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d10c      	bne.n	8001dea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd0:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dda:	68d2      	ldr	r2, [r2, #12]
 8001ddc:	0a12      	lsrs	r2, r2, #8
 8001dde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
    break;
 8001de8:	e00c      	b.n	8001e04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dea:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	0a12      	lsrs	r2, r2, #8
 8001df8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
    break;
 8001e02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e04:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0e5b      	lsrs	r3, r3, #25
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e1e:	687b      	ldr	r3, [r7, #4]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	007a1200 	.word	0x007a1200
 8001e34:	00f42400 	.word	0x00f42400

08001e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e40:	2300      	movs	r3, #0
 8001e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e44:	2300      	movs	r3, #0
 8001e46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8098 	beq.w	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b40      	ldr	r3, [pc, #256]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e72:	4b3d      	ldr	r3, [pc, #244]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e82:	4b3a      	ldr	r3, [pc, #232]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a39      	ldr	r2, [pc, #228]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe fe7b 	bl	8000b88 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e94:	e009      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7fe fe77 	bl	8000b88 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d902      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	74fb      	strb	r3, [r7, #19]
        break;
 8001ea8:	e005      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eaa:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ef      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d159      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01e      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d019      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ed8:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ee4:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f04:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe37 	bl	8000b88 <HAL_GetTick>
 8001f1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fe33 	bl	8000b88 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d902      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	74fb      	strb	r3, [r7, #19]
            break;
 8001f34:	e006      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ec      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10b      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	4903      	ldr	r1, [pc, #12]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f60:	e008      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f62:	7cfb      	ldrb	r3, [r7, #19]
 8001f64:	74bb      	strb	r3, [r7, #18]
 8001f66:	e005      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f74:	7c7b      	ldrb	r3, [r7, #17]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4ba6      	ldr	r3, [pc, #664]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	4aa5      	ldr	r2, [pc, #660]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f92:	4ba0      	ldr	r3, [pc, #640]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f98:	f023 0203 	bic.w	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	499c      	ldr	r1, [pc, #624]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fb4:	4b97      	ldr	r3, [pc, #604]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f023 020c 	bic.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4994      	ldr	r1, [pc, #592]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fd6:	4b8f      	ldr	r3, [pc, #572]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fdc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	498b      	ldr	r1, [pc, #556]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ff8:	4b86      	ldr	r3, [pc, #536]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	4983      	ldr	r1, [pc, #524]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800201a:	4b7e      	ldr	r3, [pc, #504]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002020:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	497a      	ldr	r1, [pc, #488]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800203c:	4b75      	ldr	r3, [pc, #468]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	4972      	ldr	r1, [pc, #456]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800205e:	4b6d      	ldr	r3, [pc, #436]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	4969      	ldr	r1, [pc, #420]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002080:	4b64      	ldr	r3, [pc, #400]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4961      	ldr	r1, [pc, #388]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	4958      	ldr	r1, [pc, #352]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c4:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	4950      	ldr	r1, [pc, #320]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020e2:	d105      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020fc:	4b45      	ldr	r3, [pc, #276]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	4942      	ldr	r1, [pc, #264]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800211a:	d105      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800211c:	4b3d      	ldr	r3, [pc, #244]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a3c      	ldr	r2, [pc, #240]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002126:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002134:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4934      	ldr	r1, [pc, #208]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a2e      	ldr	r2, [pc, #184]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800216c:	4b29      	ldr	r3, [pc, #164]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	4926      	ldr	r1, [pc, #152]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800218a:	d105      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800218c:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a20      	ldr	r2, [pc, #128]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002196:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b2:	4918      	ldr	r1, [pc, #96]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021c2:	d105      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ea:	490a      	ldr	r1, [pc, #40]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002206:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002208:	7cbb      	ldrb	r3, [r7, #18]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e042      	b.n	80022b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7fe fb17 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2224      	movs	r2, #36	@ 0x24
 8002246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 ff12 	bl	800308c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fc43 	bl	8002af4 <UART_SetConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e01b      	b.n	80022b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 ff91 	bl	80031d0 <UART_CheckIdleState>
 80022ae:	4603      	mov	r3, r0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d17b      	bne.n	80023ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_UART_Transmit+0x26>
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e074      	b.n	80023cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2221      	movs	r2, #33	@ 0x21
 80022ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022f2:	f7fe fc49 	bl	8000b88 <HAL_GetTick>
 80022f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002310:	d108      	bne.n	8002324 <HAL_UART_Transmit+0x6c>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	e003      	b.n	800232c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800232c:	e030      	b.n	8002390 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2200      	movs	r2, #0
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fff3 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e03d      	b.n	80023cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10b      	bne.n	800236e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002364:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	3302      	adds	r3, #2
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	e007      	b.n	800237e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3301      	adds	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1c8      	bne.n	800232e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2200      	movs	r2, #0
 80023a4:	2140      	movs	r1, #64	@ 0x40
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 ffbc 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e006      	b.n	80023cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	@ 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d137      	bne.n	800245c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_UART_Receive_IT+0x24>
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e030      	b.n	800245e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <HAL_UART_Receive_IT+0x94>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d01f      	beq.n	800244c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	e853 3f00 	ldrex	r3, [r3]
 8002426:	613b      	str	r3, [r7, #16]
   return(result);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	623b      	str	r3, [r7, #32]
 800243a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243c:	69f9      	ldr	r1, [r7, #28]
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	e841 2300 	strex	r3, r2, [r1]
 8002444:	61bb      	str	r3, [r7, #24]
   return(result);
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e6      	bne.n	800241a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	461a      	mov	r2, r3
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 ffd4 	bl	8003400 <UART_Start_Receive_IT>
 8002458:	4603      	mov	r3, r0
 800245a:	e000      	b.n	800245e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3728      	adds	r7, #40	@ 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40008000 	.word	0x40008000

0800246c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b0ba      	sub	sp, #232	@ 0xe8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002492:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002496:	f640 030f 	movw	r3, #2063	@ 0x80f
 800249a:	4013      	ands	r3, r2
 800249c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80024a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11b      	bne.n	80024e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80024a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80024c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 82e3 	beq.w	8002a9c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
      }
      return;
 80024de:	e2dd      	b.n	8002a9c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8123 	beq.w	8002730 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80024ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80024ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002724 <HAL_UART_IRQHandler+0x2b8>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80024f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80024fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002728 <HAL_UART_IRQHandler+0x2bc>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8116 	beq.w	8002730 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d011      	beq.n	8002534 <HAL_UART_IRQHandler+0xc8>
 8002510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d011      	beq.n	8002564 <HAL_UART_IRQHandler+0xf8>
 8002540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2202      	movs	r2, #2
 8002552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255a:	f043 0204 	orr.w	r2, r3, #4
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d011      	beq.n	8002594 <HAL_UART_IRQHandler+0x128>
 8002570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2204      	movs	r2, #4
 8002582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	f043 0202 	orr.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d017      	beq.n	80025d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80025ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80025b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002724 <HAL_UART_IRQHandler+0x2b8>)
 80025b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2208      	movs	r2, #8
 80025be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	f043 0208 	orr.w	r2, r3, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <HAL_UART_IRQHandler+0x196>
 80025dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8249 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800261a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002656:	2b40      	cmp	r3, #64	@ 0x40
 8002658:	d005      	beq.n	8002666 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800265a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800265e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002662:	2b00      	cmp	r3, #0
 8002664:	d054      	beq.n	8002710 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 ffec 	bl	8003644 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002676:	2b40      	cmp	r3, #64	@ 0x40
 8002678:	d146      	bne.n	8002708 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3308      	adds	r3, #8
 8002680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002688:	e853 3f00 	ldrex	r3, [r3]
 800268c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002690:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3308      	adds	r3, #8
 80026a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1d9      	bne.n	800267a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d017      	beq.n	8002700 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026d6:	4a15      	ldr	r2, [pc, #84]	@ (800272c <HAL_UART_IRQHandler+0x2c0>)
 80026d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fbc5 	bl	8000e70 <HAL_DMA_Abort_IT>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d019      	beq.n	8002720 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80026fa:	4610      	mov	r0, r2
 80026fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fe:	e00f      	b.n	8002720 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f9e1 	bl	8002ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002706:	e00b      	b.n	8002720 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f9dd 	bl	8002ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270e:	e007      	b.n	8002720 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f9d9 	bl	8002ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800271e:	e1bf      	b.n	8002aa0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	bf00      	nop
    return;
 8002722:	e1bd      	b.n	8002aa0 <HAL_UART_IRQHandler+0x634>
 8002724:	10000001 	.word	0x10000001
 8002728:	04000120 	.word	0x04000120
 800272c:	08003711 	.word	0x08003711

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 8153 	bne.w	80029e0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800273a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 814c 	beq.w	80029e0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8145 	beq.w	80029e0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2210      	movs	r2, #16
 800275c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002768:	2b40      	cmp	r3, #64	@ 0x40
 800276a:	f040 80bb 	bne.w	80028e4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800277c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 818f 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800278c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002790:	429a      	cmp	r2, r3
 8002792:	f080 8187 	bcs.w	8002aa4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800279c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 8087 	bne.w	80028c2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1da      	bne.n	80027b4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3308      	adds	r3, #8
 8002804:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800280e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3308      	adds	r3, #8
 800281e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002822:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002826:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002828:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800282a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e1      	bne.n	80027fe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3308      	adds	r3, #8
 8002840:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800284a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800284c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3308      	adds	r3, #8
 800285a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800285e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002860:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002862:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002864:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800286c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e3      	bne.n	800283a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002888:	e853 3f00 	ldrex	r3, [r3]
 800288c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800288e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002890:	f023 0310 	bic.w	r3, r3, #16
 8002894:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e4      	bne.n	8002880 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fa7e 	bl	8000dbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8fd 	bl	8002adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028e2:	e0df      	b.n	8002aa4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80d1 	beq.w	8002aa8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80cc 	beq.w	8002aa8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800291e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002924:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002932:	647b      	str	r3, [r7, #68]	@ 0x44
 8002934:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002938:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e4      	bne.n	8002910 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3308      	adds	r3, #8
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	e853 3f00 	ldrex	r3, [r3]
 8002954:	623b      	str	r3, [r7, #32]
   return(result);
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3308      	adds	r3, #8
 800296a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800296e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e1      	bne.n	8002946 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0310 	bic.w	r3, r3, #16
 80029aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029bc:	69b9      	ldr	r1, [r7, #24]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	e841 2300 	strex	r3, r2, [r1]
 80029c4:	617b      	str	r3, [r7, #20]
   return(result);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e4      	bne.n	8002996 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f87f 	bl	8002adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029de:	e063      	b.n	8002aa8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <HAL_UART_IRQHandler+0x59e>
 80029ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f001 fbe2 	bl	80041cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a08:	e051      	b.n	8002aae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d014      	beq.n	8002a40 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d03a      	beq.n	8002aac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
    }
    return;
 8002a3e:	e035      	b.n	8002aac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_UART_IRQHandler+0x5f4>
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fe6f 	bl	800373c <UART_EndTransmit_IT>
    return;
 8002a5e:	e026      	b.n	8002aae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_UART_IRQHandler+0x614>
 8002a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f001 fbbb 	bl	80041f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a7e:	e016      	b.n	8002aae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d010      	beq.n	8002aae <HAL_UART_IRQHandler+0x642>
 8002a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	da0c      	bge.n	8002aae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f001 fba3 	bl	80041e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a9a:	e008      	b.n	8002aae <HAL_UART_IRQHandler+0x642>
      return;
 8002a9c:	bf00      	nop
 8002a9e:	e006      	b.n	8002aae <HAL_UART_IRQHandler+0x642>
    return;
 8002aa0:	bf00      	nop
 8002aa2:	e004      	b.n	8002aae <HAL_UART_IRQHandler+0x642>
      return;
 8002aa4:	bf00      	nop
 8002aa6:	e002      	b.n	8002aae <HAL_UART_IRQHandler+0x642>
      return;
 8002aa8:	bf00      	nop
 8002aaa:	e000      	b.n	8002aae <HAL_UART_IRQHandler+0x642>
    return;
 8002aac:	bf00      	nop
  }
}
 8002aae:	37e8      	adds	r7, #232	@ 0xe8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b08c      	sub	sp, #48	@ 0x30
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4bab      	ldr	r3, [pc, #684]	@ (8002dd0 <UART_SetConfig+0x2dc>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4aa0      	ldr	r2, [pc, #640]	@ (8002dd4 <UART_SetConfig+0x2e0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002b6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7e:	f023 010f 	bic.w	r1, r3, #15
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a91      	ldr	r2, [pc, #580]	@ (8002dd8 <UART_SetConfig+0x2e4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d125      	bne.n	8002be4 <UART_SetConfig+0xf0>
 8002b98:	4b90      	ldr	r3, [pc, #576]	@ (8002ddc <UART_SetConfig+0x2e8>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d81a      	bhi.n	8002bdc <UART_SetConfig+0xe8>
 8002ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bac <UART_SetConfig+0xb8>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bcd 	.word	0x08002bcd
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002bd5 	.word	0x08002bd5
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc2:	e0d6      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bca:	e0d2      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd2:	e0ce      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bda:	e0ca      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002be2:	e0c6      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a7d      	ldr	r2, [pc, #500]	@ (8002de0 <UART_SetConfig+0x2ec>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d138      	bne.n	8002c60 <UART_SetConfig+0x16c>
 8002bee:	4b7b      	ldr	r3, [pc, #492]	@ (8002ddc <UART_SetConfig+0x2e8>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d82d      	bhi.n	8002c58 <UART_SetConfig+0x164>
 8002bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002c04 <UART_SetConfig+0x110>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c39 	.word	0x08002c39
 8002c08:	08002c59 	.word	0x08002c59
 8002c0c:	08002c59 	.word	0x08002c59
 8002c10:	08002c59 	.word	0x08002c59
 8002c14:	08002c49 	.word	0x08002c49
 8002c18:	08002c59 	.word	0x08002c59
 8002c1c:	08002c59 	.word	0x08002c59
 8002c20:	08002c59 	.word	0x08002c59
 8002c24:	08002c41 	.word	0x08002c41
 8002c28:	08002c59 	.word	0x08002c59
 8002c2c:	08002c59 	.word	0x08002c59
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	08002c51 	.word	0x08002c51
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c3e:	e098      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002c40:	2302      	movs	r3, #2
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c46:	e094      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c4e:	e090      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002c50:	2308      	movs	r3, #8
 8002c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c56:	e08c      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c5e:	e088      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a5f      	ldr	r2, [pc, #380]	@ (8002de4 <UART_SetConfig+0x2f0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d125      	bne.n	8002cb6 <UART_SetConfig+0x1c2>
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ddc <UART_SetConfig+0x2e8>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c74:	2b30      	cmp	r3, #48	@ 0x30
 8002c76:	d016      	beq.n	8002ca6 <UART_SetConfig+0x1b2>
 8002c78:	2b30      	cmp	r3, #48	@ 0x30
 8002c7a:	d818      	bhi.n	8002cae <UART_SetConfig+0x1ba>
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d00a      	beq.n	8002c96 <UART_SetConfig+0x1a2>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d814      	bhi.n	8002cae <UART_SetConfig+0x1ba>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <UART_SetConfig+0x19a>
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d008      	beq.n	8002c9e <UART_SetConfig+0x1aa>
 8002c8c:	e00f      	b.n	8002cae <UART_SetConfig+0x1ba>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c94:	e06d      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002c96:	2302      	movs	r3, #2
 8002c98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c9c:	e069      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ca4:	e065      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cac:	e061      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002cae:	2310      	movs	r3, #16
 8002cb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cb4:	e05d      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a4b      	ldr	r2, [pc, #300]	@ (8002de8 <UART_SetConfig+0x2f4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d125      	bne.n	8002d0c <UART_SetConfig+0x218>
 8002cc0:	4b46      	ldr	r3, [pc, #280]	@ (8002ddc <UART_SetConfig+0x2e8>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002cca:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ccc:	d016      	beq.n	8002cfc <UART_SetConfig+0x208>
 8002cce:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cd0:	d818      	bhi.n	8002d04 <UART_SetConfig+0x210>
 8002cd2:	2b80      	cmp	r3, #128	@ 0x80
 8002cd4:	d00a      	beq.n	8002cec <UART_SetConfig+0x1f8>
 8002cd6:	2b80      	cmp	r3, #128	@ 0x80
 8002cd8:	d814      	bhi.n	8002d04 <UART_SetConfig+0x210>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <UART_SetConfig+0x1f0>
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	d008      	beq.n	8002cf4 <UART_SetConfig+0x200>
 8002ce2:	e00f      	b.n	8002d04 <UART_SetConfig+0x210>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cea:	e042      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002cec:	2302      	movs	r3, #2
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf2:	e03e      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cfa:	e03a      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d02:	e036      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002d04:	2310      	movs	r3, #16
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d0a:	e032      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <UART_SetConfig+0x2e0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d12a      	bne.n	8002d6c <UART_SetConfig+0x278>
 8002d16:	4b31      	ldr	r3, [pc, #196]	@ (8002ddc <UART_SetConfig+0x2e8>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d24:	d01a      	beq.n	8002d5c <UART_SetConfig+0x268>
 8002d26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d2a:	d81b      	bhi.n	8002d64 <UART_SetConfig+0x270>
 8002d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d30:	d00c      	beq.n	8002d4c <UART_SetConfig+0x258>
 8002d32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d36:	d815      	bhi.n	8002d64 <UART_SetConfig+0x270>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <UART_SetConfig+0x250>
 8002d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d40:	d008      	beq.n	8002d54 <UART_SetConfig+0x260>
 8002d42:	e00f      	b.n	8002d64 <UART_SetConfig+0x270>
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d4a:	e012      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d52:	e00e      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002d54:	2304      	movs	r3, #4
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5a:	e00a      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d62:	e006      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002d64:	2310      	movs	r3, #16
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6a:	e002      	b.n	8002d72 <UART_SetConfig+0x27e>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <UART_SetConfig+0x2e0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	f040 80a8 	bne.w	8002ece <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d834      	bhi.n	8002df0 <UART_SetConfig+0x2fc>
 8002d86:	a201      	add	r2, pc, #4	@ (adr r2, 8002d8c <UART_SetConfig+0x298>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002db1 	.word	0x08002db1
 8002d90:	08002df1 	.word	0x08002df1
 8002d94:	08002db9 	.word	0x08002db9
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002dbf 	.word	0x08002dbf
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002df1 	.word	0x08002df1
 8002da8:	08002df1 	.word	0x08002df1
 8002dac:	08002dc7 	.word	0x08002dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db0:	f7fe ffd0 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8002db4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002db6:	e021      	b.n	8002dfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <UART_SetConfig+0x2f8>)
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dbc:	e01e      	b.n	8002dfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dbe:	f7fe ff5b 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002dc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dc4:	e01a      	b.n	8002dfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dcc:	e016      	b.n	8002dfc <UART_SetConfig+0x308>
 8002dce:	bf00      	nop
 8002dd0:	cfff69f3 	.word	0xcfff69f3
 8002dd4:	40008000 	.word	0x40008000
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40004400 	.word	0x40004400
 8002de4:	40004800 	.word	0x40004800
 8002de8:	40004c00 	.word	0x40004c00
 8002dec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002dfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 812a 	beq.w	8003058 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	4a9e      	ldr	r2, [pc, #632]	@ (8003084 <UART_SetConfig+0x590>)
 8002e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d305      	bcc.n	8002e34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d903      	bls.n	8002e3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e3a:	e10d      	b.n	8003058 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	60fa      	str	r2, [r7, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	4a8e      	ldr	r2, [pc, #568]	@ (8003084 <UART_SetConfig+0x590>)
 8002e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2200      	movs	r2, #0
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e5e:	f7fd f9e3 	bl	8000228 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	020b      	lsls	r3, r1, #8
 8002e74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e78:	0202      	lsls	r2, r0, #8
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	6849      	ldr	r1, [r1, #4]
 8002e7e:	0849      	lsrs	r1, r1, #1
 8002e80:	2000      	movs	r0, #0
 8002e82:	460c      	mov	r4, r1
 8002e84:	4605      	mov	r5, r0
 8002e86:	eb12 0804 	adds.w	r8, r2, r4
 8002e8a:	eb43 0905 	adc.w	r9, r3, r5
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	469a      	mov	sl, r3
 8002e96:	4693      	mov	fp, r2
 8002e98:	4652      	mov	r2, sl
 8002e9a:	465b      	mov	r3, fp
 8002e9c:	4640      	mov	r0, r8
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	f7fd f9c2 	bl	8000228 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eb2:	d308      	bcc.n	8002ec6 <UART_SetConfig+0x3d2>
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eba:	d204      	bcs.n	8002ec6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	e0c8      	b.n	8003058 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ecc:	e0c4      	b.n	8003058 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed6:	d167      	bne.n	8002fa8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d828      	bhi.n	8002f32 <UART_SetConfig+0x43e>
 8002ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <UART_SetConfig+0x3f4>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f0d 	.word	0x08002f0d
 8002eec:	08002f15 	.word	0x08002f15
 8002ef0:	08002f1d 	.word	0x08002f1d
 8002ef4:	08002f33 	.word	0x08002f33
 8002ef8:	08002f23 	.word	0x08002f23
 8002efc:	08002f33 	.word	0x08002f33
 8002f00:	08002f33 	.word	0x08002f33
 8002f04:	08002f33 	.word	0x08002f33
 8002f08:	08002f2b 	.word	0x08002f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f0c:	f7fe ff22 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8002f10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f12:	e014      	b.n	8002f3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f14:	f7fe ff34 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8002f18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f1a:	e010      	b.n	8002f3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003088 <UART_SetConfig+0x594>)
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f20:	e00d      	b.n	8002f3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f22:	f7fe fea9 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002f26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f28:	e009      	b.n	8002f3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f30:	e005      	b.n	8002f3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8089 	beq.w	8003058 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	4a4e      	ldr	r2, [pc, #312]	@ (8003084 <UART_SetConfig+0x590>)
 8002f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f50:	461a      	mov	r2, r3
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f58:	005a      	lsls	r2, r3, #1
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	441a      	add	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d916      	bls.n	8002fa0 <UART_SetConfig+0x4ac>
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f78:	d212      	bcs.n	8002fa0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f023 030f 	bic.w	r3, r3, #15
 8002f82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	8bfb      	ldrh	r3, [r7, #30]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	8bfa      	ldrh	r2, [r7, #30]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e05b      	b.n	8003058 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002fa6:	e057      	b.n	8003058 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d828      	bhi.n	8003002 <UART_SetConfig+0x50e>
 8002fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <UART_SetConfig+0x4c4>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fdd 	.word	0x08002fdd
 8002fbc:	08002fe5 	.word	0x08002fe5
 8002fc0:	08002fed 	.word	0x08002fed
 8002fc4:	08003003 	.word	0x08003003
 8002fc8:	08002ff3 	.word	0x08002ff3
 8002fcc:	08003003 	.word	0x08003003
 8002fd0:	08003003 	.word	0x08003003
 8002fd4:	08003003 	.word	0x08003003
 8002fd8:	08002ffb 	.word	0x08002ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7fe feba 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fe2:	e014      	b.n	800300e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7fe fecc 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8002fe8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fea:	e010      	b.n	800300e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b26      	ldr	r3, [pc, #152]	@ (8003088 <UART_SetConfig+0x594>)
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ff0:	e00d      	b.n	800300e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe fe41 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002ff6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ff8:	e009      	b.n	800300e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003000:	e005      	b.n	800300e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800300c:	bf00      	nop
    }

    if (pclk != 0U)
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d021      	beq.n	8003058 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	4a1a      	ldr	r2, [pc, #104]	@ (8003084 <UART_SetConfig+0x590>)
 800301a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800301e:	461a      	mov	r2, r3
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	fbb3 f2f2 	udiv	r2, r3, r2
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	441a      	add	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d909      	bls.n	8003052 <UART_SetConfig+0x55e>
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d205      	bcs.n	8003052 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	b29a      	uxth	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	e002      	b.n	8003058 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2201      	movs	r2, #1
 800305c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2201      	movs	r2, #1
 8003064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2200      	movs	r2, #0
 800306c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003074:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003078:	4618      	mov	r0, r3
 800307a:	3730      	adds	r7, #48	@ 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003082:	bf00      	nop
 8003084:	08004498 	.word	0x08004498
 8003088:	00f42400 	.word	0x00f42400

0800308c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01a      	beq.n	80031a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800318a:	d10a      	bne.n	80031a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
  }
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b098      	sub	sp, #96	@ 0x60
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031e0:	f7fd fcd2 	bl	8000b88 <HAL_GetTick>
 80031e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d12f      	bne.n	8003254 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fc:	2200      	movs	r2, #0
 80031fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f88e 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d022      	beq.n	8003254 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800321c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003222:	653b      	str	r3, [r7, #80]	@ 0x50
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800322c:	647b      	str	r3, [r7, #68]	@ 0x44
 800322e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800323a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e6      	bne.n	800320e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e063      	b.n	800331c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d149      	bne.n	80032f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003262:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326a:	2200      	movs	r2, #0
 800326c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f857 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d03c      	beq.n	80032f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	623b      	str	r3, [r7, #32]
   return(result);
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800329a:	633b      	str	r3, [r7, #48]	@ 0x30
 800329c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e6      	bne.n	800327c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3308      	adds	r3, #8
 80032b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032ce:	61fa      	str	r2, [r7, #28]
 80032d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	69b9      	ldr	r1, [r7, #24]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	617b      	str	r3, [r7, #20]
   return(result);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e5      	bne.n	80032ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e012      	b.n	800331c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3758      	adds	r7, #88	@ 0x58
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003334:	e04f      	b.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800333c:	d04b      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fd fc23 	bl	8000b88 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <UART_WaitOnFlagUntilTimeout+0x30>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e04e      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d037      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b80      	cmp	r3, #128	@ 0x80
 800336a:	d034      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b40      	cmp	r3, #64	@ 0x40
 8003370:	d031      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d110      	bne.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2208      	movs	r2, #8
 8003386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f95b 	bl	8003644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2208      	movs	r2, #8
 8003392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e029      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b0:	d111      	bne.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f941 	bl	8003644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e00f      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d0a0      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003400:	b480      	push	{r7}
 8003402:	b0a3      	sub	sp, #140	@ 0x8c
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	4613      	mov	r3, r2
 800340c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003432:	d10e      	bne.n	8003452 <UART_Start_Receive_IT+0x52>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <UART_Start_Receive_IT+0x48>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003442:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003446:	e02d      	b.n	80034a4 <UART_Start_Receive_IT+0xa4>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	22ff      	movs	r2, #255	@ 0xff
 800344c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003450:	e028      	b.n	80034a4 <UART_Start_Receive_IT+0xa4>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <UART_Start_Receive_IT+0x76>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <UART_Start_Receive_IT+0x6c>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	22ff      	movs	r2, #255	@ 0xff
 8003466:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800346a:	e01b      	b.n	80034a4 <UART_Start_Receive_IT+0xa4>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	227f      	movs	r2, #127	@ 0x7f
 8003470:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003474:	e016      	b.n	80034a4 <UART_Start_Receive_IT+0xa4>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800347e:	d10d      	bne.n	800349c <UART_Start_Receive_IT+0x9c>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <UART_Start_Receive_IT+0x92>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	227f      	movs	r2, #127	@ 0x7f
 800348c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003490:	e008      	b.n	80034a4 <UART_Start_Receive_IT+0xa4>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	223f      	movs	r2, #63	@ 0x3f
 8003496:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800349a:	e003      	b.n	80034a4 <UART_Start_Receive_IT+0xa4>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2222      	movs	r2, #34	@ 0x22
 80034b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3308      	adds	r3, #8
 80034ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034be:	e853 3f00 	ldrex	r3, [r3]
 80034c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80034c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3308      	adds	r3, #8
 80034d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80034d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80034da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80034de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80034e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e3      	bne.n	80034b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034f4:	d14f      	bne.n	8003596 <UART_Start_Receive_IT+0x196>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d349      	bcc.n	8003596 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350a:	d107      	bne.n	800351c <UART_Start_Receive_IT+0x11c>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a47      	ldr	r2, [pc, #284]	@ (8003634 <UART_Start_Receive_IT+0x234>)
 8003518:	675a      	str	r2, [r3, #116]	@ 0x74
 800351a:	e002      	b.n	8003522 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a46      	ldr	r2, [pc, #280]	@ (8003638 <UART_Start_Receive_IT+0x238>)
 8003520:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01a      	beq.n	8003560 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800353a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800354c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800354e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003552:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800355a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e4      	bne.n	800352a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003576:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3308      	adds	r3, #8
 800357e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003580:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003582:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800358e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e5      	bne.n	8003560 <UART_Start_Receive_IT+0x160>
 8003594:	e046      	b.n	8003624 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359e:	d107      	bne.n	80035b0 <UART_Start_Receive_IT+0x1b0>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a24      	ldr	r2, [pc, #144]	@ (800363c <UART_Start_Receive_IT+0x23c>)
 80035ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80035ae:	e002      	b.n	80035b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a23      	ldr	r2, [pc, #140]	@ (8003640 <UART_Start_Receive_IT+0x240>)
 80035b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d019      	beq.n	80035f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80035d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035de:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80035ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e6      	bne.n	80035be <UART_Start_Receive_IT+0x1be>
 80035f0:	e018      	b.n	8003624 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f043 0320 	orr.w	r3, r3, #32
 8003606:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003610:	623b      	str	r3, [r7, #32]
 8003612:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	69f9      	ldr	r1, [r7, #28]
 8003616:	6a3a      	ldr	r2, [r7, #32]
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	61bb      	str	r3, [r7, #24]
   return(result);
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	378c      	adds	r7, #140	@ 0x8c
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	08003e65 	.word	0x08003e65
 8003638:	08003b05 	.word	0x08003b05
 800363c:	0800394d 	.word	0x0800394d
 8003640:	08003795 	.word	0x08003795

08003644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b095      	sub	sp, #84	@ 0x54
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800366a:	643b      	str	r3, [r7, #64]	@ 0x40
 800366c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e6      	bne.n	800364c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3308      	adds	r3, #8
 8003684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	61fb      	str	r3, [r7, #28]
   return(result);
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3308      	adds	r3, #8
 80036a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e3      	bne.n	800367e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d118      	bne.n	80036f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e6      	bne.n	80036be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003704:	bf00      	nop
 8003706:	3754      	adds	r7, #84	@ 0x54
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff f9ca 	bl	8002ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	60bb      	str	r3, [r7, #8]
   return(result);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6979      	ldr	r1, [r7, #20]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	613b      	str	r3, [r7, #16]
   return(result);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e6      	bne.n	8003744 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff f995 	bl	8002ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378a:	bf00      	nop
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b09c      	sub	sp, #112	@ 0x70
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80037a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037ac:	2b22      	cmp	r3, #34	@ 0x22
 80037ae:	f040 80be 	bne.w	800392e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80037c0:	b2d9      	uxtb	r1, r3
 80037c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	400a      	ands	r2, r1
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 80a1 	bne.w	800393e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800380a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800380c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800381a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800381c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003820:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e6      	bne.n	80037fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3308      	adds	r3, #8
 8003834:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800383e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	667b      	str	r3, [r7, #100]	@ 0x64
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3308      	adds	r3, #8
 800384c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800384e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003850:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800385c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e5      	bne.n	800382e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a33      	ldr	r2, [pc, #204]	@ (8003948 <UART_RxISR_8BIT+0x1b4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d01f      	beq.n	80038c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	623b      	str	r3, [r7, #32]
   return(result);
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e6      	bne.n	800388e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d12e      	bne.n	8003926 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	60fb      	str	r3, [r7, #12]
   return(result);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	617b      	str	r3, [r7, #20]
   return(result);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e6      	bne.n	80038ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b10      	cmp	r3, #16
 800390c:	d103      	bne.n	8003916 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2210      	movs	r2, #16
 8003914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff f8dc 	bl	8002adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003924:	e00b      	b.n	800393e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fc ff3a 	bl	80007a0 <HAL_UART_RxCpltCallback>
}
 800392c:	e007      	b.n	800393e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699a      	ldr	r2, [r3, #24]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0208 	orr.w	r2, r2, #8
 800393c:	619a      	str	r2, [r3, #24]
}
 800393e:	bf00      	nop
 8003940:	3770      	adds	r7, #112	@ 0x70
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40008000 	.word	0x40008000

0800394c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b09c      	sub	sp, #112	@ 0x70
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800395a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003964:	2b22      	cmp	r3, #34	@ 0x22
 8003966:	f040 80be 	bne.w	8003ae6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003978:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800397a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800397e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003982:	4013      	ands	r3, r2
 8003984:	b29a      	uxth	r2, r3
 8003986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003988:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 80a1 	bne.w	8003af6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80039c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80039d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80039e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e6      	bne.n	80039b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3308      	adds	r3, #8
 8003a04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a06:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e5      	bne.n	80039e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a33      	ldr	r2, [pc, #204]	@ (8003b00 <UART_RxISR_16BIT+0x1b4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01f      	beq.n	8003a78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d018      	beq.n	8003a78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a66:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e6      	bne.n	8003a46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d12e      	bne.n	8003ade <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f023 0310 	bic.w	r3, r3, #16
 8003a9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6979      	ldr	r1, [r7, #20]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e6      	bne.n	8003a86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d103      	bne.n	8003ace <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2210      	movs	r2, #16
 8003acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff f800 	bl	8002adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003adc:	e00b      	b.n	8003af6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fc fe5e 	bl	80007a0 <HAL_UART_RxCpltCallback>
}
 8003ae4:	e007      	b.n	8003af6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0208 	orr.w	r2, r2, #8
 8003af4:	619a      	str	r2, [r3, #24]
}
 8003af6:	bf00      	nop
 8003af8:	3770      	adds	r7, #112	@ 0x70
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40008000 	.word	0x40008000

08003b04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b0ac      	sub	sp, #176	@ 0xb0
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003b12:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b3a:	2b22      	cmp	r3, #34	@ 0x22
 8003b3c:	f040 8182 	bne.w	8003e44 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003b46:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b4a:	e125      	b.n	8003d98 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8003b5a:	b2d9      	uxtb	r1, r3
 8003b5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	400a      	ands	r2, r1
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d053      	beq.n	8003c46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <UART_RxISR_8BIT_FIFOEN+0xca>
 8003baa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d011      	beq.n	8003bfe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2202      	movs	r2, #2
 8003bec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d011      	beq.n	8003c2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c24:	f043 0202 	orr.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fe ff45 	bl	8002ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 80a2 	bne.w	8003d98 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8003c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c78:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003c7c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8003c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e4      	bne.n	8003c54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003c9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3308      	adds	r3, #8
 8003cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cb2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003cb4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003cb8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003cc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e1      	bne.n	8003c8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a5f      	ldr	r2, [pc, #380]	@ (8003e5c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d021      	beq.n	8003d28 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01a      	beq.n	8003d28 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d16:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e4      	bne.n	8003cf2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d130      	bne.n	8003d92 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e4      	bne.n	8003d36 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d103      	bne.n	8003d82 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2210      	movs	r2, #16
 8003d80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fe fea6 	bl	8002adc <HAL_UARTEx_RxEventCallback>
 8003d90:	e002      	b.n	8003d98 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fc fd04 	bl	80007a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003d98:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d006      	beq.n	8003dae <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8003da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f47f aecf 	bne.w	8003b4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003db4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003db8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d049      	beq.n	8003e54 <UART_RxISR_8BIT_FIFOEN+0x350>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003dc6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d242      	bcs.n	8003e54 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e3      	bne.n	8003dce <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a15      	ldr	r2, [pc, #84]	@ (8003e60 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003e0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f043 0320 	orr.w	r3, r3, #32
 8003e20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6979      	ldr	r1, [r7, #20]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e4      	bne.n	8003e0c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e42:	e007      	b.n	8003e54 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0208 	orr.w	r2, r2, #8
 8003e52:	619a      	str	r2, [r3, #24]
}
 8003e54:	bf00      	nop
 8003e56:	37b0      	adds	r7, #176	@ 0xb0
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40008000 	.word	0x40008000
 8003e60:	08003795 	.word	0x08003795

08003e64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0ae      	sub	sp, #184	@ 0xb8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003e72:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e9a:	2b22      	cmp	r3, #34	@ 0x22
 8003e9c:	f040 8186 	bne.w	80041ac <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003ea6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003eaa:	e129      	b.n	8004100 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8003ebe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8003ec2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ece:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	1c9a      	adds	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003ef6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d053      	beq.n	8003faa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d011      	beq.n	8003f32 <UART_RxISR_16BIT_FIFOEN+0xce>
 8003f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f28:	f043 0201 	orr.w	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d011      	beq.n	8003f62 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8003f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f58:	f043 0204 	orr.w	r2, r3, #4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d011      	beq.n	8003f92 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8003f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f88:	f043 0202 	orr.w	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d006      	beq.n	8003faa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fe fd93 	bl	8002ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f040 80a4 	bne.w	8004100 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fde:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e2      	bne.n	8003fb8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800401a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800401c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004020:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e1      	bne.n	8003ff2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a5f      	ldr	r2, [pc, #380]	@ (80041c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d021      	beq.n	8004090 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01a      	beq.n	8004090 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800406a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800406e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800407c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800407e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004082:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800408a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e4      	bne.n	800405a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d130      	bne.n	80040fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	f023 0310 	bic.w	r3, r3, #16
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e4      	bne.n	800409e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d103      	bne.n	80040ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2210      	movs	r2, #16
 80040e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fe fcf2 	bl	8002adc <HAL_UARTEx_RxEventCallback>
 80040f8:	e002      	b.n	8004100 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fb50 	bl	80007a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004100:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004104:	2b00      	cmp	r3, #0
 8004106:	d006      	beq.n	8004116 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	f47f aecb 	bne.w	8003eac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800411c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004120:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004124:	2b00      	cmp	r3, #0
 8004126:	d049      	beq.n	80041bc <UART_RxISR_16BIT_FIFOEN+0x358>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800412e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004132:	429a      	cmp	r2, r3
 8004134:	d242      	bcs.n	80041bc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	623b      	str	r3, [r7, #32]
   return(result);
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800414c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3308      	adds	r3, #8
 8004156:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800415a:	633a      	str	r2, [r7, #48]	@ 0x30
 800415c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e3      	bne.n	8004136 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a15      	ldr	r2, [pc, #84]	@ (80041c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004172:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	60fb      	str	r3, [r7, #12]
   return(result);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	69b9      	ldr	r1, [r7, #24]
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	617b      	str	r3, [r7, #20]
   return(result);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e4      	bne.n	8004174 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041aa:	e007      	b.n	80041bc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	619a      	str	r2, [r3, #24]
}
 80041bc:	bf00      	nop
 80041be:	37b8      	adds	r7, #184	@ 0xb8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40008000 	.word	0x40008000
 80041c8:	0800394d 	.word	0x0800394d

080041cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_UARTEx_DisableFifoMode+0x16>
 800421a:	2302      	movs	r3, #2
 800421c:	e027      	b.n	800426e <HAL_UARTEx_DisableFifoMode+0x66>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2224      	movs	r2, #36	@ 0x24
 800422a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800424c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800428e:	2302      	movs	r3, #2
 8004290:	e02d      	b.n	80042ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2224      	movs	r2, #36	@ 0x24
 800429e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f850 	bl	8004374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800430a:	2302      	movs	r3, #2
 800430c:	e02d      	b.n	800436a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	@ 0x24
 800431a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f812 	bl	8004374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004394:	e031      	b.n	80043fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004396:	2308      	movs	r3, #8
 8004398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800439a:	2308      	movs	r3, #8
 800439c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	0e5b      	lsrs	r3, r3, #25
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	0f5b      	lsrs	r3, r3, #29
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043be:	7bbb      	ldrb	r3, [r7, #14]
 80043c0:	7b3a      	ldrb	r2, [r7, #12]
 80043c2:	4911      	ldr	r1, [pc, #68]	@ (8004408 <UARTEx_SetNbDataToProcess+0x94>)
 80043c4:	5c8a      	ldrb	r2, [r1, r2]
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043ca:	7b3a      	ldrb	r2, [r7, #12]
 80043cc:	490f      	ldr	r1, [pc, #60]	@ (800440c <UARTEx_SetNbDataToProcess+0x98>)
 80043ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	7b7a      	ldrb	r2, [r7, #13]
 80043e0:	4909      	ldr	r1, [pc, #36]	@ (8004408 <UARTEx_SetNbDataToProcess+0x94>)
 80043e2:	5c8a      	ldrb	r2, [r1, r2]
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043e8:	7b7a      	ldrb	r2, [r7, #13]
 80043ea:	4908      	ldr	r1, [pc, #32]	@ (800440c <UARTEx_SetNbDataToProcess+0x98>)
 80043ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	080044b0 	.word	0x080044b0
 800440c:	080044b8 	.word	0x080044b8

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4d0d      	ldr	r5, [pc, #52]	@ (8004458 <__libc_init_array+0x38>)
 8004424:	4c0d      	ldr	r4, [pc, #52]	@ (800445c <__libc_init_array+0x3c>)
 8004426:	1b64      	subs	r4, r4, r5
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	2600      	movs	r6, #0
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	4d0b      	ldr	r5, [pc, #44]	@ (8004460 <__libc_init_array+0x40>)
 8004432:	4c0c      	ldr	r4, [pc, #48]	@ (8004464 <__libc_init_array+0x44>)
 8004434:	f000 f818 	bl	8004468 <_init>
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	2600      	movs	r6, #0
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	080044c8 	.word	0x080044c8
 800445c:	080044c8 	.word	0x080044c8
 8004460:	080044c8 	.word	0x080044c8
 8004464:	080044cc 	.word	0x080044cc

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
