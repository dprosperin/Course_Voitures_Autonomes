
multiperiph_base_test_tp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a264  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800a448  0800a448  0000b448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c8  0800a8c8  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c8  0800a8c8  0000b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d0  0800a8d0  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d0  0800a8d0  0000b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8d4  0800a8d4  0000b8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800a8d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001ec  0800aac4  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800aac4  0000c4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016938  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdd  00000000  00000000  00022b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00025b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f0e  00000000  00000000  00026eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002061d  00000000  00000000  00027dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017aa1  00000000  00000000  000483e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccfdb  00000000  00000000  0005fe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ce5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066fc  00000000  00000000  0012cea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  001335a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a42c 	.word	0x0800a42c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800a42c 	.word	0x0800a42c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800103a:	4a20      	ldr	r2, [pc, #128]	@ (80010bc <MX_FDCAN1_Init+0x88>)
 800103c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001052:	2200      	movs	r2, #0
 8001054:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001058:	2200      	movs	r2, #0
 800105a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800105e:	2200      	movs	r2, #0
 8001060:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001064:	2211      	movs	r2, #17
 8001066:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800106a:	2201      	movs	r2, #1
 800106c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001070:	2207      	movs	r2, #7
 8001072:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001076:	2202      	movs	r2, #2
 8001078:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800107c:	2201      	movs	r2, #1
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001082:	2201      	movs	r2, #1
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001088:	2201      	movs	r2, #1
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800108e:	2201      	movs	r2, #1
 8001090:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 80010a6:	f000 ffa7 	bl	8001ff8 <HAL_FDCAN_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80010b0:	f000 fab6 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000208 	.word	0x20000208
 80010bc:	40006400 	.word	0x40006400

080010c0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09a      	sub	sp, #104	@ 0x68
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	2244      	movs	r2, #68	@ 0x44
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 fdce 	bl	8006c82 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a24      	ldr	r2, [pc, #144]	@ (800117c <HAL_FDCAN_MspInit+0xbc>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d141      	bne.n	8001174 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80010f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fc49 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800110c:	f000 fa88 	bl	8001620 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 8001112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001114:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 8001116:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800111a:	6593      	str	r3, [r2, #88]	@ 0x58
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001140:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001144:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001152:	2309      	movs	r3, #9
 8001154:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001160:	f001 fc9e 	bl	8002aa0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2015      	movs	r0, #21
 800116a:	f000 ff10 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800116e:	2015      	movs	r0, #21
 8001170:	f000 ff27 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3768      	adds	r7, #104	@ 0x68
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40006400 	.word	0x40006400
 8001180:	40021000 	.word	0x40021000

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_GPIO_Init+0x78>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dir_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <MX_GPIO_Init+0x7c>)
 80011d2:	f001 fde7 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = dir_Pin|LD2_Pin;
 80011d6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MX_GPIO_Init+0x7c>)
 80011f0:	f001 fc56 	bl	8002aa0 <HAL_GPIO_Init>

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400
 8001204:	00000000 	.word	0x00000000

08001208 <calcul_angle>:
uint8_t torque[10] = {0xFF, 0xFF, 0x0A, 0, 0x03, 0,0, 0x34, 0x01,0}; //Trame pour la fonction send_torque
uint8_t Iposition[12] = {0xFF, 0xFF, 0x0c, 0, 0x05, 0,0, 0,0, 0x04,0 , 0x7}; //Trame pour la fonction send_Iposition
uint8_t change_acele[9]={0xff,0xff,0,0x01,0,0,14,1,0x00};

uint16_t calcul_angle(double angle) // Calcul la valeur à envoyé en fonction d'un angle donné (+ ou - 90° de chaque côté)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	ed87 0b00 	vstr	d0, [r7]
	uint16_t valeur;

	valeur = 512 + (angle/0.326);
 8001212:	a30f      	add	r3, pc, #60	@ (adr r3, 8001250 <calcul_angle+0x48>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800121c:	f7ff fb3e 	bl	800089c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001230:	f7ff f854 	bl	80002dc <__adddf3>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fcdc 	bl	8000bf8 <__aeabi_d2uiz>
 8001240:	4603      	mov	r3, r0
 8001242:	81fb      	strh	r3, [r7, #14]

	return valeur;
 8001244:	89fb      	ldrh	r3, [r7, #14]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	1a9fbe77 	.word	0x1a9fbe77
 8001254:	3fd4dd2f 	.word	0x3fd4dd2f

08001258 <calcul_cheksum1>:

uint8_t calcul_cheksum1(uint8_t size, uint8_t *trame) //Calcul une valeur à mettre dans la trame en fonction de toutes les
{													  //autres valeurs de la trame
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t checksum1=0;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
	checksum1=trame[2]^trame[3]^trame[4];
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3302      	adds	r3, #2
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3303      	adds	r3, #3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4053      	eors	r3, r2
 8001276:	b2da      	uxtb	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3304      	adds	r3, #4
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4053      	eors	r3, r2
 8001280:	73fb      	strb	r3, [r7, #15]
	for (int i = 7; i<size; i++)
 8001282:	2307      	movs	r3, #7
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	e009      	b.n	800129c <calcul_cheksum1+0x44>
	{

			checksum1 = checksum1 ^ trame[i];
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	4053      	eors	r3, r2
 8001294:	73fb      	strb	r3, [r7, #15]
	for (int i = 7; i<size; i++)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf1      	blt.n	8001288 <calcul_cheksum1+0x30>
	}

	checksum1 = checksum1 & 0xFE;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
	return checksum1;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]

}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <calcul_checksum2>:

uint8_t calcul_checksum2(uint8_t Csum1) //Pareil que checksum2
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
	uint8_t checksum2;

	checksum2 = (~Csum1) & 0xFE;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f023 0301 	bic.w	r3, r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
	return checksum2;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <send_trame>:

void send_trame(uint8_t id, uint8_t size, uint8_t *trame) //Fonction global qui façonne la trame pour l'envoyer correctement
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	603a      	str	r2, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	460b      	mov	r3, r1
 80012ee:	71bb      	strb	r3, [r7, #6]
	uint8_t Csum1;
	uint8_t Csum2;

	trame[3] = id;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3303      	adds	r3, #3
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	701a      	strb	r2, [r3, #0]
	Csum1 = calcul_cheksum1(size, trame);
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	6839      	ldr	r1, [r7, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ffab 	bl	8001258 <calcul_cheksum1>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
	Csum2 = calcul_checksum2(Csum1);
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ffd6 	bl	80012ba <calcul_checksum2>
 800130e:	4603      	mov	r3, r0
 8001310:	73bb      	strb	r3, [r7, #14]
	trame[5] = Csum1;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3305      	adds	r3, #5
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	701a      	strb	r2, [r3, #0]
	trame[6] = Csum2;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3306      	adds	r3, #6
 800131e:	7bba      	ldrb	r2, [r7, #14]
 8001320:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, trame, size, HAL_MAX_DELAY);
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	b29a      	uxth	r2, r3
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	4803      	ldr	r0, [pc, #12]	@ (800133c <send_trame+0x5c>)
 800132e:	f003 fe9b 	bl	8005068 <HAL_UART_Transmit>

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200002ec 	.word	0x200002ec

08001340 <send_torque>:
{
	send_trame(id, 7, reboot);
}

void send_torque(uint8_t id, uint8_t torq) //Permet de modifier le torque du herkulex (TORQUE_FREE, TORQUE_ON, TORQUE_OFF)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
	torque[9] = torq;
 8001350:	4a06      	ldr	r2, [pc, #24]	@ (800136c <send_torque+0x2c>)
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	7253      	strb	r3, [r2, #9]
	send_trame(id, 10, torque);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <send_torque+0x2c>)
 800135a:	210a      	movs	r1, #10
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffbf 	bl	80012e0 <send_trame>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000

08001370 <send_pos_speed>:

void send_pos_speed(uint8_t id, uint16_t pos, float speed_in_decimal) //Donne une position pour un herkulex + la vitesse
{																// position -> entre -90° et +90°
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	ed87 0a02 	vstr	s0, [r7, #8]
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	4613      	mov	r3, r2
 8001382:	81bb      	strh	r3, [r7, #12]
	uint8_t play_time= 0xfe*(1 - speed_in_decimal);
 8001384:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001388:	edd7 7a02 	vldr	s15, [r7, #8]
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013e4 <send_pos_speed+0x74>
 8001394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139c:	edc7 7a01 	vstr	s15, [r7, #4]
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	75fb      	strb	r3, [r7, #23]
	Iposition[10] = id;
 80013a4:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <send_pos_speed+0x78>)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	7293      	strb	r3, [r2, #10]
	Iposition[7] = pos&0x00FF;
 80013aa:	89bb      	ldrh	r3, [r7, #12]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <send_pos_speed+0x78>)
 80013b0:	71da      	strb	r2, [r3, #7]
	Iposition[8] = (pos&0xFF00) >>8;
 80013b2:	89bb      	ldrh	r3, [r7, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <send_pos_speed+0x78>)
 80013bc:	721a      	strb	r2, [r3, #8]
	Iposition[11]=play_time;
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <send_pos_speed+0x78>)
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	72d3      	strb	r3, [r2, #11]
	send_torque(id, TORQUE_ON);
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2160      	movs	r1, #96	@ 0x60
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ffb9 	bl	8001340 <send_torque>
	send_trame(id, 12, Iposition);
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <send_pos_speed+0x78>)
 80013d2:	210c      	movs	r1, #12
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff83 	bl	80012e0 <send_trame>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	437e0000 	.word	0x437e0000
 80013e8:	2000000c 	.word	0x2000000c

080013ec <__io_putchar>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80013f4:	1d39      	adds	r1, r7, #4
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	2201      	movs	r2, #1
 80013fc:	4803      	ldr	r0, [pc, #12]	@ (800140c <__io_putchar+0x20>)
 80013fe:	f003 fe33 	bl	8005068 <HAL_UART_Transmit>

	return ch;
 8001402:	687b      	ldr	r3, [r7, #4]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200002ec 	.word	0x200002ec

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f000 fc6f 	bl	8001cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001418:	f000 f858 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f7ff feb2 	bl	8001184 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001420:	f000 fb9c 	bl	8001b5c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8001424:	f7ff fe06 	bl	8001034 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001428:	f000 fa8e 	bl	8001948 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_FDCAN_Start(&hfdcan1);
 800142c:	4824      	ldr	r0, [pc, #144]	@ (80014c0 <main+0xb0>)
 800142e:	f000 ff3d 	bl	80022ac <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2101      	movs	r1, #1
 8001436:	4822      	ldr	r0, [pc, #136]	@ (80014c0 <main+0xb0>)
 8001438:	f001 f868 	bl	800250c <HAL_FDCAN_ActivateNotification>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800143c:	2100      	movs	r1, #0
 800143e:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <main+0xb4>)
 8001440:	f002 fd52 	bl	8003ee8 <HAL_TIM_PWM_Start>


	// Mettre la vitesse à 0 au démarrage
	PWM_dir_and_cycle(1, &htim1, TIM_CHANNEL_1, 0);
 8001444:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 80014c8 <main+0xb8>
 8001448:	2200      	movs	r2, #0
 800144a:	491e      	ldr	r1, [pc, #120]	@ (80014c4 <main+0xb4>)
 800144c:	2001      	movs	r0, #1
 800144e:	f000 f8ed 	bl	800162c <PWM_dir_and_cycle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		send_pos_speed(0xfe, calcul_angle(90), 1.0);
 8001452:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80014b0 <main+0xa0>
 8001456:	f7ff fed7 	bl	8001208 <calcul_angle>
 800145a:	4603      	mov	r3, r0
 800145c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001460:	4619      	mov	r1, r3
 8001462:	20fe      	movs	r0, #254	@ 0xfe
 8001464:	f7ff ff84 	bl	8001370 <send_pos_speed>
		send_pos_speed(0xfe, calcul_angle(-90), 1.0);
 8001468:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 80014b8 <main+0xa8>
 800146c:	f7ff fecc 	bl	8001208 <calcul_angle>
 8001470:	4603      	mov	r3, r0
 8001472:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001476:	4619      	mov	r1, r3
 8001478:	20fe      	movs	r0, #254	@ 0xfe
 800147a:	f7ff ff79 	bl	8001370 <send_pos_speed>
		send_pos_speed(0xfe, calcul_angle(90), 0.0);
 800147e:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 80014b0 <main+0xa0>
 8001482:	f7ff fec1 	bl	8001208 <calcul_angle>
 8001486:	4603      	mov	r3, r0
 8001488:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80014c8 <main+0xb8>
 800148c:	4619      	mov	r1, r3
 800148e:	20fe      	movs	r0, #254	@ 0xfe
 8001490:	f7ff ff6e 	bl	8001370 <send_pos_speed>
		send_pos_speed(0xfe, calcul_angle(-90), 0.0);
 8001494:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 80014b8 <main+0xa8>
 8001498:	f7ff feb6 	bl	8001208 <calcul_angle>
 800149c:	4603      	mov	r3, r0
 800149e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80014c8 <main+0xb8>
 80014a2:	4619      	mov	r1, r3
 80014a4:	20fe      	movs	r0, #254	@ 0xfe
 80014a6:	f7ff ff63 	bl	8001370 <send_pos_speed>
		send_pos_speed(0xfe, calcul_angle(90), 1.0);
 80014aa:	bf00      	nop
 80014ac:	e7d1      	b.n	8001452 <main+0x42>
 80014ae:	bf00      	nop
 80014b0:	00000000 	.word	0x00000000
 80014b4:	40568000 	.word	0x40568000
 80014b8:	00000000 	.word	0x00000000
 80014bc:	c0568000 	.word	0xc0568000
 80014c0:	20000208 	.word	0x20000208
 80014c4:	200002a0 	.word	0x200002a0
 80014c8:	00000000 	.word	0x00000000

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	@ 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	2238      	movs	r2, #56	@ 0x38
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fbd1 	bl	8006c82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f001 fc70 	bl	8002dd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fe:	2340      	movs	r3, #64	@ 0x40
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001502:	2302      	movs	r3, #2
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001506:	2302      	movs	r3, #2
 8001508:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800150a:	2304      	movs	r3, #4
 800150c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800150e:	2355      	movs	r3, #85	@ 0x55
 8001510:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001512:	2302      	movs	r3, #2
 8001514:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001516:	2302      	movs	r3, #2
 8001518:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800151a:	2302      	movs	r3, #2
 800151c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4618      	mov	r0, r3
 8001524:	f001 fd0a 	bl	8002f3c <HAL_RCC_OscConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800152e:	f000 f877 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2303      	movs	r3, #3
 8001538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2104      	movs	r1, #4
 800154a:	4618      	mov	r0, r3
 800154c:	f002 f808 	bl	8003560 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001556:	f000 f863 	bl	8001620 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3750      	adds	r7, #80	@ 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &trame_rx.header, trame_rx.data);
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001570:	4a26      	ldr	r2, [pc, #152]	@ (800160c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001572:	2140      	movs	r1, #64	@ 0x40
 8001574:	4826      	ldr	r0, [pc, #152]	@ (8001610 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001576:	f000 fec1 	bl	80022fc <HAL_FDCAN_GetRxMessage>

		switch (trame_rx.header.Identifier) {
 800157a:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f240 6201 	movw	r2, #1537	@ 0x601
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_FDCAN_RxFifo0Callback+0x2c>
 8001586:	f240 6202 	movw	r2, #1538	@ 0x602
 800158a:	4293      	cmp	r3, r2
 800158c:	d014      	beq.n	80015b8 <HAL_FDCAN_RxFifo0Callback+0x54>
					bool sens_rotation =  trame_rx.data[1];

					PWM_dir_and_cycle(sens_rotation, &htim1, TIM_CHANNEL_1, rapport_cyclique);
				break;
			default:
				break;
 800158e:	e037      	b.n	8001600 <HAL_FDCAN_RxFifo0Callback+0x9c>
				uint16_t pos_herculex = ((uint16_t) trame_rx.data[0] << 8) | trame_rx.data[1];
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001592:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800159c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	813b      	strh	r3, [r7, #8]
				send_pos_speed(ID_HERKULEX, pos_herculex,0x3c);
 80015a8:	893b      	ldrh	r3, [r7, #8]
 80015aa:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001614 <HAL_FDCAN_RxFifo0Callback+0xb0>
 80015ae:	4619      	mov	r1, r3
 80015b0:	20fe      	movs	r0, #254	@ 0xfe
 80015b2:	f7ff fedd 	bl	8001370 <send_pos_speed>
				break;
 80015b6:	e023      	b.n	8001600 <HAL_FDCAN_RxFifo0Callback+0x9c>
					float rapport_cyclique = trame_rx.data[0] / 100.0;
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 80015ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffd8 	bl	8000574 <__aeabi_i2d>
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 80015ca:	f7ff f967 	bl	800089c <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fb2f 	bl	8000c38 <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]
					bool sens_rotation =  trame_rx.data[1];
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 80015e0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf14      	ite	ne
 80015e8:	2301      	movne	r3, #1
 80015ea:	2300      	moveq	r3, #0
 80015ec:	72fb      	strb	r3, [r7, #11]
					PWM_dir_and_cycle(sens_rotation, &htim1, TIM_CHANNEL_1, rapport_cyclique);
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	4909      	ldr	r1, [pc, #36]	@ (800161c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f817 	bl	800162c <PWM_dir_and_cycle>
				break;
 80015fe:	bf00      	nop
		}
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000294 	.word	0x20000294
 800160c:	2000026c 	.word	0x2000026c
 8001610:	20000208 	.word	0x20000208
 8001614:	42700000 	.word	0x42700000
 8001618:	40590000 	.word	0x40590000
 800161c:	200002a0 	.word	0x200002a0

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <Error_Handler+0x8>

0800162c <PWM_dir_and_cycle>:
void PWM_dir(int dir)
{
	HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, dir);
}
void PWM_dir_and_cycle(int dir,TIM_HandleTypeDef *htim, uint32_t pwm_channel, float duty_cycle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	ed87 0a00 	vstr	s0, [r7]
	HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, dir);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	2140      	movs	r1, #64	@ 0x40
 8001644:	4824      	ldr	r0, [pc, #144]	@ (80016d8 <PWM_dir_and_cycle+0xac>)
 8001646:	f001 fbad 	bl	8002da4 <HAL_GPIO_WritePin>
	uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(htim);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001650:	617b      	str	r3, [r7, #20]
    uint32_t CRR = duty_cycle*(ARR+1)-1;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165e:	edd7 7a00 	vldr	s15, [r7]
 8001662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800166a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800166e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001672:	ee17 3a90 	vmov	r3, s15
 8001676:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d104      	bne.n	8001688 <PWM_dir_and_cycle+0x5c>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001686:	e023      	b.n	80016d0 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d104      	bne.n	8001698 <PWM_dir_and_cycle+0x6c>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001696:	e01b      	b.n	80016d0 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b08      	cmp	r3, #8
 800169c:	d104      	bne.n	80016a8 <PWM_dir_and_cycle+0x7c>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80016a6:	e013      	b.n	80016d0 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d104      	bne.n	80016b8 <PWM_dir_and_cycle+0x8c>
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016b6:	e00b      	b.n	80016d0 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d104      	bne.n	80016c8 <PWM_dir_and_cycle+0x9c>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80016c6:	e003      	b.n	80016d0 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80016d0:	bf00      	nop
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	48000400 	.word	0x48000400

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <HAL_MspInit+0x44>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001720 <HAL_MspInit+0x44>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <HAL_MspInit+0x44>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_MspInit+0x44>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fe:	4a08      	ldr	r2, [pc, #32]	@ (8001720 <HAL_MspInit+0x44>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001704:	6593      	str	r3, [r2, #88]	@ 0x58
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_MspInit+0x44>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001712:	f001 fc03 	bl	8002f1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 fb0f 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <FDCAN1_IT0_IRQHandler+0x10>)
 800178a:	f000 ffa5 	bl	80026d8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000208 	.word	0x20000208

08001798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_kill>:

int _kill(int pid, int sig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b2:	f005 fab9 	bl	8006d28 <__errno>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2216      	movs	r2, #22
 80017ba:	601a      	str	r2, [r3, #0]
  return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_exit>:

void _exit (int status)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffe7 	bl	80017a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017da:	bf00      	nop
 80017dc:	e7fd      	b.n	80017da <_exit+0x12>

080017de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e00a      	b.n	8001806 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f0:	f3af 8000 	nop.w
 80017f4:	4601      	mov	r1, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	60ba      	str	r2, [r7, #8]
 80017fc:	b2ca      	uxtb	r2, r1
 80017fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	dbf0      	blt.n	80017f0 <_read+0x12>
  }

  return len;
 800180e:	687b      	ldr	r3, [r7, #4]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e009      	b.n	800183e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	60ba      	str	r2, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fdda 	bl	80013ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3301      	adds	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	dbf1      	blt.n	800182a <_write+0x12>
  }
  return len;
 8001846:	687b      	ldr	r3, [r7, #4]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_close>:

int _close(int file)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001878:	605a      	str	r2, [r3, #4]
  return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_isatty>:

int _isatty(int file)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f005 fa1e 	bl	8006d28 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	@ (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20008000 	.word	0x20008000
 8001918:	00000400 	.word	0x00000400
 800191c:	2000029c 	.word	0x2000029c
 8001920:	200004d0 	.word	0x200004d0

08001924 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b09c      	sub	sp, #112	@ 0x70
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]
 800197a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2234      	movs	r2, #52	@ 0x34
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f005 f97d 	bl	8006c82 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001988:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 800198a:	4a47      	ldr	r2, [pc, #284]	@ (8001aa8 <MX_TIM1_Init+0x160>)
 800198c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800198e:	4b45      	ldr	r3, [pc, #276]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 8001990:	2201      	movs	r2, #1
 8001992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8500;
 800199a:	4b42      	ldr	r3, [pc, #264]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 800199c:	f242 1234 	movw	r2, #8500	@ 0x2134
 80019a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b40      	ldr	r3, [pc, #256]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a8:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ae:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019b4:	483b      	ldr	r0, [pc, #236]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 80019b6:	f002 f9df 	bl	8003d78 <HAL_TIM_Base_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019c0:	f7ff fe2e 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019ce:	4619      	mov	r1, r3
 80019d0:	4834      	ldr	r0, [pc, #208]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 80019d2:	f002 fc9d 	bl	8004310 <HAL_TIM_ConfigClockSource>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019dc:	f7ff fe20 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019e0:	4830      	ldr	r0, [pc, #192]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 80019e2:	f002 fa20 	bl	8003e26 <HAL_TIM_PWM_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019ec:	f7ff fe18 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a00:	4619      	mov	r1, r3
 8001a02:	4828      	ldr	r0, [pc, #160]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 8001a04:	f003 f9d2 	bl	8004dac <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a0e:	f7ff fe07 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	@ 0x60
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 8001a16:	f241 0399 	movw	r3, #4249	@ 0x1099
 8001a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a20:	2300      	movs	r3, #0
 8001a22:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a34:	2200      	movs	r2, #0
 8001a36:	4619      	mov	r1, r3
 8001a38:	481a      	ldr	r0, [pc, #104]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 8001a3a:	f002 fb55 	bl	80040e8 <HAL_TIM_PWM_ConfigChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001a44:	f7ff fdec 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4807      	ldr	r0, [pc, #28]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 8001a86:	f003 fa13 	bl	8004eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001a90:	f7ff fdc6 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a94:	4803      	ldr	r0, [pc, #12]	@ (8001aa4 <MX_TIM1_Init+0x15c>)
 8001a96:	f000 f829 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001a9a:	bf00      	nop
 8001a9c:	3770      	adds	r7, #112	@ 0x70
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200002a0 	.word	0x200002a0
 8001aa8:	40012c00 	.word	0x40012c00

08001aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x38>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10b      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac2:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ac4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x3c>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <HAL_TIM_MspPostInit+0x68>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d11d      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b38:	2306      	movs	r3, #6
 8001b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b46:	f000 ffab 	bl	8002aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	40021000 	.word	0x40021000

08001b5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b60:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b62:	4a23      	ldr	r2, [pc, #140]	@ (8001bf0 <MX_USART2_UART_Init+0x94>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b66:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba4:	4811      	ldr	r0, [pc, #68]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001ba6:	f003 fa0f 	bl	8004fc8 <HAL_UART_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f7ff fd36 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	480d      	ldr	r0, [pc, #52]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001bb8:	f004 f808 	bl	8005bcc <HAL_UARTEx_SetTxFifoThreshold>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bc2:	f7ff fd2d 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4808      	ldr	r0, [pc, #32]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001bca:	f004 f83d 	bl	8005c48 <HAL_UARTEx_SetRxFifoThreshold>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bd4:	f7ff fd24 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	@ (8001bec <MX_USART2_UART_Init+0x90>)
 8001bda:	f003 ffbe 	bl	8005b5a <HAL_UARTEx_DisableFifoMode>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001be4:	f7ff fd1c 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200002ec 	.word	0x200002ec
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09a      	sub	sp, #104	@ 0x68
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2244      	movs	r2, #68	@ 0x44
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 f834 	bl	8006c82 <memset>
  if(uartHandle->Instance==USART2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <HAL_UART_MspInit+0xa8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d136      	bne.n	8001c92 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 feb1 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c3c:	f7ff fcf0 	bl	8001620 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c44:	4a16      	ldr	r2, [pc, #88]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001c70:	230c      	movs	r3, #12
 8001c72:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c80:	2307      	movs	r3, #7
 8001c82:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8e:	f000 ff07 	bl	8002aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c92:	bf00      	nop
 8001c94:	3768      	adds	r7, #104	@ 0x68
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ca4:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ca6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca8:	f7ff fe3c 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <LoopForever+0xe>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf0 <LoopForever+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f005 f82f 	bl	8006d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cd6:	f7ff fb9b 	bl	8001410 <main>

08001cda <LoopForever>:

LoopForever:
    b LoopForever
 8001cda:	e7fe      	b.n	8001cda <LoopForever>
  ldr   r0, =_estack
 8001cdc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ce8:	0800a8d8 	.word	0x0800a8d8
  ldr r2, =_sbss
 8001cec:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001cf0:	200004d0 	.word	0x200004d0

08001cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC1_2_IRQHandler>

08001cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f939 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 f80e 	bl	8001d28 <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	e001      	b.n	8001d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d18:	f7ff fce0 	bl	80016dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d34:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <HAL_InitTick+0x68>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d022      	beq.n	8001d82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_InitTick+0x6c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <HAL_InitTick+0x68>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f944 	bl	8001fde <HAL_SYSTICK_Config>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10f      	bne.n	8001d7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	d809      	bhi.n	8001d76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d62:	2200      	movs	r2, #0
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6a:	f000 f910 	bl	8001f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_InitTick+0x70>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e007      	b.n	8001d86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	e004      	b.n	8001d86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e001      	b.n	8001d86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000020 	.word	0x20000020
 8001d94:	20000018 	.word	0x20000018
 8001d98:	2000001c 	.word	0x2000001c

08001d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_IncTick+0x1c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_IncTick+0x20>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a03      	ldr	r2, [pc, #12]	@ (8001db8 <HAL_IncTick+0x1c>)
 8001dac:	6013      	str	r3, [r2, #0]
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	20000380 	.word	0x20000380
 8001dbc:	20000020 	.word	0x20000020

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000380 	.word	0x20000380

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	@ (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	@ (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	@ 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff8e 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff29 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff40 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff90 	bl	8001ecc <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5f 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff33 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa4 	bl	8001f34 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e147      	b.n	800229a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff f84e 	bl	80010c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0210 	bic.w	r2, r2, #16
 8002032:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002034:	f7ff fec4 	bl	8001dc0 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800203a:	e012      	b.n	8002062 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800203c:	f7ff fec0 	bl	8001dc0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b0a      	cmp	r3, #10
 8002048:	d90b      	bls.n	8002062 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e11b      	b.n	800229a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b08      	cmp	r3, #8
 800206e:	d0e5      	beq.n	800203c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002080:	f7ff fe9e 	bl	8001dc0 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002086:	e012      	b.n	80020ae <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002088:	f7ff fe9a 	bl	8001dc0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d90b      	bls.n	80020ae <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2203      	movs	r2, #3
 80020a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0f5      	b.n	800229a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0e5      	beq.n	8002088 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0202 	orr.w	r2, r2, #2
 80020ca:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a74      	ldr	r2, [pc, #464]	@ (80022a4 <HAL_FDCAN_Init+0x2ac>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d103      	bne.n	80020de <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80020d6:	4a74      	ldr	r2, [pc, #464]	@ (80022a8 <HAL_FDCAN_Init+0x2b0>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7c1b      	ldrb	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020f4:	619a      	str	r2, [r3, #24]
 80020f6:	e007      	b.n	8002108 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002106:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7c5b      	ldrb	r3, [r3, #17]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d108      	bne.n	8002122 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800211e:	619a      	str	r2, [r3, #24]
 8002120:	e007      	b.n	8002132 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002130:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7c9b      	ldrb	r3, [r3, #18]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002148:	619a      	str	r2, [r3, #24]
 800214a:	e007      	b.n	800215c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800215a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002180:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0210 	bic.w	r2, r2, #16
 8002190:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0204 	orr.w	r2, r2, #4
 80021a8:	619a      	str	r2, [r3, #24]
 80021aa:	e02c      	b.n	8002206 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d028      	beq.n	8002206 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d01c      	beq.n	80021f6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021ca:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0210 	orr.w	r2, r2, #16
 80021da:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d110      	bne.n	8002206 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	619a      	str	r2, [r3, #24]
 80021f4:	e007      	b.n	8002206 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0220 	orr.w	r2, r2, #32
 8002204:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	3b01      	subs	r3, #1
 800220c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	3b01      	subs	r3, #1
 8002214:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002216:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800221e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	3b01      	subs	r3, #1
 8002228:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800222e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002230:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800223a:	d115      	bne.n	8002268 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	3b01      	subs	r3, #1
 8002248:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800224a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	3b01      	subs	r3, #1
 8002252:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002254:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	3b01      	subs	r3, #1
 800225e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002264:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002266:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fbb8 	bl	80029f4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40006400 	.word	0x40006400
 80022a8:	40006500 	.word	0x40006500

080022ac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d110      	bne.n	80022e2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e006      	b.n	80022f0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
  }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b08b      	sub	sp, #44	@ 0x2c
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002314:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002316:	7efb      	ldrb	r3, [r7, #27]
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 80e8 	bne.w	80024ee <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b40      	cmp	r3, #64	@ 0x40
 8002322:	d137      	bne.n	8002394 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0db      	b.n	80024fc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234c:	0e1b      	lsrs	r3, r3, #24
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d10a      	bne.n	800236c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002368:	2301      	movs	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
 8002392:	e036      	b.n	8002402 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d107      	bne.n	80023b4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0a3      	b.n	80024fc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023bc:	0e1b      	lsrs	r3, r3, #24
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10a      	bne.n	80023dc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80023d8:	2301      	movs	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e005      	b.n	8002432 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	3304      	adds	r3, #4
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	f003 020f 	and.w	r2, r3, #15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e1b      	lsrs	r3, r3, #24
 8002486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0fda      	lsrs	r2, r3, #31
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	3304      	adds	r3, #4
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	e00a      	b.n	80024be <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	441a      	add	r2, r3
 80024ae:	6839      	ldr	r1, [r7, #0]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	440b      	add	r3, r1
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	3301      	adds	r3, #1
 80024bc:	623b      	str	r3, [r7, #32]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4a11      	ldr	r2, [pc, #68]	@ (8002508 <HAL_FDCAN_GetRxMessage+0x20c>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	461a      	mov	r2, r3
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d3ec      	bcc.n	80024a8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b40      	cmp	r3, #64	@ 0x40
 80024d2:	d105      	bne.n	80024e0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80024de:	e004      	b.n	80024ea <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e006      	b.n	80024fc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	f043 0208 	orr.w	r2, r3, #8
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	372c      	adds	r7, #44	@ 0x2c
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	0800a460 	.word	0x0800a460

0800250c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800251e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d003      	beq.n	800252e <HAL_FDCAN_ActivateNotification+0x22>
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b02      	cmp	r3, #2
 800252a:	f040 80c8 	bne.w	80026be <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03b      	beq.n	80025c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d031      	beq.n	80025c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d027      	beq.n	80025c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01d      	beq.n	80025c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d013      	beq.n	80025c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00c      	beq.n	80025d2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d13b      	bne.n	800265e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d131      	bne.n	800265e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002600:	2b00      	cmp	r3, #0
 8002602:	d004      	beq.n	800260e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d127      	bne.n	800265e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11d      	bne.n	800265e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d113      	bne.n	800265e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00c      	beq.n	800266e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0202 	orr.w	r2, r2, #2
 800266c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	430a      	orrs	r2, r1
 8002688:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e006      	b.n	80026cc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c2:	f043 0202 	orr.w	r2, r3, #2
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	@ 0x30
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026f4:	4013      	ands	r3, r2
 80026f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800270c:	4013      	ands	r3, r2
 800270e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002716:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002724:	4013      	ands	r3, r2
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002732:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273a:	6a3a      	ldr	r2, [r7, #32]
 800273c:	4013      	ands	r3, r2
 800273e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002746:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800274a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	4013      	ands	r3, r2
 8002756:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002766:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2240      	movs	r2, #64	@ 0x40
 8002782:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f916 	bl	80029b6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d019      	beq.n	80027c8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d014      	beq.n	80027c8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027a6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80027c0:	6939      	ldr	r1, [r7, #16]
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8d8 	bl	8002978 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80027c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80027d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f8a2 	bl	8002922 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80027ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe feb8 	bl	8001564 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002800:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002802:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f897 	bl	8002938 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002826:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f890 	bl	800294e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002834:	2b00      	cmp	r3, #0
 8002836:	d018      	beq.n	800286a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800284a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2280      	movs	r2, #128	@ 0x80
 8002860:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f87c 	bl	8002962 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00c      	beq.n	800288e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002886:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f880 	bl	800298e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00c      	beq.n	80028b2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f878 	bl	80029a2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00f      	beq.n	80028dc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80028ea:	69f9      	ldr	r1, [r7, #28]
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f876 	bl	80029de <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a3a      	ldr	r2, [r7, #32]
 80028fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f858 	bl	80029ca <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800291a:	bf00      	nop
 800291c:	3730      	adds	r7, #48	@ 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80029fe:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a0e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a34:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3c:	061a      	lsls	r2, r3, #24
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e005      	b.n	8002a82 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3f3      	bcc.n	8002a76 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	4000a400 	.word	0x4000a400

08002aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aae:	e15a      	b.n	8002d66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 814c 	beq.w	8002d60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d005      	beq.n	8002ae0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d130      	bne.n	8002b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b16:	2201      	movs	r2, #1
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0201 	and.w	r2, r3, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d017      	beq.n	8002b7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d123      	bne.n	8002bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	08da      	lsrs	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3208      	adds	r2, #8
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80a6 	beq.w	8002d60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c14:	4b5b      	ldr	r3, [pc, #364]	@ (8002d84 <HAL_GPIO_Init+0x2e4>)
 8002c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c18:	4a5a      	ldr	r2, [pc, #360]	@ (8002d84 <HAL_GPIO_Init+0x2e4>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c20:	4b58      	ldr	r3, [pc, #352]	@ (8002d84 <HAL_GPIO_Init+0x2e4>)
 8002c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2c:	4a56      	ldr	r2, [pc, #344]	@ (8002d88 <HAL_GPIO_Init+0x2e8>)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c56:	d01f      	beq.n	8002c98 <HAL_GPIO_Init+0x1f8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d8c <HAL_GPIO_Init+0x2ec>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d019      	beq.n	8002c94 <HAL_GPIO_Init+0x1f4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a4b      	ldr	r2, [pc, #300]	@ (8002d90 <HAL_GPIO_Init+0x2f0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d013      	beq.n	8002c90 <HAL_GPIO_Init+0x1f0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d94 <HAL_GPIO_Init+0x2f4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00d      	beq.n	8002c8c <HAL_GPIO_Init+0x1ec>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a49      	ldr	r2, [pc, #292]	@ (8002d98 <HAL_GPIO_Init+0x2f8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <HAL_GPIO_Init+0x1e8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a48      	ldr	r2, [pc, #288]	@ (8002d9c <HAL_GPIO_Init+0x2fc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d101      	bne.n	8002c84 <HAL_GPIO_Init+0x1e4>
 8002c80:	2305      	movs	r3, #5
 8002c82:	e00a      	b.n	8002c9a <HAL_GPIO_Init+0x1fa>
 8002c84:	2306      	movs	r3, #6
 8002c86:	e008      	b.n	8002c9a <HAL_GPIO_Init+0x1fa>
 8002c88:	2304      	movs	r3, #4
 8002c8a:	e006      	b.n	8002c9a <HAL_GPIO_Init+0x1fa>
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e004      	b.n	8002c9a <HAL_GPIO_Init+0x1fa>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e002      	b.n	8002c9a <HAL_GPIO_Init+0x1fa>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_GPIO_Init+0x1fa>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	f002 0203 	and.w	r2, r2, #3
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	4093      	lsls	r3, r2
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002caa:	4937      	ldr	r1, [pc, #220]	@ (8002d88 <HAL_GPIO_Init+0x2e8>)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cb8:	4b39      	ldr	r3, [pc, #228]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cdc:	4a30      	ldr	r2, [pc, #192]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d06:	4a26      	ldr	r2, [pc, #152]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d0c:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d30:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d5a:	4a11      	ldr	r2, [pc, #68]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3301      	adds	r3, #1
 8002d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f ae9d 	bne.w	8002ab0 <HAL_GPIO_Init+0x10>
  }
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	371c      	adds	r7, #28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	48000400 	.word	0x48000400
 8002d90:	48000800 	.word	0x48000800
 8002d94:	48000c00 	.word	0x48000c00
 8002d98:	48001000 	.word	0x48001000
 8002d9c:	48001400 	.word	0x48001400
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d141      	bne.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dee:	d131      	bne.n	8002e54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df0:	4b47      	ldr	r3, [pc, #284]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002df6:	4a46      	ldr	r2, [pc, #280]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e00:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e08:	4a41      	ldr	r2, [pc, #260]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2232      	movs	r2, #50	@ 0x32
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	0c9b      	lsrs	r3, r3, #18
 8002e22:	3301      	adds	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e26:	e002      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e2e:	4b38      	ldr	r3, [pc, #224]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e3a:	d102      	bne.n	8002e42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f2      	bne.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e42:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4e:	d158      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e057      	b.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e54:	4b2e      	ldr	r3, [pc, #184]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e64:	e04d      	b.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e6c:	d141      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e6e:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e7a:	d131      	bne.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e7c:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e82:	4a23      	ldr	r2, [pc, #140]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e8c:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e94:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2232      	movs	r2, #50	@ 0x32
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	0c9b      	lsrs	r3, r3, #18
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb2:	e002      	b.n	8002eba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec6:	d102      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f2      	bne.n	8002eb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eda:	d112      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e011      	b.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ef0:	e007      	b.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002efa:	4a05      	ldr	r2, [pc, #20]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40007000 	.word	0x40007000
 8002f14:	20000018 	.word	0x20000018
 8002f18:	431bde83 	.word	0x431bde83

08002f1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f2a:	6093      	str	r3, [r2, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40007000 	.word	0x40007000

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e2fe      	b.n	800354c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d075      	beq.n	8003046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5a:	4b97      	ldr	r3, [pc, #604]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f64:	4b94      	ldr	r3, [pc, #592]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3e>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_OscConfig+0x44>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d10b      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	4b8d      	ldr	r3, [pc, #564]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d05b      	beq.n	8003044 <HAL_RCC_OscConfig+0x108>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d157      	bne.n	8003044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e2d9      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x74>
 8002fa2:	4b85      	ldr	r3, [pc, #532]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a84      	ldr	r2, [pc, #528]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e01d      	b.n	8002fec <HAL_RCC_OscConfig+0xb0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x98>
 8002fba:	4b7f      	ldr	r3, [pc, #508]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a7b      	ldr	r2, [pc, #492]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e00b      	b.n	8002fec <HAL_RCC_OscConfig+0xb0>
 8002fd4:	4b78      	ldr	r3, [pc, #480]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a77      	ldr	r2, [pc, #476]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b75      	ldr	r3, [pc, #468]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a74      	ldr	r2, [pc, #464]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fee4 	bl	8001dc0 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fee0 	bl	8001dc0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	@ 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e29e      	b.n	800354c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300e:	4b6a      	ldr	r3, [pc, #424]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0xc0>
 800301a:	e014      	b.n	8003046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fed0 	bl	8001dc0 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe fecc 	bl	8001dc0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	@ 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e28a      	b.n	800354c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003036:	4b60      	ldr	r3, [pc, #384]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0xe8>
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d075      	beq.n	800313e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	4b59      	ldr	r3, [pc, #356]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305c:	4b56      	ldr	r3, [pc, #344]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d102      	bne.n	8003072 <HAL_RCC_OscConfig+0x136>
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d002      	beq.n	8003078 <HAL_RCC_OscConfig+0x13c>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b04      	cmp	r3, #4
 8003076:	d11f      	bne.n	80030b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003078:	4b4f      	ldr	r3, [pc, #316]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_OscConfig+0x154>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e25d      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b49      	ldr	r3, [pc, #292]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	4946      	ldr	r1, [pc, #280]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030a4:	4b45      	ldr	r3, [pc, #276]	@ (80031bc <HAL_RCC_OscConfig+0x280>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe fe3d 	bl	8001d28 <HAL_InitTick>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d043      	beq.n	800313c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e249      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d023      	beq.n	8003108 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b3d      	ldr	r3, [pc, #244]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a3c      	ldr	r2, [pc, #240]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fe78 	bl	8001dc0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe fe74 	bl	8001dc0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e232      	b.n	800354c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e6:	4b34      	ldr	r3, [pc, #208]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b31      	ldr	r3, [pc, #196]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	061b      	lsls	r3, r3, #24
 8003100:	492d      	ldr	r1, [pc, #180]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
 8003106:	e01a      	b.n	800313e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003108:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2a      	ldr	r2, [pc, #168]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 800310e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fe54 	bl	8001dc0 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7fe fe50 	bl	8001dc0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e20e      	b.n	800354c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800312e:	4b22      	ldr	r3, [pc, #136]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x1e0>
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d041      	beq.n	80031ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01c      	beq.n	800318c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003152:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8003154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003158:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003162:	f7fe fe2d 	bl	8001dc0 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316a:	f7fe fe29 	bl	8001dc0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e1e7      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317c:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ef      	beq.n	800316a <HAL_RCC_OscConfig+0x22e>
 800318a:	e020      	b.n	80031ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318c:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 800318e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003192:	4a09      	ldr	r2, [pc, #36]	@ (80031b8 <HAL_RCC_OscConfig+0x27c>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe fe10 	bl	8001dc0 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a2:	e00d      	b.n	80031c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe fe0c 	bl	8001dc0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d906      	bls.n	80031c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e1ca      	b.n	800354c <HAL_RCC_OscConfig+0x610>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c0:	4b8c      	ldr	r3, [pc, #560]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80031c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ea      	bne.n	80031a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 80a6 	beq.w	8003328 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031dc:	2300      	movs	r3, #0
 80031de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031e0:	4b84      	ldr	r3, [pc, #528]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_OscConfig+0x2b4>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x2b6>
 80031f0:	2300      	movs	r3, #0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b7f      	ldr	r3, [pc, #508]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	4a7e      	ldr	r2, [pc, #504]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003200:	6593      	str	r3, [r2, #88]	@ 0x58
 8003202:	4b7c      	ldr	r3, [pc, #496]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800320e:	2301      	movs	r3, #1
 8003210:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003212:	4b79      	ldr	r3, [pc, #484]	@ (80033f8 <HAL_RCC_OscConfig+0x4bc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d118      	bne.n	8003250 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321e:	4b76      	ldr	r3, [pc, #472]	@ (80033f8 <HAL_RCC_OscConfig+0x4bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a75      	ldr	r2, [pc, #468]	@ (80033f8 <HAL_RCC_OscConfig+0x4bc>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7fe fdc9 	bl	8001dc0 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003232:	f7fe fdc5 	bl	8001dc0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e183      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003244:	4b6c      	ldr	r3, [pc, #432]	@ (80033f8 <HAL_RCC_OscConfig+0x4bc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d108      	bne.n	800326a <HAL_RCC_OscConfig+0x32e>
 8003258:	4b66      	ldr	r3, [pc, #408]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325e:	4a65      	ldr	r2, [pc, #404]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003268:	e024      	b.n	80032b4 <HAL_RCC_OscConfig+0x378>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b05      	cmp	r3, #5
 8003270:	d110      	bne.n	8003294 <HAL_RCC_OscConfig+0x358>
 8003272:	4b60      	ldr	r3, [pc, #384]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003278:	4a5e      	ldr	r2, [pc, #376]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003282:	4b5c      	ldr	r3, [pc, #368]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	4a5a      	ldr	r2, [pc, #360]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003292:	e00f      	b.n	80032b4 <HAL_RCC_OscConfig+0x378>
 8003294:	4b57      	ldr	r3, [pc, #348]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329a:	4a56      	ldr	r2, [pc, #344]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032a4:	4b53      	ldr	r3, [pc, #332]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	4a52      	ldr	r2, [pc, #328]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d016      	beq.n	80032ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fd80 	bl	8001dc0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c2:	e00a      	b.n	80032da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe fd7c 	bl	8001dc0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e138      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032da:	4b46      	ldr	r3, [pc, #280]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ed      	beq.n	80032c4 <HAL_RCC_OscConfig+0x388>
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fe fd69 	bl	8001dc0 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe fd65 	bl	8001dc0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e121      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003308:	4b3a      	ldr	r3, [pc, #232]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1ed      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003316:	7ffb      	ldrb	r3, [r7, #31]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331c:	4b35      	ldr	r3, [pc, #212]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	4a34      	ldr	r2, [pc, #208]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003326:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d03c      	beq.n	80033ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01c      	beq.n	8003376 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800333c:	4b2d      	ldr	r3, [pc, #180]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 800333e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003342:	4a2c      	ldr	r2, [pc, #176]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fd38 	bl	8001dc0 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003354:	f7fe fd34 	bl	8001dc0 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0f2      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003366:	4b23      	ldr	r3, [pc, #140]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <HAL_RCC_OscConfig+0x418>
 8003374:	e01b      	b.n	80033ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003376:	4b1f      	ldr	r3, [pc, #124]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 8003378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800337c:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fe fd1b 	bl	8001dc0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800338e:	f7fe fd17 	bl	8001dc0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0d5      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033a0:	4b14      	ldr	r3, [pc, #80]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80033a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ef      	bne.n	800338e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80c9 	beq.w	800354a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b8:	4b0e      	ldr	r3, [pc, #56]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	f000 8083 	beq.w	80034cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d15e      	bne.n	800348c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a08      	ldr	r2, [pc, #32]	@ (80033f4 <HAL_RCC_OscConfig+0x4b8>)
 80033d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe fcf1 	bl	8001dc0 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e0:	e00c      	b.n	80033fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fe fced 	bl	8001dc0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d905      	bls.n	80033fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0ab      	b.n	800354c <HAL_RCC_OscConfig+0x610>
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fc:	4b55      	ldr	r3, [pc, #340]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ec      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003408:	4b52      	ldr	r3, [pc, #328]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	4b52      	ldr	r3, [pc, #328]	@ (8003558 <HAL_RCC_OscConfig+0x61c>)
 800340e:	4013      	ands	r3, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6a11      	ldr	r1, [r2, #32]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003418:	3a01      	subs	r2, #1
 800341a:	0112      	lsls	r2, r2, #4
 800341c:	4311      	orrs	r1, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003422:	0212      	lsls	r2, r2, #8
 8003424:	4311      	orrs	r1, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800342a:	0852      	lsrs	r2, r2, #1
 800342c:	3a01      	subs	r2, #1
 800342e:	0552      	lsls	r2, r2, #21
 8003430:	4311      	orrs	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003436:	0852      	lsrs	r2, r2, #1
 8003438:	3a01      	subs	r2, #1
 800343a:	0652      	lsls	r2, r2, #25
 800343c:	4311      	orrs	r1, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003442:	06d2      	lsls	r2, r2, #27
 8003444:	430a      	orrs	r2, r1
 8003446:	4943      	ldr	r1, [pc, #268]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 8003448:	4313      	orrs	r3, r2
 800344a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344c:	4b41      	ldr	r3, [pc, #260]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a40      	ldr	r2, [pc, #256]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 8003452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003456:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003458:	4b3e      	ldr	r3, [pc, #248]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a3d      	ldr	r2, [pc, #244]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 800345e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003462:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe fcac 	bl	8001dc0 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe fca8 	bl	8001dc0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e066      	b.n	800354c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347e:	4b35      	ldr	r3, [pc, #212]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x530>
 800348a:	e05e      	b.n	800354a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b31      	ldr	r3, [pc, #196]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a30      	ldr	r2, [pc, #192]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 8003492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe fc92 	bl	8001dc0 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fe fc8e 	bl	8001dc0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e04c      	b.n	800354c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b2:	4b28      	ldr	r3, [pc, #160]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80034be:	4b25      	ldr	r3, [pc, #148]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	4924      	ldr	r1, [pc, #144]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 80034c4:	4b25      	ldr	r3, [pc, #148]	@ (800355c <HAL_RCC_OscConfig+0x620>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60cb      	str	r3, [r1, #12]
 80034ca:	e03e      	b.n	800354a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e039      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <HAL_RCC_OscConfig+0x618>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d12c      	bne.n	8003546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	3b01      	subs	r3, #1
 80034f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d123      	bne.n	8003546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003508:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11b      	bne.n	8003546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d113      	bne.n	8003546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d109      	bne.n	8003546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	3b01      	subs	r3, #1
 8003540:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	019f800c 	.word	0x019f800c
 800355c:	feeefffc 	.word	0xfeeefffc

08003560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e11e      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b91      	ldr	r3, [pc, #580]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d910      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b8e      	ldr	r3, [pc, #568]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 020f 	bic.w	r2, r3, #15
 800358e:	498c      	ldr	r1, [pc, #560]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b8a      	ldr	r3, [pc, #552]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e106      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d073      	beq.n	800369c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d129      	bne.n	8003610 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035bc:	4b81      	ldr	r3, [pc, #516]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0f4      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035cc:	f000 f99e 	bl	800390c <RCC_GetSysClockFreqFromPLLSource>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4a7c      	ldr	r2, [pc, #496]	@ (80037c8 <HAL_RCC_ClockConfig+0x268>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d93f      	bls.n	800365a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035da:	4b7a      	ldr	r3, [pc, #488]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d033      	beq.n	800365a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d12f      	bne.n	800365a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035fa:	4b72      	ldr	r3, [pc, #456]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003602:	4a70      	ldr	r2, [pc, #448]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003608:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e024      	b.n	800365a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d107      	bne.n	8003628 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003618:	4b6a      	ldr	r3, [pc, #424]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0c6      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003628:	4b66      	ldr	r3, [pc, #408]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0be      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003638:	f000 f8ce 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800363c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4a61      	ldr	r2, [pc, #388]	@ (80037c8 <HAL_RCC_ClockConfig+0x268>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d909      	bls.n	800365a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003646:	4b5f      	ldr	r3, [pc, #380]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800364e:	4a5d      	ldr	r2, [pc, #372]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003654:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b5a      	ldr	r3, [pc, #360]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4957      	ldr	r1, [pc, #348]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fe fba8 	bl	8001dc0 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fe fba4 	bl	8001dc0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e095      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b4e      	ldr	r3, [pc, #312]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b4:	4b43      	ldr	r3, [pc, #268]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a42      	ldr	r2, [pc, #264]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036cc:	4b3d      	ldr	r3, [pc, #244]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036d4:	4a3b      	ldr	r2, [pc, #236]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036dc:	4b39      	ldr	r3, [pc, #228]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4936      	ldr	r1, [pc, #216]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
 80036ee:	e008      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b80      	cmp	r3, #128	@ 0x80
 80036f4:	d105      	bne.n	8003702 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036f6:	4b33      	ldr	r3, [pc, #204]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4a32      	ldr	r2, [pc, #200]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003700:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003702:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d21d      	bcs.n	800374c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 020f 	bic.w	r2, r3, #15
 8003718:	4929      	ldr	r1, [pc, #164]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003720:	f7fe fb4e 	bl	8001dc0 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fe fb4a 	bl	8001dc0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e03b      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d1ed      	bne.n	8003728 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b1a      	ldr	r3, [pc, #104]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4917      	ldr	r1, [pc, #92]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003776:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490f      	ldr	r1, [pc, #60]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800378a:	f000 f825 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490c      	ldr	r1, [pc, #48]	@ (80037cc <HAL_RCC_ClockConfig+0x26c>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	4a0a      	ldr	r2, [pc, #40]	@ (80037d0 <HAL_RCC_ClockConfig+0x270>)
 80037a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <HAL_RCC_ClockConfig+0x274>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe faba 	bl	8001d28 <HAL_InitTick>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40021000 	.word	0x40021000
 80037c8:	04c4b400 	.word	0x04c4b400
 80037cc:	0800a448 	.word	0x0800a448
 80037d0:	20000018 	.word	0x20000018
 80037d4:	2000001c 	.word	0x2000001c

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037de:	4b2c      	ldr	r3, [pc, #176]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d102      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003894 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e047      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037f0:	4b27      	ldr	r3, [pc, #156]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037fc:	4b26      	ldr	r3, [pc, #152]	@ (8003898 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e03e      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003802:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d136      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800380e:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003818:	4b1d      	ldr	r3, [pc, #116]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	3301      	adds	r3, #1
 8003824:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d10c      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382c:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <HAL_RCC_GetSysClockFreq+0xc0>)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	4a16      	ldr	r2, [pc, #88]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003836:	68d2      	ldr	r2, [r2, #12]
 8003838:	0a12      	lsrs	r2, r2, #8
 800383a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	617b      	str	r3, [r7, #20]
      break;
 8003844:	e00c      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003846:	4a13      	ldr	r2, [pc, #76]	@ (8003894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	4a10      	ldr	r2, [pc, #64]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003850:	68d2      	ldr	r2, [r2, #12]
 8003852:	0a12      	lsrs	r2, r2, #8
 8003854:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0e5b      	lsrs	r3, r3, #25
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	e001      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003880:	693b      	ldr	r3, [r7, #16]
}
 8003882:	4618      	mov	r0, r3
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	00f42400 	.word	0x00f42400
 8003898:	007a1200 	.word	0x007a1200

0800389c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000018 	.word	0x20000018

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4904      	ldr	r1, [pc, #16]	@ (80038dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800a458 	.word	0x0800a458

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038e4:	f7ff ffda 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0adb      	lsrs	r3, r3, #11
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4904      	ldr	r1, [pc, #16]	@ (8003908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	0800a458 	.word	0x0800a458

0800390c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003912:	4b1e      	ldr	r3, [pc, #120]	@ (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800391c:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d10c      	bne.n	800394a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003930:	4a17      	ldr	r2, [pc, #92]	@ (8003990 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	4a14      	ldr	r2, [pc, #80]	@ (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800393a:	68d2      	ldr	r2, [r2, #12]
 800393c:	0a12      	lsrs	r2, r2, #8
 800393e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	617b      	str	r3, [r7, #20]
    break;
 8003948:	e00c      	b.n	8003964 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800394a:	4a12      	ldr	r2, [pc, #72]	@ (8003994 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4a0e      	ldr	r2, [pc, #56]	@ (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	0a12      	lsrs	r2, r2, #8
 8003958:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
    break;
 8003962:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	0e5b      	lsrs	r3, r3, #25
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800397e:	687b      	ldr	r3, [r7, #4]
}
 8003980:	4618      	mov	r0, r3
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40021000 	.word	0x40021000
 8003990:	007a1200 	.word	0x007a1200
 8003994:	00f42400 	.word	0x00f42400

08003998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039a0:	2300      	movs	r3, #0
 80039a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039a4:	2300      	movs	r3, #0
 80039a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8098 	beq.w	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b43      	ldr	r3, [pc, #268]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c6:	4b40      	ldr	r3, [pc, #256]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ca:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e2:	4b3a      	ldr	r3, [pc, #232]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a39      	ldr	r2, [pc, #228]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ee:	f7fe f9e7 	bl	8001dc0 <HAL_GetTick>
 80039f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f4:	e009      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f6:	f7fe f9e3 	bl	8001dc0 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d902      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	74fb      	strb	r3, [r7, #19]
        break;
 8003a08:	e005      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0a:	4b30      	ldr	r3, [pc, #192]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ef      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d159      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01e      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d019      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a38:	4b23      	ldr	r3, [pc, #140]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a44:	4b20      	ldr	r3, [pc, #128]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a54:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a64:	4a18      	ldr	r2, [pc, #96]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe f9a3 	bl	8001dc0 <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fe f99f 	bl	8001dc0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d902      	bls.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	74fb      	strb	r3, [r7, #19]
            break;
 8003a94:	e006      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ec      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	4903      	ldr	r1, [pc, #12]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	74bb      	strb	r3, [r7, #18]
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad4:	7c7b      	ldrb	r3, [r7, #17]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ada:	4ba6      	ldr	r3, [pc, #664]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	4aa5      	ldr	r2, [pc, #660]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af2:	4ba0      	ldr	r3, [pc, #640]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af8:	f023 0203 	bic.w	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	499c      	ldr	r1, [pc, #624]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b14:	4b97      	ldr	r3, [pc, #604]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1a:	f023 020c 	bic.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4994      	ldr	r1, [pc, #592]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b36:	4b8f      	ldr	r3, [pc, #572]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	498b      	ldr	r1, [pc, #556]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b58:	4b86      	ldr	r3, [pc, #536]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	4983      	ldr	r1, [pc, #524]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b7a:	4b7e      	ldr	r3, [pc, #504]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	497a      	ldr	r1, [pc, #488]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9c:	4b75      	ldr	r3, [pc, #468]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	4972      	ldr	r1, [pc, #456]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4969      	ldr	r1, [pc, #420]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003be0:	4b64      	ldr	r3, [pc, #400]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4961      	ldr	r1, [pc, #388]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c02:	4b5c      	ldr	r3, [pc, #368]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	4958      	ldr	r1, [pc, #352]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c24:	4b53      	ldr	r3, [pc, #332]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	4950      	ldr	r1, [pc, #320]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c42:	d105      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c44:	4b4b      	ldr	r3, [pc, #300]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a4a      	ldr	r2, [pc, #296]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d015      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c5c:	4b45      	ldr	r3, [pc, #276]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6a:	4942      	ldr	r1, [pc, #264]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a3c      	ldr	r2, [pc, #240]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c86:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c94:	4b37      	ldr	r3, [pc, #220]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	4934      	ldr	r1, [pc, #208]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ccc:	4b29      	ldr	r3, [pc, #164]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cda:	4926      	ldr	r1, [pc, #152]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cec:	4b21      	ldr	r3, [pc, #132]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a20      	ldr	r2, [pc, #128]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d04:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	4918      	ldr	r1, [pc, #96]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d24:	4b13      	ldr	r3, [pc, #76]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a12      	ldr	r2, [pc, #72]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4a:	490a      	ldr	r1, [pc, #40]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a04      	ldr	r2, [pc, #16]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d68:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e049      	b.n	8003e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fe84 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 fba4 	bl	8004504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e049      	b.n	8003ecc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f841 	bl	8003ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fb4d 	bl	8004504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <HAL_TIM_PWM_Start+0x24>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e03c      	b.n	8003f86 <HAL_TIM_PWM_Start+0x9e>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d109      	bne.n	8003f26 <HAL_TIM_PWM_Start+0x3e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e02f      	b.n	8003f86 <HAL_TIM_PWM_Start+0x9e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d109      	bne.n	8003f40 <HAL_TIM_PWM_Start+0x58>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e022      	b.n	8003f86 <HAL_TIM_PWM_Start+0x9e>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d109      	bne.n	8003f5a <HAL_TIM_PWM_Start+0x72>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	e015      	b.n	8003f86 <HAL_TIM_PWM_Start+0x9e>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d109      	bne.n	8003f74 <HAL_TIM_PWM_Start+0x8c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e008      	b.n	8003f86 <HAL_TIM_PWM_Start+0x9e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e097      	b.n	80040be <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_PWM_Start+0xb6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f9c:	e023      	b.n	8003fe6 <HAL_TIM_PWM_Start+0xfe>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d104      	bne.n	8003fae <HAL_TIM_PWM_Start+0xc6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fac:	e01b      	b.n	8003fe6 <HAL_TIM_PWM_Start+0xfe>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d104      	bne.n	8003fbe <HAL_TIM_PWM_Start+0xd6>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fbc:	e013      	b.n	8003fe6 <HAL_TIM_PWM_Start+0xfe>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_PWM_Start+0xe6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fcc:	e00b      	b.n	8003fe6 <HAL_TIM_PWM_Start+0xfe>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_PWM_Start+0xf6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fdc:	e003      	b.n	8003fe6 <HAL_TIM_PWM_Start+0xfe>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 feb6 	bl	8004d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a33      	ldr	r2, [pc, #204]	@ (80040c8 <HAL_TIM_PWM_Start+0x1e0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_TIM_PWM_Start+0x13e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a32      	ldr	r2, [pc, #200]	@ (80040cc <HAL_TIM_PWM_Start+0x1e4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_TIM_PWM_Start+0x13e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a30      	ldr	r2, [pc, #192]	@ (80040d0 <HAL_TIM_PWM_Start+0x1e8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_TIM_PWM_Start+0x13e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2f      	ldr	r2, [pc, #188]	@ (80040d4 <HAL_TIM_PWM_Start+0x1ec>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIM_PWM_Start+0x13e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2d      	ldr	r2, [pc, #180]	@ (80040d8 <HAL_TIM_PWM_Start+0x1f0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <HAL_TIM_PWM_Start+0x142>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_TIM_PWM_Start+0x144>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a20      	ldr	r2, [pc, #128]	@ (80040c8 <HAL_TIM_PWM_Start+0x1e0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_TIM_PWM_Start+0x194>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004052:	d013      	beq.n	800407c <HAL_TIM_PWM_Start+0x194>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a20      	ldr	r2, [pc, #128]	@ (80040dc <HAL_TIM_PWM_Start+0x1f4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_TIM_PWM_Start+0x194>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1f      	ldr	r2, [pc, #124]	@ (80040e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_TIM_PWM_Start+0x194>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a17      	ldr	r2, [pc, #92]	@ (80040cc <HAL_TIM_PWM_Start+0x1e4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_PWM_Start+0x194>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a16      	ldr	r2, [pc, #88]	@ (80040d0 <HAL_TIM_PWM_Start+0x1e8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d115      	bne.n	80040a8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	4b18      	ldr	r3, [pc, #96]	@ (80040e4 <HAL_TIM_PWM_Start+0x1fc>)
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d015      	beq.n	80040ba <HAL_TIM_PWM_Start+0x1d2>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d011      	beq.n	80040ba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a6:	e008      	b.n	80040ba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e000      	b.n	80040bc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40013400 	.word	0x40013400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	00010007 	.word	0x00010007

080040e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004102:	2302      	movs	r3, #2
 8004104:	e0ff      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b14      	cmp	r3, #20
 8004112:	f200 80f0 	bhi.w	80042f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004116:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	08004171 	.word	0x08004171
 8004120:	080042f7 	.word	0x080042f7
 8004124:	080042f7 	.word	0x080042f7
 8004128:	080042f7 	.word	0x080042f7
 800412c:	080041b1 	.word	0x080041b1
 8004130:	080042f7 	.word	0x080042f7
 8004134:	080042f7 	.word	0x080042f7
 8004138:	080042f7 	.word	0x080042f7
 800413c:	080041f3 	.word	0x080041f3
 8004140:	080042f7 	.word	0x080042f7
 8004144:	080042f7 	.word	0x080042f7
 8004148:	080042f7 	.word	0x080042f7
 800414c:	08004233 	.word	0x08004233
 8004150:	080042f7 	.word	0x080042f7
 8004154:	080042f7 	.word	0x080042f7
 8004158:	080042f7 	.word	0x080042f7
 800415c:	08004275 	.word	0x08004275
 8004160:	080042f7 	.word	0x080042f7
 8004164:	080042f7 	.word	0x080042f7
 8004168:	080042f7 	.word	0x080042f7
 800416c:	080042b5 	.word	0x080042b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa60 	bl	800463c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0208 	orr.w	r2, r2, #8
 800418a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0204 	bic.w	r2, r2, #4
 800419a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6999      	ldr	r1, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	619a      	str	r2, [r3, #24]
      break;
 80041ae:	e0a5      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fad0 	bl	800475c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6999      	ldr	r1, [r3, #24]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	021a      	lsls	r2, r3, #8
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	619a      	str	r2, [r3, #24]
      break;
 80041f0:	e084      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fb39 	bl	8004870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0208 	orr.w	r2, r2, #8
 800420c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0204 	bic.w	r2, r2, #4
 800421c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69d9      	ldr	r1, [r3, #28]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	61da      	str	r2, [r3, #28]
      break;
 8004230:	e064      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fba1 	bl	8004980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800424c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800425c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69d9      	ldr	r1, [r3, #28]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	021a      	lsls	r2, r3, #8
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	61da      	str	r2, [r3, #28]
      break;
 8004272:	e043      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fc0a 	bl	8004a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80042b2:	e023      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fc4e 	bl	8004b5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80042f4:	e002      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	75fb      	strb	r3, [r7, #23]
      break;
 80042fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004304:	7dfb      	ldrb	r3, [r7, #23]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop

08004310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIM_ConfigClockSource+0x1c>
 8004328:	2302      	movs	r3, #2
 800432a:	e0de      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x1da>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800434a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800434e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a63      	ldr	r2, [pc, #396]	@ (80044f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	f000 80a9 	beq.w	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 800436c:	4a61      	ldr	r2, [pc, #388]	@ (80044f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f200 80ae 	bhi.w	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004374:	4a60      	ldr	r2, [pc, #384]	@ (80044f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f000 80a1 	beq.w	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 800437c:	4a5e      	ldr	r2, [pc, #376]	@ (80044f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f200 80a6 	bhi.w	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004384:	4a5d      	ldr	r2, [pc, #372]	@ (80044fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f000 8099 	beq.w	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 800438c:	4a5b      	ldr	r2, [pc, #364]	@ (80044fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	f200 809e 	bhi.w	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004394:	4a5a      	ldr	r2, [pc, #360]	@ (8004500 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	f000 8091 	beq.w	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 800439c:	4a58      	ldr	r2, [pc, #352]	@ (8004500 <HAL_TIM_ConfigClockSource+0x1f0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f200 8096 	bhi.w	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80043a8:	f000 8089 	beq.w	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 80043ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80043b0:	f200 808e 	bhi.w	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b8:	d03e      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x128>
 80043ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043be:	f200 8087 	bhi.w	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c6:	f000 8086 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1c6>
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ce:	d87f      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043d0:	2b70      	cmp	r3, #112	@ 0x70
 80043d2:	d01a      	beq.n	800440a <HAL_TIM_ConfigClockSource+0xfa>
 80043d4:	2b70      	cmp	r3, #112	@ 0x70
 80043d6:	d87b      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043d8:	2b60      	cmp	r3, #96	@ 0x60
 80043da:	d050      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x16e>
 80043dc:	2b60      	cmp	r3, #96	@ 0x60
 80043de:	d877      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043e0:	2b50      	cmp	r3, #80	@ 0x50
 80043e2:	d03c      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x14e>
 80043e4:	2b50      	cmp	r3, #80	@ 0x50
 80043e6:	d873      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043e8:	2b40      	cmp	r3, #64	@ 0x40
 80043ea:	d058      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x18e>
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	d86f      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043f0:	2b30      	cmp	r3, #48	@ 0x30
 80043f2:	d064      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 80043f4:	2b30      	cmp	r3, #48	@ 0x30
 80043f6:	d86b      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d060      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d867      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d05c      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 8004404:	2b10      	cmp	r3, #16
 8004406:	d05a      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x1ae>
 8004408:	e062      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800441a:	f000 fc81 	bl	8004d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800442c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	609a      	str	r2, [r3, #8]
      break;
 8004436:	e04f      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004448:	f000 fc6a 	bl	8004d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800445a:	609a      	str	r2, [r3, #8]
      break;
 800445c:	e03c      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446a:	461a      	mov	r2, r3
 800446c:	f000 fbdc 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2150      	movs	r1, #80	@ 0x50
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fc35 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 800447c:	e02c      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fbfb 	bl	8004c86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2160      	movs	r1, #96	@ 0x60
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fc25 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 800449c:	e01c      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 fbbc 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2140      	movs	r1, #64	@ 0x40
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fc15 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 80044bc:	e00c      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f000 fc0c 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 80044ce:	e003      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      break;
 80044d4:	e000      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80044d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	00100070 	.word	0x00100070
 80044f8:	00100040 	.word	0x00100040
 80044fc:	00100030 	.word	0x00100030
 8004500:	00100020 	.word	0x00100020

08004504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a42      	ldr	r2, [pc, #264]	@ (8004620 <TIM_Base_SetConfig+0x11c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00f      	beq.n	800453c <TIM_Base_SetConfig+0x38>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004522:	d00b      	beq.n	800453c <TIM_Base_SetConfig+0x38>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a3f      	ldr	r2, [pc, #252]	@ (8004624 <TIM_Base_SetConfig+0x120>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_Base_SetConfig+0x38>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3e      	ldr	r2, [pc, #248]	@ (8004628 <TIM_Base_SetConfig+0x124>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0x38>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3d      	ldr	r2, [pc, #244]	@ (800462c <TIM_Base_SetConfig+0x128>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d108      	bne.n	800454e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a33      	ldr	r2, [pc, #204]	@ (8004620 <TIM_Base_SetConfig+0x11c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01b      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455c:	d017      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a30      	ldr	r2, [pc, #192]	@ (8004624 <TIM_Base_SetConfig+0x120>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2f      	ldr	r2, [pc, #188]	@ (8004628 <TIM_Base_SetConfig+0x124>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00f      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2e      	ldr	r2, [pc, #184]	@ (800462c <TIM_Base_SetConfig+0x128>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00b      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a2d      	ldr	r2, [pc, #180]	@ (8004630 <TIM_Base_SetConfig+0x12c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2c      	ldr	r2, [pc, #176]	@ (8004634 <TIM_Base_SetConfig+0x130>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <TIM_Base_SetConfig+0x134>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d108      	bne.n	80045a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a16      	ldr	r2, [pc, #88]	@ (8004620 <TIM_Base_SetConfig+0x11c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00f      	beq.n	80045ec <TIM_Base_SetConfig+0xe8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a17      	ldr	r2, [pc, #92]	@ (800462c <TIM_Base_SetConfig+0x128>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00b      	beq.n	80045ec <TIM_Base_SetConfig+0xe8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a16      	ldr	r2, [pc, #88]	@ (8004630 <TIM_Base_SetConfig+0x12c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d007      	beq.n	80045ec <TIM_Base_SetConfig+0xe8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a15      	ldr	r2, [pc, #84]	@ (8004634 <TIM_Base_SetConfig+0x130>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d003      	beq.n	80045ec <TIM_Base_SetConfig+0xe8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a14      	ldr	r2, [pc, #80]	@ (8004638 <TIM_Base_SetConfig+0x134>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d103      	bne.n	80045f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d105      	bne.n	8004612 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f023 0201 	bic.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	611a      	str	r2, [r3, #16]
  }
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40013400 	.word	0x40013400
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800

0800463c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 0201 	bic.w	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 0302 	bic.w	r3, r3, #2
 8004688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a2c      	ldr	r2, [pc, #176]	@ (8004748 <TIM_OC1_SetConfig+0x10c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00f      	beq.n	80046bc <TIM_OC1_SetConfig+0x80>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2b      	ldr	r2, [pc, #172]	@ (800474c <TIM_OC1_SetConfig+0x110>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00b      	beq.n	80046bc <TIM_OC1_SetConfig+0x80>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004750 <TIM_OC1_SetConfig+0x114>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <TIM_OC1_SetConfig+0x80>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a29      	ldr	r2, [pc, #164]	@ (8004754 <TIM_OC1_SetConfig+0x118>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_OC1_SetConfig+0x80>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a28      	ldr	r2, [pc, #160]	@ (8004758 <TIM_OC1_SetConfig+0x11c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d10c      	bne.n	80046d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0308 	bic.w	r3, r3, #8
 80046c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 0304 	bic.w	r3, r3, #4
 80046d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004748 <TIM_OC1_SetConfig+0x10c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00f      	beq.n	80046fe <TIM_OC1_SetConfig+0xc2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <TIM_OC1_SetConfig+0x110>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00b      	beq.n	80046fe <TIM_OC1_SetConfig+0xc2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <TIM_OC1_SetConfig+0x114>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <TIM_OC1_SetConfig+0xc2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <TIM_OC1_SetConfig+0x118>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d003      	beq.n	80046fe <TIM_OC1_SetConfig+0xc2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <TIM_OC1_SetConfig+0x11c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d111      	bne.n	8004722 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800470c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	621a      	str	r2, [r3, #32]
}
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40013400 	.word	0x40013400
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800

0800475c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f023 0210 	bic.w	r2, r3, #16
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800478a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 0320 	bic.w	r3, r3, #32
 80047aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a28      	ldr	r2, [pc, #160]	@ (800485c <TIM_OC2_SetConfig+0x100>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_OC2_SetConfig+0x6c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a27      	ldr	r2, [pc, #156]	@ (8004860 <TIM_OC2_SetConfig+0x104>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10d      	bne.n	80047e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <TIM_OC2_SetConfig+0x100>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00f      	beq.n	800480c <TIM_OC2_SetConfig+0xb0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004860 <TIM_OC2_SetConfig+0x104>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00b      	beq.n	800480c <TIM_OC2_SetConfig+0xb0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004864 <TIM_OC2_SetConfig+0x108>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d007      	beq.n	800480c <TIM_OC2_SetConfig+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004868 <TIM_OC2_SetConfig+0x10c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_OC2_SetConfig+0xb0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a19      	ldr	r2, [pc, #100]	@ (800486c <TIM_OC2_SetConfig+0x110>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d113      	bne.n	8004834 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800481a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40013400 	.word	0x40013400
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800

08004870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a27      	ldr	r2, [pc, #156]	@ (800496c <TIM_OC3_SetConfig+0xfc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_OC3_SetConfig+0x6a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <TIM_OC3_SetConfig+0x100>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d10d      	bne.n	80048f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <TIM_OC3_SetConfig+0xfc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00f      	beq.n	800491e <TIM_OC3_SetConfig+0xae>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <TIM_OC3_SetConfig+0x100>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00b      	beq.n	800491e <TIM_OC3_SetConfig+0xae>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1a      	ldr	r2, [pc, #104]	@ (8004974 <TIM_OC3_SetConfig+0x104>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <TIM_OC3_SetConfig+0xae>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a19      	ldr	r2, [pc, #100]	@ (8004978 <TIM_OC3_SetConfig+0x108>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_OC3_SetConfig+0xae>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a18      	ldr	r2, [pc, #96]	@ (800497c <TIM_OC3_SetConfig+0x10c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d113      	bne.n	8004946 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800492c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	621a      	str	r2, [r3, #32]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800

08004980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a28      	ldr	r2, [pc, #160]	@ (8004a80 <TIM_OC4_SetConfig+0x100>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_OC4_SetConfig+0x6c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a27      	ldr	r2, [pc, #156]	@ (8004a84 <TIM_OC4_SetConfig+0x104>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10d      	bne.n	8004a08 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a80 <TIM_OC4_SetConfig+0x100>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00f      	beq.n	8004a30 <TIM_OC4_SetConfig+0xb0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	@ (8004a84 <TIM_OC4_SetConfig+0x104>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <TIM_OC4_SetConfig+0xb0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a88 <TIM_OC4_SetConfig+0x108>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d007      	beq.n	8004a30 <TIM_OC4_SetConfig+0xb0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1a      	ldr	r2, [pc, #104]	@ (8004a8c <TIM_OC4_SetConfig+0x10c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_OC4_SetConfig+0xb0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a19      	ldr	r2, [pc, #100]	@ (8004a90 <TIM_OC4_SetConfig+0x110>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d113      	bne.n	8004a58 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a36:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a3e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	019b      	lsls	r3, r3, #6
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40013400 	.word	0x40013400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ad8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a17      	ldr	r2, [pc, #92]	@ (8004b48 <TIM_OC5_SetConfig+0xb4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00f      	beq.n	8004b0e <TIM_OC5_SetConfig+0x7a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a16      	ldr	r2, [pc, #88]	@ (8004b4c <TIM_OC5_SetConfig+0xb8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <TIM_OC5_SetConfig+0x7a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a15      	ldr	r2, [pc, #84]	@ (8004b50 <TIM_OC5_SetConfig+0xbc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_OC5_SetConfig+0x7a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a14      	ldr	r2, [pc, #80]	@ (8004b54 <TIM_OC5_SetConfig+0xc0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_OC5_SetConfig+0x7a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a13      	ldr	r2, [pc, #76]	@ (8004b58 <TIM_OC5_SetConfig+0xc4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d109      	bne.n	8004b22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40013400 	.word	0x40013400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	051b      	lsls	r3, r3, #20
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a18      	ldr	r2, [pc, #96]	@ (8004c14 <TIM_OC6_SetConfig+0xb8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00f      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x7c>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <TIM_OC6_SetConfig+0xbc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00b      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x7c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a16      	ldr	r2, [pc, #88]	@ (8004c1c <TIM_OC6_SetConfig+0xc0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x7c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a15      	ldr	r2, [pc, #84]	@ (8004c20 <TIM_OC6_SetConfig+0xc4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x7c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a14      	ldr	r2, [pc, #80]	@ (8004c24 <TIM_OC6_SetConfig+0xc8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d109      	bne.n	8004bec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40013400 	.word	0x40013400
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0201 	bic.w	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 030a 	bic.w	r3, r3, #10
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f023 0210 	bic.w	r2, r3, #16
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	031b      	lsls	r3, r3, #12
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f043 0307 	orr.w	r3, r3, #7
 8004d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	2201      	movs	r2, #1
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	401a      	ands	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	fa01 f303 	lsl.w	r3, r1, r3
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e065      	b.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d108      	bne.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004dfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d018      	beq.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3a:	d013      	beq.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a18      	ldr	r2, [pc, #96]	@ (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00e      	beq.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a12      	ldr	r2, [pc, #72]	@ (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10c      	bne.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40013400 	.word	0x40013400
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	40014000 	.word	0x40014000

08004eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e073      	b.n	8004fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a19      	ldr	r2, [pc, #100]	@ (8004fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a18      	ldr	r2, [pc, #96]	@ (8004fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d11c      	bne.n	8004fa2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	051b      	lsls	r3, r3, #20
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40013400 	.word	0x40013400

08004fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e042      	b.n	8005060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fc fe01 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2224      	movs	r2, #36	@ 0x24
 8004ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fb82 	bl	800571c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8b3 	bl	8005184 <UART_SetConfig>
 800501e:	4603      	mov	r3, r0
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e01b      	b.n	8005060 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fc01 	bl	8005860 <UART_CheckIdleState>
 800505e:	4603      	mov	r3, r0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	@ 0x28
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	4613      	mov	r3, r2
 8005076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507e:	2b20      	cmp	r3, #32
 8005080:	d17b      	bne.n	800517a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_UART_Transmit+0x26>
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e074      	b.n	800517c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2221      	movs	r2, #33	@ 0x21
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050a2:	f7fc fe8d 	bl	8001dc0 <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c0:	d108      	bne.n	80050d4 <HAL_UART_Transmit+0x6c>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	e003      	b.n	80050dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050dc:	e030      	b.n	8005140 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fc63 	bl	80059b4 <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e03d      	b.n	800517c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005114:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	3302      	adds	r3, #2
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e007      	b.n	800512e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1c8      	bne.n	80050de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2200      	movs	r2, #0
 8005154:	2140      	movs	r1, #64	@ 0x40
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fc2c 	bl	80059b4 <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e006      	b.n	800517c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005188:	b08c      	sub	sp, #48	@ 0x30
 800518a:	af00      	add	r7, sp, #0
 800518c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	431a      	orrs	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4bab      	ldr	r3, [pc, #684]	@ (8005460 <UART_SetConfig+0x2dc>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051bc:	430b      	orrs	r3, r1
 80051be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4aa0      	ldr	r2, [pc, #640]	@ (8005464 <UART_SetConfig+0x2e0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ec:	4313      	orrs	r3, r2
 80051ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005204:	430b      	orrs	r3, r1
 8005206:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520e:	f023 010f 	bic.w	r1, r3, #15
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a91      	ldr	r2, [pc, #580]	@ (8005468 <UART_SetConfig+0x2e4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d125      	bne.n	8005274 <UART_SetConfig+0xf0>
 8005228:	4b90      	ldr	r3, [pc, #576]	@ (800546c <UART_SetConfig+0x2e8>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b03      	cmp	r3, #3
 8005234:	d81a      	bhi.n	800526c <UART_SetConfig+0xe8>
 8005236:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <UART_SetConfig+0xb8>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	0800524d 	.word	0x0800524d
 8005240:	0800525d 	.word	0x0800525d
 8005244:	08005255 	.word	0x08005255
 8005248:	08005265 	.word	0x08005265
 800524c:	2301      	movs	r3, #1
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005252:	e0d6      	b.n	8005402 <UART_SetConfig+0x27e>
 8005254:	2302      	movs	r3, #2
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525a:	e0d2      	b.n	8005402 <UART_SetConfig+0x27e>
 800525c:	2304      	movs	r3, #4
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005262:	e0ce      	b.n	8005402 <UART_SetConfig+0x27e>
 8005264:	2308      	movs	r3, #8
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526a:	e0ca      	b.n	8005402 <UART_SetConfig+0x27e>
 800526c:	2310      	movs	r3, #16
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005272:	e0c6      	b.n	8005402 <UART_SetConfig+0x27e>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a7d      	ldr	r2, [pc, #500]	@ (8005470 <UART_SetConfig+0x2ec>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d138      	bne.n	80052f0 <UART_SetConfig+0x16c>
 800527e:	4b7b      	ldr	r3, [pc, #492]	@ (800546c <UART_SetConfig+0x2e8>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005284:	f003 030c 	and.w	r3, r3, #12
 8005288:	2b0c      	cmp	r3, #12
 800528a:	d82d      	bhi.n	80052e8 <UART_SetConfig+0x164>
 800528c:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <UART_SetConfig+0x110>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052c9 	.word	0x080052c9
 8005298:	080052e9 	.word	0x080052e9
 800529c:	080052e9 	.word	0x080052e9
 80052a0:	080052e9 	.word	0x080052e9
 80052a4:	080052d9 	.word	0x080052d9
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052e9 	.word	0x080052e9
 80052b0:	080052e9 	.word	0x080052e9
 80052b4:	080052d1 	.word	0x080052d1
 80052b8:	080052e9 	.word	0x080052e9
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	080052e1 	.word	0x080052e1
 80052c8:	2300      	movs	r3, #0
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ce:	e098      	b.n	8005402 <UART_SetConfig+0x27e>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d6:	e094      	b.n	8005402 <UART_SetConfig+0x27e>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052de:	e090      	b.n	8005402 <UART_SetConfig+0x27e>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e08c      	b.n	8005402 <UART_SetConfig+0x27e>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e088      	b.n	8005402 <UART_SetConfig+0x27e>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a5f      	ldr	r2, [pc, #380]	@ (8005474 <UART_SetConfig+0x2f0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d125      	bne.n	8005346 <UART_SetConfig+0x1c2>
 80052fa:	4b5c      	ldr	r3, [pc, #368]	@ (800546c <UART_SetConfig+0x2e8>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005300:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005304:	2b30      	cmp	r3, #48	@ 0x30
 8005306:	d016      	beq.n	8005336 <UART_SetConfig+0x1b2>
 8005308:	2b30      	cmp	r3, #48	@ 0x30
 800530a:	d818      	bhi.n	800533e <UART_SetConfig+0x1ba>
 800530c:	2b20      	cmp	r3, #32
 800530e:	d00a      	beq.n	8005326 <UART_SetConfig+0x1a2>
 8005310:	2b20      	cmp	r3, #32
 8005312:	d814      	bhi.n	800533e <UART_SetConfig+0x1ba>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <UART_SetConfig+0x19a>
 8005318:	2b10      	cmp	r3, #16
 800531a:	d008      	beq.n	800532e <UART_SetConfig+0x1aa>
 800531c:	e00f      	b.n	800533e <UART_SetConfig+0x1ba>
 800531e:	2300      	movs	r3, #0
 8005320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005324:	e06d      	b.n	8005402 <UART_SetConfig+0x27e>
 8005326:	2302      	movs	r3, #2
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532c:	e069      	b.n	8005402 <UART_SetConfig+0x27e>
 800532e:	2304      	movs	r3, #4
 8005330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005334:	e065      	b.n	8005402 <UART_SetConfig+0x27e>
 8005336:	2308      	movs	r3, #8
 8005338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533c:	e061      	b.n	8005402 <UART_SetConfig+0x27e>
 800533e:	2310      	movs	r3, #16
 8005340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005344:	e05d      	b.n	8005402 <UART_SetConfig+0x27e>
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a4b      	ldr	r2, [pc, #300]	@ (8005478 <UART_SetConfig+0x2f4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d125      	bne.n	800539c <UART_SetConfig+0x218>
 8005350:	4b46      	ldr	r3, [pc, #280]	@ (800546c <UART_SetConfig+0x2e8>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800535a:	2bc0      	cmp	r3, #192	@ 0xc0
 800535c:	d016      	beq.n	800538c <UART_SetConfig+0x208>
 800535e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005360:	d818      	bhi.n	8005394 <UART_SetConfig+0x210>
 8005362:	2b80      	cmp	r3, #128	@ 0x80
 8005364:	d00a      	beq.n	800537c <UART_SetConfig+0x1f8>
 8005366:	2b80      	cmp	r3, #128	@ 0x80
 8005368:	d814      	bhi.n	8005394 <UART_SetConfig+0x210>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <UART_SetConfig+0x1f0>
 800536e:	2b40      	cmp	r3, #64	@ 0x40
 8005370:	d008      	beq.n	8005384 <UART_SetConfig+0x200>
 8005372:	e00f      	b.n	8005394 <UART_SetConfig+0x210>
 8005374:	2300      	movs	r3, #0
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e042      	b.n	8005402 <UART_SetConfig+0x27e>
 800537c:	2302      	movs	r3, #2
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e03e      	b.n	8005402 <UART_SetConfig+0x27e>
 8005384:	2304      	movs	r3, #4
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e03a      	b.n	8005402 <UART_SetConfig+0x27e>
 800538c:	2308      	movs	r3, #8
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005392:	e036      	b.n	8005402 <UART_SetConfig+0x27e>
 8005394:	2310      	movs	r3, #16
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800539a:	e032      	b.n	8005402 <UART_SetConfig+0x27e>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a30      	ldr	r2, [pc, #192]	@ (8005464 <UART_SetConfig+0x2e0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d12a      	bne.n	80053fc <UART_SetConfig+0x278>
 80053a6:	4b31      	ldr	r3, [pc, #196]	@ (800546c <UART_SetConfig+0x2e8>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80053b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053b4:	d01a      	beq.n	80053ec <UART_SetConfig+0x268>
 80053b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053ba:	d81b      	bhi.n	80053f4 <UART_SetConfig+0x270>
 80053bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c0:	d00c      	beq.n	80053dc <UART_SetConfig+0x258>
 80053c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c6:	d815      	bhi.n	80053f4 <UART_SetConfig+0x270>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <UART_SetConfig+0x250>
 80053cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d0:	d008      	beq.n	80053e4 <UART_SetConfig+0x260>
 80053d2:	e00f      	b.n	80053f4 <UART_SetConfig+0x270>
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053da:	e012      	b.n	8005402 <UART_SetConfig+0x27e>
 80053dc:	2302      	movs	r3, #2
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e2:	e00e      	b.n	8005402 <UART_SetConfig+0x27e>
 80053e4:	2304      	movs	r3, #4
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ea:	e00a      	b.n	8005402 <UART_SetConfig+0x27e>
 80053ec:	2308      	movs	r3, #8
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f2:	e006      	b.n	8005402 <UART_SetConfig+0x27e>
 80053f4:	2310      	movs	r3, #16
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fa:	e002      	b.n	8005402 <UART_SetConfig+0x27e>
 80053fc:	2310      	movs	r3, #16
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a17      	ldr	r2, [pc, #92]	@ (8005464 <UART_SetConfig+0x2e0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	f040 80a8 	bne.w	800555e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800540e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005412:	2b08      	cmp	r3, #8
 8005414:	d834      	bhi.n	8005480 <UART_SetConfig+0x2fc>
 8005416:	a201      	add	r2, pc, #4	@ (adr r2, 800541c <UART_SetConfig+0x298>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005441 	.word	0x08005441
 8005420:	08005481 	.word	0x08005481
 8005424:	08005449 	.word	0x08005449
 8005428:	08005481 	.word	0x08005481
 800542c:	0800544f 	.word	0x0800544f
 8005430:	08005481 	.word	0x08005481
 8005434:	08005481 	.word	0x08005481
 8005438:	08005481 	.word	0x08005481
 800543c:	08005457 	.word	0x08005457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005440:	f7fe fa38 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8005444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005446:	e021      	b.n	800548c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005448:	4b0c      	ldr	r3, [pc, #48]	@ (800547c <UART_SetConfig+0x2f8>)
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800544c:	e01e      	b.n	800548c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800544e:	f7fe f9c3 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8005452:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005454:	e01a      	b.n	800548c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800545c:	e016      	b.n	800548c <UART_SetConfig+0x308>
 800545e:	bf00      	nop
 8005460:	cfff69f3 	.word	0xcfff69f3
 8005464:	40008000 	.word	0x40008000
 8005468:	40013800 	.word	0x40013800
 800546c:	40021000 	.word	0x40021000
 8005470:	40004400 	.word	0x40004400
 8005474:	40004800 	.word	0x40004800
 8005478:	40004c00 	.word	0x40004c00
 800547c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800548a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 812a 	beq.w	80056e8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	4a9e      	ldr	r2, [pc, #632]	@ (8005714 <UART_SetConfig+0x590>)
 800549a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549e:	461a      	mov	r2, r3
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d305      	bcc.n	80054c4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d903      	bls.n	80054cc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054ca:	e10d      	b.n	80056e8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	2200      	movs	r2, #0
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	60fa      	str	r2, [r7, #12]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	4a8e      	ldr	r2, [pc, #568]	@ (8005714 <UART_SetConfig+0x590>)
 80054da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2200      	movs	r2, #0
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054ee:	f7fb fbf3 	bl	8000cd8 <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4610      	mov	r0, r2
 80054f8:	4619      	mov	r1, r3
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	020b      	lsls	r3, r1, #8
 8005504:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005508:	0202      	lsls	r2, r0, #8
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	6849      	ldr	r1, [r1, #4]
 800550e:	0849      	lsrs	r1, r1, #1
 8005510:	2000      	movs	r0, #0
 8005512:	460c      	mov	r4, r1
 8005514:	4605      	mov	r5, r0
 8005516:	eb12 0804 	adds.w	r8, r2, r4
 800551a:	eb43 0905 	adc.w	r9, r3, r5
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	469a      	mov	sl, r3
 8005526:	4693      	mov	fp, r2
 8005528:	4652      	mov	r2, sl
 800552a:	465b      	mov	r3, fp
 800552c:	4640      	mov	r0, r8
 800552e:	4649      	mov	r1, r9
 8005530:	f7fb fbd2 	bl	8000cd8 <__aeabi_uldivmod>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4613      	mov	r3, r2
 800553a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005542:	d308      	bcc.n	8005556 <UART_SetConfig+0x3d2>
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800554a:	d204      	bcs.n	8005556 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a3a      	ldr	r2, [r7, #32]
 8005552:	60da      	str	r2, [r3, #12]
 8005554:	e0c8      	b.n	80056e8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800555c:	e0c4      	b.n	80056e8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005566:	d167      	bne.n	8005638 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005568:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800556c:	2b08      	cmp	r3, #8
 800556e:	d828      	bhi.n	80055c2 <UART_SetConfig+0x43e>
 8005570:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <UART_SetConfig+0x3f4>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	0800559d 	.word	0x0800559d
 800557c:	080055a5 	.word	0x080055a5
 8005580:	080055ad 	.word	0x080055ad
 8005584:	080055c3 	.word	0x080055c3
 8005588:	080055b3 	.word	0x080055b3
 800558c:	080055c3 	.word	0x080055c3
 8005590:	080055c3 	.word	0x080055c3
 8005594:	080055c3 	.word	0x080055c3
 8005598:	080055bb 	.word	0x080055bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800559c:	f7fe f98a 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 80055a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055a2:	e014      	b.n	80055ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a4:	f7fe f99c 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 80055a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055aa:	e010      	b.n	80055ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005718 <UART_SetConfig+0x594>)
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055b0:	e00d      	b.n	80055ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055b2:	f7fe f911 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 80055b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055b8:	e009      	b.n	80055ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055c0:	e005      	b.n	80055ce <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8089 	beq.w	80056e8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055da:	4a4e      	ldr	r2, [pc, #312]	@ (8005714 <UART_SetConfig+0x590>)
 80055dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80055e8:	005a      	lsls	r2, r3, #1
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	441a      	add	r2, r3
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	2b0f      	cmp	r3, #15
 8005600:	d916      	bls.n	8005630 <UART_SetConfig+0x4ac>
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005608:	d212      	bcs.n	8005630 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f023 030f 	bic.w	r3, r3, #15
 8005612:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	b29b      	uxth	r3, r3
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	b29a      	uxth	r2, r3
 8005620:	8bfb      	ldrh	r3, [r7, #30]
 8005622:	4313      	orrs	r3, r2
 8005624:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	8bfa      	ldrh	r2, [r7, #30]
 800562c:	60da      	str	r2, [r3, #12]
 800562e:	e05b      	b.n	80056e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005636:	e057      	b.n	80056e8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005638:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800563c:	2b08      	cmp	r3, #8
 800563e:	d828      	bhi.n	8005692 <UART_SetConfig+0x50e>
 8005640:	a201      	add	r2, pc, #4	@ (adr r2, 8005648 <UART_SetConfig+0x4c4>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	0800566d 	.word	0x0800566d
 800564c:	08005675 	.word	0x08005675
 8005650:	0800567d 	.word	0x0800567d
 8005654:	08005693 	.word	0x08005693
 8005658:	08005683 	.word	0x08005683
 800565c:	08005693 	.word	0x08005693
 8005660:	08005693 	.word	0x08005693
 8005664:	08005693 	.word	0x08005693
 8005668:	0800568b 	.word	0x0800568b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800566c:	f7fe f922 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8005670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005672:	e014      	b.n	800569e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7fe f934 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8005678:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800567a:	e010      	b.n	800569e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800567c:	4b26      	ldr	r3, [pc, #152]	@ (8005718 <UART_SetConfig+0x594>)
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005680:	e00d      	b.n	800569e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005682:	f7fe f8a9 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8005686:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005688:	e009      	b.n	800569e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005690:	e005      	b.n	800569e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800569c:	bf00      	nop
    }

    if (pclk != 0U)
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d021      	beq.n	80056e8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005714 <UART_SetConfig+0x590>)
 80056aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ae:	461a      	mov	r2, r3
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	441a      	add	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d909      	bls.n	80056e2 <UART_SetConfig+0x55e>
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d4:	d205      	bcs.n	80056e2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	b29a      	uxth	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60da      	str	r2, [r3, #12]
 80056e0:	e002      	b.n	80056e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2200      	movs	r2, #0
 80056fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2200      	movs	r2, #0
 8005702:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005704:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005708:	4618      	mov	r0, r3
 800570a:	3730      	adds	r7, #48	@ 0x30
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005712:	bf00      	nop
 8005714:	0800a470 	.word	0x0800a470
 8005718:	00f42400 	.word	0x00f42400

0800571c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01a      	beq.n	8005832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800581a:	d10a      	bne.n	8005832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b098      	sub	sp, #96	@ 0x60
 8005864:	af02      	add	r7, sp, #8
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005870:	f7fc faa6 	bl	8001dc0 <HAL_GetTick>
 8005874:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b08      	cmp	r3, #8
 8005882:	d12f      	bne.n	80058e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588c:	2200      	movs	r2, #0
 800588e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f88e 	bl	80059b4 <UART_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d022      	beq.n	80058e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e063      	b.n	80059ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d149      	bne.n	8005986 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fa:	2200      	movs	r2, #0
 80058fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f857 	bl	80059b4 <UART_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d03c      	beq.n	8005986 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	623b      	str	r3, [r7, #32]
   return(result);
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800592a:	633b      	str	r3, [r7, #48]	@ 0x30
 800592c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e6      	bne.n	800590c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	60fb      	str	r3, [r7, #12]
   return(result);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3308      	adds	r3, #8
 800595c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800595e:	61fa      	str	r2, [r7, #28]
 8005960:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	69b9      	ldr	r1, [r7, #24]
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	617b      	str	r3, [r7, #20]
   return(result);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e5      	bne.n	800593e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e012      	b.n	80059ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3758      	adds	r7, #88	@ 0x58
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c4:	e04f      	b.n	8005a66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d04b      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ce:	f7fc f9f7 	bl	8001dc0 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d302      	bcc.n	80059e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e04e      	b.n	8005a86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d037      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b80      	cmp	r3, #128	@ 0x80
 80059fa:	d034      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b40      	cmp	r3, #64	@ 0x40
 8005a00:	d031      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d110      	bne.n	8005a32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2208      	movs	r2, #8
 8005a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f838 	bl	8005a8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2208      	movs	r2, #8
 8005a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e029      	b.n	8005a86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a40:	d111      	bne.n	8005a66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f81e 	bl	8005a8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e00f      	b.n	8005a86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d0a0      	beq.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b095      	sub	sp, #84	@ 0x54
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ab6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e6      	bne.n	8005a96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3308      	adds	r3, #8
 8005ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e3      	bne.n	8005ac8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d118      	bne.n	8005b3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f023 0310 	bic.w	r3, r3, #16
 8005b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6979      	ldr	r1, [r7, #20]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	613b      	str	r3, [r7, #16]
   return(result);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e6      	bne.n	8005b08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b4e:	bf00      	nop
 8005b50:	3754      	adds	r7, #84	@ 0x54
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e027      	b.n	8005bc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2224      	movs	r2, #36	@ 0x24
 8005b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0201 	bic.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e02d      	b.n	8005c40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2224      	movs	r2, #36	@ 0x24
 8005bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f84f 	bl	8005cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e02d      	b.n	8005cbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	@ 0x24
 8005c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0201 	bic.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f811 	bl	8005cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d108      	bne.n	8005ce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ce4:	e031      	b.n	8005d4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cea:	2308      	movs	r3, #8
 8005cec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	0e5b      	lsrs	r3, r3, #25
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	0f5b      	lsrs	r3, r3, #29
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	7b3a      	ldrb	r2, [r7, #12]
 8005d12:	4911      	ldr	r1, [pc, #68]	@ (8005d58 <UARTEx_SetNbDataToProcess+0x94>)
 8005d14:	5c8a      	ldrb	r2, [r1, r2]
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d1a:	7b3a      	ldrb	r2, [r7, #12]
 8005d1c:	490f      	ldr	r1, [pc, #60]	@ (8005d5c <UARTEx_SetNbDataToProcess+0x98>)
 8005d1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	7b7a      	ldrb	r2, [r7, #13]
 8005d30:	4909      	ldr	r1, [pc, #36]	@ (8005d58 <UARTEx_SetNbDataToProcess+0x94>)
 8005d32:	5c8a      	ldrb	r2, [r1, r2]
 8005d34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d38:	7b7a      	ldrb	r2, [r7, #13]
 8005d3a:	4908      	ldr	r1, [pc, #32]	@ (8005d5c <UARTEx_SetNbDataToProcess+0x98>)
 8005d3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	0800a488 	.word	0x0800a488
 8005d5c:	0800a490 	.word	0x0800a490

08005d60 <__cvt>:
 8005d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d64:	ec57 6b10 	vmov	r6, r7, d0
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	463b      	mov	r3, r7
 8005d70:	bfbb      	ittet	lt
 8005d72:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d76:	461f      	movlt	r7, r3
 8005d78:	2300      	movge	r3, #0
 8005d7a:	232d      	movlt	r3, #45	@ 0x2d
 8005d7c:	700b      	strb	r3, [r1, #0]
 8005d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d80:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d84:	4691      	mov	r9, r2
 8005d86:	f023 0820 	bic.w	r8, r3, #32
 8005d8a:	bfbc      	itt	lt
 8005d8c:	4632      	movlt	r2, r6
 8005d8e:	4616      	movlt	r6, r2
 8005d90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d94:	d005      	beq.n	8005da2 <__cvt+0x42>
 8005d96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d9a:	d100      	bne.n	8005d9e <__cvt+0x3e>
 8005d9c:	3401      	adds	r4, #1
 8005d9e:	2102      	movs	r1, #2
 8005da0:	e000      	b.n	8005da4 <__cvt+0x44>
 8005da2:	2103      	movs	r1, #3
 8005da4:	ab03      	add	r3, sp, #12
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	ab02      	add	r3, sp, #8
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	ec47 6b10 	vmov	d0, r6, r7
 8005db0:	4653      	mov	r3, sl
 8005db2:	4622      	mov	r2, r4
 8005db4:	f001 f874 	bl	8006ea0 <_dtoa_r>
 8005db8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	d119      	bne.n	8005df4 <__cvt+0x94>
 8005dc0:	f019 0f01 	tst.w	r9, #1
 8005dc4:	d00e      	beq.n	8005de4 <__cvt+0x84>
 8005dc6:	eb00 0904 	add.w	r9, r0, r4
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4630      	mov	r0, r6
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	f7fa fea1 	bl	8000b18 <__aeabi_dcmpeq>
 8005dd6:	b108      	cbz	r0, 8005ddc <__cvt+0x7c>
 8005dd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ddc:	2230      	movs	r2, #48	@ 0x30
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	454b      	cmp	r3, r9
 8005de2:	d31e      	bcc.n	8005e22 <__cvt+0xc2>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005de8:	1b5b      	subs	r3, r3, r5
 8005dea:	4628      	mov	r0, r5
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	b004      	add	sp, #16
 8005df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005df8:	eb00 0904 	add.w	r9, r0, r4
 8005dfc:	d1e5      	bne.n	8005dca <__cvt+0x6a>
 8005dfe:	7803      	ldrb	r3, [r0, #0]
 8005e00:	2b30      	cmp	r3, #48	@ 0x30
 8005e02:	d10a      	bne.n	8005e1a <__cvt+0xba>
 8005e04:	2200      	movs	r2, #0
 8005e06:	2300      	movs	r3, #0
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f7fa fe84 	bl	8000b18 <__aeabi_dcmpeq>
 8005e10:	b918      	cbnz	r0, 8005e1a <__cvt+0xba>
 8005e12:	f1c4 0401 	rsb	r4, r4, #1
 8005e16:	f8ca 4000 	str.w	r4, [sl]
 8005e1a:	f8da 3000 	ldr.w	r3, [sl]
 8005e1e:	4499      	add	r9, r3
 8005e20:	e7d3      	b.n	8005dca <__cvt+0x6a>
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	9103      	str	r1, [sp, #12]
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e7d9      	b.n	8005dde <__cvt+0x7e>

08005e2a <__exponent>:
 8005e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	bfba      	itte	lt
 8005e30:	4249      	neglt	r1, r1
 8005e32:	232d      	movlt	r3, #45	@ 0x2d
 8005e34:	232b      	movge	r3, #43	@ 0x2b
 8005e36:	2909      	cmp	r1, #9
 8005e38:	7002      	strb	r2, [r0, #0]
 8005e3a:	7043      	strb	r3, [r0, #1]
 8005e3c:	dd29      	ble.n	8005e92 <__exponent+0x68>
 8005e3e:	f10d 0307 	add.w	r3, sp, #7
 8005e42:	461d      	mov	r5, r3
 8005e44:	270a      	movs	r7, #10
 8005e46:	461a      	mov	r2, r3
 8005e48:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e4c:	fb07 1416 	mls	r4, r7, r6, r1
 8005e50:	3430      	adds	r4, #48	@ 0x30
 8005e52:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e56:	460c      	mov	r4, r1
 8005e58:	2c63      	cmp	r4, #99	@ 0x63
 8005e5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e5e:	4631      	mov	r1, r6
 8005e60:	dcf1      	bgt.n	8005e46 <__exponent+0x1c>
 8005e62:	3130      	adds	r1, #48	@ 0x30
 8005e64:	1e94      	subs	r4, r2, #2
 8005e66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e6a:	1c41      	adds	r1, r0, #1
 8005e6c:	4623      	mov	r3, r4
 8005e6e:	42ab      	cmp	r3, r5
 8005e70:	d30a      	bcc.n	8005e88 <__exponent+0x5e>
 8005e72:	f10d 0309 	add.w	r3, sp, #9
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	42ac      	cmp	r4, r5
 8005e7a:	bf88      	it	hi
 8005e7c:	2300      	movhi	r3, #0
 8005e7e:	3302      	adds	r3, #2
 8005e80:	4403      	add	r3, r0
 8005e82:	1a18      	subs	r0, r3, r0
 8005e84:	b003      	add	sp, #12
 8005e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e88:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e8c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e90:	e7ed      	b.n	8005e6e <__exponent+0x44>
 8005e92:	2330      	movs	r3, #48	@ 0x30
 8005e94:	3130      	adds	r1, #48	@ 0x30
 8005e96:	7083      	strb	r3, [r0, #2]
 8005e98:	70c1      	strb	r1, [r0, #3]
 8005e9a:	1d03      	adds	r3, r0, #4
 8005e9c:	e7f1      	b.n	8005e82 <__exponent+0x58>
	...

08005ea0 <_printf_float>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	b08d      	sub	sp, #52	@ 0x34
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005eac:	4616      	mov	r6, r2
 8005eae:	461f      	mov	r7, r3
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	f000 feef 	bl	8006c94 <_localeconv_r>
 8005eb6:	6803      	ldr	r3, [r0, #0]
 8005eb8:	9304      	str	r3, [sp, #16]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fa fa00 	bl	80002c0 <strlen>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec8:	9005      	str	r0, [sp, #20]
 8005eca:	3307      	adds	r3, #7
 8005ecc:	f023 0307 	bic.w	r3, r3, #7
 8005ed0:	f103 0208 	add.w	r2, r3, #8
 8005ed4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ed8:	f8d4 b000 	ldr.w	fp, [r4]
 8005edc:	f8c8 2000 	str.w	r2, [r8]
 8005ee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ee4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ee8:	9307      	str	r3, [sp, #28]
 8005eea:	f8cd 8018 	str.w	r8, [sp, #24]
 8005eee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ef2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ef6:	4b9c      	ldr	r3, [pc, #624]	@ (8006168 <_printf_float+0x2c8>)
 8005ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8005efc:	f7fa fe3e 	bl	8000b7c <__aeabi_dcmpun>
 8005f00:	bb70      	cbnz	r0, 8005f60 <_printf_float+0xc0>
 8005f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f06:	4b98      	ldr	r3, [pc, #608]	@ (8006168 <_printf_float+0x2c8>)
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0c:	f7fa fe18 	bl	8000b40 <__aeabi_dcmple>
 8005f10:	bb30      	cbnz	r0, 8005f60 <_printf_float+0xc0>
 8005f12:	2200      	movs	r2, #0
 8005f14:	2300      	movs	r3, #0
 8005f16:	4640      	mov	r0, r8
 8005f18:	4649      	mov	r1, r9
 8005f1a:	f7fa fe07 	bl	8000b2c <__aeabi_dcmplt>
 8005f1e:	b110      	cbz	r0, 8005f26 <_printf_float+0x86>
 8005f20:	232d      	movs	r3, #45	@ 0x2d
 8005f22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f26:	4a91      	ldr	r2, [pc, #580]	@ (800616c <_printf_float+0x2cc>)
 8005f28:	4b91      	ldr	r3, [pc, #580]	@ (8006170 <_printf_float+0x2d0>)
 8005f2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f2e:	bf94      	ite	ls
 8005f30:	4690      	movls	r8, r2
 8005f32:	4698      	movhi	r8, r3
 8005f34:	2303      	movs	r3, #3
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	f02b 0304 	bic.w	r3, fp, #4
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	f04f 0900 	mov.w	r9, #0
 8005f42:	9700      	str	r7, [sp, #0]
 8005f44:	4633      	mov	r3, r6
 8005f46:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 f9d2 	bl	80062f4 <_printf_common>
 8005f50:	3001      	adds	r0, #1
 8005f52:	f040 808d 	bne.w	8006070 <_printf_float+0x1d0>
 8005f56:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5a:	b00d      	add	sp, #52	@ 0x34
 8005f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	4642      	mov	r2, r8
 8005f62:	464b      	mov	r3, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	4649      	mov	r1, r9
 8005f68:	f7fa fe08 	bl	8000b7c <__aeabi_dcmpun>
 8005f6c:	b140      	cbz	r0, 8005f80 <_printf_float+0xe0>
 8005f6e:	464b      	mov	r3, r9
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bfbc      	itt	lt
 8005f74:	232d      	movlt	r3, #45	@ 0x2d
 8005f76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8006174 <_printf_float+0x2d4>)
 8005f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8006178 <_printf_float+0x2d8>)
 8005f7e:	e7d4      	b.n	8005f2a <_printf_float+0x8a>
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f86:	9206      	str	r2, [sp, #24]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	d13b      	bne.n	8006004 <_printf_float+0x164>
 8005f8c:	2306      	movs	r3, #6
 8005f8e:	6063      	str	r3, [r4, #4]
 8005f90:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f94:	2300      	movs	r3, #0
 8005f96:	6022      	str	r2, [r4, #0]
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f9c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005fa0:	ab09      	add	r3, sp, #36	@ 0x24
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	6861      	ldr	r1, [r4, #4]
 8005fa6:	ec49 8b10 	vmov	d0, r8, r9
 8005faa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f7ff fed6 	bl	8005d60 <__cvt>
 8005fb4:	9b06      	ldr	r3, [sp, #24]
 8005fb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fb8:	2b47      	cmp	r3, #71	@ 0x47
 8005fba:	4680      	mov	r8, r0
 8005fbc:	d129      	bne.n	8006012 <_printf_float+0x172>
 8005fbe:	1cc8      	adds	r0, r1, #3
 8005fc0:	db02      	blt.n	8005fc8 <_printf_float+0x128>
 8005fc2:	6863      	ldr	r3, [r4, #4]
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	dd41      	ble.n	800604c <_printf_float+0x1ac>
 8005fc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fcc:	fa5f fa8a 	uxtb.w	sl, sl
 8005fd0:	3901      	subs	r1, #1
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fda:	f7ff ff26 	bl	8005e2a <__exponent>
 8005fde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fe0:	1813      	adds	r3, r2, r0
 8005fe2:	2a01      	cmp	r2, #1
 8005fe4:	4681      	mov	r9, r0
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	dc02      	bgt.n	8005ff0 <_printf_float+0x150>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	07d2      	lsls	r2, r2, #31
 8005fee:	d501      	bpl.n	8005ff4 <_printf_float+0x154>
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	6123      	str	r3, [r4, #16]
 8005ff4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0a2      	beq.n	8005f42 <_printf_float+0xa2>
 8005ffc:	232d      	movs	r3, #45	@ 0x2d
 8005ffe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006002:	e79e      	b.n	8005f42 <_printf_float+0xa2>
 8006004:	9a06      	ldr	r2, [sp, #24]
 8006006:	2a47      	cmp	r2, #71	@ 0x47
 8006008:	d1c2      	bne.n	8005f90 <_printf_float+0xf0>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1c0      	bne.n	8005f90 <_printf_float+0xf0>
 800600e:	2301      	movs	r3, #1
 8006010:	e7bd      	b.n	8005f8e <_printf_float+0xee>
 8006012:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006016:	d9db      	bls.n	8005fd0 <_printf_float+0x130>
 8006018:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800601c:	d118      	bne.n	8006050 <_printf_float+0x1b0>
 800601e:	2900      	cmp	r1, #0
 8006020:	6863      	ldr	r3, [r4, #4]
 8006022:	dd0b      	ble.n	800603c <_printf_float+0x19c>
 8006024:	6121      	str	r1, [r4, #16]
 8006026:	b913      	cbnz	r3, 800602e <_printf_float+0x18e>
 8006028:	6822      	ldr	r2, [r4, #0]
 800602a:	07d0      	lsls	r0, r2, #31
 800602c:	d502      	bpl.n	8006034 <_printf_float+0x194>
 800602e:	3301      	adds	r3, #1
 8006030:	440b      	add	r3, r1
 8006032:	6123      	str	r3, [r4, #16]
 8006034:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006036:	f04f 0900 	mov.w	r9, #0
 800603a:	e7db      	b.n	8005ff4 <_printf_float+0x154>
 800603c:	b913      	cbnz	r3, 8006044 <_printf_float+0x1a4>
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	07d2      	lsls	r2, r2, #31
 8006042:	d501      	bpl.n	8006048 <_printf_float+0x1a8>
 8006044:	3302      	adds	r3, #2
 8006046:	e7f4      	b.n	8006032 <_printf_float+0x192>
 8006048:	2301      	movs	r3, #1
 800604a:	e7f2      	b.n	8006032 <_printf_float+0x192>
 800604c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006052:	4299      	cmp	r1, r3
 8006054:	db05      	blt.n	8006062 <_printf_float+0x1c2>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	6121      	str	r1, [r4, #16]
 800605a:	07d8      	lsls	r0, r3, #31
 800605c:	d5ea      	bpl.n	8006034 <_printf_float+0x194>
 800605e:	1c4b      	adds	r3, r1, #1
 8006060:	e7e7      	b.n	8006032 <_printf_float+0x192>
 8006062:	2900      	cmp	r1, #0
 8006064:	bfd4      	ite	le
 8006066:	f1c1 0202 	rsble	r2, r1, #2
 800606a:	2201      	movgt	r2, #1
 800606c:	4413      	add	r3, r2
 800606e:	e7e0      	b.n	8006032 <_printf_float+0x192>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	055a      	lsls	r2, r3, #21
 8006074:	d407      	bmi.n	8006086 <_printf_float+0x1e6>
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	4642      	mov	r2, r8
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	d12b      	bne.n	80060dc <_printf_float+0x23c>
 8006084:	e767      	b.n	8005f56 <_printf_float+0xb6>
 8006086:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800608a:	f240 80dd 	bls.w	8006248 <_printf_float+0x3a8>
 800608e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006092:	2200      	movs	r2, #0
 8006094:	2300      	movs	r3, #0
 8006096:	f7fa fd3f 	bl	8000b18 <__aeabi_dcmpeq>
 800609a:	2800      	cmp	r0, #0
 800609c:	d033      	beq.n	8006106 <_printf_float+0x266>
 800609e:	4a37      	ldr	r2, [pc, #220]	@ (800617c <_printf_float+0x2dc>)
 80060a0:	2301      	movs	r3, #1
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f af54 	beq.w	8005f56 <_printf_float+0xb6>
 80060ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80060b2:	4543      	cmp	r3, r8
 80060b4:	db02      	blt.n	80060bc <_printf_float+0x21c>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	07d8      	lsls	r0, r3, #31
 80060ba:	d50f      	bpl.n	80060dc <_printf_float+0x23c>
 80060bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f af45 	beq.w	8005f56 <_printf_float+0xb6>
 80060cc:	f04f 0900 	mov.w	r9, #0
 80060d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80060d4:	f104 0a1a 	add.w	sl, r4, #26
 80060d8:	45c8      	cmp	r8, r9
 80060da:	dc09      	bgt.n	80060f0 <_printf_float+0x250>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	079b      	lsls	r3, r3, #30
 80060e0:	f100 8103 	bmi.w	80062ea <_printf_float+0x44a>
 80060e4:	68e0      	ldr	r0, [r4, #12]
 80060e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060e8:	4298      	cmp	r0, r3
 80060ea:	bfb8      	it	lt
 80060ec:	4618      	movlt	r0, r3
 80060ee:	e734      	b.n	8005f5a <_printf_float+0xba>
 80060f0:	2301      	movs	r3, #1
 80060f2:	4652      	mov	r2, sl
 80060f4:	4631      	mov	r1, r6
 80060f6:	4628      	mov	r0, r5
 80060f8:	47b8      	blx	r7
 80060fa:	3001      	adds	r0, #1
 80060fc:	f43f af2b 	beq.w	8005f56 <_printf_float+0xb6>
 8006100:	f109 0901 	add.w	r9, r9, #1
 8006104:	e7e8      	b.n	80060d8 <_printf_float+0x238>
 8006106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	dc39      	bgt.n	8006180 <_printf_float+0x2e0>
 800610c:	4a1b      	ldr	r2, [pc, #108]	@ (800617c <_printf_float+0x2dc>)
 800610e:	2301      	movs	r3, #1
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	f43f af1d 	beq.w	8005f56 <_printf_float+0xb6>
 800611c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006120:	ea59 0303 	orrs.w	r3, r9, r3
 8006124:	d102      	bne.n	800612c <_printf_float+0x28c>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	07d9      	lsls	r1, r3, #31
 800612a:	d5d7      	bpl.n	80060dc <_printf_float+0x23c>
 800612c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f af0d 	beq.w	8005f56 <_printf_float+0xb6>
 800613c:	f04f 0a00 	mov.w	sl, #0
 8006140:	f104 0b1a 	add.w	fp, r4, #26
 8006144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006146:	425b      	negs	r3, r3
 8006148:	4553      	cmp	r3, sl
 800614a:	dc01      	bgt.n	8006150 <_printf_float+0x2b0>
 800614c:	464b      	mov	r3, r9
 800614e:	e793      	b.n	8006078 <_printf_float+0x1d8>
 8006150:	2301      	movs	r3, #1
 8006152:	465a      	mov	r2, fp
 8006154:	4631      	mov	r1, r6
 8006156:	4628      	mov	r0, r5
 8006158:	47b8      	blx	r7
 800615a:	3001      	adds	r0, #1
 800615c:	f43f aefb 	beq.w	8005f56 <_printf_float+0xb6>
 8006160:	f10a 0a01 	add.w	sl, sl, #1
 8006164:	e7ee      	b.n	8006144 <_printf_float+0x2a4>
 8006166:	bf00      	nop
 8006168:	7fefffff 	.word	0x7fefffff
 800616c:	0800a498 	.word	0x0800a498
 8006170:	0800a49c 	.word	0x0800a49c
 8006174:	0800a4a0 	.word	0x0800a4a0
 8006178:	0800a4a4 	.word	0x0800a4a4
 800617c:	0800a4a8 	.word	0x0800a4a8
 8006180:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006182:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006186:	4553      	cmp	r3, sl
 8006188:	bfa8      	it	ge
 800618a:	4653      	movge	r3, sl
 800618c:	2b00      	cmp	r3, #0
 800618e:	4699      	mov	r9, r3
 8006190:	dc36      	bgt.n	8006200 <_printf_float+0x360>
 8006192:	f04f 0b00 	mov.w	fp, #0
 8006196:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800619a:	f104 021a 	add.w	r2, r4, #26
 800619e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061a0:	9306      	str	r3, [sp, #24]
 80061a2:	eba3 0309 	sub.w	r3, r3, r9
 80061a6:	455b      	cmp	r3, fp
 80061a8:	dc31      	bgt.n	800620e <_printf_float+0x36e>
 80061aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ac:	459a      	cmp	sl, r3
 80061ae:	dc3a      	bgt.n	8006226 <_printf_float+0x386>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	07da      	lsls	r2, r3, #31
 80061b4:	d437      	bmi.n	8006226 <_printf_float+0x386>
 80061b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b8:	ebaa 0903 	sub.w	r9, sl, r3
 80061bc:	9b06      	ldr	r3, [sp, #24]
 80061be:	ebaa 0303 	sub.w	r3, sl, r3
 80061c2:	4599      	cmp	r9, r3
 80061c4:	bfa8      	it	ge
 80061c6:	4699      	movge	r9, r3
 80061c8:	f1b9 0f00 	cmp.w	r9, #0
 80061cc:	dc33      	bgt.n	8006236 <_printf_float+0x396>
 80061ce:	f04f 0800 	mov.w	r8, #0
 80061d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061d6:	f104 0b1a 	add.w	fp, r4, #26
 80061da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061dc:	ebaa 0303 	sub.w	r3, sl, r3
 80061e0:	eba3 0309 	sub.w	r3, r3, r9
 80061e4:	4543      	cmp	r3, r8
 80061e6:	f77f af79 	ble.w	80060dc <_printf_float+0x23c>
 80061ea:	2301      	movs	r3, #1
 80061ec:	465a      	mov	r2, fp
 80061ee:	4631      	mov	r1, r6
 80061f0:	4628      	mov	r0, r5
 80061f2:	47b8      	blx	r7
 80061f4:	3001      	adds	r0, #1
 80061f6:	f43f aeae 	beq.w	8005f56 <_printf_float+0xb6>
 80061fa:	f108 0801 	add.w	r8, r8, #1
 80061fe:	e7ec      	b.n	80061da <_printf_float+0x33a>
 8006200:	4642      	mov	r2, r8
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	d1c2      	bne.n	8006192 <_printf_float+0x2f2>
 800620c:	e6a3      	b.n	8005f56 <_printf_float+0xb6>
 800620e:	2301      	movs	r3, #1
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	9206      	str	r2, [sp, #24]
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f ae9c 	beq.w	8005f56 <_printf_float+0xb6>
 800621e:	9a06      	ldr	r2, [sp, #24]
 8006220:	f10b 0b01 	add.w	fp, fp, #1
 8006224:	e7bb      	b.n	800619e <_printf_float+0x2fe>
 8006226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	d1c0      	bne.n	80061b6 <_printf_float+0x316>
 8006234:	e68f      	b.n	8005f56 <_printf_float+0xb6>
 8006236:	9a06      	ldr	r2, [sp, #24]
 8006238:	464b      	mov	r3, r9
 800623a:	4442      	add	r2, r8
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	d1c3      	bne.n	80061ce <_printf_float+0x32e>
 8006246:	e686      	b.n	8005f56 <_printf_float+0xb6>
 8006248:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800624c:	f1ba 0f01 	cmp.w	sl, #1
 8006250:	dc01      	bgt.n	8006256 <_printf_float+0x3b6>
 8006252:	07db      	lsls	r3, r3, #31
 8006254:	d536      	bpl.n	80062c4 <_printf_float+0x424>
 8006256:	2301      	movs	r3, #1
 8006258:	4642      	mov	r2, r8
 800625a:	4631      	mov	r1, r6
 800625c:	4628      	mov	r0, r5
 800625e:	47b8      	blx	r7
 8006260:	3001      	adds	r0, #1
 8006262:	f43f ae78 	beq.w	8005f56 <_printf_float+0xb6>
 8006266:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800626a:	4631      	mov	r1, r6
 800626c:	4628      	mov	r0, r5
 800626e:	47b8      	blx	r7
 8006270:	3001      	adds	r0, #1
 8006272:	f43f ae70 	beq.w	8005f56 <_printf_float+0xb6>
 8006276:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800627a:	2200      	movs	r2, #0
 800627c:	2300      	movs	r3, #0
 800627e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006282:	f7fa fc49 	bl	8000b18 <__aeabi_dcmpeq>
 8006286:	b9c0      	cbnz	r0, 80062ba <_printf_float+0x41a>
 8006288:	4653      	mov	r3, sl
 800628a:	f108 0201 	add.w	r2, r8, #1
 800628e:	4631      	mov	r1, r6
 8006290:	4628      	mov	r0, r5
 8006292:	47b8      	blx	r7
 8006294:	3001      	adds	r0, #1
 8006296:	d10c      	bne.n	80062b2 <_printf_float+0x412>
 8006298:	e65d      	b.n	8005f56 <_printf_float+0xb6>
 800629a:	2301      	movs	r3, #1
 800629c:	465a      	mov	r2, fp
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	f43f ae56 	beq.w	8005f56 <_printf_float+0xb6>
 80062aa:	f108 0801 	add.w	r8, r8, #1
 80062ae:	45d0      	cmp	r8, sl
 80062b0:	dbf3      	blt.n	800629a <_printf_float+0x3fa>
 80062b2:	464b      	mov	r3, r9
 80062b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80062b8:	e6df      	b.n	800607a <_printf_float+0x1da>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	f104 0b1a 	add.w	fp, r4, #26
 80062c2:	e7f4      	b.n	80062ae <_printf_float+0x40e>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4642      	mov	r2, r8
 80062c8:	e7e1      	b.n	800628e <_printf_float+0x3ee>
 80062ca:	2301      	movs	r3, #1
 80062cc:	464a      	mov	r2, r9
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f ae3e 	beq.w	8005f56 <_printf_float+0xb6>
 80062da:	f108 0801 	add.w	r8, r8, #1
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	4543      	cmp	r3, r8
 80062e6:	dcf0      	bgt.n	80062ca <_printf_float+0x42a>
 80062e8:	e6fc      	b.n	80060e4 <_printf_float+0x244>
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	f104 0919 	add.w	r9, r4, #25
 80062f2:	e7f4      	b.n	80062de <_printf_float+0x43e>

080062f4 <_printf_common>:
 80062f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	4616      	mov	r6, r2
 80062fa:	4698      	mov	r8, r3
 80062fc:	688a      	ldr	r2, [r1, #8]
 80062fe:	690b      	ldr	r3, [r1, #16]
 8006300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006304:	4293      	cmp	r3, r2
 8006306:	bfb8      	it	lt
 8006308:	4613      	movlt	r3, r2
 800630a:	6033      	str	r3, [r6, #0]
 800630c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006310:	4607      	mov	r7, r0
 8006312:	460c      	mov	r4, r1
 8006314:	b10a      	cbz	r2, 800631a <_printf_common+0x26>
 8006316:	3301      	adds	r3, #1
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	0699      	lsls	r1, r3, #26
 800631e:	bf42      	ittt	mi
 8006320:	6833      	ldrmi	r3, [r6, #0]
 8006322:	3302      	addmi	r3, #2
 8006324:	6033      	strmi	r3, [r6, #0]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	f015 0506 	ands.w	r5, r5, #6
 800632c:	d106      	bne.n	800633c <_printf_common+0x48>
 800632e:	f104 0a19 	add.w	sl, r4, #25
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	6832      	ldr	r2, [r6, #0]
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	42ab      	cmp	r3, r5
 800633a:	dc26      	bgt.n	800638a <_printf_common+0x96>
 800633c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006340:	6822      	ldr	r2, [r4, #0]
 8006342:	3b00      	subs	r3, #0
 8006344:	bf18      	it	ne
 8006346:	2301      	movne	r3, #1
 8006348:	0692      	lsls	r2, r2, #26
 800634a:	d42b      	bmi.n	80063a4 <_printf_common+0xb0>
 800634c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006350:	4641      	mov	r1, r8
 8006352:	4638      	mov	r0, r7
 8006354:	47c8      	blx	r9
 8006356:	3001      	adds	r0, #1
 8006358:	d01e      	beq.n	8006398 <_printf_common+0xa4>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	6922      	ldr	r2, [r4, #16]
 800635e:	f003 0306 	and.w	r3, r3, #6
 8006362:	2b04      	cmp	r3, #4
 8006364:	bf02      	ittt	eq
 8006366:	68e5      	ldreq	r5, [r4, #12]
 8006368:	6833      	ldreq	r3, [r6, #0]
 800636a:	1aed      	subeq	r5, r5, r3
 800636c:	68a3      	ldr	r3, [r4, #8]
 800636e:	bf0c      	ite	eq
 8006370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006374:	2500      	movne	r5, #0
 8006376:	4293      	cmp	r3, r2
 8006378:	bfc4      	itt	gt
 800637a:	1a9b      	subgt	r3, r3, r2
 800637c:	18ed      	addgt	r5, r5, r3
 800637e:	2600      	movs	r6, #0
 8006380:	341a      	adds	r4, #26
 8006382:	42b5      	cmp	r5, r6
 8006384:	d11a      	bne.n	80063bc <_printf_common+0xc8>
 8006386:	2000      	movs	r0, #0
 8006388:	e008      	b.n	800639c <_printf_common+0xa8>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4641      	mov	r1, r8
 8006390:	4638      	mov	r0, r7
 8006392:	47c8      	blx	r9
 8006394:	3001      	adds	r0, #1
 8006396:	d103      	bne.n	80063a0 <_printf_common+0xac>
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a0:	3501      	adds	r5, #1
 80063a2:	e7c6      	b.n	8006332 <_printf_common+0x3e>
 80063a4:	18e1      	adds	r1, r4, r3
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	2030      	movs	r0, #48	@ 0x30
 80063aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063ae:	4422      	add	r2, r4
 80063b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063b8:	3302      	adds	r3, #2
 80063ba:	e7c7      	b.n	800634c <_printf_common+0x58>
 80063bc:	2301      	movs	r3, #1
 80063be:	4622      	mov	r2, r4
 80063c0:	4641      	mov	r1, r8
 80063c2:	4638      	mov	r0, r7
 80063c4:	47c8      	blx	r9
 80063c6:	3001      	adds	r0, #1
 80063c8:	d0e6      	beq.n	8006398 <_printf_common+0xa4>
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7d9      	b.n	8006382 <_printf_common+0x8e>
	...

080063d0 <_printf_i>:
 80063d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	7e0f      	ldrb	r7, [r1, #24]
 80063d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063d8:	2f78      	cmp	r7, #120	@ 0x78
 80063da:	4691      	mov	r9, r2
 80063dc:	4680      	mov	r8, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	469a      	mov	sl, r3
 80063e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063e6:	d807      	bhi.n	80063f8 <_printf_i+0x28>
 80063e8:	2f62      	cmp	r7, #98	@ 0x62
 80063ea:	d80a      	bhi.n	8006402 <_printf_i+0x32>
 80063ec:	2f00      	cmp	r7, #0
 80063ee:	f000 80d2 	beq.w	8006596 <_printf_i+0x1c6>
 80063f2:	2f58      	cmp	r7, #88	@ 0x58
 80063f4:	f000 80b9 	beq.w	800656a <_printf_i+0x19a>
 80063f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006400:	e03a      	b.n	8006478 <_printf_i+0xa8>
 8006402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006406:	2b15      	cmp	r3, #21
 8006408:	d8f6      	bhi.n	80063f8 <_printf_i+0x28>
 800640a:	a101      	add	r1, pc, #4	@ (adr r1, 8006410 <_printf_i+0x40>)
 800640c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006410:	08006469 	.word	0x08006469
 8006414:	0800647d 	.word	0x0800647d
 8006418:	080063f9 	.word	0x080063f9
 800641c:	080063f9 	.word	0x080063f9
 8006420:	080063f9 	.word	0x080063f9
 8006424:	080063f9 	.word	0x080063f9
 8006428:	0800647d 	.word	0x0800647d
 800642c:	080063f9 	.word	0x080063f9
 8006430:	080063f9 	.word	0x080063f9
 8006434:	080063f9 	.word	0x080063f9
 8006438:	080063f9 	.word	0x080063f9
 800643c:	0800657d 	.word	0x0800657d
 8006440:	080064a7 	.word	0x080064a7
 8006444:	08006537 	.word	0x08006537
 8006448:	080063f9 	.word	0x080063f9
 800644c:	080063f9 	.word	0x080063f9
 8006450:	0800659f 	.word	0x0800659f
 8006454:	080063f9 	.word	0x080063f9
 8006458:	080064a7 	.word	0x080064a7
 800645c:	080063f9 	.word	0x080063f9
 8006460:	080063f9 	.word	0x080063f9
 8006464:	0800653f 	.word	0x0800653f
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6032      	str	r2, [r6, #0]
 8006470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006478:	2301      	movs	r3, #1
 800647a:	e09d      	b.n	80065b8 <_printf_i+0x1e8>
 800647c:	6833      	ldr	r3, [r6, #0]
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	1d19      	adds	r1, r3, #4
 8006482:	6031      	str	r1, [r6, #0]
 8006484:	0606      	lsls	r6, r0, #24
 8006486:	d501      	bpl.n	800648c <_printf_i+0xbc>
 8006488:	681d      	ldr	r5, [r3, #0]
 800648a:	e003      	b.n	8006494 <_printf_i+0xc4>
 800648c:	0645      	lsls	r5, r0, #25
 800648e:	d5fb      	bpl.n	8006488 <_printf_i+0xb8>
 8006490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006494:	2d00      	cmp	r5, #0
 8006496:	da03      	bge.n	80064a0 <_printf_i+0xd0>
 8006498:	232d      	movs	r3, #45	@ 0x2d
 800649a:	426d      	negs	r5, r5
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a0:	4859      	ldr	r0, [pc, #356]	@ (8006608 <_printf_i+0x238>)
 80064a2:	230a      	movs	r3, #10
 80064a4:	e011      	b.n	80064ca <_printf_i+0xfa>
 80064a6:	6821      	ldr	r1, [r4, #0]
 80064a8:	6833      	ldr	r3, [r6, #0]
 80064aa:	0608      	lsls	r0, r1, #24
 80064ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80064b0:	d402      	bmi.n	80064b8 <_printf_i+0xe8>
 80064b2:	0649      	lsls	r1, r1, #25
 80064b4:	bf48      	it	mi
 80064b6:	b2ad      	uxthmi	r5, r5
 80064b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80064ba:	4853      	ldr	r0, [pc, #332]	@ (8006608 <_printf_i+0x238>)
 80064bc:	6033      	str	r3, [r6, #0]
 80064be:	bf14      	ite	ne
 80064c0:	230a      	movne	r3, #10
 80064c2:	2308      	moveq	r3, #8
 80064c4:	2100      	movs	r1, #0
 80064c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064ca:	6866      	ldr	r6, [r4, #4]
 80064cc:	60a6      	str	r6, [r4, #8]
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	bfa2      	ittt	ge
 80064d2:	6821      	ldrge	r1, [r4, #0]
 80064d4:	f021 0104 	bicge.w	r1, r1, #4
 80064d8:	6021      	strge	r1, [r4, #0]
 80064da:	b90d      	cbnz	r5, 80064e0 <_printf_i+0x110>
 80064dc:	2e00      	cmp	r6, #0
 80064de:	d04b      	beq.n	8006578 <_printf_i+0x1a8>
 80064e0:	4616      	mov	r6, r2
 80064e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80064e6:	fb03 5711 	mls	r7, r3, r1, r5
 80064ea:	5dc7      	ldrb	r7, [r0, r7]
 80064ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064f0:	462f      	mov	r7, r5
 80064f2:	42bb      	cmp	r3, r7
 80064f4:	460d      	mov	r5, r1
 80064f6:	d9f4      	bls.n	80064e2 <_printf_i+0x112>
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d10b      	bne.n	8006514 <_printf_i+0x144>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	07df      	lsls	r7, r3, #31
 8006500:	d508      	bpl.n	8006514 <_printf_i+0x144>
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	6861      	ldr	r1, [r4, #4]
 8006506:	4299      	cmp	r1, r3
 8006508:	bfde      	ittt	le
 800650a:	2330      	movle	r3, #48	@ 0x30
 800650c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006514:	1b92      	subs	r2, r2, r6
 8006516:	6122      	str	r2, [r4, #16]
 8006518:	f8cd a000 	str.w	sl, [sp]
 800651c:	464b      	mov	r3, r9
 800651e:	aa03      	add	r2, sp, #12
 8006520:	4621      	mov	r1, r4
 8006522:	4640      	mov	r0, r8
 8006524:	f7ff fee6 	bl	80062f4 <_printf_common>
 8006528:	3001      	adds	r0, #1
 800652a:	d14a      	bne.n	80065c2 <_printf_i+0x1f2>
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	b004      	add	sp, #16
 8006532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f043 0320 	orr.w	r3, r3, #32
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	4833      	ldr	r0, [pc, #204]	@ (800660c <_printf_i+0x23c>)
 8006540:	2778      	movs	r7, #120	@ 0x78
 8006542:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	6831      	ldr	r1, [r6, #0]
 800654a:	061f      	lsls	r7, r3, #24
 800654c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006550:	d402      	bmi.n	8006558 <_printf_i+0x188>
 8006552:	065f      	lsls	r7, r3, #25
 8006554:	bf48      	it	mi
 8006556:	b2ad      	uxthmi	r5, r5
 8006558:	6031      	str	r1, [r6, #0]
 800655a:	07d9      	lsls	r1, r3, #31
 800655c:	bf44      	itt	mi
 800655e:	f043 0320 	orrmi.w	r3, r3, #32
 8006562:	6023      	strmi	r3, [r4, #0]
 8006564:	b11d      	cbz	r5, 800656e <_printf_i+0x19e>
 8006566:	2310      	movs	r3, #16
 8006568:	e7ac      	b.n	80064c4 <_printf_i+0xf4>
 800656a:	4827      	ldr	r0, [pc, #156]	@ (8006608 <_printf_i+0x238>)
 800656c:	e7e9      	b.n	8006542 <_printf_i+0x172>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	f023 0320 	bic.w	r3, r3, #32
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	e7f6      	b.n	8006566 <_printf_i+0x196>
 8006578:	4616      	mov	r6, r2
 800657a:	e7bd      	b.n	80064f8 <_printf_i+0x128>
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	6825      	ldr	r5, [r4, #0]
 8006580:	6961      	ldr	r1, [r4, #20]
 8006582:	1d18      	adds	r0, r3, #4
 8006584:	6030      	str	r0, [r6, #0]
 8006586:	062e      	lsls	r6, r5, #24
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	d501      	bpl.n	8006590 <_printf_i+0x1c0>
 800658c:	6019      	str	r1, [r3, #0]
 800658e:	e002      	b.n	8006596 <_printf_i+0x1c6>
 8006590:	0668      	lsls	r0, r5, #25
 8006592:	d5fb      	bpl.n	800658c <_printf_i+0x1bc>
 8006594:	8019      	strh	r1, [r3, #0]
 8006596:	2300      	movs	r3, #0
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	4616      	mov	r6, r2
 800659c:	e7bc      	b.n	8006518 <_printf_i+0x148>
 800659e:	6833      	ldr	r3, [r6, #0]
 80065a0:	1d1a      	adds	r2, r3, #4
 80065a2:	6032      	str	r2, [r6, #0]
 80065a4:	681e      	ldr	r6, [r3, #0]
 80065a6:	6862      	ldr	r2, [r4, #4]
 80065a8:	2100      	movs	r1, #0
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7f9 fe38 	bl	8000220 <memchr>
 80065b0:	b108      	cbz	r0, 80065b6 <_printf_i+0x1e6>
 80065b2:	1b80      	subs	r0, r0, r6
 80065b4:	6060      	str	r0, [r4, #4]
 80065b6:	6863      	ldr	r3, [r4, #4]
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	2300      	movs	r3, #0
 80065bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c0:	e7aa      	b.n	8006518 <_printf_i+0x148>
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	4632      	mov	r2, r6
 80065c6:	4649      	mov	r1, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	47d0      	blx	sl
 80065cc:	3001      	adds	r0, #1
 80065ce:	d0ad      	beq.n	800652c <_printf_i+0x15c>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	079b      	lsls	r3, r3, #30
 80065d4:	d413      	bmi.n	80065fe <_printf_i+0x22e>
 80065d6:	68e0      	ldr	r0, [r4, #12]
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	4298      	cmp	r0, r3
 80065dc:	bfb8      	it	lt
 80065de:	4618      	movlt	r0, r3
 80065e0:	e7a6      	b.n	8006530 <_printf_i+0x160>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4632      	mov	r2, r6
 80065e6:	4649      	mov	r1, r9
 80065e8:	4640      	mov	r0, r8
 80065ea:	47d0      	blx	sl
 80065ec:	3001      	adds	r0, #1
 80065ee:	d09d      	beq.n	800652c <_printf_i+0x15c>
 80065f0:	3501      	adds	r5, #1
 80065f2:	68e3      	ldr	r3, [r4, #12]
 80065f4:	9903      	ldr	r1, [sp, #12]
 80065f6:	1a5b      	subs	r3, r3, r1
 80065f8:	42ab      	cmp	r3, r5
 80065fa:	dcf2      	bgt.n	80065e2 <_printf_i+0x212>
 80065fc:	e7eb      	b.n	80065d6 <_printf_i+0x206>
 80065fe:	2500      	movs	r5, #0
 8006600:	f104 0619 	add.w	r6, r4, #25
 8006604:	e7f5      	b.n	80065f2 <_printf_i+0x222>
 8006606:	bf00      	nop
 8006608:	0800a4aa 	.word	0x0800a4aa
 800660c:	0800a4bb 	.word	0x0800a4bb

08006610 <_scanf_float>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	b087      	sub	sp, #28
 8006616:	4617      	mov	r7, r2
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	688b      	ldr	r3, [r1, #8]
 800661c:	1e5a      	subs	r2, r3, #1
 800661e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006622:	bf81      	itttt	hi
 8006624:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006628:	eb03 0b05 	addhi.w	fp, r3, r5
 800662c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006630:	608b      	strhi	r3, [r1, #8]
 8006632:	680b      	ldr	r3, [r1, #0]
 8006634:	460a      	mov	r2, r1
 8006636:	f04f 0500 	mov.w	r5, #0
 800663a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800663e:	f842 3b1c 	str.w	r3, [r2], #28
 8006642:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006646:	4680      	mov	r8, r0
 8006648:	460c      	mov	r4, r1
 800664a:	bf98      	it	ls
 800664c:	f04f 0b00 	movls.w	fp, #0
 8006650:	9201      	str	r2, [sp, #4]
 8006652:	4616      	mov	r6, r2
 8006654:	46aa      	mov	sl, r5
 8006656:	46a9      	mov	r9, r5
 8006658:	9502      	str	r5, [sp, #8]
 800665a:	68a2      	ldr	r2, [r4, #8]
 800665c:	b152      	cbz	r2, 8006674 <_scanf_float+0x64>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b4e      	cmp	r3, #78	@ 0x4e
 8006664:	d864      	bhi.n	8006730 <_scanf_float+0x120>
 8006666:	2b40      	cmp	r3, #64	@ 0x40
 8006668:	d83c      	bhi.n	80066e4 <_scanf_float+0xd4>
 800666a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800666e:	b2c8      	uxtb	r0, r1
 8006670:	280e      	cmp	r0, #14
 8006672:	d93a      	bls.n	80066ea <_scanf_float+0xda>
 8006674:	f1b9 0f00 	cmp.w	r9, #0
 8006678:	d003      	beq.n	8006682 <_scanf_float+0x72>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006686:	f1ba 0f01 	cmp.w	sl, #1
 800668a:	f200 8117 	bhi.w	80068bc <_scanf_float+0x2ac>
 800668e:	9b01      	ldr	r3, [sp, #4]
 8006690:	429e      	cmp	r6, r3
 8006692:	f200 8108 	bhi.w	80068a6 <_scanf_float+0x296>
 8006696:	2001      	movs	r0, #1
 8006698:	b007      	add	sp, #28
 800669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80066a2:	2a0d      	cmp	r2, #13
 80066a4:	d8e6      	bhi.n	8006674 <_scanf_float+0x64>
 80066a6:	a101      	add	r1, pc, #4	@ (adr r1, 80066ac <_scanf_float+0x9c>)
 80066a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80066ac:	080067f3 	.word	0x080067f3
 80066b0:	08006675 	.word	0x08006675
 80066b4:	08006675 	.word	0x08006675
 80066b8:	08006675 	.word	0x08006675
 80066bc:	08006853 	.word	0x08006853
 80066c0:	0800682b 	.word	0x0800682b
 80066c4:	08006675 	.word	0x08006675
 80066c8:	08006675 	.word	0x08006675
 80066cc:	08006801 	.word	0x08006801
 80066d0:	08006675 	.word	0x08006675
 80066d4:	08006675 	.word	0x08006675
 80066d8:	08006675 	.word	0x08006675
 80066dc:	08006675 	.word	0x08006675
 80066e0:	080067b9 	.word	0x080067b9
 80066e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80066e8:	e7db      	b.n	80066a2 <_scanf_float+0x92>
 80066ea:	290e      	cmp	r1, #14
 80066ec:	d8c2      	bhi.n	8006674 <_scanf_float+0x64>
 80066ee:	a001      	add	r0, pc, #4	@ (adr r0, 80066f4 <_scanf_float+0xe4>)
 80066f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80066f4:	080067a9 	.word	0x080067a9
 80066f8:	08006675 	.word	0x08006675
 80066fc:	080067a9 	.word	0x080067a9
 8006700:	0800683f 	.word	0x0800683f
 8006704:	08006675 	.word	0x08006675
 8006708:	08006751 	.word	0x08006751
 800670c:	0800678f 	.word	0x0800678f
 8006710:	0800678f 	.word	0x0800678f
 8006714:	0800678f 	.word	0x0800678f
 8006718:	0800678f 	.word	0x0800678f
 800671c:	0800678f 	.word	0x0800678f
 8006720:	0800678f 	.word	0x0800678f
 8006724:	0800678f 	.word	0x0800678f
 8006728:	0800678f 	.word	0x0800678f
 800672c:	0800678f 	.word	0x0800678f
 8006730:	2b6e      	cmp	r3, #110	@ 0x6e
 8006732:	d809      	bhi.n	8006748 <_scanf_float+0x138>
 8006734:	2b60      	cmp	r3, #96	@ 0x60
 8006736:	d8b2      	bhi.n	800669e <_scanf_float+0x8e>
 8006738:	2b54      	cmp	r3, #84	@ 0x54
 800673a:	d07b      	beq.n	8006834 <_scanf_float+0x224>
 800673c:	2b59      	cmp	r3, #89	@ 0x59
 800673e:	d199      	bne.n	8006674 <_scanf_float+0x64>
 8006740:	2d07      	cmp	r5, #7
 8006742:	d197      	bne.n	8006674 <_scanf_float+0x64>
 8006744:	2508      	movs	r5, #8
 8006746:	e02c      	b.n	80067a2 <_scanf_float+0x192>
 8006748:	2b74      	cmp	r3, #116	@ 0x74
 800674a:	d073      	beq.n	8006834 <_scanf_float+0x224>
 800674c:	2b79      	cmp	r3, #121	@ 0x79
 800674e:	e7f6      	b.n	800673e <_scanf_float+0x12e>
 8006750:	6821      	ldr	r1, [r4, #0]
 8006752:	05c8      	lsls	r0, r1, #23
 8006754:	d51b      	bpl.n	800678e <_scanf_float+0x17e>
 8006756:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800675a:	6021      	str	r1, [r4, #0]
 800675c:	f109 0901 	add.w	r9, r9, #1
 8006760:	f1bb 0f00 	cmp.w	fp, #0
 8006764:	d003      	beq.n	800676e <_scanf_float+0x15e>
 8006766:	3201      	adds	r2, #1
 8006768:	f10b 3bff 	add.w	fp, fp, #4294967295
 800676c:	60a2      	str	r2, [r4, #8]
 800676e:	68a3      	ldr	r3, [r4, #8]
 8006770:	3b01      	subs	r3, #1
 8006772:	60a3      	str	r3, [r4, #8]
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	3301      	adds	r3, #1
 8006778:	6123      	str	r3, [r4, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3b01      	subs	r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	607b      	str	r3, [r7, #4]
 8006782:	f340 8087 	ble.w	8006894 <_scanf_float+0x284>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	e765      	b.n	800665a <_scanf_float+0x4a>
 800678e:	eb1a 0105 	adds.w	r1, sl, r5
 8006792:	f47f af6f 	bne.w	8006674 <_scanf_float+0x64>
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800679c:	6022      	str	r2, [r4, #0]
 800679e:	460d      	mov	r5, r1
 80067a0:	468a      	mov	sl, r1
 80067a2:	f806 3b01 	strb.w	r3, [r6], #1
 80067a6:	e7e2      	b.n	800676e <_scanf_float+0x15e>
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	0610      	lsls	r0, r2, #24
 80067ac:	f57f af62 	bpl.w	8006674 <_scanf_float+0x64>
 80067b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	e7f4      	b.n	80067a2 <_scanf_float+0x192>
 80067b8:	f1ba 0f00 	cmp.w	sl, #0
 80067bc:	d10e      	bne.n	80067dc <_scanf_float+0x1cc>
 80067be:	f1b9 0f00 	cmp.w	r9, #0
 80067c2:	d10e      	bne.n	80067e2 <_scanf_float+0x1d2>
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80067ca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80067ce:	d108      	bne.n	80067e2 <_scanf_float+0x1d2>
 80067d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	f04f 0a01 	mov.w	sl, #1
 80067da:	e7e2      	b.n	80067a2 <_scanf_float+0x192>
 80067dc:	f1ba 0f02 	cmp.w	sl, #2
 80067e0:	d055      	beq.n	800688e <_scanf_float+0x27e>
 80067e2:	2d01      	cmp	r5, #1
 80067e4:	d002      	beq.n	80067ec <_scanf_float+0x1dc>
 80067e6:	2d04      	cmp	r5, #4
 80067e8:	f47f af44 	bne.w	8006674 <_scanf_float+0x64>
 80067ec:	3501      	adds	r5, #1
 80067ee:	b2ed      	uxtb	r5, r5
 80067f0:	e7d7      	b.n	80067a2 <_scanf_float+0x192>
 80067f2:	f1ba 0f01 	cmp.w	sl, #1
 80067f6:	f47f af3d 	bne.w	8006674 <_scanf_float+0x64>
 80067fa:	f04f 0a02 	mov.w	sl, #2
 80067fe:	e7d0      	b.n	80067a2 <_scanf_float+0x192>
 8006800:	b97d      	cbnz	r5, 8006822 <_scanf_float+0x212>
 8006802:	f1b9 0f00 	cmp.w	r9, #0
 8006806:	f47f af38 	bne.w	800667a <_scanf_float+0x6a>
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006810:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006814:	f040 8108 	bne.w	8006a28 <_scanf_float+0x418>
 8006818:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800681c:	6022      	str	r2, [r4, #0]
 800681e:	2501      	movs	r5, #1
 8006820:	e7bf      	b.n	80067a2 <_scanf_float+0x192>
 8006822:	2d03      	cmp	r5, #3
 8006824:	d0e2      	beq.n	80067ec <_scanf_float+0x1dc>
 8006826:	2d05      	cmp	r5, #5
 8006828:	e7de      	b.n	80067e8 <_scanf_float+0x1d8>
 800682a:	2d02      	cmp	r5, #2
 800682c:	f47f af22 	bne.w	8006674 <_scanf_float+0x64>
 8006830:	2503      	movs	r5, #3
 8006832:	e7b6      	b.n	80067a2 <_scanf_float+0x192>
 8006834:	2d06      	cmp	r5, #6
 8006836:	f47f af1d 	bne.w	8006674 <_scanf_float+0x64>
 800683a:	2507      	movs	r5, #7
 800683c:	e7b1      	b.n	80067a2 <_scanf_float+0x192>
 800683e:	6822      	ldr	r2, [r4, #0]
 8006840:	0591      	lsls	r1, r2, #22
 8006842:	f57f af17 	bpl.w	8006674 <_scanf_float+0x64>
 8006846:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800684a:	6022      	str	r2, [r4, #0]
 800684c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006850:	e7a7      	b.n	80067a2 <_scanf_float+0x192>
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006858:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800685c:	d006      	beq.n	800686c <_scanf_float+0x25c>
 800685e:	0550      	lsls	r0, r2, #21
 8006860:	f57f af08 	bpl.w	8006674 <_scanf_float+0x64>
 8006864:	f1b9 0f00 	cmp.w	r9, #0
 8006868:	f000 80de 	beq.w	8006a28 <_scanf_float+0x418>
 800686c:	0591      	lsls	r1, r2, #22
 800686e:	bf58      	it	pl
 8006870:	9902      	ldrpl	r1, [sp, #8]
 8006872:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006876:	bf58      	it	pl
 8006878:	eba9 0101 	subpl.w	r1, r9, r1
 800687c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006880:	bf58      	it	pl
 8006882:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006886:	6022      	str	r2, [r4, #0]
 8006888:	f04f 0900 	mov.w	r9, #0
 800688c:	e789      	b.n	80067a2 <_scanf_float+0x192>
 800688e:	f04f 0a03 	mov.w	sl, #3
 8006892:	e786      	b.n	80067a2 <_scanf_float+0x192>
 8006894:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006898:	4639      	mov	r1, r7
 800689a:	4640      	mov	r0, r8
 800689c:	4798      	blx	r3
 800689e:	2800      	cmp	r0, #0
 80068a0:	f43f aedb 	beq.w	800665a <_scanf_float+0x4a>
 80068a4:	e6e6      	b.n	8006674 <_scanf_float+0x64>
 80068a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068ae:	463a      	mov	r2, r7
 80068b0:	4640      	mov	r0, r8
 80068b2:	4798      	blx	r3
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	6123      	str	r3, [r4, #16]
 80068ba:	e6e8      	b.n	800668e <_scanf_float+0x7e>
 80068bc:	1e6b      	subs	r3, r5, #1
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d824      	bhi.n	800690c <_scanf_float+0x2fc>
 80068c2:	2d02      	cmp	r5, #2
 80068c4:	d836      	bhi.n	8006934 <_scanf_float+0x324>
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	429e      	cmp	r6, r3
 80068ca:	f67f aee4 	bls.w	8006696 <_scanf_float+0x86>
 80068ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068d6:	463a      	mov	r2, r7
 80068d8:	4640      	mov	r0, r8
 80068da:	4798      	blx	r3
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	3b01      	subs	r3, #1
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	e7f0      	b.n	80068c6 <_scanf_float+0x2b6>
 80068e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068e8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80068ec:	463a      	mov	r2, r7
 80068ee:	4640      	mov	r0, r8
 80068f0:	4798      	blx	r3
 80068f2:	6923      	ldr	r3, [r4, #16]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	6123      	str	r3, [r4, #16]
 80068f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068fc:	fa5f fa8a 	uxtb.w	sl, sl
 8006900:	f1ba 0f02 	cmp.w	sl, #2
 8006904:	d1ee      	bne.n	80068e4 <_scanf_float+0x2d4>
 8006906:	3d03      	subs	r5, #3
 8006908:	b2ed      	uxtb	r5, r5
 800690a:	1b76      	subs	r6, r6, r5
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	05da      	lsls	r2, r3, #23
 8006910:	d530      	bpl.n	8006974 <_scanf_float+0x364>
 8006912:	055b      	lsls	r3, r3, #21
 8006914:	d511      	bpl.n	800693a <_scanf_float+0x32a>
 8006916:	9b01      	ldr	r3, [sp, #4]
 8006918:	429e      	cmp	r6, r3
 800691a:	f67f aebc 	bls.w	8006696 <_scanf_float+0x86>
 800691e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006926:	463a      	mov	r2, r7
 8006928:	4640      	mov	r0, r8
 800692a:	4798      	blx	r3
 800692c:	6923      	ldr	r3, [r4, #16]
 800692e:	3b01      	subs	r3, #1
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	e7f0      	b.n	8006916 <_scanf_float+0x306>
 8006934:	46aa      	mov	sl, r5
 8006936:	46b3      	mov	fp, r6
 8006938:	e7de      	b.n	80068f8 <_scanf_float+0x2e8>
 800693a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	2965      	cmp	r1, #101	@ 0x65
 8006942:	f103 33ff 	add.w	r3, r3, #4294967295
 8006946:	f106 35ff 	add.w	r5, r6, #4294967295
 800694a:	6123      	str	r3, [r4, #16]
 800694c:	d00c      	beq.n	8006968 <_scanf_float+0x358>
 800694e:	2945      	cmp	r1, #69	@ 0x45
 8006950:	d00a      	beq.n	8006968 <_scanf_float+0x358>
 8006952:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006956:	463a      	mov	r2, r7
 8006958:	4640      	mov	r0, r8
 800695a:	4798      	blx	r3
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006962:	3b01      	subs	r3, #1
 8006964:	1eb5      	subs	r5, r6, #2
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800696c:	463a      	mov	r2, r7
 800696e:	4640      	mov	r0, r8
 8006970:	4798      	blx	r3
 8006972:	462e      	mov	r6, r5
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	f012 0210 	ands.w	r2, r2, #16
 800697a:	d001      	beq.n	8006980 <_scanf_float+0x370>
 800697c:	2000      	movs	r0, #0
 800697e:	e68b      	b.n	8006698 <_scanf_float+0x88>
 8006980:	7032      	strb	r2, [r6, #0]
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800698c:	d11c      	bne.n	80069c8 <_scanf_float+0x3b8>
 800698e:	9b02      	ldr	r3, [sp, #8]
 8006990:	454b      	cmp	r3, r9
 8006992:	eba3 0209 	sub.w	r2, r3, r9
 8006996:	d123      	bne.n	80069e0 <_scanf_float+0x3d0>
 8006998:	9901      	ldr	r1, [sp, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	4640      	mov	r0, r8
 800699e:	f002 fbf7 	bl	8009190 <_strtod_r>
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	6821      	ldr	r1, [r4, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f011 0f02 	tst.w	r1, #2
 80069ac:	ec57 6b10 	vmov	r6, r7, d0
 80069b0:	f103 0204 	add.w	r2, r3, #4
 80069b4:	d01f      	beq.n	80069f6 <_scanf_float+0x3e6>
 80069b6:	9903      	ldr	r1, [sp, #12]
 80069b8:	600a      	str	r2, [r1, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	e9c3 6700 	strd	r6, r7, [r3]
 80069c0:	68e3      	ldr	r3, [r4, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60e3      	str	r3, [r4, #12]
 80069c6:	e7d9      	b.n	800697c <_scanf_float+0x36c>
 80069c8:	9b04      	ldr	r3, [sp, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0e4      	beq.n	8006998 <_scanf_float+0x388>
 80069ce:	9905      	ldr	r1, [sp, #20]
 80069d0:	230a      	movs	r3, #10
 80069d2:	3101      	adds	r1, #1
 80069d4:	4640      	mov	r0, r8
 80069d6:	f002 fc5b 	bl	8009290 <_strtol_r>
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	9e05      	ldr	r6, [sp, #20]
 80069de:	1ac2      	subs	r2, r0, r3
 80069e0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80069e4:	429e      	cmp	r6, r3
 80069e6:	bf28      	it	cs
 80069e8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80069ec:	4910      	ldr	r1, [pc, #64]	@ (8006a30 <_scanf_float+0x420>)
 80069ee:	4630      	mov	r0, r6
 80069f0:	f000 f8e4 	bl	8006bbc <siprintf>
 80069f4:	e7d0      	b.n	8006998 <_scanf_float+0x388>
 80069f6:	f011 0f04 	tst.w	r1, #4
 80069fa:	9903      	ldr	r1, [sp, #12]
 80069fc:	600a      	str	r2, [r1, #0]
 80069fe:	d1dc      	bne.n	80069ba <_scanf_float+0x3aa>
 8006a00:	681d      	ldr	r5, [r3, #0]
 8006a02:	4632      	mov	r2, r6
 8006a04:	463b      	mov	r3, r7
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7fa f8b7 	bl	8000b7c <__aeabi_dcmpun>
 8006a0e:	b128      	cbz	r0, 8006a1c <_scanf_float+0x40c>
 8006a10:	4808      	ldr	r0, [pc, #32]	@ (8006a34 <_scanf_float+0x424>)
 8006a12:	f000 f9b7 	bl	8006d84 <nanf>
 8006a16:	ed85 0a00 	vstr	s0, [r5]
 8006a1a:	e7d1      	b.n	80069c0 <_scanf_float+0x3b0>
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f7fa f90a 	bl	8000c38 <__aeabi_d2f>
 8006a24:	6028      	str	r0, [r5, #0]
 8006a26:	e7cb      	b.n	80069c0 <_scanf_float+0x3b0>
 8006a28:	f04f 0900 	mov.w	r9, #0
 8006a2c:	e629      	b.n	8006682 <_scanf_float+0x72>
 8006a2e:	bf00      	nop
 8006a30:	0800a4cc 	.word	0x0800a4cc
 8006a34:	0800a865 	.word	0x0800a865

08006a38 <std>:
 8006a38:	2300      	movs	r3, #0
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a46:	6083      	str	r3, [r0, #8]
 8006a48:	8181      	strh	r1, [r0, #12]
 8006a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a4c:	81c2      	strh	r2, [r0, #14]
 8006a4e:	6183      	str	r3, [r0, #24]
 8006a50:	4619      	mov	r1, r3
 8006a52:	2208      	movs	r2, #8
 8006a54:	305c      	adds	r0, #92	@ 0x5c
 8006a56:	f000 f914 	bl	8006c82 <memset>
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x58>)
 8006a5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x5c>)
 8006a60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <std+0x60>)
 8006a64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <std+0x64>)
 8006a68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa0 <std+0x68>)
 8006a6c:	6224      	str	r4, [r4, #32]
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	d006      	beq.n	8006a80 <std+0x48>
 8006a72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a76:	4294      	cmp	r4, r2
 8006a78:	d002      	beq.n	8006a80 <std+0x48>
 8006a7a:	33d0      	adds	r3, #208	@ 0xd0
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	d105      	bne.n	8006a8c <std+0x54>
 8006a80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a88:	f000 b978 	b.w	8006d7c <__retarget_lock_init_recursive>
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	bf00      	nop
 8006a90:	08006bfd 	.word	0x08006bfd
 8006a94:	08006c1f 	.word	0x08006c1f
 8006a98:	08006c57 	.word	0x08006c57
 8006a9c:	08006c7b 	.word	0x08006c7b
 8006aa0:	20000384 	.word	0x20000384

08006aa4 <stdio_exit_handler>:
 8006aa4:	4a02      	ldr	r2, [pc, #8]	@ (8006ab0 <stdio_exit_handler+0xc>)
 8006aa6:	4903      	ldr	r1, [pc, #12]	@ (8006ab4 <stdio_exit_handler+0x10>)
 8006aa8:	4803      	ldr	r0, [pc, #12]	@ (8006ab8 <stdio_exit_handler+0x14>)
 8006aaa:	f000 b869 	b.w	8006b80 <_fwalk_sglue>
 8006aae:	bf00      	nop
 8006ab0:	20000024 	.word	0x20000024
 8006ab4:	0800964d 	.word	0x0800964d
 8006ab8:	20000034 	.word	0x20000034

08006abc <cleanup_stdio>:
 8006abc:	6841      	ldr	r1, [r0, #4]
 8006abe:	4b0c      	ldr	r3, [pc, #48]	@ (8006af0 <cleanup_stdio+0x34>)
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	d001      	beq.n	8006acc <cleanup_stdio+0x10>
 8006ac8:	f002 fdc0 	bl	800964c <_fflush_r>
 8006acc:	68a1      	ldr	r1, [r4, #8]
 8006ace:	4b09      	ldr	r3, [pc, #36]	@ (8006af4 <cleanup_stdio+0x38>)
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d002      	beq.n	8006ada <cleanup_stdio+0x1e>
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f002 fdb9 	bl	800964c <_fflush_r>
 8006ada:	68e1      	ldr	r1, [r4, #12]
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <cleanup_stdio+0x3c>)
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	d004      	beq.n	8006aec <cleanup_stdio+0x30>
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae8:	f002 bdb0 	b.w	800964c <_fflush_r>
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	bf00      	nop
 8006af0:	20000384 	.word	0x20000384
 8006af4:	200003ec 	.word	0x200003ec
 8006af8:	20000454 	.word	0x20000454

08006afc <global_stdio_init.part.0>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <global_stdio_init.part.0+0x30>)
 8006b00:	4c0b      	ldr	r4, [pc, #44]	@ (8006b30 <global_stdio_init.part.0+0x34>)
 8006b02:	4a0c      	ldr	r2, [pc, #48]	@ (8006b34 <global_stdio_init.part.0+0x38>)
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	4620      	mov	r0, r4
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2104      	movs	r1, #4
 8006b0c:	f7ff ff94 	bl	8006a38 <std>
 8006b10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b14:	2201      	movs	r2, #1
 8006b16:	2109      	movs	r1, #9
 8006b18:	f7ff ff8e 	bl	8006a38 <std>
 8006b1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b20:	2202      	movs	r2, #2
 8006b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b26:	2112      	movs	r1, #18
 8006b28:	f7ff bf86 	b.w	8006a38 <std>
 8006b2c:	200004bc 	.word	0x200004bc
 8006b30:	20000384 	.word	0x20000384
 8006b34:	08006aa5 	.word	0x08006aa5

08006b38 <__sfp_lock_acquire>:
 8006b38:	4801      	ldr	r0, [pc, #4]	@ (8006b40 <__sfp_lock_acquire+0x8>)
 8006b3a:	f000 b920 	b.w	8006d7e <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	200004c5 	.word	0x200004c5

08006b44 <__sfp_lock_release>:
 8006b44:	4801      	ldr	r0, [pc, #4]	@ (8006b4c <__sfp_lock_release+0x8>)
 8006b46:	f000 b91b 	b.w	8006d80 <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	200004c5 	.word	0x200004c5

08006b50 <__sinit>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	4604      	mov	r4, r0
 8006b54:	f7ff fff0 	bl	8006b38 <__sfp_lock_acquire>
 8006b58:	6a23      	ldr	r3, [r4, #32]
 8006b5a:	b11b      	cbz	r3, 8006b64 <__sinit+0x14>
 8006b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b60:	f7ff bff0 	b.w	8006b44 <__sfp_lock_release>
 8006b64:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <__sinit+0x28>)
 8006b66:	6223      	str	r3, [r4, #32]
 8006b68:	4b04      	ldr	r3, [pc, #16]	@ (8006b7c <__sinit+0x2c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f5      	bne.n	8006b5c <__sinit+0xc>
 8006b70:	f7ff ffc4 	bl	8006afc <global_stdio_init.part.0>
 8006b74:	e7f2      	b.n	8006b5c <__sinit+0xc>
 8006b76:	bf00      	nop
 8006b78:	08006abd 	.word	0x08006abd
 8006b7c:	200004bc 	.word	0x200004bc

08006b80 <_fwalk_sglue>:
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	4607      	mov	r7, r0
 8006b86:	4688      	mov	r8, r1
 8006b88:	4614      	mov	r4, r2
 8006b8a:	2600      	movs	r6, #0
 8006b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b90:	f1b9 0901 	subs.w	r9, r9, #1
 8006b94:	d505      	bpl.n	8006ba2 <_fwalk_sglue+0x22>
 8006b96:	6824      	ldr	r4, [r4, #0]
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	d1f7      	bne.n	8006b8c <_fwalk_sglue+0xc>
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	89ab      	ldrh	r3, [r5, #12]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d907      	bls.n	8006bb8 <_fwalk_sglue+0x38>
 8006ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bac:	3301      	adds	r3, #1
 8006bae:	d003      	beq.n	8006bb8 <_fwalk_sglue+0x38>
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c0      	blx	r8
 8006bb6:	4306      	orrs	r6, r0
 8006bb8:	3568      	adds	r5, #104	@ 0x68
 8006bba:	e7e9      	b.n	8006b90 <_fwalk_sglue+0x10>

08006bbc <siprintf>:
 8006bbc:	b40e      	push	{r1, r2, r3}
 8006bbe:	b500      	push	{lr}
 8006bc0:	b09c      	sub	sp, #112	@ 0x70
 8006bc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006bc4:	9002      	str	r0, [sp, #8]
 8006bc6:	9006      	str	r0, [sp, #24]
 8006bc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006bcc:	4809      	ldr	r0, [pc, #36]	@ (8006bf4 <siprintf+0x38>)
 8006bce:	9107      	str	r1, [sp, #28]
 8006bd0:	9104      	str	r1, [sp, #16]
 8006bd2:	4909      	ldr	r1, [pc, #36]	@ (8006bf8 <siprintf+0x3c>)
 8006bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bd8:	9105      	str	r1, [sp, #20]
 8006bda:	6800      	ldr	r0, [r0, #0]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	a902      	add	r1, sp, #8
 8006be0:	f002 fbb4 	bl	800934c <_svfiprintf_r>
 8006be4:	9b02      	ldr	r3, [sp, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	b01c      	add	sp, #112	@ 0x70
 8006bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bf0:	b003      	add	sp, #12
 8006bf2:	4770      	bx	lr
 8006bf4:	20000030 	.word	0x20000030
 8006bf8:	ffff0208 	.word	0xffff0208

08006bfc <__sread>:
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	460c      	mov	r4, r1
 8006c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c04:	f000 f86c 	bl	8006ce0 <_read_r>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	bfab      	itete	ge
 8006c0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c10:	181b      	addge	r3, r3, r0
 8006c12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c16:	bfac      	ite	ge
 8006c18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c1a:	81a3      	strhlt	r3, [r4, #12]
 8006c1c:	bd10      	pop	{r4, pc}

08006c1e <__swrite>:
 8006c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c22:	461f      	mov	r7, r3
 8006c24:	898b      	ldrh	r3, [r1, #12]
 8006c26:	05db      	lsls	r3, r3, #23
 8006c28:	4605      	mov	r5, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	d505      	bpl.n	8006c3c <__swrite+0x1e>
 8006c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c34:	2302      	movs	r3, #2
 8006c36:	2200      	movs	r2, #0
 8006c38:	f000 f840 	bl	8006cbc <_lseek_r>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c46:	81a3      	strh	r3, [r4, #12]
 8006c48:	4632      	mov	r2, r6
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c52:	f000 b857 	b.w	8006d04 <_write_r>

08006c56 <__sseek>:
 8006c56:	b510      	push	{r4, lr}
 8006c58:	460c      	mov	r4, r1
 8006c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5e:	f000 f82d 	bl	8006cbc <_lseek_r>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	bf15      	itete	ne
 8006c68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c72:	81a3      	strheq	r3, [r4, #12]
 8006c74:	bf18      	it	ne
 8006c76:	81a3      	strhne	r3, [r4, #12]
 8006c78:	bd10      	pop	{r4, pc}

08006c7a <__sclose>:
 8006c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c7e:	f000 b80d 	b.w	8006c9c <_close_r>

08006c82 <memset>:
 8006c82:	4402      	add	r2, r0
 8006c84:	4603      	mov	r3, r0
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d100      	bne.n	8006c8c <memset+0xa>
 8006c8a:	4770      	bx	lr
 8006c8c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c90:	e7f9      	b.n	8006c86 <memset+0x4>
	...

08006c94 <_localeconv_r>:
 8006c94:	4800      	ldr	r0, [pc, #0]	@ (8006c98 <_localeconv_r+0x4>)
 8006c96:	4770      	bx	lr
 8006c98:	20000170 	.word	0x20000170

08006c9c <_close_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d06      	ldr	r5, [pc, #24]	@ (8006cb8 <_close_r+0x1c>)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7fa fdd2 	bl	8001850 <_close>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_close_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_close_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	200004c0 	.word	0x200004c0

08006cbc <_lseek_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4d07      	ldr	r5, [pc, #28]	@ (8006cdc <_lseek_r+0x20>)
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	602a      	str	r2, [r5, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f7fa fde7 	bl	800189e <_lseek>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d102      	bne.n	8006cda <_lseek_r+0x1e>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	b103      	cbz	r3, 8006cda <_lseek_r+0x1e>
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	200004c0 	.word	0x200004c0

08006ce0 <_read_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d07      	ldr	r5, [pc, #28]	@ (8006d00 <_read_r+0x20>)
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	4608      	mov	r0, r1
 8006ce8:	4611      	mov	r1, r2
 8006cea:	2200      	movs	r2, #0
 8006cec:	602a      	str	r2, [r5, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f7fa fd75 	bl	80017de <_read>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_read_r+0x1e>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_read_r+0x1e>
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	200004c0 	.word	0x200004c0

08006d04 <_write_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4d07      	ldr	r5, [pc, #28]	@ (8006d24 <_write_r+0x20>)
 8006d08:	4604      	mov	r4, r0
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	602a      	str	r2, [r5, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f7fa fd80 	bl	8001818 <_write>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d102      	bne.n	8006d22 <_write_r+0x1e>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b103      	cbz	r3, 8006d22 <_write_r+0x1e>
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	200004c0 	.word	0x200004c0

08006d28 <__errno>:
 8006d28:	4b01      	ldr	r3, [pc, #4]	@ (8006d30 <__errno+0x8>)
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000030 	.word	0x20000030

08006d34 <__libc_init_array>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4d0d      	ldr	r5, [pc, #52]	@ (8006d6c <__libc_init_array+0x38>)
 8006d38:	4c0d      	ldr	r4, [pc, #52]	@ (8006d70 <__libc_init_array+0x3c>)
 8006d3a:	1b64      	subs	r4, r4, r5
 8006d3c:	10a4      	asrs	r4, r4, #2
 8006d3e:	2600      	movs	r6, #0
 8006d40:	42a6      	cmp	r6, r4
 8006d42:	d109      	bne.n	8006d58 <__libc_init_array+0x24>
 8006d44:	4d0b      	ldr	r5, [pc, #44]	@ (8006d74 <__libc_init_array+0x40>)
 8006d46:	4c0c      	ldr	r4, [pc, #48]	@ (8006d78 <__libc_init_array+0x44>)
 8006d48:	f003 fb70 	bl	800a42c <_init>
 8006d4c:	1b64      	subs	r4, r4, r5
 8006d4e:	10a4      	asrs	r4, r4, #2
 8006d50:	2600      	movs	r6, #0
 8006d52:	42a6      	cmp	r6, r4
 8006d54:	d105      	bne.n	8006d62 <__libc_init_array+0x2e>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5c:	4798      	blx	r3
 8006d5e:	3601      	adds	r6, #1
 8006d60:	e7ee      	b.n	8006d40 <__libc_init_array+0xc>
 8006d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d66:	4798      	blx	r3
 8006d68:	3601      	adds	r6, #1
 8006d6a:	e7f2      	b.n	8006d52 <__libc_init_array+0x1e>
 8006d6c:	0800a8d0 	.word	0x0800a8d0
 8006d70:	0800a8d0 	.word	0x0800a8d0
 8006d74:	0800a8d0 	.word	0x0800a8d0
 8006d78:	0800a8d4 	.word	0x0800a8d4

08006d7c <__retarget_lock_init_recursive>:
 8006d7c:	4770      	bx	lr

08006d7e <__retarget_lock_acquire_recursive>:
 8006d7e:	4770      	bx	lr

08006d80 <__retarget_lock_release_recursive>:
 8006d80:	4770      	bx	lr
	...

08006d84 <nanf>:
 8006d84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006d8c <nanf+0x8>
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	7fc00000 	.word	0x7fc00000

08006d90 <quorem>:
 8006d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	6903      	ldr	r3, [r0, #16]
 8006d96:	690c      	ldr	r4, [r1, #16]
 8006d98:	42a3      	cmp	r3, r4
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	db7e      	blt.n	8006e9c <quorem+0x10c>
 8006d9e:	3c01      	subs	r4, #1
 8006da0:	f101 0814 	add.w	r8, r1, #20
 8006da4:	00a3      	lsls	r3, r4, #2
 8006da6:	f100 0514 	add.w	r5, r0, #20
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006db6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dc6:	d32e      	bcc.n	8006e26 <quorem+0x96>
 8006dc8:	f04f 0a00 	mov.w	sl, #0
 8006dcc:	46c4      	mov	ip, r8
 8006dce:	46ae      	mov	lr, r5
 8006dd0:	46d3      	mov	fp, sl
 8006dd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dd6:	b298      	uxth	r0, r3
 8006dd8:	fb06 a000 	mla	r0, r6, r0, sl
 8006ddc:	0c02      	lsrs	r2, r0, #16
 8006dde:	0c1b      	lsrs	r3, r3, #16
 8006de0:	fb06 2303 	mla	r3, r6, r3, r2
 8006de4:	f8de 2000 	ldr.w	r2, [lr]
 8006de8:	b280      	uxth	r0, r0
 8006dea:	b292      	uxth	r2, r2
 8006dec:	1a12      	subs	r2, r2, r0
 8006dee:	445a      	add	r2, fp
 8006df0:	f8de 0000 	ldr.w	r0, [lr]
 8006df4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006dfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e02:	b292      	uxth	r2, r2
 8006e04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e08:	45e1      	cmp	r9, ip
 8006e0a:	f84e 2b04 	str.w	r2, [lr], #4
 8006e0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e12:	d2de      	bcs.n	8006dd2 <quorem+0x42>
 8006e14:	9b00      	ldr	r3, [sp, #0]
 8006e16:	58eb      	ldr	r3, [r5, r3]
 8006e18:	b92b      	cbnz	r3, 8006e26 <quorem+0x96>
 8006e1a:	9b01      	ldr	r3, [sp, #4]
 8006e1c:	3b04      	subs	r3, #4
 8006e1e:	429d      	cmp	r5, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	d32f      	bcc.n	8006e84 <quorem+0xf4>
 8006e24:	613c      	str	r4, [r7, #16]
 8006e26:	4638      	mov	r0, r7
 8006e28:	f001 f9c2 	bl	80081b0 <__mcmp>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	db25      	blt.n	8006e7c <quorem+0xec>
 8006e30:	4629      	mov	r1, r5
 8006e32:	2000      	movs	r0, #0
 8006e34:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e38:	f8d1 c000 	ldr.w	ip, [r1]
 8006e3c:	fa1f fe82 	uxth.w	lr, r2
 8006e40:	fa1f f38c 	uxth.w	r3, ip
 8006e44:	eba3 030e 	sub.w	r3, r3, lr
 8006e48:	4403      	add	r3, r0
 8006e4a:	0c12      	lsrs	r2, r2, #16
 8006e4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e5a:	45c1      	cmp	r9, r8
 8006e5c:	f841 3b04 	str.w	r3, [r1], #4
 8006e60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e64:	d2e6      	bcs.n	8006e34 <quorem+0xa4>
 8006e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e6e:	b922      	cbnz	r2, 8006e7a <quorem+0xea>
 8006e70:	3b04      	subs	r3, #4
 8006e72:	429d      	cmp	r5, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	d30b      	bcc.n	8006e90 <quorem+0x100>
 8006e78:	613c      	str	r4, [r7, #16]
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	b003      	add	sp, #12
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	3b04      	subs	r3, #4
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d1cb      	bne.n	8006e24 <quorem+0x94>
 8006e8c:	3c01      	subs	r4, #1
 8006e8e:	e7c6      	b.n	8006e1e <quorem+0x8e>
 8006e90:	6812      	ldr	r2, [r2, #0]
 8006e92:	3b04      	subs	r3, #4
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	d1ef      	bne.n	8006e78 <quorem+0xe8>
 8006e98:	3c01      	subs	r4, #1
 8006e9a:	e7ea      	b.n	8006e72 <quorem+0xe2>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	e7ee      	b.n	8006e7e <quorem+0xee>

08006ea0 <_dtoa_r>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	69c7      	ldr	r7, [r0, #28]
 8006ea6:	b099      	sub	sp, #100	@ 0x64
 8006ea8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006eac:	ec55 4b10 	vmov	r4, r5, d0
 8006eb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006eb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006eb4:	4683      	mov	fp, r0
 8006eb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006eba:	b97f      	cbnz	r7, 8006edc <_dtoa_r+0x3c>
 8006ebc:	2010      	movs	r0, #16
 8006ebe:	f000 fdfd 	bl	8007abc <malloc>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ec8:	b920      	cbnz	r0, 8006ed4 <_dtoa_r+0x34>
 8006eca:	4ba7      	ldr	r3, [pc, #668]	@ (8007168 <_dtoa_r+0x2c8>)
 8006ecc:	21ef      	movs	r1, #239	@ 0xef
 8006ece:	48a7      	ldr	r0, [pc, #668]	@ (800716c <_dtoa_r+0x2cc>)
 8006ed0:	f002 fc36 	bl	8009740 <__assert_func>
 8006ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ed8:	6007      	str	r7, [r0, #0]
 8006eda:	60c7      	str	r7, [r0, #12]
 8006edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	b159      	cbz	r1, 8006efc <_dtoa_r+0x5c>
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	604a      	str	r2, [r1, #4]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4093      	lsls	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
 8006eee:	4658      	mov	r0, fp
 8006ef0:	f000 feda 	bl	8007ca8 <_Bfree>
 8006ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	1e2b      	subs	r3, r5, #0
 8006efe:	bfb9      	ittee	lt
 8006f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f04:	9303      	strlt	r3, [sp, #12]
 8006f06:	2300      	movge	r3, #0
 8006f08:	6033      	strge	r3, [r6, #0]
 8006f0a:	9f03      	ldr	r7, [sp, #12]
 8006f0c:	4b98      	ldr	r3, [pc, #608]	@ (8007170 <_dtoa_r+0x2d0>)
 8006f0e:	bfbc      	itt	lt
 8006f10:	2201      	movlt	r2, #1
 8006f12:	6032      	strlt	r2, [r6, #0]
 8006f14:	43bb      	bics	r3, r7
 8006f16:	d112      	bne.n	8006f3e <_dtoa_r+0x9e>
 8006f18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f24:	4323      	orrs	r3, r4
 8006f26:	f000 854d 	beq.w	80079c4 <_dtoa_r+0xb24>
 8006f2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007184 <_dtoa_r+0x2e4>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 854f 	beq.w	80079d4 <_dtoa_r+0xb34>
 8006f36:	f10a 0303 	add.w	r3, sl, #3
 8006f3a:	f000 bd49 	b.w	80079d0 <_dtoa_r+0xb30>
 8006f3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	ec51 0b17 	vmov	r0, r1, d7
 8006f48:	2300      	movs	r3, #0
 8006f4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f4e:	f7f9 fde3 	bl	8000b18 <__aeabi_dcmpeq>
 8006f52:	4680      	mov	r8, r0
 8006f54:	b158      	cbz	r0, 8006f6e <_dtoa_r+0xce>
 8006f56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f58:	2301      	movs	r3, #1
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f5e:	b113      	cbz	r3, 8006f66 <_dtoa_r+0xc6>
 8006f60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f62:	4b84      	ldr	r3, [pc, #528]	@ (8007174 <_dtoa_r+0x2d4>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007188 <_dtoa_r+0x2e8>
 8006f6a:	f000 bd33 	b.w	80079d4 <_dtoa_r+0xb34>
 8006f6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f72:	aa16      	add	r2, sp, #88	@ 0x58
 8006f74:	a917      	add	r1, sp, #92	@ 0x5c
 8006f76:	4658      	mov	r0, fp
 8006f78:	f001 fa3a 	bl	80083f0 <__d2b>
 8006f7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f80:	4681      	mov	r9, r0
 8006f82:	2e00      	cmp	r6, #0
 8006f84:	d077      	beq.n	8007076 <_dtoa_r+0x1d6>
 8006f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4b74      	ldr	r3, [pc, #464]	@ (8007178 <_dtoa_r+0x2d8>)
 8006fa6:	f7f9 f997 	bl	80002d8 <__aeabi_dsub>
 8006faa:	a369      	add	r3, pc, #420	@ (adr r3, 8007150 <_dtoa_r+0x2b0>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f7f9 fb4a 	bl	8000648 <__aeabi_dmul>
 8006fb4:	a368      	add	r3, pc, #416	@ (adr r3, 8007158 <_dtoa_r+0x2b8>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f98f 	bl	80002dc <__adddf3>
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	460d      	mov	r5, r1
 8006fc4:	f7f9 fad6 	bl	8000574 <__aeabi_i2d>
 8006fc8:	a365      	add	r3, pc, #404	@ (adr r3, 8007160 <_dtoa_r+0x2c0>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 fb3b 	bl	8000648 <__aeabi_dmul>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 f97f 	bl	80002dc <__adddf3>
 8006fde:	4604      	mov	r4, r0
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	f7f9 fde1 	bl	8000ba8 <__aeabi_d2iz>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4607      	mov	r7, r0
 8006fea:	2300      	movs	r3, #0
 8006fec:	4620      	mov	r0, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	f7f9 fd9c 	bl	8000b2c <__aeabi_dcmplt>
 8006ff4:	b140      	cbz	r0, 8007008 <_dtoa_r+0x168>
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	f7f9 fabc 	bl	8000574 <__aeabi_i2d>
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	462b      	mov	r3, r5
 8007000:	f7f9 fd8a 	bl	8000b18 <__aeabi_dcmpeq>
 8007004:	b900      	cbnz	r0, 8007008 <_dtoa_r+0x168>
 8007006:	3f01      	subs	r7, #1
 8007008:	2f16      	cmp	r7, #22
 800700a:	d851      	bhi.n	80070b0 <_dtoa_r+0x210>
 800700c:	4b5b      	ldr	r3, [pc, #364]	@ (800717c <_dtoa_r+0x2dc>)
 800700e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800701a:	f7f9 fd87 	bl	8000b2c <__aeabi_dcmplt>
 800701e:	2800      	cmp	r0, #0
 8007020:	d048      	beq.n	80070b4 <_dtoa_r+0x214>
 8007022:	3f01      	subs	r7, #1
 8007024:	2300      	movs	r3, #0
 8007026:	9312      	str	r3, [sp, #72]	@ 0x48
 8007028:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800702a:	1b9b      	subs	r3, r3, r6
 800702c:	1e5a      	subs	r2, r3, #1
 800702e:	bf44      	itt	mi
 8007030:	f1c3 0801 	rsbmi	r8, r3, #1
 8007034:	2300      	movmi	r3, #0
 8007036:	9208      	str	r2, [sp, #32]
 8007038:	bf54      	ite	pl
 800703a:	f04f 0800 	movpl.w	r8, #0
 800703e:	9308      	strmi	r3, [sp, #32]
 8007040:	2f00      	cmp	r7, #0
 8007042:	db39      	blt.n	80070b8 <_dtoa_r+0x218>
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007048:	443b      	add	r3, r7
 800704a:	9308      	str	r3, [sp, #32]
 800704c:	2300      	movs	r3, #0
 800704e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007052:	2b09      	cmp	r3, #9
 8007054:	d864      	bhi.n	8007120 <_dtoa_r+0x280>
 8007056:	2b05      	cmp	r3, #5
 8007058:	bfc4      	itt	gt
 800705a:	3b04      	subgt	r3, #4
 800705c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800705e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007060:	f1a3 0302 	sub.w	r3, r3, #2
 8007064:	bfcc      	ite	gt
 8007066:	2400      	movgt	r4, #0
 8007068:	2401      	movle	r4, #1
 800706a:	2b03      	cmp	r3, #3
 800706c:	d863      	bhi.n	8007136 <_dtoa_r+0x296>
 800706e:	e8df f003 	tbb	[pc, r3]
 8007072:	372a      	.short	0x372a
 8007074:	5535      	.short	0x5535
 8007076:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800707a:	441e      	add	r6, r3
 800707c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007080:	2b20      	cmp	r3, #32
 8007082:	bfc1      	itttt	gt
 8007084:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007088:	409f      	lslgt	r7, r3
 800708a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800708e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007092:	bfd6      	itet	le
 8007094:	f1c3 0320 	rsble	r3, r3, #32
 8007098:	ea47 0003 	orrgt.w	r0, r7, r3
 800709c:	fa04 f003 	lslle.w	r0, r4, r3
 80070a0:	f7f9 fa58 	bl	8000554 <__aeabi_ui2d>
 80070a4:	2201      	movs	r2, #1
 80070a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80070aa:	3e01      	subs	r6, #1
 80070ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80070ae:	e777      	b.n	8006fa0 <_dtoa_r+0x100>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e7b8      	b.n	8007026 <_dtoa_r+0x186>
 80070b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80070b6:	e7b7      	b.n	8007028 <_dtoa_r+0x188>
 80070b8:	427b      	negs	r3, r7
 80070ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80070bc:	2300      	movs	r3, #0
 80070be:	eba8 0807 	sub.w	r8, r8, r7
 80070c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070c4:	e7c4      	b.n	8007050 <_dtoa_r+0x1b0>
 80070c6:	2300      	movs	r3, #0
 80070c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dc35      	bgt.n	800713c <_dtoa_r+0x29c>
 80070d0:	2301      	movs	r3, #1
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	9307      	str	r3, [sp, #28]
 80070d6:	461a      	mov	r2, r3
 80070d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80070da:	e00b      	b.n	80070f4 <_dtoa_r+0x254>
 80070dc:	2301      	movs	r3, #1
 80070de:	e7f3      	b.n	80070c8 <_dtoa_r+0x228>
 80070e0:	2300      	movs	r3, #0
 80070e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	bfb8      	it	lt
 80070f2:	2301      	movlt	r3, #1
 80070f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070f8:	2100      	movs	r1, #0
 80070fa:	2204      	movs	r2, #4
 80070fc:	f102 0514 	add.w	r5, r2, #20
 8007100:	429d      	cmp	r5, r3
 8007102:	d91f      	bls.n	8007144 <_dtoa_r+0x2a4>
 8007104:	6041      	str	r1, [r0, #4]
 8007106:	4658      	mov	r0, fp
 8007108:	f000 fd8e 	bl	8007c28 <_Balloc>
 800710c:	4682      	mov	sl, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d13c      	bne.n	800718c <_dtoa_r+0x2ec>
 8007112:	4b1b      	ldr	r3, [pc, #108]	@ (8007180 <_dtoa_r+0x2e0>)
 8007114:	4602      	mov	r2, r0
 8007116:	f240 11af 	movw	r1, #431	@ 0x1af
 800711a:	e6d8      	b.n	8006ece <_dtoa_r+0x2e>
 800711c:	2301      	movs	r3, #1
 800711e:	e7e0      	b.n	80070e2 <_dtoa_r+0x242>
 8007120:	2401      	movs	r4, #1
 8007122:	2300      	movs	r3, #0
 8007124:	9309      	str	r3, [sp, #36]	@ 0x24
 8007126:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007128:	f04f 33ff 	mov.w	r3, #4294967295
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	9307      	str	r3, [sp, #28]
 8007130:	2200      	movs	r2, #0
 8007132:	2312      	movs	r3, #18
 8007134:	e7d0      	b.n	80070d8 <_dtoa_r+0x238>
 8007136:	2301      	movs	r3, #1
 8007138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800713a:	e7f5      	b.n	8007128 <_dtoa_r+0x288>
 800713c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	e7d7      	b.n	80070f4 <_dtoa_r+0x254>
 8007144:	3101      	adds	r1, #1
 8007146:	0052      	lsls	r2, r2, #1
 8007148:	e7d8      	b.n	80070fc <_dtoa_r+0x25c>
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	636f4361 	.word	0x636f4361
 8007154:	3fd287a7 	.word	0x3fd287a7
 8007158:	8b60c8b3 	.word	0x8b60c8b3
 800715c:	3fc68a28 	.word	0x3fc68a28
 8007160:	509f79fb 	.word	0x509f79fb
 8007164:	3fd34413 	.word	0x3fd34413
 8007168:	0800a4de 	.word	0x0800a4de
 800716c:	0800a4f5 	.word	0x0800a4f5
 8007170:	7ff00000 	.word	0x7ff00000
 8007174:	0800a4a9 	.word	0x0800a4a9
 8007178:	3ff80000 	.word	0x3ff80000
 800717c:	0800a5f0 	.word	0x0800a5f0
 8007180:	0800a54d 	.word	0x0800a54d
 8007184:	0800a4da 	.word	0x0800a4da
 8007188:	0800a4a8 	.word	0x0800a4a8
 800718c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007190:	6018      	str	r0, [r3, #0]
 8007192:	9b07      	ldr	r3, [sp, #28]
 8007194:	2b0e      	cmp	r3, #14
 8007196:	f200 80a4 	bhi.w	80072e2 <_dtoa_r+0x442>
 800719a:	2c00      	cmp	r4, #0
 800719c:	f000 80a1 	beq.w	80072e2 <_dtoa_r+0x442>
 80071a0:	2f00      	cmp	r7, #0
 80071a2:	dd33      	ble.n	800720c <_dtoa_r+0x36c>
 80071a4:	4bad      	ldr	r3, [pc, #692]	@ (800745c <_dtoa_r+0x5bc>)
 80071a6:	f007 020f 	and.w	r2, r7, #15
 80071aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ae:	ed93 7b00 	vldr	d7, [r3]
 80071b2:	05f8      	lsls	r0, r7, #23
 80071b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80071bc:	d516      	bpl.n	80071ec <_dtoa_r+0x34c>
 80071be:	4ba8      	ldr	r3, [pc, #672]	@ (8007460 <_dtoa_r+0x5c0>)
 80071c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071c8:	f7f9 fb68 	bl	800089c <__aeabi_ddiv>
 80071cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d0:	f004 040f 	and.w	r4, r4, #15
 80071d4:	2603      	movs	r6, #3
 80071d6:	4da2      	ldr	r5, [pc, #648]	@ (8007460 <_dtoa_r+0x5c0>)
 80071d8:	b954      	cbnz	r4, 80071f0 <_dtoa_r+0x350>
 80071da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e2:	f7f9 fb5b 	bl	800089c <__aeabi_ddiv>
 80071e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ea:	e028      	b.n	800723e <_dtoa_r+0x39e>
 80071ec:	2602      	movs	r6, #2
 80071ee:	e7f2      	b.n	80071d6 <_dtoa_r+0x336>
 80071f0:	07e1      	lsls	r1, r4, #31
 80071f2:	d508      	bpl.n	8007206 <_dtoa_r+0x366>
 80071f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071fc:	f7f9 fa24 	bl	8000648 <__aeabi_dmul>
 8007200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007204:	3601      	adds	r6, #1
 8007206:	1064      	asrs	r4, r4, #1
 8007208:	3508      	adds	r5, #8
 800720a:	e7e5      	b.n	80071d8 <_dtoa_r+0x338>
 800720c:	f000 80d2 	beq.w	80073b4 <_dtoa_r+0x514>
 8007210:	427c      	negs	r4, r7
 8007212:	4b92      	ldr	r3, [pc, #584]	@ (800745c <_dtoa_r+0x5bc>)
 8007214:	4d92      	ldr	r5, [pc, #584]	@ (8007460 <_dtoa_r+0x5c0>)
 8007216:	f004 020f 	and.w	r2, r4, #15
 800721a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007226:	f7f9 fa0f 	bl	8000648 <__aeabi_dmul>
 800722a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800722e:	1124      	asrs	r4, r4, #4
 8007230:	2300      	movs	r3, #0
 8007232:	2602      	movs	r6, #2
 8007234:	2c00      	cmp	r4, #0
 8007236:	f040 80b2 	bne.w	800739e <_dtoa_r+0x4fe>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1d3      	bne.n	80071e6 <_dtoa_r+0x346>
 800723e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007240:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80b7 	beq.w	80073b8 <_dtoa_r+0x518>
 800724a:	4b86      	ldr	r3, [pc, #536]	@ (8007464 <_dtoa_r+0x5c4>)
 800724c:	2200      	movs	r2, #0
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	f7f9 fc6b 	bl	8000b2c <__aeabi_dcmplt>
 8007256:	2800      	cmp	r0, #0
 8007258:	f000 80ae 	beq.w	80073b8 <_dtoa_r+0x518>
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80aa 	beq.w	80073b8 <_dtoa_r+0x518>
 8007264:	9b00      	ldr	r3, [sp, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	dd37      	ble.n	80072da <_dtoa_r+0x43a>
 800726a:	1e7b      	subs	r3, r7, #1
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	4620      	mov	r0, r4
 8007270:	4b7d      	ldr	r3, [pc, #500]	@ (8007468 <_dtoa_r+0x5c8>)
 8007272:	2200      	movs	r2, #0
 8007274:	4629      	mov	r1, r5
 8007276:	f7f9 f9e7 	bl	8000648 <__aeabi_dmul>
 800727a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800727e:	9c00      	ldr	r4, [sp, #0]
 8007280:	3601      	adds	r6, #1
 8007282:	4630      	mov	r0, r6
 8007284:	f7f9 f976 	bl	8000574 <__aeabi_i2d>
 8007288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800728c:	f7f9 f9dc 	bl	8000648 <__aeabi_dmul>
 8007290:	4b76      	ldr	r3, [pc, #472]	@ (800746c <_dtoa_r+0x5cc>)
 8007292:	2200      	movs	r2, #0
 8007294:	f7f9 f822 	bl	80002dc <__adddf3>
 8007298:	4605      	mov	r5, r0
 800729a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800729e:	2c00      	cmp	r4, #0
 80072a0:	f040 808d 	bne.w	80073be <_dtoa_r+0x51e>
 80072a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072a8:	4b71      	ldr	r3, [pc, #452]	@ (8007470 <_dtoa_r+0x5d0>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	f7f9 f814 	bl	80002d8 <__aeabi_dsub>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072b8:	462a      	mov	r2, r5
 80072ba:	4633      	mov	r3, r6
 80072bc:	f7f9 fc54 	bl	8000b68 <__aeabi_dcmpgt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f040 828b 	bne.w	80077dc <_dtoa_r+0x93c>
 80072c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ca:	462a      	mov	r2, r5
 80072cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072d0:	f7f9 fc2c 	bl	8000b2c <__aeabi_dcmplt>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	f040 8128 	bne.w	800752a <_dtoa_r+0x68a>
 80072da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80072de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80072e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f2c0 815a 	blt.w	800759e <_dtoa_r+0x6fe>
 80072ea:	2f0e      	cmp	r7, #14
 80072ec:	f300 8157 	bgt.w	800759e <_dtoa_r+0x6fe>
 80072f0:	4b5a      	ldr	r3, [pc, #360]	@ (800745c <_dtoa_r+0x5bc>)
 80072f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072f6:	ed93 7b00 	vldr	d7, [r3]
 80072fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	ed8d 7b00 	vstr	d7, [sp]
 8007302:	da03      	bge.n	800730c <_dtoa_r+0x46c>
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f340 8101 	ble.w	800750e <_dtoa_r+0x66e>
 800730c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007310:	4656      	mov	r6, sl
 8007312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f9 fabf 	bl	800089c <__aeabi_ddiv>
 800731e:	f7f9 fc43 	bl	8000ba8 <__aeabi_d2iz>
 8007322:	4680      	mov	r8, r0
 8007324:	f7f9 f926 	bl	8000574 <__aeabi_i2d>
 8007328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800732c:	f7f9 f98c 	bl	8000648 <__aeabi_dmul>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800733c:	f7f8 ffcc 	bl	80002d8 <__aeabi_dsub>
 8007340:	f806 4b01 	strb.w	r4, [r6], #1
 8007344:	9d07      	ldr	r5, [sp, #28]
 8007346:	eba6 040a 	sub.w	r4, r6, sl
 800734a:	42a5      	cmp	r5, r4
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	f040 8117 	bne.w	8007582 <_dtoa_r+0x6e2>
 8007354:	f7f8 ffc2 	bl	80002dc <__adddf3>
 8007358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	f7f9 fc02 	bl	8000b68 <__aeabi_dcmpgt>
 8007364:	2800      	cmp	r0, #0
 8007366:	f040 80f9 	bne.w	800755c <_dtoa_r+0x6bc>
 800736a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f7f9 fbd1 	bl	8000b18 <__aeabi_dcmpeq>
 8007376:	b118      	cbz	r0, 8007380 <_dtoa_r+0x4e0>
 8007378:	f018 0f01 	tst.w	r8, #1
 800737c:	f040 80ee 	bne.w	800755c <_dtoa_r+0x6bc>
 8007380:	4649      	mov	r1, r9
 8007382:	4658      	mov	r0, fp
 8007384:	f000 fc90 	bl	8007ca8 <_Bfree>
 8007388:	2300      	movs	r3, #0
 800738a:	7033      	strb	r3, [r6, #0]
 800738c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800738e:	3701      	adds	r7, #1
 8007390:	601f      	str	r7, [r3, #0]
 8007392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 831d 	beq.w	80079d4 <_dtoa_r+0xb34>
 800739a:	601e      	str	r6, [r3, #0]
 800739c:	e31a      	b.n	80079d4 <_dtoa_r+0xb34>
 800739e:	07e2      	lsls	r2, r4, #31
 80073a0:	d505      	bpl.n	80073ae <_dtoa_r+0x50e>
 80073a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073a6:	f7f9 f94f 	bl	8000648 <__aeabi_dmul>
 80073aa:	3601      	adds	r6, #1
 80073ac:	2301      	movs	r3, #1
 80073ae:	1064      	asrs	r4, r4, #1
 80073b0:	3508      	adds	r5, #8
 80073b2:	e73f      	b.n	8007234 <_dtoa_r+0x394>
 80073b4:	2602      	movs	r6, #2
 80073b6:	e742      	b.n	800723e <_dtoa_r+0x39e>
 80073b8:	9c07      	ldr	r4, [sp, #28]
 80073ba:	9704      	str	r7, [sp, #16]
 80073bc:	e761      	b.n	8007282 <_dtoa_r+0x3e2>
 80073be:	4b27      	ldr	r3, [pc, #156]	@ (800745c <_dtoa_r+0x5bc>)
 80073c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073ca:	4454      	add	r4, sl
 80073cc:	2900      	cmp	r1, #0
 80073ce:	d053      	beq.n	8007478 <_dtoa_r+0x5d8>
 80073d0:	4928      	ldr	r1, [pc, #160]	@ (8007474 <_dtoa_r+0x5d4>)
 80073d2:	2000      	movs	r0, #0
 80073d4:	f7f9 fa62 	bl	800089c <__aeabi_ddiv>
 80073d8:	4633      	mov	r3, r6
 80073da:	462a      	mov	r2, r5
 80073dc:	f7f8 ff7c 	bl	80002d8 <__aeabi_dsub>
 80073e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073e4:	4656      	mov	r6, sl
 80073e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ea:	f7f9 fbdd 	bl	8000ba8 <__aeabi_d2iz>
 80073ee:	4605      	mov	r5, r0
 80073f0:	f7f9 f8c0 	bl	8000574 <__aeabi_i2d>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fc:	f7f8 ff6c 	bl	80002d8 <__aeabi_dsub>
 8007400:	3530      	adds	r5, #48	@ 0x30
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800740a:	f806 5b01 	strb.w	r5, [r6], #1
 800740e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007412:	f7f9 fb8b 	bl	8000b2c <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	d171      	bne.n	80074fe <_dtoa_r+0x65e>
 800741a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800741e:	4911      	ldr	r1, [pc, #68]	@ (8007464 <_dtoa_r+0x5c4>)
 8007420:	2000      	movs	r0, #0
 8007422:	f7f8 ff59 	bl	80002d8 <__aeabi_dsub>
 8007426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800742a:	f7f9 fb7f 	bl	8000b2c <__aeabi_dcmplt>
 800742e:	2800      	cmp	r0, #0
 8007430:	f040 8095 	bne.w	800755e <_dtoa_r+0x6be>
 8007434:	42a6      	cmp	r6, r4
 8007436:	f43f af50 	beq.w	80072da <_dtoa_r+0x43a>
 800743a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800743e:	4b0a      	ldr	r3, [pc, #40]	@ (8007468 <_dtoa_r+0x5c8>)
 8007440:	2200      	movs	r2, #0
 8007442:	f7f9 f901 	bl	8000648 <__aeabi_dmul>
 8007446:	4b08      	ldr	r3, [pc, #32]	@ (8007468 <_dtoa_r+0x5c8>)
 8007448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800744c:	2200      	movs	r2, #0
 800744e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007452:	f7f9 f8f9 	bl	8000648 <__aeabi_dmul>
 8007456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800745a:	e7c4      	b.n	80073e6 <_dtoa_r+0x546>
 800745c:	0800a5f0 	.word	0x0800a5f0
 8007460:	0800a5c8 	.word	0x0800a5c8
 8007464:	3ff00000 	.word	0x3ff00000
 8007468:	40240000 	.word	0x40240000
 800746c:	401c0000 	.word	0x401c0000
 8007470:	40140000 	.word	0x40140000
 8007474:	3fe00000 	.word	0x3fe00000
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	f7f9 f8e4 	bl	8000648 <__aeabi_dmul>
 8007480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007484:	9415      	str	r4, [sp, #84]	@ 0x54
 8007486:	4656      	mov	r6, sl
 8007488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748c:	f7f9 fb8c 	bl	8000ba8 <__aeabi_d2iz>
 8007490:	4605      	mov	r5, r0
 8007492:	f7f9 f86f 	bl	8000574 <__aeabi_i2d>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749e:	f7f8 ff1b 	bl	80002d8 <__aeabi_dsub>
 80074a2:	3530      	adds	r5, #48	@ 0x30
 80074a4:	f806 5b01 	strb.w	r5, [r6], #1
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	42a6      	cmp	r6, r4
 80074ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	d124      	bne.n	8007502 <_dtoa_r+0x662>
 80074b8:	4bac      	ldr	r3, [pc, #688]	@ (800776c <_dtoa_r+0x8cc>)
 80074ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074be:	f7f8 ff0d 	bl	80002dc <__adddf3>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ca:	f7f9 fb4d 	bl	8000b68 <__aeabi_dcmpgt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d145      	bne.n	800755e <_dtoa_r+0x6be>
 80074d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074d6:	49a5      	ldr	r1, [pc, #660]	@ (800776c <_dtoa_r+0x8cc>)
 80074d8:	2000      	movs	r0, #0
 80074da:	f7f8 fefd 	bl	80002d8 <__aeabi_dsub>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e6:	f7f9 fb21 	bl	8000b2c <__aeabi_dcmplt>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f aef5 	beq.w	80072da <_dtoa_r+0x43a>
 80074f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80074f2:	1e73      	subs	r3, r6, #1
 80074f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80074f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074fa:	2b30      	cmp	r3, #48	@ 0x30
 80074fc:	d0f8      	beq.n	80074f0 <_dtoa_r+0x650>
 80074fe:	9f04      	ldr	r7, [sp, #16]
 8007500:	e73e      	b.n	8007380 <_dtoa_r+0x4e0>
 8007502:	4b9b      	ldr	r3, [pc, #620]	@ (8007770 <_dtoa_r+0x8d0>)
 8007504:	f7f9 f8a0 	bl	8000648 <__aeabi_dmul>
 8007508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800750c:	e7bc      	b.n	8007488 <_dtoa_r+0x5e8>
 800750e:	d10c      	bne.n	800752a <_dtoa_r+0x68a>
 8007510:	4b98      	ldr	r3, [pc, #608]	@ (8007774 <_dtoa_r+0x8d4>)
 8007512:	2200      	movs	r2, #0
 8007514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007518:	f7f9 f896 	bl	8000648 <__aeabi_dmul>
 800751c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007520:	f7f9 fb18 	bl	8000b54 <__aeabi_dcmpge>
 8007524:	2800      	cmp	r0, #0
 8007526:	f000 8157 	beq.w	80077d8 <_dtoa_r+0x938>
 800752a:	2400      	movs	r4, #0
 800752c:	4625      	mov	r5, r4
 800752e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007530:	43db      	mvns	r3, r3
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	4656      	mov	r6, sl
 8007536:	2700      	movs	r7, #0
 8007538:	4621      	mov	r1, r4
 800753a:	4658      	mov	r0, fp
 800753c:	f000 fbb4 	bl	8007ca8 <_Bfree>
 8007540:	2d00      	cmp	r5, #0
 8007542:	d0dc      	beq.n	80074fe <_dtoa_r+0x65e>
 8007544:	b12f      	cbz	r7, 8007552 <_dtoa_r+0x6b2>
 8007546:	42af      	cmp	r7, r5
 8007548:	d003      	beq.n	8007552 <_dtoa_r+0x6b2>
 800754a:	4639      	mov	r1, r7
 800754c:	4658      	mov	r0, fp
 800754e:	f000 fbab 	bl	8007ca8 <_Bfree>
 8007552:	4629      	mov	r1, r5
 8007554:	4658      	mov	r0, fp
 8007556:	f000 fba7 	bl	8007ca8 <_Bfree>
 800755a:	e7d0      	b.n	80074fe <_dtoa_r+0x65e>
 800755c:	9704      	str	r7, [sp, #16]
 800755e:	4633      	mov	r3, r6
 8007560:	461e      	mov	r6, r3
 8007562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007566:	2a39      	cmp	r2, #57	@ 0x39
 8007568:	d107      	bne.n	800757a <_dtoa_r+0x6da>
 800756a:	459a      	cmp	sl, r3
 800756c:	d1f8      	bne.n	8007560 <_dtoa_r+0x6c0>
 800756e:	9a04      	ldr	r2, [sp, #16]
 8007570:	3201      	adds	r2, #1
 8007572:	9204      	str	r2, [sp, #16]
 8007574:	2230      	movs	r2, #48	@ 0x30
 8007576:	f88a 2000 	strb.w	r2, [sl]
 800757a:	781a      	ldrb	r2, [r3, #0]
 800757c:	3201      	adds	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e7bd      	b.n	80074fe <_dtoa_r+0x65e>
 8007582:	4b7b      	ldr	r3, [pc, #492]	@ (8007770 <_dtoa_r+0x8d0>)
 8007584:	2200      	movs	r2, #0
 8007586:	f7f9 f85f 	bl	8000648 <__aeabi_dmul>
 800758a:	2200      	movs	r2, #0
 800758c:	2300      	movs	r3, #0
 800758e:	4604      	mov	r4, r0
 8007590:	460d      	mov	r5, r1
 8007592:	f7f9 fac1 	bl	8000b18 <__aeabi_dcmpeq>
 8007596:	2800      	cmp	r0, #0
 8007598:	f43f aebb 	beq.w	8007312 <_dtoa_r+0x472>
 800759c:	e6f0      	b.n	8007380 <_dtoa_r+0x4e0>
 800759e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80075a0:	2a00      	cmp	r2, #0
 80075a2:	f000 80db 	beq.w	800775c <_dtoa_r+0x8bc>
 80075a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a8:	2a01      	cmp	r2, #1
 80075aa:	f300 80bf 	bgt.w	800772c <_dtoa_r+0x88c>
 80075ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	f000 80b7 	beq.w	8007724 <_dtoa_r+0x884>
 80075b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80075ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075bc:	4646      	mov	r6, r8
 80075be:	9a08      	ldr	r2, [sp, #32]
 80075c0:	2101      	movs	r1, #1
 80075c2:	441a      	add	r2, r3
 80075c4:	4658      	mov	r0, fp
 80075c6:	4498      	add	r8, r3
 80075c8:	9208      	str	r2, [sp, #32]
 80075ca:	f000 fc6b 	bl	8007ea4 <__i2b>
 80075ce:	4605      	mov	r5, r0
 80075d0:	b15e      	cbz	r6, 80075ea <_dtoa_r+0x74a>
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dd08      	ble.n	80075ea <_dtoa_r+0x74a>
 80075d8:	42b3      	cmp	r3, r6
 80075da:	9a08      	ldr	r2, [sp, #32]
 80075dc:	bfa8      	it	ge
 80075de:	4633      	movge	r3, r6
 80075e0:	eba8 0803 	sub.w	r8, r8, r3
 80075e4:	1af6      	subs	r6, r6, r3
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	9308      	str	r3, [sp, #32]
 80075ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ec:	b1f3      	cbz	r3, 800762c <_dtoa_r+0x78c>
 80075ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 80b7 	beq.w	8007764 <_dtoa_r+0x8c4>
 80075f6:	b18c      	cbz	r4, 800761c <_dtoa_r+0x77c>
 80075f8:	4629      	mov	r1, r5
 80075fa:	4622      	mov	r2, r4
 80075fc:	4658      	mov	r0, fp
 80075fe:	f000 fd11 	bl	8008024 <__pow5mult>
 8007602:	464a      	mov	r2, r9
 8007604:	4601      	mov	r1, r0
 8007606:	4605      	mov	r5, r0
 8007608:	4658      	mov	r0, fp
 800760a:	f000 fc61 	bl	8007ed0 <__multiply>
 800760e:	4649      	mov	r1, r9
 8007610:	9004      	str	r0, [sp, #16]
 8007612:	4658      	mov	r0, fp
 8007614:	f000 fb48 	bl	8007ca8 <_Bfree>
 8007618:	9b04      	ldr	r3, [sp, #16]
 800761a:	4699      	mov	r9, r3
 800761c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800761e:	1b1a      	subs	r2, r3, r4
 8007620:	d004      	beq.n	800762c <_dtoa_r+0x78c>
 8007622:	4649      	mov	r1, r9
 8007624:	4658      	mov	r0, fp
 8007626:	f000 fcfd 	bl	8008024 <__pow5mult>
 800762a:	4681      	mov	r9, r0
 800762c:	2101      	movs	r1, #1
 800762e:	4658      	mov	r0, fp
 8007630:	f000 fc38 	bl	8007ea4 <__i2b>
 8007634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007636:	4604      	mov	r4, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 81cf 	beq.w	80079dc <_dtoa_r+0xb3c>
 800763e:	461a      	mov	r2, r3
 8007640:	4601      	mov	r1, r0
 8007642:	4658      	mov	r0, fp
 8007644:	f000 fcee 	bl	8008024 <__pow5mult>
 8007648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764a:	2b01      	cmp	r3, #1
 800764c:	4604      	mov	r4, r0
 800764e:	f300 8095 	bgt.w	800777c <_dtoa_r+0x8dc>
 8007652:	9b02      	ldr	r3, [sp, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f040 8087 	bne.w	8007768 <_dtoa_r+0x8c8>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007660:	2b00      	cmp	r3, #0
 8007662:	f040 8089 	bne.w	8007778 <_dtoa_r+0x8d8>
 8007666:	9b03      	ldr	r3, [sp, #12]
 8007668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800766c:	0d1b      	lsrs	r3, r3, #20
 800766e:	051b      	lsls	r3, r3, #20
 8007670:	b12b      	cbz	r3, 800767e <_dtoa_r+0x7de>
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	3301      	adds	r3, #1
 8007676:	9308      	str	r3, [sp, #32]
 8007678:	f108 0801 	add.w	r8, r8, #1
 800767c:	2301      	movs	r3, #1
 800767e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 81b0 	beq.w	80079e8 <_dtoa_r+0xb48>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800768e:	6918      	ldr	r0, [r3, #16]
 8007690:	f000 fbbc 	bl	8007e0c <__hi0bits>
 8007694:	f1c0 0020 	rsb	r0, r0, #32
 8007698:	9b08      	ldr	r3, [sp, #32]
 800769a:	4418      	add	r0, r3
 800769c:	f010 001f 	ands.w	r0, r0, #31
 80076a0:	d077      	beq.n	8007792 <_dtoa_r+0x8f2>
 80076a2:	f1c0 0320 	rsb	r3, r0, #32
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	dd6b      	ble.n	8007782 <_dtoa_r+0x8e2>
 80076aa:	9b08      	ldr	r3, [sp, #32]
 80076ac:	f1c0 001c 	rsb	r0, r0, #28
 80076b0:	4403      	add	r3, r0
 80076b2:	4480      	add	r8, r0
 80076b4:	4406      	add	r6, r0
 80076b6:	9308      	str	r3, [sp, #32]
 80076b8:	f1b8 0f00 	cmp.w	r8, #0
 80076bc:	dd05      	ble.n	80076ca <_dtoa_r+0x82a>
 80076be:	4649      	mov	r1, r9
 80076c0:	4642      	mov	r2, r8
 80076c2:	4658      	mov	r0, fp
 80076c4:	f000 fd08 	bl	80080d8 <__lshift>
 80076c8:	4681      	mov	r9, r0
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dd05      	ble.n	80076dc <_dtoa_r+0x83c>
 80076d0:	4621      	mov	r1, r4
 80076d2:	461a      	mov	r2, r3
 80076d4:	4658      	mov	r0, fp
 80076d6:	f000 fcff 	bl	80080d8 <__lshift>
 80076da:	4604      	mov	r4, r0
 80076dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d059      	beq.n	8007796 <_dtoa_r+0x8f6>
 80076e2:	4621      	mov	r1, r4
 80076e4:	4648      	mov	r0, r9
 80076e6:	f000 fd63 	bl	80081b0 <__mcmp>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	da53      	bge.n	8007796 <_dtoa_r+0x8f6>
 80076ee:	1e7b      	subs	r3, r7, #1
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	4649      	mov	r1, r9
 80076f4:	2300      	movs	r3, #0
 80076f6:	220a      	movs	r2, #10
 80076f8:	4658      	mov	r0, fp
 80076fa:	f000 faf7 	bl	8007cec <__multadd>
 80076fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007700:	4681      	mov	r9, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 8172 	beq.w	80079ec <_dtoa_r+0xb4c>
 8007708:	2300      	movs	r3, #0
 800770a:	4629      	mov	r1, r5
 800770c:	220a      	movs	r2, #10
 800770e:	4658      	mov	r0, fp
 8007710:	f000 faec 	bl	8007cec <__multadd>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	4605      	mov	r5, r0
 800771a:	dc67      	bgt.n	80077ec <_dtoa_r+0x94c>
 800771c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771e:	2b02      	cmp	r3, #2
 8007720:	dc41      	bgt.n	80077a6 <_dtoa_r+0x906>
 8007722:	e063      	b.n	80077ec <_dtoa_r+0x94c>
 8007724:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800772a:	e746      	b.n	80075ba <_dtoa_r+0x71a>
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	1e5c      	subs	r4, r3, #1
 8007730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007732:	42a3      	cmp	r3, r4
 8007734:	bfbf      	itttt	lt
 8007736:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007738:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800773a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800773c:	1ae3      	sublt	r3, r4, r3
 800773e:	bfb4      	ite	lt
 8007740:	18d2      	addlt	r2, r2, r3
 8007742:	1b1c      	subge	r4, r3, r4
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	bfbc      	itt	lt
 8007748:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800774a:	2400      	movlt	r4, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	bfb5      	itete	lt
 8007750:	eba8 0603 	sublt.w	r6, r8, r3
 8007754:	9b07      	ldrge	r3, [sp, #28]
 8007756:	2300      	movlt	r3, #0
 8007758:	4646      	movge	r6, r8
 800775a:	e730      	b.n	80075be <_dtoa_r+0x71e>
 800775c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800775e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007760:	4646      	mov	r6, r8
 8007762:	e735      	b.n	80075d0 <_dtoa_r+0x730>
 8007764:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007766:	e75c      	b.n	8007622 <_dtoa_r+0x782>
 8007768:	2300      	movs	r3, #0
 800776a:	e788      	b.n	800767e <_dtoa_r+0x7de>
 800776c:	3fe00000 	.word	0x3fe00000
 8007770:	40240000 	.word	0x40240000
 8007774:	40140000 	.word	0x40140000
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	e780      	b.n	800767e <_dtoa_r+0x7de>
 800777c:	2300      	movs	r3, #0
 800777e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007780:	e782      	b.n	8007688 <_dtoa_r+0x7e8>
 8007782:	d099      	beq.n	80076b8 <_dtoa_r+0x818>
 8007784:	9a08      	ldr	r2, [sp, #32]
 8007786:	331c      	adds	r3, #28
 8007788:	441a      	add	r2, r3
 800778a:	4498      	add	r8, r3
 800778c:	441e      	add	r6, r3
 800778e:	9208      	str	r2, [sp, #32]
 8007790:	e792      	b.n	80076b8 <_dtoa_r+0x818>
 8007792:	4603      	mov	r3, r0
 8007794:	e7f6      	b.n	8007784 <_dtoa_r+0x8e4>
 8007796:	9b07      	ldr	r3, [sp, #28]
 8007798:	9704      	str	r7, [sp, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dc20      	bgt.n	80077e0 <_dtoa_r+0x940>
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	dd1e      	ble.n	80077e4 <_dtoa_r+0x944>
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f47f aec0 	bne.w	800752e <_dtoa_r+0x68e>
 80077ae:	4621      	mov	r1, r4
 80077b0:	2205      	movs	r2, #5
 80077b2:	4658      	mov	r0, fp
 80077b4:	f000 fa9a 	bl	8007cec <__multadd>
 80077b8:	4601      	mov	r1, r0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4648      	mov	r0, r9
 80077be:	f000 fcf7 	bl	80081b0 <__mcmp>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f77f aeb3 	ble.w	800752e <_dtoa_r+0x68e>
 80077c8:	4656      	mov	r6, sl
 80077ca:	2331      	movs	r3, #49	@ 0x31
 80077cc:	f806 3b01 	strb.w	r3, [r6], #1
 80077d0:	9b04      	ldr	r3, [sp, #16]
 80077d2:	3301      	adds	r3, #1
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	e6ae      	b.n	8007536 <_dtoa_r+0x696>
 80077d8:	9c07      	ldr	r4, [sp, #28]
 80077da:	9704      	str	r7, [sp, #16]
 80077dc:	4625      	mov	r5, r4
 80077de:	e7f3      	b.n	80077c8 <_dtoa_r+0x928>
 80077e0:	9b07      	ldr	r3, [sp, #28]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8104 	beq.w	80079f4 <_dtoa_r+0xb54>
 80077ec:	2e00      	cmp	r6, #0
 80077ee:	dd05      	ble.n	80077fc <_dtoa_r+0x95c>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4632      	mov	r2, r6
 80077f4:	4658      	mov	r0, fp
 80077f6:	f000 fc6f 	bl	80080d8 <__lshift>
 80077fa:	4605      	mov	r5, r0
 80077fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d05a      	beq.n	80078b8 <_dtoa_r+0xa18>
 8007802:	6869      	ldr	r1, [r5, #4]
 8007804:	4658      	mov	r0, fp
 8007806:	f000 fa0f 	bl	8007c28 <_Balloc>
 800780a:	4606      	mov	r6, r0
 800780c:	b928      	cbnz	r0, 800781a <_dtoa_r+0x97a>
 800780e:	4b84      	ldr	r3, [pc, #528]	@ (8007a20 <_dtoa_r+0xb80>)
 8007810:	4602      	mov	r2, r0
 8007812:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007816:	f7ff bb5a 	b.w	8006ece <_dtoa_r+0x2e>
 800781a:	692a      	ldr	r2, [r5, #16]
 800781c:	3202      	adds	r2, #2
 800781e:	0092      	lsls	r2, r2, #2
 8007820:	f105 010c 	add.w	r1, r5, #12
 8007824:	300c      	adds	r0, #12
 8007826:	f001 ff75 	bl	8009714 <memcpy>
 800782a:	2201      	movs	r2, #1
 800782c:	4631      	mov	r1, r6
 800782e:	4658      	mov	r0, fp
 8007830:	f000 fc52 	bl	80080d8 <__lshift>
 8007834:	f10a 0301 	add.w	r3, sl, #1
 8007838:	9307      	str	r3, [sp, #28]
 800783a:	9b00      	ldr	r3, [sp, #0]
 800783c:	4453      	add	r3, sl
 800783e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007840:	9b02      	ldr	r3, [sp, #8]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	462f      	mov	r7, r5
 8007848:	930a      	str	r3, [sp, #40]	@ 0x28
 800784a:	4605      	mov	r5, r0
 800784c:	9b07      	ldr	r3, [sp, #28]
 800784e:	4621      	mov	r1, r4
 8007850:	3b01      	subs	r3, #1
 8007852:	4648      	mov	r0, r9
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	f7ff fa9b 	bl	8006d90 <quorem>
 800785a:	4639      	mov	r1, r7
 800785c:	9002      	str	r0, [sp, #8]
 800785e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007862:	4648      	mov	r0, r9
 8007864:	f000 fca4 	bl	80081b0 <__mcmp>
 8007868:	462a      	mov	r2, r5
 800786a:	9008      	str	r0, [sp, #32]
 800786c:	4621      	mov	r1, r4
 800786e:	4658      	mov	r0, fp
 8007870:	f000 fcba 	bl	80081e8 <__mdiff>
 8007874:	68c2      	ldr	r2, [r0, #12]
 8007876:	4606      	mov	r6, r0
 8007878:	bb02      	cbnz	r2, 80078bc <_dtoa_r+0xa1c>
 800787a:	4601      	mov	r1, r0
 800787c:	4648      	mov	r0, r9
 800787e:	f000 fc97 	bl	80081b0 <__mcmp>
 8007882:	4602      	mov	r2, r0
 8007884:	4631      	mov	r1, r6
 8007886:	4658      	mov	r0, fp
 8007888:	920e      	str	r2, [sp, #56]	@ 0x38
 800788a:	f000 fa0d 	bl	8007ca8 <_Bfree>
 800788e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007892:	9e07      	ldr	r6, [sp, #28]
 8007894:	ea43 0102 	orr.w	r1, r3, r2
 8007898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800789a:	4319      	orrs	r1, r3
 800789c:	d110      	bne.n	80078c0 <_dtoa_r+0xa20>
 800789e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078a2:	d029      	beq.n	80078f8 <_dtoa_r+0xa58>
 80078a4:	9b08      	ldr	r3, [sp, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dd02      	ble.n	80078b0 <_dtoa_r+0xa10>
 80078aa:	9b02      	ldr	r3, [sp, #8]
 80078ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80078b0:	9b00      	ldr	r3, [sp, #0]
 80078b2:	f883 8000 	strb.w	r8, [r3]
 80078b6:	e63f      	b.n	8007538 <_dtoa_r+0x698>
 80078b8:	4628      	mov	r0, r5
 80078ba:	e7bb      	b.n	8007834 <_dtoa_r+0x994>
 80078bc:	2201      	movs	r2, #1
 80078be:	e7e1      	b.n	8007884 <_dtoa_r+0x9e4>
 80078c0:	9b08      	ldr	r3, [sp, #32]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	db04      	blt.n	80078d0 <_dtoa_r+0xa30>
 80078c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078c8:	430b      	orrs	r3, r1
 80078ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078cc:	430b      	orrs	r3, r1
 80078ce:	d120      	bne.n	8007912 <_dtoa_r+0xa72>
 80078d0:	2a00      	cmp	r2, #0
 80078d2:	dded      	ble.n	80078b0 <_dtoa_r+0xa10>
 80078d4:	4649      	mov	r1, r9
 80078d6:	2201      	movs	r2, #1
 80078d8:	4658      	mov	r0, fp
 80078da:	f000 fbfd 	bl	80080d8 <__lshift>
 80078de:	4621      	mov	r1, r4
 80078e0:	4681      	mov	r9, r0
 80078e2:	f000 fc65 	bl	80081b0 <__mcmp>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	dc03      	bgt.n	80078f2 <_dtoa_r+0xa52>
 80078ea:	d1e1      	bne.n	80078b0 <_dtoa_r+0xa10>
 80078ec:	f018 0f01 	tst.w	r8, #1
 80078f0:	d0de      	beq.n	80078b0 <_dtoa_r+0xa10>
 80078f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078f6:	d1d8      	bne.n	80078aa <_dtoa_r+0xa0a>
 80078f8:	9a00      	ldr	r2, [sp, #0]
 80078fa:	2339      	movs	r3, #57	@ 0x39
 80078fc:	7013      	strb	r3, [r2, #0]
 80078fe:	4633      	mov	r3, r6
 8007900:	461e      	mov	r6, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007908:	2a39      	cmp	r2, #57	@ 0x39
 800790a:	d052      	beq.n	80079b2 <_dtoa_r+0xb12>
 800790c:	3201      	adds	r2, #1
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e612      	b.n	8007538 <_dtoa_r+0x698>
 8007912:	2a00      	cmp	r2, #0
 8007914:	dd07      	ble.n	8007926 <_dtoa_r+0xa86>
 8007916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800791a:	d0ed      	beq.n	80078f8 <_dtoa_r+0xa58>
 800791c:	9a00      	ldr	r2, [sp, #0]
 800791e:	f108 0301 	add.w	r3, r8, #1
 8007922:	7013      	strb	r3, [r2, #0]
 8007924:	e608      	b.n	8007538 <_dtoa_r+0x698>
 8007926:	9b07      	ldr	r3, [sp, #28]
 8007928:	9a07      	ldr	r2, [sp, #28]
 800792a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800792e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007930:	4293      	cmp	r3, r2
 8007932:	d028      	beq.n	8007986 <_dtoa_r+0xae6>
 8007934:	4649      	mov	r1, r9
 8007936:	2300      	movs	r3, #0
 8007938:	220a      	movs	r2, #10
 800793a:	4658      	mov	r0, fp
 800793c:	f000 f9d6 	bl	8007cec <__multadd>
 8007940:	42af      	cmp	r7, r5
 8007942:	4681      	mov	r9, r0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	f04f 020a 	mov.w	r2, #10
 800794c:	4639      	mov	r1, r7
 800794e:	4658      	mov	r0, fp
 8007950:	d107      	bne.n	8007962 <_dtoa_r+0xac2>
 8007952:	f000 f9cb 	bl	8007cec <__multadd>
 8007956:	4607      	mov	r7, r0
 8007958:	4605      	mov	r5, r0
 800795a:	9b07      	ldr	r3, [sp, #28]
 800795c:	3301      	adds	r3, #1
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	e774      	b.n	800784c <_dtoa_r+0x9ac>
 8007962:	f000 f9c3 	bl	8007cec <__multadd>
 8007966:	4629      	mov	r1, r5
 8007968:	4607      	mov	r7, r0
 800796a:	2300      	movs	r3, #0
 800796c:	220a      	movs	r2, #10
 800796e:	4658      	mov	r0, fp
 8007970:	f000 f9bc 	bl	8007cec <__multadd>
 8007974:	4605      	mov	r5, r0
 8007976:	e7f0      	b.n	800795a <_dtoa_r+0xaba>
 8007978:	9b00      	ldr	r3, [sp, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	bfcc      	ite	gt
 800797e:	461e      	movgt	r6, r3
 8007980:	2601      	movle	r6, #1
 8007982:	4456      	add	r6, sl
 8007984:	2700      	movs	r7, #0
 8007986:	4649      	mov	r1, r9
 8007988:	2201      	movs	r2, #1
 800798a:	4658      	mov	r0, fp
 800798c:	f000 fba4 	bl	80080d8 <__lshift>
 8007990:	4621      	mov	r1, r4
 8007992:	4681      	mov	r9, r0
 8007994:	f000 fc0c 	bl	80081b0 <__mcmp>
 8007998:	2800      	cmp	r0, #0
 800799a:	dcb0      	bgt.n	80078fe <_dtoa_r+0xa5e>
 800799c:	d102      	bne.n	80079a4 <_dtoa_r+0xb04>
 800799e:	f018 0f01 	tst.w	r8, #1
 80079a2:	d1ac      	bne.n	80078fe <_dtoa_r+0xa5e>
 80079a4:	4633      	mov	r3, r6
 80079a6:	461e      	mov	r6, r3
 80079a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ac:	2a30      	cmp	r2, #48	@ 0x30
 80079ae:	d0fa      	beq.n	80079a6 <_dtoa_r+0xb06>
 80079b0:	e5c2      	b.n	8007538 <_dtoa_r+0x698>
 80079b2:	459a      	cmp	sl, r3
 80079b4:	d1a4      	bne.n	8007900 <_dtoa_r+0xa60>
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	3301      	adds	r3, #1
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	2331      	movs	r3, #49	@ 0x31
 80079be:	f88a 3000 	strb.w	r3, [sl]
 80079c2:	e5b9      	b.n	8007538 <_dtoa_r+0x698>
 80079c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a24 <_dtoa_r+0xb84>
 80079ca:	b11b      	cbz	r3, 80079d4 <_dtoa_r+0xb34>
 80079cc:	f10a 0308 	add.w	r3, sl, #8
 80079d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4650      	mov	r0, sl
 80079d6:	b019      	add	sp, #100	@ 0x64
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079de:	2b01      	cmp	r3, #1
 80079e0:	f77f ae37 	ble.w	8007652 <_dtoa_r+0x7b2>
 80079e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079e8:	2001      	movs	r0, #1
 80079ea:	e655      	b.n	8007698 <_dtoa_r+0x7f8>
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f77f aed6 	ble.w	80077a0 <_dtoa_r+0x900>
 80079f4:	4656      	mov	r6, sl
 80079f6:	4621      	mov	r1, r4
 80079f8:	4648      	mov	r0, r9
 80079fa:	f7ff f9c9 	bl	8006d90 <quorem>
 80079fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a02:	f806 8b01 	strb.w	r8, [r6], #1
 8007a06:	9b00      	ldr	r3, [sp, #0]
 8007a08:	eba6 020a 	sub.w	r2, r6, sl
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	ddb3      	ble.n	8007978 <_dtoa_r+0xad8>
 8007a10:	4649      	mov	r1, r9
 8007a12:	2300      	movs	r3, #0
 8007a14:	220a      	movs	r2, #10
 8007a16:	4658      	mov	r0, fp
 8007a18:	f000 f968 	bl	8007cec <__multadd>
 8007a1c:	4681      	mov	r9, r0
 8007a1e:	e7ea      	b.n	80079f6 <_dtoa_r+0xb56>
 8007a20:	0800a54d 	.word	0x0800a54d
 8007a24:	0800a4d1 	.word	0x0800a4d1

08007a28 <_free_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	d041      	beq.n	8007ab4 <_free_r+0x8c>
 8007a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a34:	1f0c      	subs	r4, r1, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bfb8      	it	lt
 8007a3a:	18e4      	addlt	r4, r4, r3
 8007a3c:	f000 f8e8 	bl	8007c10 <__malloc_lock>
 8007a40:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab8 <_free_r+0x90>)
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	b933      	cbnz	r3, 8007a54 <_free_r+0x2c>
 8007a46:	6063      	str	r3, [r4, #4]
 8007a48:	6014      	str	r4, [r2, #0]
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a50:	f000 b8e4 	b.w	8007c1c <__malloc_unlock>
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	d908      	bls.n	8007a6a <_free_r+0x42>
 8007a58:	6820      	ldr	r0, [r4, #0]
 8007a5a:	1821      	adds	r1, r4, r0
 8007a5c:	428b      	cmp	r3, r1
 8007a5e:	bf01      	itttt	eq
 8007a60:	6819      	ldreq	r1, [r3, #0]
 8007a62:	685b      	ldreq	r3, [r3, #4]
 8007a64:	1809      	addeq	r1, r1, r0
 8007a66:	6021      	streq	r1, [r4, #0]
 8007a68:	e7ed      	b.n	8007a46 <_free_r+0x1e>
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b10b      	cbz	r3, 8007a74 <_free_r+0x4c>
 8007a70:	42a3      	cmp	r3, r4
 8007a72:	d9fa      	bls.n	8007a6a <_free_r+0x42>
 8007a74:	6811      	ldr	r1, [r2, #0]
 8007a76:	1850      	adds	r0, r2, r1
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	d10b      	bne.n	8007a94 <_free_r+0x6c>
 8007a7c:	6820      	ldr	r0, [r4, #0]
 8007a7e:	4401      	add	r1, r0
 8007a80:	1850      	adds	r0, r2, r1
 8007a82:	4283      	cmp	r3, r0
 8007a84:	6011      	str	r1, [r2, #0]
 8007a86:	d1e0      	bne.n	8007a4a <_free_r+0x22>
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	6053      	str	r3, [r2, #4]
 8007a8e:	4408      	add	r0, r1
 8007a90:	6010      	str	r0, [r2, #0]
 8007a92:	e7da      	b.n	8007a4a <_free_r+0x22>
 8007a94:	d902      	bls.n	8007a9c <_free_r+0x74>
 8007a96:	230c      	movs	r3, #12
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	e7d6      	b.n	8007a4a <_free_r+0x22>
 8007a9c:	6820      	ldr	r0, [r4, #0]
 8007a9e:	1821      	adds	r1, r4, r0
 8007aa0:	428b      	cmp	r3, r1
 8007aa2:	bf04      	itt	eq
 8007aa4:	6819      	ldreq	r1, [r3, #0]
 8007aa6:	685b      	ldreq	r3, [r3, #4]
 8007aa8:	6063      	str	r3, [r4, #4]
 8007aaa:	bf04      	itt	eq
 8007aac:	1809      	addeq	r1, r1, r0
 8007aae:	6021      	streq	r1, [r4, #0]
 8007ab0:	6054      	str	r4, [r2, #4]
 8007ab2:	e7ca      	b.n	8007a4a <_free_r+0x22>
 8007ab4:	bd38      	pop	{r3, r4, r5, pc}
 8007ab6:	bf00      	nop
 8007ab8:	200004cc 	.word	0x200004cc

08007abc <malloc>:
 8007abc:	4b02      	ldr	r3, [pc, #8]	@ (8007ac8 <malloc+0xc>)
 8007abe:	4601      	mov	r1, r0
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	f000 b825 	b.w	8007b10 <_malloc_r>
 8007ac6:	bf00      	nop
 8007ac8:	20000030 	.word	0x20000030

08007acc <sbrk_aligned>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4e0f      	ldr	r6, [pc, #60]	@ (8007b0c <sbrk_aligned+0x40>)
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	6831      	ldr	r1, [r6, #0]
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	b911      	cbnz	r1, 8007ade <sbrk_aligned+0x12>
 8007ad8:	f001 fe0c 	bl	80096f4 <_sbrk_r>
 8007adc:	6030      	str	r0, [r6, #0]
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f001 fe07 	bl	80096f4 <_sbrk_r>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d103      	bne.n	8007af2 <sbrk_aligned+0x26>
 8007aea:	f04f 34ff 	mov.w	r4, #4294967295
 8007aee:	4620      	mov	r0, r4
 8007af0:	bd70      	pop	{r4, r5, r6, pc}
 8007af2:	1cc4      	adds	r4, r0, #3
 8007af4:	f024 0403 	bic.w	r4, r4, #3
 8007af8:	42a0      	cmp	r0, r4
 8007afa:	d0f8      	beq.n	8007aee <sbrk_aligned+0x22>
 8007afc:	1a21      	subs	r1, r4, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f001 fdf8 	bl	80096f4 <_sbrk_r>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d1f2      	bne.n	8007aee <sbrk_aligned+0x22>
 8007b08:	e7ef      	b.n	8007aea <sbrk_aligned+0x1e>
 8007b0a:	bf00      	nop
 8007b0c:	200004c8 	.word	0x200004c8

08007b10 <_malloc_r>:
 8007b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b14:	1ccd      	adds	r5, r1, #3
 8007b16:	f025 0503 	bic.w	r5, r5, #3
 8007b1a:	3508      	adds	r5, #8
 8007b1c:	2d0c      	cmp	r5, #12
 8007b1e:	bf38      	it	cc
 8007b20:	250c      	movcc	r5, #12
 8007b22:	2d00      	cmp	r5, #0
 8007b24:	4606      	mov	r6, r0
 8007b26:	db01      	blt.n	8007b2c <_malloc_r+0x1c>
 8007b28:	42a9      	cmp	r1, r5
 8007b2a:	d904      	bls.n	8007b36 <_malloc_r+0x26>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	6033      	str	r3, [r6, #0]
 8007b30:	2000      	movs	r0, #0
 8007b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c0c <_malloc_r+0xfc>
 8007b3a:	f000 f869 	bl	8007c10 <__malloc_lock>
 8007b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b42:	461c      	mov	r4, r3
 8007b44:	bb44      	cbnz	r4, 8007b98 <_malloc_r+0x88>
 8007b46:	4629      	mov	r1, r5
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7ff ffbf 	bl	8007acc <sbrk_aligned>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	4604      	mov	r4, r0
 8007b52:	d158      	bne.n	8007c06 <_malloc_r+0xf6>
 8007b54:	f8d8 4000 	ldr.w	r4, [r8]
 8007b58:	4627      	mov	r7, r4
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	d143      	bne.n	8007be6 <_malloc_r+0xd6>
 8007b5e:	2c00      	cmp	r4, #0
 8007b60:	d04b      	beq.n	8007bfa <_malloc_r+0xea>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	4639      	mov	r1, r7
 8007b66:	4630      	mov	r0, r6
 8007b68:	eb04 0903 	add.w	r9, r4, r3
 8007b6c:	f001 fdc2 	bl	80096f4 <_sbrk_r>
 8007b70:	4581      	cmp	r9, r0
 8007b72:	d142      	bne.n	8007bfa <_malloc_r+0xea>
 8007b74:	6821      	ldr	r1, [r4, #0]
 8007b76:	1a6d      	subs	r5, r5, r1
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ffa6 	bl	8007acc <sbrk_aligned>
 8007b80:	3001      	adds	r0, #1
 8007b82:	d03a      	beq.n	8007bfa <_malloc_r+0xea>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	442b      	add	r3, r5
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	bb62      	cbnz	r2, 8007bec <_malloc_r+0xdc>
 8007b92:	f8c8 7000 	str.w	r7, [r8]
 8007b96:	e00f      	b.n	8007bb8 <_malloc_r+0xa8>
 8007b98:	6822      	ldr	r2, [r4, #0]
 8007b9a:	1b52      	subs	r2, r2, r5
 8007b9c:	d420      	bmi.n	8007be0 <_malloc_r+0xd0>
 8007b9e:	2a0b      	cmp	r2, #11
 8007ba0:	d917      	bls.n	8007bd2 <_malloc_r+0xc2>
 8007ba2:	1961      	adds	r1, r4, r5
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	6025      	str	r5, [r4, #0]
 8007ba8:	bf18      	it	ne
 8007baa:	6059      	strne	r1, [r3, #4]
 8007bac:	6863      	ldr	r3, [r4, #4]
 8007bae:	bf08      	it	eq
 8007bb0:	f8c8 1000 	streq.w	r1, [r8]
 8007bb4:	5162      	str	r2, [r4, r5]
 8007bb6:	604b      	str	r3, [r1, #4]
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f000 f82f 	bl	8007c1c <__malloc_unlock>
 8007bbe:	f104 000b 	add.w	r0, r4, #11
 8007bc2:	1d23      	adds	r3, r4, #4
 8007bc4:	f020 0007 	bic.w	r0, r0, #7
 8007bc8:	1ac2      	subs	r2, r0, r3
 8007bca:	bf1c      	itt	ne
 8007bcc:	1a1b      	subne	r3, r3, r0
 8007bce:	50a3      	strne	r3, [r4, r2]
 8007bd0:	e7af      	b.n	8007b32 <_malloc_r+0x22>
 8007bd2:	6862      	ldr	r2, [r4, #4]
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	bf0c      	ite	eq
 8007bd8:	f8c8 2000 	streq.w	r2, [r8]
 8007bdc:	605a      	strne	r2, [r3, #4]
 8007bde:	e7eb      	b.n	8007bb8 <_malloc_r+0xa8>
 8007be0:	4623      	mov	r3, r4
 8007be2:	6864      	ldr	r4, [r4, #4]
 8007be4:	e7ae      	b.n	8007b44 <_malloc_r+0x34>
 8007be6:	463c      	mov	r4, r7
 8007be8:	687f      	ldr	r7, [r7, #4]
 8007bea:	e7b6      	b.n	8007b5a <_malloc_r+0x4a>
 8007bec:	461a      	mov	r2, r3
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d1fb      	bne.n	8007bec <_malloc_r+0xdc>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6053      	str	r3, [r2, #4]
 8007bf8:	e7de      	b.n	8007bb8 <_malloc_r+0xa8>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	6033      	str	r3, [r6, #0]
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f000 f80c 	bl	8007c1c <__malloc_unlock>
 8007c04:	e794      	b.n	8007b30 <_malloc_r+0x20>
 8007c06:	6005      	str	r5, [r0, #0]
 8007c08:	e7d6      	b.n	8007bb8 <_malloc_r+0xa8>
 8007c0a:	bf00      	nop
 8007c0c:	200004cc 	.word	0x200004cc

08007c10 <__malloc_lock>:
 8007c10:	4801      	ldr	r0, [pc, #4]	@ (8007c18 <__malloc_lock+0x8>)
 8007c12:	f7ff b8b4 	b.w	8006d7e <__retarget_lock_acquire_recursive>
 8007c16:	bf00      	nop
 8007c18:	200004c4 	.word	0x200004c4

08007c1c <__malloc_unlock>:
 8007c1c:	4801      	ldr	r0, [pc, #4]	@ (8007c24 <__malloc_unlock+0x8>)
 8007c1e:	f7ff b8af 	b.w	8006d80 <__retarget_lock_release_recursive>
 8007c22:	bf00      	nop
 8007c24:	200004c4 	.word	0x200004c4

08007c28 <_Balloc>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	69c6      	ldr	r6, [r0, #28]
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	b976      	cbnz	r6, 8007c50 <_Balloc+0x28>
 8007c32:	2010      	movs	r0, #16
 8007c34:	f7ff ff42 	bl	8007abc <malloc>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	61e0      	str	r0, [r4, #28]
 8007c3c:	b920      	cbnz	r0, 8007c48 <_Balloc+0x20>
 8007c3e:	4b18      	ldr	r3, [pc, #96]	@ (8007ca0 <_Balloc+0x78>)
 8007c40:	4818      	ldr	r0, [pc, #96]	@ (8007ca4 <_Balloc+0x7c>)
 8007c42:	216b      	movs	r1, #107	@ 0x6b
 8007c44:	f001 fd7c 	bl	8009740 <__assert_func>
 8007c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c4c:	6006      	str	r6, [r0, #0]
 8007c4e:	60c6      	str	r6, [r0, #12]
 8007c50:	69e6      	ldr	r6, [r4, #28]
 8007c52:	68f3      	ldr	r3, [r6, #12]
 8007c54:	b183      	cbz	r3, 8007c78 <_Balloc+0x50>
 8007c56:	69e3      	ldr	r3, [r4, #28]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c5e:	b9b8      	cbnz	r0, 8007c90 <_Balloc+0x68>
 8007c60:	2101      	movs	r1, #1
 8007c62:	fa01 f605 	lsl.w	r6, r1, r5
 8007c66:	1d72      	adds	r2, r6, #5
 8007c68:	0092      	lsls	r2, r2, #2
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f001 fd86 	bl	800977c <_calloc_r>
 8007c70:	b160      	cbz	r0, 8007c8c <_Balloc+0x64>
 8007c72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c76:	e00e      	b.n	8007c96 <_Balloc+0x6e>
 8007c78:	2221      	movs	r2, #33	@ 0x21
 8007c7a:	2104      	movs	r1, #4
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f001 fd7d 	bl	800977c <_calloc_r>
 8007c82:	69e3      	ldr	r3, [r4, #28]
 8007c84:	60f0      	str	r0, [r6, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e4      	bne.n	8007c56 <_Balloc+0x2e>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	6802      	ldr	r2, [r0, #0]
 8007c92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c96:	2300      	movs	r3, #0
 8007c98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c9c:	e7f7      	b.n	8007c8e <_Balloc+0x66>
 8007c9e:	bf00      	nop
 8007ca0:	0800a4de 	.word	0x0800a4de
 8007ca4:	0800a55e 	.word	0x0800a55e

08007ca8 <_Bfree>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	69c6      	ldr	r6, [r0, #28]
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	b976      	cbnz	r6, 8007cd0 <_Bfree+0x28>
 8007cb2:	2010      	movs	r0, #16
 8007cb4:	f7ff ff02 	bl	8007abc <malloc>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	61e8      	str	r0, [r5, #28]
 8007cbc:	b920      	cbnz	r0, 8007cc8 <_Bfree+0x20>
 8007cbe:	4b09      	ldr	r3, [pc, #36]	@ (8007ce4 <_Bfree+0x3c>)
 8007cc0:	4809      	ldr	r0, [pc, #36]	@ (8007ce8 <_Bfree+0x40>)
 8007cc2:	218f      	movs	r1, #143	@ 0x8f
 8007cc4:	f001 fd3c 	bl	8009740 <__assert_func>
 8007cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ccc:	6006      	str	r6, [r0, #0]
 8007cce:	60c6      	str	r6, [r0, #12]
 8007cd0:	b13c      	cbz	r4, 8007ce2 <_Bfree+0x3a>
 8007cd2:	69eb      	ldr	r3, [r5, #28]
 8007cd4:	6862      	ldr	r2, [r4, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cdc:	6021      	str	r1, [r4, #0]
 8007cde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	0800a4de 	.word	0x0800a4de
 8007ce8:	0800a55e 	.word	0x0800a55e

08007cec <__multadd>:
 8007cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf0:	690d      	ldr	r5, [r1, #16]
 8007cf2:	4607      	mov	r7, r0
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	461e      	mov	r6, r3
 8007cf8:	f101 0c14 	add.w	ip, r1, #20
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8007d02:	b299      	uxth	r1, r3
 8007d04:	fb02 6101 	mla	r1, r2, r1, r6
 8007d08:	0c1e      	lsrs	r6, r3, #16
 8007d0a:	0c0b      	lsrs	r3, r1, #16
 8007d0c:	fb02 3306 	mla	r3, r2, r6, r3
 8007d10:	b289      	uxth	r1, r1
 8007d12:	3001      	adds	r0, #1
 8007d14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d18:	4285      	cmp	r5, r0
 8007d1a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d22:	dcec      	bgt.n	8007cfe <__multadd+0x12>
 8007d24:	b30e      	cbz	r6, 8007d6a <__multadd+0x7e>
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	42ab      	cmp	r3, r5
 8007d2a:	dc19      	bgt.n	8007d60 <__multadd+0x74>
 8007d2c:	6861      	ldr	r1, [r4, #4]
 8007d2e:	4638      	mov	r0, r7
 8007d30:	3101      	adds	r1, #1
 8007d32:	f7ff ff79 	bl	8007c28 <_Balloc>
 8007d36:	4680      	mov	r8, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <__multadd+0x5a>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d70 <__multadd+0x84>)
 8007d3e:	480d      	ldr	r0, [pc, #52]	@ (8007d74 <__multadd+0x88>)
 8007d40:	21ba      	movs	r1, #186	@ 0xba
 8007d42:	f001 fcfd 	bl	8009740 <__assert_func>
 8007d46:	6922      	ldr	r2, [r4, #16]
 8007d48:	3202      	adds	r2, #2
 8007d4a:	f104 010c 	add.w	r1, r4, #12
 8007d4e:	0092      	lsls	r2, r2, #2
 8007d50:	300c      	adds	r0, #12
 8007d52:	f001 fcdf 	bl	8009714 <memcpy>
 8007d56:	4621      	mov	r1, r4
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff ffa5 	bl	8007ca8 <_Bfree>
 8007d5e:	4644      	mov	r4, r8
 8007d60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d64:	3501      	adds	r5, #1
 8007d66:	615e      	str	r6, [r3, #20]
 8007d68:	6125      	str	r5, [r4, #16]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d70:	0800a54d 	.word	0x0800a54d
 8007d74:	0800a55e 	.word	0x0800a55e

08007d78 <__s2b>:
 8007d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	4615      	mov	r5, r2
 8007d80:	461f      	mov	r7, r3
 8007d82:	2209      	movs	r2, #9
 8007d84:	3308      	adds	r3, #8
 8007d86:	4606      	mov	r6, r0
 8007d88:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	2201      	movs	r2, #1
 8007d90:	429a      	cmp	r2, r3
 8007d92:	db09      	blt.n	8007da8 <__s2b+0x30>
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff ff47 	bl	8007c28 <_Balloc>
 8007d9a:	b940      	cbnz	r0, 8007dae <__s2b+0x36>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	4b19      	ldr	r3, [pc, #100]	@ (8007e04 <__s2b+0x8c>)
 8007da0:	4819      	ldr	r0, [pc, #100]	@ (8007e08 <__s2b+0x90>)
 8007da2:	21d3      	movs	r1, #211	@ 0xd3
 8007da4:	f001 fccc 	bl	8009740 <__assert_func>
 8007da8:	0052      	lsls	r2, r2, #1
 8007daa:	3101      	adds	r1, #1
 8007dac:	e7f0      	b.n	8007d90 <__s2b+0x18>
 8007dae:	9b08      	ldr	r3, [sp, #32]
 8007db0:	6143      	str	r3, [r0, #20]
 8007db2:	2d09      	cmp	r5, #9
 8007db4:	f04f 0301 	mov.w	r3, #1
 8007db8:	6103      	str	r3, [r0, #16]
 8007dba:	dd16      	ble.n	8007dea <__s2b+0x72>
 8007dbc:	f104 0909 	add.w	r9, r4, #9
 8007dc0:	46c8      	mov	r8, r9
 8007dc2:	442c      	add	r4, r5
 8007dc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007dc8:	4601      	mov	r1, r0
 8007dca:	3b30      	subs	r3, #48	@ 0x30
 8007dcc:	220a      	movs	r2, #10
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7ff ff8c 	bl	8007cec <__multadd>
 8007dd4:	45a0      	cmp	r8, r4
 8007dd6:	d1f5      	bne.n	8007dc4 <__s2b+0x4c>
 8007dd8:	f1a5 0408 	sub.w	r4, r5, #8
 8007ddc:	444c      	add	r4, r9
 8007dde:	1b2d      	subs	r5, r5, r4
 8007de0:	1963      	adds	r3, r4, r5
 8007de2:	42bb      	cmp	r3, r7
 8007de4:	db04      	blt.n	8007df0 <__s2b+0x78>
 8007de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dea:	340a      	adds	r4, #10
 8007dec:	2509      	movs	r5, #9
 8007dee:	e7f6      	b.n	8007dde <__s2b+0x66>
 8007df0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007df4:	4601      	mov	r1, r0
 8007df6:	3b30      	subs	r3, #48	@ 0x30
 8007df8:	220a      	movs	r2, #10
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ff76 	bl	8007cec <__multadd>
 8007e00:	e7ee      	b.n	8007de0 <__s2b+0x68>
 8007e02:	bf00      	nop
 8007e04:	0800a54d 	.word	0x0800a54d
 8007e08:	0800a55e 	.word	0x0800a55e

08007e0c <__hi0bits>:
 8007e0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e10:	4603      	mov	r3, r0
 8007e12:	bf36      	itet	cc
 8007e14:	0403      	lslcc	r3, r0, #16
 8007e16:	2000      	movcs	r0, #0
 8007e18:	2010      	movcc	r0, #16
 8007e1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e1e:	bf3c      	itt	cc
 8007e20:	021b      	lslcc	r3, r3, #8
 8007e22:	3008      	addcc	r0, #8
 8007e24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e28:	bf3c      	itt	cc
 8007e2a:	011b      	lslcc	r3, r3, #4
 8007e2c:	3004      	addcc	r0, #4
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e32:	bf3c      	itt	cc
 8007e34:	009b      	lslcc	r3, r3, #2
 8007e36:	3002      	addcc	r0, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	db05      	blt.n	8007e48 <__hi0bits+0x3c>
 8007e3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e40:	f100 0001 	add.w	r0, r0, #1
 8007e44:	bf08      	it	eq
 8007e46:	2020      	moveq	r0, #32
 8007e48:	4770      	bx	lr

08007e4a <__lo0bits>:
 8007e4a:	6803      	ldr	r3, [r0, #0]
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	f013 0007 	ands.w	r0, r3, #7
 8007e52:	d00b      	beq.n	8007e6c <__lo0bits+0x22>
 8007e54:	07d9      	lsls	r1, r3, #31
 8007e56:	d421      	bmi.n	8007e9c <__lo0bits+0x52>
 8007e58:	0798      	lsls	r0, r3, #30
 8007e5a:	bf49      	itett	mi
 8007e5c:	085b      	lsrmi	r3, r3, #1
 8007e5e:	089b      	lsrpl	r3, r3, #2
 8007e60:	2001      	movmi	r0, #1
 8007e62:	6013      	strmi	r3, [r2, #0]
 8007e64:	bf5c      	itt	pl
 8007e66:	6013      	strpl	r3, [r2, #0]
 8007e68:	2002      	movpl	r0, #2
 8007e6a:	4770      	bx	lr
 8007e6c:	b299      	uxth	r1, r3
 8007e6e:	b909      	cbnz	r1, 8007e74 <__lo0bits+0x2a>
 8007e70:	0c1b      	lsrs	r3, r3, #16
 8007e72:	2010      	movs	r0, #16
 8007e74:	b2d9      	uxtb	r1, r3
 8007e76:	b909      	cbnz	r1, 8007e7c <__lo0bits+0x32>
 8007e78:	3008      	adds	r0, #8
 8007e7a:	0a1b      	lsrs	r3, r3, #8
 8007e7c:	0719      	lsls	r1, r3, #28
 8007e7e:	bf04      	itt	eq
 8007e80:	091b      	lsreq	r3, r3, #4
 8007e82:	3004      	addeq	r0, #4
 8007e84:	0799      	lsls	r1, r3, #30
 8007e86:	bf04      	itt	eq
 8007e88:	089b      	lsreq	r3, r3, #2
 8007e8a:	3002      	addeq	r0, #2
 8007e8c:	07d9      	lsls	r1, r3, #31
 8007e8e:	d403      	bmi.n	8007e98 <__lo0bits+0x4e>
 8007e90:	085b      	lsrs	r3, r3, #1
 8007e92:	f100 0001 	add.w	r0, r0, #1
 8007e96:	d003      	beq.n	8007ea0 <__lo0bits+0x56>
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	4770      	bx	lr
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	4770      	bx	lr
 8007ea0:	2020      	movs	r0, #32
 8007ea2:	4770      	bx	lr

08007ea4 <__i2b>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	f7ff febd 	bl	8007c28 <_Balloc>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	b928      	cbnz	r0, 8007ebe <__i2b+0x1a>
 8007eb2:	4b05      	ldr	r3, [pc, #20]	@ (8007ec8 <__i2b+0x24>)
 8007eb4:	4805      	ldr	r0, [pc, #20]	@ (8007ecc <__i2b+0x28>)
 8007eb6:	f240 1145 	movw	r1, #325	@ 0x145
 8007eba:	f001 fc41 	bl	8009740 <__assert_func>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	6144      	str	r4, [r0, #20]
 8007ec2:	6103      	str	r3, [r0, #16]
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	bf00      	nop
 8007ec8:	0800a54d 	.word	0x0800a54d
 8007ecc:	0800a55e 	.word	0x0800a55e

08007ed0 <__multiply>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	690a      	ldr	r2, [r1, #16]
 8007ed8:	6923      	ldr	r3, [r4, #16]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	bfa8      	it	ge
 8007ede:	4623      	movge	r3, r4
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	bfa4      	itt	ge
 8007ee4:	460c      	movge	r4, r1
 8007ee6:	461f      	movge	r7, r3
 8007ee8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007eec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ef0:	68a3      	ldr	r3, [r4, #8]
 8007ef2:	6861      	ldr	r1, [r4, #4]
 8007ef4:	eb0a 0609 	add.w	r6, sl, r9
 8007ef8:	42b3      	cmp	r3, r6
 8007efa:	b085      	sub	sp, #20
 8007efc:	bfb8      	it	lt
 8007efe:	3101      	addlt	r1, #1
 8007f00:	f7ff fe92 	bl	8007c28 <_Balloc>
 8007f04:	b930      	cbnz	r0, 8007f14 <__multiply+0x44>
 8007f06:	4602      	mov	r2, r0
 8007f08:	4b44      	ldr	r3, [pc, #272]	@ (800801c <__multiply+0x14c>)
 8007f0a:	4845      	ldr	r0, [pc, #276]	@ (8008020 <__multiply+0x150>)
 8007f0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f10:	f001 fc16 	bl	8009740 <__assert_func>
 8007f14:	f100 0514 	add.w	r5, r0, #20
 8007f18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4543      	cmp	r3, r8
 8007f22:	d321      	bcc.n	8007f68 <__multiply+0x98>
 8007f24:	f107 0114 	add.w	r1, r7, #20
 8007f28:	f104 0214 	add.w	r2, r4, #20
 8007f2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f34:	9302      	str	r3, [sp, #8]
 8007f36:	1b13      	subs	r3, r2, r4
 8007f38:	3b15      	subs	r3, #21
 8007f3a:	f023 0303 	bic.w	r3, r3, #3
 8007f3e:	3304      	adds	r3, #4
 8007f40:	f104 0715 	add.w	r7, r4, #21
 8007f44:	42ba      	cmp	r2, r7
 8007f46:	bf38      	it	cc
 8007f48:	2304      	movcc	r3, #4
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	9b02      	ldr	r3, [sp, #8]
 8007f4e:	9103      	str	r1, [sp, #12]
 8007f50:	428b      	cmp	r3, r1
 8007f52:	d80c      	bhi.n	8007f6e <__multiply+0x9e>
 8007f54:	2e00      	cmp	r6, #0
 8007f56:	dd03      	ble.n	8007f60 <__multiply+0x90>
 8007f58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d05b      	beq.n	8008018 <__multiply+0x148>
 8007f60:	6106      	str	r6, [r0, #16]
 8007f62:	b005      	add	sp, #20
 8007f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f68:	f843 2b04 	str.w	r2, [r3], #4
 8007f6c:	e7d8      	b.n	8007f20 <__multiply+0x50>
 8007f6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f72:	f1ba 0f00 	cmp.w	sl, #0
 8007f76:	d024      	beq.n	8007fc2 <__multiply+0xf2>
 8007f78:	f104 0e14 	add.w	lr, r4, #20
 8007f7c:	46a9      	mov	r9, r5
 8007f7e:	f04f 0c00 	mov.w	ip, #0
 8007f82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f86:	f8d9 3000 	ldr.w	r3, [r9]
 8007f8a:	fa1f fb87 	uxth.w	fp, r7
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f98:	f8d9 7000 	ldr.w	r7, [r9]
 8007f9c:	4463      	add	r3, ip
 8007f9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fa2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007fa6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fb0:	4572      	cmp	r2, lr
 8007fb2:	f849 3b04 	str.w	r3, [r9], #4
 8007fb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fba:	d8e2      	bhi.n	8007f82 <__multiply+0xb2>
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	f845 c003 	str.w	ip, [r5, r3]
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fc8:	3104      	adds	r1, #4
 8007fca:	f1b9 0f00 	cmp.w	r9, #0
 8007fce:	d021      	beq.n	8008014 <__multiply+0x144>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	f104 0c14 	add.w	ip, r4, #20
 8007fd6:	46ae      	mov	lr, r5
 8007fd8:	f04f 0a00 	mov.w	sl, #0
 8007fdc:	f8bc b000 	ldrh.w	fp, [ip]
 8007fe0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fe4:	fb09 770b 	mla	r7, r9, fp, r7
 8007fe8:	4457      	add	r7, sl
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ff0:	f84e 3b04 	str.w	r3, [lr], #4
 8007ff4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ff8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ffc:	f8be 3000 	ldrh.w	r3, [lr]
 8008000:	fb09 330a 	mla	r3, r9, sl, r3
 8008004:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008008:	4562      	cmp	r2, ip
 800800a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800800e:	d8e5      	bhi.n	8007fdc <__multiply+0x10c>
 8008010:	9f01      	ldr	r7, [sp, #4]
 8008012:	51eb      	str	r3, [r5, r7]
 8008014:	3504      	adds	r5, #4
 8008016:	e799      	b.n	8007f4c <__multiply+0x7c>
 8008018:	3e01      	subs	r6, #1
 800801a:	e79b      	b.n	8007f54 <__multiply+0x84>
 800801c:	0800a54d 	.word	0x0800a54d
 8008020:	0800a55e 	.word	0x0800a55e

08008024 <__pow5mult>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	4615      	mov	r5, r2
 800802a:	f012 0203 	ands.w	r2, r2, #3
 800802e:	4607      	mov	r7, r0
 8008030:	460e      	mov	r6, r1
 8008032:	d007      	beq.n	8008044 <__pow5mult+0x20>
 8008034:	4c25      	ldr	r4, [pc, #148]	@ (80080cc <__pow5mult+0xa8>)
 8008036:	3a01      	subs	r2, #1
 8008038:	2300      	movs	r3, #0
 800803a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800803e:	f7ff fe55 	bl	8007cec <__multadd>
 8008042:	4606      	mov	r6, r0
 8008044:	10ad      	asrs	r5, r5, #2
 8008046:	d03d      	beq.n	80080c4 <__pow5mult+0xa0>
 8008048:	69fc      	ldr	r4, [r7, #28]
 800804a:	b97c      	cbnz	r4, 800806c <__pow5mult+0x48>
 800804c:	2010      	movs	r0, #16
 800804e:	f7ff fd35 	bl	8007abc <malloc>
 8008052:	4602      	mov	r2, r0
 8008054:	61f8      	str	r0, [r7, #28]
 8008056:	b928      	cbnz	r0, 8008064 <__pow5mult+0x40>
 8008058:	4b1d      	ldr	r3, [pc, #116]	@ (80080d0 <__pow5mult+0xac>)
 800805a:	481e      	ldr	r0, [pc, #120]	@ (80080d4 <__pow5mult+0xb0>)
 800805c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008060:	f001 fb6e 	bl	8009740 <__assert_func>
 8008064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008068:	6004      	str	r4, [r0, #0]
 800806a:	60c4      	str	r4, [r0, #12]
 800806c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008074:	b94c      	cbnz	r4, 800808a <__pow5mult+0x66>
 8008076:	f240 2171 	movw	r1, #625	@ 0x271
 800807a:	4638      	mov	r0, r7
 800807c:	f7ff ff12 	bl	8007ea4 <__i2b>
 8008080:	2300      	movs	r3, #0
 8008082:	f8c8 0008 	str.w	r0, [r8, #8]
 8008086:	4604      	mov	r4, r0
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	f04f 0900 	mov.w	r9, #0
 800808e:	07eb      	lsls	r3, r5, #31
 8008090:	d50a      	bpl.n	80080a8 <__pow5mult+0x84>
 8008092:	4631      	mov	r1, r6
 8008094:	4622      	mov	r2, r4
 8008096:	4638      	mov	r0, r7
 8008098:	f7ff ff1a 	bl	8007ed0 <__multiply>
 800809c:	4631      	mov	r1, r6
 800809e:	4680      	mov	r8, r0
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff fe01 	bl	8007ca8 <_Bfree>
 80080a6:	4646      	mov	r6, r8
 80080a8:	106d      	asrs	r5, r5, #1
 80080aa:	d00b      	beq.n	80080c4 <__pow5mult+0xa0>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	b938      	cbnz	r0, 80080c0 <__pow5mult+0x9c>
 80080b0:	4622      	mov	r2, r4
 80080b2:	4621      	mov	r1, r4
 80080b4:	4638      	mov	r0, r7
 80080b6:	f7ff ff0b 	bl	8007ed0 <__multiply>
 80080ba:	6020      	str	r0, [r4, #0]
 80080bc:	f8c0 9000 	str.w	r9, [r0]
 80080c0:	4604      	mov	r4, r0
 80080c2:	e7e4      	b.n	800808e <__pow5mult+0x6a>
 80080c4:	4630      	mov	r0, r6
 80080c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ca:	bf00      	nop
 80080cc:	0800a5b8 	.word	0x0800a5b8
 80080d0:	0800a4de 	.word	0x0800a4de
 80080d4:	0800a55e 	.word	0x0800a55e

080080d8 <__lshift>:
 80080d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080dc:	460c      	mov	r4, r1
 80080de:	6849      	ldr	r1, [r1, #4]
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080e6:	68a3      	ldr	r3, [r4, #8]
 80080e8:	4607      	mov	r7, r0
 80080ea:	4691      	mov	r9, r2
 80080ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080f0:	f108 0601 	add.w	r6, r8, #1
 80080f4:	42b3      	cmp	r3, r6
 80080f6:	db0b      	blt.n	8008110 <__lshift+0x38>
 80080f8:	4638      	mov	r0, r7
 80080fa:	f7ff fd95 	bl	8007c28 <_Balloc>
 80080fe:	4605      	mov	r5, r0
 8008100:	b948      	cbnz	r0, 8008116 <__lshift+0x3e>
 8008102:	4602      	mov	r2, r0
 8008104:	4b28      	ldr	r3, [pc, #160]	@ (80081a8 <__lshift+0xd0>)
 8008106:	4829      	ldr	r0, [pc, #164]	@ (80081ac <__lshift+0xd4>)
 8008108:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800810c:	f001 fb18 	bl	8009740 <__assert_func>
 8008110:	3101      	adds	r1, #1
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	e7ee      	b.n	80080f4 <__lshift+0x1c>
 8008116:	2300      	movs	r3, #0
 8008118:	f100 0114 	add.w	r1, r0, #20
 800811c:	f100 0210 	add.w	r2, r0, #16
 8008120:	4618      	mov	r0, r3
 8008122:	4553      	cmp	r3, sl
 8008124:	db33      	blt.n	800818e <__lshift+0xb6>
 8008126:	6920      	ldr	r0, [r4, #16]
 8008128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800812c:	f104 0314 	add.w	r3, r4, #20
 8008130:	f019 091f 	ands.w	r9, r9, #31
 8008134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008138:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800813c:	d02b      	beq.n	8008196 <__lshift+0xbe>
 800813e:	f1c9 0e20 	rsb	lr, r9, #32
 8008142:	468a      	mov	sl, r1
 8008144:	2200      	movs	r2, #0
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	fa00 f009 	lsl.w	r0, r0, r9
 800814c:	4310      	orrs	r0, r2
 800814e:	f84a 0b04 	str.w	r0, [sl], #4
 8008152:	f853 2b04 	ldr.w	r2, [r3], #4
 8008156:	459c      	cmp	ip, r3
 8008158:	fa22 f20e 	lsr.w	r2, r2, lr
 800815c:	d8f3      	bhi.n	8008146 <__lshift+0x6e>
 800815e:	ebac 0304 	sub.w	r3, ip, r4
 8008162:	3b15      	subs	r3, #21
 8008164:	f023 0303 	bic.w	r3, r3, #3
 8008168:	3304      	adds	r3, #4
 800816a:	f104 0015 	add.w	r0, r4, #21
 800816e:	4584      	cmp	ip, r0
 8008170:	bf38      	it	cc
 8008172:	2304      	movcc	r3, #4
 8008174:	50ca      	str	r2, [r1, r3]
 8008176:	b10a      	cbz	r2, 800817c <__lshift+0xa4>
 8008178:	f108 0602 	add.w	r6, r8, #2
 800817c:	3e01      	subs	r6, #1
 800817e:	4638      	mov	r0, r7
 8008180:	612e      	str	r6, [r5, #16]
 8008182:	4621      	mov	r1, r4
 8008184:	f7ff fd90 	bl	8007ca8 <_Bfree>
 8008188:	4628      	mov	r0, r5
 800818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008192:	3301      	adds	r3, #1
 8008194:	e7c5      	b.n	8008122 <__lshift+0x4a>
 8008196:	3904      	subs	r1, #4
 8008198:	f853 2b04 	ldr.w	r2, [r3], #4
 800819c:	f841 2f04 	str.w	r2, [r1, #4]!
 80081a0:	459c      	cmp	ip, r3
 80081a2:	d8f9      	bhi.n	8008198 <__lshift+0xc0>
 80081a4:	e7ea      	b.n	800817c <__lshift+0xa4>
 80081a6:	bf00      	nop
 80081a8:	0800a54d 	.word	0x0800a54d
 80081ac:	0800a55e 	.word	0x0800a55e

080081b0 <__mcmp>:
 80081b0:	690a      	ldr	r2, [r1, #16]
 80081b2:	4603      	mov	r3, r0
 80081b4:	6900      	ldr	r0, [r0, #16]
 80081b6:	1a80      	subs	r0, r0, r2
 80081b8:	b530      	push	{r4, r5, lr}
 80081ba:	d10e      	bne.n	80081da <__mcmp+0x2a>
 80081bc:	3314      	adds	r3, #20
 80081be:	3114      	adds	r1, #20
 80081c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081d0:	4295      	cmp	r5, r2
 80081d2:	d003      	beq.n	80081dc <__mcmp+0x2c>
 80081d4:	d205      	bcs.n	80081e2 <__mcmp+0x32>
 80081d6:	f04f 30ff 	mov.w	r0, #4294967295
 80081da:	bd30      	pop	{r4, r5, pc}
 80081dc:	42a3      	cmp	r3, r4
 80081de:	d3f3      	bcc.n	80081c8 <__mcmp+0x18>
 80081e0:	e7fb      	b.n	80081da <__mcmp+0x2a>
 80081e2:	2001      	movs	r0, #1
 80081e4:	e7f9      	b.n	80081da <__mcmp+0x2a>
	...

080081e8 <__mdiff>:
 80081e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	4689      	mov	r9, r1
 80081ee:	4606      	mov	r6, r0
 80081f0:	4611      	mov	r1, r2
 80081f2:	4648      	mov	r0, r9
 80081f4:	4614      	mov	r4, r2
 80081f6:	f7ff ffdb 	bl	80081b0 <__mcmp>
 80081fa:	1e05      	subs	r5, r0, #0
 80081fc:	d112      	bne.n	8008224 <__mdiff+0x3c>
 80081fe:	4629      	mov	r1, r5
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff fd11 	bl	8007c28 <_Balloc>
 8008206:	4602      	mov	r2, r0
 8008208:	b928      	cbnz	r0, 8008216 <__mdiff+0x2e>
 800820a:	4b3f      	ldr	r3, [pc, #252]	@ (8008308 <__mdiff+0x120>)
 800820c:	f240 2137 	movw	r1, #567	@ 0x237
 8008210:	483e      	ldr	r0, [pc, #248]	@ (800830c <__mdiff+0x124>)
 8008212:	f001 fa95 	bl	8009740 <__assert_func>
 8008216:	2301      	movs	r3, #1
 8008218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800821c:	4610      	mov	r0, r2
 800821e:	b003      	add	sp, #12
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	bfbc      	itt	lt
 8008226:	464b      	movlt	r3, r9
 8008228:	46a1      	movlt	r9, r4
 800822a:	4630      	mov	r0, r6
 800822c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008230:	bfba      	itte	lt
 8008232:	461c      	movlt	r4, r3
 8008234:	2501      	movlt	r5, #1
 8008236:	2500      	movge	r5, #0
 8008238:	f7ff fcf6 	bl	8007c28 <_Balloc>
 800823c:	4602      	mov	r2, r0
 800823e:	b918      	cbnz	r0, 8008248 <__mdiff+0x60>
 8008240:	4b31      	ldr	r3, [pc, #196]	@ (8008308 <__mdiff+0x120>)
 8008242:	f240 2145 	movw	r1, #581	@ 0x245
 8008246:	e7e3      	b.n	8008210 <__mdiff+0x28>
 8008248:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800824c:	6926      	ldr	r6, [r4, #16]
 800824e:	60c5      	str	r5, [r0, #12]
 8008250:	f109 0310 	add.w	r3, r9, #16
 8008254:	f109 0514 	add.w	r5, r9, #20
 8008258:	f104 0e14 	add.w	lr, r4, #20
 800825c:	f100 0b14 	add.w	fp, r0, #20
 8008260:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008264:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	46d9      	mov	r9, fp
 800826c:	f04f 0c00 	mov.w	ip, #0
 8008270:	9b01      	ldr	r3, [sp, #4]
 8008272:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008276:	f853 af04 	ldr.w	sl, [r3, #4]!
 800827a:	9301      	str	r3, [sp, #4]
 800827c:	fa1f f38a 	uxth.w	r3, sl
 8008280:	4619      	mov	r1, r3
 8008282:	b283      	uxth	r3, r0
 8008284:	1acb      	subs	r3, r1, r3
 8008286:	0c00      	lsrs	r0, r0, #16
 8008288:	4463      	add	r3, ip
 800828a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800828e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008292:	b29b      	uxth	r3, r3
 8008294:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008298:	4576      	cmp	r6, lr
 800829a:	f849 3b04 	str.w	r3, [r9], #4
 800829e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082a2:	d8e5      	bhi.n	8008270 <__mdiff+0x88>
 80082a4:	1b33      	subs	r3, r6, r4
 80082a6:	3b15      	subs	r3, #21
 80082a8:	f023 0303 	bic.w	r3, r3, #3
 80082ac:	3415      	adds	r4, #21
 80082ae:	3304      	adds	r3, #4
 80082b0:	42a6      	cmp	r6, r4
 80082b2:	bf38      	it	cc
 80082b4:	2304      	movcc	r3, #4
 80082b6:	441d      	add	r5, r3
 80082b8:	445b      	add	r3, fp
 80082ba:	461e      	mov	r6, r3
 80082bc:	462c      	mov	r4, r5
 80082be:	4544      	cmp	r4, r8
 80082c0:	d30e      	bcc.n	80082e0 <__mdiff+0xf8>
 80082c2:	f108 0103 	add.w	r1, r8, #3
 80082c6:	1b49      	subs	r1, r1, r5
 80082c8:	f021 0103 	bic.w	r1, r1, #3
 80082cc:	3d03      	subs	r5, #3
 80082ce:	45a8      	cmp	r8, r5
 80082d0:	bf38      	it	cc
 80082d2:	2100      	movcc	r1, #0
 80082d4:	440b      	add	r3, r1
 80082d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082da:	b191      	cbz	r1, 8008302 <__mdiff+0x11a>
 80082dc:	6117      	str	r7, [r2, #16]
 80082de:	e79d      	b.n	800821c <__mdiff+0x34>
 80082e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80082e4:	46e6      	mov	lr, ip
 80082e6:	0c08      	lsrs	r0, r1, #16
 80082e8:	fa1c fc81 	uxtah	ip, ip, r1
 80082ec:	4471      	add	r1, lr
 80082ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082f2:	b289      	uxth	r1, r1
 80082f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082f8:	f846 1b04 	str.w	r1, [r6], #4
 80082fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008300:	e7dd      	b.n	80082be <__mdiff+0xd6>
 8008302:	3f01      	subs	r7, #1
 8008304:	e7e7      	b.n	80082d6 <__mdiff+0xee>
 8008306:	bf00      	nop
 8008308:	0800a54d 	.word	0x0800a54d
 800830c:	0800a55e 	.word	0x0800a55e

08008310 <__ulp>:
 8008310:	b082      	sub	sp, #8
 8008312:	ed8d 0b00 	vstr	d0, [sp]
 8008316:	9a01      	ldr	r2, [sp, #4]
 8008318:	4b0f      	ldr	r3, [pc, #60]	@ (8008358 <__ulp+0x48>)
 800831a:	4013      	ands	r3, r2
 800831c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008320:	2b00      	cmp	r3, #0
 8008322:	dc08      	bgt.n	8008336 <__ulp+0x26>
 8008324:	425b      	negs	r3, r3
 8008326:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800832a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800832e:	da04      	bge.n	800833a <__ulp+0x2a>
 8008330:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008334:	4113      	asrs	r3, r2
 8008336:	2200      	movs	r2, #0
 8008338:	e008      	b.n	800834c <__ulp+0x3c>
 800833a:	f1a2 0314 	sub.w	r3, r2, #20
 800833e:	2b1e      	cmp	r3, #30
 8008340:	bfda      	itte	le
 8008342:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008346:	40da      	lsrle	r2, r3
 8008348:	2201      	movgt	r2, #1
 800834a:	2300      	movs	r3, #0
 800834c:	4619      	mov	r1, r3
 800834e:	4610      	mov	r0, r2
 8008350:	ec41 0b10 	vmov	d0, r0, r1
 8008354:	b002      	add	sp, #8
 8008356:	4770      	bx	lr
 8008358:	7ff00000 	.word	0x7ff00000

0800835c <__b2d>:
 800835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008360:	6906      	ldr	r6, [r0, #16]
 8008362:	f100 0814 	add.w	r8, r0, #20
 8008366:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800836a:	1f37      	subs	r7, r6, #4
 800836c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008370:	4610      	mov	r0, r2
 8008372:	f7ff fd4b 	bl	8007e0c <__hi0bits>
 8008376:	f1c0 0320 	rsb	r3, r0, #32
 800837a:	280a      	cmp	r0, #10
 800837c:	600b      	str	r3, [r1, #0]
 800837e:	491b      	ldr	r1, [pc, #108]	@ (80083ec <__b2d+0x90>)
 8008380:	dc15      	bgt.n	80083ae <__b2d+0x52>
 8008382:	f1c0 0c0b 	rsb	ip, r0, #11
 8008386:	fa22 f30c 	lsr.w	r3, r2, ip
 800838a:	45b8      	cmp	r8, r7
 800838c:	ea43 0501 	orr.w	r5, r3, r1
 8008390:	bf34      	ite	cc
 8008392:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008396:	2300      	movcs	r3, #0
 8008398:	3015      	adds	r0, #21
 800839a:	fa02 f000 	lsl.w	r0, r2, r0
 800839e:	fa23 f30c 	lsr.w	r3, r3, ip
 80083a2:	4303      	orrs	r3, r0
 80083a4:	461c      	mov	r4, r3
 80083a6:	ec45 4b10 	vmov	d0, r4, r5
 80083aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ae:	45b8      	cmp	r8, r7
 80083b0:	bf3a      	itte	cc
 80083b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80083b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80083ba:	2300      	movcs	r3, #0
 80083bc:	380b      	subs	r0, #11
 80083be:	d012      	beq.n	80083e6 <__b2d+0x8a>
 80083c0:	f1c0 0120 	rsb	r1, r0, #32
 80083c4:	fa23 f401 	lsr.w	r4, r3, r1
 80083c8:	4082      	lsls	r2, r0
 80083ca:	4322      	orrs	r2, r4
 80083cc:	4547      	cmp	r7, r8
 80083ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80083d2:	bf8c      	ite	hi
 80083d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80083d8:	2200      	movls	r2, #0
 80083da:	4083      	lsls	r3, r0
 80083dc:	40ca      	lsrs	r2, r1
 80083de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80083e2:	4313      	orrs	r3, r2
 80083e4:	e7de      	b.n	80083a4 <__b2d+0x48>
 80083e6:	ea42 0501 	orr.w	r5, r2, r1
 80083ea:	e7db      	b.n	80083a4 <__b2d+0x48>
 80083ec:	3ff00000 	.word	0x3ff00000

080083f0 <__d2b>:
 80083f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083f4:	460f      	mov	r7, r1
 80083f6:	2101      	movs	r1, #1
 80083f8:	ec59 8b10 	vmov	r8, r9, d0
 80083fc:	4616      	mov	r6, r2
 80083fe:	f7ff fc13 	bl	8007c28 <_Balloc>
 8008402:	4604      	mov	r4, r0
 8008404:	b930      	cbnz	r0, 8008414 <__d2b+0x24>
 8008406:	4602      	mov	r2, r0
 8008408:	4b23      	ldr	r3, [pc, #140]	@ (8008498 <__d2b+0xa8>)
 800840a:	4824      	ldr	r0, [pc, #144]	@ (800849c <__d2b+0xac>)
 800840c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008410:	f001 f996 	bl	8009740 <__assert_func>
 8008414:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800841c:	b10d      	cbz	r5, 8008422 <__d2b+0x32>
 800841e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	f1b8 0300 	subs.w	r3, r8, #0
 8008428:	d023      	beq.n	8008472 <__d2b+0x82>
 800842a:	4668      	mov	r0, sp
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	f7ff fd0c 	bl	8007e4a <__lo0bits>
 8008432:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008436:	b1d0      	cbz	r0, 800846e <__d2b+0x7e>
 8008438:	f1c0 0320 	rsb	r3, r0, #32
 800843c:	fa02 f303 	lsl.w	r3, r2, r3
 8008440:	430b      	orrs	r3, r1
 8008442:	40c2      	lsrs	r2, r0
 8008444:	6163      	str	r3, [r4, #20]
 8008446:	9201      	str	r2, [sp, #4]
 8008448:	9b01      	ldr	r3, [sp, #4]
 800844a:	61a3      	str	r3, [r4, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	bf0c      	ite	eq
 8008450:	2201      	moveq	r2, #1
 8008452:	2202      	movne	r2, #2
 8008454:	6122      	str	r2, [r4, #16]
 8008456:	b1a5      	cbz	r5, 8008482 <__d2b+0x92>
 8008458:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800845c:	4405      	add	r5, r0
 800845e:	603d      	str	r5, [r7, #0]
 8008460:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008464:	6030      	str	r0, [r6, #0]
 8008466:	4620      	mov	r0, r4
 8008468:	b003      	add	sp, #12
 800846a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800846e:	6161      	str	r1, [r4, #20]
 8008470:	e7ea      	b.n	8008448 <__d2b+0x58>
 8008472:	a801      	add	r0, sp, #4
 8008474:	f7ff fce9 	bl	8007e4a <__lo0bits>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	6163      	str	r3, [r4, #20]
 800847c:	3020      	adds	r0, #32
 800847e:	2201      	movs	r2, #1
 8008480:	e7e8      	b.n	8008454 <__d2b+0x64>
 8008482:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008486:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800848a:	6038      	str	r0, [r7, #0]
 800848c:	6918      	ldr	r0, [r3, #16]
 800848e:	f7ff fcbd 	bl	8007e0c <__hi0bits>
 8008492:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008496:	e7e5      	b.n	8008464 <__d2b+0x74>
 8008498:	0800a54d 	.word	0x0800a54d
 800849c:	0800a55e 	.word	0x0800a55e

080084a0 <__ratio>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	b085      	sub	sp, #20
 80084a6:	e9cd 1000 	strd	r1, r0, [sp]
 80084aa:	a902      	add	r1, sp, #8
 80084ac:	f7ff ff56 	bl	800835c <__b2d>
 80084b0:	9800      	ldr	r0, [sp, #0]
 80084b2:	a903      	add	r1, sp, #12
 80084b4:	ec55 4b10 	vmov	r4, r5, d0
 80084b8:	f7ff ff50 	bl	800835c <__b2d>
 80084bc:	9b01      	ldr	r3, [sp, #4]
 80084be:	6919      	ldr	r1, [r3, #16]
 80084c0:	9b00      	ldr	r3, [sp, #0]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	1ac9      	subs	r1, r1, r3
 80084c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	ec5b ab10 	vmov	sl, fp, d0
 80084d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bfce      	itee	gt
 80084d8:	462a      	movgt	r2, r5
 80084da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084de:	465a      	movle	r2, fp
 80084e0:	462f      	mov	r7, r5
 80084e2:	46d9      	mov	r9, fp
 80084e4:	bfcc      	ite	gt
 80084e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80084ee:	464b      	mov	r3, r9
 80084f0:	4652      	mov	r2, sl
 80084f2:	4620      	mov	r0, r4
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f8 f9d1 	bl	800089c <__aeabi_ddiv>
 80084fa:	ec41 0b10 	vmov	d0, r0, r1
 80084fe:	b005      	add	sp, #20
 8008500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008504 <__copybits>:
 8008504:	3901      	subs	r1, #1
 8008506:	b570      	push	{r4, r5, r6, lr}
 8008508:	1149      	asrs	r1, r1, #5
 800850a:	6914      	ldr	r4, [r2, #16]
 800850c:	3101      	adds	r1, #1
 800850e:	f102 0314 	add.w	r3, r2, #20
 8008512:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008516:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800851a:	1f05      	subs	r5, r0, #4
 800851c:	42a3      	cmp	r3, r4
 800851e:	d30c      	bcc.n	800853a <__copybits+0x36>
 8008520:	1aa3      	subs	r3, r4, r2
 8008522:	3b11      	subs	r3, #17
 8008524:	f023 0303 	bic.w	r3, r3, #3
 8008528:	3211      	adds	r2, #17
 800852a:	42a2      	cmp	r2, r4
 800852c:	bf88      	it	hi
 800852e:	2300      	movhi	r3, #0
 8008530:	4418      	add	r0, r3
 8008532:	2300      	movs	r3, #0
 8008534:	4288      	cmp	r0, r1
 8008536:	d305      	bcc.n	8008544 <__copybits+0x40>
 8008538:	bd70      	pop	{r4, r5, r6, pc}
 800853a:	f853 6b04 	ldr.w	r6, [r3], #4
 800853e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008542:	e7eb      	b.n	800851c <__copybits+0x18>
 8008544:	f840 3b04 	str.w	r3, [r0], #4
 8008548:	e7f4      	b.n	8008534 <__copybits+0x30>

0800854a <__any_on>:
 800854a:	f100 0214 	add.w	r2, r0, #20
 800854e:	6900      	ldr	r0, [r0, #16]
 8008550:	114b      	asrs	r3, r1, #5
 8008552:	4298      	cmp	r0, r3
 8008554:	b510      	push	{r4, lr}
 8008556:	db11      	blt.n	800857c <__any_on+0x32>
 8008558:	dd0a      	ble.n	8008570 <__any_on+0x26>
 800855a:	f011 011f 	ands.w	r1, r1, #31
 800855e:	d007      	beq.n	8008570 <__any_on+0x26>
 8008560:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008564:	fa24 f001 	lsr.w	r0, r4, r1
 8008568:	fa00 f101 	lsl.w	r1, r0, r1
 800856c:	428c      	cmp	r4, r1
 800856e:	d10b      	bne.n	8008588 <__any_on+0x3e>
 8008570:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008574:	4293      	cmp	r3, r2
 8008576:	d803      	bhi.n	8008580 <__any_on+0x36>
 8008578:	2000      	movs	r0, #0
 800857a:	bd10      	pop	{r4, pc}
 800857c:	4603      	mov	r3, r0
 800857e:	e7f7      	b.n	8008570 <__any_on+0x26>
 8008580:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008584:	2900      	cmp	r1, #0
 8008586:	d0f5      	beq.n	8008574 <__any_on+0x2a>
 8008588:	2001      	movs	r0, #1
 800858a:	e7f6      	b.n	800857a <__any_on+0x30>

0800858c <sulp>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	4604      	mov	r4, r0
 8008590:	460d      	mov	r5, r1
 8008592:	ec45 4b10 	vmov	d0, r4, r5
 8008596:	4616      	mov	r6, r2
 8008598:	f7ff feba 	bl	8008310 <__ulp>
 800859c:	ec51 0b10 	vmov	r0, r1, d0
 80085a0:	b17e      	cbz	r6, 80085c2 <sulp+0x36>
 80085a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dd09      	ble.n	80085c2 <sulp+0x36>
 80085ae:	051b      	lsls	r3, r3, #20
 80085b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80085b4:	2400      	movs	r4, #0
 80085b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80085ba:	4622      	mov	r2, r4
 80085bc:	462b      	mov	r3, r5
 80085be:	f7f8 f843 	bl	8000648 <__aeabi_dmul>
 80085c2:	ec41 0b10 	vmov	d0, r0, r1
 80085c6:	bd70      	pop	{r4, r5, r6, pc}

080085c8 <_strtod_l>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	b09f      	sub	sp, #124	@ 0x7c
 80085ce:	460c      	mov	r4, r1
 80085d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80085d2:	2200      	movs	r2, #0
 80085d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80085d6:	9005      	str	r0, [sp, #20]
 80085d8:	f04f 0a00 	mov.w	sl, #0
 80085dc:	f04f 0b00 	mov.w	fp, #0
 80085e0:	460a      	mov	r2, r1
 80085e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80085e4:	7811      	ldrb	r1, [r2, #0]
 80085e6:	292b      	cmp	r1, #43	@ 0x2b
 80085e8:	d04a      	beq.n	8008680 <_strtod_l+0xb8>
 80085ea:	d838      	bhi.n	800865e <_strtod_l+0x96>
 80085ec:	290d      	cmp	r1, #13
 80085ee:	d832      	bhi.n	8008656 <_strtod_l+0x8e>
 80085f0:	2908      	cmp	r1, #8
 80085f2:	d832      	bhi.n	800865a <_strtod_l+0x92>
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d03b      	beq.n	8008670 <_strtod_l+0xa8>
 80085f8:	2200      	movs	r2, #0
 80085fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80085fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80085fe:	782a      	ldrb	r2, [r5, #0]
 8008600:	2a30      	cmp	r2, #48	@ 0x30
 8008602:	f040 80b3 	bne.w	800876c <_strtod_l+0x1a4>
 8008606:	786a      	ldrb	r2, [r5, #1]
 8008608:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800860c:	2a58      	cmp	r2, #88	@ 0x58
 800860e:	d16e      	bne.n	80086ee <_strtod_l+0x126>
 8008610:	9302      	str	r3, [sp, #8]
 8008612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	ab1a      	add	r3, sp, #104	@ 0x68
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4a8e      	ldr	r2, [pc, #568]	@ (8008854 <_strtod_l+0x28c>)
 800861c:	9805      	ldr	r0, [sp, #20]
 800861e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008620:	a919      	add	r1, sp, #100	@ 0x64
 8008622:	f001 f927 	bl	8009874 <__gethex>
 8008626:	f010 060f 	ands.w	r6, r0, #15
 800862a:	4604      	mov	r4, r0
 800862c:	d005      	beq.n	800863a <_strtod_l+0x72>
 800862e:	2e06      	cmp	r6, #6
 8008630:	d128      	bne.n	8008684 <_strtod_l+0xbc>
 8008632:	3501      	adds	r5, #1
 8008634:	2300      	movs	r3, #0
 8008636:	9519      	str	r5, [sp, #100]	@ 0x64
 8008638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800863a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800863c:	2b00      	cmp	r3, #0
 800863e:	f040 858e 	bne.w	800915e <_strtod_l+0xb96>
 8008642:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008644:	b1cb      	cbz	r3, 800867a <_strtod_l+0xb2>
 8008646:	4652      	mov	r2, sl
 8008648:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800864c:	ec43 2b10 	vmov	d0, r2, r3
 8008650:	b01f      	add	sp, #124	@ 0x7c
 8008652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008656:	2920      	cmp	r1, #32
 8008658:	d1ce      	bne.n	80085f8 <_strtod_l+0x30>
 800865a:	3201      	adds	r2, #1
 800865c:	e7c1      	b.n	80085e2 <_strtod_l+0x1a>
 800865e:	292d      	cmp	r1, #45	@ 0x2d
 8008660:	d1ca      	bne.n	80085f8 <_strtod_l+0x30>
 8008662:	2101      	movs	r1, #1
 8008664:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008666:	1c51      	adds	r1, r2, #1
 8008668:	9119      	str	r1, [sp, #100]	@ 0x64
 800866a:	7852      	ldrb	r2, [r2, #1]
 800866c:	2a00      	cmp	r2, #0
 800866e:	d1c5      	bne.n	80085fc <_strtod_l+0x34>
 8008670:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008672:	9419      	str	r4, [sp, #100]	@ 0x64
 8008674:	2b00      	cmp	r3, #0
 8008676:	f040 8570 	bne.w	800915a <_strtod_l+0xb92>
 800867a:	4652      	mov	r2, sl
 800867c:	465b      	mov	r3, fp
 800867e:	e7e5      	b.n	800864c <_strtod_l+0x84>
 8008680:	2100      	movs	r1, #0
 8008682:	e7ef      	b.n	8008664 <_strtod_l+0x9c>
 8008684:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008686:	b13a      	cbz	r2, 8008698 <_strtod_l+0xd0>
 8008688:	2135      	movs	r1, #53	@ 0x35
 800868a:	a81c      	add	r0, sp, #112	@ 0x70
 800868c:	f7ff ff3a 	bl	8008504 <__copybits>
 8008690:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008692:	9805      	ldr	r0, [sp, #20]
 8008694:	f7ff fb08 	bl	8007ca8 <_Bfree>
 8008698:	3e01      	subs	r6, #1
 800869a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800869c:	2e04      	cmp	r6, #4
 800869e:	d806      	bhi.n	80086ae <_strtod_l+0xe6>
 80086a0:	e8df f006 	tbb	[pc, r6]
 80086a4:	201d0314 	.word	0x201d0314
 80086a8:	14          	.byte	0x14
 80086a9:	00          	.byte	0x00
 80086aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80086ae:	05e1      	lsls	r1, r4, #23
 80086b0:	bf48      	it	mi
 80086b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80086b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086ba:	0d1b      	lsrs	r3, r3, #20
 80086bc:	051b      	lsls	r3, r3, #20
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1bb      	bne.n	800863a <_strtod_l+0x72>
 80086c2:	f7fe fb31 	bl	8006d28 <__errno>
 80086c6:	2322      	movs	r3, #34	@ 0x22
 80086c8:	6003      	str	r3, [r0, #0]
 80086ca:	e7b6      	b.n	800863a <_strtod_l+0x72>
 80086cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80086d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80086d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80086d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80086dc:	e7e7      	b.n	80086ae <_strtod_l+0xe6>
 80086de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800885c <_strtod_l+0x294>
 80086e2:	e7e4      	b.n	80086ae <_strtod_l+0xe6>
 80086e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80086e8:	f04f 3aff 	mov.w	sl, #4294967295
 80086ec:	e7df      	b.n	80086ae <_strtod_l+0xe6>
 80086ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80086f4:	785b      	ldrb	r3, [r3, #1]
 80086f6:	2b30      	cmp	r3, #48	@ 0x30
 80086f8:	d0f9      	beq.n	80086ee <_strtod_l+0x126>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d09d      	beq.n	800863a <_strtod_l+0x72>
 80086fe:	2301      	movs	r3, #1
 8008700:	9309      	str	r3, [sp, #36]	@ 0x24
 8008702:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008704:	930c      	str	r3, [sp, #48]	@ 0x30
 8008706:	2300      	movs	r3, #0
 8008708:	9308      	str	r3, [sp, #32]
 800870a:	930a      	str	r3, [sp, #40]	@ 0x28
 800870c:	461f      	mov	r7, r3
 800870e:	220a      	movs	r2, #10
 8008710:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008712:	7805      	ldrb	r5, [r0, #0]
 8008714:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008718:	b2d9      	uxtb	r1, r3
 800871a:	2909      	cmp	r1, #9
 800871c:	d928      	bls.n	8008770 <_strtod_l+0x1a8>
 800871e:	494e      	ldr	r1, [pc, #312]	@ (8008858 <_strtod_l+0x290>)
 8008720:	2201      	movs	r2, #1
 8008722:	f000 ffd5 	bl	80096d0 <strncmp>
 8008726:	2800      	cmp	r0, #0
 8008728:	d032      	beq.n	8008790 <_strtod_l+0x1c8>
 800872a:	2000      	movs	r0, #0
 800872c:	462a      	mov	r2, r5
 800872e:	4681      	mov	r9, r0
 8008730:	463d      	mov	r5, r7
 8008732:	4603      	mov	r3, r0
 8008734:	2a65      	cmp	r2, #101	@ 0x65
 8008736:	d001      	beq.n	800873c <_strtod_l+0x174>
 8008738:	2a45      	cmp	r2, #69	@ 0x45
 800873a:	d114      	bne.n	8008766 <_strtod_l+0x19e>
 800873c:	b91d      	cbnz	r5, 8008746 <_strtod_l+0x17e>
 800873e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008740:	4302      	orrs	r2, r0
 8008742:	d095      	beq.n	8008670 <_strtod_l+0xa8>
 8008744:	2500      	movs	r5, #0
 8008746:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008748:	1c62      	adds	r2, r4, #1
 800874a:	9219      	str	r2, [sp, #100]	@ 0x64
 800874c:	7862      	ldrb	r2, [r4, #1]
 800874e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008750:	d077      	beq.n	8008842 <_strtod_l+0x27a>
 8008752:	2a2d      	cmp	r2, #45	@ 0x2d
 8008754:	d07b      	beq.n	800884e <_strtod_l+0x286>
 8008756:	f04f 0c00 	mov.w	ip, #0
 800875a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800875e:	2909      	cmp	r1, #9
 8008760:	f240 8082 	bls.w	8008868 <_strtod_l+0x2a0>
 8008764:	9419      	str	r4, [sp, #100]	@ 0x64
 8008766:	f04f 0800 	mov.w	r8, #0
 800876a:	e0a2      	b.n	80088b2 <_strtod_l+0x2ea>
 800876c:	2300      	movs	r3, #0
 800876e:	e7c7      	b.n	8008700 <_strtod_l+0x138>
 8008770:	2f08      	cmp	r7, #8
 8008772:	bfd5      	itete	le
 8008774:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008776:	9908      	ldrgt	r1, [sp, #32]
 8008778:	fb02 3301 	mlale	r3, r2, r1, r3
 800877c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008780:	f100 0001 	add.w	r0, r0, #1
 8008784:	bfd4      	ite	le
 8008786:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008788:	9308      	strgt	r3, [sp, #32]
 800878a:	3701      	adds	r7, #1
 800878c:	9019      	str	r0, [sp, #100]	@ 0x64
 800878e:	e7bf      	b.n	8008710 <_strtod_l+0x148>
 8008790:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	9219      	str	r2, [sp, #100]	@ 0x64
 8008796:	785a      	ldrb	r2, [r3, #1]
 8008798:	b37f      	cbz	r7, 80087fa <_strtod_l+0x232>
 800879a:	4681      	mov	r9, r0
 800879c:	463d      	mov	r5, r7
 800879e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80087a2:	2b09      	cmp	r3, #9
 80087a4:	d912      	bls.n	80087cc <_strtod_l+0x204>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e7c4      	b.n	8008734 <_strtod_l+0x16c>
 80087aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80087b0:	785a      	ldrb	r2, [r3, #1]
 80087b2:	3001      	adds	r0, #1
 80087b4:	2a30      	cmp	r2, #48	@ 0x30
 80087b6:	d0f8      	beq.n	80087aa <_strtod_l+0x1e2>
 80087b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80087bc:	2b08      	cmp	r3, #8
 80087be:	f200 84d3 	bhi.w	8009168 <_strtod_l+0xba0>
 80087c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80087c6:	4681      	mov	r9, r0
 80087c8:	2000      	movs	r0, #0
 80087ca:	4605      	mov	r5, r0
 80087cc:	3a30      	subs	r2, #48	@ 0x30
 80087ce:	f100 0301 	add.w	r3, r0, #1
 80087d2:	d02a      	beq.n	800882a <_strtod_l+0x262>
 80087d4:	4499      	add	r9, r3
 80087d6:	eb00 0c05 	add.w	ip, r0, r5
 80087da:	462b      	mov	r3, r5
 80087dc:	210a      	movs	r1, #10
 80087de:	4563      	cmp	r3, ip
 80087e0:	d10d      	bne.n	80087fe <_strtod_l+0x236>
 80087e2:	1c69      	adds	r1, r5, #1
 80087e4:	4401      	add	r1, r0
 80087e6:	4428      	add	r0, r5
 80087e8:	2808      	cmp	r0, #8
 80087ea:	dc16      	bgt.n	800881a <_strtod_l+0x252>
 80087ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087ee:	230a      	movs	r3, #10
 80087f0:	fb03 2300 	mla	r3, r3, r0, r2
 80087f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f6:	2300      	movs	r3, #0
 80087f8:	e018      	b.n	800882c <_strtod_l+0x264>
 80087fa:	4638      	mov	r0, r7
 80087fc:	e7da      	b.n	80087b4 <_strtod_l+0x1ec>
 80087fe:	2b08      	cmp	r3, #8
 8008800:	f103 0301 	add.w	r3, r3, #1
 8008804:	dc03      	bgt.n	800880e <_strtod_l+0x246>
 8008806:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008808:	434e      	muls	r6, r1
 800880a:	960a      	str	r6, [sp, #40]	@ 0x28
 800880c:	e7e7      	b.n	80087de <_strtod_l+0x216>
 800880e:	2b10      	cmp	r3, #16
 8008810:	bfde      	ittt	le
 8008812:	9e08      	ldrle	r6, [sp, #32]
 8008814:	434e      	mulle	r6, r1
 8008816:	9608      	strle	r6, [sp, #32]
 8008818:	e7e1      	b.n	80087de <_strtod_l+0x216>
 800881a:	280f      	cmp	r0, #15
 800881c:	dceb      	bgt.n	80087f6 <_strtod_l+0x22e>
 800881e:	9808      	ldr	r0, [sp, #32]
 8008820:	230a      	movs	r3, #10
 8008822:	fb03 2300 	mla	r3, r3, r0, r2
 8008826:	9308      	str	r3, [sp, #32]
 8008828:	e7e5      	b.n	80087f6 <_strtod_l+0x22e>
 800882a:	4629      	mov	r1, r5
 800882c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800882e:	1c50      	adds	r0, r2, #1
 8008830:	9019      	str	r0, [sp, #100]	@ 0x64
 8008832:	7852      	ldrb	r2, [r2, #1]
 8008834:	4618      	mov	r0, r3
 8008836:	460d      	mov	r5, r1
 8008838:	e7b1      	b.n	800879e <_strtod_l+0x1d6>
 800883a:	f04f 0900 	mov.w	r9, #0
 800883e:	2301      	movs	r3, #1
 8008840:	e77d      	b.n	800873e <_strtod_l+0x176>
 8008842:	f04f 0c00 	mov.w	ip, #0
 8008846:	1ca2      	adds	r2, r4, #2
 8008848:	9219      	str	r2, [sp, #100]	@ 0x64
 800884a:	78a2      	ldrb	r2, [r4, #2]
 800884c:	e785      	b.n	800875a <_strtod_l+0x192>
 800884e:	f04f 0c01 	mov.w	ip, #1
 8008852:	e7f8      	b.n	8008846 <_strtod_l+0x27e>
 8008854:	0800a6d0 	.word	0x0800a6d0
 8008858:	0800a6b8 	.word	0x0800a6b8
 800885c:	7ff00000 	.word	0x7ff00000
 8008860:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008862:	1c51      	adds	r1, r2, #1
 8008864:	9119      	str	r1, [sp, #100]	@ 0x64
 8008866:	7852      	ldrb	r2, [r2, #1]
 8008868:	2a30      	cmp	r2, #48	@ 0x30
 800886a:	d0f9      	beq.n	8008860 <_strtod_l+0x298>
 800886c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008870:	2908      	cmp	r1, #8
 8008872:	f63f af78 	bhi.w	8008766 <_strtod_l+0x19e>
 8008876:	3a30      	subs	r2, #48	@ 0x30
 8008878:	920e      	str	r2, [sp, #56]	@ 0x38
 800887a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800887c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800887e:	f04f 080a 	mov.w	r8, #10
 8008882:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008884:	1c56      	adds	r6, r2, #1
 8008886:	9619      	str	r6, [sp, #100]	@ 0x64
 8008888:	7852      	ldrb	r2, [r2, #1]
 800888a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800888e:	f1be 0f09 	cmp.w	lr, #9
 8008892:	d939      	bls.n	8008908 <_strtod_l+0x340>
 8008894:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008896:	1a76      	subs	r6, r6, r1
 8008898:	2e08      	cmp	r6, #8
 800889a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800889e:	dc03      	bgt.n	80088a8 <_strtod_l+0x2e0>
 80088a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80088a2:	4588      	cmp	r8, r1
 80088a4:	bfa8      	it	ge
 80088a6:	4688      	movge	r8, r1
 80088a8:	f1bc 0f00 	cmp.w	ip, #0
 80088ac:	d001      	beq.n	80088b2 <_strtod_l+0x2ea>
 80088ae:	f1c8 0800 	rsb	r8, r8, #0
 80088b2:	2d00      	cmp	r5, #0
 80088b4:	d14e      	bne.n	8008954 <_strtod_l+0x38c>
 80088b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088b8:	4308      	orrs	r0, r1
 80088ba:	f47f aebe 	bne.w	800863a <_strtod_l+0x72>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f47f aed6 	bne.w	8008670 <_strtod_l+0xa8>
 80088c4:	2a69      	cmp	r2, #105	@ 0x69
 80088c6:	d028      	beq.n	800891a <_strtod_l+0x352>
 80088c8:	dc25      	bgt.n	8008916 <_strtod_l+0x34e>
 80088ca:	2a49      	cmp	r2, #73	@ 0x49
 80088cc:	d025      	beq.n	800891a <_strtod_l+0x352>
 80088ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80088d0:	f47f aece 	bne.w	8008670 <_strtod_l+0xa8>
 80088d4:	499b      	ldr	r1, [pc, #620]	@ (8008b44 <_strtod_l+0x57c>)
 80088d6:	a819      	add	r0, sp, #100	@ 0x64
 80088d8:	f001 f9ee 	bl	8009cb8 <__match>
 80088dc:	2800      	cmp	r0, #0
 80088de:	f43f aec7 	beq.w	8008670 <_strtod_l+0xa8>
 80088e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b28      	cmp	r3, #40	@ 0x28
 80088e8:	d12e      	bne.n	8008948 <_strtod_l+0x380>
 80088ea:	4997      	ldr	r1, [pc, #604]	@ (8008b48 <_strtod_l+0x580>)
 80088ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80088ee:	a819      	add	r0, sp, #100	@ 0x64
 80088f0:	f001 f9f6 	bl	8009ce0 <__hexnan>
 80088f4:	2805      	cmp	r0, #5
 80088f6:	d127      	bne.n	8008948 <_strtod_l+0x380>
 80088f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80088fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008902:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008906:	e698      	b.n	800863a <_strtod_l+0x72>
 8008908:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800890a:	fb08 2101 	mla	r1, r8, r1, r2
 800890e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008912:	920e      	str	r2, [sp, #56]	@ 0x38
 8008914:	e7b5      	b.n	8008882 <_strtod_l+0x2ba>
 8008916:	2a6e      	cmp	r2, #110	@ 0x6e
 8008918:	e7da      	b.n	80088d0 <_strtod_l+0x308>
 800891a:	498c      	ldr	r1, [pc, #560]	@ (8008b4c <_strtod_l+0x584>)
 800891c:	a819      	add	r0, sp, #100	@ 0x64
 800891e:	f001 f9cb 	bl	8009cb8 <__match>
 8008922:	2800      	cmp	r0, #0
 8008924:	f43f aea4 	beq.w	8008670 <_strtod_l+0xa8>
 8008928:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800892a:	4989      	ldr	r1, [pc, #548]	@ (8008b50 <_strtod_l+0x588>)
 800892c:	3b01      	subs	r3, #1
 800892e:	a819      	add	r0, sp, #100	@ 0x64
 8008930:	9319      	str	r3, [sp, #100]	@ 0x64
 8008932:	f001 f9c1 	bl	8009cb8 <__match>
 8008936:	b910      	cbnz	r0, 800893e <_strtod_l+0x376>
 8008938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800893a:	3301      	adds	r3, #1
 800893c:	9319      	str	r3, [sp, #100]	@ 0x64
 800893e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008b60 <_strtod_l+0x598>
 8008942:	f04f 0a00 	mov.w	sl, #0
 8008946:	e678      	b.n	800863a <_strtod_l+0x72>
 8008948:	4882      	ldr	r0, [pc, #520]	@ (8008b54 <_strtod_l+0x58c>)
 800894a:	f000 fef1 	bl	8009730 <nan>
 800894e:	ec5b ab10 	vmov	sl, fp, d0
 8008952:	e672      	b.n	800863a <_strtod_l+0x72>
 8008954:	eba8 0309 	sub.w	r3, r8, r9
 8008958:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800895a:	9309      	str	r3, [sp, #36]	@ 0x24
 800895c:	2f00      	cmp	r7, #0
 800895e:	bf08      	it	eq
 8008960:	462f      	moveq	r7, r5
 8008962:	2d10      	cmp	r5, #16
 8008964:	462c      	mov	r4, r5
 8008966:	bfa8      	it	ge
 8008968:	2410      	movge	r4, #16
 800896a:	f7f7 fdf3 	bl	8000554 <__aeabi_ui2d>
 800896e:	2d09      	cmp	r5, #9
 8008970:	4682      	mov	sl, r0
 8008972:	468b      	mov	fp, r1
 8008974:	dc13      	bgt.n	800899e <_strtod_l+0x3d6>
 8008976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008978:	2b00      	cmp	r3, #0
 800897a:	f43f ae5e 	beq.w	800863a <_strtod_l+0x72>
 800897e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008980:	dd78      	ble.n	8008a74 <_strtod_l+0x4ac>
 8008982:	2b16      	cmp	r3, #22
 8008984:	dc5f      	bgt.n	8008a46 <_strtod_l+0x47e>
 8008986:	4974      	ldr	r1, [pc, #464]	@ (8008b58 <_strtod_l+0x590>)
 8008988:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800898c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008990:	4652      	mov	r2, sl
 8008992:	465b      	mov	r3, fp
 8008994:	f7f7 fe58 	bl	8000648 <__aeabi_dmul>
 8008998:	4682      	mov	sl, r0
 800899a:	468b      	mov	fp, r1
 800899c:	e64d      	b.n	800863a <_strtod_l+0x72>
 800899e:	4b6e      	ldr	r3, [pc, #440]	@ (8008b58 <_strtod_l+0x590>)
 80089a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80089a8:	f7f7 fe4e 	bl	8000648 <__aeabi_dmul>
 80089ac:	4682      	mov	sl, r0
 80089ae:	9808      	ldr	r0, [sp, #32]
 80089b0:	468b      	mov	fp, r1
 80089b2:	f7f7 fdcf 	bl	8000554 <__aeabi_ui2d>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4650      	mov	r0, sl
 80089bc:	4659      	mov	r1, fp
 80089be:	f7f7 fc8d 	bl	80002dc <__adddf3>
 80089c2:	2d0f      	cmp	r5, #15
 80089c4:	4682      	mov	sl, r0
 80089c6:	468b      	mov	fp, r1
 80089c8:	ddd5      	ble.n	8008976 <_strtod_l+0x3ae>
 80089ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089cc:	1b2c      	subs	r4, r5, r4
 80089ce:	441c      	add	r4, r3
 80089d0:	2c00      	cmp	r4, #0
 80089d2:	f340 8096 	ble.w	8008b02 <_strtod_l+0x53a>
 80089d6:	f014 030f 	ands.w	r3, r4, #15
 80089da:	d00a      	beq.n	80089f2 <_strtod_l+0x42a>
 80089dc:	495e      	ldr	r1, [pc, #376]	@ (8008b58 <_strtod_l+0x590>)
 80089de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089e2:	4652      	mov	r2, sl
 80089e4:	465b      	mov	r3, fp
 80089e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ea:	f7f7 fe2d 	bl	8000648 <__aeabi_dmul>
 80089ee:	4682      	mov	sl, r0
 80089f0:	468b      	mov	fp, r1
 80089f2:	f034 040f 	bics.w	r4, r4, #15
 80089f6:	d073      	beq.n	8008ae0 <_strtod_l+0x518>
 80089f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80089fc:	dd48      	ble.n	8008a90 <_strtod_l+0x4c8>
 80089fe:	2400      	movs	r4, #0
 8008a00:	46a0      	mov	r8, r4
 8008a02:	940a      	str	r4, [sp, #40]	@ 0x28
 8008a04:	46a1      	mov	r9, r4
 8008a06:	9a05      	ldr	r2, [sp, #20]
 8008a08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008b60 <_strtod_l+0x598>
 8008a0c:	2322      	movs	r3, #34	@ 0x22
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	f04f 0a00 	mov.w	sl, #0
 8008a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f43f ae0f 	beq.w	800863a <_strtod_l+0x72>
 8008a1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a1e:	9805      	ldr	r0, [sp, #20]
 8008a20:	f7ff f942 	bl	8007ca8 <_Bfree>
 8008a24:	9805      	ldr	r0, [sp, #20]
 8008a26:	4649      	mov	r1, r9
 8008a28:	f7ff f93e 	bl	8007ca8 <_Bfree>
 8008a2c:	9805      	ldr	r0, [sp, #20]
 8008a2e:	4641      	mov	r1, r8
 8008a30:	f7ff f93a 	bl	8007ca8 <_Bfree>
 8008a34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a36:	9805      	ldr	r0, [sp, #20]
 8008a38:	f7ff f936 	bl	8007ca8 <_Bfree>
 8008a3c:	9805      	ldr	r0, [sp, #20]
 8008a3e:	4621      	mov	r1, r4
 8008a40:	f7ff f932 	bl	8007ca8 <_Bfree>
 8008a44:	e5f9      	b.n	800863a <_strtod_l+0x72>
 8008a46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	dbbc      	blt.n	80089ca <_strtod_l+0x402>
 8008a50:	4c41      	ldr	r4, [pc, #260]	@ (8008b58 <_strtod_l+0x590>)
 8008a52:	f1c5 050f 	rsb	r5, r5, #15
 8008a56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	465b      	mov	r3, fp
 8008a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a62:	f7f7 fdf1 	bl	8000648 <__aeabi_dmul>
 8008a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a68:	1b5d      	subs	r5, r3, r5
 8008a6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a72:	e78f      	b.n	8008994 <_strtod_l+0x3cc>
 8008a74:	3316      	adds	r3, #22
 8008a76:	dba8      	blt.n	80089ca <_strtod_l+0x402>
 8008a78:	4b37      	ldr	r3, [pc, #220]	@ (8008b58 <_strtod_l+0x590>)
 8008a7a:	eba9 0808 	sub.w	r8, r9, r8
 8008a7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008a82:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a86:	4650      	mov	r0, sl
 8008a88:	4659      	mov	r1, fp
 8008a8a:	f7f7 ff07 	bl	800089c <__aeabi_ddiv>
 8008a8e:	e783      	b.n	8008998 <_strtod_l+0x3d0>
 8008a90:	4b32      	ldr	r3, [pc, #200]	@ (8008b5c <_strtod_l+0x594>)
 8008a92:	9308      	str	r3, [sp, #32]
 8008a94:	2300      	movs	r3, #0
 8008a96:	1124      	asrs	r4, r4, #4
 8008a98:	4650      	mov	r0, sl
 8008a9a:	4659      	mov	r1, fp
 8008a9c:	461e      	mov	r6, r3
 8008a9e:	2c01      	cmp	r4, #1
 8008aa0:	dc21      	bgt.n	8008ae6 <_strtod_l+0x51e>
 8008aa2:	b10b      	cbz	r3, 8008aa8 <_strtod_l+0x4e0>
 8008aa4:	4682      	mov	sl, r0
 8008aa6:	468b      	mov	fp, r1
 8008aa8:	492c      	ldr	r1, [pc, #176]	@ (8008b5c <_strtod_l+0x594>)
 8008aaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008aae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	465b      	mov	r3, fp
 8008ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aba:	f7f7 fdc5 	bl	8000648 <__aeabi_dmul>
 8008abe:	4b28      	ldr	r3, [pc, #160]	@ (8008b60 <_strtod_l+0x598>)
 8008ac0:	460a      	mov	r2, r1
 8008ac2:	400b      	ands	r3, r1
 8008ac4:	4927      	ldr	r1, [pc, #156]	@ (8008b64 <_strtod_l+0x59c>)
 8008ac6:	428b      	cmp	r3, r1
 8008ac8:	4682      	mov	sl, r0
 8008aca:	d898      	bhi.n	80089fe <_strtod_l+0x436>
 8008acc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	bf86      	itte	hi
 8008ad4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008b68 <_strtod_l+0x5a0>
 8008ad8:	f04f 3aff 	movhi.w	sl, #4294967295
 8008adc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9308      	str	r3, [sp, #32]
 8008ae4:	e07a      	b.n	8008bdc <_strtod_l+0x614>
 8008ae6:	07e2      	lsls	r2, r4, #31
 8008ae8:	d505      	bpl.n	8008af6 <_strtod_l+0x52e>
 8008aea:	9b08      	ldr	r3, [sp, #32]
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fdaa 	bl	8000648 <__aeabi_dmul>
 8008af4:	2301      	movs	r3, #1
 8008af6:	9a08      	ldr	r2, [sp, #32]
 8008af8:	3208      	adds	r2, #8
 8008afa:	3601      	adds	r6, #1
 8008afc:	1064      	asrs	r4, r4, #1
 8008afe:	9208      	str	r2, [sp, #32]
 8008b00:	e7cd      	b.n	8008a9e <_strtod_l+0x4d6>
 8008b02:	d0ed      	beq.n	8008ae0 <_strtod_l+0x518>
 8008b04:	4264      	negs	r4, r4
 8008b06:	f014 020f 	ands.w	r2, r4, #15
 8008b0a:	d00a      	beq.n	8008b22 <_strtod_l+0x55a>
 8008b0c:	4b12      	ldr	r3, [pc, #72]	@ (8008b58 <_strtod_l+0x590>)
 8008b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b12:	4650      	mov	r0, sl
 8008b14:	4659      	mov	r1, fp
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 febf 	bl	800089c <__aeabi_ddiv>
 8008b1e:	4682      	mov	sl, r0
 8008b20:	468b      	mov	fp, r1
 8008b22:	1124      	asrs	r4, r4, #4
 8008b24:	d0dc      	beq.n	8008ae0 <_strtod_l+0x518>
 8008b26:	2c1f      	cmp	r4, #31
 8008b28:	dd20      	ble.n	8008b6c <_strtod_l+0x5a4>
 8008b2a:	2400      	movs	r4, #0
 8008b2c:	46a0      	mov	r8, r4
 8008b2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008b30:	46a1      	mov	r9, r4
 8008b32:	9a05      	ldr	r2, [sp, #20]
 8008b34:	2322      	movs	r3, #34	@ 0x22
 8008b36:	f04f 0a00 	mov.w	sl, #0
 8008b3a:	f04f 0b00 	mov.w	fp, #0
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	e768      	b.n	8008a14 <_strtod_l+0x44c>
 8008b42:	bf00      	nop
 8008b44:	0800a4a5 	.word	0x0800a4a5
 8008b48:	0800a6bc 	.word	0x0800a6bc
 8008b4c:	0800a49d 	.word	0x0800a49d
 8008b50:	0800a4d4 	.word	0x0800a4d4
 8008b54:	0800a865 	.word	0x0800a865
 8008b58:	0800a5f0 	.word	0x0800a5f0
 8008b5c:	0800a5c8 	.word	0x0800a5c8
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	7ca00000 	.word	0x7ca00000
 8008b68:	7fefffff 	.word	0x7fefffff
 8008b6c:	f014 0310 	ands.w	r3, r4, #16
 8008b70:	bf18      	it	ne
 8008b72:	236a      	movne	r3, #106	@ 0x6a
 8008b74:	4ea9      	ldr	r6, [pc, #676]	@ (8008e1c <_strtod_l+0x854>)
 8008b76:	9308      	str	r3, [sp, #32]
 8008b78:	4650      	mov	r0, sl
 8008b7a:	4659      	mov	r1, fp
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	07e2      	lsls	r2, r4, #31
 8008b80:	d504      	bpl.n	8008b8c <_strtod_l+0x5c4>
 8008b82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b86:	f7f7 fd5f 	bl	8000648 <__aeabi_dmul>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	1064      	asrs	r4, r4, #1
 8008b8e:	f106 0608 	add.w	r6, r6, #8
 8008b92:	d1f4      	bne.n	8008b7e <_strtod_l+0x5b6>
 8008b94:	b10b      	cbz	r3, 8008b9a <_strtod_l+0x5d2>
 8008b96:	4682      	mov	sl, r0
 8008b98:	468b      	mov	fp, r1
 8008b9a:	9b08      	ldr	r3, [sp, #32]
 8008b9c:	b1b3      	cbz	r3, 8008bcc <_strtod_l+0x604>
 8008b9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008ba2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	4659      	mov	r1, fp
 8008baa:	dd0f      	ble.n	8008bcc <_strtod_l+0x604>
 8008bac:	2b1f      	cmp	r3, #31
 8008bae:	dd55      	ble.n	8008c5c <_strtod_l+0x694>
 8008bb0:	2b34      	cmp	r3, #52	@ 0x34
 8008bb2:	bfde      	ittt	le
 8008bb4:	f04f 33ff 	movle.w	r3, #4294967295
 8008bb8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008bbc:	4093      	lslle	r3, r2
 8008bbe:	f04f 0a00 	mov.w	sl, #0
 8008bc2:	bfcc      	ite	gt
 8008bc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008bc8:	ea03 0b01 	andle.w	fp, r3, r1
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4650      	mov	r0, sl
 8008bd2:	4659      	mov	r1, fp
 8008bd4:	f7f7 ffa0 	bl	8000b18 <__aeabi_dcmpeq>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d1a6      	bne.n	8008b2a <_strtod_l+0x562>
 8008bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008be2:	9805      	ldr	r0, [sp, #20]
 8008be4:	462b      	mov	r3, r5
 8008be6:	463a      	mov	r2, r7
 8008be8:	f7ff f8c6 	bl	8007d78 <__s2b>
 8008bec:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f43f af05 	beq.w	80089fe <_strtod_l+0x436>
 8008bf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	eba9 0308 	sub.w	r3, r9, r8
 8008bfc:	bfa8      	it	ge
 8008bfe:	2300      	movge	r3, #0
 8008c00:	9312      	str	r3, [sp, #72]	@ 0x48
 8008c02:	2400      	movs	r4, #0
 8008c04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008c08:	9316      	str	r3, [sp, #88]	@ 0x58
 8008c0a:	46a0      	mov	r8, r4
 8008c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c0e:	9805      	ldr	r0, [sp, #20]
 8008c10:	6859      	ldr	r1, [r3, #4]
 8008c12:	f7ff f809 	bl	8007c28 <_Balloc>
 8008c16:	4681      	mov	r9, r0
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	f43f aef4 	beq.w	8008a06 <_strtod_l+0x43e>
 8008c1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c20:	691a      	ldr	r2, [r3, #16]
 8008c22:	3202      	adds	r2, #2
 8008c24:	f103 010c 	add.w	r1, r3, #12
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	300c      	adds	r0, #12
 8008c2c:	f000 fd72 	bl	8009714 <memcpy>
 8008c30:	ec4b ab10 	vmov	d0, sl, fp
 8008c34:	9805      	ldr	r0, [sp, #20]
 8008c36:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c38:	a91b      	add	r1, sp, #108	@ 0x6c
 8008c3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008c3e:	f7ff fbd7 	bl	80083f0 <__d2b>
 8008c42:	901a      	str	r0, [sp, #104]	@ 0x68
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f43f aede 	beq.w	8008a06 <_strtod_l+0x43e>
 8008c4a:	9805      	ldr	r0, [sp, #20]
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	f7ff f929 	bl	8007ea4 <__i2b>
 8008c52:	4680      	mov	r8, r0
 8008c54:	b948      	cbnz	r0, 8008c6a <_strtod_l+0x6a2>
 8008c56:	f04f 0800 	mov.w	r8, #0
 8008c5a:	e6d4      	b.n	8008a06 <_strtod_l+0x43e>
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c60:	fa02 f303 	lsl.w	r3, r2, r3
 8008c64:	ea03 0a0a 	and.w	sl, r3, sl
 8008c68:	e7b0      	b.n	8008bcc <_strtod_l+0x604>
 8008c6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008c6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	bfab      	itete	ge
 8008c72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008c74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008c76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008c78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008c7a:	bfac      	ite	ge
 8008c7c:	18ef      	addge	r7, r5, r3
 8008c7e:	1b5e      	sublt	r6, r3, r5
 8008c80:	9b08      	ldr	r3, [sp, #32]
 8008c82:	1aed      	subs	r5, r5, r3
 8008c84:	4415      	add	r5, r2
 8008c86:	4b66      	ldr	r3, [pc, #408]	@ (8008e20 <_strtod_l+0x858>)
 8008c88:	3d01      	subs	r5, #1
 8008c8a:	429d      	cmp	r5, r3
 8008c8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c90:	da50      	bge.n	8008d34 <_strtod_l+0x76c>
 8008c92:	1b5b      	subs	r3, r3, r5
 8008c94:	2b1f      	cmp	r3, #31
 8008c96:	eba2 0203 	sub.w	r2, r2, r3
 8008c9a:	f04f 0101 	mov.w	r1, #1
 8008c9e:	dc3d      	bgt.n	8008d1c <_strtod_l+0x754>
 8008ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008caa:	18bd      	adds	r5, r7, r2
 8008cac:	9b08      	ldr	r3, [sp, #32]
 8008cae:	42af      	cmp	r7, r5
 8008cb0:	4416      	add	r6, r2
 8008cb2:	441e      	add	r6, r3
 8008cb4:	463b      	mov	r3, r7
 8008cb6:	bfa8      	it	ge
 8008cb8:	462b      	movge	r3, r5
 8008cba:	42b3      	cmp	r3, r6
 8008cbc:	bfa8      	it	ge
 8008cbe:	4633      	movge	r3, r6
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	bfc2      	ittt	gt
 8008cc4:	1aed      	subgt	r5, r5, r3
 8008cc6:	1af6      	subgt	r6, r6, r3
 8008cc8:	1aff      	subgt	r7, r7, r3
 8008cca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	dd16      	ble.n	8008cfe <_strtod_l+0x736>
 8008cd0:	4641      	mov	r1, r8
 8008cd2:	9805      	ldr	r0, [sp, #20]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f7ff f9a5 	bl	8008024 <__pow5mult>
 8008cda:	4680      	mov	r8, r0
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d0ba      	beq.n	8008c56 <_strtod_l+0x68e>
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ce4:	9805      	ldr	r0, [sp, #20]
 8008ce6:	f7ff f8f3 	bl	8007ed0 <__multiply>
 8008cea:	900e      	str	r0, [sp, #56]	@ 0x38
 8008cec:	2800      	cmp	r0, #0
 8008cee:	f43f ae8a 	beq.w	8008a06 <_strtod_l+0x43e>
 8008cf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cf4:	9805      	ldr	r0, [sp, #20]
 8008cf6:	f7fe ffd7 	bl	8007ca8 <_Bfree>
 8008cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	dc1d      	bgt.n	8008d3e <_strtod_l+0x776>
 8008d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	dd23      	ble.n	8008d50 <_strtod_l+0x788>
 8008d08:	4649      	mov	r1, r9
 8008d0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008d0c:	9805      	ldr	r0, [sp, #20]
 8008d0e:	f7ff f989 	bl	8008024 <__pow5mult>
 8008d12:	4681      	mov	r9, r0
 8008d14:	b9e0      	cbnz	r0, 8008d50 <_strtod_l+0x788>
 8008d16:	f04f 0900 	mov.w	r9, #0
 8008d1a:	e674      	b.n	8008a06 <_strtod_l+0x43e>
 8008d1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008d20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008d24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008d28:	35e2      	adds	r5, #226	@ 0xe2
 8008d2a:	fa01 f305 	lsl.w	r3, r1, r5
 8008d2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008d32:	e7ba      	b.n	8008caa <_strtod_l+0x6e2>
 8008d34:	2300      	movs	r3, #0
 8008d36:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d38:	2301      	movs	r3, #1
 8008d3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d3c:	e7b5      	b.n	8008caa <_strtod_l+0x6e2>
 8008d3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d40:	9805      	ldr	r0, [sp, #20]
 8008d42:	462a      	mov	r2, r5
 8008d44:	f7ff f9c8 	bl	80080d8 <__lshift>
 8008d48:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d1d9      	bne.n	8008d02 <_strtod_l+0x73a>
 8008d4e:	e65a      	b.n	8008a06 <_strtod_l+0x43e>
 8008d50:	2e00      	cmp	r6, #0
 8008d52:	dd07      	ble.n	8008d64 <_strtod_l+0x79c>
 8008d54:	4649      	mov	r1, r9
 8008d56:	9805      	ldr	r0, [sp, #20]
 8008d58:	4632      	mov	r2, r6
 8008d5a:	f7ff f9bd 	bl	80080d8 <__lshift>
 8008d5e:	4681      	mov	r9, r0
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d0d8      	beq.n	8008d16 <_strtod_l+0x74e>
 8008d64:	2f00      	cmp	r7, #0
 8008d66:	dd08      	ble.n	8008d7a <_strtod_l+0x7b2>
 8008d68:	4641      	mov	r1, r8
 8008d6a:	9805      	ldr	r0, [sp, #20]
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	f7ff f9b3 	bl	80080d8 <__lshift>
 8008d72:	4680      	mov	r8, r0
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f43f ae46 	beq.w	8008a06 <_strtod_l+0x43e>
 8008d7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d7c:	9805      	ldr	r0, [sp, #20]
 8008d7e:	464a      	mov	r2, r9
 8008d80:	f7ff fa32 	bl	80081e8 <__mdiff>
 8008d84:	4604      	mov	r4, r0
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f43f ae3d 	beq.w	8008a06 <_strtod_l+0x43e>
 8008d8c:	68c3      	ldr	r3, [r0, #12]
 8008d8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d90:	2300      	movs	r3, #0
 8008d92:	60c3      	str	r3, [r0, #12]
 8008d94:	4641      	mov	r1, r8
 8008d96:	f7ff fa0b 	bl	80081b0 <__mcmp>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	da46      	bge.n	8008e2c <_strtod_l+0x864>
 8008d9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008da0:	ea53 030a 	orrs.w	r3, r3, sl
 8008da4:	d16c      	bne.n	8008e80 <_strtod_l+0x8b8>
 8008da6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d168      	bne.n	8008e80 <_strtod_l+0x8b8>
 8008dae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008db2:	0d1b      	lsrs	r3, r3, #20
 8008db4:	051b      	lsls	r3, r3, #20
 8008db6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008dba:	d961      	bls.n	8008e80 <_strtod_l+0x8b8>
 8008dbc:	6963      	ldr	r3, [r4, #20]
 8008dbe:	b913      	cbnz	r3, 8008dc6 <_strtod_l+0x7fe>
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	dd5c      	ble.n	8008e80 <_strtod_l+0x8b8>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	2201      	movs	r2, #1
 8008dca:	9805      	ldr	r0, [sp, #20]
 8008dcc:	f7ff f984 	bl	80080d8 <__lshift>
 8008dd0:	4641      	mov	r1, r8
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	f7ff f9ec 	bl	80081b0 <__mcmp>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	dd51      	ble.n	8008e80 <_strtod_l+0x8b8>
 8008ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008de0:	9a08      	ldr	r2, [sp, #32]
 8008de2:	0d1b      	lsrs	r3, r3, #20
 8008de4:	051b      	lsls	r3, r3, #20
 8008de6:	2a00      	cmp	r2, #0
 8008de8:	d06b      	beq.n	8008ec2 <_strtod_l+0x8fa>
 8008dea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008dee:	d868      	bhi.n	8008ec2 <_strtod_l+0x8fa>
 8008df0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008df4:	f67f ae9d 	bls.w	8008b32 <_strtod_l+0x56a>
 8008df8:	4b0a      	ldr	r3, [pc, #40]	@ (8008e24 <_strtod_l+0x85c>)
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f7f7 fc22 	bl	8000648 <__aeabi_dmul>
 8008e04:	4b08      	ldr	r3, [pc, #32]	@ (8008e28 <_strtod_l+0x860>)
 8008e06:	400b      	ands	r3, r1
 8008e08:	4682      	mov	sl, r0
 8008e0a:	468b      	mov	fp, r1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f47f ae05 	bne.w	8008a1c <_strtod_l+0x454>
 8008e12:	9a05      	ldr	r2, [sp, #20]
 8008e14:	2322      	movs	r3, #34	@ 0x22
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	e600      	b.n	8008a1c <_strtod_l+0x454>
 8008e1a:	bf00      	nop
 8008e1c:	0800a6e8 	.word	0x0800a6e8
 8008e20:	fffffc02 	.word	0xfffffc02
 8008e24:	39500000 	.word	0x39500000
 8008e28:	7ff00000 	.word	0x7ff00000
 8008e2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e30:	d165      	bne.n	8008efe <_strtod_l+0x936>
 8008e32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e38:	b35a      	cbz	r2, 8008e92 <_strtod_l+0x8ca>
 8008e3a:	4a9f      	ldr	r2, [pc, #636]	@ (80090b8 <_strtod_l+0xaf0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d12b      	bne.n	8008e98 <_strtod_l+0x8d0>
 8008e40:	9b08      	ldr	r3, [sp, #32]
 8008e42:	4651      	mov	r1, sl
 8008e44:	b303      	cbz	r3, 8008e88 <_strtod_l+0x8c0>
 8008e46:	4b9d      	ldr	r3, [pc, #628]	@ (80090bc <_strtod_l+0xaf4>)
 8008e48:	465a      	mov	r2, fp
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008e50:	f04f 32ff 	mov.w	r2, #4294967295
 8008e54:	d81b      	bhi.n	8008e8e <_strtod_l+0x8c6>
 8008e56:	0d1b      	lsrs	r3, r3, #20
 8008e58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e60:	4299      	cmp	r1, r3
 8008e62:	d119      	bne.n	8008e98 <_strtod_l+0x8d0>
 8008e64:	4b96      	ldr	r3, [pc, #600]	@ (80090c0 <_strtod_l+0xaf8>)
 8008e66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d102      	bne.n	8008e72 <_strtod_l+0x8aa>
 8008e6c:	3101      	adds	r1, #1
 8008e6e:	f43f adca 	beq.w	8008a06 <_strtod_l+0x43e>
 8008e72:	4b92      	ldr	r3, [pc, #584]	@ (80090bc <_strtod_l+0xaf4>)
 8008e74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e76:	401a      	ands	r2, r3
 8008e78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008e7c:	f04f 0a00 	mov.w	sl, #0
 8008e80:	9b08      	ldr	r3, [sp, #32]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1b8      	bne.n	8008df8 <_strtod_l+0x830>
 8008e86:	e5c9      	b.n	8008a1c <_strtod_l+0x454>
 8008e88:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8c:	e7e8      	b.n	8008e60 <_strtod_l+0x898>
 8008e8e:	4613      	mov	r3, r2
 8008e90:	e7e6      	b.n	8008e60 <_strtod_l+0x898>
 8008e92:	ea53 030a 	orrs.w	r3, r3, sl
 8008e96:	d0a1      	beq.n	8008ddc <_strtod_l+0x814>
 8008e98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e9a:	b1db      	cbz	r3, 8008ed4 <_strtod_l+0x90c>
 8008e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e9e:	4213      	tst	r3, r2
 8008ea0:	d0ee      	beq.n	8008e80 <_strtod_l+0x8b8>
 8008ea2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ea4:	9a08      	ldr	r2, [sp, #32]
 8008ea6:	4650      	mov	r0, sl
 8008ea8:	4659      	mov	r1, fp
 8008eaa:	b1bb      	cbz	r3, 8008edc <_strtod_l+0x914>
 8008eac:	f7ff fb6e 	bl	800858c <sulp>
 8008eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eb4:	ec53 2b10 	vmov	r2, r3, d0
 8008eb8:	f7f7 fa10 	bl	80002dc <__adddf3>
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	468b      	mov	fp, r1
 8008ec0:	e7de      	b.n	8008e80 <_strtod_l+0x8b8>
 8008ec2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008ec6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008eca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008ece:	f04f 3aff 	mov.w	sl, #4294967295
 8008ed2:	e7d5      	b.n	8008e80 <_strtod_l+0x8b8>
 8008ed4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ed6:	ea13 0f0a 	tst.w	r3, sl
 8008eda:	e7e1      	b.n	8008ea0 <_strtod_l+0x8d8>
 8008edc:	f7ff fb56 	bl	800858c <sulp>
 8008ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ee4:	ec53 2b10 	vmov	r2, r3, d0
 8008ee8:	f7f7 f9f6 	bl	80002d8 <__aeabi_dsub>
 8008eec:	2200      	movs	r2, #0
 8008eee:	2300      	movs	r3, #0
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	468b      	mov	fp, r1
 8008ef4:	f7f7 fe10 	bl	8000b18 <__aeabi_dcmpeq>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d0c1      	beq.n	8008e80 <_strtod_l+0x8b8>
 8008efc:	e619      	b.n	8008b32 <_strtod_l+0x56a>
 8008efe:	4641      	mov	r1, r8
 8008f00:	4620      	mov	r0, r4
 8008f02:	f7ff facd 	bl	80084a0 <__ratio>
 8008f06:	ec57 6b10 	vmov	r6, r7, d0
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008f10:	4630      	mov	r0, r6
 8008f12:	4639      	mov	r1, r7
 8008f14:	f7f7 fe14 	bl	8000b40 <__aeabi_dcmple>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d06f      	beq.n	8008ffc <_strtod_l+0xa34>
 8008f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d17a      	bne.n	8009018 <_strtod_l+0xa50>
 8008f22:	f1ba 0f00 	cmp.w	sl, #0
 8008f26:	d158      	bne.n	8008fda <_strtod_l+0xa12>
 8008f28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d15a      	bne.n	8008fe8 <_strtod_l+0xa20>
 8008f32:	4b64      	ldr	r3, [pc, #400]	@ (80090c4 <_strtod_l+0xafc>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	4630      	mov	r0, r6
 8008f38:	4639      	mov	r1, r7
 8008f3a:	f7f7 fdf7 	bl	8000b2c <__aeabi_dcmplt>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d159      	bne.n	8008ff6 <_strtod_l+0xa2e>
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	4b60      	ldr	r3, [pc, #384]	@ (80090c8 <_strtod_l+0xb00>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f7f7 fb7d 	bl	8000648 <__aeabi_dmul>
 8008f4e:	4606      	mov	r6, r0
 8008f50:	460f      	mov	r7, r1
 8008f52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008f56:	9606      	str	r6, [sp, #24]
 8008f58:	9307      	str	r3, [sp, #28]
 8008f5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f5e:	4d57      	ldr	r5, [pc, #348]	@ (80090bc <_strtod_l+0xaf4>)
 8008f60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f66:	401d      	ands	r5, r3
 8008f68:	4b58      	ldr	r3, [pc, #352]	@ (80090cc <_strtod_l+0xb04>)
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	f040 80b2 	bne.w	80090d4 <_strtod_l+0xb0c>
 8008f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008f76:	ec4b ab10 	vmov	d0, sl, fp
 8008f7a:	f7ff f9c9 	bl	8008310 <__ulp>
 8008f7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f82:	ec51 0b10 	vmov	r0, r1, d0
 8008f86:	f7f7 fb5f 	bl	8000648 <__aeabi_dmul>
 8008f8a:	4652      	mov	r2, sl
 8008f8c:	465b      	mov	r3, fp
 8008f8e:	f7f7 f9a5 	bl	80002dc <__adddf3>
 8008f92:	460b      	mov	r3, r1
 8008f94:	4949      	ldr	r1, [pc, #292]	@ (80090bc <_strtod_l+0xaf4>)
 8008f96:	4a4e      	ldr	r2, [pc, #312]	@ (80090d0 <_strtod_l+0xb08>)
 8008f98:	4019      	ands	r1, r3
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	4682      	mov	sl, r0
 8008f9e:	d942      	bls.n	8009026 <_strtod_l+0xa5e>
 8008fa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fa2:	4b47      	ldr	r3, [pc, #284]	@ (80090c0 <_strtod_l+0xaf8>)
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d103      	bne.n	8008fb0 <_strtod_l+0x9e8>
 8008fa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008faa:	3301      	adds	r3, #1
 8008fac:	f43f ad2b 	beq.w	8008a06 <_strtod_l+0x43e>
 8008fb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80090c0 <_strtod_l+0xaf8>
 8008fb4:	f04f 3aff 	mov.w	sl, #4294967295
 8008fb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fba:	9805      	ldr	r0, [sp, #20]
 8008fbc:	f7fe fe74 	bl	8007ca8 <_Bfree>
 8008fc0:	9805      	ldr	r0, [sp, #20]
 8008fc2:	4649      	mov	r1, r9
 8008fc4:	f7fe fe70 	bl	8007ca8 <_Bfree>
 8008fc8:	9805      	ldr	r0, [sp, #20]
 8008fca:	4641      	mov	r1, r8
 8008fcc:	f7fe fe6c 	bl	8007ca8 <_Bfree>
 8008fd0:	9805      	ldr	r0, [sp, #20]
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	f7fe fe68 	bl	8007ca8 <_Bfree>
 8008fd8:	e618      	b.n	8008c0c <_strtod_l+0x644>
 8008fda:	f1ba 0f01 	cmp.w	sl, #1
 8008fde:	d103      	bne.n	8008fe8 <_strtod_l+0xa20>
 8008fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f43f ada5 	beq.w	8008b32 <_strtod_l+0x56a>
 8008fe8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009098 <_strtod_l+0xad0>
 8008fec:	4f35      	ldr	r7, [pc, #212]	@ (80090c4 <_strtod_l+0xafc>)
 8008fee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ff2:	2600      	movs	r6, #0
 8008ff4:	e7b1      	b.n	8008f5a <_strtod_l+0x992>
 8008ff6:	4f34      	ldr	r7, [pc, #208]	@ (80090c8 <_strtod_l+0xb00>)
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	e7aa      	b.n	8008f52 <_strtod_l+0x98a>
 8008ffc:	4b32      	ldr	r3, [pc, #200]	@ (80090c8 <_strtod_l+0xb00>)
 8008ffe:	4630      	mov	r0, r6
 8009000:	4639      	mov	r1, r7
 8009002:	2200      	movs	r2, #0
 8009004:	f7f7 fb20 	bl	8000648 <__aeabi_dmul>
 8009008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800900a:	4606      	mov	r6, r0
 800900c:	460f      	mov	r7, r1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d09f      	beq.n	8008f52 <_strtod_l+0x98a>
 8009012:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009016:	e7a0      	b.n	8008f5a <_strtod_l+0x992>
 8009018:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80090a0 <_strtod_l+0xad8>
 800901c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009020:	ec57 6b17 	vmov	r6, r7, d7
 8009024:	e799      	b.n	8008f5a <_strtod_l+0x992>
 8009026:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1c1      	bne.n	8008fb8 <_strtod_l+0x9f0>
 8009034:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009038:	0d1b      	lsrs	r3, r3, #20
 800903a:	051b      	lsls	r3, r3, #20
 800903c:	429d      	cmp	r5, r3
 800903e:	d1bb      	bne.n	8008fb8 <_strtod_l+0x9f0>
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 fe60 	bl	8000d08 <__aeabi_d2lz>
 8009048:	f7f7 fad0 	bl	80005ec <__aeabi_l2d>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 f940 	bl	80002d8 <__aeabi_dsub>
 8009058:	460b      	mov	r3, r1
 800905a:	4602      	mov	r2, r0
 800905c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009060:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009066:	ea46 060a 	orr.w	r6, r6, sl
 800906a:	431e      	orrs	r6, r3
 800906c:	d06f      	beq.n	800914e <_strtod_l+0xb86>
 800906e:	a30e      	add	r3, pc, #56	@ (adr r3, 80090a8 <_strtod_l+0xae0>)
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f7f7 fd5a 	bl	8000b2c <__aeabi_dcmplt>
 8009078:	2800      	cmp	r0, #0
 800907a:	f47f accf 	bne.w	8008a1c <_strtod_l+0x454>
 800907e:	a30c      	add	r3, pc, #48	@ (adr r3, 80090b0 <_strtod_l+0xae8>)
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009088:	f7f7 fd6e 	bl	8000b68 <__aeabi_dcmpgt>
 800908c:	2800      	cmp	r0, #0
 800908e:	d093      	beq.n	8008fb8 <_strtod_l+0x9f0>
 8009090:	e4c4      	b.n	8008a1c <_strtod_l+0x454>
 8009092:	bf00      	nop
 8009094:	f3af 8000 	nop.w
 8009098:	00000000 	.word	0x00000000
 800909c:	bff00000 	.word	0xbff00000
 80090a0:	00000000 	.word	0x00000000
 80090a4:	3ff00000 	.word	0x3ff00000
 80090a8:	94a03595 	.word	0x94a03595
 80090ac:	3fdfffff 	.word	0x3fdfffff
 80090b0:	35afe535 	.word	0x35afe535
 80090b4:	3fe00000 	.word	0x3fe00000
 80090b8:	000fffff 	.word	0x000fffff
 80090bc:	7ff00000 	.word	0x7ff00000
 80090c0:	7fefffff 	.word	0x7fefffff
 80090c4:	3ff00000 	.word	0x3ff00000
 80090c8:	3fe00000 	.word	0x3fe00000
 80090cc:	7fe00000 	.word	0x7fe00000
 80090d0:	7c9fffff 	.word	0x7c9fffff
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	b323      	cbz	r3, 8009122 <_strtod_l+0xb5a>
 80090d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80090dc:	d821      	bhi.n	8009122 <_strtod_l+0xb5a>
 80090de:	a328      	add	r3, pc, #160	@ (adr r3, 8009180 <_strtod_l+0xbb8>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	f7f7 fd2a 	bl	8000b40 <__aeabi_dcmple>
 80090ec:	b1a0      	cbz	r0, 8009118 <_strtod_l+0xb50>
 80090ee:	4639      	mov	r1, r7
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7f7 fd81 	bl	8000bf8 <__aeabi_d2uiz>
 80090f6:	2801      	cmp	r0, #1
 80090f8:	bf38      	it	cc
 80090fa:	2001      	movcc	r0, #1
 80090fc:	f7f7 fa2a 	bl	8000554 <__aeabi_ui2d>
 8009100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	b9fb      	cbnz	r3, 8009148 <_strtod_l+0xb80>
 8009108:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800910c:	9014      	str	r0, [sp, #80]	@ 0x50
 800910e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009110:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009114:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009118:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800911a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800911e:	1b5b      	subs	r3, r3, r5
 8009120:	9311      	str	r3, [sp, #68]	@ 0x44
 8009122:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009126:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800912a:	f7ff f8f1 	bl	8008310 <__ulp>
 800912e:	4650      	mov	r0, sl
 8009130:	ec53 2b10 	vmov	r2, r3, d0
 8009134:	4659      	mov	r1, fp
 8009136:	f7f7 fa87 	bl	8000648 <__aeabi_dmul>
 800913a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800913e:	f7f7 f8cd 	bl	80002dc <__adddf3>
 8009142:	4682      	mov	sl, r0
 8009144:	468b      	mov	fp, r1
 8009146:	e770      	b.n	800902a <_strtod_l+0xa62>
 8009148:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800914c:	e7e0      	b.n	8009110 <_strtod_l+0xb48>
 800914e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009188 <_strtod_l+0xbc0>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f7f7 fcea 	bl	8000b2c <__aeabi_dcmplt>
 8009158:	e798      	b.n	800908c <_strtod_l+0xac4>
 800915a:	2300      	movs	r3, #0
 800915c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800915e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	f7ff ba6d 	b.w	8008642 <_strtod_l+0x7a>
 8009168:	2a65      	cmp	r2, #101	@ 0x65
 800916a:	f43f ab66 	beq.w	800883a <_strtod_l+0x272>
 800916e:	2a45      	cmp	r2, #69	@ 0x45
 8009170:	f43f ab63 	beq.w	800883a <_strtod_l+0x272>
 8009174:	2301      	movs	r3, #1
 8009176:	f7ff bb9e 	b.w	80088b6 <_strtod_l+0x2ee>
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w
 8009180:	ffc00000 	.word	0xffc00000
 8009184:	41dfffff 	.word	0x41dfffff
 8009188:	94a03595 	.word	0x94a03595
 800918c:	3fcfffff 	.word	0x3fcfffff

08009190 <_strtod_r>:
 8009190:	4b01      	ldr	r3, [pc, #4]	@ (8009198 <_strtod_r+0x8>)
 8009192:	f7ff ba19 	b.w	80085c8 <_strtod_l>
 8009196:	bf00      	nop
 8009198:	20000080 	.word	0x20000080

0800919c <_strtol_l.constprop.0>:
 800919c:	2b24      	cmp	r3, #36	@ 0x24
 800919e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a2:	4686      	mov	lr, r0
 80091a4:	4690      	mov	r8, r2
 80091a6:	d801      	bhi.n	80091ac <_strtol_l.constprop.0+0x10>
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d106      	bne.n	80091ba <_strtol_l.constprop.0+0x1e>
 80091ac:	f7fd fdbc 	bl	8006d28 <__errno>
 80091b0:	2316      	movs	r3, #22
 80091b2:	6003      	str	r3, [r0, #0]
 80091b4:	2000      	movs	r0, #0
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	4834      	ldr	r0, [pc, #208]	@ (800928c <_strtol_l.constprop.0+0xf0>)
 80091bc:	460d      	mov	r5, r1
 80091be:	462a      	mov	r2, r5
 80091c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091c4:	5d06      	ldrb	r6, [r0, r4]
 80091c6:	f016 0608 	ands.w	r6, r6, #8
 80091ca:	d1f8      	bne.n	80091be <_strtol_l.constprop.0+0x22>
 80091cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80091ce:	d12d      	bne.n	800922c <_strtol_l.constprop.0+0x90>
 80091d0:	782c      	ldrb	r4, [r5, #0]
 80091d2:	2601      	movs	r6, #1
 80091d4:	1c95      	adds	r5, r2, #2
 80091d6:	f033 0210 	bics.w	r2, r3, #16
 80091da:	d109      	bne.n	80091f0 <_strtol_l.constprop.0+0x54>
 80091dc:	2c30      	cmp	r4, #48	@ 0x30
 80091de:	d12a      	bne.n	8009236 <_strtol_l.constprop.0+0x9a>
 80091e0:	782a      	ldrb	r2, [r5, #0]
 80091e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091e6:	2a58      	cmp	r2, #88	@ 0x58
 80091e8:	d125      	bne.n	8009236 <_strtol_l.constprop.0+0x9a>
 80091ea:	786c      	ldrb	r4, [r5, #1]
 80091ec:	2310      	movs	r3, #16
 80091ee:	3502      	adds	r5, #2
 80091f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80091f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091f8:	2200      	movs	r2, #0
 80091fa:	fbbc f9f3 	udiv	r9, ip, r3
 80091fe:	4610      	mov	r0, r2
 8009200:	fb03 ca19 	mls	sl, r3, r9, ip
 8009204:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009208:	2f09      	cmp	r7, #9
 800920a:	d81b      	bhi.n	8009244 <_strtol_l.constprop.0+0xa8>
 800920c:	463c      	mov	r4, r7
 800920e:	42a3      	cmp	r3, r4
 8009210:	dd27      	ble.n	8009262 <_strtol_l.constprop.0+0xc6>
 8009212:	1c57      	adds	r7, r2, #1
 8009214:	d007      	beq.n	8009226 <_strtol_l.constprop.0+0x8a>
 8009216:	4581      	cmp	r9, r0
 8009218:	d320      	bcc.n	800925c <_strtol_l.constprop.0+0xc0>
 800921a:	d101      	bne.n	8009220 <_strtol_l.constprop.0+0x84>
 800921c:	45a2      	cmp	sl, r4
 800921e:	db1d      	blt.n	800925c <_strtol_l.constprop.0+0xc0>
 8009220:	fb00 4003 	mla	r0, r0, r3, r4
 8009224:	2201      	movs	r2, #1
 8009226:	f815 4b01 	ldrb.w	r4, [r5], #1
 800922a:	e7eb      	b.n	8009204 <_strtol_l.constprop.0+0x68>
 800922c:	2c2b      	cmp	r4, #43	@ 0x2b
 800922e:	bf04      	itt	eq
 8009230:	782c      	ldrbeq	r4, [r5, #0]
 8009232:	1c95      	addeq	r5, r2, #2
 8009234:	e7cf      	b.n	80091d6 <_strtol_l.constprop.0+0x3a>
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1da      	bne.n	80091f0 <_strtol_l.constprop.0+0x54>
 800923a:	2c30      	cmp	r4, #48	@ 0x30
 800923c:	bf0c      	ite	eq
 800923e:	2308      	moveq	r3, #8
 8009240:	230a      	movne	r3, #10
 8009242:	e7d5      	b.n	80091f0 <_strtol_l.constprop.0+0x54>
 8009244:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009248:	2f19      	cmp	r7, #25
 800924a:	d801      	bhi.n	8009250 <_strtol_l.constprop.0+0xb4>
 800924c:	3c37      	subs	r4, #55	@ 0x37
 800924e:	e7de      	b.n	800920e <_strtol_l.constprop.0+0x72>
 8009250:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009254:	2f19      	cmp	r7, #25
 8009256:	d804      	bhi.n	8009262 <_strtol_l.constprop.0+0xc6>
 8009258:	3c57      	subs	r4, #87	@ 0x57
 800925a:	e7d8      	b.n	800920e <_strtol_l.constprop.0+0x72>
 800925c:	f04f 32ff 	mov.w	r2, #4294967295
 8009260:	e7e1      	b.n	8009226 <_strtol_l.constprop.0+0x8a>
 8009262:	1c53      	adds	r3, r2, #1
 8009264:	d108      	bne.n	8009278 <_strtol_l.constprop.0+0xdc>
 8009266:	2322      	movs	r3, #34	@ 0x22
 8009268:	f8ce 3000 	str.w	r3, [lr]
 800926c:	4660      	mov	r0, ip
 800926e:	f1b8 0f00 	cmp.w	r8, #0
 8009272:	d0a0      	beq.n	80091b6 <_strtol_l.constprop.0+0x1a>
 8009274:	1e69      	subs	r1, r5, #1
 8009276:	e006      	b.n	8009286 <_strtol_l.constprop.0+0xea>
 8009278:	b106      	cbz	r6, 800927c <_strtol_l.constprop.0+0xe0>
 800927a:	4240      	negs	r0, r0
 800927c:	f1b8 0f00 	cmp.w	r8, #0
 8009280:	d099      	beq.n	80091b6 <_strtol_l.constprop.0+0x1a>
 8009282:	2a00      	cmp	r2, #0
 8009284:	d1f6      	bne.n	8009274 <_strtol_l.constprop.0+0xd8>
 8009286:	f8c8 1000 	str.w	r1, [r8]
 800928a:	e794      	b.n	80091b6 <_strtol_l.constprop.0+0x1a>
 800928c:	0800a711 	.word	0x0800a711

08009290 <_strtol_r>:
 8009290:	f7ff bf84 	b.w	800919c <_strtol_l.constprop.0>

08009294 <__ssputs_r>:
 8009294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009298:	688e      	ldr	r6, [r1, #8]
 800929a:	461f      	mov	r7, r3
 800929c:	42be      	cmp	r6, r7
 800929e:	680b      	ldr	r3, [r1, #0]
 80092a0:	4682      	mov	sl, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	4690      	mov	r8, r2
 80092a6:	d82d      	bhi.n	8009304 <__ssputs_r+0x70>
 80092a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092b0:	d026      	beq.n	8009300 <__ssputs_r+0x6c>
 80092b2:	6965      	ldr	r5, [r4, #20]
 80092b4:	6909      	ldr	r1, [r1, #16]
 80092b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092ba:	eba3 0901 	sub.w	r9, r3, r1
 80092be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092c2:	1c7b      	adds	r3, r7, #1
 80092c4:	444b      	add	r3, r9
 80092c6:	106d      	asrs	r5, r5, #1
 80092c8:	429d      	cmp	r5, r3
 80092ca:	bf38      	it	cc
 80092cc:	461d      	movcc	r5, r3
 80092ce:	0553      	lsls	r3, r2, #21
 80092d0:	d527      	bpl.n	8009322 <__ssputs_r+0x8e>
 80092d2:	4629      	mov	r1, r5
 80092d4:	f7fe fc1c 	bl	8007b10 <_malloc_r>
 80092d8:	4606      	mov	r6, r0
 80092da:	b360      	cbz	r0, 8009336 <__ssputs_r+0xa2>
 80092dc:	6921      	ldr	r1, [r4, #16]
 80092de:	464a      	mov	r2, r9
 80092e0:	f000 fa18 	bl	8009714 <memcpy>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80092ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	6126      	str	r6, [r4, #16]
 80092f2:	6165      	str	r5, [r4, #20]
 80092f4:	444e      	add	r6, r9
 80092f6:	eba5 0509 	sub.w	r5, r5, r9
 80092fa:	6026      	str	r6, [r4, #0]
 80092fc:	60a5      	str	r5, [r4, #8]
 80092fe:	463e      	mov	r6, r7
 8009300:	42be      	cmp	r6, r7
 8009302:	d900      	bls.n	8009306 <__ssputs_r+0x72>
 8009304:	463e      	mov	r6, r7
 8009306:	6820      	ldr	r0, [r4, #0]
 8009308:	4632      	mov	r2, r6
 800930a:	4641      	mov	r1, r8
 800930c:	f000 f9c6 	bl	800969c <memmove>
 8009310:	68a3      	ldr	r3, [r4, #8]
 8009312:	1b9b      	subs	r3, r3, r6
 8009314:	60a3      	str	r3, [r4, #8]
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	4433      	add	r3, r6
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	2000      	movs	r0, #0
 800931e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009322:	462a      	mov	r2, r5
 8009324:	f000 fd89 	bl	8009e3a <_realloc_r>
 8009328:	4606      	mov	r6, r0
 800932a:	2800      	cmp	r0, #0
 800932c:	d1e0      	bne.n	80092f0 <__ssputs_r+0x5c>
 800932e:	6921      	ldr	r1, [r4, #16]
 8009330:	4650      	mov	r0, sl
 8009332:	f7fe fb79 	bl	8007a28 <_free_r>
 8009336:	230c      	movs	r3, #12
 8009338:	f8ca 3000 	str.w	r3, [sl]
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	e7e9      	b.n	800931e <__ssputs_r+0x8a>
	...

0800934c <_svfiprintf_r>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	4698      	mov	r8, r3
 8009352:	898b      	ldrh	r3, [r1, #12]
 8009354:	061b      	lsls	r3, r3, #24
 8009356:	b09d      	sub	sp, #116	@ 0x74
 8009358:	4607      	mov	r7, r0
 800935a:	460d      	mov	r5, r1
 800935c:	4614      	mov	r4, r2
 800935e:	d510      	bpl.n	8009382 <_svfiprintf_r+0x36>
 8009360:	690b      	ldr	r3, [r1, #16]
 8009362:	b973      	cbnz	r3, 8009382 <_svfiprintf_r+0x36>
 8009364:	2140      	movs	r1, #64	@ 0x40
 8009366:	f7fe fbd3 	bl	8007b10 <_malloc_r>
 800936a:	6028      	str	r0, [r5, #0]
 800936c:	6128      	str	r0, [r5, #16]
 800936e:	b930      	cbnz	r0, 800937e <_svfiprintf_r+0x32>
 8009370:	230c      	movs	r3, #12
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	b01d      	add	sp, #116	@ 0x74
 800937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937e:	2340      	movs	r3, #64	@ 0x40
 8009380:	616b      	str	r3, [r5, #20]
 8009382:	2300      	movs	r3, #0
 8009384:	9309      	str	r3, [sp, #36]	@ 0x24
 8009386:	2320      	movs	r3, #32
 8009388:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800938c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009390:	2330      	movs	r3, #48	@ 0x30
 8009392:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009530 <_svfiprintf_r+0x1e4>
 8009396:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800939a:	f04f 0901 	mov.w	r9, #1
 800939e:	4623      	mov	r3, r4
 80093a0:	469a      	mov	sl, r3
 80093a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a6:	b10a      	cbz	r2, 80093ac <_svfiprintf_r+0x60>
 80093a8:	2a25      	cmp	r2, #37	@ 0x25
 80093aa:	d1f9      	bne.n	80093a0 <_svfiprintf_r+0x54>
 80093ac:	ebba 0b04 	subs.w	fp, sl, r4
 80093b0:	d00b      	beq.n	80093ca <_svfiprintf_r+0x7e>
 80093b2:	465b      	mov	r3, fp
 80093b4:	4622      	mov	r2, r4
 80093b6:	4629      	mov	r1, r5
 80093b8:	4638      	mov	r0, r7
 80093ba:	f7ff ff6b 	bl	8009294 <__ssputs_r>
 80093be:	3001      	adds	r0, #1
 80093c0:	f000 80a7 	beq.w	8009512 <_svfiprintf_r+0x1c6>
 80093c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093c6:	445a      	add	r2, fp
 80093c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80093ca:	f89a 3000 	ldrb.w	r3, [sl]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 809f 	beq.w	8009512 <_svfiprintf_r+0x1c6>
 80093d4:	2300      	movs	r3, #0
 80093d6:	f04f 32ff 	mov.w	r2, #4294967295
 80093da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093de:	f10a 0a01 	add.w	sl, sl, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	9307      	str	r3, [sp, #28]
 80093e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80093ec:	4654      	mov	r4, sl
 80093ee:	2205      	movs	r2, #5
 80093f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f4:	484e      	ldr	r0, [pc, #312]	@ (8009530 <_svfiprintf_r+0x1e4>)
 80093f6:	f7f6 ff13 	bl	8000220 <memchr>
 80093fa:	9a04      	ldr	r2, [sp, #16]
 80093fc:	b9d8      	cbnz	r0, 8009436 <_svfiprintf_r+0xea>
 80093fe:	06d0      	lsls	r0, r2, #27
 8009400:	bf44      	itt	mi
 8009402:	2320      	movmi	r3, #32
 8009404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009408:	0711      	lsls	r1, r2, #28
 800940a:	bf44      	itt	mi
 800940c:	232b      	movmi	r3, #43	@ 0x2b
 800940e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009412:	f89a 3000 	ldrb.w	r3, [sl]
 8009416:	2b2a      	cmp	r3, #42	@ 0x2a
 8009418:	d015      	beq.n	8009446 <_svfiprintf_r+0xfa>
 800941a:	9a07      	ldr	r2, [sp, #28]
 800941c:	4654      	mov	r4, sl
 800941e:	2000      	movs	r0, #0
 8009420:	f04f 0c0a 	mov.w	ip, #10
 8009424:	4621      	mov	r1, r4
 8009426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942a:	3b30      	subs	r3, #48	@ 0x30
 800942c:	2b09      	cmp	r3, #9
 800942e:	d94b      	bls.n	80094c8 <_svfiprintf_r+0x17c>
 8009430:	b1b0      	cbz	r0, 8009460 <_svfiprintf_r+0x114>
 8009432:	9207      	str	r2, [sp, #28]
 8009434:	e014      	b.n	8009460 <_svfiprintf_r+0x114>
 8009436:	eba0 0308 	sub.w	r3, r0, r8
 800943a:	fa09 f303 	lsl.w	r3, r9, r3
 800943e:	4313      	orrs	r3, r2
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	46a2      	mov	sl, r4
 8009444:	e7d2      	b.n	80093ec <_svfiprintf_r+0xa0>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	1d19      	adds	r1, r3, #4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	9103      	str	r1, [sp, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfbb      	ittet	lt
 8009452:	425b      	neglt	r3, r3
 8009454:	f042 0202 	orrlt.w	r2, r2, #2
 8009458:	9307      	strge	r3, [sp, #28]
 800945a:	9307      	strlt	r3, [sp, #28]
 800945c:	bfb8      	it	lt
 800945e:	9204      	strlt	r2, [sp, #16]
 8009460:	7823      	ldrb	r3, [r4, #0]
 8009462:	2b2e      	cmp	r3, #46	@ 0x2e
 8009464:	d10a      	bne.n	800947c <_svfiprintf_r+0x130>
 8009466:	7863      	ldrb	r3, [r4, #1]
 8009468:	2b2a      	cmp	r3, #42	@ 0x2a
 800946a:	d132      	bne.n	80094d2 <_svfiprintf_r+0x186>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	1d1a      	adds	r2, r3, #4
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	9203      	str	r2, [sp, #12]
 8009474:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009478:	3402      	adds	r4, #2
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009540 <_svfiprintf_r+0x1f4>
 8009480:	7821      	ldrb	r1, [r4, #0]
 8009482:	2203      	movs	r2, #3
 8009484:	4650      	mov	r0, sl
 8009486:	f7f6 fecb 	bl	8000220 <memchr>
 800948a:	b138      	cbz	r0, 800949c <_svfiprintf_r+0x150>
 800948c:	9b04      	ldr	r3, [sp, #16]
 800948e:	eba0 000a 	sub.w	r0, r0, sl
 8009492:	2240      	movs	r2, #64	@ 0x40
 8009494:	4082      	lsls	r2, r0
 8009496:	4313      	orrs	r3, r2
 8009498:	3401      	adds	r4, #1
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a0:	4824      	ldr	r0, [pc, #144]	@ (8009534 <_svfiprintf_r+0x1e8>)
 80094a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094a6:	2206      	movs	r2, #6
 80094a8:	f7f6 feba 	bl	8000220 <memchr>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d036      	beq.n	800951e <_svfiprintf_r+0x1d2>
 80094b0:	4b21      	ldr	r3, [pc, #132]	@ (8009538 <_svfiprintf_r+0x1ec>)
 80094b2:	bb1b      	cbnz	r3, 80094fc <_svfiprintf_r+0x1b0>
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	3307      	adds	r3, #7
 80094b8:	f023 0307 	bic.w	r3, r3, #7
 80094bc:	3308      	adds	r3, #8
 80094be:	9303      	str	r3, [sp, #12]
 80094c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c2:	4433      	add	r3, r6
 80094c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c6:	e76a      	b.n	800939e <_svfiprintf_r+0x52>
 80094c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80094cc:	460c      	mov	r4, r1
 80094ce:	2001      	movs	r0, #1
 80094d0:	e7a8      	b.n	8009424 <_svfiprintf_r+0xd8>
 80094d2:	2300      	movs	r3, #0
 80094d4:	3401      	adds	r4, #1
 80094d6:	9305      	str	r3, [sp, #20]
 80094d8:	4619      	mov	r1, r3
 80094da:	f04f 0c0a 	mov.w	ip, #10
 80094de:	4620      	mov	r0, r4
 80094e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094e4:	3a30      	subs	r2, #48	@ 0x30
 80094e6:	2a09      	cmp	r2, #9
 80094e8:	d903      	bls.n	80094f2 <_svfiprintf_r+0x1a6>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0c6      	beq.n	800947c <_svfiprintf_r+0x130>
 80094ee:	9105      	str	r1, [sp, #20]
 80094f0:	e7c4      	b.n	800947c <_svfiprintf_r+0x130>
 80094f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094f6:	4604      	mov	r4, r0
 80094f8:	2301      	movs	r3, #1
 80094fa:	e7f0      	b.n	80094de <_svfiprintf_r+0x192>
 80094fc:	ab03      	add	r3, sp, #12
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	462a      	mov	r2, r5
 8009502:	4b0e      	ldr	r3, [pc, #56]	@ (800953c <_svfiprintf_r+0x1f0>)
 8009504:	a904      	add	r1, sp, #16
 8009506:	4638      	mov	r0, r7
 8009508:	f7fc fcca 	bl	8005ea0 <_printf_float>
 800950c:	1c42      	adds	r2, r0, #1
 800950e:	4606      	mov	r6, r0
 8009510:	d1d6      	bne.n	80094c0 <_svfiprintf_r+0x174>
 8009512:	89ab      	ldrh	r3, [r5, #12]
 8009514:	065b      	lsls	r3, r3, #25
 8009516:	f53f af2d 	bmi.w	8009374 <_svfiprintf_r+0x28>
 800951a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800951c:	e72c      	b.n	8009378 <_svfiprintf_r+0x2c>
 800951e:	ab03      	add	r3, sp, #12
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	462a      	mov	r2, r5
 8009524:	4b05      	ldr	r3, [pc, #20]	@ (800953c <_svfiprintf_r+0x1f0>)
 8009526:	a904      	add	r1, sp, #16
 8009528:	4638      	mov	r0, r7
 800952a:	f7fc ff51 	bl	80063d0 <_printf_i>
 800952e:	e7ed      	b.n	800950c <_svfiprintf_r+0x1c0>
 8009530:	0800a811 	.word	0x0800a811
 8009534:	0800a81b 	.word	0x0800a81b
 8009538:	08005ea1 	.word	0x08005ea1
 800953c:	08009295 	.word	0x08009295
 8009540:	0800a817 	.word	0x0800a817

08009544 <__sflush_r>:
 8009544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954c:	0716      	lsls	r6, r2, #28
 800954e:	4605      	mov	r5, r0
 8009550:	460c      	mov	r4, r1
 8009552:	d454      	bmi.n	80095fe <__sflush_r+0xba>
 8009554:	684b      	ldr	r3, [r1, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dc02      	bgt.n	8009560 <__sflush_r+0x1c>
 800955a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	dd48      	ble.n	80095f2 <__sflush_r+0xae>
 8009560:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009562:	2e00      	cmp	r6, #0
 8009564:	d045      	beq.n	80095f2 <__sflush_r+0xae>
 8009566:	2300      	movs	r3, #0
 8009568:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800956c:	682f      	ldr	r7, [r5, #0]
 800956e:	6a21      	ldr	r1, [r4, #32]
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	d030      	beq.n	80095d6 <__sflush_r+0x92>
 8009574:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	0759      	lsls	r1, r3, #29
 800957a:	d505      	bpl.n	8009588 <__sflush_r+0x44>
 800957c:	6863      	ldr	r3, [r4, #4]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009582:	b10b      	cbz	r3, 8009588 <__sflush_r+0x44>
 8009584:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009586:	1ad2      	subs	r2, r2, r3
 8009588:	2300      	movs	r3, #0
 800958a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800958c:	6a21      	ldr	r1, [r4, #32]
 800958e:	4628      	mov	r0, r5
 8009590:	47b0      	blx	r6
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	d106      	bne.n	80095a6 <__sflush_r+0x62>
 8009598:	6829      	ldr	r1, [r5, #0]
 800959a:	291d      	cmp	r1, #29
 800959c:	d82b      	bhi.n	80095f6 <__sflush_r+0xb2>
 800959e:	4a2a      	ldr	r2, [pc, #168]	@ (8009648 <__sflush_r+0x104>)
 80095a0:	410a      	asrs	r2, r1
 80095a2:	07d6      	lsls	r6, r2, #31
 80095a4:	d427      	bmi.n	80095f6 <__sflush_r+0xb2>
 80095a6:	2200      	movs	r2, #0
 80095a8:	6062      	str	r2, [r4, #4]
 80095aa:	04d9      	lsls	r1, r3, #19
 80095ac:	6922      	ldr	r2, [r4, #16]
 80095ae:	6022      	str	r2, [r4, #0]
 80095b0:	d504      	bpl.n	80095bc <__sflush_r+0x78>
 80095b2:	1c42      	adds	r2, r0, #1
 80095b4:	d101      	bne.n	80095ba <__sflush_r+0x76>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	b903      	cbnz	r3, 80095bc <__sflush_r+0x78>
 80095ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80095bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095be:	602f      	str	r7, [r5, #0]
 80095c0:	b1b9      	cbz	r1, 80095f2 <__sflush_r+0xae>
 80095c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095c6:	4299      	cmp	r1, r3
 80095c8:	d002      	beq.n	80095d0 <__sflush_r+0x8c>
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7fe fa2c 	bl	8007a28 <_free_r>
 80095d0:	2300      	movs	r3, #0
 80095d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80095d4:	e00d      	b.n	80095f2 <__sflush_r+0xae>
 80095d6:	2301      	movs	r3, #1
 80095d8:	4628      	mov	r0, r5
 80095da:	47b0      	blx	r6
 80095dc:	4602      	mov	r2, r0
 80095de:	1c50      	adds	r0, r2, #1
 80095e0:	d1c9      	bne.n	8009576 <__sflush_r+0x32>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0c6      	beq.n	8009576 <__sflush_r+0x32>
 80095e8:	2b1d      	cmp	r3, #29
 80095ea:	d001      	beq.n	80095f0 <__sflush_r+0xac>
 80095ec:	2b16      	cmp	r3, #22
 80095ee:	d11e      	bne.n	800962e <__sflush_r+0xea>
 80095f0:	602f      	str	r7, [r5, #0]
 80095f2:	2000      	movs	r0, #0
 80095f4:	e022      	b.n	800963c <__sflush_r+0xf8>
 80095f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095fa:	b21b      	sxth	r3, r3
 80095fc:	e01b      	b.n	8009636 <__sflush_r+0xf2>
 80095fe:	690f      	ldr	r7, [r1, #16]
 8009600:	2f00      	cmp	r7, #0
 8009602:	d0f6      	beq.n	80095f2 <__sflush_r+0xae>
 8009604:	0793      	lsls	r3, r2, #30
 8009606:	680e      	ldr	r6, [r1, #0]
 8009608:	bf08      	it	eq
 800960a:	694b      	ldreq	r3, [r1, #20]
 800960c:	600f      	str	r7, [r1, #0]
 800960e:	bf18      	it	ne
 8009610:	2300      	movne	r3, #0
 8009612:	eba6 0807 	sub.w	r8, r6, r7
 8009616:	608b      	str	r3, [r1, #8]
 8009618:	f1b8 0f00 	cmp.w	r8, #0
 800961c:	dde9      	ble.n	80095f2 <__sflush_r+0xae>
 800961e:	6a21      	ldr	r1, [r4, #32]
 8009620:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009622:	4643      	mov	r3, r8
 8009624:	463a      	mov	r2, r7
 8009626:	4628      	mov	r0, r5
 8009628:	47b0      	blx	r6
 800962a:	2800      	cmp	r0, #0
 800962c:	dc08      	bgt.n	8009640 <__sflush_r+0xfc>
 800962e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	4407      	add	r7, r0
 8009642:	eba8 0800 	sub.w	r8, r8, r0
 8009646:	e7e7      	b.n	8009618 <__sflush_r+0xd4>
 8009648:	dfbffffe 	.word	0xdfbffffe

0800964c <_fflush_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	690b      	ldr	r3, [r1, #16]
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b913      	cbnz	r3, 800965c <_fflush_r+0x10>
 8009656:	2500      	movs	r5, #0
 8009658:	4628      	mov	r0, r5
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	b118      	cbz	r0, 8009666 <_fflush_r+0x1a>
 800965e:	6a03      	ldr	r3, [r0, #32]
 8009660:	b90b      	cbnz	r3, 8009666 <_fflush_r+0x1a>
 8009662:	f7fd fa75 	bl	8006b50 <__sinit>
 8009666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0f3      	beq.n	8009656 <_fflush_r+0xa>
 800966e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009670:	07d0      	lsls	r0, r2, #31
 8009672:	d404      	bmi.n	800967e <_fflush_r+0x32>
 8009674:	0599      	lsls	r1, r3, #22
 8009676:	d402      	bmi.n	800967e <_fflush_r+0x32>
 8009678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800967a:	f7fd fb80 	bl	8006d7e <__retarget_lock_acquire_recursive>
 800967e:	4628      	mov	r0, r5
 8009680:	4621      	mov	r1, r4
 8009682:	f7ff ff5f 	bl	8009544 <__sflush_r>
 8009686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009688:	07da      	lsls	r2, r3, #31
 800968a:	4605      	mov	r5, r0
 800968c:	d4e4      	bmi.n	8009658 <_fflush_r+0xc>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	059b      	lsls	r3, r3, #22
 8009692:	d4e1      	bmi.n	8009658 <_fflush_r+0xc>
 8009694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009696:	f7fd fb73 	bl	8006d80 <__retarget_lock_release_recursive>
 800969a:	e7dd      	b.n	8009658 <_fflush_r+0xc>

0800969c <memmove>:
 800969c:	4288      	cmp	r0, r1
 800969e:	b510      	push	{r4, lr}
 80096a0:	eb01 0402 	add.w	r4, r1, r2
 80096a4:	d902      	bls.n	80096ac <memmove+0x10>
 80096a6:	4284      	cmp	r4, r0
 80096a8:	4623      	mov	r3, r4
 80096aa:	d807      	bhi.n	80096bc <memmove+0x20>
 80096ac:	1e43      	subs	r3, r0, #1
 80096ae:	42a1      	cmp	r1, r4
 80096b0:	d008      	beq.n	80096c4 <memmove+0x28>
 80096b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096ba:	e7f8      	b.n	80096ae <memmove+0x12>
 80096bc:	4402      	add	r2, r0
 80096be:	4601      	mov	r1, r0
 80096c0:	428a      	cmp	r2, r1
 80096c2:	d100      	bne.n	80096c6 <memmove+0x2a>
 80096c4:	bd10      	pop	{r4, pc}
 80096c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ce:	e7f7      	b.n	80096c0 <memmove+0x24>

080096d0 <strncmp>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	b16a      	cbz	r2, 80096f0 <strncmp+0x20>
 80096d4:	3901      	subs	r1, #1
 80096d6:	1884      	adds	r4, r0, r2
 80096d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d103      	bne.n	80096ec <strncmp+0x1c>
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	d001      	beq.n	80096ec <strncmp+0x1c>
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	d1f5      	bne.n	80096d8 <strncmp+0x8>
 80096ec:	1ad0      	subs	r0, r2, r3
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	4610      	mov	r0, r2
 80096f2:	e7fc      	b.n	80096ee <strncmp+0x1e>

080096f4 <_sbrk_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4d06      	ldr	r5, [pc, #24]	@ (8009710 <_sbrk_r+0x1c>)
 80096f8:	2300      	movs	r3, #0
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	f7f8 f8da 	bl	80018b8 <_sbrk>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_sbrk_r+0x1a>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_sbrk_r+0x1a>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	200004c0 	.word	0x200004c0

08009714 <memcpy>:
 8009714:	440a      	add	r2, r1
 8009716:	4291      	cmp	r1, r2
 8009718:	f100 33ff 	add.w	r3, r0, #4294967295
 800971c:	d100      	bne.n	8009720 <memcpy+0xc>
 800971e:	4770      	bx	lr
 8009720:	b510      	push	{r4, lr}
 8009722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800972a:	4291      	cmp	r1, r2
 800972c:	d1f9      	bne.n	8009722 <memcpy+0xe>
 800972e:	bd10      	pop	{r4, pc}

08009730 <nan>:
 8009730:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009738 <nan+0x8>
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	00000000 	.word	0x00000000
 800973c:	7ff80000 	.word	0x7ff80000

08009740 <__assert_func>:
 8009740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009742:	4614      	mov	r4, r2
 8009744:	461a      	mov	r2, r3
 8009746:	4b09      	ldr	r3, [pc, #36]	@ (800976c <__assert_func+0x2c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4605      	mov	r5, r0
 800974c:	68d8      	ldr	r0, [r3, #12]
 800974e:	b954      	cbnz	r4, 8009766 <__assert_func+0x26>
 8009750:	4b07      	ldr	r3, [pc, #28]	@ (8009770 <__assert_func+0x30>)
 8009752:	461c      	mov	r4, r3
 8009754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009758:	9100      	str	r1, [sp, #0]
 800975a:	462b      	mov	r3, r5
 800975c:	4905      	ldr	r1, [pc, #20]	@ (8009774 <__assert_func+0x34>)
 800975e:	f000 fba7 	bl	8009eb0 <fiprintf>
 8009762:	f000 fbb7 	bl	8009ed4 <abort>
 8009766:	4b04      	ldr	r3, [pc, #16]	@ (8009778 <__assert_func+0x38>)
 8009768:	e7f4      	b.n	8009754 <__assert_func+0x14>
 800976a:	bf00      	nop
 800976c:	20000030 	.word	0x20000030
 8009770:	0800a865 	.word	0x0800a865
 8009774:	0800a837 	.word	0x0800a837
 8009778:	0800a82a 	.word	0x0800a82a

0800977c <_calloc_r>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	fba1 5402 	umull	r5, r4, r1, r2
 8009782:	b93c      	cbnz	r4, 8009794 <_calloc_r+0x18>
 8009784:	4629      	mov	r1, r5
 8009786:	f7fe f9c3 	bl	8007b10 <_malloc_r>
 800978a:	4606      	mov	r6, r0
 800978c:	b928      	cbnz	r0, 800979a <_calloc_r+0x1e>
 800978e:	2600      	movs	r6, #0
 8009790:	4630      	mov	r0, r6
 8009792:	bd70      	pop	{r4, r5, r6, pc}
 8009794:	220c      	movs	r2, #12
 8009796:	6002      	str	r2, [r0, #0]
 8009798:	e7f9      	b.n	800978e <_calloc_r+0x12>
 800979a:	462a      	mov	r2, r5
 800979c:	4621      	mov	r1, r4
 800979e:	f7fd fa70 	bl	8006c82 <memset>
 80097a2:	e7f5      	b.n	8009790 <_calloc_r+0x14>

080097a4 <rshift>:
 80097a4:	6903      	ldr	r3, [r0, #16]
 80097a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097b2:	f100 0414 	add.w	r4, r0, #20
 80097b6:	dd45      	ble.n	8009844 <rshift+0xa0>
 80097b8:	f011 011f 	ands.w	r1, r1, #31
 80097bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097c4:	d10c      	bne.n	80097e0 <rshift+0x3c>
 80097c6:	f100 0710 	add.w	r7, r0, #16
 80097ca:	4629      	mov	r1, r5
 80097cc:	42b1      	cmp	r1, r6
 80097ce:	d334      	bcc.n	800983a <rshift+0x96>
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	1eea      	subs	r2, r5, #3
 80097d6:	4296      	cmp	r6, r2
 80097d8:	bf38      	it	cc
 80097da:	2300      	movcc	r3, #0
 80097dc:	4423      	add	r3, r4
 80097de:	e015      	b.n	800980c <rshift+0x68>
 80097e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097e4:	f1c1 0820 	rsb	r8, r1, #32
 80097e8:	40cf      	lsrs	r7, r1
 80097ea:	f105 0e04 	add.w	lr, r5, #4
 80097ee:	46a1      	mov	r9, r4
 80097f0:	4576      	cmp	r6, lr
 80097f2:	46f4      	mov	ip, lr
 80097f4:	d815      	bhi.n	8009822 <rshift+0x7e>
 80097f6:	1a9a      	subs	r2, r3, r2
 80097f8:	0092      	lsls	r2, r2, #2
 80097fa:	3a04      	subs	r2, #4
 80097fc:	3501      	adds	r5, #1
 80097fe:	42ae      	cmp	r6, r5
 8009800:	bf38      	it	cc
 8009802:	2200      	movcc	r2, #0
 8009804:	18a3      	adds	r3, r4, r2
 8009806:	50a7      	str	r7, [r4, r2]
 8009808:	b107      	cbz	r7, 800980c <rshift+0x68>
 800980a:	3304      	adds	r3, #4
 800980c:	1b1a      	subs	r2, r3, r4
 800980e:	42a3      	cmp	r3, r4
 8009810:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009814:	bf08      	it	eq
 8009816:	2300      	moveq	r3, #0
 8009818:	6102      	str	r2, [r0, #16]
 800981a:	bf08      	it	eq
 800981c:	6143      	streq	r3, [r0, #20]
 800981e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009822:	f8dc c000 	ldr.w	ip, [ip]
 8009826:	fa0c fc08 	lsl.w	ip, ip, r8
 800982a:	ea4c 0707 	orr.w	r7, ip, r7
 800982e:	f849 7b04 	str.w	r7, [r9], #4
 8009832:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009836:	40cf      	lsrs	r7, r1
 8009838:	e7da      	b.n	80097f0 <rshift+0x4c>
 800983a:	f851 cb04 	ldr.w	ip, [r1], #4
 800983e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009842:	e7c3      	b.n	80097cc <rshift+0x28>
 8009844:	4623      	mov	r3, r4
 8009846:	e7e1      	b.n	800980c <rshift+0x68>

08009848 <__hexdig_fun>:
 8009848:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800984c:	2b09      	cmp	r3, #9
 800984e:	d802      	bhi.n	8009856 <__hexdig_fun+0xe>
 8009850:	3820      	subs	r0, #32
 8009852:	b2c0      	uxtb	r0, r0
 8009854:	4770      	bx	lr
 8009856:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800985a:	2b05      	cmp	r3, #5
 800985c:	d801      	bhi.n	8009862 <__hexdig_fun+0x1a>
 800985e:	3847      	subs	r0, #71	@ 0x47
 8009860:	e7f7      	b.n	8009852 <__hexdig_fun+0xa>
 8009862:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009866:	2b05      	cmp	r3, #5
 8009868:	d801      	bhi.n	800986e <__hexdig_fun+0x26>
 800986a:	3827      	subs	r0, #39	@ 0x27
 800986c:	e7f1      	b.n	8009852 <__hexdig_fun+0xa>
 800986e:	2000      	movs	r0, #0
 8009870:	4770      	bx	lr
	...

08009874 <__gethex>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	b085      	sub	sp, #20
 800987a:	468a      	mov	sl, r1
 800987c:	9302      	str	r3, [sp, #8]
 800987e:	680b      	ldr	r3, [r1, #0]
 8009880:	9001      	str	r0, [sp, #4]
 8009882:	4690      	mov	r8, r2
 8009884:	1c9c      	adds	r4, r3, #2
 8009886:	46a1      	mov	r9, r4
 8009888:	f814 0b01 	ldrb.w	r0, [r4], #1
 800988c:	2830      	cmp	r0, #48	@ 0x30
 800988e:	d0fa      	beq.n	8009886 <__gethex+0x12>
 8009890:	eba9 0303 	sub.w	r3, r9, r3
 8009894:	f1a3 0b02 	sub.w	fp, r3, #2
 8009898:	f7ff ffd6 	bl	8009848 <__hexdig_fun>
 800989c:	4605      	mov	r5, r0
 800989e:	2800      	cmp	r0, #0
 80098a0:	d168      	bne.n	8009974 <__gethex+0x100>
 80098a2:	49a0      	ldr	r1, [pc, #640]	@ (8009b24 <__gethex+0x2b0>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	4648      	mov	r0, r9
 80098a8:	f7ff ff12 	bl	80096d0 <strncmp>
 80098ac:	4607      	mov	r7, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d167      	bne.n	8009982 <__gethex+0x10e>
 80098b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80098b6:	4626      	mov	r6, r4
 80098b8:	f7ff ffc6 	bl	8009848 <__hexdig_fun>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d062      	beq.n	8009986 <__gethex+0x112>
 80098c0:	4623      	mov	r3, r4
 80098c2:	7818      	ldrb	r0, [r3, #0]
 80098c4:	2830      	cmp	r0, #48	@ 0x30
 80098c6:	4699      	mov	r9, r3
 80098c8:	f103 0301 	add.w	r3, r3, #1
 80098cc:	d0f9      	beq.n	80098c2 <__gethex+0x4e>
 80098ce:	f7ff ffbb 	bl	8009848 <__hexdig_fun>
 80098d2:	fab0 f580 	clz	r5, r0
 80098d6:	096d      	lsrs	r5, r5, #5
 80098d8:	f04f 0b01 	mov.w	fp, #1
 80098dc:	464a      	mov	r2, r9
 80098de:	4616      	mov	r6, r2
 80098e0:	3201      	adds	r2, #1
 80098e2:	7830      	ldrb	r0, [r6, #0]
 80098e4:	f7ff ffb0 	bl	8009848 <__hexdig_fun>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1f8      	bne.n	80098de <__gethex+0x6a>
 80098ec:	498d      	ldr	r1, [pc, #564]	@ (8009b24 <__gethex+0x2b0>)
 80098ee:	2201      	movs	r2, #1
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7ff feed 	bl	80096d0 <strncmp>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d13f      	bne.n	800997a <__gethex+0x106>
 80098fa:	b944      	cbnz	r4, 800990e <__gethex+0x9a>
 80098fc:	1c74      	adds	r4, r6, #1
 80098fe:	4622      	mov	r2, r4
 8009900:	4616      	mov	r6, r2
 8009902:	3201      	adds	r2, #1
 8009904:	7830      	ldrb	r0, [r6, #0]
 8009906:	f7ff ff9f 	bl	8009848 <__hexdig_fun>
 800990a:	2800      	cmp	r0, #0
 800990c:	d1f8      	bne.n	8009900 <__gethex+0x8c>
 800990e:	1ba4      	subs	r4, r4, r6
 8009910:	00a7      	lsls	r7, r4, #2
 8009912:	7833      	ldrb	r3, [r6, #0]
 8009914:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009918:	2b50      	cmp	r3, #80	@ 0x50
 800991a:	d13e      	bne.n	800999a <__gethex+0x126>
 800991c:	7873      	ldrb	r3, [r6, #1]
 800991e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009920:	d033      	beq.n	800998a <__gethex+0x116>
 8009922:	2b2d      	cmp	r3, #45	@ 0x2d
 8009924:	d034      	beq.n	8009990 <__gethex+0x11c>
 8009926:	1c71      	adds	r1, r6, #1
 8009928:	2400      	movs	r4, #0
 800992a:	7808      	ldrb	r0, [r1, #0]
 800992c:	f7ff ff8c 	bl	8009848 <__hexdig_fun>
 8009930:	1e43      	subs	r3, r0, #1
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b18      	cmp	r3, #24
 8009936:	d830      	bhi.n	800999a <__gethex+0x126>
 8009938:	f1a0 0210 	sub.w	r2, r0, #16
 800993c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009940:	f7ff ff82 	bl	8009848 <__hexdig_fun>
 8009944:	f100 3cff 	add.w	ip, r0, #4294967295
 8009948:	fa5f fc8c 	uxtb.w	ip, ip
 800994c:	f1bc 0f18 	cmp.w	ip, #24
 8009950:	f04f 030a 	mov.w	r3, #10
 8009954:	d91e      	bls.n	8009994 <__gethex+0x120>
 8009956:	b104      	cbz	r4, 800995a <__gethex+0xe6>
 8009958:	4252      	negs	r2, r2
 800995a:	4417      	add	r7, r2
 800995c:	f8ca 1000 	str.w	r1, [sl]
 8009960:	b1ed      	cbz	r5, 800999e <__gethex+0x12a>
 8009962:	f1bb 0f00 	cmp.w	fp, #0
 8009966:	bf0c      	ite	eq
 8009968:	2506      	moveq	r5, #6
 800996a:	2500      	movne	r5, #0
 800996c:	4628      	mov	r0, r5
 800996e:	b005      	add	sp, #20
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	2500      	movs	r5, #0
 8009976:	462c      	mov	r4, r5
 8009978:	e7b0      	b.n	80098dc <__gethex+0x68>
 800997a:	2c00      	cmp	r4, #0
 800997c:	d1c7      	bne.n	800990e <__gethex+0x9a>
 800997e:	4627      	mov	r7, r4
 8009980:	e7c7      	b.n	8009912 <__gethex+0x9e>
 8009982:	464e      	mov	r6, r9
 8009984:	462f      	mov	r7, r5
 8009986:	2501      	movs	r5, #1
 8009988:	e7c3      	b.n	8009912 <__gethex+0x9e>
 800998a:	2400      	movs	r4, #0
 800998c:	1cb1      	adds	r1, r6, #2
 800998e:	e7cc      	b.n	800992a <__gethex+0xb6>
 8009990:	2401      	movs	r4, #1
 8009992:	e7fb      	b.n	800998c <__gethex+0x118>
 8009994:	fb03 0002 	mla	r0, r3, r2, r0
 8009998:	e7ce      	b.n	8009938 <__gethex+0xc4>
 800999a:	4631      	mov	r1, r6
 800999c:	e7de      	b.n	800995c <__gethex+0xe8>
 800999e:	eba6 0309 	sub.w	r3, r6, r9
 80099a2:	3b01      	subs	r3, #1
 80099a4:	4629      	mov	r1, r5
 80099a6:	2b07      	cmp	r3, #7
 80099a8:	dc0a      	bgt.n	80099c0 <__gethex+0x14c>
 80099aa:	9801      	ldr	r0, [sp, #4]
 80099ac:	f7fe f93c 	bl	8007c28 <_Balloc>
 80099b0:	4604      	mov	r4, r0
 80099b2:	b940      	cbnz	r0, 80099c6 <__gethex+0x152>
 80099b4:	4b5c      	ldr	r3, [pc, #368]	@ (8009b28 <__gethex+0x2b4>)
 80099b6:	4602      	mov	r2, r0
 80099b8:	21e4      	movs	r1, #228	@ 0xe4
 80099ba:	485c      	ldr	r0, [pc, #368]	@ (8009b2c <__gethex+0x2b8>)
 80099bc:	f7ff fec0 	bl	8009740 <__assert_func>
 80099c0:	3101      	adds	r1, #1
 80099c2:	105b      	asrs	r3, r3, #1
 80099c4:	e7ef      	b.n	80099a6 <__gethex+0x132>
 80099c6:	f100 0a14 	add.w	sl, r0, #20
 80099ca:	2300      	movs	r3, #0
 80099cc:	4655      	mov	r5, sl
 80099ce:	469b      	mov	fp, r3
 80099d0:	45b1      	cmp	r9, r6
 80099d2:	d337      	bcc.n	8009a44 <__gethex+0x1d0>
 80099d4:	f845 bb04 	str.w	fp, [r5], #4
 80099d8:	eba5 050a 	sub.w	r5, r5, sl
 80099dc:	10ad      	asrs	r5, r5, #2
 80099de:	6125      	str	r5, [r4, #16]
 80099e0:	4658      	mov	r0, fp
 80099e2:	f7fe fa13 	bl	8007e0c <__hi0bits>
 80099e6:	016d      	lsls	r5, r5, #5
 80099e8:	f8d8 6000 	ldr.w	r6, [r8]
 80099ec:	1a2d      	subs	r5, r5, r0
 80099ee:	42b5      	cmp	r5, r6
 80099f0:	dd54      	ble.n	8009a9c <__gethex+0x228>
 80099f2:	1bad      	subs	r5, r5, r6
 80099f4:	4629      	mov	r1, r5
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7fe fda7 	bl	800854a <__any_on>
 80099fc:	4681      	mov	r9, r0
 80099fe:	b178      	cbz	r0, 8009a20 <__gethex+0x1ac>
 8009a00:	1e6b      	subs	r3, r5, #1
 8009a02:	1159      	asrs	r1, r3, #5
 8009a04:	f003 021f 	and.w	r2, r3, #31
 8009a08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a0c:	f04f 0901 	mov.w	r9, #1
 8009a10:	fa09 f202 	lsl.w	r2, r9, r2
 8009a14:	420a      	tst	r2, r1
 8009a16:	d003      	beq.n	8009a20 <__gethex+0x1ac>
 8009a18:	454b      	cmp	r3, r9
 8009a1a:	dc36      	bgt.n	8009a8a <__gethex+0x216>
 8009a1c:	f04f 0902 	mov.w	r9, #2
 8009a20:	4629      	mov	r1, r5
 8009a22:	4620      	mov	r0, r4
 8009a24:	f7ff febe 	bl	80097a4 <rshift>
 8009a28:	442f      	add	r7, r5
 8009a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a2e:	42bb      	cmp	r3, r7
 8009a30:	da42      	bge.n	8009ab8 <__gethex+0x244>
 8009a32:	9801      	ldr	r0, [sp, #4]
 8009a34:	4621      	mov	r1, r4
 8009a36:	f7fe f937 	bl	8007ca8 <_Bfree>
 8009a3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	25a3      	movs	r5, #163	@ 0xa3
 8009a42:	e793      	b.n	800996c <__gethex+0xf8>
 8009a44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009a48:	2a2e      	cmp	r2, #46	@ 0x2e
 8009a4a:	d012      	beq.n	8009a72 <__gethex+0x1fe>
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d104      	bne.n	8009a5a <__gethex+0x1e6>
 8009a50:	f845 bb04 	str.w	fp, [r5], #4
 8009a54:	f04f 0b00 	mov.w	fp, #0
 8009a58:	465b      	mov	r3, fp
 8009a5a:	7830      	ldrb	r0, [r6, #0]
 8009a5c:	9303      	str	r3, [sp, #12]
 8009a5e:	f7ff fef3 	bl	8009848 <__hexdig_fun>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	f000 000f 	and.w	r0, r0, #15
 8009a68:	4098      	lsls	r0, r3
 8009a6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a6e:	3304      	adds	r3, #4
 8009a70:	e7ae      	b.n	80099d0 <__gethex+0x15c>
 8009a72:	45b1      	cmp	r9, r6
 8009a74:	d8ea      	bhi.n	8009a4c <__gethex+0x1d8>
 8009a76:	492b      	ldr	r1, [pc, #172]	@ (8009b24 <__gethex+0x2b0>)
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7ff fe27 	bl	80096d0 <strncmp>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d1e1      	bne.n	8009a4c <__gethex+0x1d8>
 8009a88:	e7a2      	b.n	80099d0 <__gethex+0x15c>
 8009a8a:	1ea9      	subs	r1, r5, #2
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f7fe fd5c 	bl	800854a <__any_on>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0c2      	beq.n	8009a1c <__gethex+0x1a8>
 8009a96:	f04f 0903 	mov.w	r9, #3
 8009a9a:	e7c1      	b.n	8009a20 <__gethex+0x1ac>
 8009a9c:	da09      	bge.n	8009ab2 <__gethex+0x23e>
 8009a9e:	1b75      	subs	r5, r6, r5
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	9801      	ldr	r0, [sp, #4]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	f7fe fb17 	bl	80080d8 <__lshift>
 8009aaa:	1b7f      	subs	r7, r7, r5
 8009aac:	4604      	mov	r4, r0
 8009aae:	f100 0a14 	add.w	sl, r0, #20
 8009ab2:	f04f 0900 	mov.w	r9, #0
 8009ab6:	e7b8      	b.n	8009a2a <__gethex+0x1b6>
 8009ab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009abc:	42bd      	cmp	r5, r7
 8009abe:	dd6f      	ble.n	8009ba0 <__gethex+0x32c>
 8009ac0:	1bed      	subs	r5, r5, r7
 8009ac2:	42ae      	cmp	r6, r5
 8009ac4:	dc34      	bgt.n	8009b30 <__gethex+0x2bc>
 8009ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d022      	beq.n	8009b14 <__gethex+0x2a0>
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d024      	beq.n	8009b1c <__gethex+0x2a8>
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d115      	bne.n	8009b02 <__gethex+0x28e>
 8009ad6:	42ae      	cmp	r6, r5
 8009ad8:	d113      	bne.n	8009b02 <__gethex+0x28e>
 8009ada:	2e01      	cmp	r6, #1
 8009adc:	d10b      	bne.n	8009af6 <__gethex+0x282>
 8009ade:	9a02      	ldr	r2, [sp, #8]
 8009ae0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	f8ca 3000 	str.w	r3, [sl]
 8009aee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009af0:	2562      	movs	r5, #98	@ 0x62
 8009af2:	601c      	str	r4, [r3, #0]
 8009af4:	e73a      	b.n	800996c <__gethex+0xf8>
 8009af6:	1e71      	subs	r1, r6, #1
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7fe fd26 	bl	800854a <__any_on>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d1ed      	bne.n	8009ade <__gethex+0x26a>
 8009b02:	9801      	ldr	r0, [sp, #4]
 8009b04:	4621      	mov	r1, r4
 8009b06:	f7fe f8cf 	bl	8007ca8 <_Bfree>
 8009b0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	2550      	movs	r5, #80	@ 0x50
 8009b12:	e72b      	b.n	800996c <__gethex+0xf8>
 8009b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1f3      	bne.n	8009b02 <__gethex+0x28e>
 8009b1a:	e7e0      	b.n	8009ade <__gethex+0x26a>
 8009b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1dd      	bne.n	8009ade <__gethex+0x26a>
 8009b22:	e7ee      	b.n	8009b02 <__gethex+0x28e>
 8009b24:	0800a6b8 	.word	0x0800a6b8
 8009b28:	0800a54d 	.word	0x0800a54d
 8009b2c:	0800a866 	.word	0x0800a866
 8009b30:	1e6f      	subs	r7, r5, #1
 8009b32:	f1b9 0f00 	cmp.w	r9, #0
 8009b36:	d130      	bne.n	8009b9a <__gethex+0x326>
 8009b38:	b127      	cbz	r7, 8009b44 <__gethex+0x2d0>
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7fe fd04 	bl	800854a <__any_on>
 8009b42:	4681      	mov	r9, r0
 8009b44:	117a      	asrs	r2, r7, #5
 8009b46:	2301      	movs	r3, #1
 8009b48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b4c:	f007 071f 	and.w	r7, r7, #31
 8009b50:	40bb      	lsls	r3, r7
 8009b52:	4213      	tst	r3, r2
 8009b54:	4629      	mov	r1, r5
 8009b56:	4620      	mov	r0, r4
 8009b58:	bf18      	it	ne
 8009b5a:	f049 0902 	orrne.w	r9, r9, #2
 8009b5e:	f7ff fe21 	bl	80097a4 <rshift>
 8009b62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009b66:	1b76      	subs	r6, r6, r5
 8009b68:	2502      	movs	r5, #2
 8009b6a:	f1b9 0f00 	cmp.w	r9, #0
 8009b6e:	d047      	beq.n	8009c00 <__gethex+0x38c>
 8009b70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d015      	beq.n	8009ba4 <__gethex+0x330>
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d017      	beq.n	8009bac <__gethex+0x338>
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d109      	bne.n	8009b94 <__gethex+0x320>
 8009b80:	f019 0f02 	tst.w	r9, #2
 8009b84:	d006      	beq.n	8009b94 <__gethex+0x320>
 8009b86:	f8da 3000 	ldr.w	r3, [sl]
 8009b8a:	ea49 0903 	orr.w	r9, r9, r3
 8009b8e:	f019 0f01 	tst.w	r9, #1
 8009b92:	d10e      	bne.n	8009bb2 <__gethex+0x33e>
 8009b94:	f045 0510 	orr.w	r5, r5, #16
 8009b98:	e032      	b.n	8009c00 <__gethex+0x38c>
 8009b9a:	f04f 0901 	mov.w	r9, #1
 8009b9e:	e7d1      	b.n	8009b44 <__gethex+0x2d0>
 8009ba0:	2501      	movs	r5, #1
 8009ba2:	e7e2      	b.n	8009b6a <__gethex+0x2f6>
 8009ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ba6:	f1c3 0301 	rsb	r3, r3, #1
 8009baa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <__gethex+0x320>
 8009bb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bb6:	f104 0314 	add.w	r3, r4, #20
 8009bba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009bbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009bc2:	f04f 0c00 	mov.w	ip, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009bd0:	d01b      	beq.n	8009c0a <__gethex+0x396>
 8009bd2:	3201      	adds	r2, #1
 8009bd4:	6002      	str	r2, [r0, #0]
 8009bd6:	2d02      	cmp	r5, #2
 8009bd8:	f104 0314 	add.w	r3, r4, #20
 8009bdc:	d13c      	bne.n	8009c58 <__gethex+0x3e4>
 8009bde:	f8d8 2000 	ldr.w	r2, [r8]
 8009be2:	3a01      	subs	r2, #1
 8009be4:	42b2      	cmp	r2, r6
 8009be6:	d109      	bne.n	8009bfc <__gethex+0x388>
 8009be8:	1171      	asrs	r1, r6, #5
 8009bea:	2201      	movs	r2, #1
 8009bec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bf0:	f006 061f 	and.w	r6, r6, #31
 8009bf4:	fa02 f606 	lsl.w	r6, r2, r6
 8009bf8:	421e      	tst	r6, r3
 8009bfa:	d13a      	bne.n	8009c72 <__gethex+0x3fe>
 8009bfc:	f045 0520 	orr.w	r5, r5, #32
 8009c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c02:	601c      	str	r4, [r3, #0]
 8009c04:	9b02      	ldr	r3, [sp, #8]
 8009c06:	601f      	str	r7, [r3, #0]
 8009c08:	e6b0      	b.n	800996c <__gethex+0xf8>
 8009c0a:	4299      	cmp	r1, r3
 8009c0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c10:	d8d9      	bhi.n	8009bc6 <__gethex+0x352>
 8009c12:	68a3      	ldr	r3, [r4, #8]
 8009c14:	459b      	cmp	fp, r3
 8009c16:	db17      	blt.n	8009c48 <__gethex+0x3d4>
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	9801      	ldr	r0, [sp, #4]
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	f7fe f803 	bl	8007c28 <_Balloc>
 8009c22:	4681      	mov	r9, r0
 8009c24:	b918      	cbnz	r0, 8009c2e <__gethex+0x3ba>
 8009c26:	4b1a      	ldr	r3, [pc, #104]	@ (8009c90 <__gethex+0x41c>)
 8009c28:	4602      	mov	r2, r0
 8009c2a:	2184      	movs	r1, #132	@ 0x84
 8009c2c:	e6c5      	b.n	80099ba <__gethex+0x146>
 8009c2e:	6922      	ldr	r2, [r4, #16]
 8009c30:	3202      	adds	r2, #2
 8009c32:	f104 010c 	add.w	r1, r4, #12
 8009c36:	0092      	lsls	r2, r2, #2
 8009c38:	300c      	adds	r0, #12
 8009c3a:	f7ff fd6b 	bl	8009714 <memcpy>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	9801      	ldr	r0, [sp, #4]
 8009c42:	f7fe f831 	bl	8007ca8 <_Bfree>
 8009c46:	464c      	mov	r4, r9
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c50:	6122      	str	r2, [r4, #16]
 8009c52:	2201      	movs	r2, #1
 8009c54:	615a      	str	r2, [r3, #20]
 8009c56:	e7be      	b.n	8009bd6 <__gethex+0x362>
 8009c58:	6922      	ldr	r2, [r4, #16]
 8009c5a:	455a      	cmp	r2, fp
 8009c5c:	dd0b      	ble.n	8009c76 <__gethex+0x402>
 8009c5e:	2101      	movs	r1, #1
 8009c60:	4620      	mov	r0, r4
 8009c62:	f7ff fd9f 	bl	80097a4 <rshift>
 8009c66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c6a:	3701      	adds	r7, #1
 8009c6c:	42bb      	cmp	r3, r7
 8009c6e:	f6ff aee0 	blt.w	8009a32 <__gethex+0x1be>
 8009c72:	2501      	movs	r5, #1
 8009c74:	e7c2      	b.n	8009bfc <__gethex+0x388>
 8009c76:	f016 061f 	ands.w	r6, r6, #31
 8009c7a:	d0fa      	beq.n	8009c72 <__gethex+0x3fe>
 8009c7c:	4453      	add	r3, sl
 8009c7e:	f1c6 0620 	rsb	r6, r6, #32
 8009c82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c86:	f7fe f8c1 	bl	8007e0c <__hi0bits>
 8009c8a:	42b0      	cmp	r0, r6
 8009c8c:	dbe7      	blt.n	8009c5e <__gethex+0x3ea>
 8009c8e:	e7f0      	b.n	8009c72 <__gethex+0x3fe>
 8009c90:	0800a54d 	.word	0x0800a54d

08009c94 <L_shift>:
 8009c94:	f1c2 0208 	rsb	r2, r2, #8
 8009c98:	0092      	lsls	r2, r2, #2
 8009c9a:	b570      	push	{r4, r5, r6, lr}
 8009c9c:	f1c2 0620 	rsb	r6, r2, #32
 8009ca0:	6843      	ldr	r3, [r0, #4]
 8009ca2:	6804      	ldr	r4, [r0, #0]
 8009ca4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ca8:	432c      	orrs	r4, r5
 8009caa:	40d3      	lsrs	r3, r2
 8009cac:	6004      	str	r4, [r0, #0]
 8009cae:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cb2:	4288      	cmp	r0, r1
 8009cb4:	d3f4      	bcc.n	8009ca0 <L_shift+0xc>
 8009cb6:	bd70      	pop	{r4, r5, r6, pc}

08009cb8 <__match>:
 8009cb8:	b530      	push	{r4, r5, lr}
 8009cba:	6803      	ldr	r3, [r0, #0]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cc2:	b914      	cbnz	r4, 8009cca <__match+0x12>
 8009cc4:	6003      	str	r3, [r0, #0]
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	bd30      	pop	{r4, r5, pc}
 8009cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009cd2:	2d19      	cmp	r5, #25
 8009cd4:	bf98      	it	ls
 8009cd6:	3220      	addls	r2, #32
 8009cd8:	42a2      	cmp	r2, r4
 8009cda:	d0f0      	beq.n	8009cbe <__match+0x6>
 8009cdc:	2000      	movs	r0, #0
 8009cde:	e7f3      	b.n	8009cc8 <__match+0x10>

08009ce0 <__hexnan>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	680b      	ldr	r3, [r1, #0]
 8009ce6:	6801      	ldr	r1, [r0, #0]
 8009ce8:	115e      	asrs	r6, r3, #5
 8009cea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cee:	f013 031f 	ands.w	r3, r3, #31
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	bf18      	it	ne
 8009cf6:	3604      	addne	r6, #4
 8009cf8:	2500      	movs	r5, #0
 8009cfa:	1f37      	subs	r7, r6, #4
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	4690      	mov	r8, r2
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d06:	46b9      	mov	r9, r7
 8009d08:	463c      	mov	r4, r7
 8009d0a:	9502      	str	r5, [sp, #8]
 8009d0c:	46ab      	mov	fp, r5
 8009d0e:	784a      	ldrb	r2, [r1, #1]
 8009d10:	1c4b      	adds	r3, r1, #1
 8009d12:	9303      	str	r3, [sp, #12]
 8009d14:	b342      	cbz	r2, 8009d68 <__hexnan+0x88>
 8009d16:	4610      	mov	r0, r2
 8009d18:	9105      	str	r1, [sp, #20]
 8009d1a:	9204      	str	r2, [sp, #16]
 8009d1c:	f7ff fd94 	bl	8009848 <__hexdig_fun>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d151      	bne.n	8009dc8 <__hexnan+0xe8>
 8009d24:	9a04      	ldr	r2, [sp, #16]
 8009d26:	9905      	ldr	r1, [sp, #20]
 8009d28:	2a20      	cmp	r2, #32
 8009d2a:	d818      	bhi.n	8009d5e <__hexnan+0x7e>
 8009d2c:	9b02      	ldr	r3, [sp, #8]
 8009d2e:	459b      	cmp	fp, r3
 8009d30:	dd13      	ble.n	8009d5a <__hexnan+0x7a>
 8009d32:	454c      	cmp	r4, r9
 8009d34:	d206      	bcs.n	8009d44 <__hexnan+0x64>
 8009d36:	2d07      	cmp	r5, #7
 8009d38:	dc04      	bgt.n	8009d44 <__hexnan+0x64>
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7ff ffa8 	bl	8009c94 <L_shift>
 8009d44:	4544      	cmp	r4, r8
 8009d46:	d952      	bls.n	8009dee <__hexnan+0x10e>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f1a4 0904 	sub.w	r9, r4, #4
 8009d4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d52:	f8cd b008 	str.w	fp, [sp, #8]
 8009d56:	464c      	mov	r4, r9
 8009d58:	461d      	mov	r5, r3
 8009d5a:	9903      	ldr	r1, [sp, #12]
 8009d5c:	e7d7      	b.n	8009d0e <__hexnan+0x2e>
 8009d5e:	2a29      	cmp	r2, #41	@ 0x29
 8009d60:	d157      	bne.n	8009e12 <__hexnan+0x132>
 8009d62:	3102      	adds	r1, #2
 8009d64:	f8ca 1000 	str.w	r1, [sl]
 8009d68:	f1bb 0f00 	cmp.w	fp, #0
 8009d6c:	d051      	beq.n	8009e12 <__hexnan+0x132>
 8009d6e:	454c      	cmp	r4, r9
 8009d70:	d206      	bcs.n	8009d80 <__hexnan+0xa0>
 8009d72:	2d07      	cmp	r5, #7
 8009d74:	dc04      	bgt.n	8009d80 <__hexnan+0xa0>
 8009d76:	462a      	mov	r2, r5
 8009d78:	4649      	mov	r1, r9
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7ff ff8a 	bl	8009c94 <L_shift>
 8009d80:	4544      	cmp	r4, r8
 8009d82:	d936      	bls.n	8009df2 <__hexnan+0x112>
 8009d84:	f1a8 0204 	sub.w	r2, r8, #4
 8009d88:	4623      	mov	r3, r4
 8009d8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d92:	429f      	cmp	r7, r3
 8009d94:	d2f9      	bcs.n	8009d8a <__hexnan+0xaa>
 8009d96:	1b3b      	subs	r3, r7, r4
 8009d98:	f023 0303 	bic.w	r3, r3, #3
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	3401      	adds	r4, #1
 8009da0:	3e03      	subs	r6, #3
 8009da2:	42b4      	cmp	r4, r6
 8009da4:	bf88      	it	hi
 8009da6:	2304      	movhi	r3, #4
 8009da8:	4443      	add	r3, r8
 8009daa:	2200      	movs	r2, #0
 8009dac:	f843 2b04 	str.w	r2, [r3], #4
 8009db0:	429f      	cmp	r7, r3
 8009db2:	d2fb      	bcs.n	8009dac <__hexnan+0xcc>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	b91b      	cbnz	r3, 8009dc0 <__hexnan+0xe0>
 8009db8:	4547      	cmp	r7, r8
 8009dba:	d128      	bne.n	8009e0e <__hexnan+0x12e>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	2005      	movs	r0, #5
 8009dc2:	b007      	add	sp, #28
 8009dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc8:	3501      	adds	r5, #1
 8009dca:	2d08      	cmp	r5, #8
 8009dcc:	f10b 0b01 	add.w	fp, fp, #1
 8009dd0:	dd06      	ble.n	8009de0 <__hexnan+0x100>
 8009dd2:	4544      	cmp	r4, r8
 8009dd4:	d9c1      	bls.n	8009d5a <__hexnan+0x7a>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ddc:	2501      	movs	r5, #1
 8009dde:	3c04      	subs	r4, #4
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	f000 000f 	and.w	r0, r0, #15
 8009de6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009dea:	6020      	str	r0, [r4, #0]
 8009dec:	e7b5      	b.n	8009d5a <__hexnan+0x7a>
 8009dee:	2508      	movs	r5, #8
 8009df0:	e7b3      	b.n	8009d5a <__hexnan+0x7a>
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0dd      	beq.n	8009db4 <__hexnan+0xd4>
 8009df8:	f1c3 0320 	rsb	r3, r3, #32
 8009dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009e00:	40da      	lsrs	r2, r3
 8009e02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e06:	4013      	ands	r3, r2
 8009e08:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e0c:	e7d2      	b.n	8009db4 <__hexnan+0xd4>
 8009e0e:	3f04      	subs	r7, #4
 8009e10:	e7d0      	b.n	8009db4 <__hexnan+0xd4>
 8009e12:	2004      	movs	r0, #4
 8009e14:	e7d5      	b.n	8009dc2 <__hexnan+0xe2>

08009e16 <__ascii_mbtowc>:
 8009e16:	b082      	sub	sp, #8
 8009e18:	b901      	cbnz	r1, 8009e1c <__ascii_mbtowc+0x6>
 8009e1a:	a901      	add	r1, sp, #4
 8009e1c:	b142      	cbz	r2, 8009e30 <__ascii_mbtowc+0x1a>
 8009e1e:	b14b      	cbz	r3, 8009e34 <__ascii_mbtowc+0x1e>
 8009e20:	7813      	ldrb	r3, [r2, #0]
 8009e22:	600b      	str	r3, [r1, #0]
 8009e24:	7812      	ldrb	r2, [r2, #0]
 8009e26:	1e10      	subs	r0, r2, #0
 8009e28:	bf18      	it	ne
 8009e2a:	2001      	movne	r0, #1
 8009e2c:	b002      	add	sp, #8
 8009e2e:	4770      	bx	lr
 8009e30:	4610      	mov	r0, r2
 8009e32:	e7fb      	b.n	8009e2c <__ascii_mbtowc+0x16>
 8009e34:	f06f 0001 	mvn.w	r0, #1
 8009e38:	e7f8      	b.n	8009e2c <__ascii_mbtowc+0x16>

08009e3a <_realloc_r>:
 8009e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3e:	4680      	mov	r8, r0
 8009e40:	4615      	mov	r5, r2
 8009e42:	460c      	mov	r4, r1
 8009e44:	b921      	cbnz	r1, 8009e50 <_realloc_r+0x16>
 8009e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	f7fd be60 	b.w	8007b10 <_malloc_r>
 8009e50:	b92a      	cbnz	r2, 8009e5e <_realloc_r+0x24>
 8009e52:	f7fd fde9 	bl	8007a28 <_free_r>
 8009e56:	2400      	movs	r4, #0
 8009e58:	4620      	mov	r0, r4
 8009e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5e:	f000 f840 	bl	8009ee2 <_malloc_usable_size_r>
 8009e62:	4285      	cmp	r5, r0
 8009e64:	4606      	mov	r6, r0
 8009e66:	d802      	bhi.n	8009e6e <_realloc_r+0x34>
 8009e68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009e6c:	d8f4      	bhi.n	8009e58 <_realloc_r+0x1e>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4640      	mov	r0, r8
 8009e72:	f7fd fe4d 	bl	8007b10 <_malloc_r>
 8009e76:	4607      	mov	r7, r0
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d0ec      	beq.n	8009e56 <_realloc_r+0x1c>
 8009e7c:	42b5      	cmp	r5, r6
 8009e7e:	462a      	mov	r2, r5
 8009e80:	4621      	mov	r1, r4
 8009e82:	bf28      	it	cs
 8009e84:	4632      	movcs	r2, r6
 8009e86:	f7ff fc45 	bl	8009714 <memcpy>
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	f7fd fdcb 	bl	8007a28 <_free_r>
 8009e92:	463c      	mov	r4, r7
 8009e94:	e7e0      	b.n	8009e58 <_realloc_r+0x1e>

08009e96 <__ascii_wctomb>:
 8009e96:	4603      	mov	r3, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	b141      	cbz	r1, 8009eae <__ascii_wctomb+0x18>
 8009e9c:	2aff      	cmp	r2, #255	@ 0xff
 8009e9e:	d904      	bls.n	8009eaa <__ascii_wctomb+0x14>
 8009ea0:	228a      	movs	r2, #138	@ 0x8a
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	4770      	bx	lr
 8009eaa:	700a      	strb	r2, [r1, #0]
 8009eac:	2001      	movs	r0, #1
 8009eae:	4770      	bx	lr

08009eb0 <fiprintf>:
 8009eb0:	b40e      	push	{r1, r2, r3}
 8009eb2:	b503      	push	{r0, r1, lr}
 8009eb4:	4601      	mov	r1, r0
 8009eb6:	ab03      	add	r3, sp, #12
 8009eb8:	4805      	ldr	r0, [pc, #20]	@ (8009ed0 <fiprintf+0x20>)
 8009eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ebe:	6800      	ldr	r0, [r0, #0]
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	f000 f83f 	bl	8009f44 <_vfiprintf_r>
 8009ec6:	b002      	add	sp, #8
 8009ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ecc:	b003      	add	sp, #12
 8009ece:	4770      	bx	lr
 8009ed0:	20000030 	.word	0x20000030

08009ed4 <abort>:
 8009ed4:	b508      	push	{r3, lr}
 8009ed6:	2006      	movs	r0, #6
 8009ed8:	f000 fa08 	bl	800a2ec <raise>
 8009edc:	2001      	movs	r0, #1
 8009ede:	f7f7 fc73 	bl	80017c8 <_exit>

08009ee2 <_malloc_usable_size_r>:
 8009ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee6:	1f18      	subs	r0, r3, #4
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	bfbc      	itt	lt
 8009eec:	580b      	ldrlt	r3, [r1, r0]
 8009eee:	18c0      	addlt	r0, r0, r3
 8009ef0:	4770      	bx	lr

08009ef2 <__sfputc_r>:
 8009ef2:	6893      	ldr	r3, [r2, #8]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	b410      	push	{r4}
 8009efa:	6093      	str	r3, [r2, #8]
 8009efc:	da08      	bge.n	8009f10 <__sfputc_r+0x1e>
 8009efe:	6994      	ldr	r4, [r2, #24]
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	db01      	blt.n	8009f08 <__sfputc_r+0x16>
 8009f04:	290a      	cmp	r1, #10
 8009f06:	d103      	bne.n	8009f10 <__sfputc_r+0x1e>
 8009f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f0c:	f000 b932 	b.w	800a174 <__swbuf_r>
 8009f10:	6813      	ldr	r3, [r2, #0]
 8009f12:	1c58      	adds	r0, r3, #1
 8009f14:	6010      	str	r0, [r2, #0]
 8009f16:	7019      	strb	r1, [r3, #0]
 8009f18:	4608      	mov	r0, r1
 8009f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <__sfputs_r>:
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	4614      	mov	r4, r2
 8009f28:	18d5      	adds	r5, r2, r3
 8009f2a:	42ac      	cmp	r4, r5
 8009f2c:	d101      	bne.n	8009f32 <__sfputs_r+0x12>
 8009f2e:	2000      	movs	r0, #0
 8009f30:	e007      	b.n	8009f42 <__sfputs_r+0x22>
 8009f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f36:	463a      	mov	r2, r7
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff ffda 	bl	8009ef2 <__sfputc_r>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	d1f3      	bne.n	8009f2a <__sfputs_r+0xa>
 8009f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f44 <_vfiprintf_r>:
 8009f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	460d      	mov	r5, r1
 8009f4a:	b09d      	sub	sp, #116	@ 0x74
 8009f4c:	4614      	mov	r4, r2
 8009f4e:	4698      	mov	r8, r3
 8009f50:	4606      	mov	r6, r0
 8009f52:	b118      	cbz	r0, 8009f5c <_vfiprintf_r+0x18>
 8009f54:	6a03      	ldr	r3, [r0, #32]
 8009f56:	b90b      	cbnz	r3, 8009f5c <_vfiprintf_r+0x18>
 8009f58:	f7fc fdfa 	bl	8006b50 <__sinit>
 8009f5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f5e:	07d9      	lsls	r1, r3, #31
 8009f60:	d405      	bmi.n	8009f6e <_vfiprintf_r+0x2a>
 8009f62:	89ab      	ldrh	r3, [r5, #12]
 8009f64:	059a      	lsls	r2, r3, #22
 8009f66:	d402      	bmi.n	8009f6e <_vfiprintf_r+0x2a>
 8009f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f6a:	f7fc ff08 	bl	8006d7e <__retarget_lock_acquire_recursive>
 8009f6e:	89ab      	ldrh	r3, [r5, #12]
 8009f70:	071b      	lsls	r3, r3, #28
 8009f72:	d501      	bpl.n	8009f78 <_vfiprintf_r+0x34>
 8009f74:	692b      	ldr	r3, [r5, #16]
 8009f76:	b99b      	cbnz	r3, 8009fa0 <_vfiprintf_r+0x5c>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f000 f938 	bl	800a1f0 <__swsetup_r>
 8009f80:	b170      	cbz	r0, 8009fa0 <_vfiprintf_r+0x5c>
 8009f82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f84:	07dc      	lsls	r4, r3, #31
 8009f86:	d504      	bpl.n	8009f92 <_vfiprintf_r+0x4e>
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	b01d      	add	sp, #116	@ 0x74
 8009f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	0598      	lsls	r0, r3, #22
 8009f96:	d4f7      	bmi.n	8009f88 <_vfiprintf_r+0x44>
 8009f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f9a:	f7fc fef1 	bl	8006d80 <__retarget_lock_release_recursive>
 8009f9e:	e7f3      	b.n	8009f88 <_vfiprintf_r+0x44>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fae:	2330      	movs	r3, #48	@ 0x30
 8009fb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a160 <_vfiprintf_r+0x21c>
 8009fb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fb8:	f04f 0901 	mov.w	r9, #1
 8009fbc:	4623      	mov	r3, r4
 8009fbe:	469a      	mov	sl, r3
 8009fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc4:	b10a      	cbz	r2, 8009fca <_vfiprintf_r+0x86>
 8009fc6:	2a25      	cmp	r2, #37	@ 0x25
 8009fc8:	d1f9      	bne.n	8009fbe <_vfiprintf_r+0x7a>
 8009fca:	ebba 0b04 	subs.w	fp, sl, r4
 8009fce:	d00b      	beq.n	8009fe8 <_vfiprintf_r+0xa4>
 8009fd0:	465b      	mov	r3, fp
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff ffa2 	bl	8009f20 <__sfputs_r>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f000 80a7 	beq.w	800a130 <_vfiprintf_r+0x1ec>
 8009fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fe4:	445a      	add	r2, fp
 8009fe6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 809f 	beq.w	800a130 <_vfiprintf_r+0x1ec>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ffc:	f10a 0a01 	add.w	sl, sl, #1
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	9307      	str	r3, [sp, #28]
 800a004:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a008:	931a      	str	r3, [sp, #104]	@ 0x68
 800a00a:	4654      	mov	r4, sl
 800a00c:	2205      	movs	r2, #5
 800a00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a012:	4853      	ldr	r0, [pc, #332]	@ (800a160 <_vfiprintf_r+0x21c>)
 800a014:	f7f6 f904 	bl	8000220 <memchr>
 800a018:	9a04      	ldr	r2, [sp, #16]
 800a01a:	b9d8      	cbnz	r0, 800a054 <_vfiprintf_r+0x110>
 800a01c:	06d1      	lsls	r1, r2, #27
 800a01e:	bf44      	itt	mi
 800a020:	2320      	movmi	r3, #32
 800a022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a026:	0713      	lsls	r3, r2, #28
 800a028:	bf44      	itt	mi
 800a02a:	232b      	movmi	r3, #43	@ 0x2b
 800a02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a030:	f89a 3000 	ldrb.w	r3, [sl]
 800a034:	2b2a      	cmp	r3, #42	@ 0x2a
 800a036:	d015      	beq.n	800a064 <_vfiprintf_r+0x120>
 800a038:	9a07      	ldr	r2, [sp, #28]
 800a03a:	4654      	mov	r4, sl
 800a03c:	2000      	movs	r0, #0
 800a03e:	f04f 0c0a 	mov.w	ip, #10
 800a042:	4621      	mov	r1, r4
 800a044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a048:	3b30      	subs	r3, #48	@ 0x30
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	d94b      	bls.n	800a0e6 <_vfiprintf_r+0x1a2>
 800a04e:	b1b0      	cbz	r0, 800a07e <_vfiprintf_r+0x13a>
 800a050:	9207      	str	r2, [sp, #28]
 800a052:	e014      	b.n	800a07e <_vfiprintf_r+0x13a>
 800a054:	eba0 0308 	sub.w	r3, r0, r8
 800a058:	fa09 f303 	lsl.w	r3, r9, r3
 800a05c:	4313      	orrs	r3, r2
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	46a2      	mov	sl, r4
 800a062:	e7d2      	b.n	800a00a <_vfiprintf_r+0xc6>
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	1d19      	adds	r1, r3, #4
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	9103      	str	r1, [sp, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	bfbb      	ittet	lt
 800a070:	425b      	neglt	r3, r3
 800a072:	f042 0202 	orrlt.w	r2, r2, #2
 800a076:	9307      	strge	r3, [sp, #28]
 800a078:	9307      	strlt	r3, [sp, #28]
 800a07a:	bfb8      	it	lt
 800a07c:	9204      	strlt	r2, [sp, #16]
 800a07e:	7823      	ldrb	r3, [r4, #0]
 800a080:	2b2e      	cmp	r3, #46	@ 0x2e
 800a082:	d10a      	bne.n	800a09a <_vfiprintf_r+0x156>
 800a084:	7863      	ldrb	r3, [r4, #1]
 800a086:	2b2a      	cmp	r3, #42	@ 0x2a
 800a088:	d132      	bne.n	800a0f0 <_vfiprintf_r+0x1ac>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	1d1a      	adds	r2, r3, #4
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	9203      	str	r2, [sp, #12]
 800a092:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a096:	3402      	adds	r4, #2
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a170 <_vfiprintf_r+0x22c>
 800a09e:	7821      	ldrb	r1, [r4, #0]
 800a0a0:	2203      	movs	r2, #3
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	f7f6 f8bc 	bl	8000220 <memchr>
 800a0a8:	b138      	cbz	r0, 800a0ba <_vfiprintf_r+0x176>
 800a0aa:	9b04      	ldr	r3, [sp, #16]
 800a0ac:	eba0 000a 	sub.w	r0, r0, sl
 800a0b0:	2240      	movs	r2, #64	@ 0x40
 800a0b2:	4082      	lsls	r2, r0
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	3401      	adds	r4, #1
 800a0b8:	9304      	str	r3, [sp, #16]
 800a0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0be:	4829      	ldr	r0, [pc, #164]	@ (800a164 <_vfiprintf_r+0x220>)
 800a0c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0c4:	2206      	movs	r2, #6
 800a0c6:	f7f6 f8ab 	bl	8000220 <memchr>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d03f      	beq.n	800a14e <_vfiprintf_r+0x20a>
 800a0ce:	4b26      	ldr	r3, [pc, #152]	@ (800a168 <_vfiprintf_r+0x224>)
 800a0d0:	bb1b      	cbnz	r3, 800a11a <_vfiprintf_r+0x1d6>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	3307      	adds	r3, #7
 800a0d6:	f023 0307 	bic.w	r3, r3, #7
 800a0da:	3308      	adds	r3, #8
 800a0dc:	9303      	str	r3, [sp, #12]
 800a0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e0:	443b      	add	r3, r7
 800a0e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e4:	e76a      	b.n	8009fbc <_vfiprintf_r+0x78>
 800a0e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	e7a8      	b.n	800a042 <_vfiprintf_r+0xfe>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	3401      	adds	r4, #1
 800a0f4:	9305      	str	r3, [sp, #20]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	f04f 0c0a 	mov.w	ip, #10
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a102:	3a30      	subs	r2, #48	@ 0x30
 800a104:	2a09      	cmp	r2, #9
 800a106:	d903      	bls.n	800a110 <_vfiprintf_r+0x1cc>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0c6      	beq.n	800a09a <_vfiprintf_r+0x156>
 800a10c:	9105      	str	r1, [sp, #20]
 800a10e:	e7c4      	b.n	800a09a <_vfiprintf_r+0x156>
 800a110:	fb0c 2101 	mla	r1, ip, r1, r2
 800a114:	4604      	mov	r4, r0
 800a116:	2301      	movs	r3, #1
 800a118:	e7f0      	b.n	800a0fc <_vfiprintf_r+0x1b8>
 800a11a:	ab03      	add	r3, sp, #12
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	462a      	mov	r2, r5
 800a120:	4b12      	ldr	r3, [pc, #72]	@ (800a16c <_vfiprintf_r+0x228>)
 800a122:	a904      	add	r1, sp, #16
 800a124:	4630      	mov	r0, r6
 800a126:	f7fb febb 	bl	8005ea0 <_printf_float>
 800a12a:	4607      	mov	r7, r0
 800a12c:	1c78      	adds	r0, r7, #1
 800a12e:	d1d6      	bne.n	800a0de <_vfiprintf_r+0x19a>
 800a130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a132:	07d9      	lsls	r1, r3, #31
 800a134:	d405      	bmi.n	800a142 <_vfiprintf_r+0x1fe>
 800a136:	89ab      	ldrh	r3, [r5, #12]
 800a138:	059a      	lsls	r2, r3, #22
 800a13a:	d402      	bmi.n	800a142 <_vfiprintf_r+0x1fe>
 800a13c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a13e:	f7fc fe1f 	bl	8006d80 <__retarget_lock_release_recursive>
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	065b      	lsls	r3, r3, #25
 800a146:	f53f af1f 	bmi.w	8009f88 <_vfiprintf_r+0x44>
 800a14a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a14c:	e71e      	b.n	8009f8c <_vfiprintf_r+0x48>
 800a14e:	ab03      	add	r3, sp, #12
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	462a      	mov	r2, r5
 800a154:	4b05      	ldr	r3, [pc, #20]	@ (800a16c <_vfiprintf_r+0x228>)
 800a156:	a904      	add	r1, sp, #16
 800a158:	4630      	mov	r0, r6
 800a15a:	f7fc f939 	bl	80063d0 <_printf_i>
 800a15e:	e7e4      	b.n	800a12a <_vfiprintf_r+0x1e6>
 800a160:	0800a811 	.word	0x0800a811
 800a164:	0800a81b 	.word	0x0800a81b
 800a168:	08005ea1 	.word	0x08005ea1
 800a16c:	08009f21 	.word	0x08009f21
 800a170:	0800a817 	.word	0x0800a817

0800a174 <__swbuf_r>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	460e      	mov	r6, r1
 800a178:	4614      	mov	r4, r2
 800a17a:	4605      	mov	r5, r0
 800a17c:	b118      	cbz	r0, 800a186 <__swbuf_r+0x12>
 800a17e:	6a03      	ldr	r3, [r0, #32]
 800a180:	b90b      	cbnz	r3, 800a186 <__swbuf_r+0x12>
 800a182:	f7fc fce5 	bl	8006b50 <__sinit>
 800a186:	69a3      	ldr	r3, [r4, #24]
 800a188:	60a3      	str	r3, [r4, #8]
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	071a      	lsls	r2, r3, #28
 800a18e:	d501      	bpl.n	800a194 <__swbuf_r+0x20>
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	b943      	cbnz	r3, 800a1a6 <__swbuf_r+0x32>
 800a194:	4621      	mov	r1, r4
 800a196:	4628      	mov	r0, r5
 800a198:	f000 f82a 	bl	800a1f0 <__swsetup_r>
 800a19c:	b118      	cbz	r0, 800a1a6 <__swbuf_r+0x32>
 800a19e:	f04f 37ff 	mov.w	r7, #4294967295
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	6922      	ldr	r2, [r4, #16]
 800a1aa:	1a98      	subs	r0, r3, r2
 800a1ac:	6963      	ldr	r3, [r4, #20]
 800a1ae:	b2f6      	uxtb	r6, r6
 800a1b0:	4283      	cmp	r3, r0
 800a1b2:	4637      	mov	r7, r6
 800a1b4:	dc05      	bgt.n	800a1c2 <__swbuf_r+0x4e>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	f7ff fa47 	bl	800964c <_fflush_r>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d1ed      	bne.n	800a19e <__swbuf_r+0x2a>
 800a1c2:	68a3      	ldr	r3, [r4, #8]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	60a3      	str	r3, [r4, #8]
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	6022      	str	r2, [r4, #0]
 800a1ce:	701e      	strb	r6, [r3, #0]
 800a1d0:	6962      	ldr	r2, [r4, #20]
 800a1d2:	1c43      	adds	r3, r0, #1
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d004      	beq.n	800a1e2 <__swbuf_r+0x6e>
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	07db      	lsls	r3, r3, #31
 800a1dc:	d5e1      	bpl.n	800a1a2 <__swbuf_r+0x2e>
 800a1de:	2e0a      	cmp	r6, #10
 800a1e0:	d1df      	bne.n	800a1a2 <__swbuf_r+0x2e>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f7ff fa31 	bl	800964c <_fflush_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d0d9      	beq.n	800a1a2 <__swbuf_r+0x2e>
 800a1ee:	e7d6      	b.n	800a19e <__swbuf_r+0x2a>

0800a1f0 <__swsetup_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4b29      	ldr	r3, [pc, #164]	@ (800a298 <__swsetup_r+0xa8>)
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	b118      	cbz	r0, 800a204 <__swsetup_r+0x14>
 800a1fc:	6a03      	ldr	r3, [r0, #32]
 800a1fe:	b90b      	cbnz	r3, 800a204 <__swsetup_r+0x14>
 800a200:	f7fc fca6 	bl	8006b50 <__sinit>
 800a204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a208:	0719      	lsls	r1, r3, #28
 800a20a:	d422      	bmi.n	800a252 <__swsetup_r+0x62>
 800a20c:	06da      	lsls	r2, r3, #27
 800a20e:	d407      	bmi.n	800a220 <__swsetup_r+0x30>
 800a210:	2209      	movs	r2, #9
 800a212:	602a      	str	r2, [r5, #0]
 800a214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	e033      	b.n	800a288 <__swsetup_r+0x98>
 800a220:	0758      	lsls	r0, r3, #29
 800a222:	d512      	bpl.n	800a24a <__swsetup_r+0x5a>
 800a224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a226:	b141      	cbz	r1, 800a23a <__swsetup_r+0x4a>
 800a228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a22c:	4299      	cmp	r1, r3
 800a22e:	d002      	beq.n	800a236 <__swsetup_r+0x46>
 800a230:	4628      	mov	r0, r5
 800a232:	f7fd fbf9 	bl	8007a28 <_free_r>
 800a236:	2300      	movs	r3, #0
 800a238:	6363      	str	r3, [r4, #52]	@ 0x34
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	2300      	movs	r3, #0
 800a244:	6063      	str	r3, [r4, #4]
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f043 0308 	orr.w	r3, r3, #8
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	6923      	ldr	r3, [r4, #16]
 800a254:	b94b      	cbnz	r3, 800a26a <__swsetup_r+0x7a>
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a25c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a260:	d003      	beq.n	800a26a <__swsetup_r+0x7a>
 800a262:	4621      	mov	r1, r4
 800a264:	4628      	mov	r0, r5
 800a266:	f000 f883 	bl	800a370 <__smakebuf_r>
 800a26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26e:	f013 0201 	ands.w	r2, r3, #1
 800a272:	d00a      	beq.n	800a28a <__swsetup_r+0x9a>
 800a274:	2200      	movs	r2, #0
 800a276:	60a2      	str	r2, [r4, #8]
 800a278:	6962      	ldr	r2, [r4, #20]
 800a27a:	4252      	negs	r2, r2
 800a27c:	61a2      	str	r2, [r4, #24]
 800a27e:	6922      	ldr	r2, [r4, #16]
 800a280:	b942      	cbnz	r2, 800a294 <__swsetup_r+0xa4>
 800a282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a286:	d1c5      	bne.n	800a214 <__swsetup_r+0x24>
 800a288:	bd38      	pop	{r3, r4, r5, pc}
 800a28a:	0799      	lsls	r1, r3, #30
 800a28c:	bf58      	it	pl
 800a28e:	6962      	ldrpl	r2, [r4, #20]
 800a290:	60a2      	str	r2, [r4, #8]
 800a292:	e7f4      	b.n	800a27e <__swsetup_r+0x8e>
 800a294:	2000      	movs	r0, #0
 800a296:	e7f7      	b.n	800a288 <__swsetup_r+0x98>
 800a298:	20000030 	.word	0x20000030

0800a29c <_raise_r>:
 800a29c:	291f      	cmp	r1, #31
 800a29e:	b538      	push	{r3, r4, r5, lr}
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	d904      	bls.n	800a2b0 <_raise_r+0x14>
 800a2a6:	2316      	movs	r3, #22
 800a2a8:	6003      	str	r3, [r0, #0]
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2b2:	b112      	cbz	r2, 800a2ba <_raise_r+0x1e>
 800a2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2b8:	b94b      	cbnz	r3, 800a2ce <_raise_r+0x32>
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f000 f830 	bl	800a320 <_getpid_r>
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ca:	f000 b817 	b.w	800a2fc <_kill_r>
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d00a      	beq.n	800a2e8 <_raise_r+0x4c>
 800a2d2:	1c59      	adds	r1, r3, #1
 800a2d4:	d103      	bne.n	800a2de <_raise_r+0x42>
 800a2d6:	2316      	movs	r3, #22
 800a2d8:	6003      	str	r3, [r0, #0]
 800a2da:	2001      	movs	r0, #1
 800a2dc:	e7e7      	b.n	800a2ae <_raise_r+0x12>
 800a2de:	2100      	movs	r1, #0
 800a2e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	4798      	blx	r3
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	e7e0      	b.n	800a2ae <_raise_r+0x12>

0800a2ec <raise>:
 800a2ec:	4b02      	ldr	r3, [pc, #8]	@ (800a2f8 <raise+0xc>)
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	f7ff bfd3 	b.w	800a29c <_raise_r>
 800a2f6:	bf00      	nop
 800a2f8:	20000030 	.word	0x20000030

0800a2fc <_kill_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d07      	ldr	r5, [pc, #28]	@ (800a31c <_kill_r+0x20>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	4611      	mov	r1, r2
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	f7f7 fa4d 	bl	80017a8 <_kill>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d102      	bne.n	800a318 <_kill_r+0x1c>
 800a312:	682b      	ldr	r3, [r5, #0]
 800a314:	b103      	cbz	r3, 800a318 <_kill_r+0x1c>
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	bd38      	pop	{r3, r4, r5, pc}
 800a31a:	bf00      	nop
 800a31c:	200004c0 	.word	0x200004c0

0800a320 <_getpid_r>:
 800a320:	f7f7 ba3a 	b.w	8001798 <_getpid>

0800a324 <__swhatbuf_r>:
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	460c      	mov	r4, r1
 800a328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32c:	2900      	cmp	r1, #0
 800a32e:	b096      	sub	sp, #88	@ 0x58
 800a330:	4615      	mov	r5, r2
 800a332:	461e      	mov	r6, r3
 800a334:	da0d      	bge.n	800a352 <__swhatbuf_r+0x2e>
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a33c:	f04f 0100 	mov.w	r1, #0
 800a340:	bf14      	ite	ne
 800a342:	2340      	movne	r3, #64	@ 0x40
 800a344:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a348:	2000      	movs	r0, #0
 800a34a:	6031      	str	r1, [r6, #0]
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	b016      	add	sp, #88	@ 0x58
 800a350:	bd70      	pop	{r4, r5, r6, pc}
 800a352:	466a      	mov	r2, sp
 800a354:	f000 f848 	bl	800a3e8 <_fstat_r>
 800a358:	2800      	cmp	r0, #0
 800a35a:	dbec      	blt.n	800a336 <__swhatbuf_r+0x12>
 800a35c:	9901      	ldr	r1, [sp, #4]
 800a35e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a362:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a366:	4259      	negs	r1, r3
 800a368:	4159      	adcs	r1, r3
 800a36a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a36e:	e7eb      	b.n	800a348 <__swhatbuf_r+0x24>

0800a370 <__smakebuf_r>:
 800a370:	898b      	ldrh	r3, [r1, #12]
 800a372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a374:	079d      	lsls	r5, r3, #30
 800a376:	4606      	mov	r6, r0
 800a378:	460c      	mov	r4, r1
 800a37a:	d507      	bpl.n	800a38c <__smakebuf_r+0x1c>
 800a37c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	6123      	str	r3, [r4, #16]
 800a384:	2301      	movs	r3, #1
 800a386:	6163      	str	r3, [r4, #20]
 800a388:	b003      	add	sp, #12
 800a38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a38c:	ab01      	add	r3, sp, #4
 800a38e:	466a      	mov	r2, sp
 800a390:	f7ff ffc8 	bl	800a324 <__swhatbuf_r>
 800a394:	9f00      	ldr	r7, [sp, #0]
 800a396:	4605      	mov	r5, r0
 800a398:	4639      	mov	r1, r7
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7fd fbb8 	bl	8007b10 <_malloc_r>
 800a3a0:	b948      	cbnz	r0, 800a3b6 <__smakebuf_r+0x46>
 800a3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a6:	059a      	lsls	r2, r3, #22
 800a3a8:	d4ee      	bmi.n	800a388 <__smakebuf_r+0x18>
 800a3aa:	f023 0303 	bic.w	r3, r3, #3
 800a3ae:	f043 0302 	orr.w	r3, r3, #2
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	e7e2      	b.n	800a37c <__smakebuf_r+0xc>
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	6020      	str	r0, [r4, #0]
 800a3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	9b01      	ldr	r3, [sp, #4]
 800a3c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3c6:	b15b      	cbz	r3, 800a3e0 <__smakebuf_r+0x70>
 800a3c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f000 f81d 	bl	800a40c <_isatty_r>
 800a3d2:	b128      	cbz	r0, 800a3e0 <__smakebuf_r+0x70>
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	f023 0303 	bic.w	r3, r3, #3
 800a3da:	f043 0301 	orr.w	r3, r3, #1
 800a3de:	81a3      	strh	r3, [r4, #12]
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	431d      	orrs	r5, r3
 800a3e4:	81a5      	strh	r5, [r4, #12]
 800a3e6:	e7cf      	b.n	800a388 <__smakebuf_r+0x18>

0800a3e8 <_fstat_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d07      	ldr	r5, [pc, #28]	@ (800a408 <_fstat_r+0x20>)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	602b      	str	r3, [r5, #0]
 800a3f6:	f7f7 fa37 	bl	8001868 <_fstat>
 800a3fa:	1c43      	adds	r3, r0, #1
 800a3fc:	d102      	bne.n	800a404 <_fstat_r+0x1c>
 800a3fe:	682b      	ldr	r3, [r5, #0]
 800a400:	b103      	cbz	r3, 800a404 <_fstat_r+0x1c>
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	bd38      	pop	{r3, r4, r5, pc}
 800a406:	bf00      	nop
 800a408:	200004c0 	.word	0x200004c0

0800a40c <_isatty_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d06      	ldr	r5, [pc, #24]	@ (800a428 <_isatty_r+0x1c>)
 800a410:	2300      	movs	r3, #0
 800a412:	4604      	mov	r4, r0
 800a414:	4608      	mov	r0, r1
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	f7f7 fa36 	bl	8001888 <_isatty>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_isatty_r+0x1a>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_isatty_r+0x1a>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	200004c0 	.word	0x200004c0

0800a42c <_init>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr

0800a438 <_fini>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	bf00      	nop
 800a43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43e:	bc08      	pop	{r3}
 800a440:	469e      	mov	lr, r3
 800a442:	4770      	bx	lr
