
tp6_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e4c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006144  08006144  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006144  08006144  00007144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800614c  0800614c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800614c  0800614c  0000714c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006150  08006150  00007150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006154  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000070  080061c4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  080061c4  00008934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102d1  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fa  00000000  00000000  00018371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0001a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e1  00000000  00000000  0001b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed34  00000000  00000000  0001c059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001082d  00000000  00000000  0003ad8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdb08  00000000  00000000  0004b5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001090c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  00109108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0010d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006014 	.word	0x08006014

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006014 	.word	0x08006014

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <set_rapport_cyclique_et_sens>:
 * @param  nouvelle_vitesse : un floatant compris entre 0 et 1
 * @param  nouveau_sens : sens de rotation des roues
 * @retval None
 */
void set_rapport_cyclique_et_sens(float nouveau_rapport_cyclique, bool nouveau_sens)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	@ 0x38
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	72fb      	strb	r3, [r7, #11]
	uint8_t octet_nouveau_sens;
	uint8_t txData[2];
	FDCAN_TxHeaderTypeDef header;

	// On gère les cas limites
	if (nouveau_rapport_cyclique > 1)
 8000eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	dd04      	ble.n	8000ec6 <set_rapport_cyclique_et_sens+0x2a>
		rapport_cyclique = 1;
 8000ebc:	4b25      	ldr	r3, [pc, #148]	@ (8000f54 <set_rapport_cyclique_et_sens+0xb8>)
 8000ebe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e00e      	b.n	8000ee4 <set_rapport_cyclique_et_sens+0x48>
	else if (nouveau_rapport_cyclique < 0)
 8000ec6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed2:	d504      	bpl.n	8000ede <set_rapport_cyclique_et_sens+0x42>
		rapport_cyclique = 0;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <set_rapport_cyclique_et_sens+0xb8>)
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e002      	b.n	8000ee4 <set_rapport_cyclique_et_sens+0x48>
	else
		rapport_cyclique = nouveau_rapport_cyclique;
 8000ede:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <set_rapport_cyclique_et_sens+0xb8>)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6013      	str	r3, [r2, #0]

	octet_nouveau_rapport_cyclique = (uint8_t) (rapport_cyclique * 100);
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <set_rapport_cyclique_et_sens+0xb8>)
 8000ee6:	edd3 7a00 	vldr	s15, [r3]
 8000eea:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000f58 <set_rapport_cyclique_et_sens+0xbc>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000efa:	793b      	ldrb	r3, [r7, #4]
 8000efc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	octet_nouveau_sens     =  nouveau_sens;
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	// Premier octet la vitesse * 100
	txData[0] = octet_nouveau_rapport_cyclique;
 8000f06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f0a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	// Second octet le sens de rotation
	txData[1] = octet_nouveau_sens;
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f12:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	/******************* NE PAS TOUCHER **************************************/
	header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
	header.BitRateSwitch = FDCAN_BRS_OFF;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
	header.FDFormat = FDCAN_CLASSIC_CAN;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	header.MessageMarker = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	@ 0x30
	/*************************************************************************/

	header.Identifier = CAN_ID_MOTEUR; // Set your CAN identifier
 8000f2a:	f240 6302 	movw	r3, #1538	@ 0x602
 8000f2e:	613b      	str	r3, [r7, #16]
	header.IdType = FDCAN_STANDARD_ID; // Standard ID
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
	header.TxFrameType = FDCAN_DATA_FRAME; // Data frame
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
	header.DataLength = 2; // Data length
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header, txData);
 8000f3c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <set_rapport_cyclique_et_sens+0xc0>)
 8000f48:	f001 fa36 	bl	80023b8 <HAL_FDCAN_AddMessageToTxFifoQ>

	// TODO : Mettre une tempo
}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	@ 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000008c 	.word	0x2000008c
 8000f58:	42c80000 	.word	0x42c80000
 8000f5c:	20000090 	.word	0x20000090

08000f60 <set_angle>:
{
	set_rapport_cyclique_et_sens(rapport_cyclique, 1);
}

void set_angle(float nouvelle_angle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	@ 0x38
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t cmd_angle;
	FDCAN_TxHeaderTypeDef header;

	//Fixer les limites de rotation du robot

	if (nouvelle_angle > -80.8)
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fb0c 	bl	8000588 <__aeabi_f2d>
 8000f70:	a33d      	add	r3, pc, #244	@ (adr r3, 8001068 <set_angle+0x108>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff fdef 	bl	8000b58 <__aeabi_dcmpgt>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <set_angle+0x28>
		angle = -80.8;
 8000f80:	4b35      	ldr	r3, [pc, #212]	@ (8001058 <set_angle+0xf8>)
 8000f82:	4a36      	ldr	r2, [pc, #216]	@ (800105c <set_angle+0xfc>)
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e011      	b.n	8000fac <set_angle+0x4c>
	else if (nouvelle_angle < -120.8)
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fafd 	bl	8000588 <__aeabi_f2d>
 8000f8e:	a32e      	add	r3, pc, #184	@ (adr r3, 8001048 <set_angle+0xe8>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff fdc2 	bl	8000b1c <__aeabi_dcmplt>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <set_angle+0x46>
		angle = -120.8;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001058 <set_angle+0xf8>)
 8000fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8001060 <set_angle+0x100>)
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e002      	b.n	8000fac <set_angle+0x4c>
	else
		angle = nouvelle_angle;
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8001058 <set_angle+0xf8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]


	/******************* NE PAS TOUCHER **************************************/
	header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
	header.BitRateSwitch = FDCAN_BRS_OFF;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
	header.FDFormat = FDCAN_CLASSIC_CAN;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
	header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.MessageMarker = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/*************************************************************************/


	header.Identifier = CAN_ID_HERKULEX; // Set your CAN identifier
 8000fc0:	f240 6301 	movw	r3, #1537	@ 0x601
 8000fc4:	60fb      	str	r3, [r7, #12]
	header.IdType = FDCAN_STANDARD_ID; // Standard ID
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
	header.TxFrameType = FDCAN_DATA_FRAME; // Data frame
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
	header.DataLength = 2; // Data length
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]

	cmd_angle          = 0x200+(angle/0.35);
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <set_angle+0xf8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fad6 	bl	8000588 <__aeabi_f2d>
 8000fdc:	a31c      	add	r3, pc, #112	@ (adr r3, 8001050 <set_angle+0xf0>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fc53 	bl	800088c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8000ff6:	f7ff f969 	bl	80002cc <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fdb3 	bl	8000b6c <__aeabi_d2uiz>
 8001006:	4603      	mov	r3, r0
 8001008:	86fb      	strh	r3, [r7, #54]	@ 0x36

	octet_faible_angle = (uint8_t) cmd_angle;
 800100a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800100c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	octet_fort_angle   = (cmd_angle >> 8) & 0x00FF;
 8001010:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	b29b      	uxth	r3, r3
 8001016:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	txData[0] = octet_fort_angle;
 800101a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800101e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txData[1] = octet_faible_angle;
 8001022:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001026:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header, txData);
 800102a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	@ (8001064 <set_angle+0x104>)
 8001036:	f001 f9bf 	bl	80023b8 <HAL_FDCAN_AddMessageToTxFifoQ>

	// TODO : Mettre une tempo
}
 800103a:	bf00      	nop
 800103c:	3738      	adds	r7, #56	@ 0x38
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	f3af 8000 	nop.w
 8001048:	33333333 	.word	0x33333333
 800104c:	c05e3333 	.word	0xc05e3333
 8001050:	66666666 	.word	0x66666666
 8001054:	3fd66666 	.word	0x3fd66666
 8001058:	20000000 	.word	0x20000000
 800105c:	c2a1999a 	.word	0xc2a1999a
 8001060:	c2f1999a 	.word	0xc2f1999a
 8001064:	20000090 	.word	0x20000090
 8001068:	33333333 	.word	0x33333333
 800106c:	c0543333 	.word	0xc0543333

08001070 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001074:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 8001076:	4a20      	ldr	r2, [pc, #128]	@ (80010f8 <MX_FDCAN1_Init+0x88>)
 8001078:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 800108e:	2200      	movs	r2, #0
 8001090:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 8001094:	2200      	movs	r2, #0
 8001096:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010a0:	2211      	movs	r2, #17
 80010a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010be:	2201      	movs	r2, #1
 80010c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_FDCAN1_Init+0x84>)
 80010e2:	f000 ffe7 	bl	80020b4 <HAL_FDCAN_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80010ec:	f000 fc58 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000090 	.word	0x20000090
 80010f8:	40006400 	.word	0x40006400

080010fc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09a      	sub	sp, #104	@ 0x68
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2244      	movs	r2, #68	@ 0x44
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f004 f83f 	bl	80051a0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <HAL_FDCAN_MspInit+0xbc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d141      	bne.n	80011b0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001136:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fd49 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001148:	f000 fc2a 	bl	80019a0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001150:	4a1a      	ldr	r2, [pc, #104]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 8001152:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001156:	6593      	str	r3, [r2, #88]	@ 0x58
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_FDCAN_MspInit+0xc0>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800117c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001180:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800118e:	2309      	movs	r3, #9
 8001190:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f001 fd9e 	bl	8002cdc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2015      	movs	r0, #21
 80011a6:	f000 ff50 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80011aa:	2015      	movs	r0, #21
 80011ac:	f000 ff67 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3768      	adds	r7, #104	@ 0x68
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40006400 	.word	0x40006400
 80011bc:	40021000 	.word	0x40021000

080011c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_GPIO_Init+0x78>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <MX_GPIO_Init+0x78>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <MX_GPIO_Init+0x78>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_GPIO_Init+0x78>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a11      	ldr	r2, [pc, #68]	@ (8001238 <MX_GPIO_Init+0x78>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_GPIO_Init+0x78>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <MX_GPIO_Init+0x7c>)
 800120e:	f001 fee7 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_GPIO_Init+0x7c>)
 800122c:	f001 fd56 	bl	8002cdc <HAL_GPIO_Init>

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400

08001240 <__io_putchar>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001248:	1d39      	adds	r1, r7, #4
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	2201      	movs	r2, #1
 8001250:	4803      	ldr	r0, [pc, #12]	@ (8001260 <__io_putchar+0x20>)
 8001252:	f002 feff 	bl	8004054 <HAL_UART_Transmit>

	return ch;
 8001256:	687b      	ldr	r3, [r7, #4]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000750 	.word	0x20000750

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001268:	f000 fd81 	bl	8001d6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126c:	f000 f938 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f7ff ffa6 	bl	80011c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001274:	f000 fcae 	bl	8001bd4 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8001278:	f7ff fefa 	bl	8001070 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("En vie\n");
 800127c:	4888      	ldr	r0, [pc, #544]	@ (80014a0 <main+0x23c>)
 800127e:	f003 fe8f 	bl	8004fa0 <puts>
							   FDCAN_FILTER_REMOTE);  // Accepter les trames distantes étendues


  printf("ConfigGlobalFilter 0x%X\n", retour);*/

  HAL_FDCAN_Start(&hfdcan1);
 8001282:	4888      	ldr	r0, [pc, #544]	@ (80014a4 <main+0x240>)
 8001284:	f001 f870 	bl	8002368 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2101      	movs	r1, #1
 800128c:	4885      	ldr	r0, [pc, #532]	@ (80014a4 <main+0x240>)
 800128e:	f001 f9df 	bl	8002650 <HAL_FDCAN_ActivateNotification>
  LCD_clear();
 8001292:	f000 fa9b 	bl	80017cc <LCD_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     while (1)
  {

    	 JOG_read() ;
 8001296:	f000 fa0d 	bl	80016b4 <JOG_read>
	  COD_read();
 800129a:	f000 fa2b 	bl	80016f4 <COD_read>
	 automate_decode_IHM();
 800129e:	f000 f99f 	bl	80015e0 <automate_decode_IHM>



	 switch (etat_actuelle)
 80012a2:	4b81      	ldr	r3, [pc, #516]	@ (80014a8 <main+0x244>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	f200 80e3 	bhi.w	8001472 <main+0x20e>
 80012ac:	a201      	add	r2, pc, #4	@ (adr r2, 80012b4 <main+0x50>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012c9 	.word	0x080012c9
 80012b8:	0800132d 	.word	0x0800132d
 80012bc:	0800142b 	.word	0x0800142b
 80012c0:	080013b5 	.word	0x080013b5
 80012c4:	0800144f 	.word	0x0800144f
	 {
	 case TEST_CHOIX :

		 HAL_Delay(10);
 80012c8:	200a      	movs	r0, #10
 80012ca:	f000 fdc1 	bl	8001e50 <HAL_Delay>
		  LCD_gotoxy(0,0);
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 fa5d 	bl	8001790 <LCD_gotoxy>
	   	 LCD_printf("Test a choisir");
 80012d6:	4875      	ldr	r0, [pc, #468]	@ (80014ac <main+0x248>)
 80012d8:	f000 fab6 	bl	8001848 <LCD_printf>
		  LCD_gotoxy(0,1);
 80012dc:	2101      	movs	r1, #1
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 fa56 	bl	8001790 <LCD_gotoxy>
		   	LCD_printf("          ");
 80012e4:	4872      	ldr	r0, [pc, #456]	@ (80014b0 <main+0x24c>)
 80012e6:	f000 faaf 	bl	8001848 <LCD_printf>

		 if (jog_value == 8 )
 80012ea:	4b72      	ldr	r3, [pc, #456]	@ (80014b4 <main+0x250>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d103      	bne.n	80012fa <main+0x96>
		 {
			 etat_actuelle = TEST_VITESSE ;
 80012f2:	4b6d      	ldr	r3, [pc, #436]	@ (80014a8 <main+0x244>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
		 }
		 else if (jog_value == 2)
				 {
			 etat_actuelle =  TEST_BLUETOOTH ;
			     }
               break ;
 80012f8:	e0bd      	b.n	8001476 <main+0x212>
		 else if (jog_value == 16 )
 80012fa:	4b6e      	ldr	r3, [pc, #440]	@ (80014b4 <main+0x250>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d103      	bne.n	800130a <main+0xa6>
			 etat_actuelle =  TEST_HERKULEX ;
 8001302:	4b69      	ldr	r3, [pc, #420]	@ (80014a8 <main+0x244>)
 8001304:	2203      	movs	r2, #3
 8001306:	701a      	strb	r2, [r3, #0]
               break ;
 8001308:	e0b5      	b.n	8001476 <main+0x212>
		 else if (jog_value == 1)
 800130a:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <main+0x250>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d103      	bne.n	800131a <main+0xb6>
			 etat_actuelle =  TEST_LIDAR;
 8001312:	4b65      	ldr	r3, [pc, #404]	@ (80014a8 <main+0x244>)
 8001314:	2202      	movs	r2, #2
 8001316:	701a      	strb	r2, [r3, #0]
               break ;
 8001318:	e0ad      	b.n	8001476 <main+0x212>
		 else if (jog_value == 2)
 800131a:	4b66      	ldr	r3, [pc, #408]	@ (80014b4 <main+0x250>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b02      	cmp	r3, #2
 8001320:	f040 80a9 	bne.w	8001476 <main+0x212>
			 etat_actuelle =  TEST_BLUETOOTH ;
 8001324:	4b60      	ldr	r3, [pc, #384]	@ (80014a8 <main+0x244>)
 8001326:	2204      	movs	r2, #4
 8001328:	701a      	strb	r2, [r3, #0]
               break ;
 800132a:	e0a4      	b.n	8001476 <main+0x212>


	 case TEST_VITESSE :
		  HAL_Delay(10);
 800132c:	200a      	movs	r0, #10
 800132e:	f000 fd8f 	bl	8001e50 <HAL_Delay>
		  LCD_gotoxy(0,0);
 8001332:	2100      	movs	r1, #0
 8001334:	2000      	movs	r0, #0
 8001336:	f000 fa2b 	bl	8001790 <LCD_gotoxy>
		  LCD_printf("choix:vitesse");
 800133a:	485f      	ldr	r0, [pc, #380]	@ (80014b8 <main+0x254>)
 800133c:	f000 fa84 	bl	8001848 <LCD_printf>
          if (cod_value > 10)
 8001340:	4b5e      	ldr	r3, [pc, #376]	@ (80014bc <main+0x258>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b0a      	cmp	r3, #10
 8001346:	d902      	bls.n	800134e <main+0xea>
          {
        	  cod_value = 0 ;
 8001348:	4b5c      	ldr	r3, [pc, #368]	@ (80014bc <main+0x258>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
          }


		  LCD_gotoxy(0,1);
 800134e:	2101      	movs	r1, #1
 8001350:	2000      	movs	r0, #0
 8001352:	f000 fa1d 	bl	8001790 <LCD_gotoxy>
		  LCD_printf("vitesse = %d ",cod_value);
 8001356:	4b59      	ldr	r3, [pc, #356]	@ (80014bc <main+0x258>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	4858      	ldr	r0, [pc, #352]	@ (80014c0 <main+0x25c>)
 800135e:	f000 fa73 	bl	8001848 <LCD_printf>

		  if (jog_value == 16)
 8001362:	4b54      	ldr	r3, [pc, #336]	@ (80014b4 <main+0x250>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b10      	cmp	r3, #16
 8001368:	d103      	bne.n	8001372 <main+0x10e>
		  {

			  direction = true ;
 800136a:	4b56      	ldr	r3, [pc, #344]	@ (80014c4 <main+0x260>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e006      	b.n	8001380 <main+0x11c>

		  }
		  else if (jog_value == 2)
 8001372:	4b50      	ldr	r3, [pc, #320]	@ (80014b4 <main+0x250>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d102      	bne.n	8001380 <main+0x11c>
		  {
			  direction = false ;
 800137a:	4b52      	ldr	r3, [pc, #328]	@ (80014c4 <main+0x260>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
		  }




	     if (jog_value == 4)
 8001380:	4b4c      	ldr	r3, [pc, #304]	@ (80014b4 <main+0x250>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b04      	cmp	r3, #4
 8001386:	d178      	bne.n	800147a <main+0x216>
	     {
	    	 set_rapport_cyclique_et_sens(cod_value/10,direction);
 8001388:	4b4c      	ldr	r3, [pc, #304]	@ (80014bc <main+0x258>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4a4e      	ldr	r2, [pc, #312]	@ (80014c8 <main+0x264>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	4b49      	ldr	r3, [pc, #292]	@ (80014c4 <main+0x260>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	f7ff fd78 	bl	8000e9c <set_rapport_cyclique_et_sens>
	    	 etat_actuelle = TEST_CHOIX ;
 80013ac:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <main+0x244>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
	     }

           break ;
 80013b2:	e062      	b.n	800147a <main+0x216>

	 case TEST_HERKULEX :
		  HAL_Delay(10);
 80013b4:	200a      	movs	r0, #10
 80013b6:	f000 fd4b 	bl	8001e50 <HAL_Delay>
		 LCD_gotoxy(0,0);
 80013ba:	2100      	movs	r1, #0
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 f9e7 	bl	8001790 <LCD_gotoxy>
	     LCD_printf("choix:herkulex");
 80013c2:	4842      	ldr	r0, [pc, #264]	@ (80014cc <main+0x268>)
 80013c4:	f000 fa40 	bl	8001848 <LCD_printf>

	     herkulex_test = cod_value - 128 ;
 80013c8:	4b3c      	ldr	r3, [pc, #240]	@ (80014bc <main+0x258>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3b80      	subs	r3, #128	@ 0x80
 80013ce:	4a40      	ldr	r2, [pc, #256]	@ (80014d0 <main+0x26c>)
 80013d0:	6013      	str	r3, [r2, #0]
         if (herkulex_test<-120)
 80013d2:	4b3f      	ldr	r3, [pc, #252]	@ (80014d0 <main+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 80013da:	da03      	bge.n	80013e4 <main+0x180>
         {

        	 herkulex_test = 0 ;
 80013dc:	4b3c      	ldr	r3, [pc, #240]	@ (80014d0 <main+0x26c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e006      	b.n	80013f2 <main+0x18e>
         }
         else if (herkulex_test>80)
 80013e4:	4b3a      	ldr	r3, [pc, #232]	@ (80014d0 <main+0x26c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b50      	cmp	r3, #80	@ 0x50
 80013ea:	dd02      	ble.n	80013f2 <main+0x18e>
         {
        	 herkulex_test = 0 ;
 80013ec:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <main+0x26c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
         }
	     LCD_gotoxy(0,1);
 80013f2:	2101      	movs	r1, #1
 80013f4:	2000      	movs	r0, #0
 80013f6:	f000 f9cb 	bl	8001790 <LCD_gotoxy>
	     LCD_printf("vitesse = %d ",herkulex_test);
 80013fa:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <main+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	482f      	ldr	r0, [pc, #188]	@ (80014c0 <main+0x25c>)
 8001402:	f000 fa21 	bl	8001848 <LCD_printf>


			    if (jog_value == 4)
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <main+0x250>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d137      	bne.n	800147e <main+0x21a>
				     {
			    	set_angle(herkulex_test) ;
 800140e:	4b30      	ldr	r3, [pc, #192]	@ (80014d0 <main+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	f7ff fd9f 	bl	8000f60 <set_angle>
			    	etat_actuelle = TEST_CHOIX ;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <main+0x244>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
				     }

	           break ;
 8001428:	e029      	b.n	800147e <main+0x21a>

	 case TEST_LIDAR :
		  HAL_Delay(10);
 800142a:	200a      	movs	r0, #10
 800142c:	f000 fd10 	bl	8001e50 <HAL_Delay>
		 LCD_gotoxy(0,0);
 8001430:	2100      	movs	r1, #0
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f9ac 	bl	8001790 <LCD_gotoxy>
	     LCD_printf("choix:lidar");
 8001438:	4826      	ldr	r0, [pc, #152]	@ (80014d4 <main+0x270>)
 800143a:	f000 fa05 	bl	8001848 <LCD_printf>

			    if (jog_value == 4)
 800143e:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <main+0x250>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d11d      	bne.n	8001482 <main+0x21e>
				     {
			    	etat_actuelle = TEST_CHOIX ;
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <main+0x244>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
				     }

	           break ;
 800144c:	e019      	b.n	8001482 <main+0x21e>
	 case TEST_BLUETOOTH :
		  HAL_Delay(10);
 800144e:	200a      	movs	r0, #10
 8001450:	f000 fcfe 	bl	8001e50 <HAL_Delay>
		 LCD_gotoxy(0,0);
 8001454:	2100      	movs	r1, #0
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f99a 	bl	8001790 <LCD_gotoxy>
	     LCD_printf("choix:bluetooth");
 800145c:	481e      	ldr	r0, [pc, #120]	@ (80014d8 <main+0x274>)
 800145e:	f000 f9f3 	bl	8001848 <LCD_printf>

			    if (jog_value == 4)
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <main+0x250>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b04      	cmp	r3, #4
 8001468:	d10d      	bne.n	8001486 <main+0x222>
				     {
			    	etat_actuelle = TEST_CHOIX ;
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <main+0x244>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
				     }

	           break ;
 8001470:	e009      	b.n	8001486 <main+0x222>

	default :
		break;
 8001472:	bf00      	nop
 8001474:	e008      	b.n	8001488 <main+0x224>
               break ;
 8001476:	bf00      	nop
 8001478:	e006      	b.n	8001488 <main+0x224>
           break ;
 800147a:	bf00      	nop
 800147c:	e004      	b.n	8001488 <main+0x224>
	           break ;
 800147e:	bf00      	nop
 8001480:	e002      	b.n	8001488 <main+0x224>
	           break ;
 8001482:	bf00      	nop
 8001484:	e000      	b.n	8001488 <main+0x224>
	           break ;
 8001486:	bf00      	nop
	  //TODO : Bloque la réception des trames lidar




	  valeur_afficher = cod_value & 0x00FF ;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <main+0x258>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <main+0x278>)
 8001490:	801a      	strh	r2, [r3, #0]


	  BAR_set(valeur_afficher);
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <main+0x278>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f94c 	bl	8001734 <BAR_set>
  {
 800149c:	e6fb      	b.n	8001296 <main+0x32>
 800149e:	bf00      	nop
 80014a0:	0800602c 	.word	0x0800602c
 80014a4:	20000090 	.word	0x20000090
 80014a8:	20000748 	.word	0x20000748
 80014ac:	08006034 	.word	0x08006034
 80014b0:	08006044 	.word	0x08006044
 80014b4:	2000073d 	.word	0x2000073d
 80014b8:	08006050 	.word	0x08006050
 80014bc:	2000073e 	.word	0x2000073e
 80014c0:	08006060 	.word	0x08006060
 80014c4:	20000004 	.word	0x20000004
 80014c8:	cccccccd 	.word	0xcccccccd
 80014cc:	08006070 	.word	0x08006070
 80014d0:	20000744 	.word	0x20000744
 80014d4:	08006080 	.word	0x08006080
 80014d8:	0800608c 	.word	0x0800608c
 80014dc:	20000740 	.word	0x20000740

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	@ 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	2238      	movs	r2, #56	@ 0x38
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fe56 	bl	80051a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001502:	2000      	movs	r0, #0
 8001504:	f001 fd84 	bl	8003010 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001512:	2340      	movs	r3, #64	@ 0x40
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151a:	2302      	movs	r3, #2
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800151e:	2304      	movs	r3, #4
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001522:	2355      	movs	r3, #85	@ 0x55
 8001524:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800152e:	2302      	movs	r3, #2
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fe1e 	bl	8003178 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001542:	f000 fa2d 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001546:	230f      	movs	r3, #15
 8001548:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154a:	2303      	movs	r3, #3
 800154c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2104      	movs	r1, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f002 f91c 	bl	800379c <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800156a:	f000 fa19 	bl	80019a0 <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3750      	adds	r7, #80	@ 0x50
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &buffer_trame_rx[marker1].header, &buffer_trame_rx[marker1].data[0]);
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4a11      	ldr	r2, [pc, #68]	@ (80015d8 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8001592:	441a      	add	r2, r3
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	460b      	mov	r3, r1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	440b      	add	r3, r1
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	3328      	adds	r3, #40	@ 0x28
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80015a6:	440b      	add	r3, r1
 80015a8:	2140      	movs	r1, #64	@ 0x40
 80015aa:	480c      	ldr	r0, [pc, #48]	@ (80015dc <HAL_FDCAN_RxFifo0Callback+0x64>)
 80015ac:	f000 ff48 	bl	8002440 <HAL_FDCAN_GetRxMessage>
		//printf("0x%X marker1 :%d \n", buffer_trame_rx[marker1].data[0], marker1);
		marker1++;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80015ba:	801a      	strh	r2, [r3, #0]

		if (marker1 == 32)
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d102      	bne.n	80015ca <HAL_FDCAN_RxFifo0Callback+0x52>
		{
			marker1 = 0;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	801a      	strh	r2, [r3, #0]
		}
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000f4 	.word	0x200000f4
 80015d8:	200000f8 	.word	0x200000f8
 80015dc:	20000090 	.word	0x20000090

080015e0 <automate_decode_IHM>:

void automate_decode_IHM(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	static uint16_t marker2 = 0;

	//printf("Id trame : 0x%X\n", buffer_trame_rx[marker2].header.Identifier);

	switch (buffer_trame_rx[marker2].header.Identifier)
 80015e4:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <automate_decode_IHM+0xbc>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4a2d      	ldr	r2, [pc, #180]	@ (80016a0 <automate_decode_IHM+0xc0>)
 80015ec:	460b      	mov	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	440b      	add	r3, r1
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f240 7291 	movw	r2, #1937	@ 0x791
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <automate_decode_IHM+0x2a>
 8001600:	f240 72a1 	movw	r2, #1953	@ 0x7a1
 8001604:	4293      	cmp	r3, r2
 8001606:	d01d      	beq.n	8001644 <automate_decode_IHM+0x64>
 8001608:	e039      	b.n	800167e <automate_decode_IHM+0x9e>
	{
	case JOG_DATA:
		 printf("JOG value : 0x%X\n", buffer_trame_rx[marker2].data[0]);
 800160a:	4b24      	ldr	r3, [pc, #144]	@ (800169c <automate_decode_IHM+0xbc>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <automate_decode_IHM+0xc0>)
 8001612:	460b      	mov	r3, r1
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	440b      	add	r3, r1
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	3328      	adds	r3, #40	@ 0x28
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	4820      	ldr	r0, [pc, #128]	@ (80016a4 <automate_decode_IHM+0xc4>)
 8001624:	f003 fc54 	bl	8004ed0 <iprintf>
		 jog_value = buffer_trame_rx[marker2].data[0];
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <automate_decode_IHM+0xbc>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4a1c      	ldr	r2, [pc, #112]	@ (80016a0 <automate_decode_IHM+0xc0>)
 8001630:	460b      	mov	r3, r1
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	440b      	add	r3, r1
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	3328      	adds	r3, #40	@ 0x28
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <automate_decode_IHM+0xc8>)
 8001640:	701a      	strb	r2, [r3, #0]
	break;
 8001642:	e01c      	b.n	800167e <automate_decode_IHM+0x9e>

	case COD_DATA:
		printf("COD value : %d\n", buffer_trame_rx[marker2].data[0]);
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <automate_decode_IHM+0xbc>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	4a15      	ldr	r2, [pc, #84]	@ (80016a0 <automate_decode_IHM+0xc0>)
 800164c:	460b      	mov	r3, r1
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	440b      	add	r3, r1
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4413      	add	r3, r2
 8001656:	3328      	adds	r3, #40	@ 0x28
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	4813      	ldr	r0, [pc, #76]	@ (80016ac <automate_decode_IHM+0xcc>)
 800165e:	f003 fc37 	bl	8004ed0 <iprintf>
		cod_value = buffer_trame_rx[marker2].data[0];
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <automate_decode_IHM+0xbc>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	4a0d      	ldr	r2, [pc, #52]	@ (80016a0 <automate_decode_IHM+0xc0>)
 800166a:	460b      	mov	r3, r1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	440b      	add	r3, r1
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	3328      	adds	r3, #40	@ 0x28
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <automate_decode_IHM+0xd0>)
 800167a:	701a      	strb	r2, [r3, #0]
	break;
 800167c:	bf00      	nop
	}

	marker2++;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <automate_decode_IHM+0xbc>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <automate_decode_IHM+0xbc>)
 8001688:	801a      	strh	r2, [r3, #0]

	if (marker2 == 32) {
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <automate_decode_IHM+0xbc>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2b20      	cmp	r3, #32
 8001690:	d102      	bne.n	8001698 <automate_decode_IHM+0xb8>
		marker2 = 0;
 8001692:	4b02      	ldr	r3, [pc, #8]	@ (800169c <automate_decode_IHM+0xbc>)
 8001694:	2200      	movs	r2, #0
 8001696:	801a      	strh	r2, [r3, #0]
	}
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000074a 	.word	0x2000074a
 80016a0:	200000f8 	.word	0x200000f8
 80016a4:	0800609c 	.word	0x0800609c
 80016a8:	2000073d 	.word	0x2000073d
 80016ac:	080060b0 	.word	0x080060b0
 80016b0:	2000073e 	.word	0x2000073e

080016b4 <JOG_read>:
/**
 * @brief Obtenir la valeur du JOG
 * @note Pas besoin d'attente bloaquante pour cette fonction avec IHM v2
 */
void JOG_read(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef pTxHeader = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2224      	movs	r2, #36	@ 0x24
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fd6d 	bl	80051a0 <memset>

	pTxHeader.Identifier = JOG_REQ;
 80016c6:	f44f 63f2 	mov.w	r3, #1936	@ 0x790
 80016ca:	607b      	str	r3, [r7, #4]
	pTxHeader.IdType = FDCAN_STANDARD_ID;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
	pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 80016d0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016d4:	60fb      	str	r3, [r7, #12]
	pTxHeader.DataLength = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]

	uint8_t pTxData;
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 80016da:	1cfa      	adds	r2, r7, #3
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <JOG_read+0x3c>)
 80016e2:	f000 fe69 	bl	80023b8 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000090 	.word	0x20000090

080016f4 <COD_read>:
/**
 * @brief Obtenir la valeur du COD
 * @note Pas besoin d'attente bloaquante pour cette fonction avec IHM v2
 */
void COD_read(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	@ 0x28
 80016f8:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef pTxHeader = {0} ;
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2224      	movs	r2, #36	@ 0x24
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fd4d 	bl	80051a0 <memset>

	pTxHeader.Identifier = COD_REQ;
 8001706:	f44f 63f4 	mov.w	r3, #1952	@ 0x7a0
 800170a:	607b      	str	r3, [r7, #4]
	pTxHeader.IdType = FDCAN_STANDARD_ID;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
	pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 8001710:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001714:	60fb      	str	r3, [r7, #12]
	pTxHeader.DataLength = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]

	uint8_t pTxData;


	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 800171a:	1cfa      	adds	r2, r7, #3
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <COD_read+0x3c>)
 8001722:	f000 fe49 	bl	80023b8 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000090 	.word	0x20000090

08001734 <BAR_set>:


void BAR_set(uint16_t motif_BAR) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
	FDCAN_TxHeaderTypeDef pTxHeader = {0};
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2224      	movs	r2, #36	@ 0x24
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fd2a 	bl	80051a0 <memset>

    pTxHeader.Identifier = BAR_SET;
 800174c:	f44f 63f6 	mov.w	r3, #1968	@ 0x7b0
 8001750:	60fb      	str	r3, [r7, #12]
    pTxHeader.IdType = FDCAN_STANDARD_ID;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
    pTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
    pTxHeader.DataLength = 2;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]

    uint8_t pTxData[2] = {(uint8_t)(motif_BAR>>8), (uint8_t)(motif_BAR)};
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b29b      	uxth	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	723b      	strb	r3, [r7, #8]
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	727b      	strb	r3, [r7, #9]
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 800176e:	f107 0208 	add.w	r2, r7, #8
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <BAR_set+0x58>)
 800177a:	f000 fe1d 	bl	80023b8 <HAL_FDCAN_AddMessageToTxFifoQ>

    HAL_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f000 fb66 	bl	8001e50 <HAL_Delay>
}
 8001784:	bf00      	nop
 8001786:	3730      	adds	r7, #48	@ 0x30
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000090 	.word	0x20000090

08001790 <LCD_gotoxy>:

void LCD_gotoxy (uint8_t x, uint8_t y)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	460a      	mov	r2, r1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
    curseur=(y*16+x)%32;
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	011a      	lsls	r2, r3, #4
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4413      	add	r3, r2
 80017a8:	425a      	negs	r2, r3
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	f002 021f 	and.w	r2, r2, #31
 80017b2:	bf58      	it	pl
 80017b4:	4253      	negpl	r3, r2
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <LCD_gotoxy+0x38>)
 80017ba:	701a      	strb	r2, [r3, #0]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	200006f8 	.word	0x200006f8

080017cc <LCD_clear>:

void LCD_clear(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	@ 0x30
 80017d0:	af00      	add	r7, sp, #0
    uint8_t i;

    curseur=0;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <LCD_clear+0x70>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]

    for(i=0; i<32; i++)
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017de:	e009      	b.n	80017f4 <LCD_clear+0x28>
        tableau_ecran[i]=32;
 80017e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e4:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <LCD_clear+0x74>)
 80017e6:	2120      	movs	r1, #32
 80017e8:	54d1      	strb	r1, [r2, r3]
    for(i=0; i<32; i++)
 80017ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017ee:	3301      	adds	r3, #1
 80017f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017f8:	2b1f      	cmp	r3, #31
 80017fa:	d9f1      	bls.n	80017e0 <LCD_clear+0x14>

    FDCAN_TxHeaderTypeDef pTxHeader = {0};
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	2224      	movs	r2, #36	@ 0x24
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fccb 	bl	80051a0 <memset>

    pTxHeader.Identifier = LCD_CLEAR;
 800180a:	f240 737f 	movw	r3, #1919	@ 0x77f
 800180e:	60bb      	str	r3, [r7, #8]
    pTxHeader.IdType = FDCAN_STANDARD_ID;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
    pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 8001814:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001818:	613b      	str	r3, [r7, #16]
    pTxHeader.DataLength = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]

    uint8_t pTxData;
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 800181e:	1dfa      	adds	r2, r7, #7
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	4619      	mov	r1, r3
 8001826:	4807      	ldr	r0, [pc, #28]	@ (8001844 <LCD_clear+0x78>)
 8001828:	f000 fdc6 	bl	80023b8 <HAL_FDCAN_AddMessageToTxFifoQ>
    HAL_Delay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f000 fb0f 	bl	8001e50 <HAL_Delay>
}
 8001832:	bf00      	nop
 8001834:	3730      	adds	r7, #48	@ 0x30
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200006f8 	.word	0x200006f8
 8001840:	200006fc 	.word	0x200006fc
 8001844:	20000090 	.word	0x20000090

08001848 <LCD_printf>:

void LCD_printf(const char* format, ...)
{
 8001848:	b40f      	push	{r0, r1, r2, r3}
 800184a:	b580      	push	{r7, lr}
 800184c:	b08e      	sub	sp, #56	@ 0x38
 800184e:	af00      	add	r7, sp, #0
	uint8_t i, j;
	va_list arg;
	va_start(arg, format);
 8001850:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001854:	633b      	str	r3, [r7, #48]	@ 0x30

	curseur = curseur + vsprintf(tableau_ecran+curseur % 64, format, arg);
 8001856:	4b4f      	ldr	r3, [pc, #316]	@ (8001994 <LCD_printf+0x14c>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800185e:	4a4e      	ldr	r2, [pc, #312]	@ (8001998 <LCD_printf+0x150>)
 8001860:	4413      	add	r3, r2
 8001862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001864:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001866:	4618      	mov	r0, r3
 8001868:	f003 fbfc 	bl	8005064 <vsiprintf>
 800186c:	4603      	mov	r3, r0
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b48      	ldr	r3, [pc, #288]	@ (8001994 <LCD_printf+0x14c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4413      	add	r3, r2
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b46      	ldr	r3, [pc, #280]	@ (8001994 <LCD_printf+0x14c>)
 800187a:	701a      	strb	r2, [r3, #0]

	if(curseur>31)
 800187c:	4b45      	ldr	r3, [pc, #276]	@ (8001994 <LCD_printf+0x14c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b1f      	cmp	r3, #31
 8001882:	d920      	bls.n	80018c6 <LCD_printf+0x7e>
	{
	   for(i = 32; i < curseur; i++)
 8001884:	2320      	movs	r3, #32
 8001886:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800188a:	e00e      	b.n	80018aa <LCD_printf+0x62>
	   {
	        tableau_ecran[i % 32] = tableau_ecran[i];
 800188c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001890:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	493f      	ldr	r1, [pc, #252]	@ (8001998 <LCD_printf+0x150>)
 800189a:	5c89      	ldrb	r1, [r1, r2]
 800189c:	4a3e      	ldr	r2, [pc, #248]	@ (8001998 <LCD_printf+0x150>)
 800189e:	54d1      	strb	r1, [r2, r3]
	   for(i = 32; i < curseur; i++)
 80018a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018a4:	3301      	adds	r3, #1
 80018a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80018aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001994 <LCD_printf+0x14c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3ea      	bcc.n	800188c <LCD_printf+0x44>
	   }
	   curseur=curseur % 32;
 80018b6:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <LCD_printf+0x14c>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b34      	ldr	r3, [pc, #208]	@ (8001994 <LCD_printf+0x14c>)
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e017      	b.n	80018f6 <LCD_printf+0xae>
	}
	else
	{
	   for(i = 0; i < 32;i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80018cc:	e00f      	b.n	80018ee <LCD_printf+0xa6>
	   {
	      if(tableau_ecran[i] == 0)
 80018ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018d2:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <LCD_printf+0x150>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d104      	bne.n	80018e4 <LCD_printf+0x9c>
	           tableau_ecran[i] = 20;
 80018da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018de:	4a2e      	ldr	r2, [pc, #184]	@ (8001998 <LCD_printf+0x150>)
 80018e0:	2114      	movs	r1, #20
 80018e2:	54d1      	strb	r1, [r2, r3]
	   for(i = 0; i < 32;i++)
 80018e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018e8:	3301      	adds	r3, #1
 80018ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80018ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018f2:	2b1f      	cmp	r3, #31
 80018f4:	d9eb      	bls.n	80018ce <LCD_printf+0x86>
	   }
	 }
	 va_end(arg);
	 tableau_ecran[32] = '\0';
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <LCD_printf+0x150>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]


	 for(j = 0; j < 4; j++) {
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001904:	e03a      	b.n	800197c <LCD_printf+0x134>
	     FDCAN_TxHeaderTypeDef pTxHeader = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2224      	movs	r2, #36	@ 0x24
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fc47 	bl	80051a0 <memset>
	     uint8_t pTxData[8];


	     pTxHeader.Identifier = LCD_CHAR0 + j;
 8001912:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001916:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800191a:	607b      	str	r3, [r7, #4]
	     pTxHeader.IdType = FDCAN_STANDARD_ID;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
	     pTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
	     pTxHeader.DataLength = 8;
 8001924:	2308      	movs	r3, #8
 8001926:	613b      	str	r3, [r7, #16]

	     for(i = 0; i < 8; i++)
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800192e:	e012      	b.n	8001956 <LCD_printf+0x10e>
	    	 pTxData[i] = tableau_ecran[i + j * 8];
 8001930:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001934:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	441a      	add	r2, r3
 800193c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001940:	4915      	ldr	r1, [pc, #84]	@ (8001998 <LCD_printf+0x150>)
 8001942:	5c8a      	ldrb	r2, [r1, r2]
 8001944:	3338      	adds	r3, #56	@ 0x38
 8001946:	443b      	add	r3, r7
 8001948:	f803 2c10 	strb.w	r2, [r3, #-16]
	     for(i = 0; i < 8; i++)
 800194c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001950:	3301      	adds	r3, #1
 8001952:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001956:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800195a:	2b07      	cmp	r3, #7
 800195c:	d9e8      	bls.n	8001930 <LCD_printf+0xe8>

	     HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 800195e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	480d      	ldr	r0, [pc, #52]	@ (800199c <LCD_printf+0x154>)
 8001968:	f000 fd26 	bl	80023b8 <HAL_FDCAN_AddMessageToTxFifoQ>
	     HAL_Delay(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f000 fa6f 	bl	8001e50 <HAL_Delay>
	 for(j = 0; j < 4; j++) {
 8001972:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001976:	3301      	adds	r3, #1
 8001978:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800197c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001980:	2b03      	cmp	r3, #3
 8001982:	d9c0      	bls.n	8001906 <LCD_printf+0xbe>
	 }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3738      	adds	r7, #56	@ 0x38
 800198a:	46bd      	mov	sp, r7
 800198c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001990:	b004      	add	sp, #16
 8001992:	4770      	bx	lr
 8001994:	200006f8 	.word	0x200006f8
 8001998:	200006fc 	.word	0x200006fc
 800199c:	20000090 	.word	0x20000090

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <Error_Handler+0x8>

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b6:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ce:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019e2:	f001 fbb9 	bl	8003158 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <NMI_Handler+0x4>

080019fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4a:	f000 f9e3 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <FDCAN1_IT0_IRQHandler+0x10>)
 8001a5a:	f000 fedf 	bl	800281c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000090 	.word	0x20000090

08001a68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e00a      	b.n	8001a90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a7a:	f3af 8000 	nop.w
 8001a7e:	4601      	mov	r1, r0
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	60ba      	str	r2, [r7, #8]
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf0      	blt.n	8001a7a <_read+0x12>
  }

  return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e009      	b.n	8001ac8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	60ba      	str	r2, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fbbf 	bl	8001240 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf1      	blt.n	8001ab4 <_write+0x12>
  }
  return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_close>:

int _close(int file)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b02:	605a      	str	r2, [r3, #4]
  return 0;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_isatty>:

int _isatty(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f003 fb62 	bl	800523c <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20008000 	.word	0x20008000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	2000074c 	.word	0x2000074c
 8001bac:	20000938 	.word	0x20000938

08001bb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <SystemInit+0x20>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bba:	4a05      	ldr	r2, [pc, #20]	@ (8001bd0 <SystemInit+0x20>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd8:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001bda:	4a23      	ldr	r2, [pc, #140]	@ (8001c68 <MX_USART2_UART_Init+0x94>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bde:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c10:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1c:	4811      	ldr	r0, [pc, #68]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c1e:	f002 f9c9 	bl	8003fb4 <HAL_UART_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c28:	f7ff feba 	bl	80019a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c30:	f002 ffc2 	bl	8004bb8 <HAL_UARTEx_SetTxFifoThreshold>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c3a:	f7ff feb1 	bl	80019a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4808      	ldr	r0, [pc, #32]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c42:	f002 fff7 	bl	8004c34 <HAL_UARTEx_SetRxFifoThreshold>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c4c:	f7ff fea8 	bl	80019a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <MX_USART2_UART_Init+0x90>)
 8001c52:	f002 ff78 	bl	8004b46 <HAL_UARTEx_DisableFifoMode>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f7ff fea0 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000750 	.word	0x20000750
 8001c68:	40004400 	.word	0x40004400

08001c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b09a      	sub	sp, #104	@ 0x68
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	2244      	movs	r2, #68	@ 0x44
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fa87 	bl	80051a0 <memset>
  if(uartHandle->Instance==USART2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <HAL_UART_MspInit+0xa8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d136      	bne.n	8001d0a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 ff93 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cb4:	f7ff fe74 	bl	80019a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <HAL_UART_MspInit+0xac>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_UART_MspInit+0xac>)
 8001cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc4:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <HAL_UART_MspInit+0xac>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_UART_MspInit+0xac>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd4:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <HAL_UART_MspInit+0xac>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <HAL_UART_MspInit+0xac>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001ce8:	230c      	movs	r3, #12
 8001cea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d06:	f000 ffe9 	bl	8002cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3768      	adds	r7, #104	@ 0x68
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40004400 	.word	0x40004400
 8001d18:	40021000 	.word	0x40021000

08001d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d1c:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d20:	f7ff ff46 	bl	8001bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d24:	480c      	ldr	r0, [pc, #48]	@ (8001d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d26:	490d      	ldr	r1, [pc, #52]	@ (8001d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d28:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <LoopForever+0xe>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d68 <LoopForever+0x16>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f003 fa7d 	bl	8005248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d4e:	f7ff fa89 	bl	8001264 <main>

08001d52 <LoopForever>:

LoopForever:
    b LoopForever
 8001d52:	e7fe      	b.n	8001d52 <LoopForever>
  ldr   r0, =_estack
 8001d54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d60:	08006154 	.word	0x08006154
  ldr r2, =_sbss
 8001d64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d68:	20000934 	.word	0x20000934

08001d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC1_2_IRQHandler>

08001d6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f95b 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f000 f80e 	bl	8001da0 <HAL_InitTick>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	e001      	b.n	8001d94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d90:	f7ff fe0c 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d94:	79fb      	ldrb	r3, [r7, #7]

}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <HAL_InitTick+0x68>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d022      	beq.n	8001dfa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001db4:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_InitTick+0x6c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_InitTick+0x68>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f966 	bl	800209a <HAL_SYSTICK_Config>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d809      	bhi.n	8001dee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	f000 f932 	bl	800204a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <HAL_InitTick+0x70>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e004      	b.n	8001dfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	2000000c 	.word	0x2000000c

08001e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <HAL_IncTick+0x1c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_IncTick+0x20>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a03      	ldr	r2, [pc, #12]	@ (8001e30 <HAL_IncTick+0x1c>)
 8001e24:	6013      	str	r3, [r2, #0]
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	200007e4 	.word	0x200007e4
 8001e34:	20000010 	.word	0x20000010

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200007e4 	.word	0x200007e4

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d004      	beq.n	8001e74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_Delay+0x40>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e74:	bf00      	nop
 8001e76:	f7ff ffdf 	bl	8001e38 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d8f7      	bhi.n	8001e76 <HAL_Delay+0x26>
  {
  }
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000010 	.word	0x20000010

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	@ (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	@ (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	@ (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff8e 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff29 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff40 	bl	8001edc <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff90 	bl	8001f88 <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff5f 	bl	8001f34 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff33 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa4 	bl	8001ff0 <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e147      	b.n	8002356 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff f80e 	bl	80010fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0210 	bic.w	r2, r2, #16
 80020ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f0:	f7ff fea2 	bl	8001e38 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020f6:	e012      	b.n	800211e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80020f8:	f7ff fe9e 	bl	8001e38 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b0a      	cmp	r3, #10
 8002104:	d90b      	bls.n	800211e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2203      	movs	r2, #3
 8002116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e11b      	b.n	8002356 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b08      	cmp	r3, #8
 800212a:	d0e5      	beq.n	80020f8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800213c:	f7ff fe7c 	bl	8001e38 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002142:	e012      	b.n	800216a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002144:	f7ff fe78 	bl	8001e38 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b0a      	cmp	r3, #10
 8002150:	d90b      	bls.n	800216a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2203      	movs	r2, #3
 8002162:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0f5      	b.n	8002356 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0e5      	beq.n	8002144 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0202 	orr.w	r2, r2, #2
 8002186:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a74      	ldr	r2, [pc, #464]	@ (8002360 <HAL_FDCAN_Init+0x2ac>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d103      	bne.n	800219a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002192:	4a74      	ldr	r2, [pc, #464]	@ (8002364 <HAL_FDCAN_Init+0x2b0>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7c1b      	ldrb	r3, [r3, #16]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021b0:	619a      	str	r2, [r3, #24]
 80021b2:	e007      	b.n	80021c4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7c5b      	ldrb	r3, [r3, #17]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d108      	bne.n	80021de <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021da:	619a      	str	r2, [r3, #24]
 80021dc:	e007      	b.n	80021ee <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7c9b      	ldrb	r3, [r3, #18]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d108      	bne.n	8002208 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002204:	619a      	str	r2, [r3, #24]
 8002206:	e007      	b.n	8002218 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002216:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800223c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0210 	bic.w	r2, r2, #16
 800224c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0204 	orr.w	r2, r2, #4
 8002264:	619a      	str	r2, [r3, #24]
 8002266:	e02c      	b.n	80022c2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d028      	beq.n	80022c2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d01c      	beq.n	80022b2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002286:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0210 	orr.w	r2, r2, #16
 8002296:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d110      	bne.n	80022c2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	619a      	str	r2, [r3, #24]
 80022b0:	e007      	b.n	80022c2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022d2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022da:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022ea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022ec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022f6:	d115      	bne.n	8002324 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	3b01      	subs	r3, #1
 8002304:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002306:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	3b01      	subs	r3, #1
 800230e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002310:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	3b01      	subs	r3, #1
 800231a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002320:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002322:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fbfc 	bl	8002b38 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40006400 	.word	0x40006400
 8002364:	40006500 	.word	0x40006500

08002368 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d110      	bne.n	800239e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e006      	b.n	80023ac <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a2:	f043 0204 	orr.w	r2, r3, #4
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d12c      	bne.n	800242a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e023      	b.n	8002438 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fbec 	bl	8002be4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	fa01 f202 	lsl.w	r2, r1, r2
 8002418:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800241c:	2201      	movs	r2, #1
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	409a      	lsls	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e006      	b.n	8002438 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242e:	f043 0208 	orr.w	r2, r3, #8
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
  }
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002440:	b480      	push	{r7}
 8002442:	b08b      	sub	sp, #44	@ 0x2c
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002458:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800245a:	7efb      	ldrb	r3, [r7, #27]
 800245c:	2b02      	cmp	r3, #2
 800245e:	f040 80e8 	bne.w	8002632 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d137      	bne.n	80024d8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	2b00      	cmp	r3, #0
 8002476:	d107      	bne.n	8002488 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0db      	b.n	8002640 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002490:	0e1b      	lsrs	r3, r3, #24
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d10a      	bne.n	80024b0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024a2:	0a5b      	lsrs	r3, r3, #9
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80024ac:	2301      	movs	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d6:	e036      	b.n	8002546 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0a3      	b.n	8002640 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002500:	0e1b      	lsrs	r3, r3, #24
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10a      	bne.n	8002520 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800251c:	2301      	movs	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d107      	bne.n	800256a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0c9b      	lsrs	r3, r3, #18
 8002560:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e005      	b.n	8002576 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	3304      	adds	r3, #4
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e1b      	lsrs	r3, r3, #24
 80025ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0fda      	lsrs	r2, r3, #31
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	3304      	adds	r3, #4
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	e00a      	b.n	8002602 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	441a      	add	r2, r3
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	440b      	add	r3, r1
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	3301      	adds	r3, #1
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	4a11      	ldr	r2, [pc, #68]	@ (800264c <HAL_FDCAN_GetRxMessage+0x20c>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	461a      	mov	r2, r3
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	4293      	cmp	r3, r2
 8002610:	d3ec      	bcc.n	80025ec <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b40      	cmp	r3, #64	@ 0x40
 8002616:	d105      	bne.n	8002624 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002622:	e004      	b.n	800262e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e006      	b.n	8002640 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002636:	f043 0208 	orr.w	r2, r3, #8
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	372c      	adds	r7, #44	@ 0x2c
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	080060d8 	.word	0x080060d8

08002650 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002662:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d003      	beq.n	8002672 <HAL_FDCAN_ActivateNotification+0x22>
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	2b02      	cmp	r3, #2
 800266e:	f040 80c8 	bne.w	8002802 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d03b      	beq.n	8002706 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d031      	beq.n	8002706 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d027      	beq.n	8002706 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01d      	beq.n	8002706 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d013      	beq.n	8002706 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d107      	bne.n	8002716 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d13b      	bne.n	80027a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d131      	bne.n	80027a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d127      	bne.n	80027a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11d      	bne.n	80027a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0202 	orr.w	r2, r2, #2
 80027b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e006      	b.n	8002810 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002806:	f043 0202 	orr.w	r2, r3, #2
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	@ 0x30
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002838:	4013      	ands	r3, r2
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002850:	4013      	ands	r3, r2
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002868:	4013      	ands	r3, r2
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002872:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002876:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287e:	6a3a      	ldr	r2, [r7, #32]
 8002880:	4013      	ands	r3, r2
 8002882:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800288e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	4013      	ands	r3, r2
 800289a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028aa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2240      	movs	r2, #64	@ 0x40
 80028c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f916 	bl	8002afa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d019      	beq.n	800290c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d014      	beq.n	800290c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028ea:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002902:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002904:	6939      	ldr	r1, [r7, #16]
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8d8 	bl	8002abc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800290c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002918:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800291a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f8a2 	bl	8002a66 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800292e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002930:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fe20 	bl	8001578 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002944:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002946:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f897 	bl	8002a7c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00c      	beq.n	8002972 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800296a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f890 	bl	8002a92 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d018      	beq.n	80029ae <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d013      	beq.n	80029ae <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800298e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4013      	ands	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f87c 	bl	8002aa6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00c      	beq.n	80029d2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f880 	bl	8002ad2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00c      	beq.n	80029f6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f878 	bl	8002ae6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00f      	beq.n	8002a20 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002a2e:	69f9      	ldr	r1, [r7, #28]
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f876 	bl	8002b22 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f858 	bl	8002b0e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3730      	adds	r7, #48	@ 0x30
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b40:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002b42:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b52:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5a:	041a      	lsls	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b78:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b80:	061a      	lsls	r2, r3, #24
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e005      	b.n	8002bc6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d3f3      	bcc.n	8002bba <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	4000a400 	.word	0x4000a400

08002be4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	@ 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002c02:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e00a      	b.n	8002c26 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002c18:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002c1e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c24:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c30:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002c36:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002c3c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	3304      	adds	r3, #4
 8002c64:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e020      	b.n	8002cba <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3303      	adds	r3, #3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3302      	adds	r3, #2
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	440b      	add	r3, r1
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002c90:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	440b      	add	r3, r1
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002c9e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002ca8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4a06      	ldr	r2, [pc, #24]	@ (8002cd8 <FDCAN_CopyMessageToRAM+0xf4>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d3d6      	bcc.n	8002c78 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	3724      	adds	r7, #36	@ 0x24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	080060d8 	.word	0x080060d8

08002cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cea:	e15a      	b.n	8002fa2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 814c 	beq.w	8002f9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d005      	beq.n	8002d1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d130      	bne.n	8002d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d52:	2201      	movs	r2, #1
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 0201 	and.w	r2, r3, #1
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d017      	beq.n	8002dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d123      	bne.n	8002e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	6939      	ldr	r1, [r7, #16]
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2203      	movs	r2, #3
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0203 	and.w	r2, r3, #3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80a6 	beq.w	8002f9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e50:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc0 <HAL_GPIO_Init+0x2e4>)
 8002e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e54:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc0 <HAL_GPIO_Init+0x2e4>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e5c:	4b58      	ldr	r3, [pc, #352]	@ (8002fc0 <HAL_GPIO_Init+0x2e4>)
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e68:	4a56      	ldr	r2, [pc, #344]	@ (8002fc4 <HAL_GPIO_Init+0x2e8>)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	220f      	movs	r2, #15
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e92:	d01f      	beq.n	8002ed4 <HAL_GPIO_Init+0x1f8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a4c      	ldr	r2, [pc, #304]	@ (8002fc8 <HAL_GPIO_Init+0x2ec>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d019      	beq.n	8002ed0 <HAL_GPIO_Init+0x1f4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a4b      	ldr	r2, [pc, #300]	@ (8002fcc <HAL_GPIO_Init+0x2f0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_GPIO_Init+0x1f0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd0 <HAL_GPIO_Init+0x2f4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_GPIO_Init+0x1ec>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a49      	ldr	r2, [pc, #292]	@ (8002fd4 <HAL_GPIO_Init+0x2f8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <HAL_GPIO_Init+0x1e8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a48      	ldr	r2, [pc, #288]	@ (8002fd8 <HAL_GPIO_Init+0x2fc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_GPIO_Init+0x1e4>
 8002ebc:	2305      	movs	r3, #5
 8002ebe:	e00a      	b.n	8002ed6 <HAL_GPIO_Init+0x1fa>
 8002ec0:	2306      	movs	r3, #6
 8002ec2:	e008      	b.n	8002ed6 <HAL_GPIO_Init+0x1fa>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	e006      	b.n	8002ed6 <HAL_GPIO_Init+0x1fa>
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e004      	b.n	8002ed6 <HAL_GPIO_Init+0x1fa>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e002      	b.n	8002ed6 <HAL_GPIO_Init+0x1fa>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <HAL_GPIO_Init+0x1fa>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	f002 0203 	and.w	r2, r2, #3
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	4093      	lsls	r3, r2
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee6:	4937      	ldr	r1, [pc, #220]	@ (8002fc4 <HAL_GPIO_Init+0x2e8>)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ef4:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <HAL_GPIO_Init+0x300>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f18:	4a30      	ldr	r2, [pc, #192]	@ (8002fdc <HAL_GPIO_Init+0x300>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <HAL_GPIO_Init+0x300>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f42:	4a26      	ldr	r2, [pc, #152]	@ (8002fdc <HAL_GPIO_Init+0x300>)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f48:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <HAL_GPIO_Init+0x300>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fdc <HAL_GPIO_Init+0x300>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f72:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <HAL_GPIO_Init+0x300>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f96:	4a11      	ldr	r2, [pc, #68]	@ (8002fdc <HAL_GPIO_Init+0x300>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f47f ae9d 	bne.w	8002cec <HAL_GPIO_Init+0x10>
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	48000400 	.word	0x48000400
 8002fcc:	48000800 	.word	0x48000800
 8002fd0:	48000c00 	.word	0x48000c00
 8002fd4:	48001000 	.word	0x48001000
 8002fd8:	48001400 	.word	0x48001400
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ffc:	e002      	b.n	8003004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d141      	bne.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800301e:	4b4b      	ldr	r3, [pc, #300]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302a:	d131      	bne.n	8003090 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800302c:	4b47      	ldr	r3, [pc, #284]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003032:	4a46      	ldr	r2, [pc, #280]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800303c:	4b43      	ldr	r3, [pc, #268]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003044:	4a41      	ldr	r2, [pc, #260]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800304a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800304c:	4b40      	ldr	r3, [pc, #256]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2232      	movs	r2, #50	@ 0x32
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a3f      	ldr	r2, [pc, #252]	@ (8003154 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	0c9b      	lsrs	r3, r3, #18
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003062:	e002      	b.n	800306a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3b01      	subs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306a:	4b38      	ldr	r3, [pc, #224]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003076:	d102      	bne.n	800307e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f2      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800307e:	4b33      	ldr	r3, [pc, #204]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308a:	d158      	bne.n	800313e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e057      	b.n	8003140 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003090:	4b2e      	ldr	r3, [pc, #184]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003096:	4a2d      	ldr	r2, [pc, #180]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800309c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030a0:	e04d      	b.n	800313e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a8:	d141      	bne.n	800312e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030aa:	4b28      	ldr	r3, [pc, #160]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b6:	d131      	bne.n	800311c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030b8:	4b24      	ldr	r3, [pc, #144]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030be:	4a23      	ldr	r2, [pc, #140]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c8:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030d0:	4a1e      	ldr	r2, [pc, #120]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2232      	movs	r2, #50	@ 0x32
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003154 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	0c9b      	lsrs	r3, r3, #18
 80030ea:	3301      	adds	r3, #1
 80030ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ee:	e002      	b.n	80030f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f6:	4b15      	ldr	r3, [pc, #84]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003102:	d102      	bne.n	800310a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f2      	bne.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800310a:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003116:	d112      	bne.n	800313e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e011      	b.n	8003140 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800312c:	e007      	b.n	800313e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800312e:	4b07      	ldr	r3, [pc, #28]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003136:	4a05      	ldr	r2, [pc, #20]	@ (800314c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800313c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40007000 	.word	0x40007000
 8003150:	20000008 	.word	0x20000008
 8003154:	431bde83 	.word	0x431bde83

08003158 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800315c:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a04      	ldr	r2, [pc, #16]	@ (8003174 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003166:	6093      	str	r3, [r2, #8]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40007000 	.word	0x40007000

08003178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e2fe      	b.n	8003788 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d075      	beq.n	8003282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003196:	4b97      	ldr	r3, [pc, #604]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a0:	4b94      	ldr	r3, [pc, #592]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d102      	bne.n	80031b6 <HAL_RCC_OscConfig+0x3e>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_OscConfig+0x44>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d10b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	4b8d      	ldr	r3, [pc, #564]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05b      	beq.n	8003280 <HAL_RCC_OscConfig+0x108>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d157      	bne.n	8003280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e2d9      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d106      	bne.n	80031ec <HAL_RCC_OscConfig+0x74>
 80031de:	4b85      	ldr	r3, [pc, #532]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a84      	ldr	r2, [pc, #528]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e01d      	b.n	8003228 <HAL_RCC_OscConfig+0xb0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x98>
 80031f6:	4b7f      	ldr	r3, [pc, #508]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7e      	ldr	r2, [pc, #504]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b7c      	ldr	r3, [pc, #496]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7b      	ldr	r2, [pc, #492]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0xb0>
 8003210:	4b78      	ldr	r3, [pc, #480]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a77      	ldr	r2, [pc, #476]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b75      	ldr	r3, [pc, #468]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a74      	ldr	r2, [pc, #464]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fe02 	bl	8001e38 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fdfe 	bl	8001e38 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e29e      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324a:	4b6a      	ldr	r3, [pc, #424]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0xc0>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe fdee 	bl	8001e38 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe fdea 	bl	8001e38 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e28a      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003272:	4b60      	ldr	r3, [pc, #384]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0xe8>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d075      	beq.n	800337a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328e:	4b59      	ldr	r3, [pc, #356]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003298:	4b56      	ldr	r3, [pc, #344]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_OscConfig+0x136>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_OscConfig+0x13c>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d11f      	bne.n	80032f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b4:	4b4f      	ldr	r3, [pc, #316]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_OscConfig+0x154>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e25d      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b49      	ldr	r3, [pc, #292]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	4946      	ldr	r1, [pc, #280]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032e0:	4b45      	ldr	r3, [pc, #276]	@ (80033f8 <HAL_RCC_OscConfig+0x280>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fd5b 	bl	8001da0 <HAL_InitTick>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d043      	beq.n	8003378 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e249      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b3d      	ldr	r3, [pc, #244]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3c      	ldr	r2, [pc, #240]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fd96 	bl	8001e38 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe fd92 	bl	8001e38 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e232      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003322:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332e:	4b31      	ldr	r3, [pc, #196]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	492d      	ldr	r1, [pc, #180]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
 8003342:	e01a      	b.n	800337a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003344:	4b2b      	ldr	r3, [pc, #172]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2a      	ldr	r2, [pc, #168]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 800334a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800334e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fd72 	bl	8001e38 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003358:	f7fe fd6e 	bl	8001e38 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e20e      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800336a:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x1e0>
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003378:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d041      	beq.n	800340a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338e:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003394:	4a17      	ldr	r2, [pc, #92]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe fd4b 	bl	8001e38 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fe fd47 	bl	8001e38 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1e7      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033b8:	4b0e      	ldr	r3, [pc, #56]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ef      	beq.n	80033a6 <HAL_RCC_OscConfig+0x22e>
 80033c6:	e020      	b.n	800340a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ce:	4a09      	ldr	r2, [pc, #36]	@ (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe fd2e 	bl	8001e38 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033de:	e00d      	b.n	80033fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe fd2a 	bl	8001e38 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d906      	bls.n	80033fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1ca      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ea      	bne.n	80033e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80a6 	beq.w	8003564 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800341c:	4b84      	ldr	r3, [pc, #528]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x2b4>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x2b6>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b7f      	ldr	r3, [pc, #508]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	4a7e      	ldr	r2, [pc, #504]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343c:	6593      	str	r3, [r2, #88]	@ 0x58
 800343e:	4b7c      	ldr	r3, [pc, #496]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	4b79      	ldr	r3, [pc, #484]	@ (8003634 <HAL_RCC_OscConfig+0x4bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d118      	bne.n	800348c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800345a:	4b76      	ldr	r3, [pc, #472]	@ (8003634 <HAL_RCC_OscConfig+0x4bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	@ (8003634 <HAL_RCC_OscConfig+0x4bc>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003466:	f7fe fce7 	bl	8001e38 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fe fce3 	bl	8001e38 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e183      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003480:	4b6c      	ldr	r3, [pc, #432]	@ (8003634 <HAL_RCC_OscConfig+0x4bc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d108      	bne.n	80034a6 <HAL_RCC_OscConfig+0x32e>
 8003494:	4b66      	ldr	r3, [pc, #408]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349a:	4a65      	ldr	r2, [pc, #404]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034a4:	e024      	b.n	80034f0 <HAL_RCC_OscConfig+0x378>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d110      	bne.n	80034d0 <HAL_RCC_OscConfig+0x358>
 80034ae:	4b60      	ldr	r3, [pc, #384]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034be:	4b5c      	ldr	r3, [pc, #368]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034ce:	e00f      	b.n	80034f0 <HAL_RCC_OscConfig+0x378>
 80034d0:	4b57      	ldr	r3, [pc, #348]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d6:	4a56      	ldr	r2, [pc, #344]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034e0:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d016      	beq.n	8003526 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe fc9e 	bl	8001e38 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe fc9a 	bl	8001e38 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e138      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003516:	4b46      	ldr	r3, [pc, #280]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ed      	beq.n	8003500 <HAL_RCC_OscConfig+0x388>
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe fc87 	bl	8001e38 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe fc83 	bl	8001e38 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e121      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003544:	4b3a      	ldr	r3, [pc, #232]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ed      	bne.n	800352e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003552:	7ffb      	ldrb	r3, [r7, #31]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003558:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	4a34      	ldr	r2, [pc, #208]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003562:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03c      	beq.n	80035ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003578:	4b2d      	ldr	r3, [pc, #180]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 800357a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800357e:	4a2c      	ldr	r2, [pc, #176]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe fc56 	bl	8001e38 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003590:	f7fe fc52 	bl	8001e38 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0f2      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035a2:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80035a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ef      	beq.n	8003590 <HAL_RCC_OscConfig+0x418>
 80035b0:	e01b      	b.n	80035ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80035b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7fe fc39 	bl	8001e38 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ca:	f7fe fc35 	bl	8001e38 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e0d5      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035dc:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ef      	bne.n	80035ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80c9 	beq.w	8003786 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	f000 8083 	beq.w	8003708 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d15e      	bne.n	80036c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a08      	ldr	r2, [pc, #32]	@ (8003630 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fe fc0f 	bl	8001e38 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361c:	e00c      	b.n	8003638 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361e:	f7fe fc0b 	bl	8001e38 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d905      	bls.n	8003638 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0ab      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003638:	4b55      	ldr	r3, [pc, #340]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ec      	bne.n	800361e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003644:	4b52      	ldr	r3, [pc, #328]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	4b52      	ldr	r3, [pc, #328]	@ (8003794 <HAL_RCC_OscConfig+0x61c>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6a11      	ldr	r1, [r2, #32]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003654:	3a01      	subs	r2, #1
 8003656:	0112      	lsls	r2, r2, #4
 8003658:	4311      	orrs	r1, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800365e:	0212      	lsls	r2, r2, #8
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003666:	0852      	lsrs	r2, r2, #1
 8003668:	3a01      	subs	r2, #1
 800366a:	0552      	lsls	r2, r2, #21
 800366c:	4311      	orrs	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003672:	0852      	lsrs	r2, r2, #1
 8003674:	3a01      	subs	r2, #1
 8003676:	0652      	lsls	r2, r2, #25
 8003678:	4311      	orrs	r1, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800367e:	06d2      	lsls	r2, r2, #27
 8003680:	430a      	orrs	r2, r1
 8003682:	4943      	ldr	r1, [pc, #268]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 8003684:	4313      	orrs	r3, r2
 8003686:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003688:	4b41      	ldr	r3, [pc, #260]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a40      	ldr	r2, [pc, #256]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003692:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003694:	4b3e      	ldr	r3, [pc, #248]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a3d      	ldr	r2, [pc, #244]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 800369a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800369e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fbca 	bl	8001e38 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe fbc6 	bl	8001e38 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e066      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	4b35      	ldr	r3, [pc, #212]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x530>
 80036c6:	e05e      	b.n	8003786 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c8:	4b31      	ldr	r3, [pc, #196]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a30      	ldr	r2, [pc, #192]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 80036ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe fbb0 	bl	8001e38 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe fbac 	bl	8001e38 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e04c      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ee:	4b28      	ldr	r3, [pc, #160]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036fa:	4b25      	ldr	r3, [pc, #148]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	4924      	ldr	r1, [pc, #144]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 8003700:	4b25      	ldr	r3, [pc, #148]	@ (8003798 <HAL_RCC_OscConfig+0x620>)
 8003702:	4013      	ands	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
 8003706:	e03e      	b.n	8003786 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e039      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003714:	4b1e      	ldr	r3, [pc, #120]	@ (8003790 <HAL_RCC_OscConfig+0x618>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	429a      	cmp	r2, r3
 8003726:	d12c      	bne.n	8003782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	3b01      	subs	r3, #1
 8003734:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d123      	bne.n	8003782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d11b      	bne.n	8003782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d113      	bne.n	8003782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d109      	bne.n	8003782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	3b01      	subs	r3, #1
 800377c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	019f800c 	.word	0x019f800c
 8003798:	feeefffc 	.word	0xfeeefffc

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e11e      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b91      	ldr	r3, [pc, #580]	@ (80039fc <HAL_RCC_ClockConfig+0x260>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d910      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b8e      	ldr	r3, [pc, #568]	@ (80039fc <HAL_RCC_ClockConfig+0x260>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 020f 	bic.w	r2, r3, #15
 80037ca:	498c      	ldr	r1, [pc, #560]	@ (80039fc <HAL_RCC_ClockConfig+0x260>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b8a      	ldr	r3, [pc, #552]	@ (80039fc <HAL_RCC_ClockConfig+0x260>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e106      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d073      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d129      	bne.n	800384c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f8:	4b81      	ldr	r3, [pc, #516]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0f4      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003808:	f000 f99e 	bl	8003b48 <RCC_GetSysClockFreqFromPLLSource>
 800380c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4a7c      	ldr	r2, [pc, #496]	@ (8003a04 <HAL_RCC_ClockConfig+0x268>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d93f      	bls.n	8003896 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003816:	4b7a      	ldr	r3, [pc, #488]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800382a:	2b00      	cmp	r3, #0
 800382c:	d033      	beq.n	8003896 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12f      	bne.n	8003896 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003836:	4b72      	ldr	r3, [pc, #456]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800383e:	4a70      	ldr	r2, [pc, #448]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003844:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e024      	b.n	8003896 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d107      	bne.n	8003864 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003854:	4b6a      	ldr	r3, [pc, #424]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0c6      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003864:	4b66      	ldr	r3, [pc, #408]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0be      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003874:	f000 f8ce 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 8003878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4a61      	ldr	r2, [pc, #388]	@ (8003a04 <HAL_RCC_ClockConfig+0x268>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d909      	bls.n	8003896 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003882:	4b5f      	ldr	r3, [pc, #380]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800388a:	4a5d      	ldr	r2, [pc, #372]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 800388c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003890:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003896:	4b5a      	ldr	r3, [pc, #360]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f023 0203 	bic.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4957      	ldr	r1, [pc, #348]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fe fac6 	bl	8001e38 <HAL_GetTick>
 80038ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b0:	f7fe fac2 	bl	8001e38 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e095      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 020c 	and.w	r2, r3, #12
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d1eb      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d023      	beq.n	800392c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f0:	4b43      	ldr	r3, [pc, #268]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a42      	ldr	r2, [pc, #264]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003908:	4b3d      	ldr	r3, [pc, #244]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003910:	4a3b      	ldr	r2, [pc, #236]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003912:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003916:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003918:	4b39      	ldr	r3, [pc, #228]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4936      	ldr	r1, [pc, #216]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
 800392a:	e008      	b.n	800393e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d105      	bne.n	800393e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003932:	4b33      	ldr	r3, [pc, #204]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4a32      	ldr	r2, [pc, #200]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003938:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800393c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800393e:	4b2f      	ldr	r3, [pc, #188]	@ (80039fc <HAL_RCC_ClockConfig+0x260>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d21d      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_RCC_ClockConfig+0x260>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 020f 	bic.w	r2, r3, #15
 8003954:	4929      	ldr	r1, [pc, #164]	@ (80039fc <HAL_RCC_ClockConfig+0x260>)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800395c:	f7fe fa6c 	bl	8001e38 <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe fa68 	bl	8001e38 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e03b      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <HAL_RCC_ClockConfig+0x260>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d1ed      	bne.n	8003964 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4917      	ldr	r1, [pc, #92]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490f      	ldr	r1, [pc, #60]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039c6:	f000 f825 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490c      	ldr	r1, [pc, #48]	@ (8003a08 <HAL_RCC_ClockConfig+0x26c>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <HAL_RCC_ClockConfig+0x270>)
 80039e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <HAL_RCC_ClockConfig+0x274>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f9d8 	bl	8001da0 <HAL_InitTick>
 80039f0:	4603      	mov	r3, r0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40021000 	.word	0x40021000
 8003a04:	04c4b400 	.word	0x04c4b400
 8003a08:	080060c0 	.word	0x080060c0
 8003a0c:	20000008 	.word	0x20000008
 8003a10:	2000000c 	.word	0x2000000c

08003a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d102      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a26:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e047      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a38:	4b26      	ldr	r3, [pc, #152]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e03e      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a3e:	4b23      	ldr	r3, [pc, #140]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d136      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	4a16      	ldr	r2, [pc, #88]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a72:	68d2      	ldr	r2, [r2, #12]
 8003a74:	0a12      	lsrs	r2, r2, #8
 8003a76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	617b      	str	r3, [r7, #20]
      break;
 8003a80:	e00c      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a82:	4a13      	ldr	r2, [pc, #76]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	4a10      	ldr	r2, [pc, #64]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8c:	68d2      	ldr	r2, [r2, #12]
 8003a8e:	0a12      	lsrs	r2, r2, #8
 8003a90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0e5b      	lsrs	r3, r3, #25
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e001      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003abc:	693b      	ldr	r3, [r7, #16]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	00f42400 	.word	0x00f42400
 8003ad4:	007a1200 	.word	0x007a1200

08003ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003adc:	4b03      	ldr	r3, [pc, #12]	@ (8003aec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000008 	.word	0x20000008

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003af4:	f7ff fff0 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4904      	ldr	r1, [pc, #16]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	080060d0 	.word	0x080060d0

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b20:	f7ff ffda 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0adb      	lsrs	r3, r3, #11
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	080060d0 	.word	0x080060d0

08003b48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b58:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d10c      	bne.n	8003b86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b6c:	4a17      	ldr	r2, [pc, #92]	@ (8003bcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b76:	68d2      	ldr	r2, [r2, #12]
 8003b78:	0a12      	lsrs	r2, r2, #8
 8003b7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
    break;
 8003b84:	e00c      	b.n	8003ba0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b86:	4a12      	ldr	r2, [pc, #72]	@ (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	0a12      	lsrs	r2, r2, #8
 8003b94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
    break;
 8003b9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba0:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0e5b      	lsrs	r3, r3, #25
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003bba:	687b      	ldr	r3, [r7, #4]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	007a1200 	.word	0x007a1200
 8003bd0:	00f42400 	.word	0x00f42400

08003bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bdc:	2300      	movs	r3, #0
 8003bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003be0:	2300      	movs	r3, #0
 8003be2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8098 	beq.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf6:	4b43      	ldr	r3, [pc, #268]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	4b40      	ldr	r3, [pc, #256]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	4a3f      	ldr	r2, [pc, #252]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a39      	ldr	r2, [pc, #228]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c2a:	f7fe f905 	bl	8001e38 <HAL_GetTick>
 8003c2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c30:	e009      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fe f901 	bl	8001e38 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d902      	bls.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	74fb      	strb	r3, [r7, #19]
        break;
 8003c44:	e005      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c46:	4b30      	ldr	r3, [pc, #192]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ef      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d159      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c58:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01e      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d019      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c74:	4b23      	ldr	r3, [pc, #140]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c80:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	4a1f      	ldr	r2, [pc, #124]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c90:	4b1c      	ldr	r3, [pc, #112]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c96:	4a1b      	ldr	r2, [pc, #108]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ca0:	4a18      	ldr	r2, [pc, #96]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d016      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fe f8c1 	bl	8001e38 <HAL_GetTick>
 8003cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fe f8bd 	bl	8001e38 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d902      	bls.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	74fb      	strb	r3, [r7, #19]
            break;
 8003cd0:	e006      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ec      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce6:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf4:	4903      	ldr	r1, [pc, #12]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	74bb      	strb	r3, [r7, #18]
 8003d02:	e005      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d10:	7c7b      	ldrb	r3, [r7, #17]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4ba6      	ldr	r3, [pc, #664]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	4aa5      	ldr	r2, [pc, #660]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2e:	4ba0      	ldr	r3, [pc, #640]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f023 0203 	bic.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	499c      	ldr	r1, [pc, #624]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d50:	4b97      	ldr	r3, [pc, #604]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f023 020c 	bic.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	4994      	ldr	r1, [pc, #592]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d72:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	498b      	ldr	r1, [pc, #556]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d94:	4b86      	ldr	r3, [pc, #536]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	4983      	ldr	r1, [pc, #524]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db6:	4b7e      	ldr	r3, [pc, #504]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	497a      	ldr	r1, [pc, #488]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd8:	4b75      	ldr	r3, [pc, #468]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	4972      	ldr	r1, [pc, #456]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	4969      	ldr	r1, [pc, #420]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e1c:	4b64      	ldr	r3, [pc, #400]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4961      	ldr	r1, [pc, #388]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	4958      	ldr	r1, [pc, #352]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6e:	4950      	ldr	r1, [pc, #320]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e98:	4b45      	ldr	r3, [pc, #276]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	4942      	ldr	r1, [pc, #264]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ed0:	4b37      	ldr	r3, [pc, #220]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	4934      	ldr	r1, [pc, #208]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003efa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f08:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f16:	4926      	ldr	r1, [pc, #152]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b21      	ldr	r3, [pc, #132]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f40:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4e:	4918      	ldr	r1, [pc, #96]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a12      	ldr	r2, [pc, #72]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f78:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	490a      	ldr	r1, [pc, #40]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e042      	b.n	800404c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fd fe47 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2224      	movs	r2, #36	@ 0x24
 8003fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fb82 	bl	8004708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f8b3 	bl	8004170 <UART_SetConfig>
 800400a:	4603      	mov	r3, r0
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e01b      	b.n	800404c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fc01 	bl	800484c <UART_CheckIdleState>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	2b20      	cmp	r3, #32
 800406c:	d17b      	bne.n	8004166 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_Transmit+0x26>
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e074      	b.n	8004168 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2221      	movs	r2, #33	@ 0x21
 800408a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408e:	f7fd fed3 	bl	8001e38 <HAL_GetTick>
 8004092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ac:	d108      	bne.n	80040c0 <HAL_UART_Transmit+0x6c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	e003      	b.n	80040c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040c8:	e030      	b.n	800412c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2200      	movs	r2, #0
 80040d2:	2180      	movs	r1, #128	@ 0x80
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fc63 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e03d      	b.n	8004168 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10b      	bne.n	800410a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004100:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	3302      	adds	r3, #2
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e007      	b.n	800411a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3301      	adds	r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1c8      	bne.n	80040ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2200      	movs	r2, #0
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fc2c 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e006      	b.n	8004168 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b08c      	sub	sp, #48	@ 0x30
 8004176:	af00      	add	r7, sp, #0
 8004178:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	431a      	orrs	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	431a      	orrs	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4313      	orrs	r3, r2
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4bab      	ldr	r3, [pc, #684]	@ (800444c <UART_SetConfig+0x2dc>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4aa0      	ldr	r2, [pc, #640]	@ (8004450 <UART_SetConfig+0x2e0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041d8:	4313      	orrs	r3, r2
 80041da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80041e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	f023 010f 	bic.w	r1, r3, #15
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a91      	ldr	r2, [pc, #580]	@ (8004454 <UART_SetConfig+0x2e4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d125      	bne.n	8004260 <UART_SetConfig+0xf0>
 8004214:	4b90      	ldr	r3, [pc, #576]	@ (8004458 <UART_SetConfig+0x2e8>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b03      	cmp	r3, #3
 8004220:	d81a      	bhi.n	8004258 <UART_SetConfig+0xe8>
 8004222:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <UART_SetConfig+0xb8>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004239 	.word	0x08004239
 800422c:	08004249 	.word	0x08004249
 8004230:	08004241 	.word	0x08004241
 8004234:	08004251 	.word	0x08004251
 8004238:	2301      	movs	r3, #1
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423e:	e0d6      	b.n	80043ee <UART_SetConfig+0x27e>
 8004240:	2302      	movs	r3, #2
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004246:	e0d2      	b.n	80043ee <UART_SetConfig+0x27e>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800424e:	e0ce      	b.n	80043ee <UART_SetConfig+0x27e>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004256:	e0ca      	b.n	80043ee <UART_SetConfig+0x27e>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800425e:	e0c6      	b.n	80043ee <UART_SetConfig+0x27e>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a7d      	ldr	r2, [pc, #500]	@ (800445c <UART_SetConfig+0x2ec>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d138      	bne.n	80042dc <UART_SetConfig+0x16c>
 800426a:	4b7b      	ldr	r3, [pc, #492]	@ (8004458 <UART_SetConfig+0x2e8>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d82d      	bhi.n	80042d4 <UART_SetConfig+0x164>
 8004278:	a201      	add	r2, pc, #4	@ (adr r2, 8004280 <UART_SetConfig+0x110>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	080042b5 	.word	0x080042b5
 8004284:	080042d5 	.word	0x080042d5
 8004288:	080042d5 	.word	0x080042d5
 800428c:	080042d5 	.word	0x080042d5
 8004290:	080042c5 	.word	0x080042c5
 8004294:	080042d5 	.word	0x080042d5
 8004298:	080042d5 	.word	0x080042d5
 800429c:	080042d5 	.word	0x080042d5
 80042a0:	080042bd 	.word	0x080042bd
 80042a4:	080042d5 	.word	0x080042d5
 80042a8:	080042d5 	.word	0x080042d5
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042cd 	.word	0x080042cd
 80042b4:	2300      	movs	r3, #0
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ba:	e098      	b.n	80043ee <UART_SetConfig+0x27e>
 80042bc:	2302      	movs	r3, #2
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c2:	e094      	b.n	80043ee <UART_SetConfig+0x27e>
 80042c4:	2304      	movs	r3, #4
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ca:	e090      	b.n	80043ee <UART_SetConfig+0x27e>
 80042cc:	2308      	movs	r3, #8
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042d2:	e08c      	b.n	80043ee <UART_SetConfig+0x27e>
 80042d4:	2310      	movs	r3, #16
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042da:	e088      	b.n	80043ee <UART_SetConfig+0x27e>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a5f      	ldr	r2, [pc, #380]	@ (8004460 <UART_SetConfig+0x2f0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d125      	bne.n	8004332 <UART_SetConfig+0x1c2>
 80042e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004458 <UART_SetConfig+0x2e8>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042f0:	2b30      	cmp	r3, #48	@ 0x30
 80042f2:	d016      	beq.n	8004322 <UART_SetConfig+0x1b2>
 80042f4:	2b30      	cmp	r3, #48	@ 0x30
 80042f6:	d818      	bhi.n	800432a <UART_SetConfig+0x1ba>
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d00a      	beq.n	8004312 <UART_SetConfig+0x1a2>
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d814      	bhi.n	800432a <UART_SetConfig+0x1ba>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <UART_SetConfig+0x19a>
 8004304:	2b10      	cmp	r3, #16
 8004306:	d008      	beq.n	800431a <UART_SetConfig+0x1aa>
 8004308:	e00f      	b.n	800432a <UART_SetConfig+0x1ba>
 800430a:	2300      	movs	r3, #0
 800430c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004310:	e06d      	b.n	80043ee <UART_SetConfig+0x27e>
 8004312:	2302      	movs	r3, #2
 8004314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004318:	e069      	b.n	80043ee <UART_SetConfig+0x27e>
 800431a:	2304      	movs	r3, #4
 800431c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004320:	e065      	b.n	80043ee <UART_SetConfig+0x27e>
 8004322:	2308      	movs	r3, #8
 8004324:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004328:	e061      	b.n	80043ee <UART_SetConfig+0x27e>
 800432a:	2310      	movs	r3, #16
 800432c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004330:	e05d      	b.n	80043ee <UART_SetConfig+0x27e>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4b      	ldr	r2, [pc, #300]	@ (8004464 <UART_SetConfig+0x2f4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d125      	bne.n	8004388 <UART_SetConfig+0x218>
 800433c:	4b46      	ldr	r3, [pc, #280]	@ (8004458 <UART_SetConfig+0x2e8>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004346:	2bc0      	cmp	r3, #192	@ 0xc0
 8004348:	d016      	beq.n	8004378 <UART_SetConfig+0x208>
 800434a:	2bc0      	cmp	r3, #192	@ 0xc0
 800434c:	d818      	bhi.n	8004380 <UART_SetConfig+0x210>
 800434e:	2b80      	cmp	r3, #128	@ 0x80
 8004350:	d00a      	beq.n	8004368 <UART_SetConfig+0x1f8>
 8004352:	2b80      	cmp	r3, #128	@ 0x80
 8004354:	d814      	bhi.n	8004380 <UART_SetConfig+0x210>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <UART_SetConfig+0x1f0>
 800435a:	2b40      	cmp	r3, #64	@ 0x40
 800435c:	d008      	beq.n	8004370 <UART_SetConfig+0x200>
 800435e:	e00f      	b.n	8004380 <UART_SetConfig+0x210>
 8004360:	2300      	movs	r3, #0
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004366:	e042      	b.n	80043ee <UART_SetConfig+0x27e>
 8004368:	2302      	movs	r3, #2
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436e:	e03e      	b.n	80043ee <UART_SetConfig+0x27e>
 8004370:	2304      	movs	r3, #4
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004376:	e03a      	b.n	80043ee <UART_SetConfig+0x27e>
 8004378:	2308      	movs	r3, #8
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437e:	e036      	b.n	80043ee <UART_SetConfig+0x27e>
 8004380:	2310      	movs	r3, #16
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004386:	e032      	b.n	80043ee <UART_SetConfig+0x27e>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a30      	ldr	r2, [pc, #192]	@ (8004450 <UART_SetConfig+0x2e0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d12a      	bne.n	80043e8 <UART_SetConfig+0x278>
 8004392:	4b31      	ldr	r3, [pc, #196]	@ (8004458 <UART_SetConfig+0x2e8>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004398:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800439c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043a0:	d01a      	beq.n	80043d8 <UART_SetConfig+0x268>
 80043a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043a6:	d81b      	bhi.n	80043e0 <UART_SetConfig+0x270>
 80043a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ac:	d00c      	beq.n	80043c8 <UART_SetConfig+0x258>
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b2:	d815      	bhi.n	80043e0 <UART_SetConfig+0x270>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <UART_SetConfig+0x250>
 80043b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043bc:	d008      	beq.n	80043d0 <UART_SetConfig+0x260>
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x270>
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c6:	e012      	b.n	80043ee <UART_SetConfig+0x27e>
 80043c8:	2302      	movs	r3, #2
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ce:	e00e      	b.n	80043ee <UART_SetConfig+0x27e>
 80043d0:	2304      	movs	r3, #4
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d6:	e00a      	b.n	80043ee <UART_SetConfig+0x27e>
 80043d8:	2308      	movs	r3, #8
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043de:	e006      	b.n	80043ee <UART_SetConfig+0x27e>
 80043e0:	2310      	movs	r3, #16
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e6:	e002      	b.n	80043ee <UART_SetConfig+0x27e>
 80043e8:	2310      	movs	r3, #16
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <UART_SetConfig+0x2e0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	f040 80a8 	bne.w	800454a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d834      	bhi.n	800446c <UART_SetConfig+0x2fc>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <UART_SetConfig+0x298>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800442d 	.word	0x0800442d
 800440c:	0800446d 	.word	0x0800446d
 8004410:	08004435 	.word	0x08004435
 8004414:	0800446d 	.word	0x0800446d
 8004418:	0800443b 	.word	0x0800443b
 800441c:	0800446d 	.word	0x0800446d
 8004420:	0800446d 	.word	0x0800446d
 8004424:	0800446d 	.word	0x0800446d
 8004428:	08004443 	.word	0x08004443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7ff fb60 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8004430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004432:	e021      	b.n	8004478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <UART_SetConfig+0x2f8>)
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004438:	e01e      	b.n	8004478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7ff faeb 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 800443e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004440:	e01a      	b.n	8004478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004448:	e016      	b.n	8004478 <UART_SetConfig+0x308>
 800444a:	bf00      	nop
 800444c:	cfff69f3 	.word	0xcfff69f3
 8004450:	40008000 	.word	0x40008000
 8004454:	40013800 	.word	0x40013800
 8004458:	40021000 	.word	0x40021000
 800445c:	40004400 	.word	0x40004400
 8004460:	40004800 	.word	0x40004800
 8004464:	40004c00 	.word	0x40004c00
 8004468:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004476:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 812a 	beq.w	80046d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	4a9e      	ldr	r2, [pc, #632]	@ (8004700 <UART_SetConfig+0x590>)
 8004486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448a:	461a      	mov	r2, r3
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004492:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4413      	add	r3, r2
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d305      	bcc.n	80044b0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d903      	bls.n	80044b8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80044b6:	e10d      	b.n	80046d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	2200      	movs	r2, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	60fa      	str	r2, [r7, #12]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004700 <UART_SetConfig+0x590>)
 80044c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2200      	movs	r2, #0
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044da:	f7fc fb67 	bl	8000bac <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	020b      	lsls	r3, r1, #8
 80044f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044f4:	0202      	lsls	r2, r0, #8
 80044f6:	6979      	ldr	r1, [r7, #20]
 80044f8:	6849      	ldr	r1, [r1, #4]
 80044fa:	0849      	lsrs	r1, r1, #1
 80044fc:	2000      	movs	r0, #0
 80044fe:	460c      	mov	r4, r1
 8004500:	4605      	mov	r5, r0
 8004502:	eb12 0804 	adds.w	r8, r2, r4
 8004506:	eb43 0905 	adc.w	r9, r3, r5
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	469a      	mov	sl, r3
 8004512:	4693      	mov	fp, r2
 8004514:	4652      	mov	r2, sl
 8004516:	465b      	mov	r3, fp
 8004518:	4640      	mov	r0, r8
 800451a:	4649      	mov	r1, r9
 800451c:	f7fc fb46 	bl	8000bac <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800452e:	d308      	bcc.n	8004542 <UART_SetConfig+0x3d2>
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004536:	d204      	bcs.n	8004542 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	60da      	str	r2, [r3, #12]
 8004540:	e0c8      	b.n	80046d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004548:	e0c4      	b.n	80046d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004552:	d167      	bne.n	8004624 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004554:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004558:	2b08      	cmp	r3, #8
 800455a:	d828      	bhi.n	80045ae <UART_SetConfig+0x43e>
 800455c:	a201      	add	r2, pc, #4	@ (adr r2, 8004564 <UART_SetConfig+0x3f4>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7ff fab2 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 800458c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800458e:	e014      	b.n	80045ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7ff fac4 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8004594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004596:	e010      	b.n	80045ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b5a      	ldr	r3, [pc, #360]	@ (8004704 <UART_SetConfig+0x594>)
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800459c:	e00d      	b.n	80045ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7ff fa39 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80045a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045a4:	e009      	b.n	80045ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045ac:	e005      	b.n	80045ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8089 	beq.w	80046d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004700 <UART_SetConfig+0x590>)
 80045c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d4:	005a      	lsls	r2, r3, #1
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	441a      	add	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d916      	bls.n	800461c <UART_SetConfig+0x4ac>
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f4:	d212      	bcs.n	800461c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f023 030f 	bic.w	r3, r3, #15
 80045fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	b29a      	uxth	r2, r3
 800460c:	8bfb      	ldrh	r3, [r7, #30]
 800460e:	4313      	orrs	r3, r2
 8004610:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	8bfa      	ldrh	r2, [r7, #30]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	e05b      	b.n	80046d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004622:	e057      	b.n	80046d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004624:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004628:	2b08      	cmp	r3, #8
 800462a:	d828      	bhi.n	800467e <UART_SetConfig+0x50e>
 800462c:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <UART_SetConfig+0x4c4>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004659 	.word	0x08004659
 8004638:	08004661 	.word	0x08004661
 800463c:	08004669 	.word	0x08004669
 8004640:	0800467f 	.word	0x0800467f
 8004644:	0800466f 	.word	0x0800466f
 8004648:	0800467f 	.word	0x0800467f
 800464c:	0800467f 	.word	0x0800467f
 8004650:	0800467f 	.word	0x0800467f
 8004654:	08004677 	.word	0x08004677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7ff fa4a 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 800465c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800465e:	e014      	b.n	800468a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004660:	f7ff fa5c 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8004664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004666:	e010      	b.n	800468a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004668:	4b26      	ldr	r3, [pc, #152]	@ (8004704 <UART_SetConfig+0x594>)
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800466c:	e00d      	b.n	800468a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466e:	f7ff f9d1 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 8004672:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004674:	e009      	b.n	800468a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800467c:	e005      	b.n	800468a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004688:	bf00      	nop
    }

    if (pclk != 0U)
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d021      	beq.n	80046d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	4a1a      	ldr	r2, [pc, #104]	@ (8004700 <UART_SetConfig+0x590>)
 8004696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800469a:	461a      	mov	r2, r3
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	fbb3 f2f2 	udiv	r2, r3, r2
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	441a      	add	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d909      	bls.n	80046ce <UART_SetConfig+0x55e>
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c0:	d205      	bcs.n	80046ce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	e002      	b.n	80046d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2201      	movs	r2, #1
 80046e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2200      	movs	r2, #0
 80046ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3730      	adds	r7, #48	@ 0x30
 80046f8:	46bd      	mov	sp, r7
 80046fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fe:	bf00      	nop
 8004700:	080060e8 	.word	0x080060e8
 8004704:	00f42400 	.word	0x00f42400

08004708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01a      	beq.n	800481e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004806:	d10a      	bne.n	800481e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b098      	sub	sp, #96	@ 0x60
 8004850:	af02      	add	r7, sp, #8
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800485c:	f7fd faec 	bl	8001e38 <HAL_GetTick>
 8004860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b08      	cmp	r3, #8
 800486e:	d12f      	bne.n	80048d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004878:	2200      	movs	r2, #0
 800487a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f88e 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d022      	beq.n	80048d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800489e:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e6      	bne.n	800488a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e063      	b.n	8004998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d149      	bne.n	8004972 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e6:	2200      	movs	r2, #0
 80048e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f857 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d03c      	beq.n	8004972 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	623b      	str	r3, [r7, #32]
   return(result);
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800490c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004916:	633b      	str	r3, [r7, #48]	@ 0x30
 8004918:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800491c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e6      	bne.n	80048f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	60fb      	str	r3, [r7, #12]
   return(result);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800494a:	61fa      	str	r2, [r7, #28]
 800494c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	69b9      	ldr	r1, [r7, #24]
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	617b      	str	r3, [r7, #20]
   return(result);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e5      	bne.n	800492a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e012      	b.n	8004998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3758      	adds	r7, #88	@ 0x58
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b0:	e04f      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d04b      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fd fa3d 	bl	8001e38 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e04e      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d037      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b80      	cmp	r3, #128	@ 0x80
 80049e6:	d034      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d031      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d110      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2208      	movs	r2, #8
 8004a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f838 	bl	8004a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e029      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2c:	d111      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f81e 	bl	8004a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e00f      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0a0      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b095      	sub	sp, #84	@ 0x54
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e3      	bne.n	8004ab4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d118      	bne.n	8004b26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6979      	ldr	r1, [r7, #20]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e6      	bne.n	8004af4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b3a:	bf00      	nop
 8004b3c:	3754      	adds	r7, #84	@ 0x54
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_UARTEx_DisableFifoMode+0x16>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e027      	b.n	8004bac <HAL_UARTEx_DisableFifoMode+0x66>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2224      	movs	r2, #36	@ 0x24
 8004b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004b8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e02d      	b.n	8004c2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	@ 0x24
 8004bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f84f 	bl	8004cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e02d      	b.n	8004ca8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	@ 0x24
 8004c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f811 	bl	8004cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d108      	bne.n	8004cd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cd0:	e031      	b.n	8004d36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	0e5b      	lsrs	r3, r3, #25
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	0f5b      	lsrs	r3, r3, #29
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
 8004cfc:	7b3a      	ldrb	r2, [r7, #12]
 8004cfe:	4911      	ldr	r1, [pc, #68]	@ (8004d44 <UARTEx_SetNbDataToProcess+0x94>)
 8004d00:	5c8a      	ldrb	r2, [r1, r2]
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d06:	7b3a      	ldrb	r2, [r7, #12]
 8004d08:	490f      	ldr	r1, [pc, #60]	@ (8004d48 <UARTEx_SetNbDataToProcess+0x98>)
 8004d0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	7b7a      	ldrb	r2, [r7, #13]
 8004d1c:	4909      	ldr	r1, [pc, #36]	@ (8004d44 <UARTEx_SetNbDataToProcess+0x94>)
 8004d1e:	5c8a      	ldrb	r2, [r1, r2]
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d24:	7b7a      	ldrb	r2, [r7, #13]
 8004d26:	4908      	ldr	r1, [pc, #32]	@ (8004d48 <UARTEx_SetNbDataToProcess+0x98>)
 8004d28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	08006100 	.word	0x08006100
 8004d48:	08006108 	.word	0x08006108

08004d4c <std>:
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	4604      	mov	r4, r0
 8004d52:	e9c0 3300 	strd	r3, r3, [r0]
 8004d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d5a:	6083      	str	r3, [r0, #8]
 8004d5c:	8181      	strh	r1, [r0, #12]
 8004d5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d60:	81c2      	strh	r2, [r0, #14]
 8004d62:	6183      	str	r3, [r0, #24]
 8004d64:	4619      	mov	r1, r3
 8004d66:	2208      	movs	r2, #8
 8004d68:	305c      	adds	r0, #92	@ 0x5c
 8004d6a:	f000 fa19 	bl	80051a0 <memset>
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004da4 <std+0x58>)
 8004d70:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <std+0x5c>)
 8004d74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d76:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <std+0x60>)
 8004d78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <std+0x64>)
 8004d7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <std+0x68>)
 8004d80:	6224      	str	r4, [r4, #32]
 8004d82:	429c      	cmp	r4, r3
 8004d84:	d006      	beq.n	8004d94 <std+0x48>
 8004d86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d8a:	4294      	cmp	r4, r2
 8004d8c:	d002      	beq.n	8004d94 <std+0x48>
 8004d8e:	33d0      	adds	r3, #208	@ 0xd0
 8004d90:	429c      	cmp	r4, r3
 8004d92:	d105      	bne.n	8004da0 <std+0x54>
 8004d94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d9c:	f000 ba78 	b.w	8005290 <__retarget_lock_init_recursive>
 8004da0:	bd10      	pop	{r4, pc}
 8004da2:	bf00      	nop
 8004da4:	08004fb1 	.word	0x08004fb1
 8004da8:	08004fd3 	.word	0x08004fd3
 8004dac:	0800500b 	.word	0x0800500b
 8004db0:	0800502f 	.word	0x0800502f
 8004db4:	200007e8 	.word	0x200007e8

08004db8 <stdio_exit_handler>:
 8004db8:	4a02      	ldr	r2, [pc, #8]	@ (8004dc4 <stdio_exit_handler+0xc>)
 8004dba:	4903      	ldr	r1, [pc, #12]	@ (8004dc8 <stdio_exit_handler+0x10>)
 8004dbc:	4803      	ldr	r0, [pc, #12]	@ (8004dcc <stdio_exit_handler+0x14>)
 8004dbe:	f000 b869 	b.w	8004e94 <_fwalk_sglue>
 8004dc2:	bf00      	nop
 8004dc4:	20000014 	.word	0x20000014
 8004dc8:	08005de1 	.word	0x08005de1
 8004dcc:	20000024 	.word	0x20000024

08004dd0 <cleanup_stdio>:
 8004dd0:	6841      	ldr	r1, [r0, #4]
 8004dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <cleanup_stdio+0x34>)
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	4604      	mov	r4, r0
 8004dda:	d001      	beq.n	8004de0 <cleanup_stdio+0x10>
 8004ddc:	f001 f800 	bl	8005de0 <_fflush_r>
 8004de0:	68a1      	ldr	r1, [r4, #8]
 8004de2:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <cleanup_stdio+0x38>)
 8004de4:	4299      	cmp	r1, r3
 8004de6:	d002      	beq.n	8004dee <cleanup_stdio+0x1e>
 8004de8:	4620      	mov	r0, r4
 8004dea:	f000 fff9 	bl	8005de0 <_fflush_r>
 8004dee:	68e1      	ldr	r1, [r4, #12]
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <cleanup_stdio+0x3c>)
 8004df2:	4299      	cmp	r1, r3
 8004df4:	d004      	beq.n	8004e00 <cleanup_stdio+0x30>
 8004df6:	4620      	mov	r0, r4
 8004df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dfc:	f000 bff0 	b.w	8005de0 <_fflush_r>
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	bf00      	nop
 8004e04:	200007e8 	.word	0x200007e8
 8004e08:	20000850 	.word	0x20000850
 8004e0c:	200008b8 	.word	0x200008b8

08004e10 <global_stdio_init.part.0>:
 8004e10:	b510      	push	{r4, lr}
 8004e12:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <global_stdio_init.part.0+0x30>)
 8004e14:	4c0b      	ldr	r4, [pc, #44]	@ (8004e44 <global_stdio_init.part.0+0x34>)
 8004e16:	4a0c      	ldr	r2, [pc, #48]	@ (8004e48 <global_stdio_init.part.0+0x38>)
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2104      	movs	r1, #4
 8004e20:	f7ff ff94 	bl	8004d4c <std>
 8004e24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e28:	2201      	movs	r2, #1
 8004e2a:	2109      	movs	r1, #9
 8004e2c:	f7ff ff8e 	bl	8004d4c <std>
 8004e30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e34:	2202      	movs	r2, #2
 8004e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3a:	2112      	movs	r1, #18
 8004e3c:	f7ff bf86 	b.w	8004d4c <std>
 8004e40:	20000920 	.word	0x20000920
 8004e44:	200007e8 	.word	0x200007e8
 8004e48:	08004db9 	.word	0x08004db9

08004e4c <__sfp_lock_acquire>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	@ (8004e54 <__sfp_lock_acquire+0x8>)
 8004e4e:	f000 ba20 	b.w	8005292 <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	20000929 	.word	0x20000929

08004e58 <__sfp_lock_release>:
 8004e58:	4801      	ldr	r0, [pc, #4]	@ (8004e60 <__sfp_lock_release+0x8>)
 8004e5a:	f000 ba1b 	b.w	8005294 <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20000929 	.word	0x20000929

08004e64 <__sinit>:
 8004e64:	b510      	push	{r4, lr}
 8004e66:	4604      	mov	r4, r0
 8004e68:	f7ff fff0 	bl	8004e4c <__sfp_lock_acquire>
 8004e6c:	6a23      	ldr	r3, [r4, #32]
 8004e6e:	b11b      	cbz	r3, 8004e78 <__sinit+0x14>
 8004e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e74:	f7ff bff0 	b.w	8004e58 <__sfp_lock_release>
 8004e78:	4b04      	ldr	r3, [pc, #16]	@ (8004e8c <__sinit+0x28>)
 8004e7a:	6223      	str	r3, [r4, #32]
 8004e7c:	4b04      	ldr	r3, [pc, #16]	@ (8004e90 <__sinit+0x2c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f5      	bne.n	8004e70 <__sinit+0xc>
 8004e84:	f7ff ffc4 	bl	8004e10 <global_stdio_init.part.0>
 8004e88:	e7f2      	b.n	8004e70 <__sinit+0xc>
 8004e8a:	bf00      	nop
 8004e8c:	08004dd1 	.word	0x08004dd1
 8004e90:	20000920 	.word	0x20000920

08004e94 <_fwalk_sglue>:
 8004e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e98:	4607      	mov	r7, r0
 8004e9a:	4688      	mov	r8, r1
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ea8:	d505      	bpl.n	8004eb6 <_fwalk_sglue+0x22>
 8004eaa:	6824      	ldr	r4, [r4, #0]
 8004eac:	2c00      	cmp	r4, #0
 8004eae:	d1f7      	bne.n	8004ea0 <_fwalk_sglue+0xc>
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d907      	bls.n	8004ecc <_fwalk_sglue+0x38>
 8004ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	d003      	beq.n	8004ecc <_fwalk_sglue+0x38>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c0      	blx	r8
 8004eca:	4306      	orrs	r6, r0
 8004ecc:	3568      	adds	r5, #104	@ 0x68
 8004ece:	e7e9      	b.n	8004ea4 <_fwalk_sglue+0x10>

08004ed0 <iprintf>:
 8004ed0:	b40f      	push	{r0, r1, r2, r3}
 8004ed2:	b507      	push	{r0, r1, r2, lr}
 8004ed4:	4906      	ldr	r1, [pc, #24]	@ (8004ef0 <iprintf+0x20>)
 8004ed6:	ab04      	add	r3, sp, #16
 8004ed8:	6808      	ldr	r0, [r1, #0]
 8004eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ede:	6881      	ldr	r1, [r0, #8]
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	f000 fc53 	bl	800578c <_vfiprintf_r>
 8004ee6:	b003      	add	sp, #12
 8004ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eec:	b004      	add	sp, #16
 8004eee:	4770      	bx	lr
 8004ef0:	20000020 	.word	0x20000020

08004ef4 <_puts_r>:
 8004ef4:	6a03      	ldr	r3, [r0, #32]
 8004ef6:	b570      	push	{r4, r5, r6, lr}
 8004ef8:	6884      	ldr	r4, [r0, #8]
 8004efa:	4605      	mov	r5, r0
 8004efc:	460e      	mov	r6, r1
 8004efe:	b90b      	cbnz	r3, 8004f04 <_puts_r+0x10>
 8004f00:	f7ff ffb0 	bl	8004e64 <__sinit>
 8004f04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f06:	07db      	lsls	r3, r3, #31
 8004f08:	d405      	bmi.n	8004f16 <_puts_r+0x22>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	0598      	lsls	r0, r3, #22
 8004f0e:	d402      	bmi.n	8004f16 <_puts_r+0x22>
 8004f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f12:	f000 f9be 	bl	8005292 <__retarget_lock_acquire_recursive>
 8004f16:	89a3      	ldrh	r3, [r4, #12]
 8004f18:	0719      	lsls	r1, r3, #28
 8004f1a:	d502      	bpl.n	8004f22 <_puts_r+0x2e>
 8004f1c:	6923      	ldr	r3, [r4, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d135      	bne.n	8004f8e <_puts_r+0x9a>
 8004f22:	4621      	mov	r1, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f8e5 	bl	80050f4 <__swsetup_r>
 8004f2a:	b380      	cbz	r0, 8004f8e <_puts_r+0x9a>
 8004f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004f30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f32:	07da      	lsls	r2, r3, #31
 8004f34:	d405      	bmi.n	8004f42 <_puts_r+0x4e>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	059b      	lsls	r3, r3, #22
 8004f3a:	d402      	bmi.n	8004f42 <_puts_r+0x4e>
 8004f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f3e:	f000 f9a9 	bl	8005294 <__retarget_lock_release_recursive>
 8004f42:	4628      	mov	r0, r5
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	da04      	bge.n	8004f54 <_puts_r+0x60>
 8004f4a:	69a2      	ldr	r2, [r4, #24]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	dc17      	bgt.n	8004f80 <_puts_r+0x8c>
 8004f50:	290a      	cmp	r1, #10
 8004f52:	d015      	beq.n	8004f80 <_puts_r+0x8c>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	7019      	strb	r1, [r3, #0]
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f62:	3b01      	subs	r3, #1
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	2900      	cmp	r1, #0
 8004f68:	d1ed      	bne.n	8004f46 <_puts_r+0x52>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da11      	bge.n	8004f92 <_puts_r+0x9e>
 8004f6e:	4622      	mov	r2, r4
 8004f70:	210a      	movs	r1, #10
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 f880 	bl	8005078 <__swbuf_r>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d0d7      	beq.n	8004f2c <_puts_r+0x38>
 8004f7c:	250a      	movs	r5, #10
 8004f7e:	e7d7      	b.n	8004f30 <_puts_r+0x3c>
 8004f80:	4622      	mov	r2, r4
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 f878 	bl	8005078 <__swbuf_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d1e7      	bne.n	8004f5c <_puts_r+0x68>
 8004f8c:	e7ce      	b.n	8004f2c <_puts_r+0x38>
 8004f8e:	3e01      	subs	r6, #1
 8004f90:	e7e4      	b.n	8004f5c <_puts_r+0x68>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	6022      	str	r2, [r4, #0]
 8004f98:	220a      	movs	r2, #10
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e7ee      	b.n	8004f7c <_puts_r+0x88>
	...

08004fa0 <puts>:
 8004fa0:	4b02      	ldr	r3, [pc, #8]	@ (8004fac <puts+0xc>)
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	f7ff bfa5 	b.w	8004ef4 <_puts_r>
 8004faa:	bf00      	nop
 8004fac:	20000020 	.word	0x20000020

08004fb0 <__sread>:
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb8:	f000 f91c 	bl	80051f4 <_read_r>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	bfab      	itete	ge
 8004fc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8004fc4:	181b      	addge	r3, r3, r0
 8004fc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004fca:	bfac      	ite	ge
 8004fcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004fce:	81a3      	strhlt	r3, [r4, #12]
 8004fd0:	bd10      	pop	{r4, pc}

08004fd2 <__swrite>:
 8004fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd6:	461f      	mov	r7, r3
 8004fd8:	898b      	ldrh	r3, [r1, #12]
 8004fda:	05db      	lsls	r3, r3, #23
 8004fdc:	4605      	mov	r5, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	4616      	mov	r6, r2
 8004fe2:	d505      	bpl.n	8004ff0 <__swrite+0x1e>
 8004fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe8:	2302      	movs	r3, #2
 8004fea:	2200      	movs	r2, #0
 8004fec:	f000 f8f0 	bl	80051d0 <_lseek_r>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	463b      	mov	r3, r7
 8005000:	4628      	mov	r0, r5
 8005002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005006:	f000 b907 	b.w	8005218 <_write_r>

0800500a <__sseek>:
 800500a:	b510      	push	{r4, lr}
 800500c:	460c      	mov	r4, r1
 800500e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005012:	f000 f8dd 	bl	80051d0 <_lseek_r>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	bf15      	itete	ne
 800501c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800501e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005026:	81a3      	strheq	r3, [r4, #12]
 8005028:	bf18      	it	ne
 800502a:	81a3      	strhne	r3, [r4, #12]
 800502c:	bd10      	pop	{r4, pc}

0800502e <__sclose>:
 800502e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005032:	f000 b8bd 	b.w	80051b0 <_close_r>
	...

08005038 <_vsiprintf_r>:
 8005038:	b500      	push	{lr}
 800503a:	b09b      	sub	sp, #108	@ 0x6c
 800503c:	9100      	str	r1, [sp, #0]
 800503e:	9104      	str	r1, [sp, #16]
 8005040:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005044:	9105      	str	r1, [sp, #20]
 8005046:	9102      	str	r1, [sp, #8]
 8005048:	4905      	ldr	r1, [pc, #20]	@ (8005060 <_vsiprintf_r+0x28>)
 800504a:	9103      	str	r1, [sp, #12]
 800504c:	4669      	mov	r1, sp
 800504e:	f000 fa77 	bl	8005540 <_svfiprintf_r>
 8005052:	9b00      	ldr	r3, [sp, #0]
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	b01b      	add	sp, #108	@ 0x6c
 800505a:	f85d fb04 	ldr.w	pc, [sp], #4
 800505e:	bf00      	nop
 8005060:	ffff0208 	.word	0xffff0208

08005064 <vsiprintf>:
 8005064:	4613      	mov	r3, r2
 8005066:	460a      	mov	r2, r1
 8005068:	4601      	mov	r1, r0
 800506a:	4802      	ldr	r0, [pc, #8]	@ (8005074 <vsiprintf+0x10>)
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	f7ff bfe3 	b.w	8005038 <_vsiprintf_r>
 8005072:	bf00      	nop
 8005074:	20000020 	.word	0x20000020

08005078 <__swbuf_r>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	460e      	mov	r6, r1
 800507c:	4614      	mov	r4, r2
 800507e:	4605      	mov	r5, r0
 8005080:	b118      	cbz	r0, 800508a <__swbuf_r+0x12>
 8005082:	6a03      	ldr	r3, [r0, #32]
 8005084:	b90b      	cbnz	r3, 800508a <__swbuf_r+0x12>
 8005086:	f7ff feed 	bl	8004e64 <__sinit>
 800508a:	69a3      	ldr	r3, [r4, #24]
 800508c:	60a3      	str	r3, [r4, #8]
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	071a      	lsls	r2, r3, #28
 8005092:	d501      	bpl.n	8005098 <__swbuf_r+0x20>
 8005094:	6923      	ldr	r3, [r4, #16]
 8005096:	b943      	cbnz	r3, 80050aa <__swbuf_r+0x32>
 8005098:	4621      	mov	r1, r4
 800509a:	4628      	mov	r0, r5
 800509c:	f000 f82a 	bl	80050f4 <__swsetup_r>
 80050a0:	b118      	cbz	r0, 80050aa <__swbuf_r+0x32>
 80050a2:	f04f 37ff 	mov.w	r7, #4294967295
 80050a6:	4638      	mov	r0, r7
 80050a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	6922      	ldr	r2, [r4, #16]
 80050ae:	1a98      	subs	r0, r3, r2
 80050b0:	6963      	ldr	r3, [r4, #20]
 80050b2:	b2f6      	uxtb	r6, r6
 80050b4:	4283      	cmp	r3, r0
 80050b6:	4637      	mov	r7, r6
 80050b8:	dc05      	bgt.n	80050c6 <__swbuf_r+0x4e>
 80050ba:	4621      	mov	r1, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 fe8f 	bl	8005de0 <_fflush_r>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d1ed      	bne.n	80050a2 <__swbuf_r+0x2a>
 80050c6:	68a3      	ldr	r3, [r4, #8]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	60a3      	str	r3, [r4, #8]
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	6022      	str	r2, [r4, #0]
 80050d2:	701e      	strb	r6, [r3, #0]
 80050d4:	6962      	ldr	r2, [r4, #20]
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	429a      	cmp	r2, r3
 80050da:	d004      	beq.n	80050e6 <__swbuf_r+0x6e>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	07db      	lsls	r3, r3, #31
 80050e0:	d5e1      	bpl.n	80050a6 <__swbuf_r+0x2e>
 80050e2:	2e0a      	cmp	r6, #10
 80050e4:	d1df      	bne.n	80050a6 <__swbuf_r+0x2e>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 fe79 	bl	8005de0 <_fflush_r>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0d9      	beq.n	80050a6 <__swbuf_r+0x2e>
 80050f2:	e7d6      	b.n	80050a2 <__swbuf_r+0x2a>

080050f4 <__swsetup_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4b29      	ldr	r3, [pc, #164]	@ (800519c <__swsetup_r+0xa8>)
 80050f8:	4605      	mov	r5, r0
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	460c      	mov	r4, r1
 80050fe:	b118      	cbz	r0, 8005108 <__swsetup_r+0x14>
 8005100:	6a03      	ldr	r3, [r0, #32]
 8005102:	b90b      	cbnz	r3, 8005108 <__swsetup_r+0x14>
 8005104:	f7ff feae 	bl	8004e64 <__sinit>
 8005108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800510c:	0719      	lsls	r1, r3, #28
 800510e:	d422      	bmi.n	8005156 <__swsetup_r+0x62>
 8005110:	06da      	lsls	r2, r3, #27
 8005112:	d407      	bmi.n	8005124 <__swsetup_r+0x30>
 8005114:	2209      	movs	r2, #9
 8005116:	602a      	str	r2, [r5, #0]
 8005118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	f04f 30ff 	mov.w	r0, #4294967295
 8005122:	e033      	b.n	800518c <__swsetup_r+0x98>
 8005124:	0758      	lsls	r0, r3, #29
 8005126:	d512      	bpl.n	800514e <__swsetup_r+0x5a>
 8005128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800512a:	b141      	cbz	r1, 800513e <__swsetup_r+0x4a>
 800512c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <__swsetup_r+0x46>
 8005134:	4628      	mov	r0, r5
 8005136:	f000 f8af 	bl	8005298 <_free_r>
 800513a:	2300      	movs	r3, #0
 800513c:	6363      	str	r3, [r4, #52]	@ 0x34
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005144:	81a3      	strh	r3, [r4, #12]
 8005146:	2300      	movs	r3, #0
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	f043 0308 	orr.w	r3, r3, #8
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	b94b      	cbnz	r3, 800516e <__swsetup_r+0x7a>
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005164:	d003      	beq.n	800516e <__swsetup_r+0x7a>
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 fe87 	bl	8005e7c <__smakebuf_r>
 800516e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005172:	f013 0201 	ands.w	r2, r3, #1
 8005176:	d00a      	beq.n	800518e <__swsetup_r+0x9a>
 8005178:	2200      	movs	r2, #0
 800517a:	60a2      	str	r2, [r4, #8]
 800517c:	6962      	ldr	r2, [r4, #20]
 800517e:	4252      	negs	r2, r2
 8005180:	61a2      	str	r2, [r4, #24]
 8005182:	6922      	ldr	r2, [r4, #16]
 8005184:	b942      	cbnz	r2, 8005198 <__swsetup_r+0xa4>
 8005186:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800518a:	d1c5      	bne.n	8005118 <__swsetup_r+0x24>
 800518c:	bd38      	pop	{r3, r4, r5, pc}
 800518e:	0799      	lsls	r1, r3, #30
 8005190:	bf58      	it	pl
 8005192:	6962      	ldrpl	r2, [r4, #20]
 8005194:	60a2      	str	r2, [r4, #8]
 8005196:	e7f4      	b.n	8005182 <__swsetup_r+0x8e>
 8005198:	2000      	movs	r0, #0
 800519a:	e7f7      	b.n	800518c <__swsetup_r+0x98>
 800519c:	20000020 	.word	0x20000020

080051a0 <memset>:
 80051a0:	4402      	add	r2, r0
 80051a2:	4603      	mov	r3, r0
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d100      	bne.n	80051aa <memset+0xa>
 80051a8:	4770      	bx	lr
 80051aa:	f803 1b01 	strb.w	r1, [r3], #1
 80051ae:	e7f9      	b.n	80051a4 <memset+0x4>

080051b0 <_close_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	@ (80051cc <_close_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7fc fc8d 	bl	8001ada <_close>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_close_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_close_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000924 	.word	0x20000924

080051d0 <_lseek_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d07      	ldr	r5, [pc, #28]	@ (80051f0 <_lseek_r+0x20>)
 80051d4:	4604      	mov	r4, r0
 80051d6:	4608      	mov	r0, r1
 80051d8:	4611      	mov	r1, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	f7fc fca2 	bl	8001b28 <_lseek>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_lseek_r+0x1e>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_lseek_r+0x1e>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	20000924 	.word	0x20000924

080051f4 <_read_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	@ (8005214 <_read_r+0x20>)
 80051f8:	4604      	mov	r4, r0
 80051fa:	4608      	mov	r0, r1
 80051fc:	4611      	mov	r1, r2
 80051fe:	2200      	movs	r2, #0
 8005200:	602a      	str	r2, [r5, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f7fc fc30 	bl	8001a68 <_read>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_read_r+0x1e>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_read_r+0x1e>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20000924 	.word	0x20000924

08005218 <_write_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	@ (8005238 <_write_r+0x20>)
 800521c:	4604      	mov	r4, r0
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	2200      	movs	r2, #0
 8005224:	602a      	str	r2, [r5, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7fc fc3b 	bl	8001aa2 <_write>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_write_r+0x1e>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_write_r+0x1e>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000924 	.word	0x20000924

0800523c <__errno>:
 800523c:	4b01      	ldr	r3, [pc, #4]	@ (8005244 <__errno+0x8>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	20000020 	.word	0x20000020

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4d0d      	ldr	r5, [pc, #52]	@ (8005280 <__libc_init_array+0x38>)
 800524c:	4c0d      	ldr	r4, [pc, #52]	@ (8005284 <__libc_init_array+0x3c>)
 800524e:	1b64      	subs	r4, r4, r5
 8005250:	10a4      	asrs	r4, r4, #2
 8005252:	2600      	movs	r6, #0
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	4d0b      	ldr	r5, [pc, #44]	@ (8005288 <__libc_init_array+0x40>)
 800525a:	4c0c      	ldr	r4, [pc, #48]	@ (800528c <__libc_init_array+0x44>)
 800525c:	f000 feda 	bl	8006014 <_init>
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	2600      	movs	r6, #0
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	f855 3b04 	ldr.w	r3, [r5], #4
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	0800614c 	.word	0x0800614c
 8005284:	0800614c 	.word	0x0800614c
 8005288:	0800614c 	.word	0x0800614c
 800528c:	08006150 	.word	0x08006150

08005290 <__retarget_lock_init_recursive>:
 8005290:	4770      	bx	lr

08005292 <__retarget_lock_acquire_recursive>:
 8005292:	4770      	bx	lr

08005294 <__retarget_lock_release_recursive>:
 8005294:	4770      	bx	lr
	...

08005298 <_free_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4605      	mov	r5, r0
 800529c:	2900      	cmp	r1, #0
 800529e:	d041      	beq.n	8005324 <_free_r+0x8c>
 80052a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a4:	1f0c      	subs	r4, r1, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfb8      	it	lt
 80052aa:	18e4      	addlt	r4, r4, r3
 80052ac:	f000 f8e0 	bl	8005470 <__malloc_lock>
 80052b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <_free_r+0x90>)
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	b933      	cbnz	r3, 80052c4 <_free_r+0x2c>
 80052b6:	6063      	str	r3, [r4, #4]
 80052b8:	6014      	str	r4, [r2, #0]
 80052ba:	4628      	mov	r0, r5
 80052bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052c0:	f000 b8dc 	b.w	800547c <__malloc_unlock>
 80052c4:	42a3      	cmp	r3, r4
 80052c6:	d908      	bls.n	80052da <_free_r+0x42>
 80052c8:	6820      	ldr	r0, [r4, #0]
 80052ca:	1821      	adds	r1, r4, r0
 80052cc:	428b      	cmp	r3, r1
 80052ce:	bf01      	itttt	eq
 80052d0:	6819      	ldreq	r1, [r3, #0]
 80052d2:	685b      	ldreq	r3, [r3, #4]
 80052d4:	1809      	addeq	r1, r1, r0
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	e7ed      	b.n	80052b6 <_free_r+0x1e>
 80052da:	461a      	mov	r2, r3
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	b10b      	cbz	r3, 80052e4 <_free_r+0x4c>
 80052e0:	42a3      	cmp	r3, r4
 80052e2:	d9fa      	bls.n	80052da <_free_r+0x42>
 80052e4:	6811      	ldr	r1, [r2, #0]
 80052e6:	1850      	adds	r0, r2, r1
 80052e8:	42a0      	cmp	r0, r4
 80052ea:	d10b      	bne.n	8005304 <_free_r+0x6c>
 80052ec:	6820      	ldr	r0, [r4, #0]
 80052ee:	4401      	add	r1, r0
 80052f0:	1850      	adds	r0, r2, r1
 80052f2:	4283      	cmp	r3, r0
 80052f4:	6011      	str	r1, [r2, #0]
 80052f6:	d1e0      	bne.n	80052ba <_free_r+0x22>
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	6053      	str	r3, [r2, #4]
 80052fe:	4408      	add	r0, r1
 8005300:	6010      	str	r0, [r2, #0]
 8005302:	e7da      	b.n	80052ba <_free_r+0x22>
 8005304:	d902      	bls.n	800530c <_free_r+0x74>
 8005306:	230c      	movs	r3, #12
 8005308:	602b      	str	r3, [r5, #0]
 800530a:	e7d6      	b.n	80052ba <_free_r+0x22>
 800530c:	6820      	ldr	r0, [r4, #0]
 800530e:	1821      	adds	r1, r4, r0
 8005310:	428b      	cmp	r3, r1
 8005312:	bf04      	itt	eq
 8005314:	6819      	ldreq	r1, [r3, #0]
 8005316:	685b      	ldreq	r3, [r3, #4]
 8005318:	6063      	str	r3, [r4, #4]
 800531a:	bf04      	itt	eq
 800531c:	1809      	addeq	r1, r1, r0
 800531e:	6021      	streq	r1, [r4, #0]
 8005320:	6054      	str	r4, [r2, #4]
 8005322:	e7ca      	b.n	80052ba <_free_r+0x22>
 8005324:	bd38      	pop	{r3, r4, r5, pc}
 8005326:	bf00      	nop
 8005328:	20000930 	.word	0x20000930

0800532c <sbrk_aligned>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4e0f      	ldr	r6, [pc, #60]	@ (800536c <sbrk_aligned+0x40>)
 8005330:	460c      	mov	r4, r1
 8005332:	6831      	ldr	r1, [r6, #0]
 8005334:	4605      	mov	r5, r0
 8005336:	b911      	cbnz	r1, 800533e <sbrk_aligned+0x12>
 8005338:	f000 fe18 	bl	8005f6c <_sbrk_r>
 800533c:	6030      	str	r0, [r6, #0]
 800533e:	4621      	mov	r1, r4
 8005340:	4628      	mov	r0, r5
 8005342:	f000 fe13 	bl	8005f6c <_sbrk_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	d103      	bne.n	8005352 <sbrk_aligned+0x26>
 800534a:	f04f 34ff 	mov.w	r4, #4294967295
 800534e:	4620      	mov	r0, r4
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	1cc4      	adds	r4, r0, #3
 8005354:	f024 0403 	bic.w	r4, r4, #3
 8005358:	42a0      	cmp	r0, r4
 800535a:	d0f8      	beq.n	800534e <sbrk_aligned+0x22>
 800535c:	1a21      	subs	r1, r4, r0
 800535e:	4628      	mov	r0, r5
 8005360:	f000 fe04 	bl	8005f6c <_sbrk_r>
 8005364:	3001      	adds	r0, #1
 8005366:	d1f2      	bne.n	800534e <sbrk_aligned+0x22>
 8005368:	e7ef      	b.n	800534a <sbrk_aligned+0x1e>
 800536a:	bf00      	nop
 800536c:	2000092c 	.word	0x2000092c

08005370 <_malloc_r>:
 8005370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005374:	1ccd      	adds	r5, r1, #3
 8005376:	f025 0503 	bic.w	r5, r5, #3
 800537a:	3508      	adds	r5, #8
 800537c:	2d0c      	cmp	r5, #12
 800537e:	bf38      	it	cc
 8005380:	250c      	movcc	r5, #12
 8005382:	2d00      	cmp	r5, #0
 8005384:	4606      	mov	r6, r0
 8005386:	db01      	blt.n	800538c <_malloc_r+0x1c>
 8005388:	42a9      	cmp	r1, r5
 800538a:	d904      	bls.n	8005396 <_malloc_r+0x26>
 800538c:	230c      	movs	r3, #12
 800538e:	6033      	str	r3, [r6, #0]
 8005390:	2000      	movs	r0, #0
 8005392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800546c <_malloc_r+0xfc>
 800539a:	f000 f869 	bl	8005470 <__malloc_lock>
 800539e:	f8d8 3000 	ldr.w	r3, [r8]
 80053a2:	461c      	mov	r4, r3
 80053a4:	bb44      	cbnz	r4, 80053f8 <_malloc_r+0x88>
 80053a6:	4629      	mov	r1, r5
 80053a8:	4630      	mov	r0, r6
 80053aa:	f7ff ffbf 	bl	800532c <sbrk_aligned>
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	4604      	mov	r4, r0
 80053b2:	d158      	bne.n	8005466 <_malloc_r+0xf6>
 80053b4:	f8d8 4000 	ldr.w	r4, [r8]
 80053b8:	4627      	mov	r7, r4
 80053ba:	2f00      	cmp	r7, #0
 80053bc:	d143      	bne.n	8005446 <_malloc_r+0xd6>
 80053be:	2c00      	cmp	r4, #0
 80053c0:	d04b      	beq.n	800545a <_malloc_r+0xea>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	4639      	mov	r1, r7
 80053c6:	4630      	mov	r0, r6
 80053c8:	eb04 0903 	add.w	r9, r4, r3
 80053cc:	f000 fdce 	bl	8005f6c <_sbrk_r>
 80053d0:	4581      	cmp	r9, r0
 80053d2:	d142      	bne.n	800545a <_malloc_r+0xea>
 80053d4:	6821      	ldr	r1, [r4, #0]
 80053d6:	1a6d      	subs	r5, r5, r1
 80053d8:	4629      	mov	r1, r5
 80053da:	4630      	mov	r0, r6
 80053dc:	f7ff ffa6 	bl	800532c <sbrk_aligned>
 80053e0:	3001      	adds	r0, #1
 80053e2:	d03a      	beq.n	800545a <_malloc_r+0xea>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	442b      	add	r3, r5
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	f8d8 3000 	ldr.w	r3, [r8]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	bb62      	cbnz	r2, 800544c <_malloc_r+0xdc>
 80053f2:	f8c8 7000 	str.w	r7, [r8]
 80053f6:	e00f      	b.n	8005418 <_malloc_r+0xa8>
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	1b52      	subs	r2, r2, r5
 80053fc:	d420      	bmi.n	8005440 <_malloc_r+0xd0>
 80053fe:	2a0b      	cmp	r2, #11
 8005400:	d917      	bls.n	8005432 <_malloc_r+0xc2>
 8005402:	1961      	adds	r1, r4, r5
 8005404:	42a3      	cmp	r3, r4
 8005406:	6025      	str	r5, [r4, #0]
 8005408:	bf18      	it	ne
 800540a:	6059      	strne	r1, [r3, #4]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	bf08      	it	eq
 8005410:	f8c8 1000 	streq.w	r1, [r8]
 8005414:	5162      	str	r2, [r4, r5]
 8005416:	604b      	str	r3, [r1, #4]
 8005418:	4630      	mov	r0, r6
 800541a:	f000 f82f 	bl	800547c <__malloc_unlock>
 800541e:	f104 000b 	add.w	r0, r4, #11
 8005422:	1d23      	adds	r3, r4, #4
 8005424:	f020 0007 	bic.w	r0, r0, #7
 8005428:	1ac2      	subs	r2, r0, r3
 800542a:	bf1c      	itt	ne
 800542c:	1a1b      	subne	r3, r3, r0
 800542e:	50a3      	strne	r3, [r4, r2]
 8005430:	e7af      	b.n	8005392 <_malloc_r+0x22>
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	42a3      	cmp	r3, r4
 8005436:	bf0c      	ite	eq
 8005438:	f8c8 2000 	streq.w	r2, [r8]
 800543c:	605a      	strne	r2, [r3, #4]
 800543e:	e7eb      	b.n	8005418 <_malloc_r+0xa8>
 8005440:	4623      	mov	r3, r4
 8005442:	6864      	ldr	r4, [r4, #4]
 8005444:	e7ae      	b.n	80053a4 <_malloc_r+0x34>
 8005446:	463c      	mov	r4, r7
 8005448:	687f      	ldr	r7, [r7, #4]
 800544a:	e7b6      	b.n	80053ba <_malloc_r+0x4a>
 800544c:	461a      	mov	r2, r3
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	42a3      	cmp	r3, r4
 8005452:	d1fb      	bne.n	800544c <_malloc_r+0xdc>
 8005454:	2300      	movs	r3, #0
 8005456:	6053      	str	r3, [r2, #4]
 8005458:	e7de      	b.n	8005418 <_malloc_r+0xa8>
 800545a:	230c      	movs	r3, #12
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	4630      	mov	r0, r6
 8005460:	f000 f80c 	bl	800547c <__malloc_unlock>
 8005464:	e794      	b.n	8005390 <_malloc_r+0x20>
 8005466:	6005      	str	r5, [r0, #0]
 8005468:	e7d6      	b.n	8005418 <_malloc_r+0xa8>
 800546a:	bf00      	nop
 800546c:	20000930 	.word	0x20000930

08005470 <__malloc_lock>:
 8005470:	4801      	ldr	r0, [pc, #4]	@ (8005478 <__malloc_lock+0x8>)
 8005472:	f7ff bf0e 	b.w	8005292 <__retarget_lock_acquire_recursive>
 8005476:	bf00      	nop
 8005478:	20000928 	.word	0x20000928

0800547c <__malloc_unlock>:
 800547c:	4801      	ldr	r0, [pc, #4]	@ (8005484 <__malloc_unlock+0x8>)
 800547e:	f7ff bf09 	b.w	8005294 <__retarget_lock_release_recursive>
 8005482:	bf00      	nop
 8005484:	20000928 	.word	0x20000928

08005488 <__ssputs_r>:
 8005488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	688e      	ldr	r6, [r1, #8]
 800548e:	461f      	mov	r7, r3
 8005490:	42be      	cmp	r6, r7
 8005492:	680b      	ldr	r3, [r1, #0]
 8005494:	4682      	mov	sl, r0
 8005496:	460c      	mov	r4, r1
 8005498:	4690      	mov	r8, r2
 800549a:	d82d      	bhi.n	80054f8 <__ssputs_r+0x70>
 800549c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054a4:	d026      	beq.n	80054f4 <__ssputs_r+0x6c>
 80054a6:	6965      	ldr	r5, [r4, #20]
 80054a8:	6909      	ldr	r1, [r1, #16]
 80054aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ae:	eba3 0901 	sub.w	r9, r3, r1
 80054b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054b6:	1c7b      	adds	r3, r7, #1
 80054b8:	444b      	add	r3, r9
 80054ba:	106d      	asrs	r5, r5, #1
 80054bc:	429d      	cmp	r5, r3
 80054be:	bf38      	it	cc
 80054c0:	461d      	movcc	r5, r3
 80054c2:	0553      	lsls	r3, r2, #21
 80054c4:	d527      	bpl.n	8005516 <__ssputs_r+0x8e>
 80054c6:	4629      	mov	r1, r5
 80054c8:	f7ff ff52 	bl	8005370 <_malloc_r>
 80054cc:	4606      	mov	r6, r0
 80054ce:	b360      	cbz	r0, 800552a <__ssputs_r+0xa2>
 80054d0:	6921      	ldr	r1, [r4, #16]
 80054d2:	464a      	mov	r2, r9
 80054d4:	f000 fd5a 	bl	8005f8c <memcpy>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	6126      	str	r6, [r4, #16]
 80054e6:	6165      	str	r5, [r4, #20]
 80054e8:	444e      	add	r6, r9
 80054ea:	eba5 0509 	sub.w	r5, r5, r9
 80054ee:	6026      	str	r6, [r4, #0]
 80054f0:	60a5      	str	r5, [r4, #8]
 80054f2:	463e      	mov	r6, r7
 80054f4:	42be      	cmp	r6, r7
 80054f6:	d900      	bls.n	80054fa <__ssputs_r+0x72>
 80054f8:	463e      	mov	r6, r7
 80054fa:	6820      	ldr	r0, [r4, #0]
 80054fc:	4632      	mov	r2, r6
 80054fe:	4641      	mov	r1, r8
 8005500:	f000 fcf8 	bl	8005ef4 <memmove>
 8005504:	68a3      	ldr	r3, [r4, #8]
 8005506:	1b9b      	subs	r3, r3, r6
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	4433      	add	r3, r6
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	2000      	movs	r0, #0
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	462a      	mov	r2, r5
 8005518:	f000 fd46 	bl	8005fa8 <_realloc_r>
 800551c:	4606      	mov	r6, r0
 800551e:	2800      	cmp	r0, #0
 8005520:	d1e0      	bne.n	80054e4 <__ssputs_r+0x5c>
 8005522:	6921      	ldr	r1, [r4, #16]
 8005524:	4650      	mov	r0, sl
 8005526:	f7ff feb7 	bl	8005298 <_free_r>
 800552a:	230c      	movs	r3, #12
 800552c:	f8ca 3000 	str.w	r3, [sl]
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	e7e9      	b.n	8005512 <__ssputs_r+0x8a>
	...

08005540 <_svfiprintf_r>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	4698      	mov	r8, r3
 8005546:	898b      	ldrh	r3, [r1, #12]
 8005548:	061b      	lsls	r3, r3, #24
 800554a:	b09d      	sub	sp, #116	@ 0x74
 800554c:	4607      	mov	r7, r0
 800554e:	460d      	mov	r5, r1
 8005550:	4614      	mov	r4, r2
 8005552:	d510      	bpl.n	8005576 <_svfiprintf_r+0x36>
 8005554:	690b      	ldr	r3, [r1, #16]
 8005556:	b973      	cbnz	r3, 8005576 <_svfiprintf_r+0x36>
 8005558:	2140      	movs	r1, #64	@ 0x40
 800555a:	f7ff ff09 	bl	8005370 <_malloc_r>
 800555e:	6028      	str	r0, [r5, #0]
 8005560:	6128      	str	r0, [r5, #16]
 8005562:	b930      	cbnz	r0, 8005572 <_svfiprintf_r+0x32>
 8005564:	230c      	movs	r3, #12
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	b01d      	add	sp, #116	@ 0x74
 800556e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005572:	2340      	movs	r3, #64	@ 0x40
 8005574:	616b      	str	r3, [r5, #20]
 8005576:	2300      	movs	r3, #0
 8005578:	9309      	str	r3, [sp, #36]	@ 0x24
 800557a:	2320      	movs	r3, #32
 800557c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005580:	f8cd 800c 	str.w	r8, [sp, #12]
 8005584:	2330      	movs	r3, #48	@ 0x30
 8005586:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005724 <_svfiprintf_r+0x1e4>
 800558a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800558e:	f04f 0901 	mov.w	r9, #1
 8005592:	4623      	mov	r3, r4
 8005594:	469a      	mov	sl, r3
 8005596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800559a:	b10a      	cbz	r2, 80055a0 <_svfiprintf_r+0x60>
 800559c:	2a25      	cmp	r2, #37	@ 0x25
 800559e:	d1f9      	bne.n	8005594 <_svfiprintf_r+0x54>
 80055a0:	ebba 0b04 	subs.w	fp, sl, r4
 80055a4:	d00b      	beq.n	80055be <_svfiprintf_r+0x7e>
 80055a6:	465b      	mov	r3, fp
 80055a8:	4622      	mov	r2, r4
 80055aa:	4629      	mov	r1, r5
 80055ac:	4638      	mov	r0, r7
 80055ae:	f7ff ff6b 	bl	8005488 <__ssputs_r>
 80055b2:	3001      	adds	r0, #1
 80055b4:	f000 80a7 	beq.w	8005706 <_svfiprintf_r+0x1c6>
 80055b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ba:	445a      	add	r2, fp
 80055bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80055be:	f89a 3000 	ldrb.w	r3, [sl]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 809f 	beq.w	8005706 <_svfiprintf_r+0x1c6>
 80055c8:	2300      	movs	r3, #0
 80055ca:	f04f 32ff 	mov.w	r2, #4294967295
 80055ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d2:	f10a 0a01 	add.w	sl, sl, #1
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	9307      	str	r3, [sp, #28]
 80055da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055de:	931a      	str	r3, [sp, #104]	@ 0x68
 80055e0:	4654      	mov	r4, sl
 80055e2:	2205      	movs	r2, #5
 80055e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e8:	484e      	ldr	r0, [pc, #312]	@ (8005724 <_svfiprintf_r+0x1e4>)
 80055ea:	f7fa fe19 	bl	8000220 <memchr>
 80055ee:	9a04      	ldr	r2, [sp, #16]
 80055f0:	b9d8      	cbnz	r0, 800562a <_svfiprintf_r+0xea>
 80055f2:	06d0      	lsls	r0, r2, #27
 80055f4:	bf44      	itt	mi
 80055f6:	2320      	movmi	r3, #32
 80055f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055fc:	0711      	lsls	r1, r2, #28
 80055fe:	bf44      	itt	mi
 8005600:	232b      	movmi	r3, #43	@ 0x2b
 8005602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005606:	f89a 3000 	ldrb.w	r3, [sl]
 800560a:	2b2a      	cmp	r3, #42	@ 0x2a
 800560c:	d015      	beq.n	800563a <_svfiprintf_r+0xfa>
 800560e:	9a07      	ldr	r2, [sp, #28]
 8005610:	4654      	mov	r4, sl
 8005612:	2000      	movs	r0, #0
 8005614:	f04f 0c0a 	mov.w	ip, #10
 8005618:	4621      	mov	r1, r4
 800561a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800561e:	3b30      	subs	r3, #48	@ 0x30
 8005620:	2b09      	cmp	r3, #9
 8005622:	d94b      	bls.n	80056bc <_svfiprintf_r+0x17c>
 8005624:	b1b0      	cbz	r0, 8005654 <_svfiprintf_r+0x114>
 8005626:	9207      	str	r2, [sp, #28]
 8005628:	e014      	b.n	8005654 <_svfiprintf_r+0x114>
 800562a:	eba0 0308 	sub.w	r3, r0, r8
 800562e:	fa09 f303 	lsl.w	r3, r9, r3
 8005632:	4313      	orrs	r3, r2
 8005634:	9304      	str	r3, [sp, #16]
 8005636:	46a2      	mov	sl, r4
 8005638:	e7d2      	b.n	80055e0 <_svfiprintf_r+0xa0>
 800563a:	9b03      	ldr	r3, [sp, #12]
 800563c:	1d19      	adds	r1, r3, #4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	9103      	str	r1, [sp, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	bfbb      	ittet	lt
 8005646:	425b      	neglt	r3, r3
 8005648:	f042 0202 	orrlt.w	r2, r2, #2
 800564c:	9307      	strge	r3, [sp, #28]
 800564e:	9307      	strlt	r3, [sp, #28]
 8005650:	bfb8      	it	lt
 8005652:	9204      	strlt	r2, [sp, #16]
 8005654:	7823      	ldrb	r3, [r4, #0]
 8005656:	2b2e      	cmp	r3, #46	@ 0x2e
 8005658:	d10a      	bne.n	8005670 <_svfiprintf_r+0x130>
 800565a:	7863      	ldrb	r3, [r4, #1]
 800565c:	2b2a      	cmp	r3, #42	@ 0x2a
 800565e:	d132      	bne.n	80056c6 <_svfiprintf_r+0x186>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	1d1a      	adds	r2, r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	9203      	str	r2, [sp, #12]
 8005668:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800566c:	3402      	adds	r4, #2
 800566e:	9305      	str	r3, [sp, #20]
 8005670:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005734 <_svfiprintf_r+0x1f4>
 8005674:	7821      	ldrb	r1, [r4, #0]
 8005676:	2203      	movs	r2, #3
 8005678:	4650      	mov	r0, sl
 800567a:	f7fa fdd1 	bl	8000220 <memchr>
 800567e:	b138      	cbz	r0, 8005690 <_svfiprintf_r+0x150>
 8005680:	9b04      	ldr	r3, [sp, #16]
 8005682:	eba0 000a 	sub.w	r0, r0, sl
 8005686:	2240      	movs	r2, #64	@ 0x40
 8005688:	4082      	lsls	r2, r0
 800568a:	4313      	orrs	r3, r2
 800568c:	3401      	adds	r4, #1
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005694:	4824      	ldr	r0, [pc, #144]	@ (8005728 <_svfiprintf_r+0x1e8>)
 8005696:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800569a:	2206      	movs	r2, #6
 800569c:	f7fa fdc0 	bl	8000220 <memchr>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d036      	beq.n	8005712 <_svfiprintf_r+0x1d2>
 80056a4:	4b21      	ldr	r3, [pc, #132]	@ (800572c <_svfiprintf_r+0x1ec>)
 80056a6:	bb1b      	cbnz	r3, 80056f0 <_svfiprintf_r+0x1b0>
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	3307      	adds	r3, #7
 80056ac:	f023 0307 	bic.w	r3, r3, #7
 80056b0:	3308      	adds	r3, #8
 80056b2:	9303      	str	r3, [sp, #12]
 80056b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b6:	4433      	add	r3, r6
 80056b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ba:	e76a      	b.n	8005592 <_svfiprintf_r+0x52>
 80056bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c0:	460c      	mov	r4, r1
 80056c2:	2001      	movs	r0, #1
 80056c4:	e7a8      	b.n	8005618 <_svfiprintf_r+0xd8>
 80056c6:	2300      	movs	r3, #0
 80056c8:	3401      	adds	r4, #1
 80056ca:	9305      	str	r3, [sp, #20]
 80056cc:	4619      	mov	r1, r3
 80056ce:	f04f 0c0a 	mov.w	ip, #10
 80056d2:	4620      	mov	r0, r4
 80056d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d8:	3a30      	subs	r2, #48	@ 0x30
 80056da:	2a09      	cmp	r2, #9
 80056dc:	d903      	bls.n	80056e6 <_svfiprintf_r+0x1a6>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0c6      	beq.n	8005670 <_svfiprintf_r+0x130>
 80056e2:	9105      	str	r1, [sp, #20]
 80056e4:	e7c4      	b.n	8005670 <_svfiprintf_r+0x130>
 80056e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ea:	4604      	mov	r4, r0
 80056ec:	2301      	movs	r3, #1
 80056ee:	e7f0      	b.n	80056d2 <_svfiprintf_r+0x192>
 80056f0:	ab03      	add	r3, sp, #12
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	462a      	mov	r2, r5
 80056f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005730 <_svfiprintf_r+0x1f0>)
 80056f8:	a904      	add	r1, sp, #16
 80056fa:	4638      	mov	r0, r7
 80056fc:	f3af 8000 	nop.w
 8005700:	1c42      	adds	r2, r0, #1
 8005702:	4606      	mov	r6, r0
 8005704:	d1d6      	bne.n	80056b4 <_svfiprintf_r+0x174>
 8005706:	89ab      	ldrh	r3, [r5, #12]
 8005708:	065b      	lsls	r3, r3, #25
 800570a:	f53f af2d 	bmi.w	8005568 <_svfiprintf_r+0x28>
 800570e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005710:	e72c      	b.n	800556c <_svfiprintf_r+0x2c>
 8005712:	ab03      	add	r3, sp, #12
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	462a      	mov	r2, r5
 8005718:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <_svfiprintf_r+0x1f0>)
 800571a:	a904      	add	r1, sp, #16
 800571c:	4638      	mov	r0, r7
 800571e:	f000 f9bb 	bl	8005a98 <_printf_i>
 8005722:	e7ed      	b.n	8005700 <_svfiprintf_r+0x1c0>
 8005724:	08006110 	.word	0x08006110
 8005728:	0800611a 	.word	0x0800611a
 800572c:	00000000 	.word	0x00000000
 8005730:	08005489 	.word	0x08005489
 8005734:	08006116 	.word	0x08006116

08005738 <__sfputc_r>:
 8005738:	6893      	ldr	r3, [r2, #8]
 800573a:	3b01      	subs	r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	b410      	push	{r4}
 8005740:	6093      	str	r3, [r2, #8]
 8005742:	da08      	bge.n	8005756 <__sfputc_r+0x1e>
 8005744:	6994      	ldr	r4, [r2, #24]
 8005746:	42a3      	cmp	r3, r4
 8005748:	db01      	blt.n	800574e <__sfputc_r+0x16>
 800574a:	290a      	cmp	r1, #10
 800574c:	d103      	bne.n	8005756 <__sfputc_r+0x1e>
 800574e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005752:	f7ff bc91 	b.w	8005078 <__swbuf_r>
 8005756:	6813      	ldr	r3, [r2, #0]
 8005758:	1c58      	adds	r0, r3, #1
 800575a:	6010      	str	r0, [r2, #0]
 800575c:	7019      	strb	r1, [r3, #0]
 800575e:	4608      	mov	r0, r1
 8005760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005764:	4770      	bx	lr

08005766 <__sfputs_r>:
 8005766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005768:	4606      	mov	r6, r0
 800576a:	460f      	mov	r7, r1
 800576c:	4614      	mov	r4, r2
 800576e:	18d5      	adds	r5, r2, r3
 8005770:	42ac      	cmp	r4, r5
 8005772:	d101      	bne.n	8005778 <__sfputs_r+0x12>
 8005774:	2000      	movs	r0, #0
 8005776:	e007      	b.n	8005788 <__sfputs_r+0x22>
 8005778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577c:	463a      	mov	r2, r7
 800577e:	4630      	mov	r0, r6
 8005780:	f7ff ffda 	bl	8005738 <__sfputc_r>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d1f3      	bne.n	8005770 <__sfputs_r+0xa>
 8005788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800578c <_vfiprintf_r>:
 800578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005790:	460d      	mov	r5, r1
 8005792:	b09d      	sub	sp, #116	@ 0x74
 8005794:	4614      	mov	r4, r2
 8005796:	4698      	mov	r8, r3
 8005798:	4606      	mov	r6, r0
 800579a:	b118      	cbz	r0, 80057a4 <_vfiprintf_r+0x18>
 800579c:	6a03      	ldr	r3, [r0, #32]
 800579e:	b90b      	cbnz	r3, 80057a4 <_vfiprintf_r+0x18>
 80057a0:	f7ff fb60 	bl	8004e64 <__sinit>
 80057a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057a6:	07d9      	lsls	r1, r3, #31
 80057a8:	d405      	bmi.n	80057b6 <_vfiprintf_r+0x2a>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	059a      	lsls	r2, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_vfiprintf_r+0x2a>
 80057b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057b2:	f7ff fd6e 	bl	8005292 <__retarget_lock_acquire_recursive>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	071b      	lsls	r3, r3, #28
 80057ba:	d501      	bpl.n	80057c0 <_vfiprintf_r+0x34>
 80057bc:	692b      	ldr	r3, [r5, #16]
 80057be:	b99b      	cbnz	r3, 80057e8 <_vfiprintf_r+0x5c>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff fc96 	bl	80050f4 <__swsetup_r>
 80057c8:	b170      	cbz	r0, 80057e8 <_vfiprintf_r+0x5c>
 80057ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057cc:	07dc      	lsls	r4, r3, #31
 80057ce:	d504      	bpl.n	80057da <_vfiprintf_r+0x4e>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	b01d      	add	sp, #116	@ 0x74
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	89ab      	ldrh	r3, [r5, #12]
 80057dc:	0598      	lsls	r0, r3, #22
 80057de:	d4f7      	bmi.n	80057d0 <_vfiprintf_r+0x44>
 80057e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057e2:	f7ff fd57 	bl	8005294 <__retarget_lock_release_recursive>
 80057e6:	e7f3      	b.n	80057d0 <_vfiprintf_r+0x44>
 80057e8:	2300      	movs	r3, #0
 80057ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ec:	2320      	movs	r3, #32
 80057ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80057f6:	2330      	movs	r3, #48	@ 0x30
 80057f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80059a8 <_vfiprintf_r+0x21c>
 80057fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005800:	f04f 0901 	mov.w	r9, #1
 8005804:	4623      	mov	r3, r4
 8005806:	469a      	mov	sl, r3
 8005808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800580c:	b10a      	cbz	r2, 8005812 <_vfiprintf_r+0x86>
 800580e:	2a25      	cmp	r2, #37	@ 0x25
 8005810:	d1f9      	bne.n	8005806 <_vfiprintf_r+0x7a>
 8005812:	ebba 0b04 	subs.w	fp, sl, r4
 8005816:	d00b      	beq.n	8005830 <_vfiprintf_r+0xa4>
 8005818:	465b      	mov	r3, fp
 800581a:	4622      	mov	r2, r4
 800581c:	4629      	mov	r1, r5
 800581e:	4630      	mov	r0, r6
 8005820:	f7ff ffa1 	bl	8005766 <__sfputs_r>
 8005824:	3001      	adds	r0, #1
 8005826:	f000 80a7 	beq.w	8005978 <_vfiprintf_r+0x1ec>
 800582a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800582c:	445a      	add	r2, fp
 800582e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005830:	f89a 3000 	ldrb.w	r3, [sl]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 809f 	beq.w	8005978 <_vfiprintf_r+0x1ec>
 800583a:	2300      	movs	r3, #0
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005844:	f10a 0a01 	add.w	sl, sl, #1
 8005848:	9304      	str	r3, [sp, #16]
 800584a:	9307      	str	r3, [sp, #28]
 800584c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005850:	931a      	str	r3, [sp, #104]	@ 0x68
 8005852:	4654      	mov	r4, sl
 8005854:	2205      	movs	r2, #5
 8005856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585a:	4853      	ldr	r0, [pc, #332]	@ (80059a8 <_vfiprintf_r+0x21c>)
 800585c:	f7fa fce0 	bl	8000220 <memchr>
 8005860:	9a04      	ldr	r2, [sp, #16]
 8005862:	b9d8      	cbnz	r0, 800589c <_vfiprintf_r+0x110>
 8005864:	06d1      	lsls	r1, r2, #27
 8005866:	bf44      	itt	mi
 8005868:	2320      	movmi	r3, #32
 800586a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800586e:	0713      	lsls	r3, r2, #28
 8005870:	bf44      	itt	mi
 8005872:	232b      	movmi	r3, #43	@ 0x2b
 8005874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005878:	f89a 3000 	ldrb.w	r3, [sl]
 800587c:	2b2a      	cmp	r3, #42	@ 0x2a
 800587e:	d015      	beq.n	80058ac <_vfiprintf_r+0x120>
 8005880:	9a07      	ldr	r2, [sp, #28]
 8005882:	4654      	mov	r4, sl
 8005884:	2000      	movs	r0, #0
 8005886:	f04f 0c0a 	mov.w	ip, #10
 800588a:	4621      	mov	r1, r4
 800588c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005890:	3b30      	subs	r3, #48	@ 0x30
 8005892:	2b09      	cmp	r3, #9
 8005894:	d94b      	bls.n	800592e <_vfiprintf_r+0x1a2>
 8005896:	b1b0      	cbz	r0, 80058c6 <_vfiprintf_r+0x13a>
 8005898:	9207      	str	r2, [sp, #28]
 800589a:	e014      	b.n	80058c6 <_vfiprintf_r+0x13a>
 800589c:	eba0 0308 	sub.w	r3, r0, r8
 80058a0:	fa09 f303 	lsl.w	r3, r9, r3
 80058a4:	4313      	orrs	r3, r2
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	46a2      	mov	sl, r4
 80058aa:	e7d2      	b.n	8005852 <_vfiprintf_r+0xc6>
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	1d19      	adds	r1, r3, #4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	9103      	str	r1, [sp, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bfbb      	ittet	lt
 80058b8:	425b      	neglt	r3, r3
 80058ba:	f042 0202 	orrlt.w	r2, r2, #2
 80058be:	9307      	strge	r3, [sp, #28]
 80058c0:	9307      	strlt	r3, [sp, #28]
 80058c2:	bfb8      	it	lt
 80058c4:	9204      	strlt	r2, [sp, #16]
 80058c6:	7823      	ldrb	r3, [r4, #0]
 80058c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80058ca:	d10a      	bne.n	80058e2 <_vfiprintf_r+0x156>
 80058cc:	7863      	ldrb	r3, [r4, #1]
 80058ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80058d0:	d132      	bne.n	8005938 <_vfiprintf_r+0x1ac>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	1d1a      	adds	r2, r3, #4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	9203      	str	r2, [sp, #12]
 80058da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058de:	3402      	adds	r4, #2
 80058e0:	9305      	str	r3, [sp, #20]
 80058e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80059b8 <_vfiprintf_r+0x22c>
 80058e6:	7821      	ldrb	r1, [r4, #0]
 80058e8:	2203      	movs	r2, #3
 80058ea:	4650      	mov	r0, sl
 80058ec:	f7fa fc98 	bl	8000220 <memchr>
 80058f0:	b138      	cbz	r0, 8005902 <_vfiprintf_r+0x176>
 80058f2:	9b04      	ldr	r3, [sp, #16]
 80058f4:	eba0 000a 	sub.w	r0, r0, sl
 80058f8:	2240      	movs	r2, #64	@ 0x40
 80058fa:	4082      	lsls	r2, r0
 80058fc:	4313      	orrs	r3, r2
 80058fe:	3401      	adds	r4, #1
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005906:	4829      	ldr	r0, [pc, #164]	@ (80059ac <_vfiprintf_r+0x220>)
 8005908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800590c:	2206      	movs	r2, #6
 800590e:	f7fa fc87 	bl	8000220 <memchr>
 8005912:	2800      	cmp	r0, #0
 8005914:	d03f      	beq.n	8005996 <_vfiprintf_r+0x20a>
 8005916:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <_vfiprintf_r+0x224>)
 8005918:	bb1b      	cbnz	r3, 8005962 <_vfiprintf_r+0x1d6>
 800591a:	9b03      	ldr	r3, [sp, #12]
 800591c:	3307      	adds	r3, #7
 800591e:	f023 0307 	bic.w	r3, r3, #7
 8005922:	3308      	adds	r3, #8
 8005924:	9303      	str	r3, [sp, #12]
 8005926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005928:	443b      	add	r3, r7
 800592a:	9309      	str	r3, [sp, #36]	@ 0x24
 800592c:	e76a      	b.n	8005804 <_vfiprintf_r+0x78>
 800592e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005932:	460c      	mov	r4, r1
 8005934:	2001      	movs	r0, #1
 8005936:	e7a8      	b.n	800588a <_vfiprintf_r+0xfe>
 8005938:	2300      	movs	r3, #0
 800593a:	3401      	adds	r4, #1
 800593c:	9305      	str	r3, [sp, #20]
 800593e:	4619      	mov	r1, r3
 8005940:	f04f 0c0a 	mov.w	ip, #10
 8005944:	4620      	mov	r0, r4
 8005946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800594a:	3a30      	subs	r2, #48	@ 0x30
 800594c:	2a09      	cmp	r2, #9
 800594e:	d903      	bls.n	8005958 <_vfiprintf_r+0x1cc>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0c6      	beq.n	80058e2 <_vfiprintf_r+0x156>
 8005954:	9105      	str	r1, [sp, #20]
 8005956:	e7c4      	b.n	80058e2 <_vfiprintf_r+0x156>
 8005958:	fb0c 2101 	mla	r1, ip, r1, r2
 800595c:	4604      	mov	r4, r0
 800595e:	2301      	movs	r3, #1
 8005960:	e7f0      	b.n	8005944 <_vfiprintf_r+0x1b8>
 8005962:	ab03      	add	r3, sp, #12
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	462a      	mov	r2, r5
 8005968:	4b12      	ldr	r3, [pc, #72]	@ (80059b4 <_vfiprintf_r+0x228>)
 800596a:	a904      	add	r1, sp, #16
 800596c:	4630      	mov	r0, r6
 800596e:	f3af 8000 	nop.w
 8005972:	4607      	mov	r7, r0
 8005974:	1c78      	adds	r0, r7, #1
 8005976:	d1d6      	bne.n	8005926 <_vfiprintf_r+0x19a>
 8005978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800597a:	07d9      	lsls	r1, r3, #31
 800597c:	d405      	bmi.n	800598a <_vfiprintf_r+0x1fe>
 800597e:	89ab      	ldrh	r3, [r5, #12]
 8005980:	059a      	lsls	r2, r3, #22
 8005982:	d402      	bmi.n	800598a <_vfiprintf_r+0x1fe>
 8005984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005986:	f7ff fc85 	bl	8005294 <__retarget_lock_release_recursive>
 800598a:	89ab      	ldrh	r3, [r5, #12]
 800598c:	065b      	lsls	r3, r3, #25
 800598e:	f53f af1f 	bmi.w	80057d0 <_vfiprintf_r+0x44>
 8005992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005994:	e71e      	b.n	80057d4 <_vfiprintf_r+0x48>
 8005996:	ab03      	add	r3, sp, #12
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	462a      	mov	r2, r5
 800599c:	4b05      	ldr	r3, [pc, #20]	@ (80059b4 <_vfiprintf_r+0x228>)
 800599e:	a904      	add	r1, sp, #16
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f879 	bl	8005a98 <_printf_i>
 80059a6:	e7e4      	b.n	8005972 <_vfiprintf_r+0x1e6>
 80059a8:	08006110 	.word	0x08006110
 80059ac:	0800611a 	.word	0x0800611a
 80059b0:	00000000 	.word	0x00000000
 80059b4:	08005767 	.word	0x08005767
 80059b8:	08006116 	.word	0x08006116

080059bc <_printf_common>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	4616      	mov	r6, r2
 80059c2:	4698      	mov	r8, r3
 80059c4:	688a      	ldr	r2, [r1, #8]
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bfb8      	it	lt
 80059d0:	4613      	movlt	r3, r2
 80059d2:	6033      	str	r3, [r6, #0]
 80059d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059d8:	4607      	mov	r7, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	b10a      	cbz	r2, 80059e2 <_printf_common+0x26>
 80059de:	3301      	adds	r3, #1
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	0699      	lsls	r1, r3, #26
 80059e6:	bf42      	ittt	mi
 80059e8:	6833      	ldrmi	r3, [r6, #0]
 80059ea:	3302      	addmi	r3, #2
 80059ec:	6033      	strmi	r3, [r6, #0]
 80059ee:	6825      	ldr	r5, [r4, #0]
 80059f0:	f015 0506 	ands.w	r5, r5, #6
 80059f4:	d106      	bne.n	8005a04 <_printf_common+0x48>
 80059f6:	f104 0a19 	add.w	sl, r4, #25
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	6832      	ldr	r2, [r6, #0]
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	42ab      	cmp	r3, r5
 8005a02:	dc26      	bgt.n	8005a52 <_printf_common+0x96>
 8005a04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	3b00      	subs	r3, #0
 8005a0c:	bf18      	it	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	0692      	lsls	r2, r2, #26
 8005a12:	d42b      	bmi.n	8005a6c <_printf_common+0xb0>
 8005a14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a18:	4641      	mov	r1, r8
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	47c8      	blx	r9
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d01e      	beq.n	8005a60 <_printf_common+0xa4>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	6922      	ldr	r2, [r4, #16]
 8005a26:	f003 0306 	and.w	r3, r3, #6
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	bf02      	ittt	eq
 8005a2e:	68e5      	ldreq	r5, [r4, #12]
 8005a30:	6833      	ldreq	r3, [r6, #0]
 8005a32:	1aed      	subeq	r5, r5, r3
 8005a34:	68a3      	ldr	r3, [r4, #8]
 8005a36:	bf0c      	ite	eq
 8005a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a3c:	2500      	movne	r5, #0
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bfc4      	itt	gt
 8005a42:	1a9b      	subgt	r3, r3, r2
 8005a44:	18ed      	addgt	r5, r5, r3
 8005a46:	2600      	movs	r6, #0
 8005a48:	341a      	adds	r4, #26
 8005a4a:	42b5      	cmp	r5, r6
 8005a4c:	d11a      	bne.n	8005a84 <_printf_common+0xc8>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e008      	b.n	8005a64 <_printf_common+0xa8>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4652      	mov	r2, sl
 8005a56:	4641      	mov	r1, r8
 8005a58:	4638      	mov	r0, r7
 8005a5a:	47c8      	blx	r9
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d103      	bne.n	8005a68 <_printf_common+0xac>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a68:	3501      	adds	r5, #1
 8005a6a:	e7c6      	b.n	80059fa <_printf_common+0x3e>
 8005a6c:	18e1      	adds	r1, r4, r3
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	2030      	movs	r0, #48	@ 0x30
 8005a72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a76:	4422      	add	r2, r4
 8005a78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a80:	3302      	adds	r3, #2
 8005a82:	e7c7      	b.n	8005a14 <_printf_common+0x58>
 8005a84:	2301      	movs	r3, #1
 8005a86:	4622      	mov	r2, r4
 8005a88:	4641      	mov	r1, r8
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c8      	blx	r9
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d0e6      	beq.n	8005a60 <_printf_common+0xa4>
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7d9      	b.n	8005a4a <_printf_common+0x8e>
	...

08005a98 <_printf_i>:
 8005a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	7e0f      	ldrb	r7, [r1, #24]
 8005a9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005aa0:	2f78      	cmp	r7, #120	@ 0x78
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	469a      	mov	sl, r3
 8005aaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aae:	d807      	bhi.n	8005ac0 <_printf_i+0x28>
 8005ab0:	2f62      	cmp	r7, #98	@ 0x62
 8005ab2:	d80a      	bhi.n	8005aca <_printf_i+0x32>
 8005ab4:	2f00      	cmp	r7, #0
 8005ab6:	f000 80d2 	beq.w	8005c5e <_printf_i+0x1c6>
 8005aba:	2f58      	cmp	r7, #88	@ 0x58
 8005abc:	f000 80b9 	beq.w	8005c32 <_printf_i+0x19a>
 8005ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ac8:	e03a      	b.n	8005b40 <_printf_i+0xa8>
 8005aca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ace:	2b15      	cmp	r3, #21
 8005ad0:	d8f6      	bhi.n	8005ac0 <_printf_i+0x28>
 8005ad2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ad8 <_printf_i+0x40>)
 8005ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ad8:	08005b31 	.word	0x08005b31
 8005adc:	08005b45 	.word	0x08005b45
 8005ae0:	08005ac1 	.word	0x08005ac1
 8005ae4:	08005ac1 	.word	0x08005ac1
 8005ae8:	08005ac1 	.word	0x08005ac1
 8005aec:	08005ac1 	.word	0x08005ac1
 8005af0:	08005b45 	.word	0x08005b45
 8005af4:	08005ac1 	.word	0x08005ac1
 8005af8:	08005ac1 	.word	0x08005ac1
 8005afc:	08005ac1 	.word	0x08005ac1
 8005b00:	08005ac1 	.word	0x08005ac1
 8005b04:	08005c45 	.word	0x08005c45
 8005b08:	08005b6f 	.word	0x08005b6f
 8005b0c:	08005bff 	.word	0x08005bff
 8005b10:	08005ac1 	.word	0x08005ac1
 8005b14:	08005ac1 	.word	0x08005ac1
 8005b18:	08005c67 	.word	0x08005c67
 8005b1c:	08005ac1 	.word	0x08005ac1
 8005b20:	08005b6f 	.word	0x08005b6f
 8005b24:	08005ac1 	.word	0x08005ac1
 8005b28:	08005ac1 	.word	0x08005ac1
 8005b2c:	08005c07 	.word	0x08005c07
 8005b30:	6833      	ldr	r3, [r6, #0]
 8005b32:	1d1a      	adds	r2, r3, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6032      	str	r2, [r6, #0]
 8005b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b40:	2301      	movs	r3, #1
 8005b42:	e09d      	b.n	8005c80 <_printf_i+0x1e8>
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	6820      	ldr	r0, [r4, #0]
 8005b48:	1d19      	adds	r1, r3, #4
 8005b4a:	6031      	str	r1, [r6, #0]
 8005b4c:	0606      	lsls	r6, r0, #24
 8005b4e:	d501      	bpl.n	8005b54 <_printf_i+0xbc>
 8005b50:	681d      	ldr	r5, [r3, #0]
 8005b52:	e003      	b.n	8005b5c <_printf_i+0xc4>
 8005b54:	0645      	lsls	r5, r0, #25
 8005b56:	d5fb      	bpl.n	8005b50 <_printf_i+0xb8>
 8005b58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b5c:	2d00      	cmp	r5, #0
 8005b5e:	da03      	bge.n	8005b68 <_printf_i+0xd0>
 8005b60:	232d      	movs	r3, #45	@ 0x2d
 8005b62:	426d      	negs	r5, r5
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b68:	4859      	ldr	r0, [pc, #356]	@ (8005cd0 <_printf_i+0x238>)
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e011      	b.n	8005b92 <_printf_i+0xfa>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	6833      	ldr	r3, [r6, #0]
 8005b72:	0608      	lsls	r0, r1, #24
 8005b74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b78:	d402      	bmi.n	8005b80 <_printf_i+0xe8>
 8005b7a:	0649      	lsls	r1, r1, #25
 8005b7c:	bf48      	it	mi
 8005b7e:	b2ad      	uxthmi	r5, r5
 8005b80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b82:	4853      	ldr	r0, [pc, #332]	@ (8005cd0 <_printf_i+0x238>)
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	bf14      	ite	ne
 8005b88:	230a      	movne	r3, #10
 8005b8a:	2308      	moveq	r3, #8
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b92:	6866      	ldr	r6, [r4, #4]
 8005b94:	60a6      	str	r6, [r4, #8]
 8005b96:	2e00      	cmp	r6, #0
 8005b98:	bfa2      	ittt	ge
 8005b9a:	6821      	ldrge	r1, [r4, #0]
 8005b9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ba0:	6021      	strge	r1, [r4, #0]
 8005ba2:	b90d      	cbnz	r5, 8005ba8 <_printf_i+0x110>
 8005ba4:	2e00      	cmp	r6, #0
 8005ba6:	d04b      	beq.n	8005c40 <_printf_i+0x1a8>
 8005ba8:	4616      	mov	r6, r2
 8005baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bae:	fb03 5711 	mls	r7, r3, r1, r5
 8005bb2:	5dc7      	ldrb	r7, [r0, r7]
 8005bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bb8:	462f      	mov	r7, r5
 8005bba:	42bb      	cmp	r3, r7
 8005bbc:	460d      	mov	r5, r1
 8005bbe:	d9f4      	bls.n	8005baa <_printf_i+0x112>
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d10b      	bne.n	8005bdc <_printf_i+0x144>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	07df      	lsls	r7, r3, #31
 8005bc8:	d508      	bpl.n	8005bdc <_printf_i+0x144>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	6861      	ldr	r1, [r4, #4]
 8005bce:	4299      	cmp	r1, r3
 8005bd0:	bfde      	ittt	le
 8005bd2:	2330      	movle	r3, #48	@ 0x30
 8005bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bdc:	1b92      	subs	r2, r2, r6
 8005bde:	6122      	str	r2, [r4, #16]
 8005be0:	f8cd a000 	str.w	sl, [sp]
 8005be4:	464b      	mov	r3, r9
 8005be6:	aa03      	add	r2, sp, #12
 8005be8:	4621      	mov	r1, r4
 8005bea:	4640      	mov	r0, r8
 8005bec:	f7ff fee6 	bl	80059bc <_printf_common>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d14a      	bne.n	8005c8a <_printf_i+0x1f2>
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	b004      	add	sp, #16
 8005bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f043 0320 	orr.w	r3, r3, #32
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	4833      	ldr	r0, [pc, #204]	@ (8005cd4 <_printf_i+0x23c>)
 8005c08:	2778      	movs	r7, #120	@ 0x78
 8005c0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	6831      	ldr	r1, [r6, #0]
 8005c12:	061f      	lsls	r7, r3, #24
 8005c14:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c18:	d402      	bmi.n	8005c20 <_printf_i+0x188>
 8005c1a:	065f      	lsls	r7, r3, #25
 8005c1c:	bf48      	it	mi
 8005c1e:	b2ad      	uxthmi	r5, r5
 8005c20:	6031      	str	r1, [r6, #0]
 8005c22:	07d9      	lsls	r1, r3, #31
 8005c24:	bf44      	itt	mi
 8005c26:	f043 0320 	orrmi.w	r3, r3, #32
 8005c2a:	6023      	strmi	r3, [r4, #0]
 8005c2c:	b11d      	cbz	r5, 8005c36 <_printf_i+0x19e>
 8005c2e:	2310      	movs	r3, #16
 8005c30:	e7ac      	b.n	8005b8c <_printf_i+0xf4>
 8005c32:	4827      	ldr	r0, [pc, #156]	@ (8005cd0 <_printf_i+0x238>)
 8005c34:	e7e9      	b.n	8005c0a <_printf_i+0x172>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	f023 0320 	bic.w	r3, r3, #32
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	e7f6      	b.n	8005c2e <_printf_i+0x196>
 8005c40:	4616      	mov	r6, r2
 8005c42:	e7bd      	b.n	8005bc0 <_printf_i+0x128>
 8005c44:	6833      	ldr	r3, [r6, #0]
 8005c46:	6825      	ldr	r5, [r4, #0]
 8005c48:	6961      	ldr	r1, [r4, #20]
 8005c4a:	1d18      	adds	r0, r3, #4
 8005c4c:	6030      	str	r0, [r6, #0]
 8005c4e:	062e      	lsls	r6, r5, #24
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	d501      	bpl.n	8005c58 <_printf_i+0x1c0>
 8005c54:	6019      	str	r1, [r3, #0]
 8005c56:	e002      	b.n	8005c5e <_printf_i+0x1c6>
 8005c58:	0668      	lsls	r0, r5, #25
 8005c5a:	d5fb      	bpl.n	8005c54 <_printf_i+0x1bc>
 8005c5c:	8019      	strh	r1, [r3, #0]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	4616      	mov	r6, r2
 8005c64:	e7bc      	b.n	8005be0 <_printf_i+0x148>
 8005c66:	6833      	ldr	r3, [r6, #0]
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	6032      	str	r2, [r6, #0]
 8005c6c:	681e      	ldr	r6, [r3, #0]
 8005c6e:	6862      	ldr	r2, [r4, #4]
 8005c70:	2100      	movs	r1, #0
 8005c72:	4630      	mov	r0, r6
 8005c74:	f7fa fad4 	bl	8000220 <memchr>
 8005c78:	b108      	cbz	r0, 8005c7e <_printf_i+0x1e6>
 8005c7a:	1b80      	subs	r0, r0, r6
 8005c7c:	6060      	str	r0, [r4, #4]
 8005c7e:	6863      	ldr	r3, [r4, #4]
 8005c80:	6123      	str	r3, [r4, #16]
 8005c82:	2300      	movs	r3, #0
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c88:	e7aa      	b.n	8005be0 <_printf_i+0x148>
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4640      	mov	r0, r8
 8005c92:	47d0      	blx	sl
 8005c94:	3001      	adds	r0, #1
 8005c96:	d0ad      	beq.n	8005bf4 <_printf_i+0x15c>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	079b      	lsls	r3, r3, #30
 8005c9c:	d413      	bmi.n	8005cc6 <_printf_i+0x22e>
 8005c9e:	68e0      	ldr	r0, [r4, #12]
 8005ca0:	9b03      	ldr	r3, [sp, #12]
 8005ca2:	4298      	cmp	r0, r3
 8005ca4:	bfb8      	it	lt
 8005ca6:	4618      	movlt	r0, r3
 8005ca8:	e7a6      	b.n	8005bf8 <_printf_i+0x160>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4632      	mov	r2, r6
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	47d0      	blx	sl
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d09d      	beq.n	8005bf4 <_printf_i+0x15c>
 8005cb8:	3501      	adds	r5, #1
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	9903      	ldr	r1, [sp, #12]
 8005cbe:	1a5b      	subs	r3, r3, r1
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dcf2      	bgt.n	8005caa <_printf_i+0x212>
 8005cc4:	e7eb      	b.n	8005c9e <_printf_i+0x206>
 8005cc6:	2500      	movs	r5, #0
 8005cc8:	f104 0619 	add.w	r6, r4, #25
 8005ccc:	e7f5      	b.n	8005cba <_printf_i+0x222>
 8005cce:	bf00      	nop
 8005cd0:	08006121 	.word	0x08006121
 8005cd4:	08006132 	.word	0x08006132

08005cd8 <__sflush_r>:
 8005cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce0:	0716      	lsls	r6, r2, #28
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	d454      	bmi.n	8005d92 <__sflush_r+0xba>
 8005ce8:	684b      	ldr	r3, [r1, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	dc02      	bgt.n	8005cf4 <__sflush_r+0x1c>
 8005cee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dd48      	ble.n	8005d86 <__sflush_r+0xae>
 8005cf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d045      	beq.n	8005d86 <__sflush_r+0xae>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d00:	682f      	ldr	r7, [r5, #0]
 8005d02:	6a21      	ldr	r1, [r4, #32]
 8005d04:	602b      	str	r3, [r5, #0]
 8005d06:	d030      	beq.n	8005d6a <__sflush_r+0x92>
 8005d08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	0759      	lsls	r1, r3, #29
 8005d0e:	d505      	bpl.n	8005d1c <__sflush_r+0x44>
 8005d10:	6863      	ldr	r3, [r4, #4]
 8005d12:	1ad2      	subs	r2, r2, r3
 8005d14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d16:	b10b      	cbz	r3, 8005d1c <__sflush_r+0x44>
 8005d18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d20:	6a21      	ldr	r1, [r4, #32]
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b0      	blx	r6
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	d106      	bne.n	8005d3a <__sflush_r+0x62>
 8005d2c:	6829      	ldr	r1, [r5, #0]
 8005d2e:	291d      	cmp	r1, #29
 8005d30:	d82b      	bhi.n	8005d8a <__sflush_r+0xb2>
 8005d32:	4a2a      	ldr	r2, [pc, #168]	@ (8005ddc <__sflush_r+0x104>)
 8005d34:	410a      	asrs	r2, r1
 8005d36:	07d6      	lsls	r6, r2, #31
 8005d38:	d427      	bmi.n	8005d8a <__sflush_r+0xb2>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	6062      	str	r2, [r4, #4]
 8005d3e:	04d9      	lsls	r1, r3, #19
 8005d40:	6922      	ldr	r2, [r4, #16]
 8005d42:	6022      	str	r2, [r4, #0]
 8005d44:	d504      	bpl.n	8005d50 <__sflush_r+0x78>
 8005d46:	1c42      	adds	r2, r0, #1
 8005d48:	d101      	bne.n	8005d4e <__sflush_r+0x76>
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	b903      	cbnz	r3, 8005d50 <__sflush_r+0x78>
 8005d4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d52:	602f      	str	r7, [r5, #0]
 8005d54:	b1b9      	cbz	r1, 8005d86 <__sflush_r+0xae>
 8005d56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d5a:	4299      	cmp	r1, r3
 8005d5c:	d002      	beq.n	8005d64 <__sflush_r+0x8c>
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7ff fa9a 	bl	8005298 <_free_r>
 8005d64:	2300      	movs	r3, #0
 8005d66:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d68:	e00d      	b.n	8005d86 <__sflush_r+0xae>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b0      	blx	r6
 8005d70:	4602      	mov	r2, r0
 8005d72:	1c50      	adds	r0, r2, #1
 8005d74:	d1c9      	bne.n	8005d0a <__sflush_r+0x32>
 8005d76:	682b      	ldr	r3, [r5, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0c6      	beq.n	8005d0a <__sflush_r+0x32>
 8005d7c:	2b1d      	cmp	r3, #29
 8005d7e:	d001      	beq.n	8005d84 <__sflush_r+0xac>
 8005d80:	2b16      	cmp	r3, #22
 8005d82:	d11e      	bne.n	8005dc2 <__sflush_r+0xea>
 8005d84:	602f      	str	r7, [r5, #0]
 8005d86:	2000      	movs	r0, #0
 8005d88:	e022      	b.n	8005dd0 <__sflush_r+0xf8>
 8005d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d8e:	b21b      	sxth	r3, r3
 8005d90:	e01b      	b.n	8005dca <__sflush_r+0xf2>
 8005d92:	690f      	ldr	r7, [r1, #16]
 8005d94:	2f00      	cmp	r7, #0
 8005d96:	d0f6      	beq.n	8005d86 <__sflush_r+0xae>
 8005d98:	0793      	lsls	r3, r2, #30
 8005d9a:	680e      	ldr	r6, [r1, #0]
 8005d9c:	bf08      	it	eq
 8005d9e:	694b      	ldreq	r3, [r1, #20]
 8005da0:	600f      	str	r7, [r1, #0]
 8005da2:	bf18      	it	ne
 8005da4:	2300      	movne	r3, #0
 8005da6:	eba6 0807 	sub.w	r8, r6, r7
 8005daa:	608b      	str	r3, [r1, #8]
 8005dac:	f1b8 0f00 	cmp.w	r8, #0
 8005db0:	dde9      	ble.n	8005d86 <__sflush_r+0xae>
 8005db2:	6a21      	ldr	r1, [r4, #32]
 8005db4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005db6:	4643      	mov	r3, r8
 8005db8:	463a      	mov	r2, r7
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b0      	blx	r6
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	dc08      	bgt.n	8005dd4 <__sflush_r+0xfc>
 8005dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd4:	4407      	add	r7, r0
 8005dd6:	eba8 0800 	sub.w	r8, r8, r0
 8005dda:	e7e7      	b.n	8005dac <__sflush_r+0xd4>
 8005ddc:	dfbffffe 	.word	0xdfbffffe

08005de0 <_fflush_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	690b      	ldr	r3, [r1, #16]
 8005de4:	4605      	mov	r5, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	b913      	cbnz	r3, 8005df0 <_fflush_r+0x10>
 8005dea:	2500      	movs	r5, #0
 8005dec:	4628      	mov	r0, r5
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	b118      	cbz	r0, 8005dfa <_fflush_r+0x1a>
 8005df2:	6a03      	ldr	r3, [r0, #32]
 8005df4:	b90b      	cbnz	r3, 8005dfa <_fflush_r+0x1a>
 8005df6:	f7ff f835 	bl	8004e64 <__sinit>
 8005dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f3      	beq.n	8005dea <_fflush_r+0xa>
 8005e02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e04:	07d0      	lsls	r0, r2, #31
 8005e06:	d404      	bmi.n	8005e12 <_fflush_r+0x32>
 8005e08:	0599      	lsls	r1, r3, #22
 8005e0a:	d402      	bmi.n	8005e12 <_fflush_r+0x32>
 8005e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e0e:	f7ff fa40 	bl	8005292 <__retarget_lock_acquire_recursive>
 8005e12:	4628      	mov	r0, r5
 8005e14:	4621      	mov	r1, r4
 8005e16:	f7ff ff5f 	bl	8005cd8 <__sflush_r>
 8005e1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e1c:	07da      	lsls	r2, r3, #31
 8005e1e:	4605      	mov	r5, r0
 8005e20:	d4e4      	bmi.n	8005dec <_fflush_r+0xc>
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	059b      	lsls	r3, r3, #22
 8005e26:	d4e1      	bmi.n	8005dec <_fflush_r+0xc>
 8005e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e2a:	f7ff fa33 	bl	8005294 <__retarget_lock_release_recursive>
 8005e2e:	e7dd      	b.n	8005dec <_fflush_r+0xc>

08005e30 <__swhatbuf_r>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	460c      	mov	r4, r1
 8005e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	b096      	sub	sp, #88	@ 0x58
 8005e3c:	4615      	mov	r5, r2
 8005e3e:	461e      	mov	r6, r3
 8005e40:	da0d      	bge.n	8005e5e <__swhatbuf_r+0x2e>
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e48:	f04f 0100 	mov.w	r1, #0
 8005e4c:	bf14      	ite	ne
 8005e4e:	2340      	movne	r3, #64	@ 0x40
 8005e50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e54:	2000      	movs	r0, #0
 8005e56:	6031      	str	r1, [r6, #0]
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	b016      	add	sp, #88	@ 0x58
 8005e5c:	bd70      	pop	{r4, r5, r6, pc}
 8005e5e:	466a      	mov	r2, sp
 8005e60:	f000 f862 	bl	8005f28 <_fstat_r>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	dbec      	blt.n	8005e42 <__swhatbuf_r+0x12>
 8005e68:	9901      	ldr	r1, [sp, #4]
 8005e6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e72:	4259      	negs	r1, r3
 8005e74:	4159      	adcs	r1, r3
 8005e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e7a:	e7eb      	b.n	8005e54 <__swhatbuf_r+0x24>

08005e7c <__smakebuf_r>:
 8005e7c:	898b      	ldrh	r3, [r1, #12]
 8005e7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e80:	079d      	lsls	r5, r3, #30
 8005e82:	4606      	mov	r6, r0
 8005e84:	460c      	mov	r4, r1
 8005e86:	d507      	bpl.n	8005e98 <__smakebuf_r+0x1c>
 8005e88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	6123      	str	r3, [r4, #16]
 8005e90:	2301      	movs	r3, #1
 8005e92:	6163      	str	r3, [r4, #20]
 8005e94:	b003      	add	sp, #12
 8005e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e98:	ab01      	add	r3, sp, #4
 8005e9a:	466a      	mov	r2, sp
 8005e9c:	f7ff ffc8 	bl	8005e30 <__swhatbuf_r>
 8005ea0:	9f00      	ldr	r7, [sp, #0]
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f7ff fa62 	bl	8005370 <_malloc_r>
 8005eac:	b948      	cbnz	r0, 8005ec2 <__smakebuf_r+0x46>
 8005eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb2:	059a      	lsls	r2, r3, #22
 8005eb4:	d4ee      	bmi.n	8005e94 <__smakebuf_r+0x18>
 8005eb6:	f023 0303 	bic.w	r3, r3, #3
 8005eba:	f043 0302 	orr.w	r3, r3, #2
 8005ebe:	81a3      	strh	r3, [r4, #12]
 8005ec0:	e7e2      	b.n	8005e88 <__smakebuf_r+0xc>
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	6020      	str	r0, [r4, #0]
 8005ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eca:	81a3      	strh	r3, [r4, #12]
 8005ecc:	9b01      	ldr	r3, [sp, #4]
 8005ece:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ed2:	b15b      	cbz	r3, 8005eec <__smakebuf_r+0x70>
 8005ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 f837 	bl	8005f4c <_isatty_r>
 8005ede:	b128      	cbz	r0, 8005eec <__smakebuf_r+0x70>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	f023 0303 	bic.w	r3, r3, #3
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	431d      	orrs	r5, r3
 8005ef0:	81a5      	strh	r5, [r4, #12]
 8005ef2:	e7cf      	b.n	8005e94 <__smakebuf_r+0x18>

08005ef4 <memmove>:
 8005ef4:	4288      	cmp	r0, r1
 8005ef6:	b510      	push	{r4, lr}
 8005ef8:	eb01 0402 	add.w	r4, r1, r2
 8005efc:	d902      	bls.n	8005f04 <memmove+0x10>
 8005efe:	4284      	cmp	r4, r0
 8005f00:	4623      	mov	r3, r4
 8005f02:	d807      	bhi.n	8005f14 <memmove+0x20>
 8005f04:	1e43      	subs	r3, r0, #1
 8005f06:	42a1      	cmp	r1, r4
 8005f08:	d008      	beq.n	8005f1c <memmove+0x28>
 8005f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f12:	e7f8      	b.n	8005f06 <memmove+0x12>
 8005f14:	4402      	add	r2, r0
 8005f16:	4601      	mov	r1, r0
 8005f18:	428a      	cmp	r2, r1
 8005f1a:	d100      	bne.n	8005f1e <memmove+0x2a>
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f26:	e7f7      	b.n	8005f18 <memmove+0x24>

08005f28 <_fstat_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4d07      	ldr	r5, [pc, #28]	@ (8005f48 <_fstat_r+0x20>)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	4611      	mov	r1, r2
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	f7fb fddc 	bl	8001af2 <_fstat>
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	d102      	bne.n	8005f44 <_fstat_r+0x1c>
 8005f3e:	682b      	ldr	r3, [r5, #0]
 8005f40:	b103      	cbz	r3, 8005f44 <_fstat_r+0x1c>
 8005f42:	6023      	str	r3, [r4, #0]
 8005f44:	bd38      	pop	{r3, r4, r5, pc}
 8005f46:	bf00      	nop
 8005f48:	20000924 	.word	0x20000924

08005f4c <_isatty_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d06      	ldr	r5, [pc, #24]	@ (8005f68 <_isatty_r+0x1c>)
 8005f50:	2300      	movs	r3, #0
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	f7fb fddb 	bl	8001b12 <_isatty>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_isatty_r+0x1a>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_isatty_r+0x1a>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	20000924 	.word	0x20000924

08005f6c <_sbrk_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d06      	ldr	r5, [pc, #24]	@ (8005f88 <_sbrk_r+0x1c>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	f7fb fde4 	bl	8001b44 <_sbrk>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d102      	bne.n	8005f86 <_sbrk_r+0x1a>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	b103      	cbz	r3, 8005f86 <_sbrk_r+0x1a>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	20000924 	.word	0x20000924

08005f8c <memcpy>:
 8005f8c:	440a      	add	r2, r1
 8005f8e:	4291      	cmp	r1, r2
 8005f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f94:	d100      	bne.n	8005f98 <memcpy+0xc>
 8005f96:	4770      	bx	lr
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fa2:	4291      	cmp	r1, r2
 8005fa4:	d1f9      	bne.n	8005f9a <memcpy+0xe>
 8005fa6:	bd10      	pop	{r4, pc}

08005fa8 <_realloc_r>:
 8005fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fac:	4680      	mov	r8, r0
 8005fae:	4615      	mov	r5, r2
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	b921      	cbnz	r1, 8005fbe <_realloc_r+0x16>
 8005fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb8:	4611      	mov	r1, r2
 8005fba:	f7ff b9d9 	b.w	8005370 <_malloc_r>
 8005fbe:	b92a      	cbnz	r2, 8005fcc <_realloc_r+0x24>
 8005fc0:	f7ff f96a 	bl	8005298 <_free_r>
 8005fc4:	2400      	movs	r4, #0
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fcc:	f000 f81a 	bl	8006004 <_malloc_usable_size_r>
 8005fd0:	4285      	cmp	r5, r0
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	d802      	bhi.n	8005fdc <_realloc_r+0x34>
 8005fd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005fda:	d8f4      	bhi.n	8005fc6 <_realloc_r+0x1e>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f7ff f9c6 	bl	8005370 <_malloc_r>
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d0ec      	beq.n	8005fc4 <_realloc_r+0x1c>
 8005fea:	42b5      	cmp	r5, r6
 8005fec:	462a      	mov	r2, r5
 8005fee:	4621      	mov	r1, r4
 8005ff0:	bf28      	it	cs
 8005ff2:	4632      	movcs	r2, r6
 8005ff4:	f7ff ffca 	bl	8005f8c <memcpy>
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	f7ff f94c 	bl	8005298 <_free_r>
 8006000:	463c      	mov	r4, r7
 8006002:	e7e0      	b.n	8005fc6 <_realloc_r+0x1e>

08006004 <_malloc_usable_size_r>:
 8006004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006008:	1f18      	subs	r0, r3, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfbc      	itt	lt
 800600e:	580b      	ldrlt	r3, [r1, r0]
 8006010:	18c0      	addlt	r0, r0, r3
 8006012:	4770      	bx	lr

08006014 <_init>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr

08006020 <_fini>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr
