
tp6_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08007ce0  08007ce0  00008ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008158  08008158  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008158  08008158  00009158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008160  08008160  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008160  08008160  00009160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008164  08008164  00009164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008168  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008cc  200001dc  08008344  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa8  08008344  0000aaa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010339  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fa  00000000  00000000  0001a545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0001cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e1  00000000  00000000  0001d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed34  00000000  00000000  0001e229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010873  00000000  00000000  0003cf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdb52  00000000  00000000  0004d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b322  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004670  00000000  00000000  0010b368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0010f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007cc4 	.word	0x08007cc4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08007cc4 	.word	0x08007cc4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <set_rapport_cyclique_et_sens>:
 * @param  nouvelle_vitesse : un floatant compris entre 0 et 1
 * @param  nouveau_sens : sens de rotation des roues
 * @retval None
 */
void set_rapport_cyclique_et_sens(float nouveau_rapport_cyclique, bool nouveau_sens)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	@ 0x38
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f32:	4603      	mov	r3, r0
 8000f34:	72fb      	strb	r3, [r7, #11]
	uint8_t octet_nouveau_sens;
	uint8_t txData[2];
	FDCAN_TxHeaderTypeDef header;

	// On gère les cas limites
	if (nouveau_rapport_cyclique > 1)
 8000f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	dd04      	ble.n	8000f52 <set_rapport_cyclique_et_sens+0x2a>
		rapport_cyclique = 1;
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <set_rapport_cyclique_et_sens+0xb8>)
 8000f4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e00e      	b.n	8000f70 <set_rapport_cyclique_et_sens+0x48>
	else if (nouveau_rapport_cyclique < 0)
 8000f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5e:	d504      	bpl.n	8000f6a <set_rapport_cyclique_et_sens+0x42>
		rapport_cyclique = 0;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <set_rapport_cyclique_et_sens+0xb8>)
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e002      	b.n	8000f70 <set_rapport_cyclique_et_sens+0x48>
	else
		rapport_cyclique = nouveau_rapport_cyclique;
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <set_rapport_cyclique_et_sens+0xb8>)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6013      	str	r3, [r2, #0]

	octet_nouveau_rapport_cyclique = (uint8_t) (rapport_cyclique * 100);
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <set_rapport_cyclique_et_sens+0xb8>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000fe4 <set_rapport_cyclique_et_sens+0xbc>
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f82:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f86:	793b      	ldrb	r3, [r7, #4]
 8000f88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	octet_nouveau_sens     =  nouveau_sens;
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	// Premier octet la vitesse * 100
	txData[0] = octet_nouveau_rapport_cyclique;
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f96:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	// Second octet le sens de rotation
	txData[1] = octet_nouveau_sens;
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	/******************* NE PAS TOUCHER **************************************/
	header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
	header.BitRateSwitch = FDCAN_BRS_OFF;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
	header.FDFormat = FDCAN_CLASSIC_CAN;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	header.MessageMarker = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
	/*************************************************************************/

	header.Identifier = CAN_ID_MOTEUR; // Set your CAN identifier
 8000fb6:	f240 6302 	movw	r3, #1538	@ 0x602
 8000fba:	613b      	str	r3, [r7, #16]
	header.IdType = FDCAN_STANDARD_ID; // Standard ID
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
	header.TxFrameType = FDCAN_DATA_FRAME; // Data frame
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
	header.DataLength = 2; // Data length
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61fb      	str	r3, [r7, #28]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header, txData);
 8000fc8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <set_rapport_cyclique_et_sens+0xc0>)
 8000fd4:	f001 faf2 	bl	80025bc <HAL_FDCAN_AddMessageToTxFifoQ>

	// TODO : Mettre une tempo
}
 8000fd8:	bf00      	nop
 8000fda:	3738      	adds	r7, #56	@ 0x38
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200001f8 	.word	0x200001f8
 8000fe4:	42c80000 	.word	0x42c80000
 8000fe8:	200001fc 	.word	0x200001fc
 8000fec:	00000000 	.word	0x00000000

08000ff0 <set_angle>:
{
	set_rapport_cyclique_et_sens(rapport_cyclique, 1);
}

void set_angle(float nouvelle_angle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	@ 0x38
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t cmd_angle;
	FDCAN_TxHeaderTypeDef header;

	//Fixer les limites de rotation du robot

	if (nouvelle_angle > -80.8)
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff facc 	bl	8000598 <__aeabi_f2d>
 8001000:	a33d      	add	r3, pc, #244	@ (adr r3, 80010f8 <set_angle+0x108>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff fdaf 	bl	8000b68 <__aeabi_dcmpgt>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <set_angle+0x28>
		angle = -80.8;
 8001010:	4b35      	ldr	r3, [pc, #212]	@ (80010e8 <set_angle+0xf8>)
 8001012:	4a36      	ldr	r2, [pc, #216]	@ (80010ec <set_angle+0xfc>)
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e011      	b.n	800103c <set_angle+0x4c>
	else if (nouvelle_angle < -120.8)
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fabd 	bl	8000598 <__aeabi_f2d>
 800101e:	a32e      	add	r3, pc, #184	@ (adr r3, 80010d8 <set_angle+0xe8>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fd82 	bl	8000b2c <__aeabi_dcmplt>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <set_angle+0x46>
		angle = -120.8;
 800102e:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <set_angle+0xf8>)
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <set_angle+0x100>)
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e002      	b.n	800103c <set_angle+0x4c>
	else
		angle = nouvelle_angle;
 8001036:	4a2c      	ldr	r2, [pc, #176]	@ (80010e8 <set_angle+0xf8>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]


	/******************* NE PAS TOUCHER **************************************/
	header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
	header.BitRateSwitch = FDCAN_BRS_OFF;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
	header.FDFormat = FDCAN_CLASSIC_CAN;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
	header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001048:	2300      	movs	r3, #0
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.MessageMarker = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/*************************************************************************/


	header.Identifier = CAN_ID_HERKULEX; // Set your CAN identifier
 8001050:	f240 6301 	movw	r3, #1537	@ 0x601
 8001054:	60fb      	str	r3, [r7, #12]
	header.IdType = FDCAN_STANDARD_ID; // Standard ID
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
	header.TxFrameType = FDCAN_DATA_FRAME; // Data frame
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
	header.DataLength = 2; // Data length
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]

	cmd_angle          = 0x200+(angle/0.35);
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <set_angle+0xf8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa96 	bl	8000598 <__aeabi_f2d>
 800106c:	a31c      	add	r3, pc, #112	@ (adr r3, 80010e0 <set_angle+0xf0>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fc13 	bl	800089c <__aeabi_ddiv>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001086:	f7ff f929 	bl	80002dc <__adddf3>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fdb1 	bl	8000bf8 <__aeabi_d2uiz>
 8001096:	4603      	mov	r3, r0
 8001098:	86fb      	strh	r3, [r7, #54]	@ 0x36

	octet_faible_angle = (uint8_t) cmd_angle;
 800109a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800109c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	octet_fort_angle   = (cmd_angle >> 8) & 0x00FF;
 80010a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	txData[0] = octet_fort_angle;
 80010aa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80010ae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txData[1] = octet_faible_angle;
 80010b2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80010b6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header, txData);
 80010ba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <set_angle+0x104>)
 80010c6:	f001 fa79 	bl	80025bc <HAL_FDCAN_AddMessageToTxFifoQ>

	// TODO : Mettre une tempo
}
 80010ca:	bf00      	nop
 80010cc:	3738      	adds	r7, #56	@ 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	33333333 	.word	0x33333333
 80010dc:	c05e3333 	.word	0xc05e3333
 80010e0:	66666666 	.word	0x66666666
 80010e4:	3fd66666 	.word	0x3fd66666
 80010e8:	20000000 	.word	0x20000000
 80010ec:	c2a1999a 	.word	0xc2a1999a
 80010f0:	c2f1999a 	.word	0xc2f1999a
 80010f4:	200001fc 	.word	0x200001fc
 80010f8:	33333333 	.word	0x33333333
 80010fc:	c0543333 	.word	0xc0543333

08001100 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001106:	4a20      	ldr	r2, [pc, #128]	@ (8001188 <MX_FDCAN1_Init+0x88>)
 8001108:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 800111e:	2200      	movs	r2, #0
 8001120:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001124:	2200      	movs	r2, #0
 8001126:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 800112a:	2200      	movs	r2, #0
 800112c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001130:	2211      	movs	r2, #17
 8001132:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001136:	2201      	movs	r2, #1
 8001138:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800113a:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 800113c:	2207      	movs	r2, #7
 800113e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001142:	2202      	movs	r2, #2
 8001144:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001148:	2201      	movs	r2, #1
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 800114e:	2201      	movs	r2, #1
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001154:	2201      	movs	r2, #1
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 800115a:	2201      	movs	r2, #1
 800115c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001160:	2200      	movs	r2, #0
 8001162:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001166:	2200      	movs	r2, #0
 8001168:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_FDCAN1_Init+0x84>)
 8001172:	f001 f8a1 	bl	80022b8 <HAL_FDCAN_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800117c:	f000 fcf0 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001fc 	.word	0x200001fc
 8001188:	40006400 	.word	0x40006400

0800118c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09a      	sub	sp, #104	@ 0x68
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2244      	movs	r2, #68	@ 0x44
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fd51 	bl	8005c54 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a24      	ldr	r2, [pc, #144]	@ (8001248 <HAL_FDCAN_MspInit+0xbc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d141      	bne.n	8001240 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80011c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011c6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fe03 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011d8:	f000 fcc2 	bl	8001b60 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <HAL_FDCAN_MspInit+0xc0>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e0:	4a1a      	ldr	r2, [pc, #104]	@ (800124c <HAL_FDCAN_MspInit+0xc0>)
 80011e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_FDCAN_MspInit+0xc0>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_FDCAN_MspInit+0xc0>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	4a14      	ldr	r2, [pc, #80]	@ (800124c <HAL_FDCAN_MspInit+0xc0>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_FDCAN_MspInit+0xc0>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800120c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001210:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800121e:	2309      	movs	r3, #9
 8001220:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122c:	f001 fe58 	bl	8002ee0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2015      	movs	r0, #21
 8001236:	f001 f80a 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800123a:	2015      	movs	r0, #21
 800123c:	f001 f821 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001240:	bf00      	nop
 8001242:	3768      	adds	r7, #104	@ 0x68
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40006400 	.word	0x40006400
 800124c:	40021000 	.word	0x40021000

08001250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <MX_GPIO_Init+0x78>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <MX_GPIO_Init+0x78>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_GPIO_Init+0x78>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_GPIO_Init+0x78>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <MX_GPIO_Init+0x78>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_GPIO_Init+0x78>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800129c:	480b      	ldr	r0, [pc, #44]	@ (80012cc <MX_GPIO_Init+0x7c>)
 800129e:	f001 ffa1 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_GPIO_Init+0x7c>)
 80012bc:	f001 fe10 	bl	8002ee0 <HAL_GPIO_Init>

}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000400 	.word	0x48000400

080012d0 <__io_putchar>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2201      	movs	r2, #1
 80012e0:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <__io_putchar+0x20>)
 80012e2:	f002 ffb9 	bl	8004258 <HAL_UART_Transmit>
	return ch;
 80012e6:	687b      	ldr	r3, [r7, #4]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200008c4 	.word	0x200008c4

080012f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012f8:	f000 fe3b 	bl	8001f72 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012fc:	f000 f9d0 	bl	80016a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001300:	f7ff ffa6 	bl	8001250 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001304:	f000 fd68 	bl	8001dd8 <MX_USART2_UART_Init>
	MX_FDCAN1_Init();
 8001308:	f7ff fefa 	bl	8001100 <MX_FDCAN1_Init>
	/* USER CODE BEGIN 2 */

	printf("En vie\n");
 800130c:	48a7      	ldr	r0, [pc, #668]	@ (80015ac <main+0x2b8>)
 800130e:	f004 fba1 	bl	8005a54 <puts>

	HAL_FDCAN_Start(&hfdcan1);
 8001312:	48a7      	ldr	r0, [pc, #668]	@ (80015b0 <main+0x2bc>)
 8001314:	f001 f92a 	bl	800256c <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	48a4      	ldr	r0, [pc, #656]	@ (80015b0 <main+0x2bc>)
 800131e:	f001 fa99 	bl	8002854 <HAL_FDCAN_ActivateNotification>
	LCD_clear();
 8001322:	f000 fb33 	bl	800198c <LCD_clear>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	set_angle(-98);
 8001326:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 80015b4 <main+0x2c0>
 800132a:	f7ff fe61 	bl	8000ff0 <set_angle>
	set_angle(-120);
 800132e:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 80015b8 <main+0x2c4>
 8001332:	f7ff fe5d 	bl	8000ff0 <set_angle>
	while (1) {

		JOG_read();
 8001336:	f000 fa9d 	bl	8001874 <JOG_read>
		COD_read();
 800133a:	f000 fabb 	bl	80018b4 <COD_read>
		automate_decode_IHM();
 800133e:	f000 fa2f 	bl	80017a0 <automate_decode_IHM>

		switch (etat_actuelle) {
 8001342:	4b9e      	ldr	r3, [pc, #632]	@ (80015bc <main+0x2c8>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b04      	cmp	r3, #4
 8001348:	f200 8185 	bhi.w	8001656 <main+0x362>
 800134c:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <main+0x60>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001369 	.word	0x08001369
 8001358:	080013cd 	.word	0x080013cd
 800135c:	08001569 	.word	0x08001569
 8001360:	0800149d 	.word	0x0800149d
 8001364:	08001605 	.word	0x08001605
		case TEST_CHOIX:
			HAL_Delay(10);
 8001368:	200a      	movs	r0, #10
 800136a:	f000 fe73 	bl	8002054 <HAL_Delay>
			LCD_gotoxy(0, 0);
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f000 faed 	bl	8001950 <LCD_gotoxy>
			LCD_printf("Test a choisir");
 8001376:	4892      	ldr	r0, [pc, #584]	@ (80015c0 <main+0x2cc>)
 8001378:	f000 fb46 	bl	8001a08 <LCD_printf>
			LCD_gotoxy(0, 1);
 800137c:	2101      	movs	r1, #1
 800137e:	2000      	movs	r0, #0
 8001380:	f000 fae6 	bl	8001950 <LCD_gotoxy>
			LCD_printf("             ");
 8001384:	488f      	ldr	r0, [pc, #572]	@ (80015c4 <main+0x2d0>)
 8001386:	f000 fb3f 	bl	8001a08 <LCD_printf>

			if (jog_value == 8) {
 800138a:	4b8f      	ldr	r3, [pc, #572]	@ (80015c8 <main+0x2d4>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b08      	cmp	r3, #8
 8001390:	d103      	bne.n	800139a <main+0xa6>
				etat_actuelle = TEST_VITESSE;
 8001392:	4b8a      	ldr	r3, [pc, #552]	@ (80015bc <main+0x2c8>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
			} else if (jog_value == 1) {
				etat_actuelle = TEST_LIDAR;
			} else if (jog_value == 2) {
				etat_actuelle = TEST_BLUETOOTH;
			}
			break;
 8001398:	e15f      	b.n	800165a <main+0x366>
			} else if (jog_value == 16) {
 800139a:	4b8b      	ldr	r3, [pc, #556]	@ (80015c8 <main+0x2d4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d103      	bne.n	80013aa <main+0xb6>
				etat_actuelle = TEST_HERKULEX;
 80013a2:	4b86      	ldr	r3, [pc, #536]	@ (80015bc <main+0x2c8>)
 80013a4:	2203      	movs	r2, #3
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	e157      	b.n	800165a <main+0x366>
			} else if (jog_value == 1) {
 80013aa:	4b87      	ldr	r3, [pc, #540]	@ (80015c8 <main+0x2d4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d103      	bne.n	80013ba <main+0xc6>
				etat_actuelle = TEST_LIDAR;
 80013b2:	4b82      	ldr	r3, [pc, #520]	@ (80015bc <main+0x2c8>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	701a      	strb	r2, [r3, #0]
			break;
 80013b8:	e14f      	b.n	800165a <main+0x366>
			} else if (jog_value == 2) {
 80013ba:	4b83      	ldr	r3, [pc, #524]	@ (80015c8 <main+0x2d4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	f040 814b 	bne.w	800165a <main+0x366>
				etat_actuelle = TEST_BLUETOOTH;
 80013c4:	4b7d      	ldr	r3, [pc, #500]	@ (80015bc <main+0x2c8>)
 80013c6:	2204      	movs	r2, #4
 80013c8:	701a      	strb	r2, [r3, #0]
			break;
 80013ca:	e146      	b.n	800165a <main+0x366>

		case TEST_VITESSE:
			HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f000 fe41 	bl	8002054 <HAL_Delay>
			valeur_cod = cod_value % 101;
 80013d2:	4b7e      	ldr	r3, [pc, #504]	@ (80015cc <main+0x2d8>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4a7e      	ldr	r2, [pc, #504]	@ (80015d0 <main+0x2dc>)
 80013d8:	fba2 1203 	umull	r1, r2, r2, r3
 80013dc:	1a99      	subs	r1, r3, r2
 80013de:	0849      	lsrs	r1, r1, #1
 80013e0:	440a      	add	r2, r1
 80013e2:	0992      	lsrs	r2, r2, #6
 80013e4:	2165      	movs	r1, #101	@ 0x65
 80013e6:	fb01 f202 	mul.w	r2, r1, r2
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b78      	ldr	r3, [pc, #480]	@ (80015d4 <main+0x2e0>)
 80013f2:	601a      	str	r2, [r3, #0]
			vitesse = (float) valeur_cod / 100.0;
 80013f4:	4b77      	ldr	r3, [pc, #476]	@ (80015d4 <main+0x2e0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001400:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80015d8 <main+0x2e4>
 8001404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001408:	4b74      	ldr	r3, [pc, #464]	@ (80015dc <main+0x2e8>)
 800140a:	edc3 7a00 	vstr	s15, [r3]
			set_rapport_cyclique_et_sens(vitesse, direction);
 800140e:	4b73      	ldr	r3, [pc, #460]	@ (80015dc <main+0x2e8>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	4b72      	ldr	r3, [pc, #456]	@ (80015e0 <main+0x2ec>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	f7ff fd83 	bl	8000f28 <set_rapport_cyclique_et_sens>
			LCD_gotoxy(0, 0);
 8001422:	2100      	movs	r1, #0
 8001424:	2000      	movs	r0, #0
 8001426:	f000 fa93 	bl	8001950 <LCD_gotoxy>
			LCD_printf("choix:vitesse");
 800142a:	486e      	ldr	r0, [pc, #440]	@ (80015e4 <main+0x2f0>)
 800142c:	f000 faec 	bl	8001a08 <LCD_printf>
			LCD_gotoxy(0, 1);
 8001430:	2101      	movs	r1, #1
 8001432:	2000      	movs	r0, #0
 8001434:	f000 fa8c 	bl	8001950 <LCD_gotoxy>
			LCD_printf("vitesse=%4.2f", vitesse);
 8001438:	4b68      	ldr	r3, [pc, #416]	@ (80015dc <main+0x2e8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f8ab 	bl	8000598 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4868      	ldr	r0, [pc, #416]	@ (80015e8 <main+0x2f4>)
 8001448:	f000 fade 	bl	8001a08 <LCD_printf>

			if (jog_value == 24) {
 800144c:	4b5e      	ldr	r3, [pc, #376]	@ (80015c8 <main+0x2d4>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b18      	cmp	r3, #24
 8001452:	d103      	bne.n	800145c <main+0x168>
				direction = true;
 8001454:	4b62      	ldr	r3, [pc, #392]	@ (80015e0 <main+0x2ec>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e006      	b.n	800146a <main+0x176>
			} else if (jog_value == 10) {
 800145c:	4b5a      	ldr	r3, [pc, #360]	@ (80015c8 <main+0x2d4>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b0a      	cmp	r3, #10
 8001462:	d102      	bne.n	800146a <main+0x176>
				direction = false;
 8001464:	4b5e      	ldr	r3, [pc, #376]	@ (80015e0 <main+0x2ec>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
			}
			if (jog_value == 2) {
 800146a:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <main+0x2d4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d103      	bne.n	800147a <main+0x186>
				etat_actuelle = TEST_BLUETOOTH;
 8001472:	4b52      	ldr	r3, [pc, #328]	@ (80015bc <main+0x2c8>)
 8001474:	2204      	movs	r2, #4
 8001476:	701a      	strb	r2, [r3, #0]
			} else if (jog_value == 16) {
				etat_actuelle = TEST_HERKULEX;
			} else if (jog_value == 1) {
				etat_actuelle = TEST_LIDAR;
			}
			break;
 8001478:	e0f1      	b.n	800165e <main+0x36a>
			} else if (jog_value == 16) {
 800147a:	4b53      	ldr	r3, [pc, #332]	@ (80015c8 <main+0x2d4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b10      	cmp	r3, #16
 8001480:	d103      	bne.n	800148a <main+0x196>
				etat_actuelle = TEST_HERKULEX;
 8001482:	4b4e      	ldr	r3, [pc, #312]	@ (80015bc <main+0x2c8>)
 8001484:	2203      	movs	r2, #3
 8001486:	701a      	strb	r2, [r3, #0]
			break;
 8001488:	e0e9      	b.n	800165e <main+0x36a>
			} else if (jog_value == 1) {
 800148a:	4b4f      	ldr	r3, [pc, #316]	@ (80015c8 <main+0x2d4>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	f040 80e5 	bne.w	800165e <main+0x36a>
				etat_actuelle = TEST_LIDAR;
 8001494:	4b49      	ldr	r3, [pc, #292]	@ (80015bc <main+0x2c8>)
 8001496:	2202      	movs	r2, #2
 8001498:	701a      	strb	r2, [r3, #0]
			break;
 800149a:	e0e0      	b.n	800165e <main+0x36a>

		case TEST_HERKULEX:
			HAL_Delay(10);
 800149c:	200a      	movs	r0, #10
 800149e:	f000 fdd9 	bl	8002054 <HAL_Delay>
			LCD_gotoxy(0, 0);
 80014a2:	2100      	movs	r1, #0
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 fa53 	bl	8001950 <LCD_gotoxy>
			LCD_printf("choix:herkulex");
 80014aa:	4850      	ldr	r0, [pc, #320]	@ (80015ec <main+0x2f8>)
 80014ac:	f000 faac 	bl	8001a08 <LCD_printf>
			LCD_gotoxy(0, 1);
 80014b0:	2101      	movs	r1, #1
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fa4c 	bl	8001950 <LCD_gotoxy>
			herkulex_test = ((cod_value % 41) + 80) * (-1);
 80014b8:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <main+0x2d8>)
 80014ba:	7819      	ldrb	r1, [r3, #0]
 80014bc:	4b4c      	ldr	r3, [pc, #304]	@ (80015f0 <main+0x2fc>)
 80014be:	fba3 2301 	umull	r2, r3, r3, r1
 80014c2:	095a      	lsrs	r2, r3, #5
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e2:	4b44      	ldr	r3, [pc, #272]	@ (80015f4 <main+0x300>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]
			LCD_gotoxy(0, 1);
 80014e8:	2101      	movs	r1, #1
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 fa30 	bl	8001950 <LCD_gotoxy>
			LCD_printf("%4.4f     ", herkulex_test);
 80014f0:	4b40      	ldr	r3, [pc, #256]	@ (80015f4 <main+0x300>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f84f 	bl	8000598 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	483e      	ldr	r0, [pc, #248]	@ (80015f8 <main+0x304>)
 8001500:	f000 fa82 	bl	8001a08 <LCD_printf>

			switch (etat_jog) {
 8001504:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <main+0x308>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <main+0x22c>
 800150c:	2b01      	cmp	r3, #1
 800150e:	d112      	bne.n	8001536 <main+0x242>
			case RELACHER:
				if (jog_value == 4) {
 8001510:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <main+0x2d4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d10b      	bne.n	8001530 <main+0x23c>
				//	set_angle(herkulex_test);
					etat_jog = APPUYER;
 8001518:	4b38      	ldr	r3, [pc, #224]	@ (80015fc <main+0x308>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800151e:	e007      	b.n	8001530 <main+0x23c>
			case APPUYER:
				if (jog_value != 4) {
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <main+0x2d4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d005      	beq.n	8001534 <main+0x240>
					etat_jog = RELACHER;
 8001528:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <main+0x308>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800152e:	e001      	b.n	8001534 <main+0x240>
				break;
 8001530:	bf00      	nop
 8001532:	e000      	b.n	8001536 <main+0x242>
				break;
 8001534:	bf00      	nop

			}
			if (jog_value == 8) {
 8001536:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <main+0x2d4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b08      	cmp	r3, #8
 800153c:	d103      	bne.n	8001546 <main+0x252>
				etat_actuelle = TEST_VITESSE;
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <main+0x2c8>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
			} else if (jog_value == 1) {
				etat_actuelle = TEST_LIDAR;
			} else if (jog_value == 2) {
				etat_actuelle = TEST_BLUETOOTH;
			}
			break;
 8001544:	e08d      	b.n	8001662 <main+0x36e>
			} else if (jog_value == 1) {
 8001546:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <main+0x2d4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d103      	bne.n	8001556 <main+0x262>
				etat_actuelle = TEST_LIDAR;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <main+0x2c8>)
 8001550:	2202      	movs	r2, #2
 8001552:	701a      	strb	r2, [r3, #0]
			break;
 8001554:	e085      	b.n	8001662 <main+0x36e>
			} else if (jog_value == 2) {
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <main+0x2d4>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b02      	cmp	r3, #2
 800155c:	f040 8081 	bne.w	8001662 <main+0x36e>
				etat_actuelle = TEST_BLUETOOTH;
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <main+0x2c8>)
 8001562:	2204      	movs	r2, #4
 8001564:	701a      	strb	r2, [r3, #0]
			break;
 8001566:	e07c      	b.n	8001662 <main+0x36e>

		case TEST_LIDAR:
			HAL_Delay(10);
 8001568:	200a      	movs	r0, #10
 800156a:	f000 fd73 	bl	8002054 <HAL_Delay>
			LCD_gotoxy(0, 0);
 800156e:	2100      	movs	r1, #0
 8001570:	2000      	movs	r0, #0
 8001572:	f000 f9ed 	bl	8001950 <LCD_gotoxy>
			LCD_printf("choix:lidar");
 8001576:	4822      	ldr	r0, [pc, #136]	@ (8001600 <main+0x30c>)
 8001578:	f000 fa46 	bl	8001a08 <LCD_printf>
			if (jog_value == 8) {
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <main+0x2d4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b08      	cmp	r3, #8
 8001582:	d103      	bne.n	800158c <main+0x298>
				etat_actuelle = TEST_VITESSE;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <main+0x2c8>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
			} else if (jog_value == 16) {
				etat_actuelle = TEST_HERKULEX;
			} else if (jog_value == 2) {
				etat_actuelle = TEST_BLUETOOTH;
			}
			break;
 800158a:	e06c      	b.n	8001666 <main+0x372>
			} else if (jog_value == 16) {
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <main+0x2d4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b10      	cmp	r3, #16
 8001592:	d103      	bne.n	800159c <main+0x2a8>
				etat_actuelle = TEST_HERKULEX;
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <main+0x2c8>)
 8001596:	2203      	movs	r2, #3
 8001598:	701a      	strb	r2, [r3, #0]
			break;
 800159a:	e064      	b.n	8001666 <main+0x372>
			} else if (jog_value == 2) {
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <main+0x2d4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d160      	bne.n	8001666 <main+0x372>
				etat_actuelle = TEST_BLUETOOTH;
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <main+0x2c8>)
 80015a6:	2204      	movs	r2, #4
 80015a8:	701a      	strb	r2, [r3, #0]
			break;
 80015aa:	e05c      	b.n	8001666 <main+0x372>
 80015ac:	08007ce0 	.word	0x08007ce0
 80015b0:	200001fc 	.word	0x200001fc
 80015b4:	c2c40000 	.word	0xc2c40000
 80015b8:	c2f00000 	.word	0xc2f00000
 80015bc:	200008ae 	.word	0x200008ae
 80015c0:	08007ce8 	.word	0x08007ce8
 80015c4:	08007cf8 	.word	0x08007cf8
 80015c8:	200008a9 	.word	0x200008a9
 80015cc:	200008aa 	.word	0x200008aa
 80015d0:	446f8657 	.word	0x446f8657
 80015d4:	200008b8 	.word	0x200008b8
 80015d8:	42c80000 	.word	0x42c80000
 80015dc:	200008b4 	.word	0x200008b4
 80015e0:	20000005 	.word	0x20000005
 80015e4:	08007d08 	.word	0x08007d08
 80015e8:	08007d18 	.word	0x08007d18
 80015ec:	08007d28 	.word	0x08007d28
 80015f0:	c7ce0c7d 	.word	0xc7ce0c7d
 80015f4:	200008b0 	.word	0x200008b0
 80015f8:	08007d38 	.word	0x08007d38
 80015fc:	20000004 	.word	0x20000004
 8001600:	08007d44 	.word	0x08007d44

		case TEST_BLUETOOTH:
			HAL_Delay(10);
 8001604:	200a      	movs	r0, #10
 8001606:	f000 fd25 	bl	8002054 <HAL_Delay>
			LCD_gotoxy(0, 0);
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f000 f99f 	bl	8001950 <LCD_gotoxy>
			LCD_printf("choix:bluetooth   ");
 8001612:	481d      	ldr	r0, [pc, #116]	@ (8001688 <main+0x394>)
 8001614:	f000 f9f8 	bl	8001a08 <LCD_printf>
			LCD_gotoxy(0, 1);
 8001618:	2101      	movs	r1, #1
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f998 	bl	8001950 <LCD_gotoxy>
			LCD_printf("           ");
 8001620:	481a      	ldr	r0, [pc, #104]	@ (800168c <main+0x398>)
 8001622:	f000 f9f1 	bl	8001a08 <LCD_printf>
			if (jog_value == 8) {
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <main+0x39c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d103      	bne.n	8001636 <main+0x342>
				etat_actuelle = TEST_VITESSE;
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <main+0x3a0>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
				etat_actuelle = TEST_HERKULEX;
			} else if (jog_value == 1) {
				etat_actuelle = TEST_LIDAR;
			}

			break;
 8001634:	e019      	b.n	800166a <main+0x376>
			else if (jog_value == 16) {
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <main+0x39c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d103      	bne.n	8001646 <main+0x352>
				etat_actuelle = TEST_HERKULEX;
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <main+0x3a0>)
 8001640:	2203      	movs	r2, #3
 8001642:	701a      	strb	r2, [r3, #0]
			break;
 8001644:	e011      	b.n	800166a <main+0x376>
			} else if (jog_value == 1) {
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <main+0x39c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d10d      	bne.n	800166a <main+0x376>
				etat_actuelle = TEST_LIDAR;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <main+0x3a0>)
 8001650:	2202      	movs	r2, #2
 8001652:	701a      	strb	r2, [r3, #0]
			break;
 8001654:	e009      	b.n	800166a <main+0x376>

		default:
			break;
 8001656:	bf00      	nop
 8001658:	e008      	b.n	800166c <main+0x378>
			break;
 800165a:	bf00      	nop
 800165c:	e006      	b.n	800166c <main+0x378>
			break;
 800165e:	bf00      	nop
 8001660:	e004      	b.n	800166c <main+0x378>
			break;
 8001662:	bf00      	nop
 8001664:	e002      	b.n	800166c <main+0x378>
			break;
 8001666:	bf00      	nop
 8001668:	e000      	b.n	800166c <main+0x378>
			break;
 800166a:	bf00      	nop

		}

		//TODO : Bloque la réception des trames lidar

		valeur_afficher = valeur_cod & 0x00FF;
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <main+0x3a4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <main+0x3a8>)
 8001678:	801a      	strh	r2, [r3, #0]

		BAR_set(valeur_cod);
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <main+0x3a4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f938 	bl	80018f4 <BAR_set>
	while (1) {
 8001684:	e657      	b.n	8001336 <main+0x42>
 8001686:	bf00      	nop
 8001688:	08007d50 	.word	0x08007d50
 800168c:	08007d64 	.word	0x08007d64
 8001690:	200008a9 	.word	0x200008a9
 8001694:	200008ae 	.word	0x200008ae
 8001698:	200008b8 	.word	0x200008b8
 800169c:	200008ac 	.word	0x200008ac

080016a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b094      	sub	sp, #80	@ 0x50
 80016a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	2238      	movs	r2, #56	@ 0x38
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 fad0 	bl	8005c54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f001 fda6 	bl	8003214 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d2:	2340      	movs	r3, #64	@ 0x40
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016da:	2302      	movs	r3, #2
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016de:	2304      	movs	r3, #4
 80016e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80016e2:	2355      	movs	r3, #85	@ 0x55
 80016e4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016f2:	f107 0318 	add.w	r3, r7, #24
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fe40 	bl	800337c <HAL_RCC_OscConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x66>
		Error_Handler();
 8001702:	f000 fa2d 	bl	8001b60 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001706:	230f      	movs	r3, #15
 8001708:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170a:	2303      	movs	r3, #3
 800170c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2104      	movs	r1, #4
 800171e:	4618      	mov	r0, r3
 8001720:	f002 f93e 	bl	80039a0 <HAL_RCC_ClockConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0x8e>
		Error_Handler();
 800172a:	f000 fa19 	bl	8001b60 <Error_Handler>
	}
}
 800172e:	bf00      	nop
 8001730:	3750      	adds	r7, #80	@ 0x50
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0,
			&buffer_trame_rx[marker1].header,
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0,
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8001752:	441a      	add	r2, r3
			&buffer_trame_rx[marker1].data[0]);
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0,
 800175a:	460b      	mov	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	3328      	adds	r3, #40	@ 0x28
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8001766:	440b      	add	r3, r1
 8001768:	2140      	movs	r1, #64	@ 0x40
 800176a:	480c      	ldr	r0, [pc, #48]	@ (800179c <HAL_FDCAN_RxFifo0Callback+0x64>)
 800176c:	f000 ff6a 	bl	8002644 <HAL_FDCAN_GetRxMessage>
	//printf("0x%X marker1 :%d \n", buffer_trame_rx[marker1].data[0], marker1);
	marker1++;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800177a:	801a      	strh	r2, [r3, #0]

	if (marker1 == 32) {
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2b20      	cmp	r3, #32
 8001782:	d102      	bne.n	800178a <HAL_FDCAN_RxFifo0Callback+0x52>
		marker1 = 0;
 8001784:	4b03      	ldr	r3, [pc, #12]	@ (8001794 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001786:	2200      	movs	r2, #0
 8001788:	801a      	strh	r2, [r3, #0]
	}
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000260 	.word	0x20000260
 8001798:	20000264 	.word	0x20000264
 800179c:	200001fc 	.word	0x200001fc

080017a0 <automate_decode_IHM>:

void automate_decode_IHM(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	static uint16_t marker2 = 0;

	//printf("Id trame : 0x%X\n", buffer_trame_rx[marker2].header.Identifier);

	switch (buffer_trame_rx[marker2].header.Identifier) {
 80017a4:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <automate_decode_IHM+0xbc>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <automate_decode_IHM+0xc0>)
 80017ac:	460b      	mov	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f240 7291 	movw	r2, #1937	@ 0x791
 80017bc:	4293      	cmp	r3, r2
 80017be:	d004      	beq.n	80017ca <automate_decode_IHM+0x2a>
 80017c0:	f240 72a1 	movw	r2, #1953	@ 0x7a1
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d01d      	beq.n	8001804 <automate_decode_IHM+0x64>
 80017c8:	e039      	b.n	800183e <automate_decode_IHM+0x9e>
	case JOG_DATA:
		printf("JOG value : 0x%X\n", buffer_trame_rx[marker2].data[0]);
 80017ca:	4b24      	ldr	r3, [pc, #144]	@ (800185c <automate_decode_IHM+0xbc>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <automate_decode_IHM+0xc0>)
 80017d2:	460b      	mov	r3, r1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	440b      	add	r3, r1
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	3328      	adds	r3, #40	@ 0x28
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4820      	ldr	r0, [pc, #128]	@ (8001864 <automate_decode_IHM+0xc4>)
 80017e4:	f004 f8ce 	bl	8005984 <iprintf>
		jog_value = buffer_trame_rx[marker2].data[0];
 80017e8:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <automate_decode_IHM+0xbc>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <automate_decode_IHM+0xc0>)
 80017f0:	460b      	mov	r3, r1
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	440b      	add	r3, r1
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	3328      	adds	r3, #40	@ 0x28
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <automate_decode_IHM+0xc8>)
 8001800:	701a      	strb	r2, [r3, #0]
		break;
 8001802:	e01c      	b.n	800183e <automate_decode_IHM+0x9e>

	case COD_DATA:
		printf("COD value : %d\n", buffer_trame_rx[marker2].data[0]);
 8001804:	4b15      	ldr	r3, [pc, #84]	@ (800185c <automate_decode_IHM+0xbc>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <automate_decode_IHM+0xc0>)
 800180c:	460b      	mov	r3, r1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	440b      	add	r3, r1
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4413      	add	r3, r2
 8001816:	3328      	adds	r3, #40	@ 0x28
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	4813      	ldr	r0, [pc, #76]	@ (800186c <automate_decode_IHM+0xcc>)
 800181e:	f004 f8b1 	bl	8005984 <iprintf>
		cod_value = buffer_trame_rx[marker2].data[0];
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <automate_decode_IHM+0xbc>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <automate_decode_IHM+0xc0>)
 800182a:	460b      	mov	r3, r1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	440b      	add	r3, r1
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	3328      	adds	r3, #40	@ 0x28
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <automate_decode_IHM+0xd0>)
 800183a:	701a      	strb	r2, [r3, #0]
		break;
 800183c:	bf00      	nop
	}

	marker2++;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <automate_decode_IHM+0xbc>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <automate_decode_IHM+0xbc>)
 8001848:	801a      	strh	r2, [r3, #0]

	if (marker2 == 32) {
 800184a:	4b04      	ldr	r3, [pc, #16]	@ (800185c <automate_decode_IHM+0xbc>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	2b20      	cmp	r3, #32
 8001850:	d102      	bne.n	8001858 <automate_decode_IHM+0xb8>
		marker2 = 0;
 8001852:	4b02      	ldr	r3, [pc, #8]	@ (800185c <automate_decode_IHM+0xbc>)
 8001854:	2200      	movs	r2, #0
 8001856:	801a      	strh	r2, [r3, #0]
	}
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200008bc 	.word	0x200008bc
 8001860:	20000264 	.word	0x20000264
 8001864:	08007d70 	.word	0x08007d70
 8001868:	200008a9 	.word	0x200008a9
 800186c:	08007d84 	.word	0x08007d84
 8001870:	200008aa 	.word	0x200008aa

08001874 <JOG_read>:

/**
 * @brief Obtenir la valeur du JOG
 * @note Pas besoin d'attente bloaquante pour cette fonction avec IHM v2
 */
void JOG_read(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef pTxHeader = { 0 };
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2224      	movs	r2, #36	@ 0x24
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f004 f9e7 	bl	8005c54 <memset>

	pTxHeader.Identifier = JOG_REQ;
 8001886:	f44f 63f2 	mov.w	r3, #1936	@ 0x790
 800188a:	607b      	str	r3, [r7, #4]
	pTxHeader.IdType = FDCAN_STANDARD_ID;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
	pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 8001890:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001894:	60fb      	str	r3, [r7, #12]
	pTxHeader.DataLength = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]

	uint8_t pTxData;
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, &pTxData);
 800189a:	1cfa      	adds	r2, r7, #3
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <JOG_read+0x3c>)
 80018a2:	f000 fe8b 	bl	80025bc <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	@ 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001fc 	.word	0x200001fc

080018b4 <COD_read>:

/**
 * @brief Obtenir la valeur du COD
 * @note Pas besoin d'attente bloaquante pour cette fonction avec IHM v2
 */
void COD_read(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef pTxHeader = { 0 };
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2224      	movs	r2, #36	@ 0x24
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 f9c7 	bl	8005c54 <memset>

	pTxHeader.Identifier = COD_REQ;
 80018c6:	f44f 63f4 	mov.w	r3, #1952	@ 0x7a0
 80018ca:	607b      	str	r3, [r7, #4]
	pTxHeader.IdType = FDCAN_STANDARD_ID;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
	pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 80018d0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018d4:	60fb      	str	r3, [r7, #12]
	pTxHeader.DataLength = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]

	uint8_t pTxData;

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, &pTxData);
 80018da:	1cfa      	adds	r2, r7, #3
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <COD_read+0x3c>)
 80018e2:	f000 fe6b 	bl	80025bc <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	@ 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200001fc 	.word	0x200001fc

080018f4 <BAR_set>:

void BAR_set(uint16_t motif_BAR) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	@ 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	FDCAN_TxHeaderTypeDef pTxHeader = { 0 };
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2224      	movs	r2, #36	@ 0x24
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f9a4 	bl	8005c54 <memset>

	pTxHeader.Identifier = BAR_SET;
 800190c:	f44f 63f6 	mov.w	r3, #1968	@ 0x7b0
 8001910:	60fb      	str	r3, [r7, #12]
	pTxHeader.IdType = FDCAN_STANDARD_ID;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
	pTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
	pTxHeader.DataLength = 2;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]

	uint8_t pTxData[2] = { (uint8_t) (motif_BAR >> 8), (uint8_t) (motif_BAR) };
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	723b      	strb	r3, [r7, #8]
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	727b      	strb	r3, [r7, #9]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, &pTxData);
 800192e:	f107 0208 	add.w	r2, r7, #8
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	4619      	mov	r1, r3
 8001938:	4804      	ldr	r0, [pc, #16]	@ (800194c <BAR_set+0x58>)
 800193a:	f000 fe3f 	bl	80025bc <HAL_FDCAN_AddMessageToTxFifoQ>

	HAL_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f000 fb88 	bl	8002054 <HAL_Delay>
}
 8001944:	bf00      	nop
 8001946:	3730      	adds	r7, #48	@ 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200001fc 	.word	0x200001fc

08001950 <LCD_gotoxy>:

void LCD_gotoxy(uint8_t x, uint8_t y) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	71bb      	strb	r3, [r7, #6]
	curseur = (y * 16 + x) % 32;
 8001960:	79bb      	ldrb	r3, [r7, #6]
 8001962:	011a      	lsls	r2, r3, #4
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	4413      	add	r3, r2
 8001968:	425a      	negs	r2, r3
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	f002 021f 	and.w	r2, r2, #31
 8001972:	bf58      	it	pl
 8001974:	4253      	negpl	r3, r2
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <LCD_gotoxy+0x38>)
 800197a:	701a      	strb	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	20000864 	.word	0x20000864

0800198c <LCD_clear>:

void LCD_clear(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af00      	add	r7, sp, #0
	uint8_t i;

	curseur = 0;
 8001992:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <LCD_clear+0x70>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < 32; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800199e:	e009      	b.n	80019b4 <LCD_clear+0x28>
		tableau_ecran[i] = 32;
 80019a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019a4:	4a16      	ldr	r2, [pc, #88]	@ (8001a00 <LCD_clear+0x74>)
 80019a6:	2120      	movs	r1, #32
 80019a8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 32; i++)
 80019aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ae:	3301      	adds	r3, #1
 80019b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80019b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019b8:	2b1f      	cmp	r3, #31
 80019ba:	d9f1      	bls.n	80019a0 <LCD_clear+0x14>

	FDCAN_TxHeaderTypeDef pTxHeader = { 0 };
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	2224      	movs	r2, #36	@ 0x24
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 f945 	bl	8005c54 <memset>

	pTxHeader.Identifier = LCD_CLEAR;
 80019ca:	f240 737f 	movw	r3, #1919	@ 0x77f
 80019ce:	60bb      	str	r3, [r7, #8]
	pTxHeader.IdType = FDCAN_STANDARD_ID;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
	pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 80019d4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019d8:	613b      	str	r3, [r7, #16]
	pTxHeader.DataLength = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]

	uint8_t pTxData;
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, &pTxData);
 80019de:	1dfa      	adds	r2, r7, #7
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <LCD_clear+0x78>)
 80019e8:	f000 fde8 	bl	80025bc <HAL_FDCAN_AddMessageToTxFifoQ>
	HAL_Delay(1);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f000 fb31 	bl	8002054 <HAL_Delay>
}
 80019f2:	bf00      	nop
 80019f4:	3730      	adds	r7, #48	@ 0x30
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000864 	.word	0x20000864
 8001a00:	20000868 	.word	0x20000868
 8001a04:	200001fc 	.word	0x200001fc

08001a08 <LCD_printf>:

void LCD_printf(const char *format, ...) {
 8001a08:	b40f      	push	{r0, r1, r2, r3}
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b08e      	sub	sp, #56	@ 0x38
 8001a0e:	af00      	add	r7, sp, #0
	uint8_t i, j;
	va_list arg;
	va_start(arg, format);
 8001a10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a14:	633b      	str	r3, [r7, #48]	@ 0x30

	curseur = curseur + vsprintf(tableau_ecran + curseur % 64, format, arg);
 8001a16:	4b4f      	ldr	r3, [pc, #316]	@ (8001b54 <LCD_printf+0x14c>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a1e:	4a4e      	ldr	r2, [pc, #312]	@ (8001b58 <LCD_printf+0x150>)
 8001a20:	4413      	add	r3, r2
 8001a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 f876 	bl	8005b18 <vsiprintf>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b48      	ldr	r3, [pc, #288]	@ (8001b54 <LCD_printf+0x14c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b46      	ldr	r3, [pc, #280]	@ (8001b54 <LCD_printf+0x14c>)
 8001a3a:	701a      	strb	r2, [r3, #0]

	if (curseur > 31) {
 8001a3c:	4b45      	ldr	r3, [pc, #276]	@ (8001b54 <LCD_printf+0x14c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b1f      	cmp	r3, #31
 8001a42:	d920      	bls.n	8001a86 <LCD_printf+0x7e>
		for (i = 32; i < curseur; i++) {
 8001a44:	2320      	movs	r3, #32
 8001a46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001a4a:	e00e      	b.n	8001a6a <LCD_printf+0x62>
			tableau_ecran[i % 32] = tableau_ecran[i];
 8001a4c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001a50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	493f      	ldr	r1, [pc, #252]	@ (8001b58 <LCD_printf+0x150>)
 8001a5a:	5c89      	ldrb	r1, [r1, r2]
 8001a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b58 <LCD_printf+0x150>)
 8001a5e:	54d1      	strb	r1, [r2, r3]
		for (i = 32; i < curseur; i++) {
 8001a60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a64:	3301      	adds	r3, #1
 8001a66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b54 <LCD_printf+0x14c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3ea      	bcc.n	8001a4c <LCD_printf+0x44>
		}
		curseur = curseur % 32;
 8001a76:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <LCD_printf+0x14c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <LCD_printf+0x14c>)
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e017      	b.n	8001ab6 <LCD_printf+0xae>
	} else {
		for (i = 0; i < 32; i++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001a8c:	e00f      	b.n	8001aae <LCD_printf+0xa6>
			if (tableau_ecran[i] == 0)
 8001a8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a92:	4a31      	ldr	r2, [pc, #196]	@ (8001b58 <LCD_printf+0x150>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <LCD_printf+0x9c>
				tableau_ecran[i] = 20;
 8001a9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b58 <LCD_printf+0x150>)
 8001aa0:	2114      	movs	r1, #20
 8001aa2:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 32; i++) {
 8001aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001aae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ab2:	2b1f      	cmp	r3, #31
 8001ab4:	d9eb      	bls.n	8001a8e <LCD_printf+0x86>
		}
	}
	va_end(arg);
	tableau_ecran[32] = '\0';
 8001ab6:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <LCD_printf+0x150>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2020 	strb.w	r2, [r3, #32]

	for (j = 0; j < 4; j++) {
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001ac4:	e03a      	b.n	8001b3c <LCD_printf+0x134>
		FDCAN_TxHeaderTypeDef pTxHeader = { 0 };
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2224      	movs	r2, #36	@ 0x24
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 f8c1 	bl	8005c54 <memset>
		uint8_t pTxData[8];

		pTxHeader.Identifier = LCD_CHAR0 + j;
 8001ad2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001ad6:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8001ada:	607b      	str	r3, [r7, #4]
		pTxHeader.IdType = FDCAN_STANDARD_ID;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
		pTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
		pTxHeader.DataLength = 8;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	613b      	str	r3, [r7, #16]

		for (i = 0; i < 8; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001aee:	e012      	b.n	8001b16 <LCD_printf+0x10e>
			pTxData[i] = tableau_ecran[i + j * 8];
 8001af0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001af4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	441a      	add	r2, r3
 8001afc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001b00:	4915      	ldr	r1, [pc, #84]	@ (8001b58 <LCD_printf+0x150>)
 8001b02:	5c8a      	ldrb	r2, [r1, r2]
 8001b04:	3338      	adds	r3, #56	@ 0x38
 8001b06:	443b      	add	r3, r7
 8001b08:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (i = 0; i < 8; i++)
 8001b0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001b10:	3301      	adds	r3, #1
 8001b12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001b16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001b1a:	2b07      	cmp	r3, #7
 8001b1c:	d9e8      	bls.n	8001af0 <LCD_printf+0xe8>

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, &pTxData);
 8001b1e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	@ (8001b5c <LCD_printf+0x154>)
 8001b28:	f000 fd48 	bl	80025bc <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(1);
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f000 fa91 	bl	8002054 <HAL_Delay>
	for (j = 0; j < 4; j++) {
 8001b32:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b36:	3301      	adds	r3, #1
 8001b38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001b3c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d9c0      	bls.n	8001ac6 <LCD_printf+0xbe>
	}
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3738      	adds	r7, #56	@ 0x38
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b50:	b004      	add	sp, #16
 8001b52:	4770      	bx	lr
 8001b54:	20000864 	.word	0x20000864
 8001b58:	20000868 	.word	0x20000868
 8001b5c:	200001fc 	.word	0x200001fc

08001b60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <Error_Handler+0x8>

08001b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b76:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ba2:	f001 fbdb 	bl	800335c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <NMI_Handler+0x4>

08001bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0a:	f000 fa05 	bl	8002018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <FDCAN1_IT0_IRQHandler+0x10>)
 8001c1a:	f000 ff01 	bl	8002a20 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200001fc 	.word	0x200001fc

08001c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return 1;
 8001c2c:	2301      	movs	r3, #1
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_kill>:

int _kill(int pid, int sig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c42:	f004 f859 	bl	8005cf8 <__errno>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2216      	movs	r2, #22
 8001c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_exit>:

void _exit (int status)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ffe7 	bl	8001c38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c6a:	bf00      	nop
 8001c6c:	e7fd      	b.n	8001c6a <_exit+0x12>

08001c6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e00a      	b.n	8001c96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c80:	f3af 8000 	nop.w
 8001c84:	4601      	mov	r1, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60ba      	str	r2, [r7, #8]
 8001c8c:	b2ca      	uxtb	r2, r1
 8001c8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dbf0      	blt.n	8001c80 <_read+0x12>
  }

  return len;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e009      	b.n	8001cce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fb04 	bl	80012d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dbf1      	blt.n	8001cba <_write+0x12>
  }
  return len;
 8001cd6:	687b      	ldr	r3, [r7, #4]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_close>:

int _close(int file)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d08:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_isatty>:

int _isatty(int file)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	@ (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f003 ffbe 	bl	8005cf8 <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20008000 	.word	0x20008000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	200008c0 	.word	0x200008c0
 8001db0:	20000aa8 	.word	0x20000aa8

08001db4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <SystemInit+0x20>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <SystemInit+0x20>)
 8001dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001dde:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <MX_USART2_UART_Init+0x94>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001de2:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e20:	4811      	ldr	r0, [pc, #68]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e22:	f002 f9c9 	bl	80041b8 <HAL_UART_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f7ff fe98 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e34:	f002 ffc2 	bl	8004dbc <HAL_UARTEx_SetTxFifoThreshold>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f7ff fe8f 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e46:	f002 fff7 	bl	8004e38 <HAL_UARTEx_SetRxFifoThreshold>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f7ff fe86 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e56:	f002 ff78 	bl	8004d4a <HAL_UARTEx_DisableFifoMode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f7ff fe7e 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200008c4 	.word	0x200008c4
 8001e6c:	40004400 	.word	0x40004400

08001e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b09a      	sub	sp, #104	@ 0x68
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	2244      	movs	r2, #68	@ 0x44
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fedf 	bl	8005c54 <memset>
  if(uartHandle->Instance==USART2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f18 <HAL_UART_MspInit+0xa8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d136      	bne.n	8001f0e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 ff93 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001eb8:	f7ff fe52 	bl	8001b60 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ebc:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <HAL_UART_MspInit+0xac>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec0:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <HAL_UART_MspInit+0xac>)
 8001ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_UART_MspInit+0xac>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_UART_MspInit+0xac>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed8:	4a10      	ldr	r2, [pc, #64]	@ (8001f1c <HAL_UART_MspInit+0xac>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <HAL_UART_MspInit+0xac>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001eec:	230c      	movs	r3, #12
 8001eee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efc:	2307      	movs	r3, #7
 8001efe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0a:	f000 ffe9 	bl	8002ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f0e:	bf00      	nop
 8001f10:	3768      	adds	r7, #104	@ 0x68
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40021000 	.word	0x40021000

08001f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f20:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f24:	f7ff ff46 	bl	8001db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	@ (8001f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <LoopForever+0xe>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	@ (8001f6c <LoopForever+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f003 fed9 	bl	8005d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f52:	f7ff f9cf 	bl	80012f4 <main>

08001f56 <LoopForever>:

LoopForever:
    b LoopForever
 8001f56:	e7fe      	b.n	8001f56 <LoopForever>
  ldr   r0, =_estack
 8001f58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f64:	08008168 	.word	0x08008168
  ldr r2, =_sbss
 8001f68:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f6c:	20000aa8 	.word	0x20000aa8

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>

08001f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f000 f95b 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f80e 	bl	8001fa4 <HAL_InitTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
 8001f92:	e001      	b.n	8001f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f94:	f7ff fdea 	bl	8001b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f98:	79fb      	ldrb	r3, [r7, #7]

}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fb0:	4b16      	ldr	r3, [pc, #88]	@ (800200c <HAL_InitTick+0x68>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d022      	beq.n	8001ffe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fb8:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_InitTick+0x6c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <HAL_InitTick+0x68>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f966 	bl	800229e <HAL_SYSTICK_Config>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10f      	bne.n	8001ff8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b0f      	cmp	r3, #15
 8001fdc:	d809      	bhi.n	8001ff2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe6:	f000 f932 	bl	800224e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <HAL_InitTick+0x70>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e007      	b.n	8002002 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e004      	b.n	8002002 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e001      	b.n	8002002 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000010 	.word	0x20000010
 8002010:	20000008 	.word	0x20000008
 8002014:	2000000c 	.word	0x2000000c

08002018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_IncTick+0x1c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_IncTick+0x20>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4413      	add	r3, r2
 8002026:	4a03      	ldr	r2, [pc, #12]	@ (8002034 <HAL_IncTick+0x1c>)
 8002028:	6013      	str	r3, [r2, #0]
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	20000958 	.word	0x20000958
 8002038:	20000010 	.word	0x20000010

0800203c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTick;
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <HAL_GetTick+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000958 	.word	0x20000958

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff ffee 	bl	800203c <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d004      	beq.n	8002078 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_Delay+0x40>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002078:	bf00      	nop
 800207a:	f7ff ffdf 	bl	800203c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	429a      	cmp	r2, r3
 8002088:	d8f7      	bhi.n	800207a <HAL_Delay+0x26>
  {
  }
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000010 	.word	0x20000010

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff40 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff90 	bl	800218c <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5f 	bl	8002138 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff33 	bl	80020fc <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa4 	bl	80021f4 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e147      	b.n	800255a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe ff54 	bl	800118c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0210 	bic.w	r2, r2, #16
 80022f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f4:	f7ff fea2 	bl	800203c <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022fa:	e012      	b.n	8002322 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80022fc:	f7ff fe9e 	bl	800203c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b0a      	cmp	r3, #10
 8002308:	d90b      	bls.n	8002322 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2203      	movs	r2, #3
 800231a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e11b      	b.n	800255a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b08      	cmp	r3, #8
 800232e:	d0e5      	beq.n	80022fc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002340:	f7ff fe7c 	bl	800203c <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002346:	e012      	b.n	800236e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002348:	f7ff fe78 	bl	800203c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b0a      	cmp	r3, #10
 8002354:	d90b      	bls.n	800236e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0f5      	b.n	800255a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0e5      	beq.n	8002348 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0202 	orr.w	r2, r2, #2
 800238a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a74      	ldr	r2, [pc, #464]	@ (8002564 <HAL_FDCAN_Init+0x2ac>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d103      	bne.n	800239e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002396:	4a74      	ldr	r2, [pc, #464]	@ (8002568 <HAL_FDCAN_Init+0x2b0>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7c1b      	ldrb	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	e007      	b.n	80023c8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7c5b      	ldrb	r3, [r3, #17]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023de:	619a      	str	r2, [r3, #24]
 80023e0:	e007      	b.n	80023f2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80023f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7c9b      	ldrb	r3, [r3, #18]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002408:	619a      	str	r2, [r3, #24]
 800240a:	e007      	b.n	800241c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800241a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002440:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0210 	bic.w	r2, r2, #16
 8002450:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d108      	bne.n	800246c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0204 	orr.w	r2, r2, #4
 8002468:	619a      	str	r2, [r3, #24]
 800246a:	e02c      	b.n	80024c6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d028      	beq.n	80024c6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d01c      	beq.n	80024b6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800248a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0210 	orr.w	r2, r2, #16
 800249a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d110      	bne.n	80024c6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0220 	orr.w	r2, r2, #32
 80024b2:	619a      	str	r2, [r3, #24]
 80024b4:	e007      	b.n	80024c6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024d6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024de:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024ee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024f0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024fa:	d115      	bne.n	8002528 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002506:	3b01      	subs	r3, #1
 8002508:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800250a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	3b01      	subs	r3, #1
 8002512:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002514:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	3b01      	subs	r3, #1
 800251e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002524:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002526:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fbfc 	bl	8002d3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40006400 	.word	0x40006400
 8002568:	40006500 	.word	0x40006500

0800256c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d110      	bne.n	80025a2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e006      	b.n	80025b0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a6:	f043 0204 	orr.w	r2, r3, #4
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
  }
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d12c      	bne.n	800262e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e023      	b.n	800263c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fbec 	bl	8002de8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002620:	2201      	movs	r2, #1
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e006      	b.n	800263c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002632:	f043 0208 	orr.w	r2, r3, #8
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002644:	b480      	push	{r7}
 8002646:	b08b      	sub	sp, #44	@ 0x2c
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800265c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800265e:	7efb      	ldrb	r3, [r7, #27]
 8002660:	2b02      	cmp	r3, #2
 8002662:	f040 80e8 	bne.w	8002836 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b40      	cmp	r3, #64	@ 0x40
 800266a:	d137      	bne.n	80026dc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002680:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0db      	b.n	8002844 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002694:	0e1b      	lsrs	r3, r3, #24
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d10a      	bne.n	80026b4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026a6:	0a5b      	lsrs	r3, r3, #9
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80026b0:	2301      	movs	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026da:	e036      	b.n	800274a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0a3      	b.n	8002844 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002704:	0e1b      	lsrs	r3, r3, #24
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10a      	bne.n	8002724 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002720:	2301      	movs	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0c9b      	lsrs	r3, r3, #18
 8002764:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e005      	b.n	800277a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	3304      	adds	r3, #4
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29a      	uxth	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0c1b      	lsrs	r3, r3, #16
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e1b      	lsrs	r3, r3, #24
 80027ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0fda      	lsrs	r2, r3, #31
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	3304      	adds	r3, #4
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
 80027ee:	e00a      	b.n	8002806 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	441a      	add	r2, r3
 80027f6:	6839      	ldr	r1, [r7, #0]
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	440b      	add	r3, r1
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	3301      	adds	r3, #1
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	4a11      	ldr	r2, [pc, #68]	@ (8002850 <HAL_FDCAN_GetRxMessage+0x20c>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	461a      	mov	r2, r3
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	4293      	cmp	r3, r2
 8002814:	d3ec      	bcc.n	80027f0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b40      	cmp	r3, #64	@ 0x40
 800281a:	d105      	bne.n	8002828 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002826:	e004      	b.n	8002832 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e006      	b.n	8002844 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283a:	f043 0208 	orr.w	r2, r3, #8
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	372c      	adds	r7, #44	@ 0x2c
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	08007dac 	.word	0x08007dac

08002854 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002866:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d003      	beq.n	8002876 <HAL_FDCAN_ActivateNotification+0x22>
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b02      	cmp	r3, #2
 8002872:	f040 80c8 	bne.w	8002a06 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d03b      	beq.n	800290a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d031      	beq.n	800290a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d027      	beq.n	800290a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01d      	beq.n	800290a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d013      	beq.n	800290a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00c      	beq.n	800291a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d107      	bne.n	800291a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d13b      	bne.n	80029a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d131      	bne.n	80029a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d127      	bne.n	80029a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11d      	bne.n	80029a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d113      	bne.n	80029a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00c      	beq.n	80029b6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0202 	orr.w	r2, r2, #2
 80029b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d009      	beq.n	80029d4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e006      	b.n	8002a14 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0a:	f043 0202 	orr.w	r2, r3, #2
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
  }
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	@ 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a54:	4013      	ands	r3, r2
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a76:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002a7a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a82:	6a3a      	ldr	r2, [r7, #32]
 8002a84:	4013      	ands	r3, r2
 8002a86:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002a92:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aae:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2240      	movs	r2, #64	@ 0x40
 8002aca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f916 	bl	8002cfe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d019      	beq.n	8002b10 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d014      	beq.n	8002b10 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002aee:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b06:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002b08:	6939      	ldr	r1, [r7, #16]
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8d8 	bl	8002cc0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b1c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002b1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f8a2 	bl	8002c6a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe fdfe 	bl	8001738 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b48:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002b4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f897 	bl	8002c80 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00c      	beq.n	8002b76 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f890 	bl	8002c96 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d018      	beq.n	8002bb2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d013      	beq.n	8002bb2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002b92:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2280      	movs	r2, #128	@ 0x80
 8002ba8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002baa:	68f9      	ldr	r1, [r7, #12]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f87c 	bl	8002caa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00c      	beq.n	8002bd6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f880 	bl	8002cd6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00c      	beq.n	8002bfa <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bf2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f878 	bl	8002cea <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00f      	beq.n	8002c24 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002c32:	69f9      	ldr	r1, [r7, #28]
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f876 	bl	8002d26 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a3a      	ldr	r2, [r7, #32]
 8002c46:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f858 	bl	8002d12 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002c62:	bf00      	nop
 8002c64:	3730      	adds	r7, #48	@ 0x30
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002d44:	4b27      	ldr	r3, [pc, #156]	@ (8002de4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002d46:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d56:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5e:	041a      	lsls	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d7c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	061a      	lsls	r2, r3, #24
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e005      	b.n	8002dca <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d3f3      	bcc.n	8002dbe <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	4000a400 	.word	0x4000a400

08002de8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	@ 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002e06:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e00a      	b.n	8002e2a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002e1c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002e22:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e28:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002e34:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002e3a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002e40:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	3304      	adds	r3, #4
 8002e68:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	3304      	adds	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e020      	b.n	8002ebe <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3303      	adds	r3, #3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	440b      	add	r3, r1
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002e94:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	440b      	add	r3, r1
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002ea2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002eac:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a06      	ldr	r2, [pc, #24]	@ (8002edc <FDCAN_CopyMessageToRAM+0xf4>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d3d6      	bcc.n	8002e7c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	3724      	adds	r7, #36	@ 0x24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	08007dac 	.word	0x08007dac

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eee:	e15a      	b.n	80031a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	4013      	ands	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 814c 	beq.w	80031a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d005      	beq.n	8002f20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d130      	bne.n	8002f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f56:	2201      	movs	r2, #1
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	f003 0201 	and.w	r2, r3, #1
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d017      	beq.n	8002fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	2203      	movs	r2, #3
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d123      	bne.n	8003012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	08da      	lsrs	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3208      	adds	r2, #8
 8002fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	08da      	lsrs	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3208      	adds	r2, #8
 800300c:	6939      	ldr	r1, [r7, #16]
 800300e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	2203      	movs	r2, #3
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0203 	and.w	r2, r3, #3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80a6 	beq.w	80031a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003054:	4b5b      	ldr	r3, [pc, #364]	@ (80031c4 <HAL_GPIO_Init+0x2e4>)
 8003056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003058:	4a5a      	ldr	r2, [pc, #360]	@ (80031c4 <HAL_GPIO_Init+0x2e4>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003060:	4b58      	ldr	r3, [pc, #352]	@ (80031c4 <HAL_GPIO_Init+0x2e4>)
 8003062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800306c:	4a56      	ldr	r2, [pc, #344]	@ (80031c8 <HAL_GPIO_Init+0x2e8>)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	3302      	adds	r3, #2
 8003074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003096:	d01f      	beq.n	80030d8 <HAL_GPIO_Init+0x1f8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a4c      	ldr	r2, [pc, #304]	@ (80031cc <HAL_GPIO_Init+0x2ec>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d019      	beq.n	80030d4 <HAL_GPIO_Init+0x1f4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a4b      	ldr	r2, [pc, #300]	@ (80031d0 <HAL_GPIO_Init+0x2f0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_GPIO_Init+0x1f0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a4a      	ldr	r2, [pc, #296]	@ (80031d4 <HAL_GPIO_Init+0x2f4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00d      	beq.n	80030cc <HAL_GPIO_Init+0x1ec>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a49      	ldr	r2, [pc, #292]	@ (80031d8 <HAL_GPIO_Init+0x2f8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <HAL_GPIO_Init+0x1e8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a48      	ldr	r2, [pc, #288]	@ (80031dc <HAL_GPIO_Init+0x2fc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <HAL_GPIO_Init+0x1e4>
 80030c0:	2305      	movs	r3, #5
 80030c2:	e00a      	b.n	80030da <HAL_GPIO_Init+0x1fa>
 80030c4:	2306      	movs	r3, #6
 80030c6:	e008      	b.n	80030da <HAL_GPIO_Init+0x1fa>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e006      	b.n	80030da <HAL_GPIO_Init+0x1fa>
 80030cc:	2303      	movs	r3, #3
 80030ce:	e004      	b.n	80030da <HAL_GPIO_Init+0x1fa>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e002      	b.n	80030da <HAL_GPIO_Init+0x1fa>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_GPIO_Init+0x1fa>
 80030d8:	2300      	movs	r3, #0
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	f002 0203 	and.w	r2, r2, #3
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	4093      	lsls	r3, r2
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ea:	4937      	ldr	r1, [pc, #220]	@ (80031c8 <HAL_GPIO_Init+0x2e8>)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f8:	4b39      	ldr	r3, [pc, #228]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43db      	mvns	r3, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800311c:	4a30      	ldr	r2, [pc, #192]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003122:	4b2f      	ldr	r3, [pc, #188]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003146:	4a26      	ldr	r2, [pc, #152]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800314c:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003170:	4a1b      	ldr	r2, [pc, #108]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003176:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800319a:	4a11      	ldr	r2, [pc, #68]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f47f ae9d 	bne.w	8002ef0 <HAL_GPIO_Init+0x10>
  }
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40010000 	.word	0x40010000
 80031cc:	48000400 	.word	0x48000400
 80031d0:	48000800 	.word	0x48000800
 80031d4:	48000c00 	.word	0x48000c00
 80031d8:	48001000 	.word	0x48001000
 80031dc:	48001400 	.word	0x48001400
 80031e0:	40010400 	.word	0x40010400

080031e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
 80031f0:	4613      	mov	r3, r2
 80031f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f4:	787b      	ldrb	r3, [r7, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003200:	e002      	b.n	8003208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d141      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003222:	4b4b      	ldr	r3, [pc, #300]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322e:	d131      	bne.n	8003294 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003230:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003236:	4a46      	ldr	r2, [pc, #280]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800323c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003240:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003248:	4a41      	ldr	r2, [pc, #260]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800324e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003250:	4b40      	ldr	r3, [pc, #256]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2232      	movs	r2, #50	@ 0x32
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	4a3f      	ldr	r2, [pc, #252]	@ (8003358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0c9b      	lsrs	r3, r3, #18
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003266:	e002      	b.n	800326e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3b01      	subs	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326e:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327a:	d102      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f2      	bne.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003282:	4b33      	ldr	r3, [pc, #204]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328e:	d158      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e057      	b.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003294:	4b2e      	ldr	r3, [pc, #184]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800329a:	4a2d      	ldr	r2, [pc, #180]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032a4:	e04d      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ac:	d141      	bne.n	8003332 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ae:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ba:	d131      	bne.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032bc:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c2:	4a23      	ldr	r2, [pc, #140]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032cc:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2232      	movs	r2, #50	@ 0x32
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	3301      	adds	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f2:	e002      	b.n	80032fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fa:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003306:	d102      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f2      	bne.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331a:	d112      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e011      	b.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003330:	e007      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003332:	4b07      	ldr	r3, [pc, #28]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800333a:	4a05      	ldr	r2, [pc, #20]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003340:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40007000 	.word	0x40007000
 8003354:	20000008 	.word	0x20000008
 8003358:	431bde83 	.word	0x431bde83

0800335c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336a:	6093      	str	r3, [r2, #8]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40007000 	.word	0x40007000

0800337c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e2fe      	b.n	800398c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d075      	beq.n	8003486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b97      	ldr	r3, [pc, #604]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a4:	4b94      	ldr	r3, [pc, #592]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0x3e>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_OscConfig+0x44>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d10b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	4b8d      	ldr	r3, [pc, #564]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05b      	beq.n	8003484 <HAL_RCC_OscConfig+0x108>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d157      	bne.n	8003484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e2d9      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x74>
 80033e2:	4b85      	ldr	r3, [pc, #532]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a84      	ldr	r2, [pc, #528]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xb0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x98>
 80033fa:	4b7f      	ldr	r3, [pc, #508]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7e      	ldr	r2, [pc, #504]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b7c      	ldr	r3, [pc, #496]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7b      	ldr	r2, [pc, #492]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xb0>
 8003414:	4b78      	ldr	r3, [pc, #480]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a77      	ldr	r2, [pc, #476]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b75      	ldr	r3, [pc, #468]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a74      	ldr	r2, [pc, #464]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fe02 	bl	800203c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fdfe 	bl	800203c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e29e      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344e:	4b6a      	ldr	r3, [pc, #424]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xc0>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fdee 	bl	800203c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fdea 	bl	800203c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e28a      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003476:	4b60      	ldr	r3, [pc, #384]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0xe8>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d075      	beq.n	800357e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4b59      	ldr	r3, [pc, #356]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349c:	4b56      	ldr	r3, [pc, #344]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d102      	bne.n	80034b2 <HAL_RCC_OscConfig+0x136>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d002      	beq.n	80034b8 <HAL_RCC_OscConfig+0x13c>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d11f      	bne.n	80034f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b8:	4b4f      	ldr	r3, [pc, #316]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x154>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e25d      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b49      	ldr	r3, [pc, #292]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	4946      	ldr	r1, [pc, #280]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034e4:	4b45      	ldr	r3, [pc, #276]	@ (80035fc <HAL_RCC_OscConfig+0x280>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fd5b 	bl	8001fa4 <HAL_InitTick>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d043      	beq.n	800357c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e249      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d023      	beq.n	8003548 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b3d      	ldr	r3, [pc, #244]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a3c      	ldr	r2, [pc, #240]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800350a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe fd96 	bl	800203c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7fe fd92 	bl	800203c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e232      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003526:	4b34      	ldr	r3, [pc, #208]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	061b      	lsls	r3, r3, #24
 8003540:	492d      	ldr	r1, [pc, #180]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
 8003546:	e01a      	b.n	800357e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003548:	4b2b      	ldr	r3, [pc, #172]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2a      	ldr	r2, [pc, #168]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800354e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fd72 	bl	800203c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355c:	f7fe fd6e 	bl	800203c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e20e      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800356e:	4b22      	ldr	r3, [pc, #136]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1e0>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d041      	beq.n	800360e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01c      	beq.n	80035cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003592:	4b19      	ldr	r3, [pc, #100]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003598:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fe fd4b 	bl	800203c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe fd47 	bl	800203c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1e7      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035bc:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ef      	beq.n	80035aa <HAL_RCC_OscConfig+0x22e>
 80035ca:	e020      	b.n	800360e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035cc:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d2:	4a09      	ldr	r2, [pc, #36]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe fd2e 	bl	800203c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e2:	e00d      	b.n	8003600 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe fd2a 	bl	800203c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d906      	bls.n	8003600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1ca      	b.n	800398c <HAL_RCC_OscConfig+0x610>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003600:	4b8c      	ldr	r3, [pc, #560]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ea      	bne.n	80035e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80a6 	beq.w	8003768 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003620:	4b84      	ldr	r3, [pc, #528]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_OscConfig+0x2b4>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x2b6>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b7f      	ldr	r3, [pc, #508]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	4a7e      	ldr	r2, [pc, #504]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003640:	6593      	str	r3, [r2, #88]	@ 0x58
 8003642:	4b7c      	ldr	r3, [pc, #496]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003652:	4b79      	ldr	r3, [pc, #484]	@ (8003838 <HAL_RCC_OscConfig+0x4bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365e:	4b76      	ldr	r3, [pc, #472]	@ (8003838 <HAL_RCC_OscConfig+0x4bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a75      	ldr	r2, [pc, #468]	@ (8003838 <HAL_RCC_OscConfig+0x4bc>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fe fce7 	bl	800203c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fe fce3 	bl	800203c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e183      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003684:	4b6c      	ldr	r3, [pc, #432]	@ (8003838 <HAL_RCC_OscConfig+0x4bc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d108      	bne.n	80036aa <HAL_RCC_OscConfig+0x32e>
 8003698:	4b66      	ldr	r3, [pc, #408]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	4a65      	ldr	r2, [pc, #404]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036a8:	e024      	b.n	80036f4 <HAL_RCC_OscConfig+0x378>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d110      	bne.n	80036d4 <HAL_RCC_OscConfig+0x358>
 80036b2:	4b60      	ldr	r3, [pc, #384]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036d2:	e00f      	b.n	80036f4 <HAL_RCC_OscConfig+0x378>
 80036d4:	4b57      	ldr	r3, [pc, #348]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036da:	4a56      	ldr	r2, [pc, #344]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036e4:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ea:	4a52      	ldr	r2, [pc, #328]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fe fc9e 	bl	800203c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fe fc9a 	bl	800203c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e138      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371a:	4b46      	ldr	r3, [pc, #280]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ed      	beq.n	8003704 <HAL_RCC_OscConfig+0x388>
 8003728:	e015      	b.n	8003756 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fe fc87 	bl	800203c <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe fc83 	bl	800203c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e121      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003748:	4b3a      	ldr	r3, [pc, #232]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ed      	bne.n	8003732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003756:	7ffb      	ldrb	r3, [r7, #31]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375c:	4b35      	ldr	r3, [pc, #212]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	4a34      	ldr	r2, [pc, #208]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003766:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03c      	beq.n	80037ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800377c:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800377e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003782:	4a2c      	ldr	r2, [pc, #176]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fe fc56 	bl	800203c <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003794:	f7fe fc52 	bl	800203c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0f2      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037a6:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ef      	beq.n	8003794 <HAL_RCC_OscConfig+0x418>
 80037b4:	e01b      	b.n	80037ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fe fc39 	bl	800203c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ce:	f7fe fc35 	bl	800203c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0d5      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037e0:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ef      	bne.n	80037ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80c9 	beq.w	800398a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f000 8083 	beq.w	800390c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d15e      	bne.n	80038cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a08      	ldr	r2, [pc, #32]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fe fc0f 	bl	800203c <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	e00c      	b.n	800383c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003822:	f7fe fc0b 	bl	800203c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d905      	bls.n	800383c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0ab      	b.n	800398c <HAL_RCC_OscConfig+0x610>
 8003834:	40021000 	.word	0x40021000
 8003838:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383c:	4b55      	ldr	r3, [pc, #340]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ec      	bne.n	8003822 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003848:	4b52      	ldr	r3, [pc, #328]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	4b52      	ldr	r3, [pc, #328]	@ (8003998 <HAL_RCC_OscConfig+0x61c>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6a11      	ldr	r1, [r2, #32]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003858:	3a01      	subs	r2, #1
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	4311      	orrs	r1, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003862:	0212      	lsls	r2, r2, #8
 8003864:	4311      	orrs	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800386a:	0852      	lsrs	r2, r2, #1
 800386c:	3a01      	subs	r2, #1
 800386e:	0552      	lsls	r2, r2, #21
 8003870:	4311      	orrs	r1, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003876:	0852      	lsrs	r2, r2, #1
 8003878:	3a01      	subs	r2, #1
 800387a:	0652      	lsls	r2, r2, #25
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003882:	06d2      	lsls	r2, r2, #27
 8003884:	430a      	orrs	r2, r1
 8003886:	4943      	ldr	r1, [pc, #268]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388c:	4b41      	ldr	r3, [pc, #260]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a40      	ldr	r2, [pc, #256]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 8003892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003896:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003898:	4b3e      	ldr	r3, [pc, #248]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a3d      	ldr	r2, [pc, #244]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe fbca 	bl	800203c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fe fbc6 	bl	800203c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e066      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	4b35      	ldr	r3, [pc, #212]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x530>
 80038ca:	e05e      	b.n	800398a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038cc:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a30      	ldr	r2, [pc, #192]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 80038d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe fbb0 	bl	800203c <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe fbac 	bl	800203c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e04c      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f2:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038fe:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	4924      	ldr	r1, [pc, #144]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 8003904:	4b25      	ldr	r3, [pc, #148]	@ (800399c <HAL_RCC_OscConfig+0x620>)
 8003906:	4013      	ands	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
 800390a:	e03e      	b.n	800398a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e039      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003918:	4b1e      	ldr	r3, [pc, #120]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0203 	and.w	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	429a      	cmp	r2, r3
 800392a:	d12c      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	3b01      	subs	r3, #1
 8003938:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d123      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d11b      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d113      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	3b01      	subs	r3, #1
 800396c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d109      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	019f800c 	.word	0x019f800c
 800399c:	feeefffc 	.word	0xfeeefffc

080039a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e11e      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b8:	4b91      	ldr	r3, [pc, #580]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d910      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b8e      	ldr	r3, [pc, #568]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 020f 	bic.w	r2, r3, #15
 80039ce:	498c      	ldr	r1, [pc, #560]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e106      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d073      	beq.n	8003adc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d129      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fc:	4b81      	ldr	r3, [pc, #516]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0f4      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a0c:	f000 f99e 	bl	8003d4c <RCC_GetSysClockFreqFromPLLSource>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4a7c      	ldr	r2, [pc, #496]	@ (8003c08 <HAL_RCC_ClockConfig+0x268>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d93f      	bls.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d033      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d12f      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a3a:	4b72      	ldr	r3, [pc, #456]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a42:	4a70      	ldr	r2, [pc, #448]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e024      	b.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a58:	4b6a      	ldr	r3, [pc, #424]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0c6      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a68:	4b66      	ldr	r3, [pc, #408]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0be      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a78:	f000 f8ce 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4a61      	ldr	r2, [pc, #388]	@ (8003c08 <HAL_RCC_ClockConfig+0x268>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d909      	bls.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a86:	4b5f      	ldr	r3, [pc, #380]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4957      	ldr	r1, [pc, #348]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aac:	f7fe fac6 	bl	800203c <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab4:	f7fe fac2 	bl	800203c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e095      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	4b4e      	ldr	r3, [pc, #312]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 020c 	and.w	r2, r3, #12
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1eb      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d023      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af4:	4b43      	ldr	r3, [pc, #268]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a42      	ldr	r2, [pc, #264]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003afe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b14:	4a3b      	ldr	r2, [pc, #236]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4936      	ldr	r1, [pc, #216]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b80      	cmp	r3, #128	@ 0x80
 8003b34:	d105      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b36:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4a32      	ldr	r2, [pc, #200]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b42:	4b2f      	ldr	r3, [pc, #188]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d21d      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 020f 	bic.w	r2, r3, #15
 8003b58:	4929      	ldr	r1, [pc, #164]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b60:	f7fe fa6c 	bl	800203c <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fe fa68 	bl	800203c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e03b      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1ed      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4917      	ldr	r1, [pc, #92]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	490f      	ldr	r1, [pc, #60]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bca:	f000 f825 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490c      	ldr	r1, [pc, #48]	@ (8003c0c <HAL_RCC_ClockConfig+0x26c>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	fa22 f303 	lsr.w	r3, r2, r3
 8003be6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c10 <HAL_RCC_ClockConfig+0x270>)
 8003be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bea:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <HAL_RCC_ClockConfig+0x274>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe f9d8 	bl	8001fa4 <HAL_InitTick>
 8003bf4:	4603      	mov	r3, r0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40022000 	.word	0x40022000
 8003c04:	40021000 	.word	0x40021000
 8003c08:	04c4b400 	.word	0x04c4b400
 8003c0c:	08007d94 	.word	0x08007d94
 8003c10:	20000008 	.word	0x20000008
 8003c14:	2000000c 	.word	0x2000000c

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d102      	bne.n	8003c30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	e047      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c30:	4b27      	ldr	r3, [pc, #156]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c3c:	4b26      	ldr	r3, [pc, #152]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	e03e      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c42:	4b23      	ldr	r3, [pc, #140]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d136      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c58:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	3301      	adds	r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c76:	68d2      	ldr	r2, [r2, #12]
 8003c78:	0a12      	lsrs	r2, r2, #8
 8003c7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
      break;
 8003c84:	e00c      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c86:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	4a10      	ldr	r2, [pc, #64]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	0a12      	lsrs	r2, r2, #8
 8003c94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c98:	fb02 f303 	mul.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
      break;
 8003c9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0e5b      	lsrs	r3, r3, #25
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	3301      	adds	r3, #1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	e001      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cc0:	693b      	ldr	r3, [r7, #16]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	00f42400 	.word	0x00f42400
 8003cd8:	007a1200 	.word	0x007a1200

08003cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	@ (8003cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000008 	.word	0x20000008

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cf8:	f7ff fff0 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4904      	ldr	r1, [pc, #16]	@ (8003d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	08007da4 	.word	0x08007da4

08003d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d24:	f7ff ffda 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0adb      	lsrs	r3, r3, #11
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4904      	ldr	r1, [pc, #16]	@ (8003d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08007da4 	.word	0x08007da4

08003d4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d52:	4b1e      	ldr	r3, [pc, #120]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d10c      	bne.n	8003d8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d70:	4a17      	ldr	r2, [pc, #92]	@ (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	4a14      	ldr	r2, [pc, #80]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d7a:	68d2      	ldr	r2, [r2, #12]
 8003d7c:	0a12      	lsrs	r2, r2, #8
 8003d7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	617b      	str	r3, [r7, #20]
    break;
 8003d88:	e00c      	b.n	8003da4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d8a:	4a12      	ldr	r2, [pc, #72]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	4a0e      	ldr	r2, [pc, #56]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	0a12      	lsrs	r2, r2, #8
 8003d98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
    break;
 8003da2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	0e5b      	lsrs	r3, r3, #25
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dbe:	687b      	ldr	r3, [r7, #4]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	007a1200 	.word	0x007a1200
 8003dd4:	00f42400 	.word	0x00f42400

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de0:	2300      	movs	r3, #0
 8003de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de4:	2300      	movs	r3, #0
 8003de6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8098 	beq.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b43      	ldr	r3, [pc, #268]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b40      	ldr	r3, [pc, #256]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	4a3f      	ldr	r2, [pc, #252]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e12:	4b3d      	ldr	r3, [pc, #244]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e22:	4b3a      	ldr	r3, [pc, #232]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a39      	ldr	r2, [pc, #228]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e2e:	f7fe f905 	bl	800203c <HAL_GetTick>
 8003e32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e34:	e009      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fe f901 	bl	800203c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d902      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	74fb      	strb	r3, [r7, #19]
        break;
 8003e48:	e005      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e4a:	4b30      	ldr	r3, [pc, #192]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ef      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d159      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01e      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d019      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e78:	4b23      	ldr	r3, [pc, #140]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e84:	4b20      	ldr	r3, [pc, #128]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e94:	4b1c      	ldr	r3, [pc, #112]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ea4:	4a18      	ldr	r2, [pc, #96]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fe f8c1 	bl	800203c <HAL_GetTick>
 8003eba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ebc:	e00b      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fe f8bd 	bl	800203c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d902      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ed4:	e006      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ec      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eea:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	4903      	ldr	r1, [pc, #12]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f00:	e008      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	74bb      	strb	r3, [r7, #18]
 8003f06:	e005      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f14:	7c7b      	ldrb	r3, [r7, #17]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1a:	4ba6      	ldr	r3, [pc, #664]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	4aa5      	ldr	r2, [pc, #660]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f32:	4ba0      	ldr	r3, [pc, #640]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f38:	f023 0203 	bic.w	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	499c      	ldr	r1, [pc, #624]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f54:	4b97      	ldr	r3, [pc, #604]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	f023 020c 	bic.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4994      	ldr	r1, [pc, #592]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f76:	4b8f      	ldr	r3, [pc, #572]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	498b      	ldr	r1, [pc, #556]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f98:	4b86      	ldr	r3, [pc, #536]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	4983      	ldr	r1, [pc, #524]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fba:	4b7e      	ldr	r3, [pc, #504]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	497a      	ldr	r1, [pc, #488]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fdc:	4b75      	ldr	r3, [pc, #468]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	4972      	ldr	r1, [pc, #456]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4969      	ldr	r1, [pc, #420]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004020:	4b64      	ldr	r3, [pc, #400]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4961      	ldr	r1, [pc, #388]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004042:	4b5c      	ldr	r3, [pc, #368]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	4958      	ldr	r1, [pc, #352]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004064:	4b53      	ldr	r3, [pc, #332]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	4950      	ldr	r1, [pc, #320]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004082:	d105      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004084:	4b4b      	ldr	r3, [pc, #300]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a4a      	ldr	r2, [pc, #296]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800408e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800409c:	4b45      	ldr	r3, [pc, #276]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	4942      	ldr	r1, [pc, #264]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ba:	d105      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040bc:	4b3d      	ldr	r3, [pc, #244]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a3c      	ldr	r2, [pc, #240]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d015      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040d4:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	4934      	ldr	r1, [pc, #208]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f2:	d105      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f4:	4b2f      	ldr	r3, [pc, #188]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a2e      	ldr	r2, [pc, #184]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d015      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800410c:	4b29      	ldr	r3, [pc, #164]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411a:	4926      	ldr	r1, [pc, #152]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412a:	d105      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412c:	4b21      	ldr	r3, [pc, #132]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a20      	ldr	r2, [pc, #128]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004136:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004144:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	4918      	ldr	r1, [pc, #96]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004162:	d105      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004164:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a12      	ldr	r2, [pc, #72]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800417c:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	490a      	ldr	r1, [pc, #40]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800419a:	d105      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000

080041b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e042      	b.n	8004250 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fd fe47 	bl	8001e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2224      	movs	r2, #36	@ 0x24
 80041e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fb82 	bl	800490c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f8b3 	bl	8004374 <UART_SetConfig>
 800420e:	4603      	mov	r3, r0
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e01b      	b.n	8004250 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fc01 	bl	8004a50 <UART_CheckIdleState>
 800424e:	4603      	mov	r3, r0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	@ 0x28
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426e:	2b20      	cmp	r3, #32
 8004270:	d17b      	bne.n	800436a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_UART_Transmit+0x26>
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e074      	b.n	800436c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2221      	movs	r2, #33	@ 0x21
 800428e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004292:	f7fd fed3 	bl	800203c <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b0:	d108      	bne.n	80042c4 <HAL_UART_Transmit+0x6c>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e003      	b.n	80042cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042cc:	e030      	b.n	8004330 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2180      	movs	r1, #128	@ 0x80
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fc63 	bl	8004ba4 <UART_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e03d      	b.n	800436c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004304:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	3302      	adds	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e007      	b.n	800431e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1c8      	bne.n	80042ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	2140      	movs	r1, #64	@ 0x40
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fc2c 	bl	8004ba4 <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e006      	b.n	800436c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004378:	b08c      	sub	sp, #48	@ 0x30
 800437a:	af00      	add	r7, sp, #0
 800437c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	431a      	orrs	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	431a      	orrs	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4313      	orrs	r3, r2
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4bab      	ldr	r3, [pc, #684]	@ (8004650 <UART_SetConfig+0x2dc>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4aa0      	ldr	r2, [pc, #640]	@ (8004654 <UART_SetConfig+0x2e0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043dc:	4313      	orrs	r3, r2
 80043de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	f023 010f 	bic.w	r1, r3, #15
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a91      	ldr	r2, [pc, #580]	@ (8004658 <UART_SetConfig+0x2e4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d125      	bne.n	8004464 <UART_SetConfig+0xf0>
 8004418:	4b90      	ldr	r3, [pc, #576]	@ (800465c <UART_SetConfig+0x2e8>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b03      	cmp	r3, #3
 8004424:	d81a      	bhi.n	800445c <UART_SetConfig+0xe8>
 8004426:	a201      	add	r2, pc, #4	@ (adr r2, 800442c <UART_SetConfig+0xb8>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	0800443d 	.word	0x0800443d
 8004430:	0800444d 	.word	0x0800444d
 8004434:	08004445 	.word	0x08004445
 8004438:	08004455 	.word	0x08004455
 800443c:	2301      	movs	r3, #1
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004442:	e0d6      	b.n	80045f2 <UART_SetConfig+0x27e>
 8004444:	2302      	movs	r3, #2
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444a:	e0d2      	b.n	80045f2 <UART_SetConfig+0x27e>
 800444c:	2304      	movs	r3, #4
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004452:	e0ce      	b.n	80045f2 <UART_SetConfig+0x27e>
 8004454:	2308      	movs	r3, #8
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800445a:	e0ca      	b.n	80045f2 <UART_SetConfig+0x27e>
 800445c:	2310      	movs	r3, #16
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004462:	e0c6      	b.n	80045f2 <UART_SetConfig+0x27e>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a7d      	ldr	r2, [pc, #500]	@ (8004660 <UART_SetConfig+0x2ec>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d138      	bne.n	80044e0 <UART_SetConfig+0x16c>
 800446e:	4b7b      	ldr	r3, [pc, #492]	@ (800465c <UART_SetConfig+0x2e8>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d82d      	bhi.n	80044d8 <UART_SetConfig+0x164>
 800447c:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <UART_SetConfig+0x110>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080044d9 	.word	0x080044d9
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044d9 	.word	0x080044d9
 8004494:	080044c9 	.word	0x080044c9
 8004498:	080044d9 	.word	0x080044d9
 800449c:	080044d9 	.word	0x080044d9
 80044a0:	080044d9 	.word	0x080044d9
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	080044d9 	.word	0x080044d9
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044d1 	.word	0x080044d1
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044be:	e098      	b.n	80045f2 <UART_SetConfig+0x27e>
 80044c0:	2302      	movs	r3, #2
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044c6:	e094      	b.n	80045f2 <UART_SetConfig+0x27e>
 80044c8:	2304      	movs	r3, #4
 80044ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ce:	e090      	b.n	80045f2 <UART_SetConfig+0x27e>
 80044d0:	2308      	movs	r3, #8
 80044d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d6:	e08c      	b.n	80045f2 <UART_SetConfig+0x27e>
 80044d8:	2310      	movs	r3, #16
 80044da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044de:	e088      	b.n	80045f2 <UART_SetConfig+0x27e>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004664 <UART_SetConfig+0x2f0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d125      	bne.n	8004536 <UART_SetConfig+0x1c2>
 80044ea:	4b5c      	ldr	r3, [pc, #368]	@ (800465c <UART_SetConfig+0x2e8>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044f4:	2b30      	cmp	r3, #48	@ 0x30
 80044f6:	d016      	beq.n	8004526 <UART_SetConfig+0x1b2>
 80044f8:	2b30      	cmp	r3, #48	@ 0x30
 80044fa:	d818      	bhi.n	800452e <UART_SetConfig+0x1ba>
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d00a      	beq.n	8004516 <UART_SetConfig+0x1a2>
 8004500:	2b20      	cmp	r3, #32
 8004502:	d814      	bhi.n	800452e <UART_SetConfig+0x1ba>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <UART_SetConfig+0x19a>
 8004508:	2b10      	cmp	r3, #16
 800450a:	d008      	beq.n	800451e <UART_SetConfig+0x1aa>
 800450c:	e00f      	b.n	800452e <UART_SetConfig+0x1ba>
 800450e:	2300      	movs	r3, #0
 8004510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004514:	e06d      	b.n	80045f2 <UART_SetConfig+0x27e>
 8004516:	2302      	movs	r3, #2
 8004518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800451c:	e069      	b.n	80045f2 <UART_SetConfig+0x27e>
 800451e:	2304      	movs	r3, #4
 8004520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004524:	e065      	b.n	80045f2 <UART_SetConfig+0x27e>
 8004526:	2308      	movs	r3, #8
 8004528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452c:	e061      	b.n	80045f2 <UART_SetConfig+0x27e>
 800452e:	2310      	movs	r3, #16
 8004530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004534:	e05d      	b.n	80045f2 <UART_SetConfig+0x27e>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a4b      	ldr	r2, [pc, #300]	@ (8004668 <UART_SetConfig+0x2f4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d125      	bne.n	800458c <UART_SetConfig+0x218>
 8004540:	4b46      	ldr	r3, [pc, #280]	@ (800465c <UART_SetConfig+0x2e8>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800454a:	2bc0      	cmp	r3, #192	@ 0xc0
 800454c:	d016      	beq.n	800457c <UART_SetConfig+0x208>
 800454e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004550:	d818      	bhi.n	8004584 <UART_SetConfig+0x210>
 8004552:	2b80      	cmp	r3, #128	@ 0x80
 8004554:	d00a      	beq.n	800456c <UART_SetConfig+0x1f8>
 8004556:	2b80      	cmp	r3, #128	@ 0x80
 8004558:	d814      	bhi.n	8004584 <UART_SetConfig+0x210>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <UART_SetConfig+0x1f0>
 800455e:	2b40      	cmp	r3, #64	@ 0x40
 8004560:	d008      	beq.n	8004574 <UART_SetConfig+0x200>
 8004562:	e00f      	b.n	8004584 <UART_SetConfig+0x210>
 8004564:	2300      	movs	r3, #0
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800456a:	e042      	b.n	80045f2 <UART_SetConfig+0x27e>
 800456c:	2302      	movs	r3, #2
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004572:	e03e      	b.n	80045f2 <UART_SetConfig+0x27e>
 8004574:	2304      	movs	r3, #4
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457a:	e03a      	b.n	80045f2 <UART_SetConfig+0x27e>
 800457c:	2308      	movs	r3, #8
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004582:	e036      	b.n	80045f2 <UART_SetConfig+0x27e>
 8004584:	2310      	movs	r3, #16
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458a:	e032      	b.n	80045f2 <UART_SetConfig+0x27e>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a30      	ldr	r2, [pc, #192]	@ (8004654 <UART_SetConfig+0x2e0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d12a      	bne.n	80045ec <UART_SetConfig+0x278>
 8004596:	4b31      	ldr	r3, [pc, #196]	@ (800465c <UART_SetConfig+0x2e8>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045a4:	d01a      	beq.n	80045dc <UART_SetConfig+0x268>
 80045a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045aa:	d81b      	bhi.n	80045e4 <UART_SetConfig+0x270>
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b0:	d00c      	beq.n	80045cc <UART_SetConfig+0x258>
 80045b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b6:	d815      	bhi.n	80045e4 <UART_SetConfig+0x270>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <UART_SetConfig+0x250>
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c0:	d008      	beq.n	80045d4 <UART_SetConfig+0x260>
 80045c2:	e00f      	b.n	80045e4 <UART_SetConfig+0x270>
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ca:	e012      	b.n	80045f2 <UART_SetConfig+0x27e>
 80045cc:	2302      	movs	r3, #2
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045d2:	e00e      	b.n	80045f2 <UART_SetConfig+0x27e>
 80045d4:	2304      	movs	r3, #4
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045da:	e00a      	b.n	80045f2 <UART_SetConfig+0x27e>
 80045dc:	2308      	movs	r3, #8
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e2:	e006      	b.n	80045f2 <UART_SetConfig+0x27e>
 80045e4:	2310      	movs	r3, #16
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ea:	e002      	b.n	80045f2 <UART_SetConfig+0x27e>
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a17      	ldr	r2, [pc, #92]	@ (8004654 <UART_SetConfig+0x2e0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	f040 80a8 	bne.w	800474e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004602:	2b08      	cmp	r3, #8
 8004604:	d834      	bhi.n	8004670 <UART_SetConfig+0x2fc>
 8004606:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <UART_SetConfig+0x298>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004631 	.word	0x08004631
 8004610:	08004671 	.word	0x08004671
 8004614:	08004639 	.word	0x08004639
 8004618:	08004671 	.word	0x08004671
 800461c:	0800463f 	.word	0x0800463f
 8004620:	08004671 	.word	0x08004671
 8004624:	08004671 	.word	0x08004671
 8004628:	08004671 	.word	0x08004671
 800462c:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7ff fb60 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8004634:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004636:	e021      	b.n	800467c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004638:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <UART_SetConfig+0x2f8>)
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800463c:	e01e      	b.n	800467c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463e:	f7ff faeb 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8004642:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004644:	e01a      	b.n	800467c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800464c:	e016      	b.n	800467c <UART_SetConfig+0x308>
 800464e:	bf00      	nop
 8004650:	cfff69f3 	.word	0xcfff69f3
 8004654:	40008000 	.word	0x40008000
 8004658:	40013800 	.word	0x40013800
 800465c:	40021000 	.word	0x40021000
 8004660:	40004400 	.word	0x40004400
 8004664:	40004800 	.word	0x40004800
 8004668:	40004c00 	.word	0x40004c00
 800466c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800467a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 812a 	beq.w	80048d8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	4a9e      	ldr	r2, [pc, #632]	@ (8004904 <UART_SetConfig+0x590>)
 800468a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800468e:	461a      	mov	r2, r3
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	fbb3 f3f2 	udiv	r3, r3, r2
 8004696:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d305      	bcc.n	80046b4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d903      	bls.n	80046bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046ba:	e10d      	b.n	80048d8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	2200      	movs	r2, #0
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	60fa      	str	r2, [r7, #12]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	4a8e      	ldr	r2, [pc, #568]	@ (8004904 <UART_SetConfig+0x590>)
 80046ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2200      	movs	r2, #0
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046de:	f7fc faab 	bl	8000c38 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	020b      	lsls	r3, r1, #8
 80046f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046f8:	0202      	lsls	r2, r0, #8
 80046fa:	6979      	ldr	r1, [r7, #20]
 80046fc:	6849      	ldr	r1, [r1, #4]
 80046fe:	0849      	lsrs	r1, r1, #1
 8004700:	2000      	movs	r0, #0
 8004702:	460c      	mov	r4, r1
 8004704:	4605      	mov	r5, r0
 8004706:	eb12 0804 	adds.w	r8, r2, r4
 800470a:	eb43 0905 	adc.w	r9, r3, r5
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	469a      	mov	sl, r3
 8004716:	4693      	mov	fp, r2
 8004718:	4652      	mov	r2, sl
 800471a:	465b      	mov	r3, fp
 800471c:	4640      	mov	r0, r8
 800471e:	4649      	mov	r1, r9
 8004720:	f7fc fa8a 	bl	8000c38 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4613      	mov	r3, r2
 800472a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004732:	d308      	bcc.n	8004746 <UART_SetConfig+0x3d2>
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473a:	d204      	bcs.n	8004746 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	e0c8      	b.n	80048d8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800474c:	e0c4      	b.n	80048d8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004756:	d167      	bne.n	8004828 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004758:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800475c:	2b08      	cmp	r3, #8
 800475e:	d828      	bhi.n	80047b2 <UART_SetConfig+0x43e>
 8004760:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <UART_SetConfig+0x3f4>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800478d 	.word	0x0800478d
 800476c:	08004795 	.word	0x08004795
 8004770:	0800479d 	.word	0x0800479d
 8004774:	080047b3 	.word	0x080047b3
 8004778:	080047a3 	.word	0x080047a3
 800477c:	080047b3 	.word	0x080047b3
 8004780:	080047b3 	.word	0x080047b3
 8004784:	080047b3 	.word	0x080047b3
 8004788:	080047ab 	.word	0x080047ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800478c:	f7ff fab2 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8004790:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004792:	e014      	b.n	80047be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004794:	f7ff fac4 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 8004798:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800479a:	e010      	b.n	80047be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800479c:	4b5a      	ldr	r3, [pc, #360]	@ (8004908 <UART_SetConfig+0x594>)
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047a0:	e00d      	b.n	80047be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a2:	f7ff fa39 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 80047a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047a8:	e009      	b.n	80047be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047b0:	e005      	b.n	80047be <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8089 	beq.w	80048d8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004904 <UART_SetConfig+0x590>)
 80047cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d8:	005a      	lsls	r2, r3, #1
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	441a      	add	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	d916      	bls.n	8004820 <UART_SetConfig+0x4ac>
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f8:	d212      	bcs.n	8004820 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f023 030f 	bic.w	r3, r3, #15
 8004802:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	b29a      	uxth	r2, r3
 8004810:	8bfb      	ldrh	r3, [r7, #30]
 8004812:	4313      	orrs	r3, r2
 8004814:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	8bfa      	ldrh	r2, [r7, #30]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	e05b      	b.n	80048d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004826:	e057      	b.n	80048d8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004828:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800482c:	2b08      	cmp	r3, #8
 800482e:	d828      	bhi.n	8004882 <UART_SetConfig+0x50e>
 8004830:	a201      	add	r2, pc, #4	@ (adr r2, 8004838 <UART_SetConfig+0x4c4>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800485d 	.word	0x0800485d
 800483c:	08004865 	.word	0x08004865
 8004840:	0800486d 	.word	0x0800486d
 8004844:	08004883 	.word	0x08004883
 8004848:	08004873 	.word	0x08004873
 800484c:	08004883 	.word	0x08004883
 8004850:	08004883 	.word	0x08004883
 8004854:	08004883 	.word	0x08004883
 8004858:	0800487b 	.word	0x0800487b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7ff fa4a 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8004860:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004862:	e014      	b.n	800488e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004864:	f7ff fa5c 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 8004868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800486a:	e010      	b.n	800488e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800486c:	4b26      	ldr	r3, [pc, #152]	@ (8004908 <UART_SetConfig+0x594>)
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004870:	e00d      	b.n	800488e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004872:	f7ff f9d1 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8004876:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004878:	e009      	b.n	800488e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004880:	e005      	b.n	800488e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800488c:	bf00      	nop
    }

    if (pclk != 0U)
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d021      	beq.n	80048d8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	4a1a      	ldr	r2, [pc, #104]	@ (8004904 <UART_SetConfig+0x590>)
 800489a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800489e:	461a      	mov	r2, r3
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	441a      	add	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	2b0f      	cmp	r3, #15
 80048bc:	d909      	bls.n	80048d2 <UART_SetConfig+0x55e>
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c4:	d205      	bcs.n	80048d2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
 80048d0:	e002      	b.n	80048d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2201      	movs	r2, #1
 80048dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2200      	movs	r2, #0
 80048f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80048f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3730      	adds	r7, #48	@ 0x30
 80048fc:	46bd      	mov	sp, r7
 80048fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004902:	bf00      	nop
 8004904:	08007dbc 	.word	0x08007dbc
 8004908:	00f42400 	.word	0x00f42400

0800490c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01a      	beq.n	8004a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a0a:	d10a      	bne.n	8004a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b098      	sub	sp, #96	@ 0x60
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a60:	f7fd faec 	bl	800203c <HAL_GetTick>
 8004a64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d12f      	bne.n	8004ad4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f88e 	bl	8004ba4 <UART_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d022      	beq.n	8004ad4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e6      	bne.n	8004a8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e063      	b.n	8004b9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d149      	bne.n	8004b76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aea:	2200      	movs	r2, #0
 8004aec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f857 	bl	8004ba4 <UART_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d03c      	beq.n	8004b76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	623b      	str	r3, [r7, #32]
   return(result);
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e6      	bne.n	8004afc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3308      	adds	r3, #8
 8004b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b4e:	61fa      	str	r2, [r7, #28]
 8004b50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	69b9      	ldr	r1, [r7, #24]
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e5      	bne.n	8004b2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e012      	b.n	8004b9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3758      	adds	r7, #88	@ 0x58
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb4:	e04f      	b.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d04b      	beq.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fd fa3d 	bl	800203c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e04e      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d037      	beq.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b80      	cmp	r3, #128	@ 0x80
 8004bea:	d034      	beq.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b40      	cmp	r3, #64	@ 0x40
 8004bf0:	d031      	beq.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d110      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2208      	movs	r2, #8
 8004c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f838 	bl	8004c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2208      	movs	r2, #8
 8004c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e029      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c30:	d111      	bne.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f81e 	bl	8004c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e00f      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	bf0c      	ite	eq
 8004c66:	2301      	moveq	r3, #1
 8004c68:	2300      	movne	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d0a0      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b095      	sub	sp, #84	@ 0x54
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ca6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004caa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e3      	bne.n	8004cb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d118      	bne.n	8004d2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f023 0310 	bic.w	r3, r3, #16
 8004d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6979      	ldr	r1, [r7, #20]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	613b      	str	r3, [r7, #16]
   return(result);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e6      	bne.n	8004cf8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d3e:	bf00      	nop
 8004d40:	3754      	adds	r7, #84	@ 0x54
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e027      	b.n	8004db0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	@ 0x24
 8004d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004d8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e02d      	b.n	8004e30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	@ 0x24
 8004de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f84f 	bl	8004eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e02d      	b.n	8004eac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	@ 0x24
 8004e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f811 	bl	8004eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d108      	bne.n	8004ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ed4:	e031      	b.n	8004f3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eda:	2308      	movs	r3, #8
 8004edc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	0e5b      	lsrs	r3, r3, #25
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	0f5b      	lsrs	r3, r3, #29
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004efe:	7bbb      	ldrb	r3, [r7, #14]
 8004f00:	7b3a      	ldrb	r2, [r7, #12]
 8004f02:	4911      	ldr	r1, [pc, #68]	@ (8004f48 <UARTEx_SetNbDataToProcess+0x94>)
 8004f04:	5c8a      	ldrb	r2, [r1, r2]
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f0a:	7b3a      	ldrb	r2, [r7, #12]
 8004f0c:	490f      	ldr	r1, [pc, #60]	@ (8004f4c <UARTEx_SetNbDataToProcess+0x98>)
 8004f0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	7b7a      	ldrb	r2, [r7, #13]
 8004f20:	4909      	ldr	r1, [pc, #36]	@ (8004f48 <UARTEx_SetNbDataToProcess+0x94>)
 8004f22:	5c8a      	ldrb	r2, [r1, r2]
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f28:	7b7a      	ldrb	r2, [r7, #13]
 8004f2a:	4908      	ldr	r1, [pc, #32]	@ (8004f4c <UARTEx_SetNbDataToProcess+0x98>)
 8004f2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	08007dd4 	.word	0x08007dd4
 8004f4c:	08007ddc 	.word	0x08007ddc

08004f50 <__cvt>:
 8004f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	ec57 6b10 	vmov	r6, r7, d0
 8004f58:	2f00      	cmp	r7, #0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	463b      	mov	r3, r7
 8004f60:	bfbb      	ittet	lt
 8004f62:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f66:	461f      	movlt	r7, r3
 8004f68:	2300      	movge	r3, #0
 8004f6a:	232d      	movlt	r3, #45	@ 0x2d
 8004f6c:	700b      	strb	r3, [r1, #0]
 8004f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f74:	4691      	mov	r9, r2
 8004f76:	f023 0820 	bic.w	r8, r3, #32
 8004f7a:	bfbc      	itt	lt
 8004f7c:	4632      	movlt	r2, r6
 8004f7e:	4616      	movlt	r6, r2
 8004f80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f84:	d005      	beq.n	8004f92 <__cvt+0x42>
 8004f86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f8a:	d100      	bne.n	8004f8e <__cvt+0x3e>
 8004f8c:	3401      	adds	r4, #1
 8004f8e:	2102      	movs	r1, #2
 8004f90:	e000      	b.n	8004f94 <__cvt+0x44>
 8004f92:	2103      	movs	r1, #3
 8004f94:	ab03      	add	r3, sp, #12
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	ab02      	add	r3, sp, #8
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	ec47 6b10 	vmov	d0, r6, r7
 8004fa0:	4653      	mov	r3, sl
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	f000 ff60 	bl	8005e68 <_dtoa_r>
 8004fa8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004fac:	4605      	mov	r5, r0
 8004fae:	d119      	bne.n	8004fe4 <__cvt+0x94>
 8004fb0:	f019 0f01 	tst.w	r9, #1
 8004fb4:	d00e      	beq.n	8004fd4 <__cvt+0x84>
 8004fb6:	eb00 0904 	add.w	r9, r0, r4
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb fda9 	bl	8000b18 <__aeabi_dcmpeq>
 8004fc6:	b108      	cbz	r0, 8004fcc <__cvt+0x7c>
 8004fc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fcc:	2230      	movs	r2, #48	@ 0x30
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	454b      	cmp	r3, r9
 8004fd2:	d31e      	bcc.n	8005012 <__cvt+0xc2>
 8004fd4:	9b03      	ldr	r3, [sp, #12]
 8004fd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fd8:	1b5b      	subs	r3, r3, r5
 8004fda:	4628      	mov	r0, r5
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	b004      	add	sp, #16
 8004fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fe8:	eb00 0904 	add.w	r9, r0, r4
 8004fec:	d1e5      	bne.n	8004fba <__cvt+0x6a>
 8004fee:	7803      	ldrb	r3, [r0, #0]
 8004ff0:	2b30      	cmp	r3, #48	@ 0x30
 8004ff2:	d10a      	bne.n	800500a <__cvt+0xba>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	f7fb fd8c 	bl	8000b18 <__aeabi_dcmpeq>
 8005000:	b918      	cbnz	r0, 800500a <__cvt+0xba>
 8005002:	f1c4 0401 	rsb	r4, r4, #1
 8005006:	f8ca 4000 	str.w	r4, [sl]
 800500a:	f8da 3000 	ldr.w	r3, [sl]
 800500e:	4499      	add	r9, r3
 8005010:	e7d3      	b.n	8004fba <__cvt+0x6a>
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	9103      	str	r1, [sp, #12]
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e7d9      	b.n	8004fce <__cvt+0x7e>

0800501a <__exponent>:
 800501a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800501c:	2900      	cmp	r1, #0
 800501e:	bfba      	itte	lt
 8005020:	4249      	neglt	r1, r1
 8005022:	232d      	movlt	r3, #45	@ 0x2d
 8005024:	232b      	movge	r3, #43	@ 0x2b
 8005026:	2909      	cmp	r1, #9
 8005028:	7002      	strb	r2, [r0, #0]
 800502a:	7043      	strb	r3, [r0, #1]
 800502c:	dd29      	ble.n	8005082 <__exponent+0x68>
 800502e:	f10d 0307 	add.w	r3, sp, #7
 8005032:	461d      	mov	r5, r3
 8005034:	270a      	movs	r7, #10
 8005036:	461a      	mov	r2, r3
 8005038:	fbb1 f6f7 	udiv	r6, r1, r7
 800503c:	fb07 1416 	mls	r4, r7, r6, r1
 8005040:	3430      	adds	r4, #48	@ 0x30
 8005042:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005046:	460c      	mov	r4, r1
 8005048:	2c63      	cmp	r4, #99	@ 0x63
 800504a:	f103 33ff 	add.w	r3, r3, #4294967295
 800504e:	4631      	mov	r1, r6
 8005050:	dcf1      	bgt.n	8005036 <__exponent+0x1c>
 8005052:	3130      	adds	r1, #48	@ 0x30
 8005054:	1e94      	subs	r4, r2, #2
 8005056:	f803 1c01 	strb.w	r1, [r3, #-1]
 800505a:	1c41      	adds	r1, r0, #1
 800505c:	4623      	mov	r3, r4
 800505e:	42ab      	cmp	r3, r5
 8005060:	d30a      	bcc.n	8005078 <__exponent+0x5e>
 8005062:	f10d 0309 	add.w	r3, sp, #9
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	42ac      	cmp	r4, r5
 800506a:	bf88      	it	hi
 800506c:	2300      	movhi	r3, #0
 800506e:	3302      	adds	r3, #2
 8005070:	4403      	add	r3, r0
 8005072:	1a18      	subs	r0, r3, r0
 8005074:	b003      	add	sp, #12
 8005076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005078:	f813 6b01 	ldrb.w	r6, [r3], #1
 800507c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005080:	e7ed      	b.n	800505e <__exponent+0x44>
 8005082:	2330      	movs	r3, #48	@ 0x30
 8005084:	3130      	adds	r1, #48	@ 0x30
 8005086:	7083      	strb	r3, [r0, #2]
 8005088:	70c1      	strb	r1, [r0, #3]
 800508a:	1d03      	adds	r3, r0, #4
 800508c:	e7f1      	b.n	8005072 <__exponent+0x58>
	...

08005090 <_printf_float>:
 8005090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005094:	b08d      	sub	sp, #52	@ 0x34
 8005096:	460c      	mov	r4, r1
 8005098:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800509c:	4616      	mov	r6, r2
 800509e:	461f      	mov	r7, r3
 80050a0:	4605      	mov	r5, r0
 80050a2:	f000 fddf 	bl	8005c64 <_localeconv_r>
 80050a6:	6803      	ldr	r3, [r0, #0]
 80050a8:	9304      	str	r3, [sp, #16]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fb f908 	bl	80002c0 <strlen>
 80050b0:	2300      	movs	r3, #0
 80050b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80050b4:	f8d8 3000 	ldr.w	r3, [r8]
 80050b8:	9005      	str	r0, [sp, #20]
 80050ba:	3307      	adds	r3, #7
 80050bc:	f023 0307 	bic.w	r3, r3, #7
 80050c0:	f103 0208 	add.w	r2, r3, #8
 80050c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80050c8:	f8d4 b000 	ldr.w	fp, [r4]
 80050cc:	f8c8 2000 	str.w	r2, [r8]
 80050d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050d8:	9307      	str	r3, [sp, #28]
 80050da:	f8cd 8018 	str.w	r8, [sp, #24]
 80050de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050e6:	4b9c      	ldr	r3, [pc, #624]	@ (8005358 <_printf_float+0x2c8>)
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	f7fb fd46 	bl	8000b7c <__aeabi_dcmpun>
 80050f0:	bb70      	cbnz	r0, 8005150 <_printf_float+0xc0>
 80050f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050f6:	4b98      	ldr	r3, [pc, #608]	@ (8005358 <_printf_float+0x2c8>)
 80050f8:	f04f 32ff 	mov.w	r2, #4294967295
 80050fc:	f7fb fd20 	bl	8000b40 <__aeabi_dcmple>
 8005100:	bb30      	cbnz	r0, 8005150 <_printf_float+0xc0>
 8005102:	2200      	movs	r2, #0
 8005104:	2300      	movs	r3, #0
 8005106:	4640      	mov	r0, r8
 8005108:	4649      	mov	r1, r9
 800510a:	f7fb fd0f 	bl	8000b2c <__aeabi_dcmplt>
 800510e:	b110      	cbz	r0, 8005116 <_printf_float+0x86>
 8005110:	232d      	movs	r3, #45	@ 0x2d
 8005112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005116:	4a91      	ldr	r2, [pc, #580]	@ (800535c <_printf_float+0x2cc>)
 8005118:	4b91      	ldr	r3, [pc, #580]	@ (8005360 <_printf_float+0x2d0>)
 800511a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800511e:	bf94      	ite	ls
 8005120:	4690      	movls	r8, r2
 8005122:	4698      	movhi	r8, r3
 8005124:	2303      	movs	r3, #3
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	f02b 0304 	bic.w	r3, fp, #4
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	f04f 0900 	mov.w	r9, #0
 8005132:	9700      	str	r7, [sp, #0]
 8005134:	4633      	mov	r3, r6
 8005136:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005138:	4621      	mov	r1, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f000 f9d2 	bl	80054e4 <_printf_common>
 8005140:	3001      	adds	r0, #1
 8005142:	f040 808d 	bne.w	8005260 <_printf_float+0x1d0>
 8005146:	f04f 30ff 	mov.w	r0, #4294967295
 800514a:	b00d      	add	sp, #52	@ 0x34
 800514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	4640      	mov	r0, r8
 8005156:	4649      	mov	r1, r9
 8005158:	f7fb fd10 	bl	8000b7c <__aeabi_dcmpun>
 800515c:	b140      	cbz	r0, 8005170 <_printf_float+0xe0>
 800515e:	464b      	mov	r3, r9
 8005160:	2b00      	cmp	r3, #0
 8005162:	bfbc      	itt	lt
 8005164:	232d      	movlt	r3, #45	@ 0x2d
 8005166:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800516a:	4a7e      	ldr	r2, [pc, #504]	@ (8005364 <_printf_float+0x2d4>)
 800516c:	4b7e      	ldr	r3, [pc, #504]	@ (8005368 <_printf_float+0x2d8>)
 800516e:	e7d4      	b.n	800511a <_printf_float+0x8a>
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005176:	9206      	str	r2, [sp, #24]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	d13b      	bne.n	80051f4 <_printf_float+0x164>
 800517c:	2306      	movs	r3, #6
 800517e:	6063      	str	r3, [r4, #4]
 8005180:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005184:	2300      	movs	r3, #0
 8005186:	6022      	str	r2, [r4, #0]
 8005188:	9303      	str	r3, [sp, #12]
 800518a:	ab0a      	add	r3, sp, #40	@ 0x28
 800518c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005190:	ab09      	add	r3, sp, #36	@ 0x24
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	6861      	ldr	r1, [r4, #4]
 8005196:	ec49 8b10 	vmov	d0, r8, r9
 800519a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800519e:	4628      	mov	r0, r5
 80051a0:	f7ff fed6 	bl	8004f50 <__cvt>
 80051a4:	9b06      	ldr	r3, [sp, #24]
 80051a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80051a8:	2b47      	cmp	r3, #71	@ 0x47
 80051aa:	4680      	mov	r8, r0
 80051ac:	d129      	bne.n	8005202 <_printf_float+0x172>
 80051ae:	1cc8      	adds	r0, r1, #3
 80051b0:	db02      	blt.n	80051b8 <_printf_float+0x128>
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	4299      	cmp	r1, r3
 80051b6:	dd41      	ble.n	800523c <_printf_float+0x1ac>
 80051b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80051bc:	fa5f fa8a 	uxtb.w	sl, sl
 80051c0:	3901      	subs	r1, #1
 80051c2:	4652      	mov	r2, sl
 80051c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80051c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80051ca:	f7ff ff26 	bl	800501a <__exponent>
 80051ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051d0:	1813      	adds	r3, r2, r0
 80051d2:	2a01      	cmp	r2, #1
 80051d4:	4681      	mov	r9, r0
 80051d6:	6123      	str	r3, [r4, #16]
 80051d8:	dc02      	bgt.n	80051e0 <_printf_float+0x150>
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	07d2      	lsls	r2, r2, #31
 80051de:	d501      	bpl.n	80051e4 <_printf_float+0x154>
 80051e0:	3301      	adds	r3, #1
 80051e2:	6123      	str	r3, [r4, #16]
 80051e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0a2      	beq.n	8005132 <_printf_float+0xa2>
 80051ec:	232d      	movs	r3, #45	@ 0x2d
 80051ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051f2:	e79e      	b.n	8005132 <_printf_float+0xa2>
 80051f4:	9a06      	ldr	r2, [sp, #24]
 80051f6:	2a47      	cmp	r2, #71	@ 0x47
 80051f8:	d1c2      	bne.n	8005180 <_printf_float+0xf0>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1c0      	bne.n	8005180 <_printf_float+0xf0>
 80051fe:	2301      	movs	r3, #1
 8005200:	e7bd      	b.n	800517e <_printf_float+0xee>
 8005202:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005206:	d9db      	bls.n	80051c0 <_printf_float+0x130>
 8005208:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800520c:	d118      	bne.n	8005240 <_printf_float+0x1b0>
 800520e:	2900      	cmp	r1, #0
 8005210:	6863      	ldr	r3, [r4, #4]
 8005212:	dd0b      	ble.n	800522c <_printf_float+0x19c>
 8005214:	6121      	str	r1, [r4, #16]
 8005216:	b913      	cbnz	r3, 800521e <_printf_float+0x18e>
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	07d0      	lsls	r0, r2, #31
 800521c:	d502      	bpl.n	8005224 <_printf_float+0x194>
 800521e:	3301      	adds	r3, #1
 8005220:	440b      	add	r3, r1
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005226:	f04f 0900 	mov.w	r9, #0
 800522a:	e7db      	b.n	80051e4 <_printf_float+0x154>
 800522c:	b913      	cbnz	r3, 8005234 <_printf_float+0x1a4>
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	07d2      	lsls	r2, r2, #31
 8005232:	d501      	bpl.n	8005238 <_printf_float+0x1a8>
 8005234:	3302      	adds	r3, #2
 8005236:	e7f4      	b.n	8005222 <_printf_float+0x192>
 8005238:	2301      	movs	r3, #1
 800523a:	e7f2      	b.n	8005222 <_printf_float+0x192>
 800523c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005242:	4299      	cmp	r1, r3
 8005244:	db05      	blt.n	8005252 <_printf_float+0x1c2>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	6121      	str	r1, [r4, #16]
 800524a:	07d8      	lsls	r0, r3, #31
 800524c:	d5ea      	bpl.n	8005224 <_printf_float+0x194>
 800524e:	1c4b      	adds	r3, r1, #1
 8005250:	e7e7      	b.n	8005222 <_printf_float+0x192>
 8005252:	2900      	cmp	r1, #0
 8005254:	bfd4      	ite	le
 8005256:	f1c1 0202 	rsble	r2, r1, #2
 800525a:	2201      	movgt	r2, #1
 800525c:	4413      	add	r3, r2
 800525e:	e7e0      	b.n	8005222 <_printf_float+0x192>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	055a      	lsls	r2, r3, #21
 8005264:	d407      	bmi.n	8005276 <_printf_float+0x1e6>
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	4642      	mov	r2, r8
 800526a:	4631      	mov	r1, r6
 800526c:	4628      	mov	r0, r5
 800526e:	47b8      	blx	r7
 8005270:	3001      	adds	r0, #1
 8005272:	d12b      	bne.n	80052cc <_printf_float+0x23c>
 8005274:	e767      	b.n	8005146 <_printf_float+0xb6>
 8005276:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800527a:	f240 80dd 	bls.w	8005438 <_printf_float+0x3a8>
 800527e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005282:	2200      	movs	r2, #0
 8005284:	2300      	movs	r3, #0
 8005286:	f7fb fc47 	bl	8000b18 <__aeabi_dcmpeq>
 800528a:	2800      	cmp	r0, #0
 800528c:	d033      	beq.n	80052f6 <_printf_float+0x266>
 800528e:	4a37      	ldr	r2, [pc, #220]	@ (800536c <_printf_float+0x2dc>)
 8005290:	2301      	movs	r3, #1
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f af54 	beq.w	8005146 <_printf_float+0xb6>
 800529e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80052a2:	4543      	cmp	r3, r8
 80052a4:	db02      	blt.n	80052ac <_printf_float+0x21c>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	07d8      	lsls	r0, r3, #31
 80052aa:	d50f      	bpl.n	80052cc <_printf_float+0x23c>
 80052ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	f43f af45 	beq.w	8005146 <_printf_float+0xb6>
 80052bc:	f04f 0900 	mov.w	r9, #0
 80052c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80052c4:	f104 0a1a 	add.w	sl, r4, #26
 80052c8:	45c8      	cmp	r8, r9
 80052ca:	dc09      	bgt.n	80052e0 <_printf_float+0x250>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	079b      	lsls	r3, r3, #30
 80052d0:	f100 8103 	bmi.w	80054da <_printf_float+0x44a>
 80052d4:	68e0      	ldr	r0, [r4, #12]
 80052d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052d8:	4298      	cmp	r0, r3
 80052da:	bfb8      	it	lt
 80052dc:	4618      	movlt	r0, r3
 80052de:	e734      	b.n	800514a <_printf_float+0xba>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4652      	mov	r2, sl
 80052e4:	4631      	mov	r1, r6
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	f43f af2b 	beq.w	8005146 <_printf_float+0xb6>
 80052f0:	f109 0901 	add.w	r9, r9, #1
 80052f4:	e7e8      	b.n	80052c8 <_printf_float+0x238>
 80052f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	dc39      	bgt.n	8005370 <_printf_float+0x2e0>
 80052fc:	4a1b      	ldr	r2, [pc, #108]	@ (800536c <_printf_float+0x2dc>)
 80052fe:	2301      	movs	r3, #1
 8005300:	4631      	mov	r1, r6
 8005302:	4628      	mov	r0, r5
 8005304:	47b8      	blx	r7
 8005306:	3001      	adds	r0, #1
 8005308:	f43f af1d 	beq.w	8005146 <_printf_float+0xb6>
 800530c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005310:	ea59 0303 	orrs.w	r3, r9, r3
 8005314:	d102      	bne.n	800531c <_printf_float+0x28c>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	07d9      	lsls	r1, r3, #31
 800531a:	d5d7      	bpl.n	80052cc <_printf_float+0x23c>
 800531c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f af0d 	beq.w	8005146 <_printf_float+0xb6>
 800532c:	f04f 0a00 	mov.w	sl, #0
 8005330:	f104 0b1a 	add.w	fp, r4, #26
 8005334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005336:	425b      	negs	r3, r3
 8005338:	4553      	cmp	r3, sl
 800533a:	dc01      	bgt.n	8005340 <_printf_float+0x2b0>
 800533c:	464b      	mov	r3, r9
 800533e:	e793      	b.n	8005268 <_printf_float+0x1d8>
 8005340:	2301      	movs	r3, #1
 8005342:	465a      	mov	r2, fp
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	f43f aefb 	beq.w	8005146 <_printf_float+0xb6>
 8005350:	f10a 0a01 	add.w	sl, sl, #1
 8005354:	e7ee      	b.n	8005334 <_printf_float+0x2a4>
 8005356:	bf00      	nop
 8005358:	7fefffff 	.word	0x7fefffff
 800535c:	08007de4 	.word	0x08007de4
 8005360:	08007de8 	.word	0x08007de8
 8005364:	08007dec 	.word	0x08007dec
 8005368:	08007df0 	.word	0x08007df0
 800536c:	08007df4 	.word	0x08007df4
 8005370:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005372:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005376:	4553      	cmp	r3, sl
 8005378:	bfa8      	it	ge
 800537a:	4653      	movge	r3, sl
 800537c:	2b00      	cmp	r3, #0
 800537e:	4699      	mov	r9, r3
 8005380:	dc36      	bgt.n	80053f0 <_printf_float+0x360>
 8005382:	f04f 0b00 	mov.w	fp, #0
 8005386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800538a:	f104 021a 	add.w	r2, r4, #26
 800538e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005390:	9306      	str	r3, [sp, #24]
 8005392:	eba3 0309 	sub.w	r3, r3, r9
 8005396:	455b      	cmp	r3, fp
 8005398:	dc31      	bgt.n	80053fe <_printf_float+0x36e>
 800539a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800539c:	459a      	cmp	sl, r3
 800539e:	dc3a      	bgt.n	8005416 <_printf_float+0x386>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	07da      	lsls	r2, r3, #31
 80053a4:	d437      	bmi.n	8005416 <_printf_float+0x386>
 80053a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a8:	ebaa 0903 	sub.w	r9, sl, r3
 80053ac:	9b06      	ldr	r3, [sp, #24]
 80053ae:	ebaa 0303 	sub.w	r3, sl, r3
 80053b2:	4599      	cmp	r9, r3
 80053b4:	bfa8      	it	ge
 80053b6:	4699      	movge	r9, r3
 80053b8:	f1b9 0f00 	cmp.w	r9, #0
 80053bc:	dc33      	bgt.n	8005426 <_printf_float+0x396>
 80053be:	f04f 0800 	mov.w	r8, #0
 80053c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053c6:	f104 0b1a 	add.w	fp, r4, #26
 80053ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053cc:	ebaa 0303 	sub.w	r3, sl, r3
 80053d0:	eba3 0309 	sub.w	r3, r3, r9
 80053d4:	4543      	cmp	r3, r8
 80053d6:	f77f af79 	ble.w	80052cc <_printf_float+0x23c>
 80053da:	2301      	movs	r3, #1
 80053dc:	465a      	mov	r2, fp
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	f43f aeae 	beq.w	8005146 <_printf_float+0xb6>
 80053ea:	f108 0801 	add.w	r8, r8, #1
 80053ee:	e7ec      	b.n	80053ca <_printf_float+0x33a>
 80053f0:	4642      	mov	r2, r8
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	d1c2      	bne.n	8005382 <_printf_float+0x2f2>
 80053fc:	e6a3      	b.n	8005146 <_printf_float+0xb6>
 80053fe:	2301      	movs	r3, #1
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	9206      	str	r2, [sp, #24]
 8005406:	47b8      	blx	r7
 8005408:	3001      	adds	r0, #1
 800540a:	f43f ae9c 	beq.w	8005146 <_printf_float+0xb6>
 800540e:	9a06      	ldr	r2, [sp, #24]
 8005410:	f10b 0b01 	add.w	fp, fp, #1
 8005414:	e7bb      	b.n	800538e <_printf_float+0x2fe>
 8005416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	d1c0      	bne.n	80053a6 <_printf_float+0x316>
 8005424:	e68f      	b.n	8005146 <_printf_float+0xb6>
 8005426:	9a06      	ldr	r2, [sp, #24]
 8005428:	464b      	mov	r3, r9
 800542a:	4442      	add	r2, r8
 800542c:	4631      	mov	r1, r6
 800542e:	4628      	mov	r0, r5
 8005430:	47b8      	blx	r7
 8005432:	3001      	adds	r0, #1
 8005434:	d1c3      	bne.n	80053be <_printf_float+0x32e>
 8005436:	e686      	b.n	8005146 <_printf_float+0xb6>
 8005438:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800543c:	f1ba 0f01 	cmp.w	sl, #1
 8005440:	dc01      	bgt.n	8005446 <_printf_float+0x3b6>
 8005442:	07db      	lsls	r3, r3, #31
 8005444:	d536      	bpl.n	80054b4 <_printf_float+0x424>
 8005446:	2301      	movs	r3, #1
 8005448:	4642      	mov	r2, r8
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	f43f ae78 	beq.w	8005146 <_printf_float+0xb6>
 8005456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545a:	4631      	mov	r1, r6
 800545c:	4628      	mov	r0, r5
 800545e:	47b8      	blx	r7
 8005460:	3001      	adds	r0, #1
 8005462:	f43f ae70 	beq.w	8005146 <_printf_float+0xb6>
 8005466:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800546a:	2200      	movs	r2, #0
 800546c:	2300      	movs	r3, #0
 800546e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005472:	f7fb fb51 	bl	8000b18 <__aeabi_dcmpeq>
 8005476:	b9c0      	cbnz	r0, 80054aa <_printf_float+0x41a>
 8005478:	4653      	mov	r3, sl
 800547a:	f108 0201 	add.w	r2, r8, #1
 800547e:	4631      	mov	r1, r6
 8005480:	4628      	mov	r0, r5
 8005482:	47b8      	blx	r7
 8005484:	3001      	adds	r0, #1
 8005486:	d10c      	bne.n	80054a2 <_printf_float+0x412>
 8005488:	e65d      	b.n	8005146 <_printf_float+0xb6>
 800548a:	2301      	movs	r3, #1
 800548c:	465a      	mov	r2, fp
 800548e:	4631      	mov	r1, r6
 8005490:	4628      	mov	r0, r5
 8005492:	47b8      	blx	r7
 8005494:	3001      	adds	r0, #1
 8005496:	f43f ae56 	beq.w	8005146 <_printf_float+0xb6>
 800549a:	f108 0801 	add.w	r8, r8, #1
 800549e:	45d0      	cmp	r8, sl
 80054a0:	dbf3      	blt.n	800548a <_printf_float+0x3fa>
 80054a2:	464b      	mov	r3, r9
 80054a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80054a8:	e6df      	b.n	800526a <_printf_float+0x1da>
 80054aa:	f04f 0800 	mov.w	r8, #0
 80054ae:	f104 0b1a 	add.w	fp, r4, #26
 80054b2:	e7f4      	b.n	800549e <_printf_float+0x40e>
 80054b4:	2301      	movs	r3, #1
 80054b6:	4642      	mov	r2, r8
 80054b8:	e7e1      	b.n	800547e <_printf_float+0x3ee>
 80054ba:	2301      	movs	r3, #1
 80054bc:	464a      	mov	r2, r9
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f ae3e 	beq.w	8005146 <_printf_float+0xb6>
 80054ca:	f108 0801 	add.w	r8, r8, #1
 80054ce:	68e3      	ldr	r3, [r4, #12]
 80054d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054d2:	1a5b      	subs	r3, r3, r1
 80054d4:	4543      	cmp	r3, r8
 80054d6:	dcf0      	bgt.n	80054ba <_printf_float+0x42a>
 80054d8:	e6fc      	b.n	80052d4 <_printf_float+0x244>
 80054da:	f04f 0800 	mov.w	r8, #0
 80054de:	f104 0919 	add.w	r9, r4, #25
 80054e2:	e7f4      	b.n	80054ce <_printf_float+0x43e>

080054e4 <_printf_common>:
 80054e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	4616      	mov	r6, r2
 80054ea:	4698      	mov	r8, r3
 80054ec:	688a      	ldr	r2, [r1, #8]
 80054ee:	690b      	ldr	r3, [r1, #16]
 80054f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054f4:	4293      	cmp	r3, r2
 80054f6:	bfb8      	it	lt
 80054f8:	4613      	movlt	r3, r2
 80054fa:	6033      	str	r3, [r6, #0]
 80054fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005500:	4607      	mov	r7, r0
 8005502:	460c      	mov	r4, r1
 8005504:	b10a      	cbz	r2, 800550a <_printf_common+0x26>
 8005506:	3301      	adds	r3, #1
 8005508:	6033      	str	r3, [r6, #0]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	0699      	lsls	r1, r3, #26
 800550e:	bf42      	ittt	mi
 8005510:	6833      	ldrmi	r3, [r6, #0]
 8005512:	3302      	addmi	r3, #2
 8005514:	6033      	strmi	r3, [r6, #0]
 8005516:	6825      	ldr	r5, [r4, #0]
 8005518:	f015 0506 	ands.w	r5, r5, #6
 800551c:	d106      	bne.n	800552c <_printf_common+0x48>
 800551e:	f104 0a19 	add.w	sl, r4, #25
 8005522:	68e3      	ldr	r3, [r4, #12]
 8005524:	6832      	ldr	r2, [r6, #0]
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	42ab      	cmp	r3, r5
 800552a:	dc26      	bgt.n	800557a <_printf_common+0x96>
 800552c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005530:	6822      	ldr	r2, [r4, #0]
 8005532:	3b00      	subs	r3, #0
 8005534:	bf18      	it	ne
 8005536:	2301      	movne	r3, #1
 8005538:	0692      	lsls	r2, r2, #26
 800553a:	d42b      	bmi.n	8005594 <_printf_common+0xb0>
 800553c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005540:	4641      	mov	r1, r8
 8005542:	4638      	mov	r0, r7
 8005544:	47c8      	blx	r9
 8005546:	3001      	adds	r0, #1
 8005548:	d01e      	beq.n	8005588 <_printf_common+0xa4>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	6922      	ldr	r2, [r4, #16]
 800554e:	f003 0306 	and.w	r3, r3, #6
 8005552:	2b04      	cmp	r3, #4
 8005554:	bf02      	ittt	eq
 8005556:	68e5      	ldreq	r5, [r4, #12]
 8005558:	6833      	ldreq	r3, [r6, #0]
 800555a:	1aed      	subeq	r5, r5, r3
 800555c:	68a3      	ldr	r3, [r4, #8]
 800555e:	bf0c      	ite	eq
 8005560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005564:	2500      	movne	r5, #0
 8005566:	4293      	cmp	r3, r2
 8005568:	bfc4      	itt	gt
 800556a:	1a9b      	subgt	r3, r3, r2
 800556c:	18ed      	addgt	r5, r5, r3
 800556e:	2600      	movs	r6, #0
 8005570:	341a      	adds	r4, #26
 8005572:	42b5      	cmp	r5, r6
 8005574:	d11a      	bne.n	80055ac <_printf_common+0xc8>
 8005576:	2000      	movs	r0, #0
 8005578:	e008      	b.n	800558c <_printf_common+0xa8>
 800557a:	2301      	movs	r3, #1
 800557c:	4652      	mov	r2, sl
 800557e:	4641      	mov	r1, r8
 8005580:	4638      	mov	r0, r7
 8005582:	47c8      	blx	r9
 8005584:	3001      	adds	r0, #1
 8005586:	d103      	bne.n	8005590 <_printf_common+0xac>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005590:	3501      	adds	r5, #1
 8005592:	e7c6      	b.n	8005522 <_printf_common+0x3e>
 8005594:	18e1      	adds	r1, r4, r3
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	2030      	movs	r0, #48	@ 0x30
 800559a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800559e:	4422      	add	r2, r4
 80055a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055a8:	3302      	adds	r3, #2
 80055aa:	e7c7      	b.n	800553c <_printf_common+0x58>
 80055ac:	2301      	movs	r3, #1
 80055ae:	4622      	mov	r2, r4
 80055b0:	4641      	mov	r1, r8
 80055b2:	4638      	mov	r0, r7
 80055b4:	47c8      	blx	r9
 80055b6:	3001      	adds	r0, #1
 80055b8:	d0e6      	beq.n	8005588 <_printf_common+0xa4>
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7d9      	b.n	8005572 <_printf_common+0x8e>
	...

080055c0 <_printf_i>:
 80055c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055c4:	7e0f      	ldrb	r7, [r1, #24]
 80055c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055c8:	2f78      	cmp	r7, #120	@ 0x78
 80055ca:	4691      	mov	r9, r2
 80055cc:	4680      	mov	r8, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	469a      	mov	sl, r3
 80055d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055d6:	d807      	bhi.n	80055e8 <_printf_i+0x28>
 80055d8:	2f62      	cmp	r7, #98	@ 0x62
 80055da:	d80a      	bhi.n	80055f2 <_printf_i+0x32>
 80055dc:	2f00      	cmp	r7, #0
 80055de:	f000 80d2 	beq.w	8005786 <_printf_i+0x1c6>
 80055e2:	2f58      	cmp	r7, #88	@ 0x58
 80055e4:	f000 80b9 	beq.w	800575a <_printf_i+0x19a>
 80055e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055f0:	e03a      	b.n	8005668 <_printf_i+0xa8>
 80055f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055f6:	2b15      	cmp	r3, #21
 80055f8:	d8f6      	bhi.n	80055e8 <_printf_i+0x28>
 80055fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005600 <_printf_i+0x40>)
 80055fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005600:	08005659 	.word	0x08005659
 8005604:	0800566d 	.word	0x0800566d
 8005608:	080055e9 	.word	0x080055e9
 800560c:	080055e9 	.word	0x080055e9
 8005610:	080055e9 	.word	0x080055e9
 8005614:	080055e9 	.word	0x080055e9
 8005618:	0800566d 	.word	0x0800566d
 800561c:	080055e9 	.word	0x080055e9
 8005620:	080055e9 	.word	0x080055e9
 8005624:	080055e9 	.word	0x080055e9
 8005628:	080055e9 	.word	0x080055e9
 800562c:	0800576d 	.word	0x0800576d
 8005630:	08005697 	.word	0x08005697
 8005634:	08005727 	.word	0x08005727
 8005638:	080055e9 	.word	0x080055e9
 800563c:	080055e9 	.word	0x080055e9
 8005640:	0800578f 	.word	0x0800578f
 8005644:	080055e9 	.word	0x080055e9
 8005648:	08005697 	.word	0x08005697
 800564c:	080055e9 	.word	0x080055e9
 8005650:	080055e9 	.word	0x080055e9
 8005654:	0800572f 	.word	0x0800572f
 8005658:	6833      	ldr	r3, [r6, #0]
 800565a:	1d1a      	adds	r2, r3, #4
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6032      	str	r2, [r6, #0]
 8005660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005664:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005668:	2301      	movs	r3, #1
 800566a:	e09d      	b.n	80057a8 <_printf_i+0x1e8>
 800566c:	6833      	ldr	r3, [r6, #0]
 800566e:	6820      	ldr	r0, [r4, #0]
 8005670:	1d19      	adds	r1, r3, #4
 8005672:	6031      	str	r1, [r6, #0]
 8005674:	0606      	lsls	r6, r0, #24
 8005676:	d501      	bpl.n	800567c <_printf_i+0xbc>
 8005678:	681d      	ldr	r5, [r3, #0]
 800567a:	e003      	b.n	8005684 <_printf_i+0xc4>
 800567c:	0645      	lsls	r5, r0, #25
 800567e:	d5fb      	bpl.n	8005678 <_printf_i+0xb8>
 8005680:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005684:	2d00      	cmp	r5, #0
 8005686:	da03      	bge.n	8005690 <_printf_i+0xd0>
 8005688:	232d      	movs	r3, #45	@ 0x2d
 800568a:	426d      	negs	r5, r5
 800568c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005690:	4859      	ldr	r0, [pc, #356]	@ (80057f8 <_printf_i+0x238>)
 8005692:	230a      	movs	r3, #10
 8005694:	e011      	b.n	80056ba <_printf_i+0xfa>
 8005696:	6821      	ldr	r1, [r4, #0]
 8005698:	6833      	ldr	r3, [r6, #0]
 800569a:	0608      	lsls	r0, r1, #24
 800569c:	f853 5b04 	ldr.w	r5, [r3], #4
 80056a0:	d402      	bmi.n	80056a8 <_printf_i+0xe8>
 80056a2:	0649      	lsls	r1, r1, #25
 80056a4:	bf48      	it	mi
 80056a6:	b2ad      	uxthmi	r5, r5
 80056a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80056aa:	4853      	ldr	r0, [pc, #332]	@ (80057f8 <_printf_i+0x238>)
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	bf14      	ite	ne
 80056b0:	230a      	movne	r3, #10
 80056b2:	2308      	moveq	r3, #8
 80056b4:	2100      	movs	r1, #0
 80056b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ba:	6866      	ldr	r6, [r4, #4]
 80056bc:	60a6      	str	r6, [r4, #8]
 80056be:	2e00      	cmp	r6, #0
 80056c0:	bfa2      	ittt	ge
 80056c2:	6821      	ldrge	r1, [r4, #0]
 80056c4:	f021 0104 	bicge.w	r1, r1, #4
 80056c8:	6021      	strge	r1, [r4, #0]
 80056ca:	b90d      	cbnz	r5, 80056d0 <_printf_i+0x110>
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	d04b      	beq.n	8005768 <_printf_i+0x1a8>
 80056d0:	4616      	mov	r6, r2
 80056d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80056d6:	fb03 5711 	mls	r7, r3, r1, r5
 80056da:	5dc7      	ldrb	r7, [r0, r7]
 80056dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056e0:	462f      	mov	r7, r5
 80056e2:	42bb      	cmp	r3, r7
 80056e4:	460d      	mov	r5, r1
 80056e6:	d9f4      	bls.n	80056d2 <_printf_i+0x112>
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d10b      	bne.n	8005704 <_printf_i+0x144>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	07df      	lsls	r7, r3, #31
 80056f0:	d508      	bpl.n	8005704 <_printf_i+0x144>
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	6861      	ldr	r1, [r4, #4]
 80056f6:	4299      	cmp	r1, r3
 80056f8:	bfde      	ittt	le
 80056fa:	2330      	movle	r3, #48	@ 0x30
 80056fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005700:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005704:	1b92      	subs	r2, r2, r6
 8005706:	6122      	str	r2, [r4, #16]
 8005708:	f8cd a000 	str.w	sl, [sp]
 800570c:	464b      	mov	r3, r9
 800570e:	aa03      	add	r2, sp, #12
 8005710:	4621      	mov	r1, r4
 8005712:	4640      	mov	r0, r8
 8005714:	f7ff fee6 	bl	80054e4 <_printf_common>
 8005718:	3001      	adds	r0, #1
 800571a:	d14a      	bne.n	80057b2 <_printf_i+0x1f2>
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	b004      	add	sp, #16
 8005722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f043 0320 	orr.w	r3, r3, #32
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	4833      	ldr	r0, [pc, #204]	@ (80057fc <_printf_i+0x23c>)
 8005730:	2778      	movs	r7, #120	@ 0x78
 8005732:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	6831      	ldr	r1, [r6, #0]
 800573a:	061f      	lsls	r7, r3, #24
 800573c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005740:	d402      	bmi.n	8005748 <_printf_i+0x188>
 8005742:	065f      	lsls	r7, r3, #25
 8005744:	bf48      	it	mi
 8005746:	b2ad      	uxthmi	r5, r5
 8005748:	6031      	str	r1, [r6, #0]
 800574a:	07d9      	lsls	r1, r3, #31
 800574c:	bf44      	itt	mi
 800574e:	f043 0320 	orrmi.w	r3, r3, #32
 8005752:	6023      	strmi	r3, [r4, #0]
 8005754:	b11d      	cbz	r5, 800575e <_printf_i+0x19e>
 8005756:	2310      	movs	r3, #16
 8005758:	e7ac      	b.n	80056b4 <_printf_i+0xf4>
 800575a:	4827      	ldr	r0, [pc, #156]	@ (80057f8 <_printf_i+0x238>)
 800575c:	e7e9      	b.n	8005732 <_printf_i+0x172>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	f023 0320 	bic.w	r3, r3, #32
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	e7f6      	b.n	8005756 <_printf_i+0x196>
 8005768:	4616      	mov	r6, r2
 800576a:	e7bd      	b.n	80056e8 <_printf_i+0x128>
 800576c:	6833      	ldr	r3, [r6, #0]
 800576e:	6825      	ldr	r5, [r4, #0]
 8005770:	6961      	ldr	r1, [r4, #20]
 8005772:	1d18      	adds	r0, r3, #4
 8005774:	6030      	str	r0, [r6, #0]
 8005776:	062e      	lsls	r6, r5, #24
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	d501      	bpl.n	8005780 <_printf_i+0x1c0>
 800577c:	6019      	str	r1, [r3, #0]
 800577e:	e002      	b.n	8005786 <_printf_i+0x1c6>
 8005780:	0668      	lsls	r0, r5, #25
 8005782:	d5fb      	bpl.n	800577c <_printf_i+0x1bc>
 8005784:	8019      	strh	r1, [r3, #0]
 8005786:	2300      	movs	r3, #0
 8005788:	6123      	str	r3, [r4, #16]
 800578a:	4616      	mov	r6, r2
 800578c:	e7bc      	b.n	8005708 <_printf_i+0x148>
 800578e:	6833      	ldr	r3, [r6, #0]
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	6032      	str	r2, [r6, #0]
 8005794:	681e      	ldr	r6, [r3, #0]
 8005796:	6862      	ldr	r2, [r4, #4]
 8005798:	2100      	movs	r1, #0
 800579a:	4630      	mov	r0, r6
 800579c:	f7fa fd40 	bl	8000220 <memchr>
 80057a0:	b108      	cbz	r0, 80057a6 <_printf_i+0x1e6>
 80057a2:	1b80      	subs	r0, r0, r6
 80057a4:	6060      	str	r0, [r4, #4]
 80057a6:	6863      	ldr	r3, [r4, #4]
 80057a8:	6123      	str	r3, [r4, #16]
 80057aa:	2300      	movs	r3, #0
 80057ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057b0:	e7aa      	b.n	8005708 <_printf_i+0x148>
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	4632      	mov	r2, r6
 80057b6:	4649      	mov	r1, r9
 80057b8:	4640      	mov	r0, r8
 80057ba:	47d0      	blx	sl
 80057bc:	3001      	adds	r0, #1
 80057be:	d0ad      	beq.n	800571c <_printf_i+0x15c>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	079b      	lsls	r3, r3, #30
 80057c4:	d413      	bmi.n	80057ee <_printf_i+0x22e>
 80057c6:	68e0      	ldr	r0, [r4, #12]
 80057c8:	9b03      	ldr	r3, [sp, #12]
 80057ca:	4298      	cmp	r0, r3
 80057cc:	bfb8      	it	lt
 80057ce:	4618      	movlt	r0, r3
 80057d0:	e7a6      	b.n	8005720 <_printf_i+0x160>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4632      	mov	r2, r6
 80057d6:	4649      	mov	r1, r9
 80057d8:	4640      	mov	r0, r8
 80057da:	47d0      	blx	sl
 80057dc:	3001      	adds	r0, #1
 80057de:	d09d      	beq.n	800571c <_printf_i+0x15c>
 80057e0:	3501      	adds	r5, #1
 80057e2:	68e3      	ldr	r3, [r4, #12]
 80057e4:	9903      	ldr	r1, [sp, #12]
 80057e6:	1a5b      	subs	r3, r3, r1
 80057e8:	42ab      	cmp	r3, r5
 80057ea:	dcf2      	bgt.n	80057d2 <_printf_i+0x212>
 80057ec:	e7eb      	b.n	80057c6 <_printf_i+0x206>
 80057ee:	2500      	movs	r5, #0
 80057f0:	f104 0619 	add.w	r6, r4, #25
 80057f4:	e7f5      	b.n	80057e2 <_printf_i+0x222>
 80057f6:	bf00      	nop
 80057f8:	08007df6 	.word	0x08007df6
 80057fc:	08007e07 	.word	0x08007e07

08005800 <std>:
 8005800:	2300      	movs	r3, #0
 8005802:	b510      	push	{r4, lr}
 8005804:	4604      	mov	r4, r0
 8005806:	e9c0 3300 	strd	r3, r3, [r0]
 800580a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800580e:	6083      	str	r3, [r0, #8]
 8005810:	8181      	strh	r1, [r0, #12]
 8005812:	6643      	str	r3, [r0, #100]	@ 0x64
 8005814:	81c2      	strh	r2, [r0, #14]
 8005816:	6183      	str	r3, [r0, #24]
 8005818:	4619      	mov	r1, r3
 800581a:	2208      	movs	r2, #8
 800581c:	305c      	adds	r0, #92	@ 0x5c
 800581e:	f000 fa19 	bl	8005c54 <memset>
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <std+0x58>)
 8005824:	6263      	str	r3, [r4, #36]	@ 0x24
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <std+0x5c>)
 8005828:	62a3      	str	r3, [r4, #40]	@ 0x28
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <std+0x60>)
 800582c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800582e:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <std+0x64>)
 8005830:	6323      	str	r3, [r4, #48]	@ 0x30
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <std+0x68>)
 8005834:	6224      	str	r4, [r4, #32]
 8005836:	429c      	cmp	r4, r3
 8005838:	d006      	beq.n	8005848 <std+0x48>
 800583a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800583e:	4294      	cmp	r4, r2
 8005840:	d002      	beq.n	8005848 <std+0x48>
 8005842:	33d0      	adds	r3, #208	@ 0xd0
 8005844:	429c      	cmp	r4, r3
 8005846:	d105      	bne.n	8005854 <std+0x54>
 8005848:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800584c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005850:	f000 ba7c 	b.w	8005d4c <__retarget_lock_init_recursive>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	bf00      	nop
 8005858:	08005a65 	.word	0x08005a65
 800585c:	08005a87 	.word	0x08005a87
 8005860:	08005abf 	.word	0x08005abf
 8005864:	08005ae3 	.word	0x08005ae3
 8005868:	2000095c 	.word	0x2000095c

0800586c <stdio_exit_handler>:
 800586c:	4a02      	ldr	r2, [pc, #8]	@ (8005878 <stdio_exit_handler+0xc>)
 800586e:	4903      	ldr	r1, [pc, #12]	@ (800587c <stdio_exit_handler+0x10>)
 8005870:	4803      	ldr	r0, [pc, #12]	@ (8005880 <stdio_exit_handler+0x14>)
 8005872:	f000 b869 	b.w	8005948 <_fwalk_sglue>
 8005876:	bf00      	nop
 8005878:	20000014 	.word	0x20000014
 800587c:	08007931 	.word	0x08007931
 8005880:	20000024 	.word	0x20000024

08005884 <cleanup_stdio>:
 8005884:	6841      	ldr	r1, [r0, #4]
 8005886:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <cleanup_stdio+0x34>)
 8005888:	4299      	cmp	r1, r3
 800588a:	b510      	push	{r4, lr}
 800588c:	4604      	mov	r4, r0
 800588e:	d001      	beq.n	8005894 <cleanup_stdio+0x10>
 8005890:	f002 f84e 	bl	8007930 <_fflush_r>
 8005894:	68a1      	ldr	r1, [r4, #8]
 8005896:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <cleanup_stdio+0x38>)
 8005898:	4299      	cmp	r1, r3
 800589a:	d002      	beq.n	80058a2 <cleanup_stdio+0x1e>
 800589c:	4620      	mov	r0, r4
 800589e:	f002 f847 	bl	8007930 <_fflush_r>
 80058a2:	68e1      	ldr	r1, [r4, #12]
 80058a4:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <cleanup_stdio+0x3c>)
 80058a6:	4299      	cmp	r1, r3
 80058a8:	d004      	beq.n	80058b4 <cleanup_stdio+0x30>
 80058aa:	4620      	mov	r0, r4
 80058ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b0:	f002 b83e 	b.w	8007930 <_fflush_r>
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	bf00      	nop
 80058b8:	2000095c 	.word	0x2000095c
 80058bc:	200009c4 	.word	0x200009c4
 80058c0:	20000a2c 	.word	0x20000a2c

080058c4 <global_stdio_init.part.0>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <global_stdio_init.part.0+0x30>)
 80058c8:	4c0b      	ldr	r4, [pc, #44]	@ (80058f8 <global_stdio_init.part.0+0x34>)
 80058ca:	4a0c      	ldr	r2, [pc, #48]	@ (80058fc <global_stdio_init.part.0+0x38>)
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	4620      	mov	r0, r4
 80058d0:	2200      	movs	r2, #0
 80058d2:	2104      	movs	r1, #4
 80058d4:	f7ff ff94 	bl	8005800 <std>
 80058d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058dc:	2201      	movs	r2, #1
 80058de:	2109      	movs	r1, #9
 80058e0:	f7ff ff8e 	bl	8005800 <std>
 80058e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058e8:	2202      	movs	r2, #2
 80058ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ee:	2112      	movs	r1, #18
 80058f0:	f7ff bf86 	b.w	8005800 <std>
 80058f4:	20000a94 	.word	0x20000a94
 80058f8:	2000095c 	.word	0x2000095c
 80058fc:	0800586d 	.word	0x0800586d

08005900 <__sfp_lock_acquire>:
 8005900:	4801      	ldr	r0, [pc, #4]	@ (8005908 <__sfp_lock_acquire+0x8>)
 8005902:	f000 ba24 	b.w	8005d4e <__retarget_lock_acquire_recursive>
 8005906:	bf00      	nop
 8005908:	20000a9d 	.word	0x20000a9d

0800590c <__sfp_lock_release>:
 800590c:	4801      	ldr	r0, [pc, #4]	@ (8005914 <__sfp_lock_release+0x8>)
 800590e:	f000 ba1f 	b.w	8005d50 <__retarget_lock_release_recursive>
 8005912:	bf00      	nop
 8005914:	20000a9d 	.word	0x20000a9d

08005918 <__sinit>:
 8005918:	b510      	push	{r4, lr}
 800591a:	4604      	mov	r4, r0
 800591c:	f7ff fff0 	bl	8005900 <__sfp_lock_acquire>
 8005920:	6a23      	ldr	r3, [r4, #32]
 8005922:	b11b      	cbz	r3, 800592c <__sinit+0x14>
 8005924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005928:	f7ff bff0 	b.w	800590c <__sfp_lock_release>
 800592c:	4b04      	ldr	r3, [pc, #16]	@ (8005940 <__sinit+0x28>)
 800592e:	6223      	str	r3, [r4, #32]
 8005930:	4b04      	ldr	r3, [pc, #16]	@ (8005944 <__sinit+0x2c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f5      	bne.n	8005924 <__sinit+0xc>
 8005938:	f7ff ffc4 	bl	80058c4 <global_stdio_init.part.0>
 800593c:	e7f2      	b.n	8005924 <__sinit+0xc>
 800593e:	bf00      	nop
 8005940:	08005885 	.word	0x08005885
 8005944:	20000a94 	.word	0x20000a94

08005948 <_fwalk_sglue>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	4607      	mov	r7, r0
 800594e:	4688      	mov	r8, r1
 8005950:	4614      	mov	r4, r2
 8005952:	2600      	movs	r6, #0
 8005954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005958:	f1b9 0901 	subs.w	r9, r9, #1
 800595c:	d505      	bpl.n	800596a <_fwalk_sglue+0x22>
 800595e:	6824      	ldr	r4, [r4, #0]
 8005960:	2c00      	cmp	r4, #0
 8005962:	d1f7      	bne.n	8005954 <_fwalk_sglue+0xc>
 8005964:	4630      	mov	r0, r6
 8005966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596a:	89ab      	ldrh	r3, [r5, #12]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d907      	bls.n	8005980 <_fwalk_sglue+0x38>
 8005970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005974:	3301      	adds	r3, #1
 8005976:	d003      	beq.n	8005980 <_fwalk_sglue+0x38>
 8005978:	4629      	mov	r1, r5
 800597a:	4638      	mov	r0, r7
 800597c:	47c0      	blx	r8
 800597e:	4306      	orrs	r6, r0
 8005980:	3568      	adds	r5, #104	@ 0x68
 8005982:	e7e9      	b.n	8005958 <_fwalk_sglue+0x10>

08005984 <iprintf>:
 8005984:	b40f      	push	{r0, r1, r2, r3}
 8005986:	b507      	push	{r0, r1, r2, lr}
 8005988:	4906      	ldr	r1, [pc, #24]	@ (80059a4 <iprintf+0x20>)
 800598a:	ab04      	add	r3, sp, #16
 800598c:	6808      	ldr	r0, [r1, #0]
 800598e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005992:	6881      	ldr	r1, [r0, #8]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	f001 fe2f 	bl	80075f8 <_vfiprintf_r>
 800599a:	b003      	add	sp, #12
 800599c:	f85d eb04 	ldr.w	lr, [sp], #4
 80059a0:	b004      	add	sp, #16
 80059a2:	4770      	bx	lr
 80059a4:	20000020 	.word	0x20000020

080059a8 <_puts_r>:
 80059a8:	6a03      	ldr	r3, [r0, #32]
 80059aa:	b570      	push	{r4, r5, r6, lr}
 80059ac:	6884      	ldr	r4, [r0, #8]
 80059ae:	4605      	mov	r5, r0
 80059b0:	460e      	mov	r6, r1
 80059b2:	b90b      	cbnz	r3, 80059b8 <_puts_r+0x10>
 80059b4:	f7ff ffb0 	bl	8005918 <__sinit>
 80059b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059ba:	07db      	lsls	r3, r3, #31
 80059bc:	d405      	bmi.n	80059ca <_puts_r+0x22>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	0598      	lsls	r0, r3, #22
 80059c2:	d402      	bmi.n	80059ca <_puts_r+0x22>
 80059c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059c6:	f000 f9c2 	bl	8005d4e <__retarget_lock_acquire_recursive>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	0719      	lsls	r1, r3, #28
 80059ce:	d502      	bpl.n	80059d6 <_puts_r+0x2e>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d135      	bne.n	8005a42 <_puts_r+0x9a>
 80059d6:	4621      	mov	r1, r4
 80059d8:	4628      	mov	r0, r5
 80059da:	f000 f8e5 	bl	8005ba8 <__swsetup_r>
 80059de:	b380      	cbz	r0, 8005a42 <_puts_r+0x9a>
 80059e0:	f04f 35ff 	mov.w	r5, #4294967295
 80059e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059e6:	07da      	lsls	r2, r3, #31
 80059e8:	d405      	bmi.n	80059f6 <_puts_r+0x4e>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	059b      	lsls	r3, r3, #22
 80059ee:	d402      	bmi.n	80059f6 <_puts_r+0x4e>
 80059f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059f2:	f000 f9ad 	bl	8005d50 <__retarget_lock_release_recursive>
 80059f6:	4628      	mov	r0, r5
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da04      	bge.n	8005a08 <_puts_r+0x60>
 80059fe:	69a2      	ldr	r2, [r4, #24]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	dc17      	bgt.n	8005a34 <_puts_r+0x8c>
 8005a04:	290a      	cmp	r1, #10
 8005a06:	d015      	beq.n	8005a34 <_puts_r+0x8c>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	6022      	str	r2, [r4, #0]
 8005a0e:	7019      	strb	r1, [r3, #0]
 8005a10:	68a3      	ldr	r3, [r4, #8]
 8005a12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a16:	3b01      	subs	r3, #1
 8005a18:	60a3      	str	r3, [r4, #8]
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	d1ed      	bne.n	80059fa <_puts_r+0x52>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	da11      	bge.n	8005a46 <_puts_r+0x9e>
 8005a22:	4622      	mov	r2, r4
 8005a24:	210a      	movs	r1, #10
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 f880 	bl	8005b2c <__swbuf_r>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d0d7      	beq.n	80059e0 <_puts_r+0x38>
 8005a30:	250a      	movs	r5, #10
 8005a32:	e7d7      	b.n	80059e4 <_puts_r+0x3c>
 8005a34:	4622      	mov	r2, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 f878 	bl	8005b2c <__swbuf_r>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d1e7      	bne.n	8005a10 <_puts_r+0x68>
 8005a40:	e7ce      	b.n	80059e0 <_puts_r+0x38>
 8005a42:	3e01      	subs	r6, #1
 8005a44:	e7e4      	b.n	8005a10 <_puts_r+0x68>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	6022      	str	r2, [r4, #0]
 8005a4c:	220a      	movs	r2, #10
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e7ee      	b.n	8005a30 <_puts_r+0x88>
	...

08005a54 <puts>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <puts+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f7ff bfa5 	b.w	80059a8 <_puts_r>
 8005a5e:	bf00      	nop
 8005a60:	20000020 	.word	0x20000020

08005a64 <__sread>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	460c      	mov	r4, r1
 8005a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6c:	f000 f920 	bl	8005cb0 <_read_r>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	bfab      	itete	ge
 8005a74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a76:	89a3      	ldrhlt	r3, [r4, #12]
 8005a78:	181b      	addge	r3, r3, r0
 8005a7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a7e:	bfac      	ite	ge
 8005a80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a82:	81a3      	strhlt	r3, [r4, #12]
 8005a84:	bd10      	pop	{r4, pc}

08005a86 <__swrite>:
 8005a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8a:	461f      	mov	r7, r3
 8005a8c:	898b      	ldrh	r3, [r1, #12]
 8005a8e:	05db      	lsls	r3, r3, #23
 8005a90:	4605      	mov	r5, r0
 8005a92:	460c      	mov	r4, r1
 8005a94:	4616      	mov	r6, r2
 8005a96:	d505      	bpl.n	8005aa4 <__swrite+0x1e>
 8005a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f000 f8f4 	bl	8005c8c <_lseek_r>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aba:	f000 b90b 	b.w	8005cd4 <_write_r>

08005abe <__sseek>:
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac6:	f000 f8e1 	bl	8005c8c <_lseek_r>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	bf15      	itete	ne
 8005ad0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ad2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ad6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ada:	81a3      	strheq	r3, [r4, #12]
 8005adc:	bf18      	it	ne
 8005ade:	81a3      	strhne	r3, [r4, #12]
 8005ae0:	bd10      	pop	{r4, pc}

08005ae2 <__sclose>:
 8005ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae6:	f000 b8c1 	b.w	8005c6c <_close_r>
	...

08005aec <_vsiprintf_r>:
 8005aec:	b500      	push	{lr}
 8005aee:	b09b      	sub	sp, #108	@ 0x6c
 8005af0:	9100      	str	r1, [sp, #0]
 8005af2:	9104      	str	r1, [sp, #16]
 8005af4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005af8:	9105      	str	r1, [sp, #20]
 8005afa:	9102      	str	r1, [sp, #8]
 8005afc:	4905      	ldr	r1, [pc, #20]	@ (8005b14 <_vsiprintf_r+0x28>)
 8005afe:	9103      	str	r1, [sp, #12]
 8005b00:	4669      	mov	r1, sp
 8005b02:	f001 fc53 	bl	80073ac <_svfiprintf_r>
 8005b06:	9b00      	ldr	r3, [sp, #0]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	b01b      	add	sp, #108	@ 0x6c
 8005b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b12:	bf00      	nop
 8005b14:	ffff0208 	.word	0xffff0208

08005b18 <vsiprintf>:
 8005b18:	4613      	mov	r3, r2
 8005b1a:	460a      	mov	r2, r1
 8005b1c:	4601      	mov	r1, r0
 8005b1e:	4802      	ldr	r0, [pc, #8]	@ (8005b28 <vsiprintf+0x10>)
 8005b20:	6800      	ldr	r0, [r0, #0]
 8005b22:	f7ff bfe3 	b.w	8005aec <_vsiprintf_r>
 8005b26:	bf00      	nop
 8005b28:	20000020 	.word	0x20000020

08005b2c <__swbuf_r>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	460e      	mov	r6, r1
 8005b30:	4614      	mov	r4, r2
 8005b32:	4605      	mov	r5, r0
 8005b34:	b118      	cbz	r0, 8005b3e <__swbuf_r+0x12>
 8005b36:	6a03      	ldr	r3, [r0, #32]
 8005b38:	b90b      	cbnz	r3, 8005b3e <__swbuf_r+0x12>
 8005b3a:	f7ff feed 	bl	8005918 <__sinit>
 8005b3e:	69a3      	ldr	r3, [r4, #24]
 8005b40:	60a3      	str	r3, [r4, #8]
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	071a      	lsls	r2, r3, #28
 8005b46:	d501      	bpl.n	8005b4c <__swbuf_r+0x20>
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	b943      	cbnz	r3, 8005b5e <__swbuf_r+0x32>
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 f82a 	bl	8005ba8 <__swsetup_r>
 8005b54:	b118      	cbz	r0, 8005b5e <__swbuf_r+0x32>
 8005b56:	f04f 37ff 	mov.w	r7, #4294967295
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	6922      	ldr	r2, [r4, #16]
 8005b62:	1a98      	subs	r0, r3, r2
 8005b64:	6963      	ldr	r3, [r4, #20]
 8005b66:	b2f6      	uxtb	r6, r6
 8005b68:	4283      	cmp	r3, r0
 8005b6a:	4637      	mov	r7, r6
 8005b6c:	dc05      	bgt.n	8005b7a <__swbuf_r+0x4e>
 8005b6e:	4621      	mov	r1, r4
 8005b70:	4628      	mov	r0, r5
 8005b72:	f001 fedd 	bl	8007930 <_fflush_r>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d1ed      	bne.n	8005b56 <__swbuf_r+0x2a>
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	60a3      	str	r3, [r4, #8]
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	701e      	strb	r6, [r3, #0]
 8005b88:	6962      	ldr	r2, [r4, #20]
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d004      	beq.n	8005b9a <__swbuf_r+0x6e>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	07db      	lsls	r3, r3, #31
 8005b94:	d5e1      	bpl.n	8005b5a <__swbuf_r+0x2e>
 8005b96:	2e0a      	cmp	r6, #10
 8005b98:	d1df      	bne.n	8005b5a <__swbuf_r+0x2e>
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f001 fec7 	bl	8007930 <_fflush_r>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d0d9      	beq.n	8005b5a <__swbuf_r+0x2e>
 8005ba6:	e7d6      	b.n	8005b56 <__swbuf_r+0x2a>

08005ba8 <__swsetup_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <__swsetup_r+0xa8>)
 8005bac:	4605      	mov	r5, r0
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	b118      	cbz	r0, 8005bbc <__swsetup_r+0x14>
 8005bb4:	6a03      	ldr	r3, [r0, #32]
 8005bb6:	b90b      	cbnz	r3, 8005bbc <__swsetup_r+0x14>
 8005bb8:	f7ff feae 	bl	8005918 <__sinit>
 8005bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc0:	0719      	lsls	r1, r3, #28
 8005bc2:	d422      	bmi.n	8005c0a <__swsetup_r+0x62>
 8005bc4:	06da      	lsls	r2, r3, #27
 8005bc6:	d407      	bmi.n	8005bd8 <__swsetup_r+0x30>
 8005bc8:	2209      	movs	r2, #9
 8005bca:	602a      	str	r2, [r5, #0]
 8005bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bd0:	81a3      	strh	r3, [r4, #12]
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	e033      	b.n	8005c40 <__swsetup_r+0x98>
 8005bd8:	0758      	lsls	r0, r3, #29
 8005bda:	d512      	bpl.n	8005c02 <__swsetup_r+0x5a>
 8005bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bde:	b141      	cbz	r1, 8005bf2 <__swsetup_r+0x4a>
 8005be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005be4:	4299      	cmp	r1, r3
 8005be6:	d002      	beq.n	8005bee <__swsetup_r+0x46>
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 ff01 	bl	80069f0 <_free_r>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6063      	str	r3, [r4, #4]
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f043 0308 	orr.w	r3, r3, #8
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	b94b      	cbnz	r3, 8005c22 <__swsetup_r+0x7a>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c18:	d003      	beq.n	8005c22 <__swsetup_r+0x7a>
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f001 fed5 	bl	80079cc <__smakebuf_r>
 8005c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c26:	f013 0201 	ands.w	r2, r3, #1
 8005c2a:	d00a      	beq.n	8005c42 <__swsetup_r+0x9a>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	60a2      	str	r2, [r4, #8]
 8005c30:	6962      	ldr	r2, [r4, #20]
 8005c32:	4252      	negs	r2, r2
 8005c34:	61a2      	str	r2, [r4, #24]
 8005c36:	6922      	ldr	r2, [r4, #16]
 8005c38:	b942      	cbnz	r2, 8005c4c <__swsetup_r+0xa4>
 8005c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c3e:	d1c5      	bne.n	8005bcc <__swsetup_r+0x24>
 8005c40:	bd38      	pop	{r3, r4, r5, pc}
 8005c42:	0799      	lsls	r1, r3, #30
 8005c44:	bf58      	it	pl
 8005c46:	6962      	ldrpl	r2, [r4, #20]
 8005c48:	60a2      	str	r2, [r4, #8]
 8005c4a:	e7f4      	b.n	8005c36 <__swsetup_r+0x8e>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e7f7      	b.n	8005c40 <__swsetup_r+0x98>
 8005c50:	20000020 	.word	0x20000020

08005c54 <memset>:
 8005c54:	4402      	add	r2, r0
 8005c56:	4603      	mov	r3, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <_localeconv_r>:
 8005c64:	4800      	ldr	r0, [pc, #0]	@ (8005c68 <_localeconv_r+0x4>)
 8005c66:	4770      	bx	lr
 8005c68:	20000160 	.word	0x20000160

08005c6c <_close_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d06      	ldr	r5, [pc, #24]	@ (8005c88 <_close_r+0x1c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fc f832 	bl	8001ce0 <_close>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_close_r+0x1a>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_close_r+0x1a>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	20000a98 	.word	0x20000a98

08005c8c <_lseek_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d07      	ldr	r5, [pc, #28]	@ (8005cac <_lseek_r+0x20>)
 8005c90:	4604      	mov	r4, r0
 8005c92:	4608      	mov	r0, r1
 8005c94:	4611      	mov	r1, r2
 8005c96:	2200      	movs	r2, #0
 8005c98:	602a      	str	r2, [r5, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f7fc f847 	bl	8001d2e <_lseek>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_lseek_r+0x1e>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_lseek_r+0x1e>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20000a98 	.word	0x20000a98

08005cb0 <_read_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4d07      	ldr	r5, [pc, #28]	@ (8005cd0 <_read_r+0x20>)
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	4608      	mov	r0, r1
 8005cb8:	4611      	mov	r1, r2
 8005cba:	2200      	movs	r2, #0
 8005cbc:	602a      	str	r2, [r5, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7fb ffd5 	bl	8001c6e <_read>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_read_r+0x1e>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_read_r+0x1e>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	20000a98 	.word	0x20000a98

08005cd4 <_write_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	@ (8005cf4 <_write_r+0x20>)
 8005cd8:	4604      	mov	r4, r0
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f7fb ffe0 	bl	8001ca8 <_write>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_write_r+0x1e>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_write_r+0x1e>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000a98 	.word	0x20000a98

08005cf8 <__errno>:
 8005cf8:	4b01      	ldr	r3, [pc, #4]	@ (8005d00 <__errno+0x8>)
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000020 	.word	0x20000020

08005d04 <__libc_init_array>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4d0d      	ldr	r5, [pc, #52]	@ (8005d3c <__libc_init_array+0x38>)
 8005d08:	4c0d      	ldr	r4, [pc, #52]	@ (8005d40 <__libc_init_array+0x3c>)
 8005d0a:	1b64      	subs	r4, r4, r5
 8005d0c:	10a4      	asrs	r4, r4, #2
 8005d0e:	2600      	movs	r6, #0
 8005d10:	42a6      	cmp	r6, r4
 8005d12:	d109      	bne.n	8005d28 <__libc_init_array+0x24>
 8005d14:	4d0b      	ldr	r5, [pc, #44]	@ (8005d44 <__libc_init_array+0x40>)
 8005d16:	4c0c      	ldr	r4, [pc, #48]	@ (8005d48 <__libc_init_array+0x44>)
 8005d18:	f001 ffd4 	bl	8007cc4 <_init>
 8005d1c:	1b64      	subs	r4, r4, r5
 8005d1e:	10a4      	asrs	r4, r4, #2
 8005d20:	2600      	movs	r6, #0
 8005d22:	42a6      	cmp	r6, r4
 8005d24:	d105      	bne.n	8005d32 <__libc_init_array+0x2e>
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2c:	4798      	blx	r3
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7ee      	b.n	8005d10 <__libc_init_array+0xc>
 8005d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d36:	4798      	blx	r3
 8005d38:	3601      	adds	r6, #1
 8005d3a:	e7f2      	b.n	8005d22 <__libc_init_array+0x1e>
 8005d3c:	08008160 	.word	0x08008160
 8005d40:	08008160 	.word	0x08008160
 8005d44:	08008160 	.word	0x08008160
 8005d48:	08008164 	.word	0x08008164

08005d4c <__retarget_lock_init_recursive>:
 8005d4c:	4770      	bx	lr

08005d4e <__retarget_lock_acquire_recursive>:
 8005d4e:	4770      	bx	lr

08005d50 <__retarget_lock_release_recursive>:
 8005d50:	4770      	bx	lr

08005d52 <quorem>:
 8005d52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d56:	6903      	ldr	r3, [r0, #16]
 8005d58:	690c      	ldr	r4, [r1, #16]
 8005d5a:	42a3      	cmp	r3, r4
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	db7e      	blt.n	8005e5e <quorem+0x10c>
 8005d60:	3c01      	subs	r4, #1
 8005d62:	f101 0814 	add.w	r8, r1, #20
 8005d66:	00a3      	lsls	r3, r4, #2
 8005d68:	f100 0514 	add.w	r5, r0, #20
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d84:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d88:	d32e      	bcc.n	8005de8 <quorem+0x96>
 8005d8a:	f04f 0a00 	mov.w	sl, #0
 8005d8e:	46c4      	mov	ip, r8
 8005d90:	46ae      	mov	lr, r5
 8005d92:	46d3      	mov	fp, sl
 8005d94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d98:	b298      	uxth	r0, r3
 8005d9a:	fb06 a000 	mla	r0, r6, r0, sl
 8005d9e:	0c02      	lsrs	r2, r0, #16
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	fb06 2303 	mla	r3, r6, r3, r2
 8005da6:	f8de 2000 	ldr.w	r2, [lr]
 8005daa:	b280      	uxth	r0, r0
 8005dac:	b292      	uxth	r2, r2
 8005dae:	1a12      	subs	r2, r2, r0
 8005db0:	445a      	add	r2, fp
 8005db2:	f8de 0000 	ldr.w	r0, [lr]
 8005db6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005dc0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005dc4:	b292      	uxth	r2, r2
 8005dc6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005dca:	45e1      	cmp	r9, ip
 8005dcc:	f84e 2b04 	str.w	r2, [lr], #4
 8005dd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005dd4:	d2de      	bcs.n	8005d94 <quorem+0x42>
 8005dd6:	9b00      	ldr	r3, [sp, #0]
 8005dd8:	58eb      	ldr	r3, [r5, r3]
 8005dda:	b92b      	cbnz	r3, 8005de8 <quorem+0x96>
 8005ddc:	9b01      	ldr	r3, [sp, #4]
 8005dde:	3b04      	subs	r3, #4
 8005de0:	429d      	cmp	r5, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	d32f      	bcc.n	8005e46 <quorem+0xf4>
 8005de6:	613c      	str	r4, [r7, #16]
 8005de8:	4638      	mov	r0, r7
 8005dea:	f001 f97b 	bl	80070e4 <__mcmp>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	db25      	blt.n	8005e3e <quorem+0xec>
 8005df2:	4629      	mov	r1, r5
 8005df4:	2000      	movs	r0, #0
 8005df6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005dfa:	f8d1 c000 	ldr.w	ip, [r1]
 8005dfe:	fa1f fe82 	uxth.w	lr, r2
 8005e02:	fa1f f38c 	uxth.w	r3, ip
 8005e06:	eba3 030e 	sub.w	r3, r3, lr
 8005e0a:	4403      	add	r3, r0
 8005e0c:	0c12      	lsrs	r2, r2, #16
 8005e0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e1c:	45c1      	cmp	r9, r8
 8005e1e:	f841 3b04 	str.w	r3, [r1], #4
 8005e22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e26:	d2e6      	bcs.n	8005df6 <quorem+0xa4>
 8005e28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e30:	b922      	cbnz	r2, 8005e3c <quorem+0xea>
 8005e32:	3b04      	subs	r3, #4
 8005e34:	429d      	cmp	r5, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	d30b      	bcc.n	8005e52 <quorem+0x100>
 8005e3a:	613c      	str	r4, [r7, #16]
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	4630      	mov	r0, r6
 8005e40:	b003      	add	sp, #12
 8005e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d1cb      	bne.n	8005de6 <quorem+0x94>
 8005e4e:	3c01      	subs	r4, #1
 8005e50:	e7c6      	b.n	8005de0 <quorem+0x8e>
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	3b04      	subs	r3, #4
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	d1ef      	bne.n	8005e3a <quorem+0xe8>
 8005e5a:	3c01      	subs	r4, #1
 8005e5c:	e7ea      	b.n	8005e34 <quorem+0xe2>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e7ee      	b.n	8005e40 <quorem+0xee>
 8005e62:	0000      	movs	r0, r0
 8005e64:	0000      	movs	r0, r0
	...

08005e68 <_dtoa_r>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	69c7      	ldr	r7, [r0, #28]
 8005e6e:	b099      	sub	sp, #100	@ 0x64
 8005e70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e74:	ec55 4b10 	vmov	r4, r5, d0
 8005e78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005e7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e7c:	4683      	mov	fp, r0
 8005e7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e82:	b97f      	cbnz	r7, 8005ea4 <_dtoa_r+0x3c>
 8005e84:	2010      	movs	r0, #16
 8005e86:	f000 fdfd 	bl	8006a84 <malloc>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e90:	b920      	cbnz	r0, 8005e9c <_dtoa_r+0x34>
 8005e92:	4ba7      	ldr	r3, [pc, #668]	@ (8006130 <_dtoa_r+0x2c8>)
 8005e94:	21ef      	movs	r1, #239	@ 0xef
 8005e96:	48a7      	ldr	r0, [pc, #668]	@ (8006134 <_dtoa_r+0x2cc>)
 8005e98:	f001 fe2e 	bl	8007af8 <__assert_func>
 8005e9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ea0:	6007      	str	r7, [r0, #0]
 8005ea2:	60c7      	str	r7, [r0, #12]
 8005ea4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ea8:	6819      	ldr	r1, [r3, #0]
 8005eaa:	b159      	cbz	r1, 8005ec4 <_dtoa_r+0x5c>
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	604a      	str	r2, [r1, #4]
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	4093      	lsls	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]
 8005eb6:	4658      	mov	r0, fp
 8005eb8:	f000 feda 	bl	8006c70 <_Bfree>
 8005ebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	1e2b      	subs	r3, r5, #0
 8005ec6:	bfb9      	ittee	lt
 8005ec8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ecc:	9303      	strlt	r3, [sp, #12]
 8005ece:	2300      	movge	r3, #0
 8005ed0:	6033      	strge	r3, [r6, #0]
 8005ed2:	9f03      	ldr	r7, [sp, #12]
 8005ed4:	4b98      	ldr	r3, [pc, #608]	@ (8006138 <_dtoa_r+0x2d0>)
 8005ed6:	bfbc      	itt	lt
 8005ed8:	2201      	movlt	r2, #1
 8005eda:	6032      	strlt	r2, [r6, #0]
 8005edc:	43bb      	bics	r3, r7
 8005ede:	d112      	bne.n	8005f06 <_dtoa_r+0x9e>
 8005ee0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ee2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005eec:	4323      	orrs	r3, r4
 8005eee:	f000 854d 	beq.w	800698c <_dtoa_r+0xb24>
 8005ef2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ef4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800614c <_dtoa_r+0x2e4>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 854f 	beq.w	800699c <_dtoa_r+0xb34>
 8005efe:	f10a 0303 	add.w	r3, sl, #3
 8005f02:	f000 bd49 	b.w	8006998 <_dtoa_r+0xb30>
 8005f06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	ec51 0b17 	vmov	r0, r1, d7
 8005f10:	2300      	movs	r3, #0
 8005f12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f16:	f7fa fdff 	bl	8000b18 <__aeabi_dcmpeq>
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	b158      	cbz	r0, 8005f36 <_dtoa_r+0xce>
 8005f1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f20:	2301      	movs	r3, #1
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f26:	b113      	cbz	r3, 8005f2e <_dtoa_r+0xc6>
 8005f28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f2a:	4b84      	ldr	r3, [pc, #528]	@ (800613c <_dtoa_r+0x2d4>)
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006150 <_dtoa_r+0x2e8>
 8005f32:	f000 bd33 	b.w	800699c <_dtoa_r+0xb34>
 8005f36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f3a:	aa16      	add	r2, sp, #88	@ 0x58
 8005f3c:	a917      	add	r1, sp, #92	@ 0x5c
 8005f3e:	4658      	mov	r0, fp
 8005f40:	f001 f980 	bl	8007244 <__d2b>
 8005f44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f48:	4681      	mov	r9, r0
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	d077      	beq.n	800603e <_dtoa_r+0x1d6>
 8005f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f68:	4619      	mov	r1, r3
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4b74      	ldr	r3, [pc, #464]	@ (8006140 <_dtoa_r+0x2d8>)
 8005f6e:	f7fa f9b3 	bl	80002d8 <__aeabi_dsub>
 8005f72:	a369      	add	r3, pc, #420	@ (adr r3, 8006118 <_dtoa_r+0x2b0>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa fb66 	bl	8000648 <__aeabi_dmul>
 8005f7c:	a368      	add	r3, pc, #416	@ (adr r3, 8006120 <_dtoa_r+0x2b8>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f7fa f9ab 	bl	80002dc <__adddf3>
 8005f86:	4604      	mov	r4, r0
 8005f88:	4630      	mov	r0, r6
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	f7fa faf2 	bl	8000574 <__aeabi_i2d>
 8005f90:	a365      	add	r3, pc, #404	@ (adr r3, 8006128 <_dtoa_r+0x2c0>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa fb57 	bl	8000648 <__aeabi_dmul>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	f7fa f99b 	bl	80002dc <__adddf3>
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	460d      	mov	r5, r1
 8005faa:	f7fa fdfd 	bl	8000ba8 <__aeabi_d2iz>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa fdb8 	bl	8000b2c <__aeabi_dcmplt>
 8005fbc:	b140      	cbz	r0, 8005fd0 <_dtoa_r+0x168>
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	f7fa fad8 	bl	8000574 <__aeabi_i2d>
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	f7fa fda6 	bl	8000b18 <__aeabi_dcmpeq>
 8005fcc:	b900      	cbnz	r0, 8005fd0 <_dtoa_r+0x168>
 8005fce:	3f01      	subs	r7, #1
 8005fd0:	2f16      	cmp	r7, #22
 8005fd2:	d851      	bhi.n	8006078 <_dtoa_r+0x210>
 8005fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8006144 <_dtoa_r+0x2dc>)
 8005fd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fe2:	f7fa fda3 	bl	8000b2c <__aeabi_dcmplt>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d048      	beq.n	800607c <_dtoa_r+0x214>
 8005fea:	3f01      	subs	r7, #1
 8005fec:	2300      	movs	r3, #0
 8005fee:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ff0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005ff2:	1b9b      	subs	r3, r3, r6
 8005ff4:	1e5a      	subs	r2, r3, #1
 8005ff6:	bf44      	itt	mi
 8005ff8:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ffc:	2300      	movmi	r3, #0
 8005ffe:	9208      	str	r2, [sp, #32]
 8006000:	bf54      	ite	pl
 8006002:	f04f 0800 	movpl.w	r8, #0
 8006006:	9308      	strmi	r3, [sp, #32]
 8006008:	2f00      	cmp	r7, #0
 800600a:	db39      	blt.n	8006080 <_dtoa_r+0x218>
 800600c:	9b08      	ldr	r3, [sp, #32]
 800600e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006010:	443b      	add	r3, r7
 8006012:	9308      	str	r3, [sp, #32]
 8006014:	2300      	movs	r3, #0
 8006016:	930a      	str	r3, [sp, #40]	@ 0x28
 8006018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800601a:	2b09      	cmp	r3, #9
 800601c:	d864      	bhi.n	80060e8 <_dtoa_r+0x280>
 800601e:	2b05      	cmp	r3, #5
 8006020:	bfc4      	itt	gt
 8006022:	3b04      	subgt	r3, #4
 8006024:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006028:	f1a3 0302 	sub.w	r3, r3, #2
 800602c:	bfcc      	ite	gt
 800602e:	2400      	movgt	r4, #0
 8006030:	2401      	movle	r4, #1
 8006032:	2b03      	cmp	r3, #3
 8006034:	d863      	bhi.n	80060fe <_dtoa_r+0x296>
 8006036:	e8df f003 	tbb	[pc, r3]
 800603a:	372a      	.short	0x372a
 800603c:	5535      	.short	0x5535
 800603e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006042:	441e      	add	r6, r3
 8006044:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006048:	2b20      	cmp	r3, #32
 800604a:	bfc1      	itttt	gt
 800604c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006050:	409f      	lslgt	r7, r3
 8006052:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006056:	fa24 f303 	lsrgt.w	r3, r4, r3
 800605a:	bfd6      	itet	le
 800605c:	f1c3 0320 	rsble	r3, r3, #32
 8006060:	ea47 0003 	orrgt.w	r0, r7, r3
 8006064:	fa04 f003 	lslle.w	r0, r4, r3
 8006068:	f7fa fa74 	bl	8000554 <__aeabi_ui2d>
 800606c:	2201      	movs	r2, #1
 800606e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006072:	3e01      	subs	r6, #1
 8006074:	9214      	str	r2, [sp, #80]	@ 0x50
 8006076:	e777      	b.n	8005f68 <_dtoa_r+0x100>
 8006078:	2301      	movs	r3, #1
 800607a:	e7b8      	b.n	8005fee <_dtoa_r+0x186>
 800607c:	9012      	str	r0, [sp, #72]	@ 0x48
 800607e:	e7b7      	b.n	8005ff0 <_dtoa_r+0x188>
 8006080:	427b      	negs	r3, r7
 8006082:	930a      	str	r3, [sp, #40]	@ 0x28
 8006084:	2300      	movs	r3, #0
 8006086:	eba8 0807 	sub.w	r8, r8, r7
 800608a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800608c:	e7c4      	b.n	8006018 <_dtoa_r+0x1b0>
 800608e:	2300      	movs	r3, #0
 8006090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc35      	bgt.n	8006104 <_dtoa_r+0x29c>
 8006098:	2301      	movs	r3, #1
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	9307      	str	r3, [sp, #28]
 800609e:	461a      	mov	r2, r3
 80060a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80060a2:	e00b      	b.n	80060bc <_dtoa_r+0x254>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e7f3      	b.n	8006090 <_dtoa_r+0x228>
 80060a8:	2300      	movs	r3, #0
 80060aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	bfb8      	it	lt
 80060ba:	2301      	movlt	r3, #1
 80060bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80060c0:	2100      	movs	r1, #0
 80060c2:	2204      	movs	r2, #4
 80060c4:	f102 0514 	add.w	r5, r2, #20
 80060c8:	429d      	cmp	r5, r3
 80060ca:	d91f      	bls.n	800610c <_dtoa_r+0x2a4>
 80060cc:	6041      	str	r1, [r0, #4]
 80060ce:	4658      	mov	r0, fp
 80060d0:	f000 fd8e 	bl	8006bf0 <_Balloc>
 80060d4:	4682      	mov	sl, r0
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d13c      	bne.n	8006154 <_dtoa_r+0x2ec>
 80060da:	4b1b      	ldr	r3, [pc, #108]	@ (8006148 <_dtoa_r+0x2e0>)
 80060dc:	4602      	mov	r2, r0
 80060de:	f240 11af 	movw	r1, #431	@ 0x1af
 80060e2:	e6d8      	b.n	8005e96 <_dtoa_r+0x2e>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e7e0      	b.n	80060aa <_dtoa_r+0x242>
 80060e8:	2401      	movs	r4, #1
 80060ea:	2300      	movs	r3, #0
 80060ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060f0:	f04f 33ff 	mov.w	r3, #4294967295
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2312      	movs	r3, #18
 80060fc:	e7d0      	b.n	80060a0 <_dtoa_r+0x238>
 80060fe:	2301      	movs	r3, #1
 8006100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006102:	e7f5      	b.n	80060f0 <_dtoa_r+0x288>
 8006104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	9307      	str	r3, [sp, #28]
 800610a:	e7d7      	b.n	80060bc <_dtoa_r+0x254>
 800610c:	3101      	adds	r1, #1
 800610e:	0052      	lsls	r2, r2, #1
 8006110:	e7d8      	b.n	80060c4 <_dtoa_r+0x25c>
 8006112:	bf00      	nop
 8006114:	f3af 8000 	nop.w
 8006118:	636f4361 	.word	0x636f4361
 800611c:	3fd287a7 	.word	0x3fd287a7
 8006120:	8b60c8b3 	.word	0x8b60c8b3
 8006124:	3fc68a28 	.word	0x3fc68a28
 8006128:	509f79fb 	.word	0x509f79fb
 800612c:	3fd34413 	.word	0x3fd34413
 8006130:	08007e25 	.word	0x08007e25
 8006134:	08007e3c 	.word	0x08007e3c
 8006138:	7ff00000 	.word	0x7ff00000
 800613c:	08007df5 	.word	0x08007df5
 8006140:	3ff80000 	.word	0x3ff80000
 8006144:	08007f38 	.word	0x08007f38
 8006148:	08007e94 	.word	0x08007e94
 800614c:	08007e21 	.word	0x08007e21
 8006150:	08007df4 	.word	0x08007df4
 8006154:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006158:	6018      	str	r0, [r3, #0]
 800615a:	9b07      	ldr	r3, [sp, #28]
 800615c:	2b0e      	cmp	r3, #14
 800615e:	f200 80a4 	bhi.w	80062aa <_dtoa_r+0x442>
 8006162:	2c00      	cmp	r4, #0
 8006164:	f000 80a1 	beq.w	80062aa <_dtoa_r+0x442>
 8006168:	2f00      	cmp	r7, #0
 800616a:	dd33      	ble.n	80061d4 <_dtoa_r+0x36c>
 800616c:	4bad      	ldr	r3, [pc, #692]	@ (8006424 <_dtoa_r+0x5bc>)
 800616e:	f007 020f 	and.w	r2, r7, #15
 8006172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006176:	ed93 7b00 	vldr	d7, [r3]
 800617a:	05f8      	lsls	r0, r7, #23
 800617c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006180:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006184:	d516      	bpl.n	80061b4 <_dtoa_r+0x34c>
 8006186:	4ba8      	ldr	r3, [pc, #672]	@ (8006428 <_dtoa_r+0x5c0>)
 8006188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800618c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006190:	f7fa fb84 	bl	800089c <__aeabi_ddiv>
 8006194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006198:	f004 040f 	and.w	r4, r4, #15
 800619c:	2603      	movs	r6, #3
 800619e:	4da2      	ldr	r5, [pc, #648]	@ (8006428 <_dtoa_r+0x5c0>)
 80061a0:	b954      	cbnz	r4, 80061b8 <_dtoa_r+0x350>
 80061a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061aa:	f7fa fb77 	bl	800089c <__aeabi_ddiv>
 80061ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b2:	e028      	b.n	8006206 <_dtoa_r+0x39e>
 80061b4:	2602      	movs	r6, #2
 80061b6:	e7f2      	b.n	800619e <_dtoa_r+0x336>
 80061b8:	07e1      	lsls	r1, r4, #31
 80061ba:	d508      	bpl.n	80061ce <_dtoa_r+0x366>
 80061bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061c4:	f7fa fa40 	bl	8000648 <__aeabi_dmul>
 80061c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061cc:	3601      	adds	r6, #1
 80061ce:	1064      	asrs	r4, r4, #1
 80061d0:	3508      	adds	r5, #8
 80061d2:	e7e5      	b.n	80061a0 <_dtoa_r+0x338>
 80061d4:	f000 80d2 	beq.w	800637c <_dtoa_r+0x514>
 80061d8:	427c      	negs	r4, r7
 80061da:	4b92      	ldr	r3, [pc, #584]	@ (8006424 <_dtoa_r+0x5bc>)
 80061dc:	4d92      	ldr	r5, [pc, #584]	@ (8006428 <_dtoa_r+0x5c0>)
 80061de:	f004 020f 	and.w	r2, r4, #15
 80061e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061ee:	f7fa fa2b 	bl	8000648 <__aeabi_dmul>
 80061f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f6:	1124      	asrs	r4, r4, #4
 80061f8:	2300      	movs	r3, #0
 80061fa:	2602      	movs	r6, #2
 80061fc:	2c00      	cmp	r4, #0
 80061fe:	f040 80b2 	bne.w	8006366 <_dtoa_r+0x4fe>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1d3      	bne.n	80061ae <_dtoa_r+0x346>
 8006206:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006208:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80b7 	beq.w	8006380 <_dtoa_r+0x518>
 8006212:	4b86      	ldr	r3, [pc, #536]	@ (800642c <_dtoa_r+0x5c4>)
 8006214:	2200      	movs	r2, #0
 8006216:	4620      	mov	r0, r4
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa fc87 	bl	8000b2c <__aeabi_dcmplt>
 800621e:	2800      	cmp	r0, #0
 8006220:	f000 80ae 	beq.w	8006380 <_dtoa_r+0x518>
 8006224:	9b07      	ldr	r3, [sp, #28]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80aa 	beq.w	8006380 <_dtoa_r+0x518>
 800622c:	9b00      	ldr	r3, [sp, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	dd37      	ble.n	80062a2 <_dtoa_r+0x43a>
 8006232:	1e7b      	subs	r3, r7, #1
 8006234:	9304      	str	r3, [sp, #16]
 8006236:	4620      	mov	r0, r4
 8006238:	4b7d      	ldr	r3, [pc, #500]	@ (8006430 <_dtoa_r+0x5c8>)
 800623a:	2200      	movs	r2, #0
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa fa03 	bl	8000648 <__aeabi_dmul>
 8006242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006246:	9c00      	ldr	r4, [sp, #0]
 8006248:	3601      	adds	r6, #1
 800624a:	4630      	mov	r0, r6
 800624c:	f7fa f992 	bl	8000574 <__aeabi_i2d>
 8006250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006254:	f7fa f9f8 	bl	8000648 <__aeabi_dmul>
 8006258:	4b76      	ldr	r3, [pc, #472]	@ (8006434 <_dtoa_r+0x5cc>)
 800625a:	2200      	movs	r2, #0
 800625c:	f7fa f83e 	bl	80002dc <__adddf3>
 8006260:	4605      	mov	r5, r0
 8006262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006266:	2c00      	cmp	r4, #0
 8006268:	f040 808d 	bne.w	8006386 <_dtoa_r+0x51e>
 800626c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006270:	4b71      	ldr	r3, [pc, #452]	@ (8006438 <_dtoa_r+0x5d0>)
 8006272:	2200      	movs	r2, #0
 8006274:	f7fa f830 	bl	80002d8 <__aeabi_dsub>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006280:	462a      	mov	r2, r5
 8006282:	4633      	mov	r3, r6
 8006284:	f7fa fc70 	bl	8000b68 <__aeabi_dcmpgt>
 8006288:	2800      	cmp	r0, #0
 800628a:	f040 828b 	bne.w	80067a4 <_dtoa_r+0x93c>
 800628e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006292:	462a      	mov	r2, r5
 8006294:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006298:	f7fa fc48 	bl	8000b2c <__aeabi_dcmplt>
 800629c:	2800      	cmp	r0, #0
 800629e:	f040 8128 	bne.w	80064f2 <_dtoa_r+0x68a>
 80062a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80062aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f2c0 815a 	blt.w	8006566 <_dtoa_r+0x6fe>
 80062b2:	2f0e      	cmp	r7, #14
 80062b4:	f300 8157 	bgt.w	8006566 <_dtoa_r+0x6fe>
 80062b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006424 <_dtoa_r+0x5bc>)
 80062ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062be:	ed93 7b00 	vldr	d7, [r3]
 80062c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	ed8d 7b00 	vstr	d7, [sp]
 80062ca:	da03      	bge.n	80062d4 <_dtoa_r+0x46c>
 80062cc:	9b07      	ldr	r3, [sp, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f340 8101 	ble.w	80064d6 <_dtoa_r+0x66e>
 80062d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062d8:	4656      	mov	r6, sl
 80062da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062de:	4620      	mov	r0, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	f7fa fadb 	bl	800089c <__aeabi_ddiv>
 80062e6:	f7fa fc5f 	bl	8000ba8 <__aeabi_d2iz>
 80062ea:	4680      	mov	r8, r0
 80062ec:	f7fa f942 	bl	8000574 <__aeabi_i2d>
 80062f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062f4:	f7fa f9a8 	bl	8000648 <__aeabi_dmul>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4620      	mov	r0, r4
 80062fe:	4629      	mov	r1, r5
 8006300:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006304:	f7f9 ffe8 	bl	80002d8 <__aeabi_dsub>
 8006308:	f806 4b01 	strb.w	r4, [r6], #1
 800630c:	9d07      	ldr	r5, [sp, #28]
 800630e:	eba6 040a 	sub.w	r4, r6, sl
 8006312:	42a5      	cmp	r5, r4
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	f040 8117 	bne.w	800654a <_dtoa_r+0x6e2>
 800631c:	f7f9 ffde 	bl	80002dc <__adddf3>
 8006320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006324:	4604      	mov	r4, r0
 8006326:	460d      	mov	r5, r1
 8006328:	f7fa fc1e 	bl	8000b68 <__aeabi_dcmpgt>
 800632c:	2800      	cmp	r0, #0
 800632e:	f040 80f9 	bne.w	8006524 <_dtoa_r+0x6bc>
 8006332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7fa fbed 	bl	8000b18 <__aeabi_dcmpeq>
 800633e:	b118      	cbz	r0, 8006348 <_dtoa_r+0x4e0>
 8006340:	f018 0f01 	tst.w	r8, #1
 8006344:	f040 80ee 	bne.w	8006524 <_dtoa_r+0x6bc>
 8006348:	4649      	mov	r1, r9
 800634a:	4658      	mov	r0, fp
 800634c:	f000 fc90 	bl	8006c70 <_Bfree>
 8006350:	2300      	movs	r3, #0
 8006352:	7033      	strb	r3, [r6, #0]
 8006354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006356:	3701      	adds	r7, #1
 8006358:	601f      	str	r7, [r3, #0]
 800635a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 831d 	beq.w	800699c <_dtoa_r+0xb34>
 8006362:	601e      	str	r6, [r3, #0]
 8006364:	e31a      	b.n	800699c <_dtoa_r+0xb34>
 8006366:	07e2      	lsls	r2, r4, #31
 8006368:	d505      	bpl.n	8006376 <_dtoa_r+0x50e>
 800636a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800636e:	f7fa f96b 	bl	8000648 <__aeabi_dmul>
 8006372:	3601      	adds	r6, #1
 8006374:	2301      	movs	r3, #1
 8006376:	1064      	asrs	r4, r4, #1
 8006378:	3508      	adds	r5, #8
 800637a:	e73f      	b.n	80061fc <_dtoa_r+0x394>
 800637c:	2602      	movs	r6, #2
 800637e:	e742      	b.n	8006206 <_dtoa_r+0x39e>
 8006380:	9c07      	ldr	r4, [sp, #28]
 8006382:	9704      	str	r7, [sp, #16]
 8006384:	e761      	b.n	800624a <_dtoa_r+0x3e2>
 8006386:	4b27      	ldr	r3, [pc, #156]	@ (8006424 <_dtoa_r+0x5bc>)
 8006388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800638a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800638e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006392:	4454      	add	r4, sl
 8006394:	2900      	cmp	r1, #0
 8006396:	d053      	beq.n	8006440 <_dtoa_r+0x5d8>
 8006398:	4928      	ldr	r1, [pc, #160]	@ (800643c <_dtoa_r+0x5d4>)
 800639a:	2000      	movs	r0, #0
 800639c:	f7fa fa7e 	bl	800089c <__aeabi_ddiv>
 80063a0:	4633      	mov	r3, r6
 80063a2:	462a      	mov	r2, r5
 80063a4:	f7f9 ff98 	bl	80002d8 <__aeabi_dsub>
 80063a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ac:	4656      	mov	r6, sl
 80063ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063b2:	f7fa fbf9 	bl	8000ba8 <__aeabi_d2iz>
 80063b6:	4605      	mov	r5, r0
 80063b8:	f7fa f8dc 	bl	8000574 <__aeabi_i2d>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c4:	f7f9 ff88 	bl	80002d8 <__aeabi_dsub>
 80063c8:	3530      	adds	r5, #48	@ 0x30
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063d2:	f806 5b01 	strb.w	r5, [r6], #1
 80063d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063da:	f7fa fba7 	bl	8000b2c <__aeabi_dcmplt>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d171      	bne.n	80064c6 <_dtoa_r+0x65e>
 80063e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063e6:	4911      	ldr	r1, [pc, #68]	@ (800642c <_dtoa_r+0x5c4>)
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7f9 ff75 	bl	80002d8 <__aeabi_dsub>
 80063ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063f2:	f7fa fb9b 	bl	8000b2c <__aeabi_dcmplt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f040 8095 	bne.w	8006526 <_dtoa_r+0x6be>
 80063fc:	42a6      	cmp	r6, r4
 80063fe:	f43f af50 	beq.w	80062a2 <_dtoa_r+0x43a>
 8006402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006406:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <_dtoa_r+0x5c8>)
 8006408:	2200      	movs	r2, #0
 800640a:	f7fa f91d 	bl	8000648 <__aeabi_dmul>
 800640e:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <_dtoa_r+0x5c8>)
 8006410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006414:	2200      	movs	r2, #0
 8006416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800641a:	f7fa f915 	bl	8000648 <__aeabi_dmul>
 800641e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006422:	e7c4      	b.n	80063ae <_dtoa_r+0x546>
 8006424:	08007f38 	.word	0x08007f38
 8006428:	08007f10 	.word	0x08007f10
 800642c:	3ff00000 	.word	0x3ff00000
 8006430:	40240000 	.word	0x40240000
 8006434:	401c0000 	.word	0x401c0000
 8006438:	40140000 	.word	0x40140000
 800643c:	3fe00000 	.word	0x3fe00000
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	f7fa f900 	bl	8000648 <__aeabi_dmul>
 8006448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800644c:	9415      	str	r4, [sp, #84]	@ 0x54
 800644e:	4656      	mov	r6, sl
 8006450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006454:	f7fa fba8 	bl	8000ba8 <__aeabi_d2iz>
 8006458:	4605      	mov	r5, r0
 800645a:	f7fa f88b 	bl	8000574 <__aeabi_i2d>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006466:	f7f9 ff37 	bl	80002d8 <__aeabi_dsub>
 800646a:	3530      	adds	r5, #48	@ 0x30
 800646c:	f806 5b01 	strb.w	r5, [r6], #1
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	42a6      	cmp	r6, r4
 8006476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	d124      	bne.n	80064ca <_dtoa_r+0x662>
 8006480:	4bac      	ldr	r3, [pc, #688]	@ (8006734 <_dtoa_r+0x8cc>)
 8006482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006486:	f7f9 ff29 	bl	80002dc <__adddf3>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006492:	f7fa fb69 	bl	8000b68 <__aeabi_dcmpgt>
 8006496:	2800      	cmp	r0, #0
 8006498:	d145      	bne.n	8006526 <_dtoa_r+0x6be>
 800649a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800649e:	49a5      	ldr	r1, [pc, #660]	@ (8006734 <_dtoa_r+0x8cc>)
 80064a0:	2000      	movs	r0, #0
 80064a2:	f7f9 ff19 	bl	80002d8 <__aeabi_dsub>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ae:	f7fa fb3d 	bl	8000b2c <__aeabi_dcmplt>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	f43f aef5 	beq.w	80062a2 <_dtoa_r+0x43a>
 80064b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80064ba:	1e73      	subs	r3, r6, #1
 80064bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80064be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064c2:	2b30      	cmp	r3, #48	@ 0x30
 80064c4:	d0f8      	beq.n	80064b8 <_dtoa_r+0x650>
 80064c6:	9f04      	ldr	r7, [sp, #16]
 80064c8:	e73e      	b.n	8006348 <_dtoa_r+0x4e0>
 80064ca:	4b9b      	ldr	r3, [pc, #620]	@ (8006738 <_dtoa_r+0x8d0>)
 80064cc:	f7fa f8bc 	bl	8000648 <__aeabi_dmul>
 80064d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d4:	e7bc      	b.n	8006450 <_dtoa_r+0x5e8>
 80064d6:	d10c      	bne.n	80064f2 <_dtoa_r+0x68a>
 80064d8:	4b98      	ldr	r3, [pc, #608]	@ (800673c <_dtoa_r+0x8d4>)
 80064da:	2200      	movs	r2, #0
 80064dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064e0:	f7fa f8b2 	bl	8000648 <__aeabi_dmul>
 80064e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064e8:	f7fa fb34 	bl	8000b54 <__aeabi_dcmpge>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f000 8157 	beq.w	80067a0 <_dtoa_r+0x938>
 80064f2:	2400      	movs	r4, #0
 80064f4:	4625      	mov	r5, r4
 80064f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064f8:	43db      	mvns	r3, r3
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	4656      	mov	r6, sl
 80064fe:	2700      	movs	r7, #0
 8006500:	4621      	mov	r1, r4
 8006502:	4658      	mov	r0, fp
 8006504:	f000 fbb4 	bl	8006c70 <_Bfree>
 8006508:	2d00      	cmp	r5, #0
 800650a:	d0dc      	beq.n	80064c6 <_dtoa_r+0x65e>
 800650c:	b12f      	cbz	r7, 800651a <_dtoa_r+0x6b2>
 800650e:	42af      	cmp	r7, r5
 8006510:	d003      	beq.n	800651a <_dtoa_r+0x6b2>
 8006512:	4639      	mov	r1, r7
 8006514:	4658      	mov	r0, fp
 8006516:	f000 fbab 	bl	8006c70 <_Bfree>
 800651a:	4629      	mov	r1, r5
 800651c:	4658      	mov	r0, fp
 800651e:	f000 fba7 	bl	8006c70 <_Bfree>
 8006522:	e7d0      	b.n	80064c6 <_dtoa_r+0x65e>
 8006524:	9704      	str	r7, [sp, #16]
 8006526:	4633      	mov	r3, r6
 8006528:	461e      	mov	r6, r3
 800652a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800652e:	2a39      	cmp	r2, #57	@ 0x39
 8006530:	d107      	bne.n	8006542 <_dtoa_r+0x6da>
 8006532:	459a      	cmp	sl, r3
 8006534:	d1f8      	bne.n	8006528 <_dtoa_r+0x6c0>
 8006536:	9a04      	ldr	r2, [sp, #16]
 8006538:	3201      	adds	r2, #1
 800653a:	9204      	str	r2, [sp, #16]
 800653c:	2230      	movs	r2, #48	@ 0x30
 800653e:	f88a 2000 	strb.w	r2, [sl]
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	3201      	adds	r2, #1
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	e7bd      	b.n	80064c6 <_dtoa_r+0x65e>
 800654a:	4b7b      	ldr	r3, [pc, #492]	@ (8006738 <_dtoa_r+0x8d0>)
 800654c:	2200      	movs	r2, #0
 800654e:	f7fa f87b 	bl	8000648 <__aeabi_dmul>
 8006552:	2200      	movs	r2, #0
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	460d      	mov	r5, r1
 800655a:	f7fa fadd 	bl	8000b18 <__aeabi_dcmpeq>
 800655e:	2800      	cmp	r0, #0
 8006560:	f43f aebb 	beq.w	80062da <_dtoa_r+0x472>
 8006564:	e6f0      	b.n	8006348 <_dtoa_r+0x4e0>
 8006566:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006568:	2a00      	cmp	r2, #0
 800656a:	f000 80db 	beq.w	8006724 <_dtoa_r+0x8bc>
 800656e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006570:	2a01      	cmp	r2, #1
 8006572:	f300 80bf 	bgt.w	80066f4 <_dtoa_r+0x88c>
 8006576:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006578:	2a00      	cmp	r2, #0
 800657a:	f000 80b7 	beq.w	80066ec <_dtoa_r+0x884>
 800657e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006582:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006584:	4646      	mov	r6, r8
 8006586:	9a08      	ldr	r2, [sp, #32]
 8006588:	2101      	movs	r1, #1
 800658a:	441a      	add	r2, r3
 800658c:	4658      	mov	r0, fp
 800658e:	4498      	add	r8, r3
 8006590:	9208      	str	r2, [sp, #32]
 8006592:	f000 fc21 	bl	8006dd8 <__i2b>
 8006596:	4605      	mov	r5, r0
 8006598:	b15e      	cbz	r6, 80065b2 <_dtoa_r+0x74a>
 800659a:	9b08      	ldr	r3, [sp, #32]
 800659c:	2b00      	cmp	r3, #0
 800659e:	dd08      	ble.n	80065b2 <_dtoa_r+0x74a>
 80065a0:	42b3      	cmp	r3, r6
 80065a2:	9a08      	ldr	r2, [sp, #32]
 80065a4:	bfa8      	it	ge
 80065a6:	4633      	movge	r3, r6
 80065a8:	eba8 0803 	sub.w	r8, r8, r3
 80065ac:	1af6      	subs	r6, r6, r3
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	9308      	str	r3, [sp, #32]
 80065b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065b4:	b1f3      	cbz	r3, 80065f4 <_dtoa_r+0x78c>
 80065b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80b7 	beq.w	800672c <_dtoa_r+0x8c4>
 80065be:	b18c      	cbz	r4, 80065e4 <_dtoa_r+0x77c>
 80065c0:	4629      	mov	r1, r5
 80065c2:	4622      	mov	r2, r4
 80065c4:	4658      	mov	r0, fp
 80065c6:	f000 fcc7 	bl	8006f58 <__pow5mult>
 80065ca:	464a      	mov	r2, r9
 80065cc:	4601      	mov	r1, r0
 80065ce:	4605      	mov	r5, r0
 80065d0:	4658      	mov	r0, fp
 80065d2:	f000 fc17 	bl	8006e04 <__multiply>
 80065d6:	4649      	mov	r1, r9
 80065d8:	9004      	str	r0, [sp, #16]
 80065da:	4658      	mov	r0, fp
 80065dc:	f000 fb48 	bl	8006c70 <_Bfree>
 80065e0:	9b04      	ldr	r3, [sp, #16]
 80065e2:	4699      	mov	r9, r3
 80065e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065e6:	1b1a      	subs	r2, r3, r4
 80065e8:	d004      	beq.n	80065f4 <_dtoa_r+0x78c>
 80065ea:	4649      	mov	r1, r9
 80065ec:	4658      	mov	r0, fp
 80065ee:	f000 fcb3 	bl	8006f58 <__pow5mult>
 80065f2:	4681      	mov	r9, r0
 80065f4:	2101      	movs	r1, #1
 80065f6:	4658      	mov	r0, fp
 80065f8:	f000 fbee 	bl	8006dd8 <__i2b>
 80065fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065fe:	4604      	mov	r4, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 81cf 	beq.w	80069a4 <_dtoa_r+0xb3c>
 8006606:	461a      	mov	r2, r3
 8006608:	4601      	mov	r1, r0
 800660a:	4658      	mov	r0, fp
 800660c:	f000 fca4 	bl	8006f58 <__pow5mult>
 8006610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006612:	2b01      	cmp	r3, #1
 8006614:	4604      	mov	r4, r0
 8006616:	f300 8095 	bgt.w	8006744 <_dtoa_r+0x8dc>
 800661a:	9b02      	ldr	r3, [sp, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 8087 	bne.w	8006730 <_dtoa_r+0x8c8>
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 8089 	bne.w	8006740 <_dtoa_r+0x8d8>
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006634:	0d1b      	lsrs	r3, r3, #20
 8006636:	051b      	lsls	r3, r3, #20
 8006638:	b12b      	cbz	r3, 8006646 <_dtoa_r+0x7de>
 800663a:	9b08      	ldr	r3, [sp, #32]
 800663c:	3301      	adds	r3, #1
 800663e:	9308      	str	r3, [sp, #32]
 8006640:	f108 0801 	add.w	r8, r8, #1
 8006644:	2301      	movs	r3, #1
 8006646:	930a      	str	r3, [sp, #40]	@ 0x28
 8006648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 81b0 	beq.w	80069b0 <_dtoa_r+0xb48>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006656:	6918      	ldr	r0, [r3, #16]
 8006658:	f000 fb72 	bl	8006d40 <__hi0bits>
 800665c:	f1c0 0020 	rsb	r0, r0, #32
 8006660:	9b08      	ldr	r3, [sp, #32]
 8006662:	4418      	add	r0, r3
 8006664:	f010 001f 	ands.w	r0, r0, #31
 8006668:	d077      	beq.n	800675a <_dtoa_r+0x8f2>
 800666a:	f1c0 0320 	rsb	r3, r0, #32
 800666e:	2b04      	cmp	r3, #4
 8006670:	dd6b      	ble.n	800674a <_dtoa_r+0x8e2>
 8006672:	9b08      	ldr	r3, [sp, #32]
 8006674:	f1c0 001c 	rsb	r0, r0, #28
 8006678:	4403      	add	r3, r0
 800667a:	4480      	add	r8, r0
 800667c:	4406      	add	r6, r0
 800667e:	9308      	str	r3, [sp, #32]
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	dd05      	ble.n	8006692 <_dtoa_r+0x82a>
 8006686:	4649      	mov	r1, r9
 8006688:	4642      	mov	r2, r8
 800668a:	4658      	mov	r0, fp
 800668c:	f000 fcbe 	bl	800700c <__lshift>
 8006690:	4681      	mov	r9, r0
 8006692:	9b08      	ldr	r3, [sp, #32]
 8006694:	2b00      	cmp	r3, #0
 8006696:	dd05      	ble.n	80066a4 <_dtoa_r+0x83c>
 8006698:	4621      	mov	r1, r4
 800669a:	461a      	mov	r2, r3
 800669c:	4658      	mov	r0, fp
 800669e:	f000 fcb5 	bl	800700c <__lshift>
 80066a2:	4604      	mov	r4, r0
 80066a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d059      	beq.n	800675e <_dtoa_r+0x8f6>
 80066aa:	4621      	mov	r1, r4
 80066ac:	4648      	mov	r0, r9
 80066ae:	f000 fd19 	bl	80070e4 <__mcmp>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	da53      	bge.n	800675e <_dtoa_r+0x8f6>
 80066b6:	1e7b      	subs	r3, r7, #1
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	4649      	mov	r1, r9
 80066bc:	2300      	movs	r3, #0
 80066be:	220a      	movs	r2, #10
 80066c0:	4658      	mov	r0, fp
 80066c2:	f000 faf7 	bl	8006cb4 <__multadd>
 80066c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c8:	4681      	mov	r9, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8172 	beq.w	80069b4 <_dtoa_r+0xb4c>
 80066d0:	2300      	movs	r3, #0
 80066d2:	4629      	mov	r1, r5
 80066d4:	220a      	movs	r2, #10
 80066d6:	4658      	mov	r0, fp
 80066d8:	f000 faec 	bl	8006cb4 <__multadd>
 80066dc:	9b00      	ldr	r3, [sp, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	4605      	mov	r5, r0
 80066e2:	dc67      	bgt.n	80067b4 <_dtoa_r+0x94c>
 80066e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	dc41      	bgt.n	800676e <_dtoa_r+0x906>
 80066ea:	e063      	b.n	80067b4 <_dtoa_r+0x94c>
 80066ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066f2:	e746      	b.n	8006582 <_dtoa_r+0x71a>
 80066f4:	9b07      	ldr	r3, [sp, #28]
 80066f6:	1e5c      	subs	r4, r3, #1
 80066f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	bfbf      	itttt	lt
 80066fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006700:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006702:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006704:	1ae3      	sublt	r3, r4, r3
 8006706:	bfb4      	ite	lt
 8006708:	18d2      	addlt	r2, r2, r3
 800670a:	1b1c      	subge	r4, r3, r4
 800670c:	9b07      	ldr	r3, [sp, #28]
 800670e:	bfbc      	itt	lt
 8006710:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006712:	2400      	movlt	r4, #0
 8006714:	2b00      	cmp	r3, #0
 8006716:	bfb5      	itete	lt
 8006718:	eba8 0603 	sublt.w	r6, r8, r3
 800671c:	9b07      	ldrge	r3, [sp, #28]
 800671e:	2300      	movlt	r3, #0
 8006720:	4646      	movge	r6, r8
 8006722:	e730      	b.n	8006586 <_dtoa_r+0x71e>
 8006724:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006726:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006728:	4646      	mov	r6, r8
 800672a:	e735      	b.n	8006598 <_dtoa_r+0x730>
 800672c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800672e:	e75c      	b.n	80065ea <_dtoa_r+0x782>
 8006730:	2300      	movs	r3, #0
 8006732:	e788      	b.n	8006646 <_dtoa_r+0x7de>
 8006734:	3fe00000 	.word	0x3fe00000
 8006738:	40240000 	.word	0x40240000
 800673c:	40140000 	.word	0x40140000
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	e780      	b.n	8006646 <_dtoa_r+0x7de>
 8006744:	2300      	movs	r3, #0
 8006746:	930a      	str	r3, [sp, #40]	@ 0x28
 8006748:	e782      	b.n	8006650 <_dtoa_r+0x7e8>
 800674a:	d099      	beq.n	8006680 <_dtoa_r+0x818>
 800674c:	9a08      	ldr	r2, [sp, #32]
 800674e:	331c      	adds	r3, #28
 8006750:	441a      	add	r2, r3
 8006752:	4498      	add	r8, r3
 8006754:	441e      	add	r6, r3
 8006756:	9208      	str	r2, [sp, #32]
 8006758:	e792      	b.n	8006680 <_dtoa_r+0x818>
 800675a:	4603      	mov	r3, r0
 800675c:	e7f6      	b.n	800674c <_dtoa_r+0x8e4>
 800675e:	9b07      	ldr	r3, [sp, #28]
 8006760:	9704      	str	r7, [sp, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	dc20      	bgt.n	80067a8 <_dtoa_r+0x940>
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676a:	2b02      	cmp	r3, #2
 800676c:	dd1e      	ble.n	80067ac <_dtoa_r+0x944>
 800676e:	9b00      	ldr	r3, [sp, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f47f aec0 	bne.w	80064f6 <_dtoa_r+0x68e>
 8006776:	4621      	mov	r1, r4
 8006778:	2205      	movs	r2, #5
 800677a:	4658      	mov	r0, fp
 800677c:	f000 fa9a 	bl	8006cb4 <__multadd>
 8006780:	4601      	mov	r1, r0
 8006782:	4604      	mov	r4, r0
 8006784:	4648      	mov	r0, r9
 8006786:	f000 fcad 	bl	80070e4 <__mcmp>
 800678a:	2800      	cmp	r0, #0
 800678c:	f77f aeb3 	ble.w	80064f6 <_dtoa_r+0x68e>
 8006790:	4656      	mov	r6, sl
 8006792:	2331      	movs	r3, #49	@ 0x31
 8006794:	f806 3b01 	strb.w	r3, [r6], #1
 8006798:	9b04      	ldr	r3, [sp, #16]
 800679a:	3301      	adds	r3, #1
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	e6ae      	b.n	80064fe <_dtoa_r+0x696>
 80067a0:	9c07      	ldr	r4, [sp, #28]
 80067a2:	9704      	str	r7, [sp, #16]
 80067a4:	4625      	mov	r5, r4
 80067a6:	e7f3      	b.n	8006790 <_dtoa_r+0x928>
 80067a8:	9b07      	ldr	r3, [sp, #28]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8104 	beq.w	80069bc <_dtoa_r+0xb54>
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	dd05      	ble.n	80067c4 <_dtoa_r+0x95c>
 80067b8:	4629      	mov	r1, r5
 80067ba:	4632      	mov	r2, r6
 80067bc:	4658      	mov	r0, fp
 80067be:	f000 fc25 	bl	800700c <__lshift>
 80067c2:	4605      	mov	r5, r0
 80067c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d05a      	beq.n	8006880 <_dtoa_r+0xa18>
 80067ca:	6869      	ldr	r1, [r5, #4]
 80067cc:	4658      	mov	r0, fp
 80067ce:	f000 fa0f 	bl	8006bf0 <_Balloc>
 80067d2:	4606      	mov	r6, r0
 80067d4:	b928      	cbnz	r0, 80067e2 <_dtoa_r+0x97a>
 80067d6:	4b84      	ldr	r3, [pc, #528]	@ (80069e8 <_dtoa_r+0xb80>)
 80067d8:	4602      	mov	r2, r0
 80067da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067de:	f7ff bb5a 	b.w	8005e96 <_dtoa_r+0x2e>
 80067e2:	692a      	ldr	r2, [r5, #16]
 80067e4:	3202      	adds	r2, #2
 80067e6:	0092      	lsls	r2, r2, #2
 80067e8:	f105 010c 	add.w	r1, r5, #12
 80067ec:	300c      	adds	r0, #12
 80067ee:	f001 f975 	bl	8007adc <memcpy>
 80067f2:	2201      	movs	r2, #1
 80067f4:	4631      	mov	r1, r6
 80067f6:	4658      	mov	r0, fp
 80067f8:	f000 fc08 	bl	800700c <__lshift>
 80067fc:	f10a 0301 	add.w	r3, sl, #1
 8006800:	9307      	str	r3, [sp, #28]
 8006802:	9b00      	ldr	r3, [sp, #0]
 8006804:	4453      	add	r3, sl
 8006806:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	462f      	mov	r7, r5
 8006810:	930a      	str	r3, [sp, #40]	@ 0x28
 8006812:	4605      	mov	r5, r0
 8006814:	9b07      	ldr	r3, [sp, #28]
 8006816:	4621      	mov	r1, r4
 8006818:	3b01      	subs	r3, #1
 800681a:	4648      	mov	r0, r9
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	f7ff fa98 	bl	8005d52 <quorem>
 8006822:	4639      	mov	r1, r7
 8006824:	9002      	str	r0, [sp, #8]
 8006826:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800682a:	4648      	mov	r0, r9
 800682c:	f000 fc5a 	bl	80070e4 <__mcmp>
 8006830:	462a      	mov	r2, r5
 8006832:	9008      	str	r0, [sp, #32]
 8006834:	4621      	mov	r1, r4
 8006836:	4658      	mov	r0, fp
 8006838:	f000 fc70 	bl	800711c <__mdiff>
 800683c:	68c2      	ldr	r2, [r0, #12]
 800683e:	4606      	mov	r6, r0
 8006840:	bb02      	cbnz	r2, 8006884 <_dtoa_r+0xa1c>
 8006842:	4601      	mov	r1, r0
 8006844:	4648      	mov	r0, r9
 8006846:	f000 fc4d 	bl	80070e4 <__mcmp>
 800684a:	4602      	mov	r2, r0
 800684c:	4631      	mov	r1, r6
 800684e:	4658      	mov	r0, fp
 8006850:	920e      	str	r2, [sp, #56]	@ 0x38
 8006852:	f000 fa0d 	bl	8006c70 <_Bfree>
 8006856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006858:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800685a:	9e07      	ldr	r6, [sp, #28]
 800685c:	ea43 0102 	orr.w	r1, r3, r2
 8006860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006862:	4319      	orrs	r1, r3
 8006864:	d110      	bne.n	8006888 <_dtoa_r+0xa20>
 8006866:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800686a:	d029      	beq.n	80068c0 <_dtoa_r+0xa58>
 800686c:	9b08      	ldr	r3, [sp, #32]
 800686e:	2b00      	cmp	r3, #0
 8006870:	dd02      	ble.n	8006878 <_dtoa_r+0xa10>
 8006872:	9b02      	ldr	r3, [sp, #8]
 8006874:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006878:	9b00      	ldr	r3, [sp, #0]
 800687a:	f883 8000 	strb.w	r8, [r3]
 800687e:	e63f      	b.n	8006500 <_dtoa_r+0x698>
 8006880:	4628      	mov	r0, r5
 8006882:	e7bb      	b.n	80067fc <_dtoa_r+0x994>
 8006884:	2201      	movs	r2, #1
 8006886:	e7e1      	b.n	800684c <_dtoa_r+0x9e4>
 8006888:	9b08      	ldr	r3, [sp, #32]
 800688a:	2b00      	cmp	r3, #0
 800688c:	db04      	blt.n	8006898 <_dtoa_r+0xa30>
 800688e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006890:	430b      	orrs	r3, r1
 8006892:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006894:	430b      	orrs	r3, r1
 8006896:	d120      	bne.n	80068da <_dtoa_r+0xa72>
 8006898:	2a00      	cmp	r2, #0
 800689a:	dded      	ble.n	8006878 <_dtoa_r+0xa10>
 800689c:	4649      	mov	r1, r9
 800689e:	2201      	movs	r2, #1
 80068a0:	4658      	mov	r0, fp
 80068a2:	f000 fbb3 	bl	800700c <__lshift>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4681      	mov	r9, r0
 80068aa:	f000 fc1b 	bl	80070e4 <__mcmp>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	dc03      	bgt.n	80068ba <_dtoa_r+0xa52>
 80068b2:	d1e1      	bne.n	8006878 <_dtoa_r+0xa10>
 80068b4:	f018 0f01 	tst.w	r8, #1
 80068b8:	d0de      	beq.n	8006878 <_dtoa_r+0xa10>
 80068ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068be:	d1d8      	bne.n	8006872 <_dtoa_r+0xa0a>
 80068c0:	9a00      	ldr	r2, [sp, #0]
 80068c2:	2339      	movs	r3, #57	@ 0x39
 80068c4:	7013      	strb	r3, [r2, #0]
 80068c6:	4633      	mov	r3, r6
 80068c8:	461e      	mov	r6, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068d0:	2a39      	cmp	r2, #57	@ 0x39
 80068d2:	d052      	beq.n	800697a <_dtoa_r+0xb12>
 80068d4:	3201      	adds	r2, #1
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	e612      	b.n	8006500 <_dtoa_r+0x698>
 80068da:	2a00      	cmp	r2, #0
 80068dc:	dd07      	ble.n	80068ee <_dtoa_r+0xa86>
 80068de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068e2:	d0ed      	beq.n	80068c0 <_dtoa_r+0xa58>
 80068e4:	9a00      	ldr	r2, [sp, #0]
 80068e6:	f108 0301 	add.w	r3, r8, #1
 80068ea:	7013      	strb	r3, [r2, #0]
 80068ec:	e608      	b.n	8006500 <_dtoa_r+0x698>
 80068ee:	9b07      	ldr	r3, [sp, #28]
 80068f0:	9a07      	ldr	r2, [sp, #28]
 80068f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80068f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d028      	beq.n	800694e <_dtoa_r+0xae6>
 80068fc:	4649      	mov	r1, r9
 80068fe:	2300      	movs	r3, #0
 8006900:	220a      	movs	r2, #10
 8006902:	4658      	mov	r0, fp
 8006904:	f000 f9d6 	bl	8006cb4 <__multadd>
 8006908:	42af      	cmp	r7, r5
 800690a:	4681      	mov	r9, r0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	f04f 020a 	mov.w	r2, #10
 8006914:	4639      	mov	r1, r7
 8006916:	4658      	mov	r0, fp
 8006918:	d107      	bne.n	800692a <_dtoa_r+0xac2>
 800691a:	f000 f9cb 	bl	8006cb4 <__multadd>
 800691e:	4607      	mov	r7, r0
 8006920:	4605      	mov	r5, r0
 8006922:	9b07      	ldr	r3, [sp, #28]
 8006924:	3301      	adds	r3, #1
 8006926:	9307      	str	r3, [sp, #28]
 8006928:	e774      	b.n	8006814 <_dtoa_r+0x9ac>
 800692a:	f000 f9c3 	bl	8006cb4 <__multadd>
 800692e:	4629      	mov	r1, r5
 8006930:	4607      	mov	r7, r0
 8006932:	2300      	movs	r3, #0
 8006934:	220a      	movs	r2, #10
 8006936:	4658      	mov	r0, fp
 8006938:	f000 f9bc 	bl	8006cb4 <__multadd>
 800693c:	4605      	mov	r5, r0
 800693e:	e7f0      	b.n	8006922 <_dtoa_r+0xaba>
 8006940:	9b00      	ldr	r3, [sp, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfcc      	ite	gt
 8006946:	461e      	movgt	r6, r3
 8006948:	2601      	movle	r6, #1
 800694a:	4456      	add	r6, sl
 800694c:	2700      	movs	r7, #0
 800694e:	4649      	mov	r1, r9
 8006950:	2201      	movs	r2, #1
 8006952:	4658      	mov	r0, fp
 8006954:	f000 fb5a 	bl	800700c <__lshift>
 8006958:	4621      	mov	r1, r4
 800695a:	4681      	mov	r9, r0
 800695c:	f000 fbc2 	bl	80070e4 <__mcmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	dcb0      	bgt.n	80068c6 <_dtoa_r+0xa5e>
 8006964:	d102      	bne.n	800696c <_dtoa_r+0xb04>
 8006966:	f018 0f01 	tst.w	r8, #1
 800696a:	d1ac      	bne.n	80068c6 <_dtoa_r+0xa5e>
 800696c:	4633      	mov	r3, r6
 800696e:	461e      	mov	r6, r3
 8006970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006974:	2a30      	cmp	r2, #48	@ 0x30
 8006976:	d0fa      	beq.n	800696e <_dtoa_r+0xb06>
 8006978:	e5c2      	b.n	8006500 <_dtoa_r+0x698>
 800697a:	459a      	cmp	sl, r3
 800697c:	d1a4      	bne.n	80068c8 <_dtoa_r+0xa60>
 800697e:	9b04      	ldr	r3, [sp, #16]
 8006980:	3301      	adds	r3, #1
 8006982:	9304      	str	r3, [sp, #16]
 8006984:	2331      	movs	r3, #49	@ 0x31
 8006986:	f88a 3000 	strb.w	r3, [sl]
 800698a:	e5b9      	b.n	8006500 <_dtoa_r+0x698>
 800698c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800698e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80069ec <_dtoa_r+0xb84>
 8006992:	b11b      	cbz	r3, 800699c <_dtoa_r+0xb34>
 8006994:	f10a 0308 	add.w	r3, sl, #8
 8006998:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	4650      	mov	r0, sl
 800699e:	b019      	add	sp, #100	@ 0x64
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	f77f ae37 	ble.w	800661a <_dtoa_r+0x7b2>
 80069ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b0:	2001      	movs	r0, #1
 80069b2:	e655      	b.n	8006660 <_dtoa_r+0x7f8>
 80069b4:	9b00      	ldr	r3, [sp, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f77f aed6 	ble.w	8006768 <_dtoa_r+0x900>
 80069bc:	4656      	mov	r6, sl
 80069be:	4621      	mov	r1, r4
 80069c0:	4648      	mov	r0, r9
 80069c2:	f7ff f9c6 	bl	8005d52 <quorem>
 80069c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069ca:	f806 8b01 	strb.w	r8, [r6], #1
 80069ce:	9b00      	ldr	r3, [sp, #0]
 80069d0:	eba6 020a 	sub.w	r2, r6, sl
 80069d4:	4293      	cmp	r3, r2
 80069d6:	ddb3      	ble.n	8006940 <_dtoa_r+0xad8>
 80069d8:	4649      	mov	r1, r9
 80069da:	2300      	movs	r3, #0
 80069dc:	220a      	movs	r2, #10
 80069de:	4658      	mov	r0, fp
 80069e0:	f000 f968 	bl	8006cb4 <__multadd>
 80069e4:	4681      	mov	r9, r0
 80069e6:	e7ea      	b.n	80069be <_dtoa_r+0xb56>
 80069e8:	08007e94 	.word	0x08007e94
 80069ec:	08007e18 	.word	0x08007e18

080069f0 <_free_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4605      	mov	r5, r0
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d041      	beq.n	8006a7c <_free_r+0x8c>
 80069f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fc:	1f0c      	subs	r4, r1, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bfb8      	it	lt
 8006a02:	18e4      	addlt	r4, r4, r3
 8006a04:	f000 f8e8 	bl	8006bd8 <__malloc_lock>
 8006a08:	4a1d      	ldr	r2, [pc, #116]	@ (8006a80 <_free_r+0x90>)
 8006a0a:	6813      	ldr	r3, [r2, #0]
 8006a0c:	b933      	cbnz	r3, 8006a1c <_free_r+0x2c>
 8006a0e:	6063      	str	r3, [r4, #4]
 8006a10:	6014      	str	r4, [r2, #0]
 8006a12:	4628      	mov	r0, r5
 8006a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a18:	f000 b8e4 	b.w	8006be4 <__malloc_unlock>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d908      	bls.n	8006a32 <_free_r+0x42>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	1821      	adds	r1, r4, r0
 8006a24:	428b      	cmp	r3, r1
 8006a26:	bf01      	itttt	eq
 8006a28:	6819      	ldreq	r1, [r3, #0]
 8006a2a:	685b      	ldreq	r3, [r3, #4]
 8006a2c:	1809      	addeq	r1, r1, r0
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	e7ed      	b.n	8006a0e <_free_r+0x1e>
 8006a32:	461a      	mov	r2, r3
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	b10b      	cbz	r3, 8006a3c <_free_r+0x4c>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d9fa      	bls.n	8006a32 <_free_r+0x42>
 8006a3c:	6811      	ldr	r1, [r2, #0]
 8006a3e:	1850      	adds	r0, r2, r1
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d10b      	bne.n	8006a5c <_free_r+0x6c>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	4401      	add	r1, r0
 8006a48:	1850      	adds	r0, r2, r1
 8006a4a:	4283      	cmp	r3, r0
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	d1e0      	bne.n	8006a12 <_free_r+0x22>
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	4408      	add	r0, r1
 8006a58:	6010      	str	r0, [r2, #0]
 8006a5a:	e7da      	b.n	8006a12 <_free_r+0x22>
 8006a5c:	d902      	bls.n	8006a64 <_free_r+0x74>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	e7d6      	b.n	8006a12 <_free_r+0x22>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	1821      	adds	r1, r4, r0
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf04      	itt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	bf04      	itt	eq
 8006a74:	1809      	addeq	r1, r1, r0
 8006a76:	6021      	streq	r1, [r4, #0]
 8006a78:	6054      	str	r4, [r2, #4]
 8006a7a:	e7ca      	b.n	8006a12 <_free_r+0x22>
 8006a7c:	bd38      	pop	{r3, r4, r5, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000aa4 	.word	0x20000aa4

08006a84 <malloc>:
 8006a84:	4b02      	ldr	r3, [pc, #8]	@ (8006a90 <malloc+0xc>)
 8006a86:	4601      	mov	r1, r0
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	f000 b825 	b.w	8006ad8 <_malloc_r>
 8006a8e:	bf00      	nop
 8006a90:	20000020 	.word	0x20000020

08006a94 <sbrk_aligned>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4e0f      	ldr	r6, [pc, #60]	@ (8006ad4 <sbrk_aligned+0x40>)
 8006a98:	460c      	mov	r4, r1
 8006a9a:	6831      	ldr	r1, [r6, #0]
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	b911      	cbnz	r1, 8006aa6 <sbrk_aligned+0x12>
 8006aa0:	f001 f80c 	bl	8007abc <_sbrk_r>
 8006aa4:	6030      	str	r0, [r6, #0]
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f001 f807 	bl	8007abc <_sbrk_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	d103      	bne.n	8006aba <sbrk_aligned+0x26>
 8006ab2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	1cc4      	adds	r4, r0, #3
 8006abc:	f024 0403 	bic.w	r4, r4, #3
 8006ac0:	42a0      	cmp	r0, r4
 8006ac2:	d0f8      	beq.n	8006ab6 <sbrk_aligned+0x22>
 8006ac4:	1a21      	subs	r1, r4, r0
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f000 fff8 	bl	8007abc <_sbrk_r>
 8006acc:	3001      	adds	r0, #1
 8006ace:	d1f2      	bne.n	8006ab6 <sbrk_aligned+0x22>
 8006ad0:	e7ef      	b.n	8006ab2 <sbrk_aligned+0x1e>
 8006ad2:	bf00      	nop
 8006ad4:	20000aa0 	.word	0x20000aa0

08006ad8 <_malloc_r>:
 8006ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006adc:	1ccd      	adds	r5, r1, #3
 8006ade:	f025 0503 	bic.w	r5, r5, #3
 8006ae2:	3508      	adds	r5, #8
 8006ae4:	2d0c      	cmp	r5, #12
 8006ae6:	bf38      	it	cc
 8006ae8:	250c      	movcc	r5, #12
 8006aea:	2d00      	cmp	r5, #0
 8006aec:	4606      	mov	r6, r0
 8006aee:	db01      	blt.n	8006af4 <_malloc_r+0x1c>
 8006af0:	42a9      	cmp	r1, r5
 8006af2:	d904      	bls.n	8006afe <_malloc_r+0x26>
 8006af4:	230c      	movs	r3, #12
 8006af6:	6033      	str	r3, [r6, #0]
 8006af8:	2000      	movs	r0, #0
 8006afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bd4 <_malloc_r+0xfc>
 8006b02:	f000 f869 	bl	8006bd8 <__malloc_lock>
 8006b06:	f8d8 3000 	ldr.w	r3, [r8]
 8006b0a:	461c      	mov	r4, r3
 8006b0c:	bb44      	cbnz	r4, 8006b60 <_malloc_r+0x88>
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff ffbf 	bl	8006a94 <sbrk_aligned>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	4604      	mov	r4, r0
 8006b1a:	d158      	bne.n	8006bce <_malloc_r+0xf6>
 8006b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b20:	4627      	mov	r7, r4
 8006b22:	2f00      	cmp	r7, #0
 8006b24:	d143      	bne.n	8006bae <_malloc_r+0xd6>
 8006b26:	2c00      	cmp	r4, #0
 8006b28:	d04b      	beq.n	8006bc2 <_malloc_r+0xea>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	4630      	mov	r0, r6
 8006b30:	eb04 0903 	add.w	r9, r4, r3
 8006b34:	f000 ffc2 	bl	8007abc <_sbrk_r>
 8006b38:	4581      	cmp	r9, r0
 8006b3a:	d142      	bne.n	8006bc2 <_malloc_r+0xea>
 8006b3c:	6821      	ldr	r1, [r4, #0]
 8006b3e:	1a6d      	subs	r5, r5, r1
 8006b40:	4629      	mov	r1, r5
 8006b42:	4630      	mov	r0, r6
 8006b44:	f7ff ffa6 	bl	8006a94 <sbrk_aligned>
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d03a      	beq.n	8006bc2 <_malloc_r+0xea>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	442b      	add	r3, r5
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	f8d8 3000 	ldr.w	r3, [r8]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	bb62      	cbnz	r2, 8006bb4 <_malloc_r+0xdc>
 8006b5a:	f8c8 7000 	str.w	r7, [r8]
 8006b5e:	e00f      	b.n	8006b80 <_malloc_r+0xa8>
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	1b52      	subs	r2, r2, r5
 8006b64:	d420      	bmi.n	8006ba8 <_malloc_r+0xd0>
 8006b66:	2a0b      	cmp	r2, #11
 8006b68:	d917      	bls.n	8006b9a <_malloc_r+0xc2>
 8006b6a:	1961      	adds	r1, r4, r5
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	6025      	str	r5, [r4, #0]
 8006b70:	bf18      	it	ne
 8006b72:	6059      	strne	r1, [r3, #4]
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	bf08      	it	eq
 8006b78:	f8c8 1000 	streq.w	r1, [r8]
 8006b7c:	5162      	str	r2, [r4, r5]
 8006b7e:	604b      	str	r3, [r1, #4]
 8006b80:	4630      	mov	r0, r6
 8006b82:	f000 f82f 	bl	8006be4 <__malloc_unlock>
 8006b86:	f104 000b 	add.w	r0, r4, #11
 8006b8a:	1d23      	adds	r3, r4, #4
 8006b8c:	f020 0007 	bic.w	r0, r0, #7
 8006b90:	1ac2      	subs	r2, r0, r3
 8006b92:	bf1c      	itt	ne
 8006b94:	1a1b      	subne	r3, r3, r0
 8006b96:	50a3      	strne	r3, [r4, r2]
 8006b98:	e7af      	b.n	8006afa <_malloc_r+0x22>
 8006b9a:	6862      	ldr	r2, [r4, #4]
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	bf0c      	ite	eq
 8006ba0:	f8c8 2000 	streq.w	r2, [r8]
 8006ba4:	605a      	strne	r2, [r3, #4]
 8006ba6:	e7eb      	b.n	8006b80 <_malloc_r+0xa8>
 8006ba8:	4623      	mov	r3, r4
 8006baa:	6864      	ldr	r4, [r4, #4]
 8006bac:	e7ae      	b.n	8006b0c <_malloc_r+0x34>
 8006bae:	463c      	mov	r4, r7
 8006bb0:	687f      	ldr	r7, [r7, #4]
 8006bb2:	e7b6      	b.n	8006b22 <_malloc_r+0x4a>
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d1fb      	bne.n	8006bb4 <_malloc_r+0xdc>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	6053      	str	r3, [r2, #4]
 8006bc0:	e7de      	b.n	8006b80 <_malloc_r+0xa8>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	6033      	str	r3, [r6, #0]
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f000 f80c 	bl	8006be4 <__malloc_unlock>
 8006bcc:	e794      	b.n	8006af8 <_malloc_r+0x20>
 8006bce:	6005      	str	r5, [r0, #0]
 8006bd0:	e7d6      	b.n	8006b80 <_malloc_r+0xa8>
 8006bd2:	bf00      	nop
 8006bd4:	20000aa4 	.word	0x20000aa4

08006bd8 <__malloc_lock>:
 8006bd8:	4801      	ldr	r0, [pc, #4]	@ (8006be0 <__malloc_lock+0x8>)
 8006bda:	f7ff b8b8 	b.w	8005d4e <__retarget_lock_acquire_recursive>
 8006bde:	bf00      	nop
 8006be0:	20000a9c 	.word	0x20000a9c

08006be4 <__malloc_unlock>:
 8006be4:	4801      	ldr	r0, [pc, #4]	@ (8006bec <__malloc_unlock+0x8>)
 8006be6:	f7ff b8b3 	b.w	8005d50 <__retarget_lock_release_recursive>
 8006bea:	bf00      	nop
 8006bec:	20000a9c 	.word	0x20000a9c

08006bf0 <_Balloc>:
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	69c6      	ldr	r6, [r0, #28]
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	460d      	mov	r5, r1
 8006bf8:	b976      	cbnz	r6, 8006c18 <_Balloc+0x28>
 8006bfa:	2010      	movs	r0, #16
 8006bfc:	f7ff ff42 	bl	8006a84 <malloc>
 8006c00:	4602      	mov	r2, r0
 8006c02:	61e0      	str	r0, [r4, #28]
 8006c04:	b920      	cbnz	r0, 8006c10 <_Balloc+0x20>
 8006c06:	4b18      	ldr	r3, [pc, #96]	@ (8006c68 <_Balloc+0x78>)
 8006c08:	4818      	ldr	r0, [pc, #96]	@ (8006c6c <_Balloc+0x7c>)
 8006c0a:	216b      	movs	r1, #107	@ 0x6b
 8006c0c:	f000 ff74 	bl	8007af8 <__assert_func>
 8006c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c14:	6006      	str	r6, [r0, #0]
 8006c16:	60c6      	str	r6, [r0, #12]
 8006c18:	69e6      	ldr	r6, [r4, #28]
 8006c1a:	68f3      	ldr	r3, [r6, #12]
 8006c1c:	b183      	cbz	r3, 8006c40 <_Balloc+0x50>
 8006c1e:	69e3      	ldr	r3, [r4, #28]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c26:	b9b8      	cbnz	r0, 8006c58 <_Balloc+0x68>
 8006c28:	2101      	movs	r1, #1
 8006c2a:	fa01 f605 	lsl.w	r6, r1, r5
 8006c2e:	1d72      	adds	r2, r6, #5
 8006c30:	0092      	lsls	r2, r2, #2
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 ff7e 	bl	8007b34 <_calloc_r>
 8006c38:	b160      	cbz	r0, 8006c54 <_Balloc+0x64>
 8006c3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c3e:	e00e      	b.n	8006c5e <_Balloc+0x6e>
 8006c40:	2221      	movs	r2, #33	@ 0x21
 8006c42:	2104      	movs	r1, #4
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 ff75 	bl	8007b34 <_calloc_r>
 8006c4a:	69e3      	ldr	r3, [r4, #28]
 8006c4c:	60f0      	str	r0, [r6, #12]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e4      	bne.n	8006c1e <_Balloc+0x2e>
 8006c54:	2000      	movs	r0, #0
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	6802      	ldr	r2, [r0, #0]
 8006c5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c64:	e7f7      	b.n	8006c56 <_Balloc+0x66>
 8006c66:	bf00      	nop
 8006c68:	08007e25 	.word	0x08007e25
 8006c6c:	08007ea5 	.word	0x08007ea5

08006c70 <_Bfree>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	69c6      	ldr	r6, [r0, #28]
 8006c74:	4605      	mov	r5, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	b976      	cbnz	r6, 8006c98 <_Bfree+0x28>
 8006c7a:	2010      	movs	r0, #16
 8006c7c:	f7ff ff02 	bl	8006a84 <malloc>
 8006c80:	4602      	mov	r2, r0
 8006c82:	61e8      	str	r0, [r5, #28]
 8006c84:	b920      	cbnz	r0, 8006c90 <_Bfree+0x20>
 8006c86:	4b09      	ldr	r3, [pc, #36]	@ (8006cac <_Bfree+0x3c>)
 8006c88:	4809      	ldr	r0, [pc, #36]	@ (8006cb0 <_Bfree+0x40>)
 8006c8a:	218f      	movs	r1, #143	@ 0x8f
 8006c8c:	f000 ff34 	bl	8007af8 <__assert_func>
 8006c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c94:	6006      	str	r6, [r0, #0]
 8006c96:	60c6      	str	r6, [r0, #12]
 8006c98:	b13c      	cbz	r4, 8006caa <_Bfree+0x3a>
 8006c9a:	69eb      	ldr	r3, [r5, #28]
 8006c9c:	6862      	ldr	r2, [r4, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ca4:	6021      	str	r1, [r4, #0]
 8006ca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	08007e25 	.word	0x08007e25
 8006cb0:	08007ea5 	.word	0x08007ea5

08006cb4 <__multadd>:
 8006cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb8:	690d      	ldr	r5, [r1, #16]
 8006cba:	4607      	mov	r7, r0
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	461e      	mov	r6, r3
 8006cc0:	f101 0c14 	add.w	ip, r1, #20
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	f8dc 3000 	ldr.w	r3, [ip]
 8006cca:	b299      	uxth	r1, r3
 8006ccc:	fb02 6101 	mla	r1, r2, r1, r6
 8006cd0:	0c1e      	lsrs	r6, r3, #16
 8006cd2:	0c0b      	lsrs	r3, r1, #16
 8006cd4:	fb02 3306 	mla	r3, r2, r6, r3
 8006cd8:	b289      	uxth	r1, r1
 8006cda:	3001      	adds	r0, #1
 8006cdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ce0:	4285      	cmp	r5, r0
 8006ce2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ce6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cea:	dcec      	bgt.n	8006cc6 <__multadd+0x12>
 8006cec:	b30e      	cbz	r6, 8006d32 <__multadd+0x7e>
 8006cee:	68a3      	ldr	r3, [r4, #8]
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dc19      	bgt.n	8006d28 <__multadd+0x74>
 8006cf4:	6861      	ldr	r1, [r4, #4]
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	3101      	adds	r1, #1
 8006cfa:	f7ff ff79 	bl	8006bf0 <_Balloc>
 8006cfe:	4680      	mov	r8, r0
 8006d00:	b928      	cbnz	r0, 8006d0e <__multadd+0x5a>
 8006d02:	4602      	mov	r2, r0
 8006d04:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <__multadd+0x84>)
 8006d06:	480d      	ldr	r0, [pc, #52]	@ (8006d3c <__multadd+0x88>)
 8006d08:	21ba      	movs	r1, #186	@ 0xba
 8006d0a:	f000 fef5 	bl	8007af8 <__assert_func>
 8006d0e:	6922      	ldr	r2, [r4, #16]
 8006d10:	3202      	adds	r2, #2
 8006d12:	f104 010c 	add.w	r1, r4, #12
 8006d16:	0092      	lsls	r2, r2, #2
 8006d18:	300c      	adds	r0, #12
 8006d1a:	f000 fedf 	bl	8007adc <memcpy>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4638      	mov	r0, r7
 8006d22:	f7ff ffa5 	bl	8006c70 <_Bfree>
 8006d26:	4644      	mov	r4, r8
 8006d28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	615e      	str	r6, [r3, #20]
 8006d30:	6125      	str	r5, [r4, #16]
 8006d32:	4620      	mov	r0, r4
 8006d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d38:	08007e94 	.word	0x08007e94
 8006d3c:	08007ea5 	.word	0x08007ea5

08006d40 <__hi0bits>:
 8006d40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d44:	4603      	mov	r3, r0
 8006d46:	bf36      	itet	cc
 8006d48:	0403      	lslcc	r3, r0, #16
 8006d4a:	2000      	movcs	r0, #0
 8006d4c:	2010      	movcc	r0, #16
 8006d4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d52:	bf3c      	itt	cc
 8006d54:	021b      	lslcc	r3, r3, #8
 8006d56:	3008      	addcc	r0, #8
 8006d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d5c:	bf3c      	itt	cc
 8006d5e:	011b      	lslcc	r3, r3, #4
 8006d60:	3004      	addcc	r0, #4
 8006d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d66:	bf3c      	itt	cc
 8006d68:	009b      	lslcc	r3, r3, #2
 8006d6a:	3002      	addcc	r0, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	db05      	blt.n	8006d7c <__hi0bits+0x3c>
 8006d70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d74:	f100 0001 	add.w	r0, r0, #1
 8006d78:	bf08      	it	eq
 8006d7a:	2020      	moveq	r0, #32
 8006d7c:	4770      	bx	lr

08006d7e <__lo0bits>:
 8006d7e:	6803      	ldr	r3, [r0, #0]
 8006d80:	4602      	mov	r2, r0
 8006d82:	f013 0007 	ands.w	r0, r3, #7
 8006d86:	d00b      	beq.n	8006da0 <__lo0bits+0x22>
 8006d88:	07d9      	lsls	r1, r3, #31
 8006d8a:	d421      	bmi.n	8006dd0 <__lo0bits+0x52>
 8006d8c:	0798      	lsls	r0, r3, #30
 8006d8e:	bf49      	itett	mi
 8006d90:	085b      	lsrmi	r3, r3, #1
 8006d92:	089b      	lsrpl	r3, r3, #2
 8006d94:	2001      	movmi	r0, #1
 8006d96:	6013      	strmi	r3, [r2, #0]
 8006d98:	bf5c      	itt	pl
 8006d9a:	6013      	strpl	r3, [r2, #0]
 8006d9c:	2002      	movpl	r0, #2
 8006d9e:	4770      	bx	lr
 8006da0:	b299      	uxth	r1, r3
 8006da2:	b909      	cbnz	r1, 8006da8 <__lo0bits+0x2a>
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	2010      	movs	r0, #16
 8006da8:	b2d9      	uxtb	r1, r3
 8006daa:	b909      	cbnz	r1, 8006db0 <__lo0bits+0x32>
 8006dac:	3008      	adds	r0, #8
 8006dae:	0a1b      	lsrs	r3, r3, #8
 8006db0:	0719      	lsls	r1, r3, #28
 8006db2:	bf04      	itt	eq
 8006db4:	091b      	lsreq	r3, r3, #4
 8006db6:	3004      	addeq	r0, #4
 8006db8:	0799      	lsls	r1, r3, #30
 8006dba:	bf04      	itt	eq
 8006dbc:	089b      	lsreq	r3, r3, #2
 8006dbe:	3002      	addeq	r0, #2
 8006dc0:	07d9      	lsls	r1, r3, #31
 8006dc2:	d403      	bmi.n	8006dcc <__lo0bits+0x4e>
 8006dc4:	085b      	lsrs	r3, r3, #1
 8006dc6:	f100 0001 	add.w	r0, r0, #1
 8006dca:	d003      	beq.n	8006dd4 <__lo0bits+0x56>
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4770      	bx	lr
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	4770      	bx	lr
 8006dd4:	2020      	movs	r0, #32
 8006dd6:	4770      	bx	lr

08006dd8 <__i2b>:
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	460c      	mov	r4, r1
 8006ddc:	2101      	movs	r1, #1
 8006dde:	f7ff ff07 	bl	8006bf0 <_Balloc>
 8006de2:	4602      	mov	r2, r0
 8006de4:	b928      	cbnz	r0, 8006df2 <__i2b+0x1a>
 8006de6:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <__i2b+0x24>)
 8006de8:	4805      	ldr	r0, [pc, #20]	@ (8006e00 <__i2b+0x28>)
 8006dea:	f240 1145 	movw	r1, #325	@ 0x145
 8006dee:	f000 fe83 	bl	8007af8 <__assert_func>
 8006df2:	2301      	movs	r3, #1
 8006df4:	6144      	str	r4, [r0, #20]
 8006df6:	6103      	str	r3, [r0, #16]
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08007e94 	.word	0x08007e94
 8006e00:	08007ea5 	.word	0x08007ea5

08006e04 <__multiply>:
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	4614      	mov	r4, r2
 8006e0a:	690a      	ldr	r2, [r1, #16]
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	bfa8      	it	ge
 8006e12:	4623      	movge	r3, r4
 8006e14:	460f      	mov	r7, r1
 8006e16:	bfa4      	itt	ge
 8006e18:	460c      	movge	r4, r1
 8006e1a:	461f      	movge	r7, r3
 8006e1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e24:	68a3      	ldr	r3, [r4, #8]
 8006e26:	6861      	ldr	r1, [r4, #4]
 8006e28:	eb0a 0609 	add.w	r6, sl, r9
 8006e2c:	42b3      	cmp	r3, r6
 8006e2e:	b085      	sub	sp, #20
 8006e30:	bfb8      	it	lt
 8006e32:	3101      	addlt	r1, #1
 8006e34:	f7ff fedc 	bl	8006bf0 <_Balloc>
 8006e38:	b930      	cbnz	r0, 8006e48 <__multiply+0x44>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	4b44      	ldr	r3, [pc, #272]	@ (8006f50 <__multiply+0x14c>)
 8006e3e:	4845      	ldr	r0, [pc, #276]	@ (8006f54 <__multiply+0x150>)
 8006e40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e44:	f000 fe58 	bl	8007af8 <__assert_func>
 8006e48:	f100 0514 	add.w	r5, r0, #20
 8006e4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e50:	462b      	mov	r3, r5
 8006e52:	2200      	movs	r2, #0
 8006e54:	4543      	cmp	r3, r8
 8006e56:	d321      	bcc.n	8006e9c <__multiply+0x98>
 8006e58:	f107 0114 	add.w	r1, r7, #20
 8006e5c:	f104 0214 	add.w	r2, r4, #20
 8006e60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e68:	9302      	str	r3, [sp, #8]
 8006e6a:	1b13      	subs	r3, r2, r4
 8006e6c:	3b15      	subs	r3, #21
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	3304      	adds	r3, #4
 8006e74:	f104 0715 	add.w	r7, r4, #21
 8006e78:	42ba      	cmp	r2, r7
 8006e7a:	bf38      	it	cc
 8006e7c:	2304      	movcc	r3, #4
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	9b02      	ldr	r3, [sp, #8]
 8006e82:	9103      	str	r1, [sp, #12]
 8006e84:	428b      	cmp	r3, r1
 8006e86:	d80c      	bhi.n	8006ea2 <__multiply+0x9e>
 8006e88:	2e00      	cmp	r6, #0
 8006e8a:	dd03      	ble.n	8006e94 <__multiply+0x90>
 8006e8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d05b      	beq.n	8006f4c <__multiply+0x148>
 8006e94:	6106      	str	r6, [r0, #16]
 8006e96:	b005      	add	sp, #20
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9c:	f843 2b04 	str.w	r2, [r3], #4
 8006ea0:	e7d8      	b.n	8006e54 <__multiply+0x50>
 8006ea2:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ea6:	f1ba 0f00 	cmp.w	sl, #0
 8006eaa:	d024      	beq.n	8006ef6 <__multiply+0xf2>
 8006eac:	f104 0e14 	add.w	lr, r4, #20
 8006eb0:	46a9      	mov	r9, r5
 8006eb2:	f04f 0c00 	mov.w	ip, #0
 8006eb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006eba:	f8d9 3000 	ldr.w	r3, [r9]
 8006ebe:	fa1f fb87 	uxth.w	fp, r7
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ec8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006ecc:	f8d9 7000 	ldr.w	r7, [r9]
 8006ed0:	4463      	add	r3, ip
 8006ed2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ed6:	fb0a c70b 	mla	r7, sl, fp, ip
 8006eda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ee4:	4572      	cmp	r2, lr
 8006ee6:	f849 3b04 	str.w	r3, [r9], #4
 8006eea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006eee:	d8e2      	bhi.n	8006eb6 <__multiply+0xb2>
 8006ef0:	9b01      	ldr	r3, [sp, #4]
 8006ef2:	f845 c003 	str.w	ip, [r5, r3]
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006efc:	3104      	adds	r1, #4
 8006efe:	f1b9 0f00 	cmp.w	r9, #0
 8006f02:	d021      	beq.n	8006f48 <__multiply+0x144>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	f104 0c14 	add.w	ip, r4, #20
 8006f0a:	46ae      	mov	lr, r5
 8006f0c:	f04f 0a00 	mov.w	sl, #0
 8006f10:	f8bc b000 	ldrh.w	fp, [ip]
 8006f14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f18:	fb09 770b 	mla	r7, r9, fp, r7
 8006f1c:	4457      	add	r7, sl
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f24:	f84e 3b04 	str.w	r3, [lr], #4
 8006f28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f30:	f8be 3000 	ldrh.w	r3, [lr]
 8006f34:	fb09 330a 	mla	r3, r9, sl, r3
 8006f38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f3c:	4562      	cmp	r2, ip
 8006f3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f42:	d8e5      	bhi.n	8006f10 <__multiply+0x10c>
 8006f44:	9f01      	ldr	r7, [sp, #4]
 8006f46:	51eb      	str	r3, [r5, r7]
 8006f48:	3504      	adds	r5, #4
 8006f4a:	e799      	b.n	8006e80 <__multiply+0x7c>
 8006f4c:	3e01      	subs	r6, #1
 8006f4e:	e79b      	b.n	8006e88 <__multiply+0x84>
 8006f50:	08007e94 	.word	0x08007e94
 8006f54:	08007ea5 	.word	0x08007ea5

08006f58 <__pow5mult>:
 8006f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	f012 0203 	ands.w	r2, r2, #3
 8006f62:	4607      	mov	r7, r0
 8006f64:	460e      	mov	r6, r1
 8006f66:	d007      	beq.n	8006f78 <__pow5mult+0x20>
 8006f68:	4c25      	ldr	r4, [pc, #148]	@ (8007000 <__pow5mult+0xa8>)
 8006f6a:	3a01      	subs	r2, #1
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f72:	f7ff fe9f 	bl	8006cb4 <__multadd>
 8006f76:	4606      	mov	r6, r0
 8006f78:	10ad      	asrs	r5, r5, #2
 8006f7a:	d03d      	beq.n	8006ff8 <__pow5mult+0xa0>
 8006f7c:	69fc      	ldr	r4, [r7, #28]
 8006f7e:	b97c      	cbnz	r4, 8006fa0 <__pow5mult+0x48>
 8006f80:	2010      	movs	r0, #16
 8006f82:	f7ff fd7f 	bl	8006a84 <malloc>
 8006f86:	4602      	mov	r2, r0
 8006f88:	61f8      	str	r0, [r7, #28]
 8006f8a:	b928      	cbnz	r0, 8006f98 <__pow5mult+0x40>
 8006f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007004 <__pow5mult+0xac>)
 8006f8e:	481e      	ldr	r0, [pc, #120]	@ (8007008 <__pow5mult+0xb0>)
 8006f90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f94:	f000 fdb0 	bl	8007af8 <__assert_func>
 8006f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f9c:	6004      	str	r4, [r0, #0]
 8006f9e:	60c4      	str	r4, [r0, #12]
 8006fa0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fa8:	b94c      	cbnz	r4, 8006fbe <__pow5mult+0x66>
 8006faa:	f240 2171 	movw	r1, #625	@ 0x271
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7ff ff12 	bl	8006dd8 <__i2b>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fba:	4604      	mov	r4, r0
 8006fbc:	6003      	str	r3, [r0, #0]
 8006fbe:	f04f 0900 	mov.w	r9, #0
 8006fc2:	07eb      	lsls	r3, r5, #31
 8006fc4:	d50a      	bpl.n	8006fdc <__pow5mult+0x84>
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4622      	mov	r2, r4
 8006fca:	4638      	mov	r0, r7
 8006fcc:	f7ff ff1a 	bl	8006e04 <__multiply>
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f7ff fe4b 	bl	8006c70 <_Bfree>
 8006fda:	4646      	mov	r6, r8
 8006fdc:	106d      	asrs	r5, r5, #1
 8006fde:	d00b      	beq.n	8006ff8 <__pow5mult+0xa0>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	b938      	cbnz	r0, 8006ff4 <__pow5mult+0x9c>
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4638      	mov	r0, r7
 8006fea:	f7ff ff0b 	bl	8006e04 <__multiply>
 8006fee:	6020      	str	r0, [r4, #0]
 8006ff0:	f8c0 9000 	str.w	r9, [r0]
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	e7e4      	b.n	8006fc2 <__pow5mult+0x6a>
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffe:	bf00      	nop
 8007000:	08007f00 	.word	0x08007f00
 8007004:	08007e25 	.word	0x08007e25
 8007008:	08007ea5 	.word	0x08007ea5

0800700c <__lshift>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	460c      	mov	r4, r1
 8007012:	6849      	ldr	r1, [r1, #4]
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	4607      	mov	r7, r0
 800701e:	4691      	mov	r9, r2
 8007020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007024:	f108 0601 	add.w	r6, r8, #1
 8007028:	42b3      	cmp	r3, r6
 800702a:	db0b      	blt.n	8007044 <__lshift+0x38>
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff fddf 	bl	8006bf0 <_Balloc>
 8007032:	4605      	mov	r5, r0
 8007034:	b948      	cbnz	r0, 800704a <__lshift+0x3e>
 8007036:	4602      	mov	r2, r0
 8007038:	4b28      	ldr	r3, [pc, #160]	@ (80070dc <__lshift+0xd0>)
 800703a:	4829      	ldr	r0, [pc, #164]	@ (80070e0 <__lshift+0xd4>)
 800703c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007040:	f000 fd5a 	bl	8007af8 <__assert_func>
 8007044:	3101      	adds	r1, #1
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	e7ee      	b.n	8007028 <__lshift+0x1c>
 800704a:	2300      	movs	r3, #0
 800704c:	f100 0114 	add.w	r1, r0, #20
 8007050:	f100 0210 	add.w	r2, r0, #16
 8007054:	4618      	mov	r0, r3
 8007056:	4553      	cmp	r3, sl
 8007058:	db33      	blt.n	80070c2 <__lshift+0xb6>
 800705a:	6920      	ldr	r0, [r4, #16]
 800705c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007060:	f104 0314 	add.w	r3, r4, #20
 8007064:	f019 091f 	ands.w	r9, r9, #31
 8007068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800706c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007070:	d02b      	beq.n	80070ca <__lshift+0xbe>
 8007072:	f1c9 0e20 	rsb	lr, r9, #32
 8007076:	468a      	mov	sl, r1
 8007078:	2200      	movs	r2, #0
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	fa00 f009 	lsl.w	r0, r0, r9
 8007080:	4310      	orrs	r0, r2
 8007082:	f84a 0b04 	str.w	r0, [sl], #4
 8007086:	f853 2b04 	ldr.w	r2, [r3], #4
 800708a:	459c      	cmp	ip, r3
 800708c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007090:	d8f3      	bhi.n	800707a <__lshift+0x6e>
 8007092:	ebac 0304 	sub.w	r3, ip, r4
 8007096:	3b15      	subs	r3, #21
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	3304      	adds	r3, #4
 800709e:	f104 0015 	add.w	r0, r4, #21
 80070a2:	4584      	cmp	ip, r0
 80070a4:	bf38      	it	cc
 80070a6:	2304      	movcc	r3, #4
 80070a8:	50ca      	str	r2, [r1, r3]
 80070aa:	b10a      	cbz	r2, 80070b0 <__lshift+0xa4>
 80070ac:	f108 0602 	add.w	r6, r8, #2
 80070b0:	3e01      	subs	r6, #1
 80070b2:	4638      	mov	r0, r7
 80070b4:	612e      	str	r6, [r5, #16]
 80070b6:	4621      	mov	r1, r4
 80070b8:	f7ff fdda 	bl	8006c70 <_Bfree>
 80070bc:	4628      	mov	r0, r5
 80070be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80070c6:	3301      	adds	r3, #1
 80070c8:	e7c5      	b.n	8007056 <__lshift+0x4a>
 80070ca:	3904      	subs	r1, #4
 80070cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80070d4:	459c      	cmp	ip, r3
 80070d6:	d8f9      	bhi.n	80070cc <__lshift+0xc0>
 80070d8:	e7ea      	b.n	80070b0 <__lshift+0xa4>
 80070da:	bf00      	nop
 80070dc:	08007e94 	.word	0x08007e94
 80070e0:	08007ea5 	.word	0x08007ea5

080070e4 <__mcmp>:
 80070e4:	690a      	ldr	r2, [r1, #16]
 80070e6:	4603      	mov	r3, r0
 80070e8:	6900      	ldr	r0, [r0, #16]
 80070ea:	1a80      	subs	r0, r0, r2
 80070ec:	b530      	push	{r4, r5, lr}
 80070ee:	d10e      	bne.n	800710e <__mcmp+0x2a>
 80070f0:	3314      	adds	r3, #20
 80070f2:	3114      	adds	r1, #20
 80070f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007100:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007104:	4295      	cmp	r5, r2
 8007106:	d003      	beq.n	8007110 <__mcmp+0x2c>
 8007108:	d205      	bcs.n	8007116 <__mcmp+0x32>
 800710a:	f04f 30ff 	mov.w	r0, #4294967295
 800710e:	bd30      	pop	{r4, r5, pc}
 8007110:	42a3      	cmp	r3, r4
 8007112:	d3f3      	bcc.n	80070fc <__mcmp+0x18>
 8007114:	e7fb      	b.n	800710e <__mcmp+0x2a>
 8007116:	2001      	movs	r0, #1
 8007118:	e7f9      	b.n	800710e <__mcmp+0x2a>
	...

0800711c <__mdiff>:
 800711c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	4689      	mov	r9, r1
 8007122:	4606      	mov	r6, r0
 8007124:	4611      	mov	r1, r2
 8007126:	4648      	mov	r0, r9
 8007128:	4614      	mov	r4, r2
 800712a:	f7ff ffdb 	bl	80070e4 <__mcmp>
 800712e:	1e05      	subs	r5, r0, #0
 8007130:	d112      	bne.n	8007158 <__mdiff+0x3c>
 8007132:	4629      	mov	r1, r5
 8007134:	4630      	mov	r0, r6
 8007136:	f7ff fd5b 	bl	8006bf0 <_Balloc>
 800713a:	4602      	mov	r2, r0
 800713c:	b928      	cbnz	r0, 800714a <__mdiff+0x2e>
 800713e:	4b3f      	ldr	r3, [pc, #252]	@ (800723c <__mdiff+0x120>)
 8007140:	f240 2137 	movw	r1, #567	@ 0x237
 8007144:	483e      	ldr	r0, [pc, #248]	@ (8007240 <__mdiff+0x124>)
 8007146:	f000 fcd7 	bl	8007af8 <__assert_func>
 800714a:	2301      	movs	r3, #1
 800714c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007150:	4610      	mov	r0, r2
 8007152:	b003      	add	sp, #12
 8007154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007158:	bfbc      	itt	lt
 800715a:	464b      	movlt	r3, r9
 800715c:	46a1      	movlt	r9, r4
 800715e:	4630      	mov	r0, r6
 8007160:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007164:	bfba      	itte	lt
 8007166:	461c      	movlt	r4, r3
 8007168:	2501      	movlt	r5, #1
 800716a:	2500      	movge	r5, #0
 800716c:	f7ff fd40 	bl	8006bf0 <_Balloc>
 8007170:	4602      	mov	r2, r0
 8007172:	b918      	cbnz	r0, 800717c <__mdiff+0x60>
 8007174:	4b31      	ldr	r3, [pc, #196]	@ (800723c <__mdiff+0x120>)
 8007176:	f240 2145 	movw	r1, #581	@ 0x245
 800717a:	e7e3      	b.n	8007144 <__mdiff+0x28>
 800717c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007180:	6926      	ldr	r6, [r4, #16]
 8007182:	60c5      	str	r5, [r0, #12]
 8007184:	f109 0310 	add.w	r3, r9, #16
 8007188:	f109 0514 	add.w	r5, r9, #20
 800718c:	f104 0e14 	add.w	lr, r4, #20
 8007190:	f100 0b14 	add.w	fp, r0, #20
 8007194:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007198:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	46d9      	mov	r9, fp
 80071a0:	f04f 0c00 	mov.w	ip, #0
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	fa1f f38a 	uxth.w	r3, sl
 80071b4:	4619      	mov	r1, r3
 80071b6:	b283      	uxth	r3, r0
 80071b8:	1acb      	subs	r3, r1, r3
 80071ba:	0c00      	lsrs	r0, r0, #16
 80071bc:	4463      	add	r3, ip
 80071be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80071c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071cc:	4576      	cmp	r6, lr
 80071ce:	f849 3b04 	str.w	r3, [r9], #4
 80071d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071d6:	d8e5      	bhi.n	80071a4 <__mdiff+0x88>
 80071d8:	1b33      	subs	r3, r6, r4
 80071da:	3b15      	subs	r3, #21
 80071dc:	f023 0303 	bic.w	r3, r3, #3
 80071e0:	3415      	adds	r4, #21
 80071e2:	3304      	adds	r3, #4
 80071e4:	42a6      	cmp	r6, r4
 80071e6:	bf38      	it	cc
 80071e8:	2304      	movcc	r3, #4
 80071ea:	441d      	add	r5, r3
 80071ec:	445b      	add	r3, fp
 80071ee:	461e      	mov	r6, r3
 80071f0:	462c      	mov	r4, r5
 80071f2:	4544      	cmp	r4, r8
 80071f4:	d30e      	bcc.n	8007214 <__mdiff+0xf8>
 80071f6:	f108 0103 	add.w	r1, r8, #3
 80071fa:	1b49      	subs	r1, r1, r5
 80071fc:	f021 0103 	bic.w	r1, r1, #3
 8007200:	3d03      	subs	r5, #3
 8007202:	45a8      	cmp	r8, r5
 8007204:	bf38      	it	cc
 8007206:	2100      	movcc	r1, #0
 8007208:	440b      	add	r3, r1
 800720a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800720e:	b191      	cbz	r1, 8007236 <__mdiff+0x11a>
 8007210:	6117      	str	r7, [r2, #16]
 8007212:	e79d      	b.n	8007150 <__mdiff+0x34>
 8007214:	f854 1b04 	ldr.w	r1, [r4], #4
 8007218:	46e6      	mov	lr, ip
 800721a:	0c08      	lsrs	r0, r1, #16
 800721c:	fa1c fc81 	uxtah	ip, ip, r1
 8007220:	4471      	add	r1, lr
 8007222:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007226:	b289      	uxth	r1, r1
 8007228:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800722c:	f846 1b04 	str.w	r1, [r6], #4
 8007230:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007234:	e7dd      	b.n	80071f2 <__mdiff+0xd6>
 8007236:	3f01      	subs	r7, #1
 8007238:	e7e7      	b.n	800720a <__mdiff+0xee>
 800723a:	bf00      	nop
 800723c:	08007e94 	.word	0x08007e94
 8007240:	08007ea5 	.word	0x08007ea5

08007244 <__d2b>:
 8007244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007248:	460f      	mov	r7, r1
 800724a:	2101      	movs	r1, #1
 800724c:	ec59 8b10 	vmov	r8, r9, d0
 8007250:	4616      	mov	r6, r2
 8007252:	f7ff fccd 	bl	8006bf0 <_Balloc>
 8007256:	4604      	mov	r4, r0
 8007258:	b930      	cbnz	r0, 8007268 <__d2b+0x24>
 800725a:	4602      	mov	r2, r0
 800725c:	4b23      	ldr	r3, [pc, #140]	@ (80072ec <__d2b+0xa8>)
 800725e:	4824      	ldr	r0, [pc, #144]	@ (80072f0 <__d2b+0xac>)
 8007260:	f240 310f 	movw	r1, #783	@ 0x30f
 8007264:	f000 fc48 	bl	8007af8 <__assert_func>
 8007268:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800726c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007270:	b10d      	cbz	r5, 8007276 <__d2b+0x32>
 8007272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	f1b8 0300 	subs.w	r3, r8, #0
 800727c:	d023      	beq.n	80072c6 <__d2b+0x82>
 800727e:	4668      	mov	r0, sp
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	f7ff fd7c 	bl	8006d7e <__lo0bits>
 8007286:	e9dd 1200 	ldrd	r1, r2, [sp]
 800728a:	b1d0      	cbz	r0, 80072c2 <__d2b+0x7e>
 800728c:	f1c0 0320 	rsb	r3, r0, #32
 8007290:	fa02 f303 	lsl.w	r3, r2, r3
 8007294:	430b      	orrs	r3, r1
 8007296:	40c2      	lsrs	r2, r0
 8007298:	6163      	str	r3, [r4, #20]
 800729a:	9201      	str	r2, [sp, #4]
 800729c:	9b01      	ldr	r3, [sp, #4]
 800729e:	61a3      	str	r3, [r4, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bf0c      	ite	eq
 80072a4:	2201      	moveq	r2, #1
 80072a6:	2202      	movne	r2, #2
 80072a8:	6122      	str	r2, [r4, #16]
 80072aa:	b1a5      	cbz	r5, 80072d6 <__d2b+0x92>
 80072ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072b0:	4405      	add	r5, r0
 80072b2:	603d      	str	r5, [r7, #0]
 80072b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072b8:	6030      	str	r0, [r6, #0]
 80072ba:	4620      	mov	r0, r4
 80072bc:	b003      	add	sp, #12
 80072be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072c2:	6161      	str	r1, [r4, #20]
 80072c4:	e7ea      	b.n	800729c <__d2b+0x58>
 80072c6:	a801      	add	r0, sp, #4
 80072c8:	f7ff fd59 	bl	8006d7e <__lo0bits>
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	6163      	str	r3, [r4, #20]
 80072d0:	3020      	adds	r0, #32
 80072d2:	2201      	movs	r2, #1
 80072d4:	e7e8      	b.n	80072a8 <__d2b+0x64>
 80072d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80072de:	6038      	str	r0, [r7, #0]
 80072e0:	6918      	ldr	r0, [r3, #16]
 80072e2:	f7ff fd2d 	bl	8006d40 <__hi0bits>
 80072e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072ea:	e7e5      	b.n	80072b8 <__d2b+0x74>
 80072ec:	08007e94 	.word	0x08007e94
 80072f0:	08007ea5 	.word	0x08007ea5

080072f4 <__ssputs_r>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	688e      	ldr	r6, [r1, #8]
 80072fa:	461f      	mov	r7, r3
 80072fc:	42be      	cmp	r6, r7
 80072fe:	680b      	ldr	r3, [r1, #0]
 8007300:	4682      	mov	sl, r0
 8007302:	460c      	mov	r4, r1
 8007304:	4690      	mov	r8, r2
 8007306:	d82d      	bhi.n	8007364 <__ssputs_r+0x70>
 8007308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800730c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007310:	d026      	beq.n	8007360 <__ssputs_r+0x6c>
 8007312:	6965      	ldr	r5, [r4, #20]
 8007314:	6909      	ldr	r1, [r1, #16]
 8007316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800731a:	eba3 0901 	sub.w	r9, r3, r1
 800731e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007322:	1c7b      	adds	r3, r7, #1
 8007324:	444b      	add	r3, r9
 8007326:	106d      	asrs	r5, r5, #1
 8007328:	429d      	cmp	r5, r3
 800732a:	bf38      	it	cc
 800732c:	461d      	movcc	r5, r3
 800732e:	0553      	lsls	r3, r2, #21
 8007330:	d527      	bpl.n	8007382 <__ssputs_r+0x8e>
 8007332:	4629      	mov	r1, r5
 8007334:	f7ff fbd0 	bl	8006ad8 <_malloc_r>
 8007338:	4606      	mov	r6, r0
 800733a:	b360      	cbz	r0, 8007396 <__ssputs_r+0xa2>
 800733c:	6921      	ldr	r1, [r4, #16]
 800733e:	464a      	mov	r2, r9
 8007340:	f000 fbcc 	bl	8007adc <memcpy>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800734a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	6126      	str	r6, [r4, #16]
 8007352:	6165      	str	r5, [r4, #20]
 8007354:	444e      	add	r6, r9
 8007356:	eba5 0509 	sub.w	r5, r5, r9
 800735a:	6026      	str	r6, [r4, #0]
 800735c:	60a5      	str	r5, [r4, #8]
 800735e:	463e      	mov	r6, r7
 8007360:	42be      	cmp	r6, r7
 8007362:	d900      	bls.n	8007366 <__ssputs_r+0x72>
 8007364:	463e      	mov	r6, r7
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	4632      	mov	r2, r6
 800736a:	4641      	mov	r1, r8
 800736c:	f000 fb6a 	bl	8007a44 <memmove>
 8007370:	68a3      	ldr	r3, [r4, #8]
 8007372:	1b9b      	subs	r3, r3, r6
 8007374:	60a3      	str	r3, [r4, #8]
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	4433      	add	r3, r6
 800737a:	6023      	str	r3, [r4, #0]
 800737c:	2000      	movs	r0, #0
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	462a      	mov	r2, r5
 8007384:	f000 fbfc 	bl	8007b80 <_realloc_r>
 8007388:	4606      	mov	r6, r0
 800738a:	2800      	cmp	r0, #0
 800738c:	d1e0      	bne.n	8007350 <__ssputs_r+0x5c>
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	4650      	mov	r0, sl
 8007392:	f7ff fb2d 	bl	80069f0 <_free_r>
 8007396:	230c      	movs	r3, #12
 8007398:	f8ca 3000 	str.w	r3, [sl]
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	e7e9      	b.n	800737e <__ssputs_r+0x8a>
	...

080073ac <_svfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4698      	mov	r8, r3
 80073b2:	898b      	ldrh	r3, [r1, #12]
 80073b4:	061b      	lsls	r3, r3, #24
 80073b6:	b09d      	sub	sp, #116	@ 0x74
 80073b8:	4607      	mov	r7, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	d510      	bpl.n	80073e2 <_svfiprintf_r+0x36>
 80073c0:	690b      	ldr	r3, [r1, #16]
 80073c2:	b973      	cbnz	r3, 80073e2 <_svfiprintf_r+0x36>
 80073c4:	2140      	movs	r1, #64	@ 0x40
 80073c6:	f7ff fb87 	bl	8006ad8 <_malloc_r>
 80073ca:	6028      	str	r0, [r5, #0]
 80073cc:	6128      	str	r0, [r5, #16]
 80073ce:	b930      	cbnz	r0, 80073de <_svfiprintf_r+0x32>
 80073d0:	230c      	movs	r3, #12
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b01d      	add	sp, #116	@ 0x74
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	2340      	movs	r3, #64	@ 0x40
 80073e0:	616b      	str	r3, [r5, #20]
 80073e2:	2300      	movs	r3, #0
 80073e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e6:	2320      	movs	r3, #32
 80073e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80073f0:	2330      	movs	r3, #48	@ 0x30
 80073f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007590 <_svfiprintf_r+0x1e4>
 80073f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073fa:	f04f 0901 	mov.w	r9, #1
 80073fe:	4623      	mov	r3, r4
 8007400:	469a      	mov	sl, r3
 8007402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007406:	b10a      	cbz	r2, 800740c <_svfiprintf_r+0x60>
 8007408:	2a25      	cmp	r2, #37	@ 0x25
 800740a:	d1f9      	bne.n	8007400 <_svfiprintf_r+0x54>
 800740c:	ebba 0b04 	subs.w	fp, sl, r4
 8007410:	d00b      	beq.n	800742a <_svfiprintf_r+0x7e>
 8007412:	465b      	mov	r3, fp
 8007414:	4622      	mov	r2, r4
 8007416:	4629      	mov	r1, r5
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff ff6b 	bl	80072f4 <__ssputs_r>
 800741e:	3001      	adds	r0, #1
 8007420:	f000 80a7 	beq.w	8007572 <_svfiprintf_r+0x1c6>
 8007424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007426:	445a      	add	r2, fp
 8007428:	9209      	str	r2, [sp, #36]	@ 0x24
 800742a:	f89a 3000 	ldrb.w	r3, [sl]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 809f 	beq.w	8007572 <_svfiprintf_r+0x1c6>
 8007434:	2300      	movs	r3, #0
 8007436:	f04f 32ff 	mov.w	r2, #4294967295
 800743a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800743e:	f10a 0a01 	add.w	sl, sl, #1
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	9307      	str	r3, [sp, #28]
 8007446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800744a:	931a      	str	r3, [sp, #104]	@ 0x68
 800744c:	4654      	mov	r4, sl
 800744e:	2205      	movs	r2, #5
 8007450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007454:	484e      	ldr	r0, [pc, #312]	@ (8007590 <_svfiprintf_r+0x1e4>)
 8007456:	f7f8 fee3 	bl	8000220 <memchr>
 800745a:	9a04      	ldr	r2, [sp, #16]
 800745c:	b9d8      	cbnz	r0, 8007496 <_svfiprintf_r+0xea>
 800745e:	06d0      	lsls	r0, r2, #27
 8007460:	bf44      	itt	mi
 8007462:	2320      	movmi	r3, #32
 8007464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007468:	0711      	lsls	r1, r2, #28
 800746a:	bf44      	itt	mi
 800746c:	232b      	movmi	r3, #43	@ 0x2b
 800746e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007472:	f89a 3000 	ldrb.w	r3, [sl]
 8007476:	2b2a      	cmp	r3, #42	@ 0x2a
 8007478:	d015      	beq.n	80074a6 <_svfiprintf_r+0xfa>
 800747a:	9a07      	ldr	r2, [sp, #28]
 800747c:	4654      	mov	r4, sl
 800747e:	2000      	movs	r0, #0
 8007480:	f04f 0c0a 	mov.w	ip, #10
 8007484:	4621      	mov	r1, r4
 8007486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800748a:	3b30      	subs	r3, #48	@ 0x30
 800748c:	2b09      	cmp	r3, #9
 800748e:	d94b      	bls.n	8007528 <_svfiprintf_r+0x17c>
 8007490:	b1b0      	cbz	r0, 80074c0 <_svfiprintf_r+0x114>
 8007492:	9207      	str	r2, [sp, #28]
 8007494:	e014      	b.n	80074c0 <_svfiprintf_r+0x114>
 8007496:	eba0 0308 	sub.w	r3, r0, r8
 800749a:	fa09 f303 	lsl.w	r3, r9, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	46a2      	mov	sl, r4
 80074a4:	e7d2      	b.n	800744c <_svfiprintf_r+0xa0>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	1d19      	adds	r1, r3, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	9103      	str	r1, [sp, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfbb      	ittet	lt
 80074b2:	425b      	neglt	r3, r3
 80074b4:	f042 0202 	orrlt.w	r2, r2, #2
 80074b8:	9307      	strge	r3, [sp, #28]
 80074ba:	9307      	strlt	r3, [sp, #28]
 80074bc:	bfb8      	it	lt
 80074be:	9204      	strlt	r2, [sp, #16]
 80074c0:	7823      	ldrb	r3, [r4, #0]
 80074c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80074c4:	d10a      	bne.n	80074dc <_svfiprintf_r+0x130>
 80074c6:	7863      	ldrb	r3, [r4, #1]
 80074c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ca:	d132      	bne.n	8007532 <_svfiprintf_r+0x186>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	1d1a      	adds	r2, r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	9203      	str	r2, [sp, #12]
 80074d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074d8:	3402      	adds	r4, #2
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075a0 <_svfiprintf_r+0x1f4>
 80074e0:	7821      	ldrb	r1, [r4, #0]
 80074e2:	2203      	movs	r2, #3
 80074e4:	4650      	mov	r0, sl
 80074e6:	f7f8 fe9b 	bl	8000220 <memchr>
 80074ea:	b138      	cbz	r0, 80074fc <_svfiprintf_r+0x150>
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	eba0 000a 	sub.w	r0, r0, sl
 80074f2:	2240      	movs	r2, #64	@ 0x40
 80074f4:	4082      	lsls	r2, r0
 80074f6:	4313      	orrs	r3, r2
 80074f8:	3401      	adds	r4, #1
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007500:	4824      	ldr	r0, [pc, #144]	@ (8007594 <_svfiprintf_r+0x1e8>)
 8007502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007506:	2206      	movs	r2, #6
 8007508:	f7f8 fe8a 	bl	8000220 <memchr>
 800750c:	2800      	cmp	r0, #0
 800750e:	d036      	beq.n	800757e <_svfiprintf_r+0x1d2>
 8007510:	4b21      	ldr	r3, [pc, #132]	@ (8007598 <_svfiprintf_r+0x1ec>)
 8007512:	bb1b      	cbnz	r3, 800755c <_svfiprintf_r+0x1b0>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	3307      	adds	r3, #7
 8007518:	f023 0307 	bic.w	r3, r3, #7
 800751c:	3308      	adds	r3, #8
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007522:	4433      	add	r3, r6
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	e76a      	b.n	80073fe <_svfiprintf_r+0x52>
 8007528:	fb0c 3202 	mla	r2, ip, r2, r3
 800752c:	460c      	mov	r4, r1
 800752e:	2001      	movs	r0, #1
 8007530:	e7a8      	b.n	8007484 <_svfiprintf_r+0xd8>
 8007532:	2300      	movs	r3, #0
 8007534:	3401      	adds	r4, #1
 8007536:	9305      	str	r3, [sp, #20]
 8007538:	4619      	mov	r1, r3
 800753a:	f04f 0c0a 	mov.w	ip, #10
 800753e:	4620      	mov	r0, r4
 8007540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007544:	3a30      	subs	r2, #48	@ 0x30
 8007546:	2a09      	cmp	r2, #9
 8007548:	d903      	bls.n	8007552 <_svfiprintf_r+0x1a6>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0c6      	beq.n	80074dc <_svfiprintf_r+0x130>
 800754e:	9105      	str	r1, [sp, #20]
 8007550:	e7c4      	b.n	80074dc <_svfiprintf_r+0x130>
 8007552:	fb0c 2101 	mla	r1, ip, r1, r2
 8007556:	4604      	mov	r4, r0
 8007558:	2301      	movs	r3, #1
 800755a:	e7f0      	b.n	800753e <_svfiprintf_r+0x192>
 800755c:	ab03      	add	r3, sp, #12
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	462a      	mov	r2, r5
 8007562:	4b0e      	ldr	r3, [pc, #56]	@ (800759c <_svfiprintf_r+0x1f0>)
 8007564:	a904      	add	r1, sp, #16
 8007566:	4638      	mov	r0, r7
 8007568:	f7fd fd92 	bl	8005090 <_printf_float>
 800756c:	1c42      	adds	r2, r0, #1
 800756e:	4606      	mov	r6, r0
 8007570:	d1d6      	bne.n	8007520 <_svfiprintf_r+0x174>
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	065b      	lsls	r3, r3, #25
 8007576:	f53f af2d 	bmi.w	80073d4 <_svfiprintf_r+0x28>
 800757a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800757c:	e72c      	b.n	80073d8 <_svfiprintf_r+0x2c>
 800757e:	ab03      	add	r3, sp, #12
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	462a      	mov	r2, r5
 8007584:	4b05      	ldr	r3, [pc, #20]	@ (800759c <_svfiprintf_r+0x1f0>)
 8007586:	a904      	add	r1, sp, #16
 8007588:	4638      	mov	r0, r7
 800758a:	f7fe f819 	bl	80055c0 <_printf_i>
 800758e:	e7ed      	b.n	800756c <_svfiprintf_r+0x1c0>
 8007590:	08008000 	.word	0x08008000
 8007594:	0800800a 	.word	0x0800800a
 8007598:	08005091 	.word	0x08005091
 800759c:	080072f5 	.word	0x080072f5
 80075a0:	08008006 	.word	0x08008006

080075a4 <__sfputc_r>:
 80075a4:	6893      	ldr	r3, [r2, #8]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	b410      	push	{r4}
 80075ac:	6093      	str	r3, [r2, #8]
 80075ae:	da08      	bge.n	80075c2 <__sfputc_r+0x1e>
 80075b0:	6994      	ldr	r4, [r2, #24]
 80075b2:	42a3      	cmp	r3, r4
 80075b4:	db01      	blt.n	80075ba <__sfputc_r+0x16>
 80075b6:	290a      	cmp	r1, #10
 80075b8:	d103      	bne.n	80075c2 <__sfputc_r+0x1e>
 80075ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075be:	f7fe bab5 	b.w	8005b2c <__swbuf_r>
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	1c58      	adds	r0, r3, #1
 80075c6:	6010      	str	r0, [r2, #0]
 80075c8:	7019      	strb	r1, [r3, #0]
 80075ca:	4608      	mov	r0, r1
 80075cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <__sfputs_r>:
 80075d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d4:	4606      	mov	r6, r0
 80075d6:	460f      	mov	r7, r1
 80075d8:	4614      	mov	r4, r2
 80075da:	18d5      	adds	r5, r2, r3
 80075dc:	42ac      	cmp	r4, r5
 80075de:	d101      	bne.n	80075e4 <__sfputs_r+0x12>
 80075e0:	2000      	movs	r0, #0
 80075e2:	e007      	b.n	80075f4 <__sfputs_r+0x22>
 80075e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e8:	463a      	mov	r2, r7
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ffda 	bl	80075a4 <__sfputc_r>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d1f3      	bne.n	80075dc <__sfputs_r+0xa>
 80075f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075f8 <_vfiprintf_r>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	460d      	mov	r5, r1
 80075fe:	b09d      	sub	sp, #116	@ 0x74
 8007600:	4614      	mov	r4, r2
 8007602:	4698      	mov	r8, r3
 8007604:	4606      	mov	r6, r0
 8007606:	b118      	cbz	r0, 8007610 <_vfiprintf_r+0x18>
 8007608:	6a03      	ldr	r3, [r0, #32]
 800760a:	b90b      	cbnz	r3, 8007610 <_vfiprintf_r+0x18>
 800760c:	f7fe f984 	bl	8005918 <__sinit>
 8007610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007612:	07d9      	lsls	r1, r3, #31
 8007614:	d405      	bmi.n	8007622 <_vfiprintf_r+0x2a>
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	059a      	lsls	r2, r3, #22
 800761a:	d402      	bmi.n	8007622 <_vfiprintf_r+0x2a>
 800761c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800761e:	f7fe fb96 	bl	8005d4e <__retarget_lock_acquire_recursive>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	071b      	lsls	r3, r3, #28
 8007626:	d501      	bpl.n	800762c <_vfiprintf_r+0x34>
 8007628:	692b      	ldr	r3, [r5, #16]
 800762a:	b99b      	cbnz	r3, 8007654 <_vfiprintf_r+0x5c>
 800762c:	4629      	mov	r1, r5
 800762e:	4630      	mov	r0, r6
 8007630:	f7fe faba 	bl	8005ba8 <__swsetup_r>
 8007634:	b170      	cbz	r0, 8007654 <_vfiprintf_r+0x5c>
 8007636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007638:	07dc      	lsls	r4, r3, #31
 800763a:	d504      	bpl.n	8007646 <_vfiprintf_r+0x4e>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	b01d      	add	sp, #116	@ 0x74
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	0598      	lsls	r0, r3, #22
 800764a:	d4f7      	bmi.n	800763c <_vfiprintf_r+0x44>
 800764c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800764e:	f7fe fb7f 	bl	8005d50 <__retarget_lock_release_recursive>
 8007652:	e7f3      	b.n	800763c <_vfiprintf_r+0x44>
 8007654:	2300      	movs	r3, #0
 8007656:	9309      	str	r3, [sp, #36]	@ 0x24
 8007658:	2320      	movs	r3, #32
 800765a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800765e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007662:	2330      	movs	r3, #48	@ 0x30
 8007664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007814 <_vfiprintf_r+0x21c>
 8007668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800766c:	f04f 0901 	mov.w	r9, #1
 8007670:	4623      	mov	r3, r4
 8007672:	469a      	mov	sl, r3
 8007674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007678:	b10a      	cbz	r2, 800767e <_vfiprintf_r+0x86>
 800767a:	2a25      	cmp	r2, #37	@ 0x25
 800767c:	d1f9      	bne.n	8007672 <_vfiprintf_r+0x7a>
 800767e:	ebba 0b04 	subs.w	fp, sl, r4
 8007682:	d00b      	beq.n	800769c <_vfiprintf_r+0xa4>
 8007684:	465b      	mov	r3, fp
 8007686:	4622      	mov	r2, r4
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff ffa1 	bl	80075d2 <__sfputs_r>
 8007690:	3001      	adds	r0, #1
 8007692:	f000 80a7 	beq.w	80077e4 <_vfiprintf_r+0x1ec>
 8007696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007698:	445a      	add	r2, fp
 800769a:	9209      	str	r2, [sp, #36]	@ 0x24
 800769c:	f89a 3000 	ldrb.w	r3, [sl]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 809f 	beq.w	80077e4 <_vfiprintf_r+0x1ec>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b0:	f10a 0a01 	add.w	sl, sl, #1
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80076be:	4654      	mov	r4, sl
 80076c0:	2205      	movs	r2, #5
 80076c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c6:	4853      	ldr	r0, [pc, #332]	@ (8007814 <_vfiprintf_r+0x21c>)
 80076c8:	f7f8 fdaa 	bl	8000220 <memchr>
 80076cc:	9a04      	ldr	r2, [sp, #16]
 80076ce:	b9d8      	cbnz	r0, 8007708 <_vfiprintf_r+0x110>
 80076d0:	06d1      	lsls	r1, r2, #27
 80076d2:	bf44      	itt	mi
 80076d4:	2320      	movmi	r3, #32
 80076d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076da:	0713      	lsls	r3, r2, #28
 80076dc:	bf44      	itt	mi
 80076de:	232b      	movmi	r3, #43	@ 0x2b
 80076e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076e4:	f89a 3000 	ldrb.w	r3, [sl]
 80076e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80076ea:	d015      	beq.n	8007718 <_vfiprintf_r+0x120>
 80076ec:	9a07      	ldr	r2, [sp, #28]
 80076ee:	4654      	mov	r4, sl
 80076f0:	2000      	movs	r0, #0
 80076f2:	f04f 0c0a 	mov.w	ip, #10
 80076f6:	4621      	mov	r1, r4
 80076f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076fc:	3b30      	subs	r3, #48	@ 0x30
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d94b      	bls.n	800779a <_vfiprintf_r+0x1a2>
 8007702:	b1b0      	cbz	r0, 8007732 <_vfiprintf_r+0x13a>
 8007704:	9207      	str	r2, [sp, #28]
 8007706:	e014      	b.n	8007732 <_vfiprintf_r+0x13a>
 8007708:	eba0 0308 	sub.w	r3, r0, r8
 800770c:	fa09 f303 	lsl.w	r3, r9, r3
 8007710:	4313      	orrs	r3, r2
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	46a2      	mov	sl, r4
 8007716:	e7d2      	b.n	80076be <_vfiprintf_r+0xc6>
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	1d19      	adds	r1, r3, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	9103      	str	r1, [sp, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bfbb      	ittet	lt
 8007724:	425b      	neglt	r3, r3
 8007726:	f042 0202 	orrlt.w	r2, r2, #2
 800772a:	9307      	strge	r3, [sp, #28]
 800772c:	9307      	strlt	r3, [sp, #28]
 800772e:	bfb8      	it	lt
 8007730:	9204      	strlt	r2, [sp, #16]
 8007732:	7823      	ldrb	r3, [r4, #0]
 8007734:	2b2e      	cmp	r3, #46	@ 0x2e
 8007736:	d10a      	bne.n	800774e <_vfiprintf_r+0x156>
 8007738:	7863      	ldrb	r3, [r4, #1]
 800773a:	2b2a      	cmp	r3, #42	@ 0x2a
 800773c:	d132      	bne.n	80077a4 <_vfiprintf_r+0x1ac>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	1d1a      	adds	r2, r3, #4
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	9203      	str	r2, [sp, #12]
 8007746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800774a:	3402      	adds	r4, #2
 800774c:	9305      	str	r3, [sp, #20]
 800774e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007824 <_vfiprintf_r+0x22c>
 8007752:	7821      	ldrb	r1, [r4, #0]
 8007754:	2203      	movs	r2, #3
 8007756:	4650      	mov	r0, sl
 8007758:	f7f8 fd62 	bl	8000220 <memchr>
 800775c:	b138      	cbz	r0, 800776e <_vfiprintf_r+0x176>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	eba0 000a 	sub.w	r0, r0, sl
 8007764:	2240      	movs	r2, #64	@ 0x40
 8007766:	4082      	lsls	r2, r0
 8007768:	4313      	orrs	r3, r2
 800776a:	3401      	adds	r4, #1
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007772:	4829      	ldr	r0, [pc, #164]	@ (8007818 <_vfiprintf_r+0x220>)
 8007774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007778:	2206      	movs	r2, #6
 800777a:	f7f8 fd51 	bl	8000220 <memchr>
 800777e:	2800      	cmp	r0, #0
 8007780:	d03f      	beq.n	8007802 <_vfiprintf_r+0x20a>
 8007782:	4b26      	ldr	r3, [pc, #152]	@ (800781c <_vfiprintf_r+0x224>)
 8007784:	bb1b      	cbnz	r3, 80077ce <_vfiprintf_r+0x1d6>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	3307      	adds	r3, #7
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	3308      	adds	r3, #8
 8007790:	9303      	str	r3, [sp, #12]
 8007792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007794:	443b      	add	r3, r7
 8007796:	9309      	str	r3, [sp, #36]	@ 0x24
 8007798:	e76a      	b.n	8007670 <_vfiprintf_r+0x78>
 800779a:	fb0c 3202 	mla	r2, ip, r2, r3
 800779e:	460c      	mov	r4, r1
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7a8      	b.n	80076f6 <_vfiprintf_r+0xfe>
 80077a4:	2300      	movs	r3, #0
 80077a6:	3401      	adds	r4, #1
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	4619      	mov	r1, r3
 80077ac:	f04f 0c0a 	mov.w	ip, #10
 80077b0:	4620      	mov	r0, r4
 80077b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b6:	3a30      	subs	r2, #48	@ 0x30
 80077b8:	2a09      	cmp	r2, #9
 80077ba:	d903      	bls.n	80077c4 <_vfiprintf_r+0x1cc>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0c6      	beq.n	800774e <_vfiprintf_r+0x156>
 80077c0:	9105      	str	r1, [sp, #20]
 80077c2:	e7c4      	b.n	800774e <_vfiprintf_r+0x156>
 80077c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c8:	4604      	mov	r4, r0
 80077ca:	2301      	movs	r3, #1
 80077cc:	e7f0      	b.n	80077b0 <_vfiprintf_r+0x1b8>
 80077ce:	ab03      	add	r3, sp, #12
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	462a      	mov	r2, r5
 80077d4:	4b12      	ldr	r3, [pc, #72]	@ (8007820 <_vfiprintf_r+0x228>)
 80077d6:	a904      	add	r1, sp, #16
 80077d8:	4630      	mov	r0, r6
 80077da:	f7fd fc59 	bl	8005090 <_printf_float>
 80077de:	4607      	mov	r7, r0
 80077e0:	1c78      	adds	r0, r7, #1
 80077e2:	d1d6      	bne.n	8007792 <_vfiprintf_r+0x19a>
 80077e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077e6:	07d9      	lsls	r1, r3, #31
 80077e8:	d405      	bmi.n	80077f6 <_vfiprintf_r+0x1fe>
 80077ea:	89ab      	ldrh	r3, [r5, #12]
 80077ec:	059a      	lsls	r2, r3, #22
 80077ee:	d402      	bmi.n	80077f6 <_vfiprintf_r+0x1fe>
 80077f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077f2:	f7fe faad 	bl	8005d50 <__retarget_lock_release_recursive>
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	065b      	lsls	r3, r3, #25
 80077fa:	f53f af1f 	bmi.w	800763c <_vfiprintf_r+0x44>
 80077fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007800:	e71e      	b.n	8007640 <_vfiprintf_r+0x48>
 8007802:	ab03      	add	r3, sp, #12
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	462a      	mov	r2, r5
 8007808:	4b05      	ldr	r3, [pc, #20]	@ (8007820 <_vfiprintf_r+0x228>)
 800780a:	a904      	add	r1, sp, #16
 800780c:	4630      	mov	r0, r6
 800780e:	f7fd fed7 	bl	80055c0 <_printf_i>
 8007812:	e7e4      	b.n	80077de <_vfiprintf_r+0x1e6>
 8007814:	08008000 	.word	0x08008000
 8007818:	0800800a 	.word	0x0800800a
 800781c:	08005091 	.word	0x08005091
 8007820:	080075d3 	.word	0x080075d3
 8007824:	08008006 	.word	0x08008006

08007828 <__sflush_r>:
 8007828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	0716      	lsls	r6, r2, #28
 8007832:	4605      	mov	r5, r0
 8007834:	460c      	mov	r4, r1
 8007836:	d454      	bmi.n	80078e2 <__sflush_r+0xba>
 8007838:	684b      	ldr	r3, [r1, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dc02      	bgt.n	8007844 <__sflush_r+0x1c>
 800783e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	dd48      	ble.n	80078d6 <__sflush_r+0xae>
 8007844:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007846:	2e00      	cmp	r6, #0
 8007848:	d045      	beq.n	80078d6 <__sflush_r+0xae>
 800784a:	2300      	movs	r3, #0
 800784c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007850:	682f      	ldr	r7, [r5, #0]
 8007852:	6a21      	ldr	r1, [r4, #32]
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	d030      	beq.n	80078ba <__sflush_r+0x92>
 8007858:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	0759      	lsls	r1, r3, #29
 800785e:	d505      	bpl.n	800786c <__sflush_r+0x44>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007866:	b10b      	cbz	r3, 800786c <__sflush_r+0x44>
 8007868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	2300      	movs	r3, #0
 800786e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007870:	6a21      	ldr	r1, [r4, #32]
 8007872:	4628      	mov	r0, r5
 8007874:	47b0      	blx	r6
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	d106      	bne.n	800788a <__sflush_r+0x62>
 800787c:	6829      	ldr	r1, [r5, #0]
 800787e:	291d      	cmp	r1, #29
 8007880:	d82b      	bhi.n	80078da <__sflush_r+0xb2>
 8007882:	4a2a      	ldr	r2, [pc, #168]	@ (800792c <__sflush_r+0x104>)
 8007884:	410a      	asrs	r2, r1
 8007886:	07d6      	lsls	r6, r2, #31
 8007888:	d427      	bmi.n	80078da <__sflush_r+0xb2>
 800788a:	2200      	movs	r2, #0
 800788c:	6062      	str	r2, [r4, #4]
 800788e:	04d9      	lsls	r1, r3, #19
 8007890:	6922      	ldr	r2, [r4, #16]
 8007892:	6022      	str	r2, [r4, #0]
 8007894:	d504      	bpl.n	80078a0 <__sflush_r+0x78>
 8007896:	1c42      	adds	r2, r0, #1
 8007898:	d101      	bne.n	800789e <__sflush_r+0x76>
 800789a:	682b      	ldr	r3, [r5, #0]
 800789c:	b903      	cbnz	r3, 80078a0 <__sflush_r+0x78>
 800789e:	6560      	str	r0, [r4, #84]	@ 0x54
 80078a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078a2:	602f      	str	r7, [r5, #0]
 80078a4:	b1b9      	cbz	r1, 80078d6 <__sflush_r+0xae>
 80078a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078aa:	4299      	cmp	r1, r3
 80078ac:	d002      	beq.n	80078b4 <__sflush_r+0x8c>
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7ff f89e 	bl	80069f0 <_free_r>
 80078b4:	2300      	movs	r3, #0
 80078b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80078b8:	e00d      	b.n	80078d6 <__sflush_r+0xae>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4628      	mov	r0, r5
 80078be:	47b0      	blx	r6
 80078c0:	4602      	mov	r2, r0
 80078c2:	1c50      	adds	r0, r2, #1
 80078c4:	d1c9      	bne.n	800785a <__sflush_r+0x32>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0c6      	beq.n	800785a <__sflush_r+0x32>
 80078cc:	2b1d      	cmp	r3, #29
 80078ce:	d001      	beq.n	80078d4 <__sflush_r+0xac>
 80078d0:	2b16      	cmp	r3, #22
 80078d2:	d11e      	bne.n	8007912 <__sflush_r+0xea>
 80078d4:	602f      	str	r7, [r5, #0]
 80078d6:	2000      	movs	r0, #0
 80078d8:	e022      	b.n	8007920 <__sflush_r+0xf8>
 80078da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078de:	b21b      	sxth	r3, r3
 80078e0:	e01b      	b.n	800791a <__sflush_r+0xf2>
 80078e2:	690f      	ldr	r7, [r1, #16]
 80078e4:	2f00      	cmp	r7, #0
 80078e6:	d0f6      	beq.n	80078d6 <__sflush_r+0xae>
 80078e8:	0793      	lsls	r3, r2, #30
 80078ea:	680e      	ldr	r6, [r1, #0]
 80078ec:	bf08      	it	eq
 80078ee:	694b      	ldreq	r3, [r1, #20]
 80078f0:	600f      	str	r7, [r1, #0]
 80078f2:	bf18      	it	ne
 80078f4:	2300      	movne	r3, #0
 80078f6:	eba6 0807 	sub.w	r8, r6, r7
 80078fa:	608b      	str	r3, [r1, #8]
 80078fc:	f1b8 0f00 	cmp.w	r8, #0
 8007900:	dde9      	ble.n	80078d6 <__sflush_r+0xae>
 8007902:	6a21      	ldr	r1, [r4, #32]
 8007904:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007906:	4643      	mov	r3, r8
 8007908:	463a      	mov	r2, r7
 800790a:	4628      	mov	r0, r5
 800790c:	47b0      	blx	r6
 800790e:	2800      	cmp	r0, #0
 8007910:	dc08      	bgt.n	8007924 <__sflush_r+0xfc>
 8007912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007924:	4407      	add	r7, r0
 8007926:	eba8 0800 	sub.w	r8, r8, r0
 800792a:	e7e7      	b.n	80078fc <__sflush_r+0xd4>
 800792c:	dfbffffe 	.word	0xdfbffffe

08007930 <_fflush_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	690b      	ldr	r3, [r1, #16]
 8007934:	4605      	mov	r5, r0
 8007936:	460c      	mov	r4, r1
 8007938:	b913      	cbnz	r3, 8007940 <_fflush_r+0x10>
 800793a:	2500      	movs	r5, #0
 800793c:	4628      	mov	r0, r5
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	b118      	cbz	r0, 800794a <_fflush_r+0x1a>
 8007942:	6a03      	ldr	r3, [r0, #32]
 8007944:	b90b      	cbnz	r3, 800794a <_fflush_r+0x1a>
 8007946:	f7fd ffe7 	bl	8005918 <__sinit>
 800794a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f3      	beq.n	800793a <_fflush_r+0xa>
 8007952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007954:	07d0      	lsls	r0, r2, #31
 8007956:	d404      	bmi.n	8007962 <_fflush_r+0x32>
 8007958:	0599      	lsls	r1, r3, #22
 800795a:	d402      	bmi.n	8007962 <_fflush_r+0x32>
 800795c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795e:	f7fe f9f6 	bl	8005d4e <__retarget_lock_acquire_recursive>
 8007962:	4628      	mov	r0, r5
 8007964:	4621      	mov	r1, r4
 8007966:	f7ff ff5f 	bl	8007828 <__sflush_r>
 800796a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800796c:	07da      	lsls	r2, r3, #31
 800796e:	4605      	mov	r5, r0
 8007970:	d4e4      	bmi.n	800793c <_fflush_r+0xc>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	059b      	lsls	r3, r3, #22
 8007976:	d4e1      	bmi.n	800793c <_fflush_r+0xc>
 8007978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800797a:	f7fe f9e9 	bl	8005d50 <__retarget_lock_release_recursive>
 800797e:	e7dd      	b.n	800793c <_fflush_r+0xc>

08007980 <__swhatbuf_r>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	2900      	cmp	r1, #0
 800798a:	b096      	sub	sp, #88	@ 0x58
 800798c:	4615      	mov	r5, r2
 800798e:	461e      	mov	r6, r3
 8007990:	da0d      	bge.n	80079ae <__swhatbuf_r+0x2e>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007998:	f04f 0100 	mov.w	r1, #0
 800799c:	bf14      	ite	ne
 800799e:	2340      	movne	r3, #64	@ 0x40
 80079a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079a4:	2000      	movs	r0, #0
 80079a6:	6031      	str	r1, [r6, #0]
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	b016      	add	sp, #88	@ 0x58
 80079ac:	bd70      	pop	{r4, r5, r6, pc}
 80079ae:	466a      	mov	r2, sp
 80079b0:	f000 f862 	bl	8007a78 <_fstat_r>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	dbec      	blt.n	8007992 <__swhatbuf_r+0x12>
 80079b8:	9901      	ldr	r1, [sp, #4]
 80079ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079c2:	4259      	negs	r1, r3
 80079c4:	4159      	adcs	r1, r3
 80079c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ca:	e7eb      	b.n	80079a4 <__swhatbuf_r+0x24>

080079cc <__smakebuf_r>:
 80079cc:	898b      	ldrh	r3, [r1, #12]
 80079ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d0:	079d      	lsls	r5, r3, #30
 80079d2:	4606      	mov	r6, r0
 80079d4:	460c      	mov	r4, r1
 80079d6:	d507      	bpl.n	80079e8 <__smakebuf_r+0x1c>
 80079d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	6123      	str	r3, [r4, #16]
 80079e0:	2301      	movs	r3, #1
 80079e2:	6163      	str	r3, [r4, #20]
 80079e4:	b003      	add	sp, #12
 80079e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e8:	ab01      	add	r3, sp, #4
 80079ea:	466a      	mov	r2, sp
 80079ec:	f7ff ffc8 	bl	8007980 <__swhatbuf_r>
 80079f0:	9f00      	ldr	r7, [sp, #0]
 80079f2:	4605      	mov	r5, r0
 80079f4:	4639      	mov	r1, r7
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff f86e 	bl	8006ad8 <_malloc_r>
 80079fc:	b948      	cbnz	r0, 8007a12 <__smakebuf_r+0x46>
 80079fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a02:	059a      	lsls	r2, r3, #22
 8007a04:	d4ee      	bmi.n	80079e4 <__smakebuf_r+0x18>
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	f043 0302 	orr.w	r3, r3, #2
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	e7e2      	b.n	80079d8 <__smakebuf_r+0xc>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	6020      	str	r0, [r4, #0]
 8007a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	9b01      	ldr	r3, [sp, #4]
 8007a1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a22:	b15b      	cbz	r3, 8007a3c <__smakebuf_r+0x70>
 8007a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f000 f837 	bl	8007a9c <_isatty_r>
 8007a2e:	b128      	cbz	r0, 8007a3c <__smakebuf_r+0x70>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f023 0303 	bic.w	r3, r3, #3
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	431d      	orrs	r5, r3
 8007a40:	81a5      	strh	r5, [r4, #12]
 8007a42:	e7cf      	b.n	80079e4 <__smakebuf_r+0x18>

08007a44 <memmove>:
 8007a44:	4288      	cmp	r0, r1
 8007a46:	b510      	push	{r4, lr}
 8007a48:	eb01 0402 	add.w	r4, r1, r2
 8007a4c:	d902      	bls.n	8007a54 <memmove+0x10>
 8007a4e:	4284      	cmp	r4, r0
 8007a50:	4623      	mov	r3, r4
 8007a52:	d807      	bhi.n	8007a64 <memmove+0x20>
 8007a54:	1e43      	subs	r3, r0, #1
 8007a56:	42a1      	cmp	r1, r4
 8007a58:	d008      	beq.n	8007a6c <memmove+0x28>
 8007a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a62:	e7f8      	b.n	8007a56 <memmove+0x12>
 8007a64:	4402      	add	r2, r0
 8007a66:	4601      	mov	r1, r0
 8007a68:	428a      	cmp	r2, r1
 8007a6a:	d100      	bne.n	8007a6e <memmove+0x2a>
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a76:	e7f7      	b.n	8007a68 <memmove+0x24>

08007a78 <_fstat_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d07      	ldr	r5, [pc, #28]	@ (8007a98 <_fstat_r+0x20>)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	f7fa f937 	bl	8001cf8 <_fstat>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	d102      	bne.n	8007a94 <_fstat_r+0x1c>
 8007a8e:	682b      	ldr	r3, [r5, #0]
 8007a90:	b103      	cbz	r3, 8007a94 <_fstat_r+0x1c>
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	bd38      	pop	{r3, r4, r5, pc}
 8007a96:	bf00      	nop
 8007a98:	20000a98 	.word	0x20000a98

08007a9c <_isatty_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d06      	ldr	r5, [pc, #24]	@ (8007ab8 <_isatty_r+0x1c>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	602b      	str	r3, [r5, #0]
 8007aa8:	f7fa f936 	bl	8001d18 <_isatty>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_isatty_r+0x1a>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_isatty_r+0x1a>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	20000a98 	.word	0x20000a98

08007abc <_sbrk_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d06      	ldr	r5, [pc, #24]	@ (8007ad8 <_sbrk_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	f7fa f93e 	bl	8001d48 <_sbrk>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_sbrk_r+0x1a>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_sbrk_r+0x1a>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20000a98 	.word	0x20000a98

08007adc <memcpy>:
 8007adc:	440a      	add	r2, r1
 8007ade:	4291      	cmp	r1, r2
 8007ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ae4:	d100      	bne.n	8007ae8 <memcpy+0xc>
 8007ae6:	4770      	bx	lr
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007af2:	4291      	cmp	r1, r2
 8007af4:	d1f9      	bne.n	8007aea <memcpy+0xe>
 8007af6:	bd10      	pop	{r4, pc}

08007af8 <__assert_func>:
 8007af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007afa:	4614      	mov	r4, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	4b09      	ldr	r3, [pc, #36]	@ (8007b24 <__assert_func+0x2c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4605      	mov	r5, r0
 8007b04:	68d8      	ldr	r0, [r3, #12]
 8007b06:	b954      	cbnz	r4, 8007b1e <__assert_func+0x26>
 8007b08:	4b07      	ldr	r3, [pc, #28]	@ (8007b28 <__assert_func+0x30>)
 8007b0a:	461c      	mov	r4, r3
 8007b0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b10:	9100      	str	r1, [sp, #0]
 8007b12:	462b      	mov	r3, r5
 8007b14:	4905      	ldr	r1, [pc, #20]	@ (8007b2c <__assert_func+0x34>)
 8007b16:	f000 f86f 	bl	8007bf8 <fiprintf>
 8007b1a:	f000 f87f 	bl	8007c1c <abort>
 8007b1e:	4b04      	ldr	r3, [pc, #16]	@ (8007b30 <__assert_func+0x38>)
 8007b20:	e7f4      	b.n	8007b0c <__assert_func+0x14>
 8007b22:	bf00      	nop
 8007b24:	20000020 	.word	0x20000020
 8007b28:	08008056 	.word	0x08008056
 8007b2c:	08008028 	.word	0x08008028
 8007b30:	0800801b 	.word	0x0800801b

08007b34 <_calloc_r>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	fba1 5402 	umull	r5, r4, r1, r2
 8007b3a:	b93c      	cbnz	r4, 8007b4c <_calloc_r+0x18>
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	f7fe ffcb 	bl	8006ad8 <_malloc_r>
 8007b42:	4606      	mov	r6, r0
 8007b44:	b928      	cbnz	r0, 8007b52 <_calloc_r+0x1e>
 8007b46:	2600      	movs	r6, #0
 8007b48:	4630      	mov	r0, r6
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	220c      	movs	r2, #12
 8007b4e:	6002      	str	r2, [r0, #0]
 8007b50:	e7f9      	b.n	8007b46 <_calloc_r+0x12>
 8007b52:	462a      	mov	r2, r5
 8007b54:	4621      	mov	r1, r4
 8007b56:	f7fe f87d 	bl	8005c54 <memset>
 8007b5a:	e7f5      	b.n	8007b48 <_calloc_r+0x14>

08007b5c <__ascii_mbtowc>:
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	b901      	cbnz	r1, 8007b62 <__ascii_mbtowc+0x6>
 8007b60:	a901      	add	r1, sp, #4
 8007b62:	b142      	cbz	r2, 8007b76 <__ascii_mbtowc+0x1a>
 8007b64:	b14b      	cbz	r3, 8007b7a <__ascii_mbtowc+0x1e>
 8007b66:	7813      	ldrb	r3, [r2, #0]
 8007b68:	600b      	str	r3, [r1, #0]
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	1e10      	subs	r0, r2, #0
 8007b6e:	bf18      	it	ne
 8007b70:	2001      	movne	r0, #1
 8007b72:	b002      	add	sp, #8
 8007b74:	4770      	bx	lr
 8007b76:	4610      	mov	r0, r2
 8007b78:	e7fb      	b.n	8007b72 <__ascii_mbtowc+0x16>
 8007b7a:	f06f 0001 	mvn.w	r0, #1
 8007b7e:	e7f8      	b.n	8007b72 <__ascii_mbtowc+0x16>

08007b80 <_realloc_r>:
 8007b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b84:	4680      	mov	r8, r0
 8007b86:	4615      	mov	r5, r2
 8007b88:	460c      	mov	r4, r1
 8007b8a:	b921      	cbnz	r1, 8007b96 <_realloc_r+0x16>
 8007b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b90:	4611      	mov	r1, r2
 8007b92:	f7fe bfa1 	b.w	8006ad8 <_malloc_r>
 8007b96:	b92a      	cbnz	r2, 8007ba4 <_realloc_r+0x24>
 8007b98:	f7fe ff2a 	bl	80069f0 <_free_r>
 8007b9c:	2400      	movs	r4, #0
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba4:	f000 f841 	bl	8007c2a <_malloc_usable_size_r>
 8007ba8:	4285      	cmp	r5, r0
 8007baa:	4606      	mov	r6, r0
 8007bac:	d802      	bhi.n	8007bb4 <_realloc_r+0x34>
 8007bae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bb2:	d8f4      	bhi.n	8007b9e <_realloc_r+0x1e>
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	f7fe ff8e 	bl	8006ad8 <_malloc_r>
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d0ec      	beq.n	8007b9c <_realloc_r+0x1c>
 8007bc2:	42b5      	cmp	r5, r6
 8007bc4:	462a      	mov	r2, r5
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	bf28      	it	cs
 8007bca:	4632      	movcs	r2, r6
 8007bcc:	f7ff ff86 	bl	8007adc <memcpy>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	f7fe ff0c 	bl	80069f0 <_free_r>
 8007bd8:	463c      	mov	r4, r7
 8007bda:	e7e0      	b.n	8007b9e <_realloc_r+0x1e>

08007bdc <__ascii_wctomb>:
 8007bdc:	4603      	mov	r3, r0
 8007bde:	4608      	mov	r0, r1
 8007be0:	b141      	cbz	r1, 8007bf4 <__ascii_wctomb+0x18>
 8007be2:	2aff      	cmp	r2, #255	@ 0xff
 8007be4:	d904      	bls.n	8007bf0 <__ascii_wctomb+0x14>
 8007be6:	228a      	movs	r2, #138	@ 0x8a
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	f04f 30ff 	mov.w	r0, #4294967295
 8007bee:	4770      	bx	lr
 8007bf0:	700a      	strb	r2, [r1, #0]
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	4770      	bx	lr
	...

08007bf8 <fiprintf>:
 8007bf8:	b40e      	push	{r1, r2, r3}
 8007bfa:	b503      	push	{r0, r1, lr}
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	ab03      	add	r3, sp, #12
 8007c00:	4805      	ldr	r0, [pc, #20]	@ (8007c18 <fiprintf+0x20>)
 8007c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c06:	6800      	ldr	r0, [r0, #0]
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	f7ff fcf5 	bl	80075f8 <_vfiprintf_r>
 8007c0e:	b002      	add	sp, #8
 8007c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c14:	b003      	add	sp, #12
 8007c16:	4770      	bx	lr
 8007c18:	20000020 	.word	0x20000020

08007c1c <abort>:
 8007c1c:	b508      	push	{r3, lr}
 8007c1e:	2006      	movs	r0, #6
 8007c20:	f000 f834 	bl	8007c8c <raise>
 8007c24:	2001      	movs	r0, #1
 8007c26:	f7fa f817 	bl	8001c58 <_exit>

08007c2a <_malloc_usable_size_r>:
 8007c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c2e:	1f18      	subs	r0, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bfbc      	itt	lt
 8007c34:	580b      	ldrlt	r3, [r1, r0]
 8007c36:	18c0      	addlt	r0, r0, r3
 8007c38:	4770      	bx	lr

08007c3a <_raise_r>:
 8007c3a:	291f      	cmp	r1, #31
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4605      	mov	r5, r0
 8007c40:	460c      	mov	r4, r1
 8007c42:	d904      	bls.n	8007c4e <_raise_r+0x14>
 8007c44:	2316      	movs	r3, #22
 8007c46:	6003      	str	r3, [r0, #0]
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c50:	b112      	cbz	r2, 8007c58 <_raise_r+0x1e>
 8007c52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c56:	b94b      	cbnz	r3, 8007c6c <_raise_r+0x32>
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f000 f831 	bl	8007cc0 <_getpid_r>
 8007c5e:	4622      	mov	r2, r4
 8007c60:	4601      	mov	r1, r0
 8007c62:	4628      	mov	r0, r5
 8007c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c68:	f000 b818 	b.w	8007c9c <_kill_r>
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d00a      	beq.n	8007c86 <_raise_r+0x4c>
 8007c70:	1c59      	adds	r1, r3, #1
 8007c72:	d103      	bne.n	8007c7c <_raise_r+0x42>
 8007c74:	2316      	movs	r3, #22
 8007c76:	6003      	str	r3, [r0, #0]
 8007c78:	2001      	movs	r0, #1
 8007c7a:	e7e7      	b.n	8007c4c <_raise_r+0x12>
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c82:	4620      	mov	r0, r4
 8007c84:	4798      	blx	r3
 8007c86:	2000      	movs	r0, #0
 8007c88:	e7e0      	b.n	8007c4c <_raise_r+0x12>
	...

08007c8c <raise>:
 8007c8c:	4b02      	ldr	r3, [pc, #8]	@ (8007c98 <raise+0xc>)
 8007c8e:	4601      	mov	r1, r0
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	f7ff bfd2 	b.w	8007c3a <_raise_r>
 8007c96:	bf00      	nop
 8007c98:	20000020 	.word	0x20000020

08007c9c <_kill_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	@ (8007cbc <_kill_r+0x20>)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	602b      	str	r3, [r5, #0]
 8007caa:	f7f9 ffc5 	bl	8001c38 <_kill>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d102      	bne.n	8007cb8 <_kill_r+0x1c>
 8007cb2:	682b      	ldr	r3, [r5, #0]
 8007cb4:	b103      	cbz	r3, 8007cb8 <_kill_r+0x1c>
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000a98 	.word	0x20000a98

08007cc0 <_getpid_r>:
 8007cc0:	f7f9 bfb2 	b.w	8001c28 <_getpid>

08007cc4 <_init>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	bf00      	nop
 8007cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cca:	bc08      	pop	{r3}
 8007ccc:	469e      	mov	lr, r3
 8007cce:	4770      	bx	lr

08007cd0 <_fini>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	bf00      	nop
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr
