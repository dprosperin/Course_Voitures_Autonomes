
tp6_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005308  08005308  00006308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080053bc  080053bc  000063bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c4  080053c4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053c8  080053c8  000063c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080053cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000068  08005434  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  08005434  00007920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa40  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002489  00000000  00000000  00016ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00018f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ba  00000000  00000000  00019c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eaf5  00000000  00000000  0001a5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd08  00000000  00000000  000390e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd92e  00000000  00000000  00048def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010671d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  00106760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0010a47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080052f0 	.word	0x080052f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080052f0 	.word	0x080052f0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005b6:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <MX_FDCAN1_Init+0x88>)
 80005b8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005da:	2200      	movs	r2, #0
 80005dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005e0:	2211      	movs	r2, #17
 80005e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005ec:	2207      	movs	r2, #7
 80005ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80005f0:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 80005fe:	2201      	movs	r2, #1
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 8000604:	2201      	movs	r2, #1
 8000606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 800060a:	2201      	movs	r2, #1
 800060c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 8000610:	2200      	movs	r2, #0
 8000612:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 8000616:	2200      	movs	r2, #0
 8000618:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 800061c:	2200      	movs	r2, #0
 800061e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	@ (8000634 <MX_FDCAN1_Init+0x84>)
 8000622:	f000 feb5 	bl	8001390 <HAL_FDCAN_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800062c:	f000 fb26 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000084 	.word	0x20000084
 8000638:	40006400 	.word	0x40006400

0800063c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09a      	sub	sp, #104	@ 0x68
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2244      	movs	r2, #68	@ 0x44
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f003 ff0d 	bl	800447c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a24      	ldr	r2, [pc, #144]	@ (80006f8 <HAL_FDCAN_MspInit+0xbc>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d141      	bne.n	80006f0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800066c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000670:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000672:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fc17 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000688:	f000 faf8 	bl	8000c7c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <HAL_FDCAN_MspInit+0xc0>)
 800068e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000690:	4a1a      	ldr	r2, [pc, #104]	@ (80006fc <HAL_FDCAN_MspInit+0xc0>)
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000696:	6593      	str	r3, [r2, #88]	@ 0x58
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <HAL_FDCAN_MspInit+0xc0>)
 800069a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800069c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_FDCAN_MspInit+0xc0>)
 80006a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a8:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <HAL_FDCAN_MspInit+0xc0>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_FDCAN_MspInit+0xc0>)
 80006b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006ce:	2309      	movs	r3, #9
 80006d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f001 fc6c 	bl	8001fb8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2015      	movs	r0, #21
 80006e6:	f000 fe1e 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80006ea:	2015      	movs	r0, #21
 80006ec:	f000 fe35 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3768      	adds	r7, #104	@ 0x68
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40006400 	.word	0x40006400
 80006fc:	40021000 	.word	0x40021000

08000700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_GPIO_Init+0x78>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <MX_GPIO_Init+0x78>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_GPIO_Init+0x78>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_GPIO_Init+0x78>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <MX_GPIO_Init+0x78>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_GPIO_Init+0x78>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <MX_GPIO_Init+0x7c>)
 800074e:	f001 fdb5 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000752:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_GPIO_Init+0x7c>)
 800076c:	f001 fc24 	bl	8001fb8 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	48000400 	.word	0x48000400

08000780 <__io_putchar>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	2201      	movs	r2, #1
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <__io_putchar+0x20>)
 8000792:	f002 fdcd 	bl	8003330 <HAL_UART_Transmit>

	return ch;
 8000796:	687b      	ldr	r3, [r7, #4]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000073c 	.word	0x2000073c

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fc4f 	bl	800104a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f83a 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f7ff ffa6 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b4:	f000 fb7c 	bl	8000eb0 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80007b8:	f7ff fefa 	bl	80005b0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("En vie\n");
 80007bc:	4814      	ldr	r0, [pc, #80]	@ (8000810 <main+0x6c>)
 80007be:	f003 fd5d 	bl	800427c <puts>
							   FDCAN_FILTER_REMOTE);  // Accepter les trames distantes étendues


  printf("ConfigGlobalFilter 0x%X\n", retour);*/

  HAL_FDCAN_Start(&hfdcan1);
 80007c2:	4814      	ldr	r0, [pc, #80]	@ (8000814 <main+0x70>)
 80007c4:	f000 ff3e 	bl	8001644 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	4811      	ldr	r0, [pc, #68]	@ (8000814 <main+0x70>)
 80007ce:	f001 f8ad 	bl	800192c <HAL_FDCAN_ActivateNotification>
  LCD_clear();
 80007d2:	f000 f969 	bl	8000aa8 <LCD_clear>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //BAR_set(0b100010000);
	  JOG_read();
 80007d6:	f000 f90f 	bl	80009f8 <JOG_read>
	  COD_read();
 80007da:	f000 f92d 	bl	8000a38 <COD_read>


	 automate_decode_IHM();
 80007de:	f000 f8a1 	bl	8000924 <automate_decode_IHM>



	  //TODO : Bloque la réception des trames lidar

	  LCD_gotoxy(0,0);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 f941 	bl	8000a6c <LCD_gotoxy>
	  LCD_printf("%d",jog_value);
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <main+0x74>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4619      	mov	r1, r3
 80007f0:	480a      	ldr	r0, [pc, #40]	@ (800081c <main+0x78>)
 80007f2:	f000 f997 	bl	8000b24 <LCD_printf>
	  LCD_gotoxy(0,1);
 80007f6:	2101      	movs	r1, #1
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f937 	bl	8000a6c <LCD_gotoxy>
	  LCD_printf("%d",cod_value);
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <main+0x7c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <main+0x78>)
 8000806:	f000 f98d 	bl	8000b24 <LCD_printf>
	  JOG_read();
 800080a:	bf00      	nop
 800080c:	e7e3      	b.n	80007d6 <main+0x32>
 800080e:	bf00      	nop
 8000810:	08005308 	.word	0x08005308
 8000814:	20000084 	.word	0x20000084
 8000818:	20000731 	.word	0x20000731
 800081c:	08005310 	.word	0x08005310
 8000820:	20000732 	.word	0x20000732

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0318 	add.w	r3, r7, #24
 800082e:	2238      	movs	r2, #56	@ 0x38
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fe22 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000846:	2000      	movs	r0, #0
 8000848:	f001 fd50 	bl	80022ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000856:	2340      	movs	r3, #64	@ 0x40
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800085e:	2302      	movs	r3, #2
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000862:	2304      	movs	r3, #4
 8000864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000866:	2355      	movs	r3, #85	@ 0x55
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800086e:	2302      	movs	r3, #2
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000872:	2302      	movs	r3, #2
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fdea 	bl	8002454 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000886:	f000 f9f9 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2303      	movs	r3, #3
 8000890:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2104      	movs	r1, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 f8e8 	bl	8002a78 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008ae:	f000 f9e5 	bl	8000c7c <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	@ 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &buffer_trame_rx[marker1].header, &buffer_trame_rx[marker1].data[0]);
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	4613      	mov	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	4a11      	ldr	r2, [pc, #68]	@ (800091c <HAL_FDCAN_RxFifo0Callback+0x60>)
 80008d6:	441a      	add	r2, r3
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	460b      	mov	r3, r1
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	440b      	add	r3, r1
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	3328      	adds	r3, #40	@ 0x28
 80008e8:	490c      	ldr	r1, [pc, #48]	@ (800091c <HAL_FDCAN_RxFifo0Callback+0x60>)
 80008ea:	440b      	add	r3, r1
 80008ec:	2140      	movs	r1, #64	@ 0x40
 80008ee:	480c      	ldr	r0, [pc, #48]	@ (8000920 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80008f0:	f000 ff14 	bl	800171c <HAL_FDCAN_GetRxMessage>
		//printf("0x%X marker1 :%d \n", buffer_trame_rx[marker1].data[0], marker1);
		marker1++;
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80008fe:	801a      	strh	r2, [r3, #0]

		if (marker1 == 32)
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	2b20      	cmp	r3, #32
 8000906:	d102      	bne.n	800090e <HAL_FDCAN_RxFifo0Callback+0x52>
		{
			marker1 = 0;
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	801a      	strh	r2, [r3, #0]
		}
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000e8 	.word	0x200000e8
 800091c:	200000ec 	.word	0x200000ec
 8000920:	20000084 	.word	0x20000084

08000924 <automate_decode_IHM>:

void automate_decode_IHM(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	static uint16_t marker2 = 0;

	//printf("Id trame : 0x%X\n", buffer_trame_rx[marker2].header.Identifier);

	switch (buffer_trame_rx[marker2].header.Identifier)
 8000928:	4b2d      	ldr	r3, [pc, #180]	@ (80009e0 <automate_decode_IHM+0xbc>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	4a2d      	ldr	r2, [pc, #180]	@ (80009e4 <automate_decode_IHM+0xc0>)
 8000930:	460b      	mov	r3, r1
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	440b      	add	r3, r1
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	4413      	add	r3, r2
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f240 7291 	movw	r2, #1937	@ 0x791
 8000940:	4293      	cmp	r3, r2
 8000942:	d004      	beq.n	800094e <automate_decode_IHM+0x2a>
 8000944:	f240 72a1 	movw	r2, #1953	@ 0x7a1
 8000948:	4293      	cmp	r3, r2
 800094a:	d01d      	beq.n	8000988 <automate_decode_IHM+0x64>
 800094c:	e039      	b.n	80009c2 <automate_decode_IHM+0x9e>
	{
	case JOG_DATA:
		 printf("JOG value : 0x%X\n", buffer_trame_rx[marker2].data[0]);
 800094e:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <automate_decode_IHM+0xbc>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	4619      	mov	r1, r3
 8000954:	4a23      	ldr	r2, [pc, #140]	@ (80009e4 <automate_decode_IHM+0xc0>)
 8000956:	460b      	mov	r3, r1
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	440b      	add	r3, r1
 800095c:	011b      	lsls	r3, r3, #4
 800095e:	4413      	add	r3, r2
 8000960:	3328      	adds	r3, #40	@ 0x28
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	4820      	ldr	r0, [pc, #128]	@ (80009e8 <automate_decode_IHM+0xc4>)
 8000968:	f003 fc20 	bl	80041ac <iprintf>
		 jog_value = buffer_trame_rx[marker2].data[0];
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <automate_decode_IHM+0xbc>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <automate_decode_IHM+0xc0>)
 8000974:	460b      	mov	r3, r1
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	440b      	add	r3, r1
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	4413      	add	r3, r2
 800097e:	3328      	adds	r3, #40	@ 0x28
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <automate_decode_IHM+0xc8>)
 8000984:	701a      	strb	r2, [r3, #0]
	break;
 8000986:	e01c      	b.n	80009c2 <automate_decode_IHM+0x9e>

	case COD_DATA:
		printf("COD value : %d\n", buffer_trame_rx[marker2].data[0]);
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <automate_decode_IHM+0xbc>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <automate_decode_IHM+0xc0>)
 8000990:	460b      	mov	r3, r1
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	440b      	add	r3, r1
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4413      	add	r3, r2
 800099a:	3328      	adds	r3, #40	@ 0x28
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <automate_decode_IHM+0xcc>)
 80009a2:	f003 fc03 	bl	80041ac <iprintf>
		cod_value = buffer_trame_rx[marker2].data[0];
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <automate_decode_IHM+0xbc>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <automate_decode_IHM+0xc0>)
 80009ae:	460b      	mov	r3, r1
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	440b      	add	r3, r1
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	4413      	add	r3, r2
 80009b8:	3328      	adds	r3, #40	@ 0x28
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <automate_decode_IHM+0xd0>)
 80009be:	701a      	strb	r2, [r3, #0]
	break;
 80009c0:	bf00      	nop
	}

	marker2++;
 80009c2:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <automate_decode_IHM+0xbc>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <automate_decode_IHM+0xbc>)
 80009cc:	801a      	strh	r2, [r3, #0]

	if (marker2 == 32) {
 80009ce:	4b04      	ldr	r3, [pc, #16]	@ (80009e0 <automate_decode_IHM+0xbc>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	2b20      	cmp	r3, #32
 80009d4:	d102      	bne.n	80009dc <automate_decode_IHM+0xb8>
		marker2 = 0;
 80009d6:	4b02      	ldr	r3, [pc, #8]	@ (80009e0 <automate_decode_IHM+0xbc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	801a      	strh	r2, [r3, #0]
	}
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000734 	.word	0x20000734
 80009e4:	200000ec 	.word	0x200000ec
 80009e8:	08005314 	.word	0x08005314
 80009ec:	20000731 	.word	0x20000731
 80009f0:	08005328 	.word	0x08005328
 80009f4:	20000732 	.word	0x20000732

080009f8 <JOG_read>:
/**
 * @brief Obtenir la valeur du JOG
 * @note Pas besoin d'attente bloaquante pour cette fonction avec IHM v2
 */
void JOG_read(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef pTxHeader = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2224      	movs	r2, #36	@ 0x24
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fd39 	bl	800447c <memset>

	pTxHeader.Identifier = JOG_REQ;
 8000a0a:	f44f 63f2 	mov.w	r3, #1936	@ 0x790
 8000a0e:	607b      	str	r3, [r7, #4]
	pTxHeader.IdType = FDCAN_STANDARD_ID;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
	pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 8000a14:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a18:	60fb      	str	r3, [r7, #12]
	pTxHeader.DataLength = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]

	uint8_t pTxData;
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 8000a1e:	1cfa      	adds	r2, r7, #3
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <JOG_read+0x3c>)
 8000a26:	f000 fe35 	bl	8001694 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	@ 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000084 	.word	0x20000084

08000a38 <COD_read>:
/**
 * @brief Obtenir la valeur du COD
 * @note Pas besoin d'attente bloaquante pour cette fonction avec IHM v2
 */
void COD_read(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef pTxHeader;

	pTxHeader.Identifier = COD_REQ;
 8000a3e:	f44f 63f4 	mov.w	r3, #1952	@ 0x7a0
 8000a42:	607b      	str	r3, [r7, #4]
	pTxHeader.IdType = FDCAN_STANDARD_ID;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
	pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 8000a48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a4c:	60fb      	str	r3, [r7, #12]
	pTxHeader.DataLength = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]

	uint8_t pTxData;
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 8000a52:	1cfa      	adds	r2, r7, #3
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <COD_read+0x30>)
 8000a5a:	f000 fe1b 	bl	8001694 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000084 	.word	0x20000084

08000a6c <LCD_gotoxy>:

    HAL_Delay(1);
}

void LCD_gotoxy (uint8_t x, uint8_t y)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
    curseur=(y*16+x)%32;
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	011a      	lsls	r2, r3, #4
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4413      	add	r3, r2
 8000a84:	425a      	negs	r2, r3
 8000a86:	f003 031f 	and.w	r3, r3, #31
 8000a8a:	f002 021f 	and.w	r2, r2, #31
 8000a8e:	bf58      	it	pl
 8000a90:	4253      	negpl	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <LCD_gotoxy+0x38>)
 8000a96:	701a      	strb	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	200006ec 	.word	0x200006ec

08000aa8 <LCD_clear>:

void LCD_clear(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0
    uint8_t i;

    curseur=0;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <LCD_clear+0x70>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]

    for(i=0; i<32; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000aba:	e009      	b.n	8000ad0 <LCD_clear+0x28>
        tableau_ecran[i]=32;
 8000abc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac0:	4a16      	ldr	r2, [pc, #88]	@ (8000b1c <LCD_clear+0x74>)
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	54d1      	strb	r1, [r2, r3]
    for(i=0; i<32; i++)
 8000ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aca:	3301      	adds	r3, #1
 8000acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad4:	2b1f      	cmp	r3, #31
 8000ad6:	d9f1      	bls.n	8000abc <LCD_clear+0x14>

    FDCAN_TxHeaderTypeDef pTxHeader = {0};
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	2224      	movs	r2, #36	@ 0x24
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fccb 	bl	800447c <memset>

    pTxHeader.Identifier = LCD_CLEAR;
 8000ae6:	f240 737f 	movw	r3, #1919	@ 0x77f
 8000aea:	60bb      	str	r3, [r7, #8]
    pTxHeader.IdType = FDCAN_STANDARD_ID;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
    pTxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 8000af0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000af4:	613b      	str	r3, [r7, #16]
    pTxHeader.DataLength = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]

    uint8_t pTxData;
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 8000afa:	1dfa      	adds	r2, r7, #7
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4619      	mov	r1, r3
 8000b02:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <LCD_clear+0x78>)
 8000b04:	f000 fdc6 	bl	8001694 <HAL_FDCAN_AddMessageToTxFifoQ>
    HAL_Delay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f000 fb0f 	bl	800112c <HAL_Delay>
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	@ 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200006ec 	.word	0x200006ec
 8000b1c:	200006f0 	.word	0x200006f0
 8000b20:	20000084 	.word	0x20000084

08000b24 <LCD_printf>:

void LCD_printf(const char* format, ...)
{
 8000b24:	b40f      	push	{r0, r1, r2, r3}
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b08e      	sub	sp, #56	@ 0x38
 8000b2a:	af00      	add	r7, sp, #0
	uint8_t i, j;
	va_list arg;
	va_start(arg, format);
 8000b2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30

	curseur = curseur + vsprintf(tableau_ecran+curseur % 64, format, arg);
 8000b32:	4b4f      	ldr	r3, [pc, #316]	@ (8000c70 <LCD_printf+0x14c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8000c74 <LCD_printf+0x150>)
 8000b3c:	4413      	add	r3, r2
 8000b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fbfc 	bl	8004340 <vsiprintf>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b48      	ldr	r3, [pc, #288]	@ (8000c70 <LCD_printf+0x14c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b46      	ldr	r3, [pc, #280]	@ (8000c70 <LCD_printf+0x14c>)
 8000b56:	701a      	strb	r2, [r3, #0]

	if(curseur>31)
 8000b58:	4b45      	ldr	r3, [pc, #276]	@ (8000c70 <LCD_printf+0x14c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b1f      	cmp	r3, #31
 8000b5e:	d920      	bls.n	8000ba2 <LCD_printf+0x7e>
	{
	   for(i = 32; i < curseur; i++)
 8000b60:	2320      	movs	r3, #32
 8000b62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000b66:	e00e      	b.n	8000b86 <LCD_printf+0x62>
	   {
	        tableau_ecran[i % 32] = tableau_ecran[i];
 8000b68:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b70:	f003 031f 	and.w	r3, r3, #31
 8000b74:	493f      	ldr	r1, [pc, #252]	@ (8000c74 <LCD_printf+0x150>)
 8000b76:	5c89      	ldrb	r1, [r1, r2]
 8000b78:	4a3e      	ldr	r2, [pc, #248]	@ (8000c74 <LCD_printf+0x150>)
 8000b7a:	54d1      	strb	r1, [r2, r3]
	   for(i = 32; i < curseur; i++)
 8000b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b80:	3301      	adds	r3, #1
 8000b82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000b86:	4b3a      	ldr	r3, [pc, #232]	@ (8000c70 <LCD_printf+0x14c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d3ea      	bcc.n	8000b68 <LCD_printf+0x44>
	   }
	   curseur=curseur % 32;
 8000b92:	4b37      	ldr	r3, [pc, #220]	@ (8000c70 <LCD_printf+0x14c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 031f 	and.w	r3, r3, #31
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b34      	ldr	r3, [pc, #208]	@ (8000c70 <LCD_printf+0x14c>)
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e017      	b.n	8000bd2 <LCD_printf+0xae>
	}
	else
	{
	   for(i = 0; i < 32;i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000ba8:	e00f      	b.n	8000bca <LCD_printf+0xa6>
	   {
	      if(tableau_ecran[i] == 0)
 8000baa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bae:	4a31      	ldr	r2, [pc, #196]	@ (8000c74 <LCD_printf+0x150>)
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d104      	bne.n	8000bc0 <LCD_printf+0x9c>
	           tableau_ecran[i] = 20;
 8000bb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bba:	4a2e      	ldr	r2, [pc, #184]	@ (8000c74 <LCD_printf+0x150>)
 8000bbc:	2114      	movs	r1, #20
 8000bbe:	54d1      	strb	r1, [r2, r3]
	   for(i = 0; i < 32;i++)
 8000bc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000bca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bce:	2b1f      	cmp	r3, #31
 8000bd0:	d9eb      	bls.n	8000baa <LCD_printf+0x86>
	   }
	 }
	 va_end(arg);
	 tableau_ecran[32] = '\0';
 8000bd2:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <LCD_printf+0x150>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]


	 for(j = 0; j < 4; j++) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000be0:	e03a      	b.n	8000c58 <LCD_printf+0x134>
	     FDCAN_TxHeaderTypeDef pTxHeader = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2224      	movs	r2, #36	@ 0x24
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 fc47 	bl	800447c <memset>
	     uint8_t pTxData[8];


	     pTxHeader.Identifier = LCD_CHAR0 + j;
 8000bee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000bf2:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8000bf6:	607b      	str	r3, [r7, #4]
	     pTxHeader.IdType = FDCAN_STANDARD_ID;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
	     pTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
	     pTxHeader.DataLength = 8;
 8000c00:	2308      	movs	r3, #8
 8000c02:	613b      	str	r3, [r7, #16]

	     for(i = 0; i < 8; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000c0a:	e012      	b.n	8000c32 <LCD_printf+0x10e>
	    	 pTxData[i] = tableau_ecran[i + j * 8];
 8000c0c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000c10:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	441a      	add	r2, r3
 8000c18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c1c:	4915      	ldr	r1, [pc, #84]	@ (8000c74 <LCD_printf+0x150>)
 8000c1e:	5c8a      	ldrb	r2, [r1, r2]
 8000c20:	3338      	adds	r3, #56	@ 0x38
 8000c22:	443b      	add	r3, r7
 8000c24:	f803 2c10 	strb.w	r2, [r3, #-16]
	     for(i = 0; i < 8; i++)
 8000c28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000c32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c36:	2b07      	cmp	r3, #7
 8000c38:	d9e8      	bls.n	8000c0c <LCD_printf+0xe8>

	     HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader , &pTxData);
 8000c3a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <LCD_printf+0x154>)
 8000c44:	f000 fd26 	bl	8001694 <HAL_FDCAN_AddMessageToTxFifoQ>
	     HAL_Delay(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 fa6f 	bl	800112c <HAL_Delay>
	 for(j = 0; j < 4; j++) {
 8000c4e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c52:	3301      	adds	r3, #1
 8000c54:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000c58:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d9c0      	bls.n	8000be2 <LCD_printf+0xbe>
	 }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3738      	adds	r7, #56	@ 0x38
 8000c66:	46bd      	mov	sp, r7
 8000c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr
 8000c70:	200006ec 	.word	0x200006ec
 8000c74:	200006f0 	.word	0x200006f0
 8000c78:	20000084 	.word	0x20000084

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <Error_Handler+0x8>

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <HAL_MspInit+0x44>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c92:	4a0e      	ldr	r2, [pc, #56]	@ (8000ccc <HAL_MspInit+0x44>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <HAL_MspInit+0x44>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <HAL_MspInit+0x44>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000caa:	4a08      	ldr	r2, [pc, #32]	@ (8000ccc <HAL_MspInit+0x44>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_MspInit+0x44>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cbe:	f001 fbb9 	bl	8002434 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 f9e3 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <FDCAN1_IT0_IRQHandler+0x10>)
 8000d36:	f000 fedf 	bl	8001af8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000084 	.word	0x20000084

08000d44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00a      	b.n	8000d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d56:	f3af 8000 	nop.w
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	b2ca      	uxtb	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf0      	blt.n	8000d56 <_read+0x12>
  }

  return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e009      	b.n	8000da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcf1 	bl	8000780 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf1      	blt.n	8000d90 <_write+0x12>
  }
  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f003 fb62 	bl	8004518 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20008000 	.word	0x20008000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	20000738 	.word	0x20000738
 8000e88:	20000920 	.word	0x20000920

08000e8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000eb6:	4a23      	ldr	r2, [pc, #140]	@ (8000f44 <MX_USART2_UART_Init+0x94>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eba:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef8:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000efa:	f002 f9c9 	bl	8003290 <HAL_UART_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f04:	f7ff feba 	bl	8000c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000f0c:	f002 ffc2 	bl	8003e94 <HAL_UARTEx_SetTxFifoThreshold>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f16:	f7ff feb1 	bl	8000c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000f1e:	f002 fff7 	bl	8003f10 <HAL_UARTEx_SetRxFifoThreshold>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f28:	f7ff fea8 	bl	8000c7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <MX_USART2_UART_Init+0x90>)
 8000f2e:	f002 ff78 	bl	8003e22 <HAL_UARTEx_DisableFifoMode>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f7ff fea0 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000073c 	.word	0x2000073c
 8000f44:	40004400 	.word	0x40004400

08000f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09a      	sub	sp, #104	@ 0x68
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2244      	movs	r2, #68	@ 0x44
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 fa87 	bl	800447c <memset>
  if(uartHandle->Instance==USART2)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_UART_MspInit+0xa8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d136      	bne.n	8000fe6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 ff93 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff fe74 	bl	8000c7c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <HAL_UART_MspInit+0xac>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f98:	4a16      	ldr	r2, [pc, #88]	@ (8000ff4 <HAL_UART_MspInit+0xac>)
 8000f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <HAL_UART_MspInit+0xac>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_UART_MspInit+0xac>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb0:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <HAL_UART_MspInit+0xac>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_UART_MspInit+0xac>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe2:	f000 ffe9 	bl	8001fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3768      	adds	r7, #104	@ 0x68
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ffc:	f7ff ff46 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f003 fa7d 	bl	8004524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102a:	f7ff fbbb 	bl	80007a4 <main>

0800102e <LoopForever>:

LoopForever:
    b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   r0, =_estack
 8001030:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800103c:	080053cc 	.word	0x080053cc
  ldr r2, =_sbss
 8001040:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001044:	20000920 	.word	0x20000920

08001048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>

0800104a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f95b 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f80e 	bl	800107c <HAL_InitTick>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	e001      	b.n	8001070 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800106c:	f7ff fe0c 	bl	8000c88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001070:	79fb      	ldrb	r3, [r7, #7]

}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001088:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <HAL_InitTick+0x68>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d022      	beq.n	80010d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_InitTick+0x6c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <HAL_InitTick+0x68>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800109c:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f966 	bl	8001376 <HAL_SYSTICK_Config>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10f      	bne.n	80010d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	d809      	bhi.n	80010ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b6:	2200      	movs	r2, #0
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	f04f 30ff 	mov.w	r0, #4294967295
 80010be:	f000 f932 	bl	8001326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_InitTick+0x70>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e007      	b.n	80010da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e004      	b.n	80010da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e001      	b.n	80010da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <HAL_IncTick+0x1c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_IncTick+0x20>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a03      	ldr	r2, [pc, #12]	@ (800110c <HAL_IncTick+0x1c>)
 8001100:	6013      	str	r3, [r2, #0]
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	200007d0 	.word	0x200007d0
 8001110:	20000008 	.word	0x20000008

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200007d0 	.word	0x200007d0

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d004      	beq.n	8001150 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <HAL_Delay+0x40>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001150:	bf00      	nop
 8001152:	f7ff ffdf 	bl	8001114 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	429a      	cmp	r2, r3
 8001160:	d8f7      	bhi.n	8001152 <HAL_Delay+0x26>
  {
  }
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000008 	.word	0x20000008

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	@ (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	@ (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff40 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff90 	bl	8001264 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5f 	bl	8001210 <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff33 	bl	80011d4 <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffa4 	bl	80012cc <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e147      	b.n	8001632 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff f940 	bl	800063c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0210 	bic.w	r2, r2, #16
 80013ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff fea2 	bl	8001114 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013d2:	e012      	b.n	80013fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013d4:	f7ff fe9e 	bl	8001114 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d90b      	bls.n	80013fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e6:	f043 0201 	orr.w	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e11b      	b.n	8001632 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b08      	cmp	r3, #8
 8001406:	d0e5      	beq.n	80013d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001418:	f7ff fe7c 	bl	8001114 <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800141e:	e012      	b.n	8001446 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001420:	f7ff fe78 	bl	8001114 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b0a      	cmp	r3, #10
 800142c:	d90b      	bls.n	8001446 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0f5      	b.n	8001632 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0e5      	beq.n	8001420 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0202 	orr.w	r2, r2, #2
 8001462:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a74      	ldr	r2, [pc, #464]	@ (800163c <HAL_FDCAN_Init+0x2ac>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d103      	bne.n	8001476 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800146e:	4a74      	ldr	r2, [pc, #464]	@ (8001640 <HAL_FDCAN_Init+0x2b0>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7c1b      	ldrb	r3, [r3, #16]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	e007      	b.n	80014a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800149e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7c5b      	ldrb	r3, [r3, #17]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d108      	bne.n	80014ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699a      	ldr	r2, [r3, #24]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	e007      	b.n	80014ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80014c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7c9b      	ldrb	r3, [r3, #18]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014e0:	619a      	str	r2, [r3, #24]
 80014e2:	e007      	b.n	80014f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80014f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001518:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0210 	bic.w	r2, r2, #16
 8001528:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d108      	bne.n	8001544 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0204 	orr.w	r2, r2, #4
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	e02c      	b.n	800159e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d028      	beq.n	800159e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d01c      	beq.n	800158e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001562:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0210 	orr.w	r2, r2, #16
 8001572:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d110      	bne.n	800159e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0220 	orr.w	r2, r2, #32
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	e007      	b.n	800159e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0220 	orr.w	r2, r2, #32
 800159c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	3b01      	subs	r3, #1
 80015c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80015d2:	d115      	bne.n	8001600 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	3b01      	subs	r3, #1
 80015e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	3b01      	subs	r3, #1
 80015ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	3b01      	subs	r3, #1
 80015f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fbfc 	bl	8001e14 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40006400 	.word	0x40006400
 8001640:	40006500 	.word	0x40006500

08001644 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d110      	bne.n	800167a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e006      	b.n	8001688 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	f043 0204 	orr.w	r2, r3, #4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
  }
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d12c      	bne.n	8001706 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e023      	b.n	8001714 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fbec 	bl	8001ec0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80016f8:	2201      	movs	r2, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e006      	b.n	8001714 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	f043 0208 	orr.w	r2, r3, #8
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800171c:	b480      	push	{r7}
 800171e:	b08b      	sub	sp, #44	@ 0x2c
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001734:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001736:	7efb      	ldrb	r3, [r7, #27]
 8001738:	2b02      	cmp	r3, #2
 800173a:	f040 80e8 	bne.w	800190e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b40      	cmp	r3, #64	@ 0x40
 8001742:	d137      	bne.n	80017b4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001758:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0db      	b.n	800191c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176c:	0e1b      	lsrs	r3, r3, #24
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10a      	bne.n	800178c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800177e:	0a5b      	lsrs	r3, r3, #9
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001788:	2301      	movs	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b2:	e036      	b.n	8001822 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0a3      	b.n	800191c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017dc:	0e1b      	lsrs	r3, r3, #24
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10a      	bne.n	80017fc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d107      	bne.n	8001846 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0c9b      	lsrs	r3, r3, #18
 800183c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e005      	b.n	8001852 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	3304      	adds	r3, #4
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	f003 020f 	and.w	r2, r3, #15
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0e1b      	lsrs	r3, r3, #24
 80018a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0fda      	lsrs	r2, r3, #31
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	3304      	adds	r3, #4
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
 80018c6:	e00a      	b.n	80018de <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	441a      	add	r2, r3
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	440b      	add	r3, r1
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	3301      	adds	r3, #1
 80018dc:	623b      	str	r3, [r7, #32]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	4a11      	ldr	r2, [pc, #68]	@ (8001928 <HAL_FDCAN_GetRxMessage+0x20c>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	461a      	mov	r2, r3
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d3ec      	bcc.n	80018c8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b40      	cmp	r3, #64	@ 0x40
 80018f2:	d105      	bne.n	8001900 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80018fe:	e004      	b.n	800190a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e006      	b.n	800191c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001912:	f043 0208 	orr.w	r2, r3, #8
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
  }
}
 800191c:	4618      	mov	r0, r3
 800191e:	372c      	adds	r7, #44	@ 0x2c
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	08005350 	.word	0x08005350

0800192c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800193e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d003      	beq.n	800194e <HAL_FDCAN_ActivateNotification+0x22>
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f040 80c8 	bne.w	8001ade <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d03b      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d031      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d027      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01d      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d013      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f003 0320 	and.w	r3, r3, #32
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00c      	beq.n	80019f2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d13b      	bne.n	8001a7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d131      	bne.n	8001a7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d127      	bne.n	8001a7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d11d      	bne.n	8001a7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d113      	bne.n	8001a7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00c      	beq.n	8001a8e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0202 	orr.w	r2, r2, #2
 8001a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e006      	b.n	8001aec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	f043 0202 	orr.w	r2, r3, #2
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
  }
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b06:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b14:	4013      	ands	r3, r2
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b44:	4013      	ands	r3, r2
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b4e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001b52:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b66:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b6a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b86:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2240      	movs	r2, #64	@ 0x40
 8001ba2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f916 	bl	8001dd6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d019      	beq.n	8001be8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d014      	beq.n	8001be8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bc6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bde:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001be0:	6939      	ldr	r1, [r7, #16]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8d8 	bl	8001d98 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bf4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f8a2 	bl	8001d42 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c0a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fe54 	bl	80008bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c20:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f897 	bl	8001d58 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00c      	beq.n	8001c4e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c46:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f890 	bl	8001d6e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d018      	beq.n	8001c8a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d013      	beq.n	8001c8a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c6a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4013      	ands	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2280      	movs	r2, #128	@ 0x80
 8001c80:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f87c 	bl	8001d82 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00c      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f880 	bl	8001dae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f878 	bl	8001dc2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00f      	beq.n	8001cfc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d0a:	69f9      	ldr	r1, [r7, #28]
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f876 	bl	8001dfe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a3a      	ldr	r2, [r7, #32]
 8001d1e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f858 	bl	8001dea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3730      	adds	r7, #48	@ 0x30
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001e1e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e2e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e54:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e005      	b.n	8001ea2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3f3      	bcc.n	8001e96 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	4000a400 	.word	0x4000a400

08001ec0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10a      	bne.n	8001eec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001ede:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e00a      	b.n	8001f02 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ef4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001efa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001efc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f00:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f0c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f12:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f18:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e020      	b.n	8001f96 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3303      	adds	r3, #3
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3302      	adds	r3, #2
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	440b      	add	r3, r1
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f6c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	440b      	add	r3, r1
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f7a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	440a      	add	r2, r1
 8001f82:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f84:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3304      	adds	r3, #4
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <FDCAN_CopyMessageToRAM+0xf4>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d3d6      	bcc.n	8001f54 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	3724      	adds	r7, #36	@ 0x24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	08005350 	.word	0x08005350

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fc6:	e15a      	b.n	800227e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 814c 	beq.w	8002278 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d005      	beq.n	8001ff8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d130      	bne.n	800205a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202e:	2201      	movs	r2, #1
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 0201 	and.w	r2, r3, #1
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b03      	cmp	r3, #3
 8002064:	d017      	beq.n	8002096 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d123      	bne.n	80020ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	08da      	lsrs	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3208      	adds	r2, #8
 80020e4:	6939      	ldr	r1, [r7, #16]
 80020e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0203 	and.w	r2, r3, #3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80a6 	beq.w	8002278 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	4b5b      	ldr	r3, [pc, #364]	@ (800229c <HAL_GPIO_Init+0x2e4>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002130:	4a5a      	ldr	r2, [pc, #360]	@ (800229c <HAL_GPIO_Init+0x2e4>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6613      	str	r3, [r2, #96]	@ 0x60
 8002138:	4b58      	ldr	r3, [pc, #352]	@ (800229c <HAL_GPIO_Init+0x2e4>)
 800213a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002144:	4a56      	ldr	r2, [pc, #344]	@ (80022a0 <HAL_GPIO_Init+0x2e8>)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800216e:	d01f      	beq.n	80021b0 <HAL_GPIO_Init+0x1f8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a4c      	ldr	r2, [pc, #304]	@ (80022a4 <HAL_GPIO_Init+0x2ec>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d019      	beq.n	80021ac <HAL_GPIO_Init+0x1f4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a4b      	ldr	r2, [pc, #300]	@ (80022a8 <HAL_GPIO_Init+0x2f0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_GPIO_Init+0x1f0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4a      	ldr	r2, [pc, #296]	@ (80022ac <HAL_GPIO_Init+0x2f4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00d      	beq.n	80021a4 <HAL_GPIO_Init+0x1ec>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a49      	ldr	r2, [pc, #292]	@ (80022b0 <HAL_GPIO_Init+0x2f8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0x1e8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a48      	ldr	r2, [pc, #288]	@ (80022b4 <HAL_GPIO_Init+0x2fc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_GPIO_Init+0x1e4>
 8002198:	2305      	movs	r3, #5
 800219a:	e00a      	b.n	80021b2 <HAL_GPIO_Init+0x1fa>
 800219c:	2306      	movs	r3, #6
 800219e:	e008      	b.n	80021b2 <HAL_GPIO_Init+0x1fa>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_Init+0x1fa>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_Init+0x1fa>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x1fa>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_Init+0x1fa>
 80021b0:	2300      	movs	r3, #0
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c2:	4937      	ldr	r1, [pc, #220]	@ (80022a0 <HAL_GPIO_Init+0x2e8>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d0:	4b39      	ldr	r3, [pc, #228]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021f4:	4a30      	ldr	r2, [pc, #192]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021fa:	4b2f      	ldr	r3, [pc, #188]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800221e:	4a26      	ldr	r2, [pc, #152]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002224:	4b24      	ldr	r3, [pc, #144]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002248:	4a1b      	ldr	r2, [pc, #108]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800224e:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002272:	4a11      	ldr	r2, [pc, #68]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f ae9d 	bne.w	8001fc8 <HAL_GPIO_Init+0x10>
  }
}
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	48000400 	.word	0x48000400
 80022a8:	48000800 	.word	0x48000800
 80022ac:	48000c00 	.word	0x48000c00
 80022b0:	48001000 	.word	0x48001000
 80022b4:	48001400 	.word	0x48001400
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d141      	bne.n	800237e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002306:	d131      	bne.n	800236c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002308:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800230e:	4a46      	ldr	r2, [pc, #280]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002318:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002320:	4a41      	ldr	r2, [pc, #260]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002328:	4b40      	ldr	r3, [pc, #256]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2232      	movs	r2, #50	@ 0x32
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	4a3f      	ldr	r2, [pc, #252]	@ (8002430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	3301      	adds	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233e:	e002      	b.n	8002346 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3b01      	subs	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002346:	4b38      	ldr	r3, [pc, #224]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002352:	d102      	bne.n	800235a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f2      	bne.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800235a:	4b33      	ldr	r3, [pc, #204]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002366:	d158      	bne.n	800241a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e057      	b.n	800241c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800236c:	4b2e      	ldr	r3, [pc, #184]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002372:	4a2d      	ldr	r2, [pc, #180]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800237c:	e04d      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002384:	d141      	bne.n	800240a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002386:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002392:	d131      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002394:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800239a:	4a23      	ldr	r2, [pc, #140]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a4:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2232      	movs	r2, #50	@ 0x32
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	4a1c      	ldr	r2, [pc, #112]	@ (8002430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	3301      	adds	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ca:	e002      	b.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023de:	d102      	bne.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f2      	bne.n	80023cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f2:	d112      	bne.n	800241a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e011      	b.n	800241c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002408:	e007      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002418:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40007000 	.word	0x40007000
 800242c:	20000000 	.word	0x20000000
 8002430:	431bde83 	.word	0x431bde83

08002434 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800243e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002442:	6093      	str	r3, [r2, #8]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e2fe      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d075      	beq.n	800255e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b97      	ldr	r3, [pc, #604]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247c:	4b94      	ldr	r3, [pc, #592]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b0c      	cmp	r3, #12
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x3e>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d002      	beq.n	8002498 <HAL_RCC_OscConfig+0x44>
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b8d      	ldr	r3, [pc, #564]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05b      	beq.n	800255c <HAL_RCC_OscConfig+0x108>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d157      	bne.n	800255c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e2d9      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x74>
 80024ba:	4b85      	ldr	r3, [pc, #532]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a84      	ldr	r2, [pc, #528]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b7f      	ldr	r3, [pc, #508]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7e      	ldr	r2, [pc, #504]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b7c      	ldr	r3, [pc, #496]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7b      	ldr	r2, [pc, #492]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024ec:	4b78      	ldr	r3, [pc, #480]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a77      	ldr	r2, [pc, #476]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b75      	ldr	r3, [pc, #468]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a74      	ldr	r2, [pc, #464]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe fe02 	bl	8001114 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fdfe 	bl	8001114 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	@ 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e29e      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002526:	4b6a      	ldr	r3, [pc, #424]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xc0>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fdee 	bl	8001114 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fdea 	bl	8001114 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	@ 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e28a      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254e:	4b60      	ldr	r3, [pc, #384]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0xe8>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	4b56      	ldr	r3, [pc, #344]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d102      	bne.n	800258a <HAL_RCC_OscConfig+0x136>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d002      	beq.n	8002590 <HAL_RCC_OscConfig+0x13c>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d11f      	bne.n	80025d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002590:	4b4f      	ldr	r3, [pc, #316]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x154>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e25d      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b49      	ldr	r3, [pc, #292]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	4946      	ldr	r1, [pc, #280]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025bc:	4b45      	ldr	r3, [pc, #276]	@ (80026d4 <HAL_RCC_OscConfig+0x280>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fd5b 	bl	800107c <HAL_InitTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d043      	beq.n	8002654 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e249      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d023      	beq.n	8002620 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d8:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3c      	ldr	r2, [pc, #240]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fd96 	bl	8001114 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ec:	f7fe fd92 	bl	8001114 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e232      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fe:	4b34      	ldr	r3, [pc, #208]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	492d      	ldr	r1, [pc, #180]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
 800261e:	e01a      	b.n	8002656 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2a      	ldr	r2, [pc, #168]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002626:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fd72 	bl	8001114 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002634:	f7fe fd6e 	bl	8001114 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e20e      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002646:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x1e0>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d041      	beq.n	80026e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266a:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800266c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002670:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe fd4b 	bl	8001114 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002682:	f7fe fd47 	bl	8001114 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1e7      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0ef      	beq.n	8002682 <HAL_RCC_OscConfig+0x22e>
 80026a2:	e020      	b.n	80026e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026aa:	4a09      	ldr	r2, [pc, #36]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe fd2e 	bl	8001114 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ba:	e00d      	b.n	80026d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe fd2a 	bl	8001114 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d906      	bls.n	80026d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1ca      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026d8:	4b8c      	ldr	r3, [pc, #560]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80026da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ea      	bne.n	80026bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80a6 	beq.w	8002840 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026f8:	4b84      	ldr	r3, [pc, #528]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_OscConfig+0x2b4>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x2b6>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b7f      	ldr	r3, [pc, #508]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	4a7e      	ldr	r2, [pc, #504]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
 800271a:	4b7c      	ldr	r3, [pc, #496]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	4b79      	ldr	r3, [pc, #484]	@ (8002910 <HAL_RCC_OscConfig+0x4bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002736:	4b76      	ldr	r3, [pc, #472]	@ (8002910 <HAL_RCC_OscConfig+0x4bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a75      	ldr	r2, [pc, #468]	@ (8002910 <HAL_RCC_OscConfig+0x4bc>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7fe fce7 	bl	8001114 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7fe fce3 	bl	8001114 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e183      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275c:	4b6c      	ldr	r3, [pc, #432]	@ (8002910 <HAL_RCC_OscConfig+0x4bc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d108      	bne.n	8002782 <HAL_RCC_OscConfig+0x32e>
 8002770:	4b66      	ldr	r3, [pc, #408]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	4a65      	ldr	r2, [pc, #404]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002780:	e024      	b.n	80027cc <HAL_RCC_OscConfig+0x378>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d110      	bne.n	80027ac <HAL_RCC_OscConfig+0x358>
 800278a:	4b60      	ldr	r3, [pc, #384]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002790:	4a5e      	ldr	r2, [pc, #376]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800279a:	4b5c      	ldr	r3, [pc, #368]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a0:	4a5a      	ldr	r2, [pc, #360]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027aa:	e00f      	b.n	80027cc <HAL_RCC_OscConfig+0x378>
 80027ac:	4b57      	ldr	r3, [pc, #348]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	4a56      	ldr	r2, [pc, #344]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027bc:	4b53      	ldr	r3, [pc, #332]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	4a52      	ldr	r2, [pc, #328]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d016      	beq.n	8002802 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fc9e 	bl	8001114 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe fc9a 	bl	8001114 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e138      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f2:	4b46      	ldr	r3, [pc, #280]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ed      	beq.n	80027dc <HAL_RCC_OscConfig+0x388>
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fc87 	bl	8001114 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fc83 	bl	8001114 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e121      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002820:	4b3a      	ldr	r3, [pc, #232]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ed      	bne.n	800280a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800282e:	7ffb      	ldrb	r3, [r7, #31]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b35      	ldr	r3, [pc, #212]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	4a34      	ldr	r2, [pc, #208]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d03c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002854:	4b2d      	ldr	r3, [pc, #180]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800285a:	4a2c      	ldr	r2, [pc, #176]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fc56 	bl	8001114 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286c:	f7fe fc52 	bl	8001114 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0f2      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800287e:	4b23      	ldr	r3, [pc, #140]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ef      	beq.n	800286c <HAL_RCC_OscConfig+0x418>
 800288c:	e01b      	b.n	80028c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800288e:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002890:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002894:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe fc39 	bl	8001114 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a6:	f7fe fc35 	bl	8001114 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0d5      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028b8:	4b14      	ldr	r3, [pc, #80]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80028ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1ef      	bne.n	80028a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80c9 	beq.w	8002a62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d0:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b0c      	cmp	r3, #12
 80028da:	f000 8083 	beq.w	80029e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d15e      	bne.n	80029a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a08      	ldr	r2, [pc, #32]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80028ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe fc0f 	bl	8001114 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	e00c      	b.n	8002914 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe fc0b 	bl	8001114 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d905      	bls.n	8002914 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0ab      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	4b55      	ldr	r3, [pc, #340]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ec      	bne.n	80028fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b52      	ldr	r3, [pc, #328]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4b52      	ldr	r3, [pc, #328]	@ (8002a70 <HAL_RCC_OscConfig+0x61c>)
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6a11      	ldr	r1, [r2, #32]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002930:	3a01      	subs	r2, #1
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800293a:	0212      	lsls	r2, r2, #8
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002942:	0852      	lsrs	r2, r2, #1
 8002944:	3a01      	subs	r2, #1
 8002946:	0552      	lsls	r2, r2, #21
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	3a01      	subs	r2, #1
 8002952:	0652      	lsls	r2, r2, #25
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800295a:	06d2      	lsls	r2, r2, #27
 800295c:	430a      	orrs	r2, r1
 800295e:	4943      	ldr	r1, [pc, #268]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a40      	ldr	r2, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002970:	4b3e      	ldr	r3, [pc, #248]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a3d      	ldr	r2, [pc, #244]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800297a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fbca 	bl	8001114 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fbc6 	bl	8001114 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e066      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b35      	ldr	r3, [pc, #212]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x530>
 80029a2:	e05e      	b.n	8002a62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a30      	ldr	r2, [pc, #192]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fbb0 	bl	8001114 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fbac 	bl	8001114 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e04c      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ca:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80029d6:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4924      	ldr	r1, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029dc:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <HAL_RCC_OscConfig+0x620>)
 80029de:	4013      	ands	r3, r2
 80029e0:	60cb      	str	r3, [r1, #12]
 80029e2:	e03e      	b.n	8002a62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e039      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d12c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d123      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d11b      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d113      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	3b01      	subs	r3, #1
 8002a44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	3b01      	subs	r3, #1
 8002a58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	019f800c 	.word	0x019f800c
 8002a74:	feeefffc 	.word	0xfeeefffc

08002a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e11e      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b91      	ldr	r3, [pc, #580]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d910      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 020f 	bic.w	r2, r3, #15
 8002aa6:	498c      	ldr	r1, [pc, #560]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b8a      	ldr	r3, [pc, #552]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e106      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d073      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d129      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad4:	4b81      	ldr	r3, [pc, #516]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0f4      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ae4:	f000 f99e 	bl	8002e24 <RCC_GetSysClockFreqFromPLLSource>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce0 <HAL_RCC_ClockConfig+0x268>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d93f      	bls.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002af2:	4b7a      	ldr	r3, [pc, #488]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d033      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d12f      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b12:	4b72      	ldr	r3, [pc, #456]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b1a:	4a70      	ldr	r2, [pc, #448]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e024      	b.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b30:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0c6      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b40:	4b66      	ldr	r3, [pc, #408]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0be      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b50:	f000 f8ce 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4a61      	ldr	r2, [pc, #388]	@ (8002ce0 <HAL_RCC_ClockConfig+0x268>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d909      	bls.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b66:	4a5d      	ldr	r2, [pc, #372]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b5a      	ldr	r3, [pc, #360]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4957      	ldr	r1, [pc, #348]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fac6 	bl	8001114 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fac2 	bl	8001114 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e095      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d023      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bcc:	4b43      	ldr	r3, [pc, #268]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a42      	ldr	r2, [pc, #264]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bd6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002be4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002bec:	4a3b      	ldr	r2, [pc, #236]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002bee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4936      	ldr	r1, [pc, #216]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b80      	cmp	r3, #128	@ 0x80
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c0e:	4b33      	ldr	r3, [pc, #204]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4a32      	ldr	r2, [pc, #200]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d21d      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c28:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 020f 	bic.w	r2, r3, #15
 8002c30:	4929      	ldr	r1, [pc, #164]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c38:	f7fe fa6c 	bl	8001114 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fa68 	bl	8001114 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e03b      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1ed      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4917      	ldr	r1, [pc, #92]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490f      	ldr	r1, [pc, #60]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ca2:	f000 f825 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490c      	ldr	r1, [pc, #48]	@ (8002ce4 <HAL_RCC_ClockConfig+0x26c>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <HAL_RCC_ClockConfig+0x270>)
 8002cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <HAL_RCC_ClockConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f9d8 	bl	800107c <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	04c4b400 	.word	0x04c4b400
 8002ce4:	08005338 	.word	0x08005338
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d02:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e047      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d08:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d102      	bne.n	8002d1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d14:	4b26      	ldr	r3, [pc, #152]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e03e      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d1a:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d136      	bne.n	8002d94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d26:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d44:	4a1a      	ldr	r2, [pc, #104]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	4a16      	ldr	r2, [pc, #88]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4e:	68d2      	ldr	r2, [r2, #12]
 8002d50:	0a12      	lsrs	r2, r2, #8
 8002d52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5e:	4a13      	ldr	r2, [pc, #76]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4a10      	ldr	r2, [pc, #64]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d68:	68d2      	ldr	r2, [r2, #12]
 8002d6a:	0a12      	lsrs	r2, r2, #8
 8002d6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
      break;
 8002d76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0e5b      	lsrs	r3, r3, #25
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	e001      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d98:	693b      	ldr	r3, [r7, #16]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000000 	.word	0x20000000

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4904      	ldr	r1, [pc, #16]	@ (8002df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08005348 	.word	0x08005348

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dfc:	f7ff ffda 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0adb      	lsrs	r3, r3, #11
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4904      	ldr	r1, [pc, #16]	@ (8002e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	08005348 	.word	0x08005348

08002e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d10c      	bne.n	8002e62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e48:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e52:	68d2      	ldr	r2, [r2, #12]
 8002e54:	0a12      	lsrs	r2, r2, #8
 8002e56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
    break;
 8002e60:	e00c      	b.n	8002e7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e62:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	0a12      	lsrs	r2, r2, #8
 8002e70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
    break;
 8002e7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0e5b      	lsrs	r3, r3, #25
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e96:	687b      	ldr	r3, [r7, #4]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	007a1200 	.word	0x007a1200
 8002eac:	00f42400 	.word	0x00f42400

08002eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb8:	2300      	movs	r3, #0
 8002eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8098 	beq.w	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed2:	4b43      	ldr	r3, [pc, #268]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	4b40      	ldr	r3, [pc, #256]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eea:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efa:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a39      	ldr	r2, [pc, #228]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f06:	f7fe f905 	bl	8001114 <HAL_GetTick>
 8002f0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0c:	e009      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0e:	f7fe f901 	bl	8001114 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d902      	bls.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	74fb      	strb	r3, [r7, #19]
        break;
 8002f20:	e005      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f22:	4b30      	ldr	r3, [pc, #192]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ef      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d159      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f34:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01e      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d019      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f50:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f5c:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f72:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f7c:	4a18      	ldr	r2, [pc, #96]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe f8c1 	bl	8001114 <HAL_GetTick>
 8002f92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f94:	e00b      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe f8bd 	bl	8001114 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d902      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	74fb      	strb	r3, [r7, #19]
            break;
 8002fac:	e006      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fae:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ec      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc2:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	4903      	ldr	r1, [pc, #12]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	74bb      	strb	r3, [r7, #18]
 8002fde:	e005      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fec:	7c7b      	ldrb	r3, [r7, #17]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4ba6      	ldr	r3, [pc, #664]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	4aa5      	ldr	r2, [pc, #660]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800300a:	4ba0      	ldr	r3, [pc, #640]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003010:	f023 0203 	bic.w	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	499c      	ldr	r1, [pc, #624]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800302c:	4b97      	ldr	r3, [pc, #604]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	f023 020c 	bic.w	r2, r3, #12
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4994      	ldr	r1, [pc, #592]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800304e:	4b8f      	ldr	r3, [pc, #572]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003054:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	498b      	ldr	r1, [pc, #556]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003070:	4b86      	ldr	r3, [pc, #536]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	4983      	ldr	r1, [pc, #524]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003092:	4b7e      	ldr	r3, [pc, #504]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003098:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	497a      	ldr	r1, [pc, #488]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b4:	4b75      	ldr	r3, [pc, #468]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	4972      	ldr	r1, [pc, #456]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d6:	4b6d      	ldr	r3, [pc, #436]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4969      	ldr	r1, [pc, #420]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f8:	4b64      	ldr	r3, [pc, #400]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4961      	ldr	r1, [pc, #388]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800311a:	4b5c      	ldr	r3, [pc, #368]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003120:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	4958      	ldr	r1, [pc, #352]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	4950      	ldr	r1, [pc, #320]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800315a:	d105      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315c:	4b4b      	ldr	r3, [pc, #300]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a4a      	ldr	r2, [pc, #296]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003166:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003174:	4b45      	ldr	r3, [pc, #276]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	4942      	ldr	r1, [pc, #264]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003192:	d105      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4b3d      	ldr	r3, [pc, #244]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a3c      	ldr	r2, [pc, #240]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031ac:	4b37      	ldr	r3, [pc, #220]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	4934      	ldr	r1, [pc, #208]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031ca:	d105      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031cc:	4b2f      	ldr	r3, [pc, #188]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a2e      	ldr	r2, [pc, #184]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031e4:	4b29      	ldr	r3, [pc, #164]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f2:	4926      	ldr	r1, [pc, #152]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003202:	d105      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003204:	4b21      	ldr	r3, [pc, #132]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a20      	ldr	r2, [pc, #128]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800320e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800321c:	4b1b      	ldr	r3, [pc, #108]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322a:	4918      	ldr	r1, [pc, #96]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800323a:	d105      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800323c:	4b13      	ldr	r3, [pc, #76]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a12      	ldr	r2, [pc, #72]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003254:	4b0d      	ldr	r3, [pc, #52]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	490a      	ldr	r1, [pc, #40]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003272:	d105      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a04      	ldr	r2, [pc, #16]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003280:	7cbb      	ldrb	r3, [r7, #18]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000

08003290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e042      	b.n	8003328 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7fd fe47 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2224      	movs	r2, #36	@ 0x24
 80032be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fb82 	bl	80039e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f8b3 	bl	800344c <UART_SetConfig>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e01b      	b.n	8003328 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800330e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fc01 	bl	8003b28 <UART_CheckIdleState>
 8003326:	4603      	mov	r3, r0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	2b20      	cmp	r3, #32
 8003348:	d17b      	bne.n	8003442 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_UART_Transmit+0x26>
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e074      	b.n	8003444 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2221      	movs	r2, #33	@ 0x21
 8003366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800336a:	f7fd fed3 	bl	8001114 <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	88fa      	ldrh	r2, [r7, #6]
 8003374:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003388:	d108      	bne.n	800339c <HAL_UART_Transmit+0x6c>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e003      	b.n	80033a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a4:	e030      	b.n	8003408 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	@ 0x80
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fc63 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e03d      	b.n	8003444 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3302      	adds	r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e007      	b.n	80033f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1c8      	bne.n	80033a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2200      	movs	r2, #0
 800341c:	2140      	movs	r1, #64	@ 0x40
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fc2c 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e006      	b.n	8003444 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b08c      	sub	sp, #48	@ 0x30
 8003452:	af00      	add	r7, sp, #0
 8003454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	431a      	orrs	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4bab      	ldr	r3, [pc, #684]	@ (8003728 <UART_SetConfig+0x2dc>)
 800347c:	4013      	ands	r3, r2
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003484:	430b      	orrs	r3, r1
 8003486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4aa0      	ldr	r2, [pc, #640]	@ (800372c <UART_SetConfig+0x2e0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034b4:	4313      	orrs	r3, r2
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80034c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	f023 010f 	bic.w	r1, r3, #15
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a91      	ldr	r2, [pc, #580]	@ (8003730 <UART_SetConfig+0x2e4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d125      	bne.n	800353c <UART_SetConfig+0xf0>
 80034f0:	4b90      	ldr	r3, [pc, #576]	@ (8003734 <UART_SetConfig+0x2e8>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d81a      	bhi.n	8003534 <UART_SetConfig+0xe8>
 80034fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <UART_SetConfig+0xb8>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003515 	.word	0x08003515
 8003508:	08003525 	.word	0x08003525
 800350c:	0800351d 	.word	0x0800351d
 8003510:	0800352d 	.word	0x0800352d
 8003514:	2301      	movs	r3, #1
 8003516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351a:	e0d6      	b.n	80036ca <UART_SetConfig+0x27e>
 800351c:	2302      	movs	r3, #2
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003522:	e0d2      	b.n	80036ca <UART_SetConfig+0x27e>
 8003524:	2304      	movs	r3, #4
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352a:	e0ce      	b.n	80036ca <UART_SetConfig+0x27e>
 800352c:	2308      	movs	r3, #8
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003532:	e0ca      	b.n	80036ca <UART_SetConfig+0x27e>
 8003534:	2310      	movs	r3, #16
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353a:	e0c6      	b.n	80036ca <UART_SetConfig+0x27e>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a7d      	ldr	r2, [pc, #500]	@ (8003738 <UART_SetConfig+0x2ec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d138      	bne.n	80035b8 <UART_SetConfig+0x16c>
 8003546:	4b7b      	ldr	r3, [pc, #492]	@ (8003734 <UART_SetConfig+0x2e8>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d82d      	bhi.n	80035b0 <UART_SetConfig+0x164>
 8003554:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <UART_SetConfig+0x110>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003591 	.word	0x08003591
 8003560:	080035b1 	.word	0x080035b1
 8003564:	080035b1 	.word	0x080035b1
 8003568:	080035b1 	.word	0x080035b1
 800356c:	080035a1 	.word	0x080035a1
 8003570:	080035b1 	.word	0x080035b1
 8003574:	080035b1 	.word	0x080035b1
 8003578:	080035b1 	.word	0x080035b1
 800357c:	08003599 	.word	0x08003599
 8003580:	080035b1 	.word	0x080035b1
 8003584:	080035b1 	.word	0x080035b1
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035a9 	.word	0x080035a9
 8003590:	2300      	movs	r3, #0
 8003592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003596:	e098      	b.n	80036ca <UART_SetConfig+0x27e>
 8003598:	2302      	movs	r3, #2
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359e:	e094      	b.n	80036ca <UART_SetConfig+0x27e>
 80035a0:	2304      	movs	r3, #4
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a6:	e090      	b.n	80036ca <UART_SetConfig+0x27e>
 80035a8:	2308      	movs	r3, #8
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ae:	e08c      	b.n	80036ca <UART_SetConfig+0x27e>
 80035b0:	2310      	movs	r3, #16
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035b6:	e088      	b.n	80036ca <UART_SetConfig+0x27e>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5f      	ldr	r2, [pc, #380]	@ (800373c <UART_SetConfig+0x2f0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d125      	bne.n	800360e <UART_SetConfig+0x1c2>
 80035c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003734 <UART_SetConfig+0x2e8>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035cc:	2b30      	cmp	r3, #48	@ 0x30
 80035ce:	d016      	beq.n	80035fe <UART_SetConfig+0x1b2>
 80035d0:	2b30      	cmp	r3, #48	@ 0x30
 80035d2:	d818      	bhi.n	8003606 <UART_SetConfig+0x1ba>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d00a      	beq.n	80035ee <UART_SetConfig+0x1a2>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d814      	bhi.n	8003606 <UART_SetConfig+0x1ba>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <UART_SetConfig+0x19a>
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d008      	beq.n	80035f6 <UART_SetConfig+0x1aa>
 80035e4:	e00f      	b.n	8003606 <UART_SetConfig+0x1ba>
 80035e6:	2300      	movs	r3, #0
 80035e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ec:	e06d      	b.n	80036ca <UART_SetConfig+0x27e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f4:	e069      	b.n	80036ca <UART_SetConfig+0x27e>
 80035f6:	2304      	movs	r3, #4
 80035f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fc:	e065      	b.n	80036ca <UART_SetConfig+0x27e>
 80035fe:	2308      	movs	r3, #8
 8003600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003604:	e061      	b.n	80036ca <UART_SetConfig+0x27e>
 8003606:	2310      	movs	r3, #16
 8003608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800360c:	e05d      	b.n	80036ca <UART_SetConfig+0x27e>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4b      	ldr	r2, [pc, #300]	@ (8003740 <UART_SetConfig+0x2f4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d125      	bne.n	8003664 <UART_SetConfig+0x218>
 8003618:	4b46      	ldr	r3, [pc, #280]	@ (8003734 <UART_SetConfig+0x2e8>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003622:	2bc0      	cmp	r3, #192	@ 0xc0
 8003624:	d016      	beq.n	8003654 <UART_SetConfig+0x208>
 8003626:	2bc0      	cmp	r3, #192	@ 0xc0
 8003628:	d818      	bhi.n	800365c <UART_SetConfig+0x210>
 800362a:	2b80      	cmp	r3, #128	@ 0x80
 800362c:	d00a      	beq.n	8003644 <UART_SetConfig+0x1f8>
 800362e:	2b80      	cmp	r3, #128	@ 0x80
 8003630:	d814      	bhi.n	800365c <UART_SetConfig+0x210>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <UART_SetConfig+0x1f0>
 8003636:	2b40      	cmp	r3, #64	@ 0x40
 8003638:	d008      	beq.n	800364c <UART_SetConfig+0x200>
 800363a:	e00f      	b.n	800365c <UART_SetConfig+0x210>
 800363c:	2300      	movs	r3, #0
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003642:	e042      	b.n	80036ca <UART_SetConfig+0x27e>
 8003644:	2302      	movs	r3, #2
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364a:	e03e      	b.n	80036ca <UART_SetConfig+0x27e>
 800364c:	2304      	movs	r3, #4
 800364e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003652:	e03a      	b.n	80036ca <UART_SetConfig+0x27e>
 8003654:	2308      	movs	r3, #8
 8003656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800365a:	e036      	b.n	80036ca <UART_SetConfig+0x27e>
 800365c:	2310      	movs	r3, #16
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003662:	e032      	b.n	80036ca <UART_SetConfig+0x27e>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a30      	ldr	r2, [pc, #192]	@ (800372c <UART_SetConfig+0x2e0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d12a      	bne.n	80036c4 <UART_SetConfig+0x278>
 800366e:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <UART_SetConfig+0x2e8>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003674:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003678:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800367c:	d01a      	beq.n	80036b4 <UART_SetConfig+0x268>
 800367e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003682:	d81b      	bhi.n	80036bc <UART_SetConfig+0x270>
 8003684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003688:	d00c      	beq.n	80036a4 <UART_SetConfig+0x258>
 800368a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368e:	d815      	bhi.n	80036bc <UART_SetConfig+0x270>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <UART_SetConfig+0x250>
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003698:	d008      	beq.n	80036ac <UART_SetConfig+0x260>
 800369a:	e00f      	b.n	80036bc <UART_SetConfig+0x270>
 800369c:	2300      	movs	r3, #0
 800369e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a2:	e012      	b.n	80036ca <UART_SetConfig+0x27e>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036aa:	e00e      	b.n	80036ca <UART_SetConfig+0x27e>
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b2:	e00a      	b.n	80036ca <UART_SetConfig+0x27e>
 80036b4:	2308      	movs	r3, #8
 80036b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ba:	e006      	b.n	80036ca <UART_SetConfig+0x27e>
 80036bc:	2310      	movs	r3, #16
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c2:	e002      	b.n	80036ca <UART_SetConfig+0x27e>
 80036c4:	2310      	movs	r3, #16
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a17      	ldr	r2, [pc, #92]	@ (800372c <UART_SetConfig+0x2e0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	f040 80a8 	bne.w	8003826 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d834      	bhi.n	8003748 <UART_SetConfig+0x2fc>
 80036de:	a201      	add	r2, pc, #4	@ (adr r2, 80036e4 <UART_SetConfig+0x298>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	08003709 	.word	0x08003709
 80036e8:	08003749 	.word	0x08003749
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003749 	.word	0x08003749
 80036f4:	08003717 	.word	0x08003717
 80036f8:	08003749 	.word	0x08003749
 80036fc:	08003749 	.word	0x08003749
 8003700:	08003749 	.word	0x08003749
 8003704:	0800371f 	.word	0x0800371f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7ff fb60 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 800370c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800370e:	e021      	b.n	8003754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003710:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <UART_SetConfig+0x2f8>)
 8003712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003714:	e01e      	b.n	8003754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003716:	f7ff faeb 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 800371a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800371c:	e01a      	b.n	8003754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003724:	e016      	b.n	8003754 <UART_SetConfig+0x308>
 8003726:	bf00      	nop
 8003728:	cfff69f3 	.word	0xcfff69f3
 800372c:	40008000 	.word	0x40008000
 8003730:	40013800 	.word	0x40013800
 8003734:	40021000 	.word	0x40021000
 8003738:	40004400 	.word	0x40004400
 800373c:	40004800 	.word	0x40004800
 8003740:	40004c00 	.word	0x40004c00
 8003744:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 812a 	beq.w	80039b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	4a9e      	ldr	r2, [pc, #632]	@ (80039dc <UART_SetConfig+0x590>)
 8003762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003766:	461a      	mov	r2, r3
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	fbb3 f3f2 	udiv	r3, r3, r2
 800376e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	429a      	cmp	r2, r3
 800377e:	d305      	bcc.n	800378c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	429a      	cmp	r2, r3
 800378a:	d903      	bls.n	8003794 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003792:	e10d      	b.n	80039b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	2200      	movs	r2, #0
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	60fa      	str	r2, [r7, #12]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	4a8e      	ldr	r2, [pc, #568]	@ (80039dc <UART_SetConfig+0x590>)
 80037a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037b6:	f7fc fd83 	bl	80002c0 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	020b      	lsls	r3, r1, #8
 80037cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037d0:	0202      	lsls	r2, r0, #8
 80037d2:	6979      	ldr	r1, [r7, #20]
 80037d4:	6849      	ldr	r1, [r1, #4]
 80037d6:	0849      	lsrs	r1, r1, #1
 80037d8:	2000      	movs	r0, #0
 80037da:	460c      	mov	r4, r1
 80037dc:	4605      	mov	r5, r0
 80037de:	eb12 0804 	adds.w	r8, r2, r4
 80037e2:	eb43 0905 	adc.w	r9, r3, r5
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	469a      	mov	sl, r3
 80037ee:	4693      	mov	fp, r2
 80037f0:	4652      	mov	r2, sl
 80037f2:	465b      	mov	r3, fp
 80037f4:	4640      	mov	r0, r8
 80037f6:	4649      	mov	r1, r9
 80037f8:	f7fc fd62 	bl	80002c0 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800380a:	d308      	bcc.n	800381e <UART_SetConfig+0x3d2>
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003812:	d204      	bcs.n	800381e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	e0c8      	b.n	80039b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003824:	e0c4      	b.n	80039b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800382e:	d167      	bne.n	8003900 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003830:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003834:	2b08      	cmp	r3, #8
 8003836:	d828      	bhi.n	800388a <UART_SetConfig+0x43e>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <UART_SetConfig+0x3f4>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003865 	.word	0x08003865
 8003844:	0800386d 	.word	0x0800386d
 8003848:	08003875 	.word	0x08003875
 800384c:	0800388b 	.word	0x0800388b
 8003850:	0800387b 	.word	0x0800387b
 8003854:	0800388b 	.word	0x0800388b
 8003858:	0800388b 	.word	0x0800388b
 800385c:	0800388b 	.word	0x0800388b
 8003860:	08003883 	.word	0x08003883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7ff fab2 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800386a:	e014      	b.n	8003896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800386c:	f7ff fac4 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003872:	e010      	b.n	8003896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003874:	4b5a      	ldr	r3, [pc, #360]	@ (80039e0 <UART_SetConfig+0x594>)
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003878:	e00d      	b.n	8003896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387a:	f7ff fa39 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 800387e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003880:	e009      	b.n	8003896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003888:	e005      	b.n	8003896 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003894:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8089 	beq.w	80039b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	4a4e      	ldr	r2, [pc, #312]	@ (80039dc <UART_SetConfig+0x590>)
 80038a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80038b0:	005a      	lsls	r2, r3, #1
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	441a      	add	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	d916      	bls.n	80038f8 <UART_SetConfig+0x4ac>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d0:	d212      	bcs.n	80038f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f023 030f 	bic.w	r3, r3, #15
 80038da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	8bfb      	ldrh	r3, [r7, #30]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	8bfa      	ldrh	r2, [r7, #30]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	e05b      	b.n	80039b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038fe:	e057      	b.n	80039b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003900:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003904:	2b08      	cmp	r3, #8
 8003906:	d828      	bhi.n	800395a <UART_SetConfig+0x50e>
 8003908:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <UART_SetConfig+0x4c4>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003935 	.word	0x08003935
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003945 	.word	0x08003945
 800391c:	0800395b 	.word	0x0800395b
 8003920:	0800394b 	.word	0x0800394b
 8003924:	0800395b 	.word	0x0800395b
 8003928:	0800395b 	.word	0x0800395b
 800392c:	0800395b 	.word	0x0800395b
 8003930:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7ff fa4a 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800393a:	e014      	b.n	8003966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7ff fa5c 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003942:	e010      	b.n	8003966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <UART_SetConfig+0x594>)
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003948:	e00d      	b.n	8003966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7ff f9d1 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 800394e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003950:	e009      	b.n	8003966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003958:	e005      	b.n	8003966 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003964:	bf00      	nop
    }

    if (pclk != 0U)
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d021      	beq.n	80039b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <UART_SetConfig+0x590>)
 8003972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003976:	461a      	mov	r2, r3
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	fbb3 f2f2 	udiv	r2, r3, r2
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	441a      	add	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b0f      	cmp	r3, #15
 8003994:	d909      	bls.n	80039aa <UART_SetConfig+0x55e>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399c:	d205      	bcs.n	80039aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	e002      	b.n	80039b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2200      	movs	r2, #0
 80039c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2200      	movs	r2, #0
 80039ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80039cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3730      	adds	r7, #48	@ 0x30
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	08005360 	.word	0x08005360
 80039e0:	00f42400 	.word	0x00f42400

080039e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01a      	beq.n	8003afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ae2:	d10a      	bne.n	8003afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b098      	sub	sp, #96	@ 0x60
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b38:	f7fd faec 	bl	8001114 <HAL_GetTick>
 8003b3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d12f      	bne.n	8003bac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f88e 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d022      	beq.n	8003bac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e063      	b.n	8003c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d149      	bne.n	8003c4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f857 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d03c      	beq.n	8003c4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	623b      	str	r3, [r7, #32]
   return(result);
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e6      	bne.n	8003bd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3308      	adds	r3, #8
 8003c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c26:	61fa      	str	r2, [r7, #28]
 8003c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	617b      	str	r3, [r7, #20]
   return(result);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e012      	b.n	8003c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3758      	adds	r7, #88	@ 0x58
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	e04f      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d04b      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7fd fa3d 	bl	8001114 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e04e      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d037      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b80      	cmp	r3, #128	@ 0x80
 8003cc2:	d034      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d031      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d110      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f838 	bl	8003d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e029      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d08:	d111      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f81e 	bl	8003d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e00f      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d0a0      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b095      	sub	sp, #84	@ 0x54
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e6      	bne.n	8003d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e3      	bne.n	8003d90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d118      	bne.n	8003e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0310 	bic.w	r3, r3, #16
 8003de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6979      	ldr	r1, [r7, #20]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e6      	bne.n	8003dd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e16:	bf00      	nop
 8003e18:	3754      	adds	r7, #84	@ 0x54
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e027      	b.n	8003e88 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	@ 0x24
 8003e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003e66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e02d      	b.n	8003f08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f84f 	bl	8003f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e02d      	b.n	8003f84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	@ 0x24
 8003f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f811 	bl	8003f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003fac:	e031      	b.n	8004012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003fae:	2308      	movs	r3, #8
 8003fb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	0e5b      	lsrs	r3, r3, #25
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	0f5b      	lsrs	r3, r3, #29
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fd6:	7bbb      	ldrb	r3, [r7, #14]
 8003fd8:	7b3a      	ldrb	r2, [r7, #12]
 8003fda:	4911      	ldr	r1, [pc, #68]	@ (8004020 <UARTEx_SetNbDataToProcess+0x94>)
 8003fdc:	5c8a      	ldrb	r2, [r1, r2]
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fe2:	7b3a      	ldrb	r2, [r7, #12]
 8003fe4:	490f      	ldr	r1, [pc, #60]	@ (8004024 <UARTEx_SetNbDataToProcess+0x98>)
 8003fe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	7b7a      	ldrb	r2, [r7, #13]
 8003ff8:	4909      	ldr	r1, [pc, #36]	@ (8004020 <UARTEx_SetNbDataToProcess+0x94>)
 8003ffa:	5c8a      	ldrb	r2, [r1, r2]
 8003ffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004000:	7b7a      	ldrb	r2, [r7, #13]
 8004002:	4908      	ldr	r1, [pc, #32]	@ (8004024 <UARTEx_SetNbDataToProcess+0x98>)
 8004004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004006:	fb93 f3f2 	sdiv	r3, r3, r2
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	08005378 	.word	0x08005378
 8004024:	08005380 	.word	0x08005380

08004028 <std>:
 8004028:	2300      	movs	r3, #0
 800402a:	b510      	push	{r4, lr}
 800402c:	4604      	mov	r4, r0
 800402e:	e9c0 3300 	strd	r3, r3, [r0]
 8004032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004036:	6083      	str	r3, [r0, #8]
 8004038:	8181      	strh	r1, [r0, #12]
 800403a:	6643      	str	r3, [r0, #100]	@ 0x64
 800403c:	81c2      	strh	r2, [r0, #14]
 800403e:	6183      	str	r3, [r0, #24]
 8004040:	4619      	mov	r1, r3
 8004042:	2208      	movs	r2, #8
 8004044:	305c      	adds	r0, #92	@ 0x5c
 8004046:	f000 fa19 	bl	800447c <memset>
 800404a:	4b0d      	ldr	r3, [pc, #52]	@ (8004080 <std+0x58>)
 800404c:	6263      	str	r3, [r4, #36]	@ 0x24
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <std+0x5c>)
 8004050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <std+0x60>)
 8004054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004056:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <std+0x64>)
 8004058:	6323      	str	r3, [r4, #48]	@ 0x30
 800405a:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <std+0x68>)
 800405c:	6224      	str	r4, [r4, #32]
 800405e:	429c      	cmp	r4, r3
 8004060:	d006      	beq.n	8004070 <std+0x48>
 8004062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004066:	4294      	cmp	r4, r2
 8004068:	d002      	beq.n	8004070 <std+0x48>
 800406a:	33d0      	adds	r3, #208	@ 0xd0
 800406c:	429c      	cmp	r4, r3
 800406e:	d105      	bne.n	800407c <std+0x54>
 8004070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004078:	f000 ba78 	b.w	800456c <__retarget_lock_init_recursive>
 800407c:	bd10      	pop	{r4, pc}
 800407e:	bf00      	nop
 8004080:	0800428d 	.word	0x0800428d
 8004084:	080042af 	.word	0x080042af
 8004088:	080042e7 	.word	0x080042e7
 800408c:	0800430b 	.word	0x0800430b
 8004090:	200007d4 	.word	0x200007d4

08004094 <stdio_exit_handler>:
 8004094:	4a02      	ldr	r2, [pc, #8]	@ (80040a0 <stdio_exit_handler+0xc>)
 8004096:	4903      	ldr	r1, [pc, #12]	@ (80040a4 <stdio_exit_handler+0x10>)
 8004098:	4803      	ldr	r0, [pc, #12]	@ (80040a8 <stdio_exit_handler+0x14>)
 800409a:	f000 b869 	b.w	8004170 <_fwalk_sglue>
 800409e:	bf00      	nop
 80040a0:	2000000c 	.word	0x2000000c
 80040a4:	080050bd 	.word	0x080050bd
 80040a8:	2000001c 	.word	0x2000001c

080040ac <cleanup_stdio>:
 80040ac:	6841      	ldr	r1, [r0, #4]
 80040ae:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <cleanup_stdio+0x34>)
 80040b0:	4299      	cmp	r1, r3
 80040b2:	b510      	push	{r4, lr}
 80040b4:	4604      	mov	r4, r0
 80040b6:	d001      	beq.n	80040bc <cleanup_stdio+0x10>
 80040b8:	f001 f800 	bl	80050bc <_fflush_r>
 80040bc:	68a1      	ldr	r1, [r4, #8]
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <cleanup_stdio+0x38>)
 80040c0:	4299      	cmp	r1, r3
 80040c2:	d002      	beq.n	80040ca <cleanup_stdio+0x1e>
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 fff9 	bl	80050bc <_fflush_r>
 80040ca:	68e1      	ldr	r1, [r4, #12]
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <cleanup_stdio+0x3c>)
 80040ce:	4299      	cmp	r1, r3
 80040d0:	d004      	beq.n	80040dc <cleanup_stdio+0x30>
 80040d2:	4620      	mov	r0, r4
 80040d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d8:	f000 bff0 	b.w	80050bc <_fflush_r>
 80040dc:	bd10      	pop	{r4, pc}
 80040de:	bf00      	nop
 80040e0:	200007d4 	.word	0x200007d4
 80040e4:	2000083c 	.word	0x2000083c
 80040e8:	200008a4 	.word	0x200008a4

080040ec <global_stdio_init.part.0>:
 80040ec:	b510      	push	{r4, lr}
 80040ee:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <global_stdio_init.part.0+0x30>)
 80040f0:	4c0b      	ldr	r4, [pc, #44]	@ (8004120 <global_stdio_init.part.0+0x34>)
 80040f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004124 <global_stdio_init.part.0+0x38>)
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	4620      	mov	r0, r4
 80040f8:	2200      	movs	r2, #0
 80040fa:	2104      	movs	r1, #4
 80040fc:	f7ff ff94 	bl	8004028 <std>
 8004100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004104:	2201      	movs	r2, #1
 8004106:	2109      	movs	r1, #9
 8004108:	f7ff ff8e 	bl	8004028 <std>
 800410c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004110:	2202      	movs	r2, #2
 8004112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004116:	2112      	movs	r1, #18
 8004118:	f7ff bf86 	b.w	8004028 <std>
 800411c:	2000090c 	.word	0x2000090c
 8004120:	200007d4 	.word	0x200007d4
 8004124:	08004095 	.word	0x08004095

08004128 <__sfp_lock_acquire>:
 8004128:	4801      	ldr	r0, [pc, #4]	@ (8004130 <__sfp_lock_acquire+0x8>)
 800412a:	f000 ba20 	b.w	800456e <__retarget_lock_acquire_recursive>
 800412e:	bf00      	nop
 8004130:	20000915 	.word	0x20000915

08004134 <__sfp_lock_release>:
 8004134:	4801      	ldr	r0, [pc, #4]	@ (800413c <__sfp_lock_release+0x8>)
 8004136:	f000 ba1b 	b.w	8004570 <__retarget_lock_release_recursive>
 800413a:	bf00      	nop
 800413c:	20000915 	.word	0x20000915

08004140 <__sinit>:
 8004140:	b510      	push	{r4, lr}
 8004142:	4604      	mov	r4, r0
 8004144:	f7ff fff0 	bl	8004128 <__sfp_lock_acquire>
 8004148:	6a23      	ldr	r3, [r4, #32]
 800414a:	b11b      	cbz	r3, 8004154 <__sinit+0x14>
 800414c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004150:	f7ff bff0 	b.w	8004134 <__sfp_lock_release>
 8004154:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <__sinit+0x28>)
 8004156:	6223      	str	r3, [r4, #32]
 8004158:	4b04      	ldr	r3, [pc, #16]	@ (800416c <__sinit+0x2c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f5      	bne.n	800414c <__sinit+0xc>
 8004160:	f7ff ffc4 	bl	80040ec <global_stdio_init.part.0>
 8004164:	e7f2      	b.n	800414c <__sinit+0xc>
 8004166:	bf00      	nop
 8004168:	080040ad 	.word	0x080040ad
 800416c:	2000090c 	.word	0x2000090c

08004170 <_fwalk_sglue>:
 8004170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004174:	4607      	mov	r7, r0
 8004176:	4688      	mov	r8, r1
 8004178:	4614      	mov	r4, r2
 800417a:	2600      	movs	r6, #0
 800417c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004180:	f1b9 0901 	subs.w	r9, r9, #1
 8004184:	d505      	bpl.n	8004192 <_fwalk_sglue+0x22>
 8004186:	6824      	ldr	r4, [r4, #0]
 8004188:	2c00      	cmp	r4, #0
 800418a:	d1f7      	bne.n	800417c <_fwalk_sglue+0xc>
 800418c:	4630      	mov	r0, r6
 800418e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004192:	89ab      	ldrh	r3, [r5, #12]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d907      	bls.n	80041a8 <_fwalk_sglue+0x38>
 8004198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800419c:	3301      	adds	r3, #1
 800419e:	d003      	beq.n	80041a8 <_fwalk_sglue+0x38>
 80041a0:	4629      	mov	r1, r5
 80041a2:	4638      	mov	r0, r7
 80041a4:	47c0      	blx	r8
 80041a6:	4306      	orrs	r6, r0
 80041a8:	3568      	adds	r5, #104	@ 0x68
 80041aa:	e7e9      	b.n	8004180 <_fwalk_sglue+0x10>

080041ac <iprintf>:
 80041ac:	b40f      	push	{r0, r1, r2, r3}
 80041ae:	b507      	push	{r0, r1, r2, lr}
 80041b0:	4906      	ldr	r1, [pc, #24]	@ (80041cc <iprintf+0x20>)
 80041b2:	ab04      	add	r3, sp, #16
 80041b4:	6808      	ldr	r0, [r1, #0]
 80041b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ba:	6881      	ldr	r1, [r0, #8]
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	f000 fc53 	bl	8004a68 <_vfiprintf_r>
 80041c2:	b003      	add	sp, #12
 80041c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041c8:	b004      	add	sp, #16
 80041ca:	4770      	bx	lr
 80041cc:	20000018 	.word	0x20000018

080041d0 <_puts_r>:
 80041d0:	6a03      	ldr	r3, [r0, #32]
 80041d2:	b570      	push	{r4, r5, r6, lr}
 80041d4:	6884      	ldr	r4, [r0, #8]
 80041d6:	4605      	mov	r5, r0
 80041d8:	460e      	mov	r6, r1
 80041da:	b90b      	cbnz	r3, 80041e0 <_puts_r+0x10>
 80041dc:	f7ff ffb0 	bl	8004140 <__sinit>
 80041e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041e2:	07db      	lsls	r3, r3, #31
 80041e4:	d405      	bmi.n	80041f2 <_puts_r+0x22>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	0598      	lsls	r0, r3, #22
 80041ea:	d402      	bmi.n	80041f2 <_puts_r+0x22>
 80041ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041ee:	f000 f9be 	bl	800456e <__retarget_lock_acquire_recursive>
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	0719      	lsls	r1, r3, #28
 80041f6:	d502      	bpl.n	80041fe <_puts_r+0x2e>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d135      	bne.n	800426a <_puts_r+0x9a>
 80041fe:	4621      	mov	r1, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f000 f8e5 	bl	80043d0 <__swsetup_r>
 8004206:	b380      	cbz	r0, 800426a <_puts_r+0x9a>
 8004208:	f04f 35ff 	mov.w	r5, #4294967295
 800420c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800420e:	07da      	lsls	r2, r3, #31
 8004210:	d405      	bmi.n	800421e <_puts_r+0x4e>
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	059b      	lsls	r3, r3, #22
 8004216:	d402      	bmi.n	800421e <_puts_r+0x4e>
 8004218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800421a:	f000 f9a9 	bl	8004570 <__retarget_lock_release_recursive>
 800421e:	4628      	mov	r0, r5
 8004220:	bd70      	pop	{r4, r5, r6, pc}
 8004222:	2b00      	cmp	r3, #0
 8004224:	da04      	bge.n	8004230 <_puts_r+0x60>
 8004226:	69a2      	ldr	r2, [r4, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	dc17      	bgt.n	800425c <_puts_r+0x8c>
 800422c:	290a      	cmp	r1, #10
 800422e:	d015      	beq.n	800425c <_puts_r+0x8c>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	6022      	str	r2, [r4, #0]
 8004236:	7019      	strb	r1, [r3, #0]
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800423e:	3b01      	subs	r3, #1
 8004240:	60a3      	str	r3, [r4, #8]
 8004242:	2900      	cmp	r1, #0
 8004244:	d1ed      	bne.n	8004222 <_puts_r+0x52>
 8004246:	2b00      	cmp	r3, #0
 8004248:	da11      	bge.n	800426e <_puts_r+0x9e>
 800424a:	4622      	mov	r2, r4
 800424c:	210a      	movs	r1, #10
 800424e:	4628      	mov	r0, r5
 8004250:	f000 f880 	bl	8004354 <__swbuf_r>
 8004254:	3001      	adds	r0, #1
 8004256:	d0d7      	beq.n	8004208 <_puts_r+0x38>
 8004258:	250a      	movs	r5, #10
 800425a:	e7d7      	b.n	800420c <_puts_r+0x3c>
 800425c:	4622      	mov	r2, r4
 800425e:	4628      	mov	r0, r5
 8004260:	f000 f878 	bl	8004354 <__swbuf_r>
 8004264:	3001      	adds	r0, #1
 8004266:	d1e7      	bne.n	8004238 <_puts_r+0x68>
 8004268:	e7ce      	b.n	8004208 <_puts_r+0x38>
 800426a:	3e01      	subs	r6, #1
 800426c:	e7e4      	b.n	8004238 <_puts_r+0x68>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	6022      	str	r2, [r4, #0]
 8004274:	220a      	movs	r2, #10
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e7ee      	b.n	8004258 <_puts_r+0x88>
	...

0800427c <puts>:
 800427c:	4b02      	ldr	r3, [pc, #8]	@ (8004288 <puts+0xc>)
 800427e:	4601      	mov	r1, r0
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	f7ff bfa5 	b.w	80041d0 <_puts_r>
 8004286:	bf00      	nop
 8004288:	20000018 	.word	0x20000018

0800428c <__sread>:
 800428c:	b510      	push	{r4, lr}
 800428e:	460c      	mov	r4, r1
 8004290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004294:	f000 f91c 	bl	80044d0 <_read_r>
 8004298:	2800      	cmp	r0, #0
 800429a:	bfab      	itete	ge
 800429c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800429e:	89a3      	ldrhlt	r3, [r4, #12]
 80042a0:	181b      	addge	r3, r3, r0
 80042a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042a6:	bfac      	ite	ge
 80042a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042aa:	81a3      	strhlt	r3, [r4, #12]
 80042ac:	bd10      	pop	{r4, pc}

080042ae <__swrite>:
 80042ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b2:	461f      	mov	r7, r3
 80042b4:	898b      	ldrh	r3, [r1, #12]
 80042b6:	05db      	lsls	r3, r3, #23
 80042b8:	4605      	mov	r5, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	4616      	mov	r6, r2
 80042be:	d505      	bpl.n	80042cc <__swrite+0x1e>
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	2302      	movs	r3, #2
 80042c6:	2200      	movs	r2, #0
 80042c8:	f000 f8f0 	bl	80044ac <_lseek_r>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	4632      	mov	r2, r6
 80042da:	463b      	mov	r3, r7
 80042dc:	4628      	mov	r0, r5
 80042de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042e2:	f000 b907 	b.w	80044f4 <_write_r>

080042e6 <__sseek>:
 80042e6:	b510      	push	{r4, lr}
 80042e8:	460c      	mov	r4, r1
 80042ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ee:	f000 f8dd 	bl	80044ac <_lseek_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	bf15      	itete	ne
 80042f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80042fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80042fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004302:	81a3      	strheq	r3, [r4, #12]
 8004304:	bf18      	it	ne
 8004306:	81a3      	strhne	r3, [r4, #12]
 8004308:	bd10      	pop	{r4, pc}

0800430a <__sclose>:
 800430a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430e:	f000 b8bd 	b.w	800448c <_close_r>
	...

08004314 <_vsiprintf_r>:
 8004314:	b500      	push	{lr}
 8004316:	b09b      	sub	sp, #108	@ 0x6c
 8004318:	9100      	str	r1, [sp, #0]
 800431a:	9104      	str	r1, [sp, #16]
 800431c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004320:	9105      	str	r1, [sp, #20]
 8004322:	9102      	str	r1, [sp, #8]
 8004324:	4905      	ldr	r1, [pc, #20]	@ (800433c <_vsiprintf_r+0x28>)
 8004326:	9103      	str	r1, [sp, #12]
 8004328:	4669      	mov	r1, sp
 800432a:	f000 fa77 	bl	800481c <_svfiprintf_r>
 800432e:	9b00      	ldr	r3, [sp, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	b01b      	add	sp, #108	@ 0x6c
 8004336:	f85d fb04 	ldr.w	pc, [sp], #4
 800433a:	bf00      	nop
 800433c:	ffff0208 	.word	0xffff0208

08004340 <vsiprintf>:
 8004340:	4613      	mov	r3, r2
 8004342:	460a      	mov	r2, r1
 8004344:	4601      	mov	r1, r0
 8004346:	4802      	ldr	r0, [pc, #8]	@ (8004350 <vsiprintf+0x10>)
 8004348:	6800      	ldr	r0, [r0, #0]
 800434a:	f7ff bfe3 	b.w	8004314 <_vsiprintf_r>
 800434e:	bf00      	nop
 8004350:	20000018 	.word	0x20000018

08004354 <__swbuf_r>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	460e      	mov	r6, r1
 8004358:	4614      	mov	r4, r2
 800435a:	4605      	mov	r5, r0
 800435c:	b118      	cbz	r0, 8004366 <__swbuf_r+0x12>
 800435e:	6a03      	ldr	r3, [r0, #32]
 8004360:	b90b      	cbnz	r3, 8004366 <__swbuf_r+0x12>
 8004362:	f7ff feed 	bl	8004140 <__sinit>
 8004366:	69a3      	ldr	r3, [r4, #24]
 8004368:	60a3      	str	r3, [r4, #8]
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	071a      	lsls	r2, r3, #28
 800436e:	d501      	bpl.n	8004374 <__swbuf_r+0x20>
 8004370:	6923      	ldr	r3, [r4, #16]
 8004372:	b943      	cbnz	r3, 8004386 <__swbuf_r+0x32>
 8004374:	4621      	mov	r1, r4
 8004376:	4628      	mov	r0, r5
 8004378:	f000 f82a 	bl	80043d0 <__swsetup_r>
 800437c:	b118      	cbz	r0, 8004386 <__swbuf_r+0x32>
 800437e:	f04f 37ff 	mov.w	r7, #4294967295
 8004382:	4638      	mov	r0, r7
 8004384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	1a98      	subs	r0, r3, r2
 800438c:	6963      	ldr	r3, [r4, #20]
 800438e:	b2f6      	uxtb	r6, r6
 8004390:	4283      	cmp	r3, r0
 8004392:	4637      	mov	r7, r6
 8004394:	dc05      	bgt.n	80043a2 <__swbuf_r+0x4e>
 8004396:	4621      	mov	r1, r4
 8004398:	4628      	mov	r0, r5
 800439a:	f000 fe8f 	bl	80050bc <_fflush_r>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1ed      	bne.n	800437e <__swbuf_r+0x2a>
 80043a2:	68a3      	ldr	r3, [r4, #8]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	60a3      	str	r3, [r4, #8]
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	6022      	str	r2, [r4, #0]
 80043ae:	701e      	strb	r6, [r3, #0]
 80043b0:	6962      	ldr	r2, [r4, #20]
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d004      	beq.n	80043c2 <__swbuf_r+0x6e>
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	07db      	lsls	r3, r3, #31
 80043bc:	d5e1      	bpl.n	8004382 <__swbuf_r+0x2e>
 80043be:	2e0a      	cmp	r6, #10
 80043c0:	d1df      	bne.n	8004382 <__swbuf_r+0x2e>
 80043c2:	4621      	mov	r1, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	f000 fe79 	bl	80050bc <_fflush_r>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d0d9      	beq.n	8004382 <__swbuf_r+0x2e>
 80043ce:	e7d6      	b.n	800437e <__swbuf_r+0x2a>

080043d0 <__swsetup_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4b29      	ldr	r3, [pc, #164]	@ (8004478 <__swsetup_r+0xa8>)
 80043d4:	4605      	mov	r5, r0
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	460c      	mov	r4, r1
 80043da:	b118      	cbz	r0, 80043e4 <__swsetup_r+0x14>
 80043dc:	6a03      	ldr	r3, [r0, #32]
 80043de:	b90b      	cbnz	r3, 80043e4 <__swsetup_r+0x14>
 80043e0:	f7ff feae 	bl	8004140 <__sinit>
 80043e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e8:	0719      	lsls	r1, r3, #28
 80043ea:	d422      	bmi.n	8004432 <__swsetup_r+0x62>
 80043ec:	06da      	lsls	r2, r3, #27
 80043ee:	d407      	bmi.n	8004400 <__swsetup_r+0x30>
 80043f0:	2209      	movs	r2, #9
 80043f2:	602a      	str	r2, [r5, #0]
 80043f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295
 80043fe:	e033      	b.n	8004468 <__swsetup_r+0x98>
 8004400:	0758      	lsls	r0, r3, #29
 8004402:	d512      	bpl.n	800442a <__swsetup_r+0x5a>
 8004404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004406:	b141      	cbz	r1, 800441a <__swsetup_r+0x4a>
 8004408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800440c:	4299      	cmp	r1, r3
 800440e:	d002      	beq.n	8004416 <__swsetup_r+0x46>
 8004410:	4628      	mov	r0, r5
 8004412:	f000 f8af 	bl	8004574 <_free_r>
 8004416:	2300      	movs	r3, #0
 8004418:	6363      	str	r3, [r4, #52]	@ 0x34
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004420:	81a3      	strh	r3, [r4, #12]
 8004422:	2300      	movs	r3, #0
 8004424:	6063      	str	r3, [r4, #4]
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f043 0308 	orr.w	r3, r3, #8
 8004430:	81a3      	strh	r3, [r4, #12]
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	b94b      	cbnz	r3, 800444a <__swsetup_r+0x7a>
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800443c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004440:	d003      	beq.n	800444a <__swsetup_r+0x7a>
 8004442:	4621      	mov	r1, r4
 8004444:	4628      	mov	r0, r5
 8004446:	f000 fe87 	bl	8005158 <__smakebuf_r>
 800444a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444e:	f013 0201 	ands.w	r2, r3, #1
 8004452:	d00a      	beq.n	800446a <__swsetup_r+0x9a>
 8004454:	2200      	movs	r2, #0
 8004456:	60a2      	str	r2, [r4, #8]
 8004458:	6962      	ldr	r2, [r4, #20]
 800445a:	4252      	negs	r2, r2
 800445c:	61a2      	str	r2, [r4, #24]
 800445e:	6922      	ldr	r2, [r4, #16]
 8004460:	b942      	cbnz	r2, 8004474 <__swsetup_r+0xa4>
 8004462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004466:	d1c5      	bne.n	80043f4 <__swsetup_r+0x24>
 8004468:	bd38      	pop	{r3, r4, r5, pc}
 800446a:	0799      	lsls	r1, r3, #30
 800446c:	bf58      	it	pl
 800446e:	6962      	ldrpl	r2, [r4, #20]
 8004470:	60a2      	str	r2, [r4, #8]
 8004472:	e7f4      	b.n	800445e <__swsetup_r+0x8e>
 8004474:	2000      	movs	r0, #0
 8004476:	e7f7      	b.n	8004468 <__swsetup_r+0x98>
 8004478:	20000018 	.word	0x20000018

0800447c <memset>:
 800447c:	4402      	add	r2, r0
 800447e:	4603      	mov	r3, r0
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	f803 1b01 	strb.w	r1, [r3], #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <_close_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	@ (80044a8 <_close_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fc fc8d 	bl	8000db6 <_close>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_close_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_close_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000910 	.word	0x20000910

080044ac <_lseek_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d07      	ldr	r5, [pc, #28]	@ (80044cc <_lseek_r+0x20>)
 80044b0:	4604      	mov	r4, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	602a      	str	r2, [r5, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fc fca2 	bl	8000e04 <_lseek>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_lseek_r+0x1e>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_lseek_r+0x1e>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	20000910 	.word	0x20000910

080044d0 <_read_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d07      	ldr	r5, [pc, #28]	@ (80044f0 <_read_r+0x20>)
 80044d4:	4604      	mov	r4, r0
 80044d6:	4608      	mov	r0, r1
 80044d8:	4611      	mov	r1, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	602a      	str	r2, [r5, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	f7fc fc30 	bl	8000d44 <_read>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_read_r+0x1e>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_read_r+0x1e>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	20000910 	.word	0x20000910

080044f4 <_write_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4d07      	ldr	r5, [pc, #28]	@ (8004514 <_write_r+0x20>)
 80044f8:	4604      	mov	r4, r0
 80044fa:	4608      	mov	r0, r1
 80044fc:	4611      	mov	r1, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	602a      	str	r2, [r5, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	f7fc fc3b 	bl	8000d7e <_write>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_write_r+0x1e>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_write_r+0x1e>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000910 	.word	0x20000910

08004518 <__errno>:
 8004518:	4b01      	ldr	r3, [pc, #4]	@ (8004520 <__errno+0x8>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000018 	.word	0x20000018

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	4d0d      	ldr	r5, [pc, #52]	@ (800455c <__libc_init_array+0x38>)
 8004528:	4c0d      	ldr	r4, [pc, #52]	@ (8004560 <__libc_init_array+0x3c>)
 800452a:	1b64      	subs	r4, r4, r5
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	2600      	movs	r6, #0
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	4d0b      	ldr	r5, [pc, #44]	@ (8004564 <__libc_init_array+0x40>)
 8004536:	4c0c      	ldr	r4, [pc, #48]	@ (8004568 <__libc_init_array+0x44>)
 8004538:	f000 feda 	bl	80052f0 <_init>
 800453c:	1b64      	subs	r4, r4, r5
 800453e:	10a4      	asrs	r4, r4, #2
 8004540:	2600      	movs	r6, #0
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	080053c4 	.word	0x080053c4
 8004560:	080053c4 	.word	0x080053c4
 8004564:	080053c4 	.word	0x080053c4
 8004568:	080053c8 	.word	0x080053c8

0800456c <__retarget_lock_init_recursive>:
 800456c:	4770      	bx	lr

0800456e <__retarget_lock_acquire_recursive>:
 800456e:	4770      	bx	lr

08004570 <__retarget_lock_release_recursive>:
 8004570:	4770      	bx	lr
	...

08004574 <_free_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4605      	mov	r5, r0
 8004578:	2900      	cmp	r1, #0
 800457a:	d041      	beq.n	8004600 <_free_r+0x8c>
 800457c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004580:	1f0c      	subs	r4, r1, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	bfb8      	it	lt
 8004586:	18e4      	addlt	r4, r4, r3
 8004588:	f000 f8e0 	bl	800474c <__malloc_lock>
 800458c:	4a1d      	ldr	r2, [pc, #116]	@ (8004604 <_free_r+0x90>)
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	b933      	cbnz	r3, 80045a0 <_free_r+0x2c>
 8004592:	6063      	str	r3, [r4, #4]
 8004594:	6014      	str	r4, [r2, #0]
 8004596:	4628      	mov	r0, r5
 8004598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800459c:	f000 b8dc 	b.w	8004758 <__malloc_unlock>
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d908      	bls.n	80045b6 <_free_r+0x42>
 80045a4:	6820      	ldr	r0, [r4, #0]
 80045a6:	1821      	adds	r1, r4, r0
 80045a8:	428b      	cmp	r3, r1
 80045aa:	bf01      	itttt	eq
 80045ac:	6819      	ldreq	r1, [r3, #0]
 80045ae:	685b      	ldreq	r3, [r3, #4]
 80045b0:	1809      	addeq	r1, r1, r0
 80045b2:	6021      	streq	r1, [r4, #0]
 80045b4:	e7ed      	b.n	8004592 <_free_r+0x1e>
 80045b6:	461a      	mov	r2, r3
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	b10b      	cbz	r3, 80045c0 <_free_r+0x4c>
 80045bc:	42a3      	cmp	r3, r4
 80045be:	d9fa      	bls.n	80045b6 <_free_r+0x42>
 80045c0:	6811      	ldr	r1, [r2, #0]
 80045c2:	1850      	adds	r0, r2, r1
 80045c4:	42a0      	cmp	r0, r4
 80045c6:	d10b      	bne.n	80045e0 <_free_r+0x6c>
 80045c8:	6820      	ldr	r0, [r4, #0]
 80045ca:	4401      	add	r1, r0
 80045cc:	1850      	adds	r0, r2, r1
 80045ce:	4283      	cmp	r3, r0
 80045d0:	6011      	str	r1, [r2, #0]
 80045d2:	d1e0      	bne.n	8004596 <_free_r+0x22>
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	6053      	str	r3, [r2, #4]
 80045da:	4408      	add	r0, r1
 80045dc:	6010      	str	r0, [r2, #0]
 80045de:	e7da      	b.n	8004596 <_free_r+0x22>
 80045e0:	d902      	bls.n	80045e8 <_free_r+0x74>
 80045e2:	230c      	movs	r3, #12
 80045e4:	602b      	str	r3, [r5, #0]
 80045e6:	e7d6      	b.n	8004596 <_free_r+0x22>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	1821      	adds	r1, r4, r0
 80045ec:	428b      	cmp	r3, r1
 80045ee:	bf04      	itt	eq
 80045f0:	6819      	ldreq	r1, [r3, #0]
 80045f2:	685b      	ldreq	r3, [r3, #4]
 80045f4:	6063      	str	r3, [r4, #4]
 80045f6:	bf04      	itt	eq
 80045f8:	1809      	addeq	r1, r1, r0
 80045fa:	6021      	streq	r1, [r4, #0]
 80045fc:	6054      	str	r4, [r2, #4]
 80045fe:	e7ca      	b.n	8004596 <_free_r+0x22>
 8004600:	bd38      	pop	{r3, r4, r5, pc}
 8004602:	bf00      	nop
 8004604:	2000091c 	.word	0x2000091c

08004608 <sbrk_aligned>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4e0f      	ldr	r6, [pc, #60]	@ (8004648 <sbrk_aligned+0x40>)
 800460c:	460c      	mov	r4, r1
 800460e:	6831      	ldr	r1, [r6, #0]
 8004610:	4605      	mov	r5, r0
 8004612:	b911      	cbnz	r1, 800461a <sbrk_aligned+0x12>
 8004614:	f000 fe18 	bl	8005248 <_sbrk_r>
 8004618:	6030      	str	r0, [r6, #0]
 800461a:	4621      	mov	r1, r4
 800461c:	4628      	mov	r0, r5
 800461e:	f000 fe13 	bl	8005248 <_sbrk_r>
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	d103      	bne.n	800462e <sbrk_aligned+0x26>
 8004626:	f04f 34ff 	mov.w	r4, #4294967295
 800462a:	4620      	mov	r0, r4
 800462c:	bd70      	pop	{r4, r5, r6, pc}
 800462e:	1cc4      	adds	r4, r0, #3
 8004630:	f024 0403 	bic.w	r4, r4, #3
 8004634:	42a0      	cmp	r0, r4
 8004636:	d0f8      	beq.n	800462a <sbrk_aligned+0x22>
 8004638:	1a21      	subs	r1, r4, r0
 800463a:	4628      	mov	r0, r5
 800463c:	f000 fe04 	bl	8005248 <_sbrk_r>
 8004640:	3001      	adds	r0, #1
 8004642:	d1f2      	bne.n	800462a <sbrk_aligned+0x22>
 8004644:	e7ef      	b.n	8004626 <sbrk_aligned+0x1e>
 8004646:	bf00      	nop
 8004648:	20000918 	.word	0x20000918

0800464c <_malloc_r>:
 800464c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004650:	1ccd      	adds	r5, r1, #3
 8004652:	f025 0503 	bic.w	r5, r5, #3
 8004656:	3508      	adds	r5, #8
 8004658:	2d0c      	cmp	r5, #12
 800465a:	bf38      	it	cc
 800465c:	250c      	movcc	r5, #12
 800465e:	2d00      	cmp	r5, #0
 8004660:	4606      	mov	r6, r0
 8004662:	db01      	blt.n	8004668 <_malloc_r+0x1c>
 8004664:	42a9      	cmp	r1, r5
 8004666:	d904      	bls.n	8004672 <_malloc_r+0x26>
 8004668:	230c      	movs	r3, #12
 800466a:	6033      	str	r3, [r6, #0]
 800466c:	2000      	movs	r0, #0
 800466e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004748 <_malloc_r+0xfc>
 8004676:	f000 f869 	bl	800474c <__malloc_lock>
 800467a:	f8d8 3000 	ldr.w	r3, [r8]
 800467e:	461c      	mov	r4, r3
 8004680:	bb44      	cbnz	r4, 80046d4 <_malloc_r+0x88>
 8004682:	4629      	mov	r1, r5
 8004684:	4630      	mov	r0, r6
 8004686:	f7ff ffbf 	bl	8004608 <sbrk_aligned>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	4604      	mov	r4, r0
 800468e:	d158      	bne.n	8004742 <_malloc_r+0xf6>
 8004690:	f8d8 4000 	ldr.w	r4, [r8]
 8004694:	4627      	mov	r7, r4
 8004696:	2f00      	cmp	r7, #0
 8004698:	d143      	bne.n	8004722 <_malloc_r+0xd6>
 800469a:	2c00      	cmp	r4, #0
 800469c:	d04b      	beq.n	8004736 <_malloc_r+0xea>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	4639      	mov	r1, r7
 80046a2:	4630      	mov	r0, r6
 80046a4:	eb04 0903 	add.w	r9, r4, r3
 80046a8:	f000 fdce 	bl	8005248 <_sbrk_r>
 80046ac:	4581      	cmp	r9, r0
 80046ae:	d142      	bne.n	8004736 <_malloc_r+0xea>
 80046b0:	6821      	ldr	r1, [r4, #0]
 80046b2:	1a6d      	subs	r5, r5, r1
 80046b4:	4629      	mov	r1, r5
 80046b6:	4630      	mov	r0, r6
 80046b8:	f7ff ffa6 	bl	8004608 <sbrk_aligned>
 80046bc:	3001      	adds	r0, #1
 80046be:	d03a      	beq.n	8004736 <_malloc_r+0xea>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	442b      	add	r3, r5
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	f8d8 3000 	ldr.w	r3, [r8]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	bb62      	cbnz	r2, 8004728 <_malloc_r+0xdc>
 80046ce:	f8c8 7000 	str.w	r7, [r8]
 80046d2:	e00f      	b.n	80046f4 <_malloc_r+0xa8>
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	1b52      	subs	r2, r2, r5
 80046d8:	d420      	bmi.n	800471c <_malloc_r+0xd0>
 80046da:	2a0b      	cmp	r2, #11
 80046dc:	d917      	bls.n	800470e <_malloc_r+0xc2>
 80046de:	1961      	adds	r1, r4, r5
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	6025      	str	r5, [r4, #0]
 80046e4:	bf18      	it	ne
 80046e6:	6059      	strne	r1, [r3, #4]
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	bf08      	it	eq
 80046ec:	f8c8 1000 	streq.w	r1, [r8]
 80046f0:	5162      	str	r2, [r4, r5]
 80046f2:	604b      	str	r3, [r1, #4]
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 f82f 	bl	8004758 <__malloc_unlock>
 80046fa:	f104 000b 	add.w	r0, r4, #11
 80046fe:	1d23      	adds	r3, r4, #4
 8004700:	f020 0007 	bic.w	r0, r0, #7
 8004704:	1ac2      	subs	r2, r0, r3
 8004706:	bf1c      	itt	ne
 8004708:	1a1b      	subne	r3, r3, r0
 800470a:	50a3      	strne	r3, [r4, r2]
 800470c:	e7af      	b.n	800466e <_malloc_r+0x22>
 800470e:	6862      	ldr	r2, [r4, #4]
 8004710:	42a3      	cmp	r3, r4
 8004712:	bf0c      	ite	eq
 8004714:	f8c8 2000 	streq.w	r2, [r8]
 8004718:	605a      	strne	r2, [r3, #4]
 800471a:	e7eb      	b.n	80046f4 <_malloc_r+0xa8>
 800471c:	4623      	mov	r3, r4
 800471e:	6864      	ldr	r4, [r4, #4]
 8004720:	e7ae      	b.n	8004680 <_malloc_r+0x34>
 8004722:	463c      	mov	r4, r7
 8004724:	687f      	ldr	r7, [r7, #4]
 8004726:	e7b6      	b.n	8004696 <_malloc_r+0x4a>
 8004728:	461a      	mov	r2, r3
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	42a3      	cmp	r3, r4
 800472e:	d1fb      	bne.n	8004728 <_malloc_r+0xdc>
 8004730:	2300      	movs	r3, #0
 8004732:	6053      	str	r3, [r2, #4]
 8004734:	e7de      	b.n	80046f4 <_malloc_r+0xa8>
 8004736:	230c      	movs	r3, #12
 8004738:	6033      	str	r3, [r6, #0]
 800473a:	4630      	mov	r0, r6
 800473c:	f000 f80c 	bl	8004758 <__malloc_unlock>
 8004740:	e794      	b.n	800466c <_malloc_r+0x20>
 8004742:	6005      	str	r5, [r0, #0]
 8004744:	e7d6      	b.n	80046f4 <_malloc_r+0xa8>
 8004746:	bf00      	nop
 8004748:	2000091c 	.word	0x2000091c

0800474c <__malloc_lock>:
 800474c:	4801      	ldr	r0, [pc, #4]	@ (8004754 <__malloc_lock+0x8>)
 800474e:	f7ff bf0e 	b.w	800456e <__retarget_lock_acquire_recursive>
 8004752:	bf00      	nop
 8004754:	20000914 	.word	0x20000914

08004758 <__malloc_unlock>:
 8004758:	4801      	ldr	r0, [pc, #4]	@ (8004760 <__malloc_unlock+0x8>)
 800475a:	f7ff bf09 	b.w	8004570 <__retarget_lock_release_recursive>
 800475e:	bf00      	nop
 8004760:	20000914 	.word	0x20000914

08004764 <__ssputs_r>:
 8004764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	688e      	ldr	r6, [r1, #8]
 800476a:	461f      	mov	r7, r3
 800476c:	42be      	cmp	r6, r7
 800476e:	680b      	ldr	r3, [r1, #0]
 8004770:	4682      	mov	sl, r0
 8004772:	460c      	mov	r4, r1
 8004774:	4690      	mov	r8, r2
 8004776:	d82d      	bhi.n	80047d4 <__ssputs_r+0x70>
 8004778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800477c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004780:	d026      	beq.n	80047d0 <__ssputs_r+0x6c>
 8004782:	6965      	ldr	r5, [r4, #20]
 8004784:	6909      	ldr	r1, [r1, #16]
 8004786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800478a:	eba3 0901 	sub.w	r9, r3, r1
 800478e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004792:	1c7b      	adds	r3, r7, #1
 8004794:	444b      	add	r3, r9
 8004796:	106d      	asrs	r5, r5, #1
 8004798:	429d      	cmp	r5, r3
 800479a:	bf38      	it	cc
 800479c:	461d      	movcc	r5, r3
 800479e:	0553      	lsls	r3, r2, #21
 80047a0:	d527      	bpl.n	80047f2 <__ssputs_r+0x8e>
 80047a2:	4629      	mov	r1, r5
 80047a4:	f7ff ff52 	bl	800464c <_malloc_r>
 80047a8:	4606      	mov	r6, r0
 80047aa:	b360      	cbz	r0, 8004806 <__ssputs_r+0xa2>
 80047ac:	6921      	ldr	r1, [r4, #16]
 80047ae:	464a      	mov	r2, r9
 80047b0:	f000 fd5a 	bl	8005268 <memcpy>
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047be:	81a3      	strh	r3, [r4, #12]
 80047c0:	6126      	str	r6, [r4, #16]
 80047c2:	6165      	str	r5, [r4, #20]
 80047c4:	444e      	add	r6, r9
 80047c6:	eba5 0509 	sub.w	r5, r5, r9
 80047ca:	6026      	str	r6, [r4, #0]
 80047cc:	60a5      	str	r5, [r4, #8]
 80047ce:	463e      	mov	r6, r7
 80047d0:	42be      	cmp	r6, r7
 80047d2:	d900      	bls.n	80047d6 <__ssputs_r+0x72>
 80047d4:	463e      	mov	r6, r7
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	4632      	mov	r2, r6
 80047da:	4641      	mov	r1, r8
 80047dc:	f000 fcf8 	bl	80051d0 <memmove>
 80047e0:	68a3      	ldr	r3, [r4, #8]
 80047e2:	1b9b      	subs	r3, r3, r6
 80047e4:	60a3      	str	r3, [r4, #8]
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	4433      	add	r3, r6
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	2000      	movs	r0, #0
 80047ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f2:	462a      	mov	r2, r5
 80047f4:	f000 fd46 	bl	8005284 <_realloc_r>
 80047f8:	4606      	mov	r6, r0
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d1e0      	bne.n	80047c0 <__ssputs_r+0x5c>
 80047fe:	6921      	ldr	r1, [r4, #16]
 8004800:	4650      	mov	r0, sl
 8004802:	f7ff feb7 	bl	8004574 <_free_r>
 8004806:	230c      	movs	r3, #12
 8004808:	f8ca 3000 	str.w	r3, [sl]
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	e7e9      	b.n	80047ee <__ssputs_r+0x8a>
	...

0800481c <_svfiprintf_r>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	4698      	mov	r8, r3
 8004822:	898b      	ldrh	r3, [r1, #12]
 8004824:	061b      	lsls	r3, r3, #24
 8004826:	b09d      	sub	sp, #116	@ 0x74
 8004828:	4607      	mov	r7, r0
 800482a:	460d      	mov	r5, r1
 800482c:	4614      	mov	r4, r2
 800482e:	d510      	bpl.n	8004852 <_svfiprintf_r+0x36>
 8004830:	690b      	ldr	r3, [r1, #16]
 8004832:	b973      	cbnz	r3, 8004852 <_svfiprintf_r+0x36>
 8004834:	2140      	movs	r1, #64	@ 0x40
 8004836:	f7ff ff09 	bl	800464c <_malloc_r>
 800483a:	6028      	str	r0, [r5, #0]
 800483c:	6128      	str	r0, [r5, #16]
 800483e:	b930      	cbnz	r0, 800484e <_svfiprintf_r+0x32>
 8004840:	230c      	movs	r3, #12
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	b01d      	add	sp, #116	@ 0x74
 800484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484e:	2340      	movs	r3, #64	@ 0x40
 8004850:	616b      	str	r3, [r5, #20]
 8004852:	2300      	movs	r3, #0
 8004854:	9309      	str	r3, [sp, #36]	@ 0x24
 8004856:	2320      	movs	r3, #32
 8004858:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800485c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004860:	2330      	movs	r3, #48	@ 0x30
 8004862:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a00 <_svfiprintf_r+0x1e4>
 8004866:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800486a:	f04f 0901 	mov.w	r9, #1
 800486e:	4623      	mov	r3, r4
 8004870:	469a      	mov	sl, r3
 8004872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004876:	b10a      	cbz	r2, 800487c <_svfiprintf_r+0x60>
 8004878:	2a25      	cmp	r2, #37	@ 0x25
 800487a:	d1f9      	bne.n	8004870 <_svfiprintf_r+0x54>
 800487c:	ebba 0b04 	subs.w	fp, sl, r4
 8004880:	d00b      	beq.n	800489a <_svfiprintf_r+0x7e>
 8004882:	465b      	mov	r3, fp
 8004884:	4622      	mov	r2, r4
 8004886:	4629      	mov	r1, r5
 8004888:	4638      	mov	r0, r7
 800488a:	f7ff ff6b 	bl	8004764 <__ssputs_r>
 800488e:	3001      	adds	r0, #1
 8004890:	f000 80a7 	beq.w	80049e2 <_svfiprintf_r+0x1c6>
 8004894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004896:	445a      	add	r2, fp
 8004898:	9209      	str	r2, [sp, #36]	@ 0x24
 800489a:	f89a 3000 	ldrb.w	r3, [sl]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 809f 	beq.w	80049e2 <_svfiprintf_r+0x1c6>
 80048a4:	2300      	movs	r3, #0
 80048a6:	f04f 32ff 	mov.w	r2, #4294967295
 80048aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ae:	f10a 0a01 	add.w	sl, sl, #1
 80048b2:	9304      	str	r3, [sp, #16]
 80048b4:	9307      	str	r3, [sp, #28]
 80048b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80048bc:	4654      	mov	r4, sl
 80048be:	2205      	movs	r2, #5
 80048c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c4:	484e      	ldr	r0, [pc, #312]	@ (8004a00 <_svfiprintf_r+0x1e4>)
 80048c6:	f7fb fcab 	bl	8000220 <memchr>
 80048ca:	9a04      	ldr	r2, [sp, #16]
 80048cc:	b9d8      	cbnz	r0, 8004906 <_svfiprintf_r+0xea>
 80048ce:	06d0      	lsls	r0, r2, #27
 80048d0:	bf44      	itt	mi
 80048d2:	2320      	movmi	r3, #32
 80048d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048d8:	0711      	lsls	r1, r2, #28
 80048da:	bf44      	itt	mi
 80048dc:	232b      	movmi	r3, #43	@ 0x2b
 80048de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048e2:	f89a 3000 	ldrb.w	r3, [sl]
 80048e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80048e8:	d015      	beq.n	8004916 <_svfiprintf_r+0xfa>
 80048ea:	9a07      	ldr	r2, [sp, #28]
 80048ec:	4654      	mov	r4, sl
 80048ee:	2000      	movs	r0, #0
 80048f0:	f04f 0c0a 	mov.w	ip, #10
 80048f4:	4621      	mov	r1, r4
 80048f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048fa:	3b30      	subs	r3, #48	@ 0x30
 80048fc:	2b09      	cmp	r3, #9
 80048fe:	d94b      	bls.n	8004998 <_svfiprintf_r+0x17c>
 8004900:	b1b0      	cbz	r0, 8004930 <_svfiprintf_r+0x114>
 8004902:	9207      	str	r2, [sp, #28]
 8004904:	e014      	b.n	8004930 <_svfiprintf_r+0x114>
 8004906:	eba0 0308 	sub.w	r3, r0, r8
 800490a:	fa09 f303 	lsl.w	r3, r9, r3
 800490e:	4313      	orrs	r3, r2
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	46a2      	mov	sl, r4
 8004914:	e7d2      	b.n	80048bc <_svfiprintf_r+0xa0>
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	1d19      	adds	r1, r3, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	9103      	str	r1, [sp, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfbb      	ittet	lt
 8004922:	425b      	neglt	r3, r3
 8004924:	f042 0202 	orrlt.w	r2, r2, #2
 8004928:	9307      	strge	r3, [sp, #28]
 800492a:	9307      	strlt	r3, [sp, #28]
 800492c:	bfb8      	it	lt
 800492e:	9204      	strlt	r2, [sp, #16]
 8004930:	7823      	ldrb	r3, [r4, #0]
 8004932:	2b2e      	cmp	r3, #46	@ 0x2e
 8004934:	d10a      	bne.n	800494c <_svfiprintf_r+0x130>
 8004936:	7863      	ldrb	r3, [r4, #1]
 8004938:	2b2a      	cmp	r3, #42	@ 0x2a
 800493a:	d132      	bne.n	80049a2 <_svfiprintf_r+0x186>
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	1d1a      	adds	r2, r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	9203      	str	r2, [sp, #12]
 8004944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004948:	3402      	adds	r4, #2
 800494a:	9305      	str	r3, [sp, #20]
 800494c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a10 <_svfiprintf_r+0x1f4>
 8004950:	7821      	ldrb	r1, [r4, #0]
 8004952:	2203      	movs	r2, #3
 8004954:	4650      	mov	r0, sl
 8004956:	f7fb fc63 	bl	8000220 <memchr>
 800495a:	b138      	cbz	r0, 800496c <_svfiprintf_r+0x150>
 800495c:	9b04      	ldr	r3, [sp, #16]
 800495e:	eba0 000a 	sub.w	r0, r0, sl
 8004962:	2240      	movs	r2, #64	@ 0x40
 8004964:	4082      	lsls	r2, r0
 8004966:	4313      	orrs	r3, r2
 8004968:	3401      	adds	r4, #1
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004970:	4824      	ldr	r0, [pc, #144]	@ (8004a04 <_svfiprintf_r+0x1e8>)
 8004972:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004976:	2206      	movs	r2, #6
 8004978:	f7fb fc52 	bl	8000220 <memchr>
 800497c:	2800      	cmp	r0, #0
 800497e:	d036      	beq.n	80049ee <_svfiprintf_r+0x1d2>
 8004980:	4b21      	ldr	r3, [pc, #132]	@ (8004a08 <_svfiprintf_r+0x1ec>)
 8004982:	bb1b      	cbnz	r3, 80049cc <_svfiprintf_r+0x1b0>
 8004984:	9b03      	ldr	r3, [sp, #12]
 8004986:	3307      	adds	r3, #7
 8004988:	f023 0307 	bic.w	r3, r3, #7
 800498c:	3308      	adds	r3, #8
 800498e:	9303      	str	r3, [sp, #12]
 8004990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004992:	4433      	add	r3, r6
 8004994:	9309      	str	r3, [sp, #36]	@ 0x24
 8004996:	e76a      	b.n	800486e <_svfiprintf_r+0x52>
 8004998:	fb0c 3202 	mla	r2, ip, r2, r3
 800499c:	460c      	mov	r4, r1
 800499e:	2001      	movs	r0, #1
 80049a0:	e7a8      	b.n	80048f4 <_svfiprintf_r+0xd8>
 80049a2:	2300      	movs	r3, #0
 80049a4:	3401      	adds	r4, #1
 80049a6:	9305      	str	r3, [sp, #20]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f04f 0c0a 	mov.w	ip, #10
 80049ae:	4620      	mov	r0, r4
 80049b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049b4:	3a30      	subs	r2, #48	@ 0x30
 80049b6:	2a09      	cmp	r2, #9
 80049b8:	d903      	bls.n	80049c2 <_svfiprintf_r+0x1a6>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0c6      	beq.n	800494c <_svfiprintf_r+0x130>
 80049be:	9105      	str	r1, [sp, #20]
 80049c0:	e7c4      	b.n	800494c <_svfiprintf_r+0x130>
 80049c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049c6:	4604      	mov	r4, r0
 80049c8:	2301      	movs	r3, #1
 80049ca:	e7f0      	b.n	80049ae <_svfiprintf_r+0x192>
 80049cc:	ab03      	add	r3, sp, #12
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	462a      	mov	r2, r5
 80049d2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a0c <_svfiprintf_r+0x1f0>)
 80049d4:	a904      	add	r1, sp, #16
 80049d6:	4638      	mov	r0, r7
 80049d8:	f3af 8000 	nop.w
 80049dc:	1c42      	adds	r2, r0, #1
 80049de:	4606      	mov	r6, r0
 80049e0:	d1d6      	bne.n	8004990 <_svfiprintf_r+0x174>
 80049e2:	89ab      	ldrh	r3, [r5, #12]
 80049e4:	065b      	lsls	r3, r3, #25
 80049e6:	f53f af2d 	bmi.w	8004844 <_svfiprintf_r+0x28>
 80049ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049ec:	e72c      	b.n	8004848 <_svfiprintf_r+0x2c>
 80049ee:	ab03      	add	r3, sp, #12
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	462a      	mov	r2, r5
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <_svfiprintf_r+0x1f0>)
 80049f6:	a904      	add	r1, sp, #16
 80049f8:	4638      	mov	r0, r7
 80049fa:	f000 f9bb 	bl	8004d74 <_printf_i>
 80049fe:	e7ed      	b.n	80049dc <_svfiprintf_r+0x1c0>
 8004a00:	08005388 	.word	0x08005388
 8004a04:	08005392 	.word	0x08005392
 8004a08:	00000000 	.word	0x00000000
 8004a0c:	08004765 	.word	0x08004765
 8004a10:	0800538e 	.word	0x0800538e

08004a14 <__sfputc_r>:
 8004a14:	6893      	ldr	r3, [r2, #8]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	b410      	push	{r4}
 8004a1c:	6093      	str	r3, [r2, #8]
 8004a1e:	da08      	bge.n	8004a32 <__sfputc_r+0x1e>
 8004a20:	6994      	ldr	r4, [r2, #24]
 8004a22:	42a3      	cmp	r3, r4
 8004a24:	db01      	blt.n	8004a2a <__sfputc_r+0x16>
 8004a26:	290a      	cmp	r1, #10
 8004a28:	d103      	bne.n	8004a32 <__sfputc_r+0x1e>
 8004a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a2e:	f7ff bc91 	b.w	8004354 <__swbuf_r>
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	1c58      	adds	r0, r3, #1
 8004a36:	6010      	str	r0, [r2, #0]
 8004a38:	7019      	strb	r1, [r3, #0]
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <__sfputs_r>:
 8004a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a44:	4606      	mov	r6, r0
 8004a46:	460f      	mov	r7, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	18d5      	adds	r5, r2, r3
 8004a4c:	42ac      	cmp	r4, r5
 8004a4e:	d101      	bne.n	8004a54 <__sfputs_r+0x12>
 8004a50:	2000      	movs	r0, #0
 8004a52:	e007      	b.n	8004a64 <__sfputs_r+0x22>
 8004a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a58:	463a      	mov	r2, r7
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff ffda 	bl	8004a14 <__sfputc_r>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d1f3      	bne.n	8004a4c <__sfputs_r+0xa>
 8004a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a68 <_vfiprintf_r>:
 8004a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	460d      	mov	r5, r1
 8004a6e:	b09d      	sub	sp, #116	@ 0x74
 8004a70:	4614      	mov	r4, r2
 8004a72:	4698      	mov	r8, r3
 8004a74:	4606      	mov	r6, r0
 8004a76:	b118      	cbz	r0, 8004a80 <_vfiprintf_r+0x18>
 8004a78:	6a03      	ldr	r3, [r0, #32]
 8004a7a:	b90b      	cbnz	r3, 8004a80 <_vfiprintf_r+0x18>
 8004a7c:	f7ff fb60 	bl	8004140 <__sinit>
 8004a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a82:	07d9      	lsls	r1, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_vfiprintf_r+0x2a>
 8004a86:	89ab      	ldrh	r3, [r5, #12]
 8004a88:	059a      	lsls	r2, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_vfiprintf_r+0x2a>
 8004a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a8e:	f7ff fd6e 	bl	800456e <__retarget_lock_acquire_recursive>
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	d501      	bpl.n	8004a9c <_vfiprintf_r+0x34>
 8004a98:	692b      	ldr	r3, [r5, #16]
 8004a9a:	b99b      	cbnz	r3, 8004ac4 <_vfiprintf_r+0x5c>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f7ff fc96 	bl	80043d0 <__swsetup_r>
 8004aa4:	b170      	cbz	r0, 8004ac4 <_vfiprintf_r+0x5c>
 8004aa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aa8:	07dc      	lsls	r4, r3, #31
 8004aaa:	d504      	bpl.n	8004ab6 <_vfiprintf_r+0x4e>
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	b01d      	add	sp, #116	@ 0x74
 8004ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	0598      	lsls	r0, r3, #22
 8004aba:	d4f7      	bmi.n	8004aac <_vfiprintf_r+0x44>
 8004abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004abe:	f7ff fd57 	bl	8004570 <__retarget_lock_release_recursive>
 8004ac2:	e7f3      	b.n	8004aac <_vfiprintf_r+0x44>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ac8:	2320      	movs	r3, #32
 8004aca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ad2:	2330      	movs	r3, #48	@ 0x30
 8004ad4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c84 <_vfiprintf_r+0x21c>
 8004ad8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004adc:	f04f 0901 	mov.w	r9, #1
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	469a      	mov	sl, r3
 8004ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae8:	b10a      	cbz	r2, 8004aee <_vfiprintf_r+0x86>
 8004aea:	2a25      	cmp	r2, #37	@ 0x25
 8004aec:	d1f9      	bne.n	8004ae2 <_vfiprintf_r+0x7a>
 8004aee:	ebba 0b04 	subs.w	fp, sl, r4
 8004af2:	d00b      	beq.n	8004b0c <_vfiprintf_r+0xa4>
 8004af4:	465b      	mov	r3, fp
 8004af6:	4622      	mov	r2, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7ff ffa1 	bl	8004a42 <__sfputs_r>
 8004b00:	3001      	adds	r0, #1
 8004b02:	f000 80a7 	beq.w	8004c54 <_vfiprintf_r+0x1ec>
 8004b06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b08:	445a      	add	r2, fp
 8004b0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 809f 	beq.w	8004c54 <_vfiprintf_r+0x1ec>
 8004b16:	2300      	movs	r3, #0
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b20:	f10a 0a01 	add.w	sl, sl, #1
 8004b24:	9304      	str	r3, [sp, #16]
 8004b26:	9307      	str	r3, [sp, #28]
 8004b28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b2e:	4654      	mov	r4, sl
 8004b30:	2205      	movs	r2, #5
 8004b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b36:	4853      	ldr	r0, [pc, #332]	@ (8004c84 <_vfiprintf_r+0x21c>)
 8004b38:	f7fb fb72 	bl	8000220 <memchr>
 8004b3c:	9a04      	ldr	r2, [sp, #16]
 8004b3e:	b9d8      	cbnz	r0, 8004b78 <_vfiprintf_r+0x110>
 8004b40:	06d1      	lsls	r1, r2, #27
 8004b42:	bf44      	itt	mi
 8004b44:	2320      	movmi	r3, #32
 8004b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b4a:	0713      	lsls	r3, r2, #28
 8004b4c:	bf44      	itt	mi
 8004b4e:	232b      	movmi	r3, #43	@ 0x2b
 8004b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b54:	f89a 3000 	ldrb.w	r3, [sl]
 8004b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b5a:	d015      	beq.n	8004b88 <_vfiprintf_r+0x120>
 8004b5c:	9a07      	ldr	r2, [sp, #28]
 8004b5e:	4654      	mov	r4, sl
 8004b60:	2000      	movs	r0, #0
 8004b62:	f04f 0c0a 	mov.w	ip, #10
 8004b66:	4621      	mov	r1, r4
 8004b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b6c:	3b30      	subs	r3, #48	@ 0x30
 8004b6e:	2b09      	cmp	r3, #9
 8004b70:	d94b      	bls.n	8004c0a <_vfiprintf_r+0x1a2>
 8004b72:	b1b0      	cbz	r0, 8004ba2 <_vfiprintf_r+0x13a>
 8004b74:	9207      	str	r2, [sp, #28]
 8004b76:	e014      	b.n	8004ba2 <_vfiprintf_r+0x13a>
 8004b78:	eba0 0308 	sub.w	r3, r0, r8
 8004b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	9304      	str	r3, [sp, #16]
 8004b84:	46a2      	mov	sl, r4
 8004b86:	e7d2      	b.n	8004b2e <_vfiprintf_r+0xc6>
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	1d19      	adds	r1, r3, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	9103      	str	r1, [sp, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfbb      	ittet	lt
 8004b94:	425b      	neglt	r3, r3
 8004b96:	f042 0202 	orrlt.w	r2, r2, #2
 8004b9a:	9307      	strge	r3, [sp, #28]
 8004b9c:	9307      	strlt	r3, [sp, #28]
 8004b9e:	bfb8      	it	lt
 8004ba0:	9204      	strlt	r2, [sp, #16]
 8004ba2:	7823      	ldrb	r3, [r4, #0]
 8004ba4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ba6:	d10a      	bne.n	8004bbe <_vfiprintf_r+0x156>
 8004ba8:	7863      	ldrb	r3, [r4, #1]
 8004baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bac:	d132      	bne.n	8004c14 <_vfiprintf_r+0x1ac>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	1d1a      	adds	r2, r3, #4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	9203      	str	r2, [sp, #12]
 8004bb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bba:	3402      	adds	r4, #2
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c94 <_vfiprintf_r+0x22c>
 8004bc2:	7821      	ldrb	r1, [r4, #0]
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	f7fb fb2a 	bl	8000220 <memchr>
 8004bcc:	b138      	cbz	r0, 8004bde <_vfiprintf_r+0x176>
 8004bce:	9b04      	ldr	r3, [sp, #16]
 8004bd0:	eba0 000a 	sub.w	r0, r0, sl
 8004bd4:	2240      	movs	r2, #64	@ 0x40
 8004bd6:	4082      	lsls	r2, r0
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	3401      	adds	r4, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be2:	4829      	ldr	r0, [pc, #164]	@ (8004c88 <_vfiprintf_r+0x220>)
 8004be4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004be8:	2206      	movs	r2, #6
 8004bea:	f7fb fb19 	bl	8000220 <memchr>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d03f      	beq.n	8004c72 <_vfiprintf_r+0x20a>
 8004bf2:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <_vfiprintf_r+0x224>)
 8004bf4:	bb1b      	cbnz	r3, 8004c3e <_vfiprintf_r+0x1d6>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	3307      	adds	r3, #7
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	3308      	adds	r3, #8
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c04:	443b      	add	r3, r7
 8004c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c08:	e76a      	b.n	8004ae0 <_vfiprintf_r+0x78>
 8004c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c0e:	460c      	mov	r4, r1
 8004c10:	2001      	movs	r0, #1
 8004c12:	e7a8      	b.n	8004b66 <_vfiprintf_r+0xfe>
 8004c14:	2300      	movs	r3, #0
 8004c16:	3401      	adds	r4, #1
 8004c18:	9305      	str	r3, [sp, #20]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f04f 0c0a 	mov.w	ip, #10
 8004c20:	4620      	mov	r0, r4
 8004c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c26:	3a30      	subs	r2, #48	@ 0x30
 8004c28:	2a09      	cmp	r2, #9
 8004c2a:	d903      	bls.n	8004c34 <_vfiprintf_r+0x1cc>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0c6      	beq.n	8004bbe <_vfiprintf_r+0x156>
 8004c30:	9105      	str	r1, [sp, #20]
 8004c32:	e7c4      	b.n	8004bbe <_vfiprintf_r+0x156>
 8004c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c38:	4604      	mov	r4, r0
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e7f0      	b.n	8004c20 <_vfiprintf_r+0x1b8>
 8004c3e:	ab03      	add	r3, sp, #12
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	462a      	mov	r2, r5
 8004c44:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <_vfiprintf_r+0x228>)
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f3af 8000 	nop.w
 8004c4e:	4607      	mov	r7, r0
 8004c50:	1c78      	adds	r0, r7, #1
 8004c52:	d1d6      	bne.n	8004c02 <_vfiprintf_r+0x19a>
 8004c54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c56:	07d9      	lsls	r1, r3, #31
 8004c58:	d405      	bmi.n	8004c66 <_vfiprintf_r+0x1fe>
 8004c5a:	89ab      	ldrh	r3, [r5, #12]
 8004c5c:	059a      	lsls	r2, r3, #22
 8004c5e:	d402      	bmi.n	8004c66 <_vfiprintf_r+0x1fe>
 8004c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c62:	f7ff fc85 	bl	8004570 <__retarget_lock_release_recursive>
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	065b      	lsls	r3, r3, #25
 8004c6a:	f53f af1f 	bmi.w	8004aac <_vfiprintf_r+0x44>
 8004c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c70:	e71e      	b.n	8004ab0 <_vfiprintf_r+0x48>
 8004c72:	ab03      	add	r3, sp, #12
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	462a      	mov	r2, r5
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <_vfiprintf_r+0x228>)
 8004c7a:	a904      	add	r1, sp, #16
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 f879 	bl	8004d74 <_printf_i>
 8004c82:	e7e4      	b.n	8004c4e <_vfiprintf_r+0x1e6>
 8004c84:	08005388 	.word	0x08005388
 8004c88:	08005392 	.word	0x08005392
 8004c8c:	00000000 	.word	0x00000000
 8004c90:	08004a43 	.word	0x08004a43
 8004c94:	0800538e 	.word	0x0800538e

08004c98 <_printf_common>:
 8004c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	4698      	mov	r8, r3
 8004ca0:	688a      	ldr	r2, [r1, #8]
 8004ca2:	690b      	ldr	r3, [r1, #16]
 8004ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bfb8      	it	lt
 8004cac:	4613      	movlt	r3, r2
 8004cae:	6033      	str	r3, [r6, #0]
 8004cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	b10a      	cbz	r2, 8004cbe <_printf_common+0x26>
 8004cba:	3301      	adds	r3, #1
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	0699      	lsls	r1, r3, #26
 8004cc2:	bf42      	ittt	mi
 8004cc4:	6833      	ldrmi	r3, [r6, #0]
 8004cc6:	3302      	addmi	r3, #2
 8004cc8:	6033      	strmi	r3, [r6, #0]
 8004cca:	6825      	ldr	r5, [r4, #0]
 8004ccc:	f015 0506 	ands.w	r5, r5, #6
 8004cd0:	d106      	bne.n	8004ce0 <_printf_common+0x48>
 8004cd2:	f104 0a19 	add.w	sl, r4, #25
 8004cd6:	68e3      	ldr	r3, [r4, #12]
 8004cd8:	6832      	ldr	r2, [r6, #0]
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	42ab      	cmp	r3, r5
 8004cde:	dc26      	bgt.n	8004d2e <_printf_common+0x96>
 8004ce0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ce4:	6822      	ldr	r2, [r4, #0]
 8004ce6:	3b00      	subs	r3, #0
 8004ce8:	bf18      	it	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	0692      	lsls	r2, r2, #26
 8004cee:	d42b      	bmi.n	8004d48 <_printf_common+0xb0>
 8004cf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	47c8      	blx	r9
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d01e      	beq.n	8004d3c <_printf_common+0xa4>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	6922      	ldr	r2, [r4, #16]
 8004d02:	f003 0306 	and.w	r3, r3, #6
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	bf02      	ittt	eq
 8004d0a:	68e5      	ldreq	r5, [r4, #12]
 8004d0c:	6833      	ldreq	r3, [r6, #0]
 8004d0e:	1aed      	subeq	r5, r5, r3
 8004d10:	68a3      	ldr	r3, [r4, #8]
 8004d12:	bf0c      	ite	eq
 8004d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d18:	2500      	movne	r5, #0
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	bfc4      	itt	gt
 8004d1e:	1a9b      	subgt	r3, r3, r2
 8004d20:	18ed      	addgt	r5, r5, r3
 8004d22:	2600      	movs	r6, #0
 8004d24:	341a      	adds	r4, #26
 8004d26:	42b5      	cmp	r5, r6
 8004d28:	d11a      	bne.n	8004d60 <_printf_common+0xc8>
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	e008      	b.n	8004d40 <_printf_common+0xa8>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4652      	mov	r2, sl
 8004d32:	4641      	mov	r1, r8
 8004d34:	4638      	mov	r0, r7
 8004d36:	47c8      	blx	r9
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d103      	bne.n	8004d44 <_printf_common+0xac>
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d44:	3501      	adds	r5, #1
 8004d46:	e7c6      	b.n	8004cd6 <_printf_common+0x3e>
 8004d48:	18e1      	adds	r1, r4, r3
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	2030      	movs	r0, #48	@ 0x30
 8004d4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d52:	4422      	add	r2, r4
 8004d54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	e7c7      	b.n	8004cf0 <_printf_common+0x58>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4622      	mov	r2, r4
 8004d64:	4641      	mov	r1, r8
 8004d66:	4638      	mov	r0, r7
 8004d68:	47c8      	blx	r9
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d0e6      	beq.n	8004d3c <_printf_common+0xa4>
 8004d6e:	3601      	adds	r6, #1
 8004d70:	e7d9      	b.n	8004d26 <_printf_common+0x8e>
	...

08004d74 <_printf_i>:
 8004d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	7e0f      	ldrb	r7, [r1, #24]
 8004d7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d7c:	2f78      	cmp	r7, #120	@ 0x78
 8004d7e:	4691      	mov	r9, r2
 8004d80:	4680      	mov	r8, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	469a      	mov	sl, r3
 8004d86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d8a:	d807      	bhi.n	8004d9c <_printf_i+0x28>
 8004d8c:	2f62      	cmp	r7, #98	@ 0x62
 8004d8e:	d80a      	bhi.n	8004da6 <_printf_i+0x32>
 8004d90:	2f00      	cmp	r7, #0
 8004d92:	f000 80d2 	beq.w	8004f3a <_printf_i+0x1c6>
 8004d96:	2f58      	cmp	r7, #88	@ 0x58
 8004d98:	f000 80b9 	beq.w	8004f0e <_printf_i+0x19a>
 8004d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004da0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004da4:	e03a      	b.n	8004e1c <_printf_i+0xa8>
 8004da6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004daa:	2b15      	cmp	r3, #21
 8004dac:	d8f6      	bhi.n	8004d9c <_printf_i+0x28>
 8004dae:	a101      	add	r1, pc, #4	@ (adr r1, 8004db4 <_printf_i+0x40>)
 8004db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004db4:	08004e0d 	.word	0x08004e0d
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004d9d 	.word	0x08004d9d
 8004dc0:	08004d9d 	.word	0x08004d9d
 8004dc4:	08004d9d 	.word	0x08004d9d
 8004dc8:	08004d9d 	.word	0x08004d9d
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004d9d 	.word	0x08004d9d
 8004dd4:	08004d9d 	.word	0x08004d9d
 8004dd8:	08004d9d 	.word	0x08004d9d
 8004ddc:	08004d9d 	.word	0x08004d9d
 8004de0:	08004f21 	.word	0x08004f21
 8004de4:	08004e4b 	.word	0x08004e4b
 8004de8:	08004edb 	.word	0x08004edb
 8004dec:	08004d9d 	.word	0x08004d9d
 8004df0:	08004d9d 	.word	0x08004d9d
 8004df4:	08004f43 	.word	0x08004f43
 8004df8:	08004d9d 	.word	0x08004d9d
 8004dfc:	08004e4b 	.word	0x08004e4b
 8004e00:	08004d9d 	.word	0x08004d9d
 8004e04:	08004d9d 	.word	0x08004d9d
 8004e08:	08004ee3 	.word	0x08004ee3
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6032      	str	r2, [r6, #0]
 8004e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e09d      	b.n	8004f5c <_printf_i+0x1e8>
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	1d19      	adds	r1, r3, #4
 8004e26:	6031      	str	r1, [r6, #0]
 8004e28:	0606      	lsls	r6, r0, #24
 8004e2a:	d501      	bpl.n	8004e30 <_printf_i+0xbc>
 8004e2c:	681d      	ldr	r5, [r3, #0]
 8004e2e:	e003      	b.n	8004e38 <_printf_i+0xc4>
 8004e30:	0645      	lsls	r5, r0, #25
 8004e32:	d5fb      	bpl.n	8004e2c <_printf_i+0xb8>
 8004e34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	da03      	bge.n	8004e44 <_printf_i+0xd0>
 8004e3c:	232d      	movs	r3, #45	@ 0x2d
 8004e3e:	426d      	negs	r5, r5
 8004e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e44:	4859      	ldr	r0, [pc, #356]	@ (8004fac <_printf_i+0x238>)
 8004e46:	230a      	movs	r3, #10
 8004e48:	e011      	b.n	8004e6e <_printf_i+0xfa>
 8004e4a:	6821      	ldr	r1, [r4, #0]
 8004e4c:	6833      	ldr	r3, [r6, #0]
 8004e4e:	0608      	lsls	r0, r1, #24
 8004e50:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e54:	d402      	bmi.n	8004e5c <_printf_i+0xe8>
 8004e56:	0649      	lsls	r1, r1, #25
 8004e58:	bf48      	it	mi
 8004e5a:	b2ad      	uxthmi	r5, r5
 8004e5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e5e:	4853      	ldr	r0, [pc, #332]	@ (8004fac <_printf_i+0x238>)
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	bf14      	ite	ne
 8004e64:	230a      	movne	r3, #10
 8004e66:	2308      	moveq	r3, #8
 8004e68:	2100      	movs	r1, #0
 8004e6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e6e:	6866      	ldr	r6, [r4, #4]
 8004e70:	60a6      	str	r6, [r4, #8]
 8004e72:	2e00      	cmp	r6, #0
 8004e74:	bfa2      	ittt	ge
 8004e76:	6821      	ldrge	r1, [r4, #0]
 8004e78:	f021 0104 	bicge.w	r1, r1, #4
 8004e7c:	6021      	strge	r1, [r4, #0]
 8004e7e:	b90d      	cbnz	r5, 8004e84 <_printf_i+0x110>
 8004e80:	2e00      	cmp	r6, #0
 8004e82:	d04b      	beq.n	8004f1c <_printf_i+0x1a8>
 8004e84:	4616      	mov	r6, r2
 8004e86:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e8a:	fb03 5711 	mls	r7, r3, r1, r5
 8004e8e:	5dc7      	ldrb	r7, [r0, r7]
 8004e90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e94:	462f      	mov	r7, r5
 8004e96:	42bb      	cmp	r3, r7
 8004e98:	460d      	mov	r5, r1
 8004e9a:	d9f4      	bls.n	8004e86 <_printf_i+0x112>
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d10b      	bne.n	8004eb8 <_printf_i+0x144>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	07df      	lsls	r7, r3, #31
 8004ea4:	d508      	bpl.n	8004eb8 <_printf_i+0x144>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	6861      	ldr	r1, [r4, #4]
 8004eaa:	4299      	cmp	r1, r3
 8004eac:	bfde      	ittt	le
 8004eae:	2330      	movle	r3, #48	@ 0x30
 8004eb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004eb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004eb8:	1b92      	subs	r2, r2, r6
 8004eba:	6122      	str	r2, [r4, #16]
 8004ebc:	f8cd a000 	str.w	sl, [sp]
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	aa03      	add	r2, sp, #12
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	f7ff fee6 	bl	8004c98 <_printf_common>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d14a      	bne.n	8004f66 <_printf_i+0x1f2>
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	b004      	add	sp, #16
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	f043 0320 	orr.w	r3, r3, #32
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	4833      	ldr	r0, [pc, #204]	@ (8004fb0 <_printf_i+0x23c>)
 8004ee4:	2778      	movs	r7, #120	@ 0x78
 8004ee6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	6831      	ldr	r1, [r6, #0]
 8004eee:	061f      	lsls	r7, r3, #24
 8004ef0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ef4:	d402      	bmi.n	8004efc <_printf_i+0x188>
 8004ef6:	065f      	lsls	r7, r3, #25
 8004ef8:	bf48      	it	mi
 8004efa:	b2ad      	uxthmi	r5, r5
 8004efc:	6031      	str	r1, [r6, #0]
 8004efe:	07d9      	lsls	r1, r3, #31
 8004f00:	bf44      	itt	mi
 8004f02:	f043 0320 	orrmi.w	r3, r3, #32
 8004f06:	6023      	strmi	r3, [r4, #0]
 8004f08:	b11d      	cbz	r5, 8004f12 <_printf_i+0x19e>
 8004f0a:	2310      	movs	r3, #16
 8004f0c:	e7ac      	b.n	8004e68 <_printf_i+0xf4>
 8004f0e:	4827      	ldr	r0, [pc, #156]	@ (8004fac <_printf_i+0x238>)
 8004f10:	e7e9      	b.n	8004ee6 <_printf_i+0x172>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	f023 0320 	bic.w	r3, r3, #32
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	e7f6      	b.n	8004f0a <_printf_i+0x196>
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	e7bd      	b.n	8004e9c <_printf_i+0x128>
 8004f20:	6833      	ldr	r3, [r6, #0]
 8004f22:	6825      	ldr	r5, [r4, #0]
 8004f24:	6961      	ldr	r1, [r4, #20]
 8004f26:	1d18      	adds	r0, r3, #4
 8004f28:	6030      	str	r0, [r6, #0]
 8004f2a:	062e      	lsls	r6, r5, #24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	d501      	bpl.n	8004f34 <_printf_i+0x1c0>
 8004f30:	6019      	str	r1, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <_printf_i+0x1c6>
 8004f34:	0668      	lsls	r0, r5, #25
 8004f36:	d5fb      	bpl.n	8004f30 <_printf_i+0x1bc>
 8004f38:	8019      	strh	r1, [r3, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	4616      	mov	r6, r2
 8004f40:	e7bc      	b.n	8004ebc <_printf_i+0x148>
 8004f42:	6833      	ldr	r3, [r6, #0]
 8004f44:	1d1a      	adds	r2, r3, #4
 8004f46:	6032      	str	r2, [r6, #0]
 8004f48:	681e      	ldr	r6, [r3, #0]
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7fb f966 	bl	8000220 <memchr>
 8004f54:	b108      	cbz	r0, 8004f5a <_printf_i+0x1e6>
 8004f56:	1b80      	subs	r0, r0, r6
 8004f58:	6060      	str	r0, [r4, #4]
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f64:	e7aa      	b.n	8004ebc <_printf_i+0x148>
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	4632      	mov	r2, r6
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	47d0      	blx	sl
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0ad      	beq.n	8004ed0 <_printf_i+0x15c>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	079b      	lsls	r3, r3, #30
 8004f78:	d413      	bmi.n	8004fa2 <_printf_i+0x22e>
 8004f7a:	68e0      	ldr	r0, [r4, #12]
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	4298      	cmp	r0, r3
 8004f80:	bfb8      	it	lt
 8004f82:	4618      	movlt	r0, r3
 8004f84:	e7a6      	b.n	8004ed4 <_printf_i+0x160>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4632      	mov	r2, r6
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	47d0      	blx	sl
 8004f90:	3001      	adds	r0, #1
 8004f92:	d09d      	beq.n	8004ed0 <_printf_i+0x15c>
 8004f94:	3501      	adds	r5, #1
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	9903      	ldr	r1, [sp, #12]
 8004f9a:	1a5b      	subs	r3, r3, r1
 8004f9c:	42ab      	cmp	r3, r5
 8004f9e:	dcf2      	bgt.n	8004f86 <_printf_i+0x212>
 8004fa0:	e7eb      	b.n	8004f7a <_printf_i+0x206>
 8004fa2:	2500      	movs	r5, #0
 8004fa4:	f104 0619 	add.w	r6, r4, #25
 8004fa8:	e7f5      	b.n	8004f96 <_printf_i+0x222>
 8004faa:	bf00      	nop
 8004fac:	08005399 	.word	0x08005399
 8004fb0:	080053aa 	.word	0x080053aa

08004fb4 <__sflush_r>:
 8004fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbc:	0716      	lsls	r6, r2, #28
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	d454      	bmi.n	800506e <__sflush_r+0xba>
 8004fc4:	684b      	ldr	r3, [r1, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	dc02      	bgt.n	8004fd0 <__sflush_r+0x1c>
 8004fca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dd48      	ble.n	8005062 <__sflush_r+0xae>
 8004fd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	d045      	beq.n	8005062 <__sflush_r+0xae>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fdc:	682f      	ldr	r7, [r5, #0]
 8004fde:	6a21      	ldr	r1, [r4, #32]
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	d030      	beq.n	8005046 <__sflush_r+0x92>
 8004fe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	0759      	lsls	r1, r3, #29
 8004fea:	d505      	bpl.n	8004ff8 <__sflush_r+0x44>
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ff2:	b10b      	cbz	r3, 8004ff8 <__sflush_r+0x44>
 8004ff4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ffc:	6a21      	ldr	r1, [r4, #32]
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b0      	blx	r6
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	d106      	bne.n	8005016 <__sflush_r+0x62>
 8005008:	6829      	ldr	r1, [r5, #0]
 800500a:	291d      	cmp	r1, #29
 800500c:	d82b      	bhi.n	8005066 <__sflush_r+0xb2>
 800500e:	4a2a      	ldr	r2, [pc, #168]	@ (80050b8 <__sflush_r+0x104>)
 8005010:	410a      	asrs	r2, r1
 8005012:	07d6      	lsls	r6, r2, #31
 8005014:	d427      	bmi.n	8005066 <__sflush_r+0xb2>
 8005016:	2200      	movs	r2, #0
 8005018:	6062      	str	r2, [r4, #4]
 800501a:	04d9      	lsls	r1, r3, #19
 800501c:	6922      	ldr	r2, [r4, #16]
 800501e:	6022      	str	r2, [r4, #0]
 8005020:	d504      	bpl.n	800502c <__sflush_r+0x78>
 8005022:	1c42      	adds	r2, r0, #1
 8005024:	d101      	bne.n	800502a <__sflush_r+0x76>
 8005026:	682b      	ldr	r3, [r5, #0]
 8005028:	b903      	cbnz	r3, 800502c <__sflush_r+0x78>
 800502a:	6560      	str	r0, [r4, #84]	@ 0x54
 800502c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800502e:	602f      	str	r7, [r5, #0]
 8005030:	b1b9      	cbz	r1, 8005062 <__sflush_r+0xae>
 8005032:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005036:	4299      	cmp	r1, r3
 8005038:	d002      	beq.n	8005040 <__sflush_r+0x8c>
 800503a:	4628      	mov	r0, r5
 800503c:	f7ff fa9a 	bl	8004574 <_free_r>
 8005040:	2300      	movs	r3, #0
 8005042:	6363      	str	r3, [r4, #52]	@ 0x34
 8005044:	e00d      	b.n	8005062 <__sflush_r+0xae>
 8005046:	2301      	movs	r3, #1
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	4602      	mov	r2, r0
 800504e:	1c50      	adds	r0, r2, #1
 8005050:	d1c9      	bne.n	8004fe6 <__sflush_r+0x32>
 8005052:	682b      	ldr	r3, [r5, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0c6      	beq.n	8004fe6 <__sflush_r+0x32>
 8005058:	2b1d      	cmp	r3, #29
 800505a:	d001      	beq.n	8005060 <__sflush_r+0xac>
 800505c:	2b16      	cmp	r3, #22
 800505e:	d11e      	bne.n	800509e <__sflush_r+0xea>
 8005060:	602f      	str	r7, [r5, #0]
 8005062:	2000      	movs	r0, #0
 8005064:	e022      	b.n	80050ac <__sflush_r+0xf8>
 8005066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800506a:	b21b      	sxth	r3, r3
 800506c:	e01b      	b.n	80050a6 <__sflush_r+0xf2>
 800506e:	690f      	ldr	r7, [r1, #16]
 8005070:	2f00      	cmp	r7, #0
 8005072:	d0f6      	beq.n	8005062 <__sflush_r+0xae>
 8005074:	0793      	lsls	r3, r2, #30
 8005076:	680e      	ldr	r6, [r1, #0]
 8005078:	bf08      	it	eq
 800507a:	694b      	ldreq	r3, [r1, #20]
 800507c:	600f      	str	r7, [r1, #0]
 800507e:	bf18      	it	ne
 8005080:	2300      	movne	r3, #0
 8005082:	eba6 0807 	sub.w	r8, r6, r7
 8005086:	608b      	str	r3, [r1, #8]
 8005088:	f1b8 0f00 	cmp.w	r8, #0
 800508c:	dde9      	ble.n	8005062 <__sflush_r+0xae>
 800508e:	6a21      	ldr	r1, [r4, #32]
 8005090:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005092:	4643      	mov	r3, r8
 8005094:	463a      	mov	r2, r7
 8005096:	4628      	mov	r0, r5
 8005098:	47b0      	blx	r6
 800509a:	2800      	cmp	r0, #0
 800509c:	dc08      	bgt.n	80050b0 <__sflush_r+0xfc>
 800509e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b0:	4407      	add	r7, r0
 80050b2:	eba8 0800 	sub.w	r8, r8, r0
 80050b6:	e7e7      	b.n	8005088 <__sflush_r+0xd4>
 80050b8:	dfbffffe 	.word	0xdfbffffe

080050bc <_fflush_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	690b      	ldr	r3, [r1, #16]
 80050c0:	4605      	mov	r5, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	b913      	cbnz	r3, 80050cc <_fflush_r+0x10>
 80050c6:	2500      	movs	r5, #0
 80050c8:	4628      	mov	r0, r5
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	b118      	cbz	r0, 80050d6 <_fflush_r+0x1a>
 80050ce:	6a03      	ldr	r3, [r0, #32]
 80050d0:	b90b      	cbnz	r3, 80050d6 <_fflush_r+0x1a>
 80050d2:	f7ff f835 	bl	8004140 <__sinit>
 80050d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f3      	beq.n	80050c6 <_fflush_r+0xa>
 80050de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050e0:	07d0      	lsls	r0, r2, #31
 80050e2:	d404      	bmi.n	80050ee <_fflush_r+0x32>
 80050e4:	0599      	lsls	r1, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_fflush_r+0x32>
 80050e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ea:	f7ff fa40 	bl	800456e <__retarget_lock_acquire_recursive>
 80050ee:	4628      	mov	r0, r5
 80050f0:	4621      	mov	r1, r4
 80050f2:	f7ff ff5f 	bl	8004fb4 <__sflush_r>
 80050f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050f8:	07da      	lsls	r2, r3, #31
 80050fa:	4605      	mov	r5, r0
 80050fc:	d4e4      	bmi.n	80050c8 <_fflush_r+0xc>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	059b      	lsls	r3, r3, #22
 8005102:	d4e1      	bmi.n	80050c8 <_fflush_r+0xc>
 8005104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005106:	f7ff fa33 	bl	8004570 <__retarget_lock_release_recursive>
 800510a:	e7dd      	b.n	80050c8 <_fflush_r+0xc>

0800510c <__swhatbuf_r>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	460c      	mov	r4, r1
 8005110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005114:	2900      	cmp	r1, #0
 8005116:	b096      	sub	sp, #88	@ 0x58
 8005118:	4615      	mov	r5, r2
 800511a:	461e      	mov	r6, r3
 800511c:	da0d      	bge.n	800513a <__swhatbuf_r+0x2e>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	bf14      	ite	ne
 800512a:	2340      	movne	r3, #64	@ 0x40
 800512c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005130:	2000      	movs	r0, #0
 8005132:	6031      	str	r1, [r6, #0]
 8005134:	602b      	str	r3, [r5, #0]
 8005136:	b016      	add	sp, #88	@ 0x58
 8005138:	bd70      	pop	{r4, r5, r6, pc}
 800513a:	466a      	mov	r2, sp
 800513c:	f000 f862 	bl	8005204 <_fstat_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	dbec      	blt.n	800511e <__swhatbuf_r+0x12>
 8005144:	9901      	ldr	r1, [sp, #4]
 8005146:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800514a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800514e:	4259      	negs	r1, r3
 8005150:	4159      	adcs	r1, r3
 8005152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005156:	e7eb      	b.n	8005130 <__swhatbuf_r+0x24>

08005158 <__smakebuf_r>:
 8005158:	898b      	ldrh	r3, [r1, #12]
 800515a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800515c:	079d      	lsls	r5, r3, #30
 800515e:	4606      	mov	r6, r0
 8005160:	460c      	mov	r4, r1
 8005162:	d507      	bpl.n	8005174 <__smakebuf_r+0x1c>
 8005164:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	6123      	str	r3, [r4, #16]
 800516c:	2301      	movs	r3, #1
 800516e:	6163      	str	r3, [r4, #20]
 8005170:	b003      	add	sp, #12
 8005172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005174:	ab01      	add	r3, sp, #4
 8005176:	466a      	mov	r2, sp
 8005178:	f7ff ffc8 	bl	800510c <__swhatbuf_r>
 800517c:	9f00      	ldr	r7, [sp, #0]
 800517e:	4605      	mov	r5, r0
 8005180:	4639      	mov	r1, r7
 8005182:	4630      	mov	r0, r6
 8005184:	f7ff fa62 	bl	800464c <_malloc_r>
 8005188:	b948      	cbnz	r0, 800519e <__smakebuf_r+0x46>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	059a      	lsls	r2, r3, #22
 8005190:	d4ee      	bmi.n	8005170 <__smakebuf_r+0x18>
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	f043 0302 	orr.w	r3, r3, #2
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	e7e2      	b.n	8005164 <__smakebuf_r+0xc>
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	6020      	str	r0, [r4, #0]
 80051a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	9b01      	ldr	r3, [sp, #4]
 80051aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051ae:	b15b      	cbz	r3, 80051c8 <__smakebuf_r+0x70>
 80051b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 f837 	bl	8005228 <_isatty_r>
 80051ba:	b128      	cbz	r0, 80051c8 <__smakebuf_r+0x70>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	431d      	orrs	r5, r3
 80051cc:	81a5      	strh	r5, [r4, #12]
 80051ce:	e7cf      	b.n	8005170 <__smakebuf_r+0x18>

080051d0 <memmove>:
 80051d0:	4288      	cmp	r0, r1
 80051d2:	b510      	push	{r4, lr}
 80051d4:	eb01 0402 	add.w	r4, r1, r2
 80051d8:	d902      	bls.n	80051e0 <memmove+0x10>
 80051da:	4284      	cmp	r4, r0
 80051dc:	4623      	mov	r3, r4
 80051de:	d807      	bhi.n	80051f0 <memmove+0x20>
 80051e0:	1e43      	subs	r3, r0, #1
 80051e2:	42a1      	cmp	r1, r4
 80051e4:	d008      	beq.n	80051f8 <memmove+0x28>
 80051e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ee:	e7f8      	b.n	80051e2 <memmove+0x12>
 80051f0:	4402      	add	r2, r0
 80051f2:	4601      	mov	r1, r0
 80051f4:	428a      	cmp	r2, r1
 80051f6:	d100      	bne.n	80051fa <memmove+0x2a>
 80051f8:	bd10      	pop	{r4, pc}
 80051fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005202:	e7f7      	b.n	80051f4 <memmove+0x24>

08005204 <_fstat_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d07      	ldr	r5, [pc, #28]	@ (8005224 <_fstat_r+0x20>)
 8005208:	2300      	movs	r3, #0
 800520a:	4604      	mov	r4, r0
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	f7fb fddc 	bl	8000dce <_fstat>
 8005216:	1c43      	adds	r3, r0, #1
 8005218:	d102      	bne.n	8005220 <_fstat_r+0x1c>
 800521a:	682b      	ldr	r3, [r5, #0]
 800521c:	b103      	cbz	r3, 8005220 <_fstat_r+0x1c>
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	bd38      	pop	{r3, r4, r5, pc}
 8005222:	bf00      	nop
 8005224:	20000910 	.word	0x20000910

08005228 <_isatty_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d06      	ldr	r5, [pc, #24]	@ (8005244 <_isatty_r+0x1c>)
 800522c:	2300      	movs	r3, #0
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	f7fb fddb 	bl	8000dee <_isatty>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_isatty_r+0x1a>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_isatty_r+0x1a>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20000910 	.word	0x20000910

08005248 <_sbrk_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d06      	ldr	r5, [pc, #24]	@ (8005264 <_sbrk_r+0x1c>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	f7fb fde4 	bl	8000e20 <_sbrk>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_sbrk_r+0x1a>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_sbrk_r+0x1a>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20000910 	.word	0x20000910

08005268 <memcpy>:
 8005268:	440a      	add	r2, r1
 800526a:	4291      	cmp	r1, r2
 800526c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005270:	d100      	bne.n	8005274 <memcpy+0xc>
 8005272:	4770      	bx	lr
 8005274:	b510      	push	{r4, lr}
 8005276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800527e:	4291      	cmp	r1, r2
 8005280:	d1f9      	bne.n	8005276 <memcpy+0xe>
 8005282:	bd10      	pop	{r4, pc}

08005284 <_realloc_r>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	4680      	mov	r8, r0
 800528a:	4615      	mov	r5, r2
 800528c:	460c      	mov	r4, r1
 800528e:	b921      	cbnz	r1, 800529a <_realloc_r+0x16>
 8005290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005294:	4611      	mov	r1, r2
 8005296:	f7ff b9d9 	b.w	800464c <_malloc_r>
 800529a:	b92a      	cbnz	r2, 80052a8 <_realloc_r+0x24>
 800529c:	f7ff f96a 	bl	8004574 <_free_r>
 80052a0:	2400      	movs	r4, #0
 80052a2:	4620      	mov	r0, r4
 80052a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a8:	f000 f81a 	bl	80052e0 <_malloc_usable_size_r>
 80052ac:	4285      	cmp	r5, r0
 80052ae:	4606      	mov	r6, r0
 80052b0:	d802      	bhi.n	80052b8 <_realloc_r+0x34>
 80052b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052b6:	d8f4      	bhi.n	80052a2 <_realloc_r+0x1e>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4640      	mov	r0, r8
 80052bc:	f7ff f9c6 	bl	800464c <_malloc_r>
 80052c0:	4607      	mov	r7, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d0ec      	beq.n	80052a0 <_realloc_r+0x1c>
 80052c6:	42b5      	cmp	r5, r6
 80052c8:	462a      	mov	r2, r5
 80052ca:	4621      	mov	r1, r4
 80052cc:	bf28      	it	cs
 80052ce:	4632      	movcs	r2, r6
 80052d0:	f7ff ffca 	bl	8005268 <memcpy>
 80052d4:	4621      	mov	r1, r4
 80052d6:	4640      	mov	r0, r8
 80052d8:	f7ff f94c 	bl	8004574 <_free_r>
 80052dc:	463c      	mov	r4, r7
 80052de:	e7e0      	b.n	80052a2 <_realloc_r+0x1e>

080052e0 <_malloc_usable_size_r>:
 80052e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e4:	1f18      	subs	r0, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfbc      	itt	lt
 80052ea:	580b      	ldrlt	r3, [r1, r0]
 80052ec:	18c0      	addlt	r0, r0, r3
 80052ee:	4770      	bx	lr

080052f0 <_init>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr

080052fc <_fini>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr
