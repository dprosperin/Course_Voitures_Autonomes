
lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  080062c0  080062c0  000072c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065ec  080065ec  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080065ec  080065ec  000075ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f4  080065f4  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f4  080065f4  000075f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065f8  080065f8  000075f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080065fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000070  0800666c  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800666c  00008538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db23  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c4  00000000  00000000  00015bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00017d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b8  00000000  00000000  000188f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfcd  00000000  00000000  000191b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dde7  00000000  00000000  0003717d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8838  00000000  00000000  00044f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd79c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003820  00000000  00000000  000fd7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00101000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080062a8 	.word	0x080062a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080062a8 	.word	0x080062a8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000e04:	1d39      	adds	r1, r7, #4
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <__io_putchar+0x20>)
 8000e0e:	f002 f9a1 	bl	8003154 <HAL_UART_Transmit>
}
 8000e12:	bf00      	nop
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000120 	.word	0x20000120

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	@ 0x30
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fd98 	bl	800195a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f899 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 f97d 	bl	800112c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e32:	f000 f92f 	bl	8001094 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e36:	f000 f8df 	bl	8000ff8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Début des tests
#ifdef DO_TESTS
  do_all_tests();
 8000e3a:	f000 fcd3 	bl	80017e4 <do_all_tests>
#endif
  // Fin des tests
    int i = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t message[40] = "";
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2224      	movs	r2, #36	@ 0x24
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 fb85 	bl	800555c <memset>
    int a = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_UART_Receive_IT(&LIDAR_HUART, lidar_msg, size_msg);
 8000e56:	2207      	movs	r2, #7
 8000e58:	4938      	ldr	r1, [pc, #224]	@ (8000f3c <main+0x11c>)
 8000e5a:	4839      	ldr	r0, [pc, #228]	@ (8000f40 <main+0x120>)
 8000e5c:	f002 fa08 	bl	8003270 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1); // A laisser proche de la boucle while(1)
 8000e60:	2201      	movs	r2, #1
 8000e62:	4938      	ldr	r1, [pc, #224]	@ (8000f44 <main+0x124>)
 8000e64:	4838      	ldr	r0, [pc, #224]	@ (8000f48 <main+0x128>)
 8000e66:	f002 fa03 	bl	8003270 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_reception_uart2 == 1) {
 8000e6a:	4b38      	ldr	r3, [pc, #224]	@ (8000f4c <main+0x12c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d131      	bne.n	8000ed6 <main+0xb6>
	  		  if (caractere == '\n') {
 8000e72:	4b34      	ldr	r3, [pc, #208]	@ (8000f44 <main+0x124>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b0a      	cmp	r3, #10
 8000e78:	d11c      	bne.n	8000eb4 <main+0x94>
	  			  HAL_UART_Transmit(&PC_HUART, message, strlen(message), HAL_MAX_DELAY);
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff f9cf 	bl	8000220 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4639      	mov	r1, r7
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e8c:	482e      	ldr	r0, [pc, #184]	@ (8000f48 <main+0x128>)
 8000e8e:	f002 f961 	bl	8003154 <HAL_UART_Transmit>
	  			  HAL_UART_Transmit(&LIDAR_HUART, message, strlen(message), HAL_MAX_DELAY);
 8000e92:	463b      	mov	r3, r7
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff f9c3 	bl	8000220 <strlen>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4639      	mov	r1, r7
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ea4:	4826      	ldr	r0, [pc, #152]	@ (8000f40 <main+0x120>)
 8000ea6:	f002 f955 	bl	8003154 <HAL_UART_Transmit>
	  			  //printf("%s", message);

	  			  message[0] = "\0";
 8000eaa:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <main+0x130>)
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	703b      	strb	r3, [r7, #0]
	  			  i = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  		  }

	  		  message[i++] = caractere;
 8000eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000eba:	4a22      	ldr	r2, [pc, #136]	@ (8000f44 <main+0x124>)
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	3330      	adds	r3, #48	@ 0x30
 8000ec0:	443b      	add	r3, r7
 8000ec2:	f803 2c30 	strb.w	r2, [r3, #-48]
	  		  flag_reception_uart2 = 0;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <main+0x12c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]

	  		  HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	491d      	ldr	r1, [pc, #116]	@ (8000f44 <main+0x124>)
 8000ed0:	481d      	ldr	r0, [pc, #116]	@ (8000f48 <main+0x128>)
 8000ed2:	f002 f9cd 	bl	8003270 <HAL_UART_Receive_IT>

	  	  }


	  if (flag_reception_uart1 == 1  && a < number_point) {
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <main+0x134>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d124      	bne.n	8000f28 <main+0x108>
 8000ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee0:	2b31      	cmp	r3, #49	@ 0x31
 8000ee2:	dc21      	bgt.n	8000f28 <main+0x108>
	  	  		  flag_reception_uart1 = 0;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <main+0x134>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
	  	  		  HAL_UART_Receive_IT(&huart1, lidar_msg[a], size_msg);
 8000eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000eec:	4613      	mov	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <main+0x11c>)
 8000ef4:	4413      	add	r3, r2
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <main+0x120>)
 8000efc:	f002 f9b8 	bl	8003270 <HAL_UART_Receive_IT>
	  	  		  distance[a] = lidar_distance(lidar_msg[a]);
 8000f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	4a0c      	ldr	r2, [pc, #48]	@ (8000f3c <main+0x11c>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f977 	bl	8001200 <lidar_distance>
 8000f12:	eef0 7a40 	vmov.f32	s15, s0
 8000f16:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <main+0x138>)
 8000f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	edc3 7a00 	vstr	s15, [r3]
	  	  		  a++;
 8000f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f24:	3301      	adds	r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
	  }


	  if (number_point == a) {
 8000f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f2a:	2b32      	cmp	r3, #50	@ 0x32
 8000f2c:	d19d      	bne.n	8000e6a <main+0x4a>
		  lidar_send_stop();
 8000f2e:	f000 fa09 	bl	8001344 <lidar_send_stop>
		  printf("Fin capture");
 8000f32:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <main+0x13c>)
 8000f34:	f004 faa2 	bl	800547c <iprintf>
	  if (flag_reception_uart2 == 1) {
 8000f38:	e797      	b.n	8000e6a <main+0x4a>
 8000f3a:	bf00      	nop
 8000f3c:	200001b8 	.word	0x200001b8
 8000f40:	2000008c 	.word	0x2000008c
 8000f44:	200003e0 	.word	0x200003e0
 8000f48:	20000120 	.word	0x20000120
 8000f4c:	200001b4 	.word	0x200001b4
 8000f50:	080062c0 	.word	0x080062c0
 8000f54:	200001b5 	.word	0x200001b5
 8000f58:	20000318 	.word	0x20000318
 8000f5c:	080062c4 	.word	0x080062c4

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	2238      	movs	r2, #56	@ 0x38
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f004 faf4 	bl	800555c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f001 f8c4 	bl	8002110 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f92:	2340      	movs	r3, #64	@ 0x40
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fa2:	2355      	movs	r3, #85	@ 0x55
 8000fa4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f95e 	bl	8002278 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fc2:	f000 fa21 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fc5c 	bl	800289c <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fea:	f000 fa0d 	bl	8001408 <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3750      	adds	r7, #80	@ 0x50
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8000ffe:	4a23      	ldr	r2, [pc, #140]	@ (800108c <MX_USART1_UART_Init+0x94>)
 8001000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001002:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001004:	4a22      	ldr	r2, [pc, #136]	@ (8001090 <MX_USART1_UART_Init+0x98>)
 8001006:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800100e:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 800101c:	220c      	movs	r2, #12
 800101e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103e:	4812      	ldr	r0, [pc, #72]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001040:	f002 f838 	bl	80030b4 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800104a:	f000 f9dd 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104e:	2100      	movs	r1, #0
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001052:	f004 f856 	bl	8005102 <HAL_UARTEx_SetTxFifoThreshold>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800105c:	f000 f9d4 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001064:	f004 f88b 	bl	800517e <HAL_UARTEx_SetRxFifoThreshold>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800106e:	f000 f9cb 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_USART1_UART_Init+0x90>)
 8001074:	f004 f80c 	bl	8005090 <HAL_UARTEx_DisableFifoMode>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800107e:	f000 f9c3 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000008c 	.word	0x2000008c
 800108c:	40013800 	.word	0x40013800
 8001090:	000f4240 	.word	0x000f4240

08001094 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <MX_USART2_UART_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010de:	f001 ffe9 	bl	80030b4 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010e8:	f000 f98e 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 80010f0:	f004 f807 	bl	8005102 <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 f985 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 8001102:	f004 f83c 	bl	800517e <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 f97c 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_USART2_UART_Init+0x90>)
 8001112:	f003 ffbd 	bl	8005090 <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 f974 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000120 	.word	0x20000120
 8001128:	40004400 	.word	0x40004400

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_GPIO_Init+0x78>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <MX_GPIO_Init+0x78>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_GPIO_Init+0x78>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_GPIO_Init+0x78>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <MX_GPIO_Init+0x78>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_GPIO_Init+0x78>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001178:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <MX_GPIO_Init+0x7c>)
 800117a:	f000 ffb1 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800117e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4619      	mov	r1, r3
 8001196:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_GPIO_Init+0x7c>)
 8001198:	f000 fe20 	bl	8001ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <HAL_UART_RxCpltCallback+0x3c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d107      	bne.n	80011ce <HAL_UART_RxCpltCallback+0x22>
		flag_reception_uart2 = 1;
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <HAL_UART_RxCpltCallback+0x40>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
		/*
		 * Relancer la réception dans l'interruption
	     */
		HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	490a      	ldr	r1, [pc, #40]	@ (80011f0 <HAL_UART_RxCpltCallback+0x44>)
 80011c8:	480a      	ldr	r0, [pc, #40]	@ (80011f4 <HAL_UART_RxCpltCallback+0x48>)
 80011ca:	f002 f851 	bl	8003270 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART1) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <HAL_UART_RxCpltCallback+0x4c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d102      	bne.n	80011de <HAL_UART_RxCpltCallback+0x32>
		flag_reception_uart1 = 1;
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_UART_RxCpltCallback+0x50>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
	}
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40004400 	.word	0x40004400
 80011ec:	200001b4 	.word	0x200001b4
 80011f0:	200003e0 	.word	0x200003e0
 80011f4:	20000120 	.word	0x20000120
 80011f8:	40013800 	.word	0x40013800
 80011fc:	200001b5 	.word	0x200001b5

08001200 <lidar_distance>:


float lidar_distance(frame_t frame) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
   /**
	 * @brief Calcule la distance mesurée d'un point en mm
	 * @param la trame UART reçu
	 * @retval La distance entre le LIDAR et le point en mm
	 */
	uint16_t distance = (((uint16_t) frame[6] << 8) & 0xFF00) | (uint16_t) frame[5];
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3306      	adds	r3, #6
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3305      	adds	r3, #5
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21b      	sxth	r3, r3
 800121e:	81fb      	strh	r3, [r7, #14]
	return distance / 4.0;
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9a6 	bl	8000574 <__aeabi_i2d>
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <lidar_distance+0x50>)
 800122e:	f7ff fb35 	bl	800089c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fc17 	bl	8000a6c <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	ee07 3a90 	vmov	s15, r3
}
 8001244:	eeb0 0a67 	vmov.f32	s0, s15
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40100000 	.word	0x40100000

08001254 <lidar_angle>:

float lidar_angle(frame_t frame)
{  // TODO: Les tests ne passent pas
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	 * @brief Calcule la l'angle entre l'origine et le poin en degré
	 * @param la trame UART reçu
	 * @retval La valeu de l'angle en degrée
	 */

	uint16_t angle = (((uint16_t) frame[4] << 8) & 0xFF00) | (uint16_t) frame[3];
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3304      	adds	r3, #4
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3303      	adds	r3, #3
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	81fb      	strh	r3, [r7, #14]

	// On retire le bit de vérification C
	angle >>= 1;
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	81fb      	strh	r3, [r7, #14]

	return angle / 64.0;
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f979 	bl	8000574 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <lidar_angle+0x54>)
 8001288:	f7ff fb08 	bl	800089c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fbea 	bl	8000a6c <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	ee07 3a90 	vmov	s15, r3

}
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40500000 	.word	0x40500000

080012ac <lidar_check_bit>:

bool lidar_check_bit(frame_t frame)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	 * @brief Retourne le bit de vérification qui vaut en permamence 1
	 * @param la trame UART reçu
	 * @retval La valeur de c
	 */

	return frame[3] & 0x1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3303      	adds	r3, #3
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <lidar_check_inversed_start_flag_bit>:

bool lidar_check_inversed_start_flag_bit(frame_t frame)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	 * @brief Vérifie les deux drapeaux inversé et non inversé
	 * @param la trame UART reçu
	 * @retval Retourne true si la valeur du bit de start est bien l'inverse de la valeur du bit de drapeau inversé
	 */

	bool no_inversed_bit = frame[2] & 0x1;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3302      	adds	r3, #2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
	bool inversed_bit = frame[2] & 0x2;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3302      	adds	r3, #2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	73bb      	strb	r3, [r7, #14]


	return no_inversed_bit == !inversed_bit;
 8001304:	7bbb      	ldrb	r3, [r7, #14]
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	429a      	cmp	r2, r3
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <lidar_get_quality>:

uint8_t lidar_get_quality(frame_t frame)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	/**
	 * @retval Donne la valeur de la force du signal laser
	 */

	return frame[2] >> 2;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3302      	adds	r3, #2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	b2db      	uxtb	r3, r3

}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <lidar_send_stop>:
	}

}


void lidar_send_stop() {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
   /**
	 * @brief Envoi la commande d'arrêt de SCAN
	 * @retval void
	 */
	char command_stop[3] = "\xA5\x25";
 800134a:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <lidar_send_stop+0x38>)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	4611      	mov	r1, r2
 8001352:	8019      	strh	r1, [r3, #0]
 8001354:	3302      	adds	r3, #2
 8001356:	0c12      	lsrs	r2, r2, #16
 8001358:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, command_stop, strlen(command_stop), HAL_MAX_DELAY);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4618      	mov	r0, r3
 800135e:	f7fe ff5f 	bl	8000220 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	1d39      	adds	r1, r7, #4
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <lidar_send_stop+0x3c>)
 800136e:	f001 fef1 	bl	8003154 <HAL_UART_Transmit>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	080062d0 	.word	0x080062d0
 8001380:	2000008c 	.word	0x2000008c

08001384 <HAL_UART_ErrorCallback>:
	 */
	char command_get_info[3] = "\xA5\x50";
	HAL_UART_Transmit(&huart1, command_get_info, strlen(command_get_info), HAL_MAX_DELAY);
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_UART_ErrorCallback+0x1c>
        // Gestion de l'erreur de framing
        printf("Erreur de framing detectee.\n");
 800139a:	4815      	ldr	r0, [pc, #84]	@ (80013f0 <HAL_UART_ErrorCallback+0x6c>)
 800139c:	f004 f8d6 	bl	800554c <puts>
    }
    if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_UART_ErrorCallback+0x30>
        // Gestion de l'erreur d'overrun
        printf("Erreur d'overrun detectee.\n");
 80013ae:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <HAL_UART_ErrorCallback+0x70>)
 80013b0:	f004 f8cc 	bl	800554c <puts>
    }
    if (huart->ErrorCode & HAL_UART_ERROR_PE) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <HAL_UART_ErrorCallback+0x44>
        // Gestion de l'erreur de parité
        printf("Erreur de parité detectee.\n");
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <HAL_UART_ErrorCallback+0x74>)
 80013c4:	f004 f8c2 	bl	800554c <puts>
    }
    if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <HAL_UART_ErrorCallback+0x58>
        // Gestion de l'erreur bruit
        printf("Erreur de bruit detectee.\n");
 80013d6:	4809      	ldr	r0, [pc, #36]	@ (80013fc <HAL_UART_ErrorCallback+0x78>)
 80013d8:	f004 f8b8 	bl	800554c <puts>
    }
    // Réinitialise la réception pour continuer la communication
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	4908      	ldr	r1, [pc, #32]	@ (8001400 <HAL_UART_ErrorCallback+0x7c>)
 80013e0:	4808      	ldr	r0, [pc, #32]	@ (8001404 <HAL_UART_ErrorCallback+0x80>)
 80013e2:	f001 ff45 	bl	8003270 <HAL_UART_Receive_IT>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	080062e0 	.word	0x080062e0
 80013f4:	080062fc 	.word	0x080062fc
 80013f8:	08006318 	.word	0x08006318
 80013fc:	08006334 	.word	0x08006334
 8001400:	200003e0 	.word	0x200003e0
 8001404:	20000120 	.word	0x20000120

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <Error_Handler+0x8>

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_MspInit+0x44>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <HAL_MspInit+0x44>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6613      	str	r3, [r2, #96]	@ 0x60
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_MspInit+0x44>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_MspInit+0x44>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143c:	6593      	str	r3, [r2, #88]	@ 0x58
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800144a:	f000 ff05 	bl	8002258 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b09c      	sub	sp, #112	@ 0x70
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	2244      	movs	r2, #68	@ 0x44
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f004 f86d 	bl	800555c <memset>
  if(huart->Instance==USART1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a46      	ldr	r2, [pc, #280]	@ (80015a0 <HAL_UART_MspInit+0x144>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d140      	bne.n	800150e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f001 fc1b 	bl	8002cd4 <HAL_RCCEx_PeriphCLKConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a4:	f7ff ffb0 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a8:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 80014aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ac:	4a3d      	ldr	r2, [pc, #244]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 80014ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b4:	4b3b      	ldr	r3, [pc, #236]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 80014b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b38      	ldr	r3, [pc, #224]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	4a37      	ldr	r2, [pc, #220]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014d8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ea:	2307      	movs	r3, #7
 80014ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f8:	f000 fc70 	bl	8001ddc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2025      	movs	r0, #37	@ 0x25
 8001502:	f000 fb76 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001506:	2025      	movs	r0, #37	@ 0x25
 8001508:	f000 fb8d 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800150c:	e043      	b.n	8001596 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a25      	ldr	r2, [pc, #148]	@ (80015a8 <HAL_UART_MspInit+0x14c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d13e      	bne.n	8001596 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	4618      	mov	r0, r3
 8001526:	f001 fbd5 	bl	8002cd4 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001530:	f7ff ff6a 	bl	8001408 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	4a1a      	ldr	r2, [pc, #104]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 800153a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001564:	230c      	movs	r3, #12
 8001566:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001574:	2307      	movs	r3, #7
 8001576:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800157c:	4619      	mov	r1, r3
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f000 fc2b 	bl	8001ddc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2026      	movs	r0, #38	@ 0x26
 800158c:	f000 fb31 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001590:	2026      	movs	r0, #38	@ 0x26
 8001592:	f000 fb48 	bl	8001c26 <HAL_NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3770      	adds	r7, #112	@ 0x70
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40004400 	.word	0x40004400

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <NMI_Handler+0x4>

080015b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <MemManage_Handler+0x4>

080015c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001602:	f000 f9fd 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001610:	4802      	ldr	r0, [pc, #8]	@ (800161c <USART1_IRQHandler+0x10>)
 8001612:	f001 fe79 	bl	8003308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000008c 	.word	0x2000008c

08001620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <USART2_IRQHandler+0x10>)
 8001626:	f001 fe6f 	bl	8003308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000120 	.word	0x20000120

08001634 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_kill>:

int _kill(int pid, int sig)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800164e:	f003 ff8d 	bl	800556c <__errno>
 8001652:	4603      	mov	r3, r0
 8001654:	2216      	movs	r2, #22
 8001656:	601a      	str	r2, [r3, #0]
  return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_exit>:

void _exit (int status)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800166c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ffe7 	bl	8001644 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001676:	bf00      	nop
 8001678:	e7fd      	b.n	8001676 <_exit+0x12>

0800167a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e00a      	b.n	80016a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168c:	f3af 8000 	nop.w
 8001690:	4601      	mov	r1, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf0      	blt.n	800168c <_read+0x12>
  }

  return len;
 80016aa:	687b      	ldr	r3, [r7, #4]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e009      	b.n	80016da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb94 	bl	8000dfc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbf1      	blt.n	80016c6 <_write+0x12>
  }
  return len;
 80016e2:	687b      	ldr	r3, [r7, #4]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_close>:

int _close(int file)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001714:	605a      	str	r2, [r3, #4]
  return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_isatty>:

int _isatty(int file)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f003 fef2 	bl	800556c <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20008000 	.word	0x20008000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200003e4 	.word	0x200003e4
 80017bc:	20000538 	.word	0x20000538

080017c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <do_all_tests>:
		0x28,
		0x00
};

void do_all_tests()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	do_lidar_distance_test();
 80017e8:	f000 f80a 	bl	8001800 <do_lidar_distance_test>
	do_lidar_angle_test();
 80017ec:	f000 f826 	bl	800183c <do_lidar_angle_test>
	do_lidar_check_bit_test();
 80017f0:	f000 f842 	bl	8001878 <do_lidar_check_bit_test>
	do_lidar_check_inversed_start_flag_bit_test();
 80017f4:	f000 f858 	bl	80018a8 <do_lidar_check_inversed_start_flag_bit_test>
	do_lidar_get_quality_test();
 80017f8:	f000 f86e 	bl	80018d8 <do_lidar_get_quality_test>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <do_lidar_distance_test>:

void do_lidar_distance_test()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	assert(lidar_distance(frame_under_test) == 10 && "Distance equal to 10 mm");
 8001804:	4809      	ldr	r0, [pc, #36]	@ (800182c <do_lidar_distance_test+0x2c>)
 8001806:	f7ff fcfb 	bl	8001200 <lidar_distance>
 800180a:	eef0 7a40 	vmov.f32	s15, s0
 800180e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001812:	eef4 7a47 	vcmp.f32	s15, s14
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d005      	beq.n	8001828 <do_lidar_distance_test+0x28>
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <do_lidar_distance_test+0x30>)
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <do_lidar_distance_test+0x34>)
 8001820:	212b      	movs	r1, #43	@ 0x2b
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <do_lidar_distance_test+0x38>)
 8001824:	f003 fd38 	bl	8005298 <__assert_func>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000004 	.word	0x20000004
 8001830:	08006350 	.word	0x08006350
 8001834:	080064c8 	.word	0x080064c8
 8001838:	08006394 	.word	0x08006394

0800183c <do_lidar_angle_test>:

void do_lidar_angle_test()
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

	assert(lidar_angle(frame_under_test) == 10.0f && "Angle equal to 10 deg");
 8001840:	4809      	ldr	r0, [pc, #36]	@ (8001868 <do_lidar_angle_test+0x2c>)
 8001842:	f7ff fd07 	bl	8001254 <lidar_angle>
 8001846:	eef0 7a40 	vmov.f32	s15, s0
 800184a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800184e:	eef4 7a47 	vcmp.f32	s15, s14
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	d005      	beq.n	8001864 <do_lidar_angle_test+0x28>
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <do_lidar_angle_test+0x30>)
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <do_lidar_angle_test+0x34>)
 800185c:	2131      	movs	r1, #49	@ 0x31
 800185e:	4805      	ldr	r0, [pc, #20]	@ (8001874 <do_lidar_angle_test+0x38>)
 8001860:	f003 fd1a 	bl	8005298 <__assert_func>
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000004 	.word	0x20000004
 800186c:	080063a8 	.word	0x080063a8
 8001870:	080064e0 	.word	0x080064e0
 8001874:	08006394 	.word	0x08006394

08001878 <do_lidar_check_bit_test>:

void do_lidar_check_bit_test()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	assert(lidar_check_bit(frame_under_test) && "Should return 1");
 800187c:	4806      	ldr	r0, [pc, #24]	@ (8001898 <do_lidar_check_bit_test+0x20>)
 800187e:	f7ff fd15 	bl	80012ac <lidar_check_bit>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <do_lidar_check_bit_test+0x1c>
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <do_lidar_check_bit_test+0x24>)
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <do_lidar_check_bit_test+0x28>)
 800188c:	2136      	movs	r1, #54	@ 0x36
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <do_lidar_check_bit_test+0x2c>)
 8001890:	f003 fd02 	bl	8005298 <__assert_func>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000004 	.word	0x20000004
 800189c:	080063ec 	.word	0x080063ec
 80018a0:	080064f4 	.word	0x080064f4
 80018a4:	08006394 	.word	0x08006394

080018a8 <do_lidar_check_inversed_start_flag_bit_test>:

void do_lidar_check_inversed_start_flag_bit_test()
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	assert(lidar_check_inversed_start_flag_bit(frame_under_test) && "Should return 1");
 80018ac:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <do_lidar_check_inversed_start_flag_bit_test+0x20>)
 80018ae:	f7ff fd11 	bl	80012d4 <lidar_check_inversed_start_flag_bit>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d105      	bne.n	80018c4 <do_lidar_check_inversed_start_flag_bit_test+0x1c>
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <do_lidar_check_inversed_start_flag_bit_test+0x24>)
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <do_lidar_check_inversed_start_flag_bit_test+0x28>)
 80018bc:	213b      	movs	r1, #59	@ 0x3b
 80018be:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <do_lidar_check_inversed_start_flag_bit_test+0x2c>)
 80018c0:	f003 fcea 	bl	8005298 <__assert_func>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000004 	.word	0x20000004
 80018cc:	08006424 	.word	0x08006424
 80018d0:	0800650c 	.word	0x0800650c
 80018d4:	08006394 	.word	0x08006394

080018d8 <do_lidar_get_quality_test>:

void do_lidar_get_quality_test()
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	assert(lidar_get_quality(frame_under_test) == 10 && "Should return 1");
 80018dc:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <do_lidar_get_quality_test+0x20>)
 80018de:	f7ff fd21 	bl	8001324 <lidar_get_quality>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b0a      	cmp	r3, #10
 80018e6:	d005      	beq.n	80018f4 <do_lidar_get_quality_test+0x1c>
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <do_lidar_get_quality_test+0x24>)
 80018ea:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <do_lidar_get_quality_test+0x28>)
 80018ec:	2140      	movs	r1, #64	@ 0x40
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <do_lidar_get_quality_test+0x2c>)
 80018f0:	f003 fcd2 	bl	8005298 <__assert_func>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000004 	.word	0x20000004
 80018fc:	08006470 	.word	0x08006470
 8001900:	08006538 	.word	0x08006538
 8001904:	08006394 	.word	0x08006394

08001908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001908:	480d      	ldr	r0, [pc, #52]	@ (8001940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800190a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800190c:	f7ff ff58 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	@ (8001944 <LoopForever+0x6>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	@ (8001948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <LoopForever+0xe>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	@ (8001954 <LoopForever+0x16>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f003 fe1f 	bl	8005578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800193a:	f7ff fa71 	bl	8000e20 <main>

0800193e <LoopForever>:

LoopForever:
    b LoopForever
 800193e:	e7fe      	b.n	800193e <LoopForever>
  ldr   r0, =_estack
 8001940:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800194c:	080065fc 	.word	0x080065fc
  ldr r2, =_sbss
 8001950:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001954:	20000538 	.word	0x20000538

08001958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_2_IRQHandler>

0800195a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f939 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f80e 	bl	800198c <HAL_InitTick>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	e001      	b.n	8001980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800197c:	f7ff fd4a 	bl	8001414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001980:	79fb      	ldrb	r3, [r7, #7]

}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_InitTick+0x68>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d022      	beq.n	80019e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_InitTick+0x6c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_InitTick+0x68>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f944 	bl	8001c42 <HAL_SYSTICK_Config>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10f      	bne.n	80019e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b0f      	cmp	r3, #15
 80019c4:	d809      	bhi.n	80019da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c6:	2200      	movs	r2, #0
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ce:	f000 f910 	bl	8001bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_InitTick+0x70>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e007      	b.n	80019ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e004      	b.n	80019ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e001      	b.n	80019ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000010 	.word	0x20000010
 80019f8:	20000000 	.word	0x20000000
 80019fc:	2000000c 	.word	0x2000000c

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_IncTick+0x1c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_IncTick+0x20>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a03      	ldr	r2, [pc, #12]	@ (8001a1c <HAL_IncTick+0x1c>)
 8001a10:	6013      	str	r3, [r2, #0]
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	200003e8 	.word	0x200003e8
 8001a20:	20000010 	.word	0x20000010

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	@ (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	200003e8 	.word	0x200003e8

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	@ (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff40 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff90 	bl	8001b30 <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5f 	bl	8001adc <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff33 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa4 	bl	8001b98 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d005      	beq.n	8001c7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2204      	movs	r2, #4
 8001c76:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e037      	b.n	8001cee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 020e 	bic.w	r2, r2, #14
 8001c8c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c9c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f003 021f 	and.w	r2, r3, #31
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ce2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d00d      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2204      	movs	r2, #4
 8001d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e047      	b.n	8001dd0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 020e 	bic.w	r2, r2, #14
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001da4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001dae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
    }
  }
  return status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dea:	e15a      	b.n	80020a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 814c 	beq.w	800209c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d005      	beq.n	8001e1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d130      	bne.n	8001e7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e52:	2201      	movs	r2, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0201 	and.w	r2, r3, #1
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d017      	beq.n	8001eba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d123      	bne.n	8001f0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3208      	adds	r2, #8
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0203 	and.w	r2, r3, #3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80a6 	beq.w	800209c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f50:	4b5b      	ldr	r3, [pc, #364]	@ (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f54:	4a5a      	ldr	r2, [pc, #360]	@ (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f5c:	4b58      	ldr	r3, [pc, #352]	@ (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f68:	4a56      	ldr	r2, [pc, #344]	@ (80020c4 <HAL_GPIO_Init+0x2e8>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f92:	d01f      	beq.n	8001fd4 <HAL_GPIO_Init+0x1f8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a4c      	ldr	r2, [pc, #304]	@ (80020c8 <HAL_GPIO_Init+0x2ec>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d019      	beq.n	8001fd0 <HAL_GPIO_Init+0x1f4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4b      	ldr	r2, [pc, #300]	@ (80020cc <HAL_GPIO_Init+0x2f0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1f0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a4a      	ldr	r2, [pc, #296]	@ (80020d0 <HAL_GPIO_Init+0x2f4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1ec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a49      	ldr	r2, [pc, #292]	@ (80020d4 <HAL_GPIO_Init+0x2f8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a48      	ldr	r2, [pc, #288]	@ (80020d8 <HAL_GPIO_Init+0x2fc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1e4>
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	e00a      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc0:	2306      	movs	r3, #6
 8001fc2:	e008      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe6:	4937      	ldr	r1, [pc, #220]	@ (80020c4 <HAL_GPIO_Init+0x2e8>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff4:	4b39      	ldr	r3, [pc, #228]	@ (80020dc <HAL_GPIO_Init+0x300>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002018:	4a30      	ldr	r2, [pc, #192]	@ (80020dc <HAL_GPIO_Init+0x300>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800201e:	4b2f      	ldr	r3, [pc, #188]	@ (80020dc <HAL_GPIO_Init+0x300>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002042:	4a26      	ldr	r2, [pc, #152]	@ (80020dc <HAL_GPIO_Init+0x300>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_GPIO_Init+0x300>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800206c:	4a1b      	ldr	r2, [pc, #108]	@ (80020dc <HAL_GPIO_Init+0x300>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002072:	4b1a      	ldr	r3, [pc, #104]	@ (80020dc <HAL_GPIO_Init+0x300>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002096:	4a11      	ldr	r2, [pc, #68]	@ (80020dc <HAL_GPIO_Init+0x300>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f ae9d 	bne.w	8001dec <HAL_GPIO_Init+0x10>
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	48001400 	.word	0x48001400
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d141      	bne.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800211e:	4b4b      	ldr	r3, [pc, #300]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212a:	d131      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800212c:	4b47      	ldr	r3, [pc, #284]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002132:	4a46      	ldr	r2, [pc, #280]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800213c:	4b43      	ldr	r3, [pc, #268]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002144:	4a41      	ldr	r2, [pc, #260]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800214c:	4b40      	ldr	r3, [pc, #256]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2232      	movs	r2, #50	@ 0x32
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	4a3f      	ldr	r2, [pc, #252]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	0c9b      	lsrs	r3, r3, #18
 800215e:	3301      	adds	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002162:	e002      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3b01      	subs	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216a:	4b38      	ldr	r3, [pc, #224]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002176:	d102      	bne.n	800217e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f2      	bne.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800217e:	4b33      	ldr	r3, [pc, #204]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218a:	d158      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e057      	b.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002190:	4b2e      	ldr	r3, [pc, #184]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002196:	4a2d      	ldr	r2, [pc, #180]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800219c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021a0:	e04d      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021a8:	d141      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021aa:	4b28      	ldr	r3, [pc, #160]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b6:	d131      	bne.n	800221c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021b8:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021be:	4a23      	ldr	r2, [pc, #140]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c8:	4b20      	ldr	r3, [pc, #128]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021d0:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2232      	movs	r2, #50	@ 0x32
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	3301      	adds	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ee:	e002      	b.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002202:	d102      	bne.n	800220a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f2      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002216:	d112      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e011      	b.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800222c:	e007      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800222e:	4b07      	ldr	r3, [pc, #28]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002238:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800223c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40007000 	.word	0x40007000
 8002250:	20000000 	.word	0x20000000
 8002254:	431bde83 	.word	0x431bde83

08002258 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002266:	6093      	str	r3, [r2, #8]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40007000 	.word	0x40007000

08002278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e2fe      	b.n	8002888 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d075      	beq.n	8002382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002296:	4b97      	ldr	r3, [pc, #604]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a0:	4b94      	ldr	r3, [pc, #592]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3e>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_OscConfig+0x44>
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b8d      	ldr	r3, [pc, #564]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d05b      	beq.n	8002380 <HAL_RCC_OscConfig+0x108>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d157      	bne.n	8002380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e2d9      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x74>
 80022de:	4b85      	ldr	r3, [pc, #532]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a84      	ldr	r2, [pc, #528]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b7f      	ldr	r3, [pc, #508]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7e      	ldr	r2, [pc, #504]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b7c      	ldr	r3, [pc, #496]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7b      	ldr	r2, [pc, #492]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 8002310:	4b78      	ldr	r3, [pc, #480]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a77      	ldr	r2, [pc, #476]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b75      	ldr	r3, [pc, #468]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a74      	ldr	r2, [pc, #464]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff fb78 	bl	8001a24 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7ff fb74 	bl	8001a24 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	@ 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e29e      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234a:	4b6a      	ldr	r3, [pc, #424]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xc0>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff fb64 	bl	8001a24 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7ff fb60 	bl	8001a24 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	@ 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e28a      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002372:	4b60      	ldr	r3, [pc, #384]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0xe8>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d075      	beq.n	800247a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238e:	4b59      	ldr	r3, [pc, #356]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002398:	4b56      	ldr	r3, [pc, #344]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_OscConfig+0x136>
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d002      	beq.n	80023b4 <HAL_RCC_OscConfig+0x13c>
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d11f      	bne.n	80023f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b4:	4b4f      	ldr	r3, [pc, #316]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_OscConfig+0x154>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e25d      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b49      	ldr	r3, [pc, #292]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	4946      	ldr	r1, [pc, #280]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023e0:	4b45      	ldr	r3, [pc, #276]	@ (80024f8 <HAL_RCC_OscConfig+0x280>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fad1 	bl	800198c <HAL_InitTick>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d043      	beq.n	8002478 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e249      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d023      	beq.n	8002444 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fc:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a3c      	ldr	r2, [pc, #240]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff fb0c 	bl	8001a24 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff fb08 	bl	8001a24 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e232      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002422:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	492d      	ldr	r1, [pc, #180]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
 8002442:	e01a      	b.n	800247a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2a      	ldr	r2, [pc, #168]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800244a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff fae8 	bl	8001a24 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7ff fae4 	bl	8001a24 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e20e      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800246a:	4b22      	ldr	r3, [pc, #136]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1e0>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d041      	beq.n	800250a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248e:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002494:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7ff fac1 	bl	8001a24 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff fabd 	bl	8001a24 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1e7      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b8:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ef      	beq.n	80024a6 <HAL_RCC_OscConfig+0x22e>
 80024c6:	e020      	b.n	800250a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c8:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ce:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7ff faa4 	bl	8001a24 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024de:	e00d      	b.n	80024fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff faa0 	bl	8001a24 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d906      	bls.n	80024fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1ca      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ea      	bne.n	80024e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80a6 	beq.w	8002664 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800251c:	4b84      	ldr	r3, [pc, #528]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_OscConfig+0x2b4>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x2b6>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b7f      	ldr	r3, [pc, #508]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	4a7e      	ldr	r2, [pc, #504]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	@ 0x58
 800253e:	4b7c      	ldr	r3, [pc, #496]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800254a:	2301      	movs	r3, #1
 800254c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254e:	4b79      	ldr	r3, [pc, #484]	@ (8002734 <HAL_RCC_OscConfig+0x4bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800255a:	4b76      	ldr	r3, [pc, #472]	@ (8002734 <HAL_RCC_OscConfig+0x4bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a75      	ldr	r2, [pc, #468]	@ (8002734 <HAL_RCC_OscConfig+0x4bc>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002566:	f7ff fa5d 	bl	8001a24 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256e:	f7ff fa59 	bl	8001a24 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e183      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002580:	4b6c      	ldr	r3, [pc, #432]	@ (8002734 <HAL_RCC_OscConfig+0x4bc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_RCC_OscConfig+0x32e>
 8002594:	4b66      	ldr	r3, [pc, #408]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259a:	4a65      	ldr	r2, [pc, #404]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a4:	e024      	b.n	80025f0 <HAL_RCC_OscConfig+0x378>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d110      	bne.n	80025d0 <HAL_RCC_OscConfig+0x358>
 80025ae:	4b60      	ldr	r3, [pc, #384]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025be:	4b5c      	ldr	r3, [pc, #368]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ce:	e00f      	b.n	80025f0 <HAL_RCC_OscConfig+0x378>
 80025d0:	4b57      	ldr	r3, [pc, #348]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d6:	4a56      	ldr	r2, [pc, #344]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025e0:	4b53      	ldr	r3, [pc, #332]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	4a52      	ldr	r2, [pc, #328]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d016      	beq.n	8002626 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff fa14 	bl	8001a24 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7ff fa10 	bl	8001a24 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e138      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	4b46      	ldr	r3, [pc, #280]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ed      	beq.n	8002600 <HAL_RCC_OscConfig+0x388>
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7ff f9fd 	bl	8001a24 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7ff f9f9 	bl	8001a24 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e121      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002644:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ed      	bne.n	800262e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002658:	4b35      	ldr	r3, [pc, #212]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	4a34      	ldr	r2, [pc, #208]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d03c      	beq.n	80026ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002678:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 800267a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800267e:	4a2c      	ldr	r2, [pc, #176]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7ff f9cc 	bl	8001a24 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002690:	f7ff f9c8 	bl	8001a24 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0f2      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026a2:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80026a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ef      	beq.n	8002690 <HAL_RCC_OscConfig+0x418>
 80026b0:	e01b      	b.n	80026ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80026b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff f9af 	bl	8001a24 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ca:	f7ff f9ab 	bl	8001a24 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0d5      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026dc:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80026de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ef      	bne.n	80026ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80c9 	beq.w	8002886 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	f000 8083 	beq.w	8002808 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d15e      	bne.n	80027c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a08      	ldr	r2, [pc, #32]	@ (8002730 <HAL_RCC_OscConfig+0x4b8>)
 8002710:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7ff f985 	bl	8001a24 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	e00c      	b.n	8002738 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271e:	f7ff f981 	bl	8001a24 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d905      	bls.n	8002738 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ab      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
 8002730:	40021000 	.word	0x40021000
 8002734:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002738:	4b55      	ldr	r3, [pc, #340]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ec      	bne.n	800271e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002744:	4b52      	ldr	r3, [pc, #328]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	4b52      	ldr	r3, [pc, #328]	@ (8002894 <HAL_RCC_OscConfig+0x61c>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6a11      	ldr	r1, [r2, #32]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002754:	3a01      	subs	r2, #1
 8002756:	0112      	lsls	r2, r2, #4
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800275e:	0212      	lsls	r2, r2, #8
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002766:	0852      	lsrs	r2, r2, #1
 8002768:	3a01      	subs	r2, #1
 800276a:	0552      	lsls	r2, r2, #21
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002772:	0852      	lsrs	r2, r2, #1
 8002774:	3a01      	subs	r2, #1
 8002776:	0652      	lsls	r2, r2, #25
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800277e:	06d2      	lsls	r2, r2, #27
 8002780:	430a      	orrs	r2, r1
 8002782:	4943      	ldr	r1, [pc, #268]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 8002784:	4313      	orrs	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002788:	4b41      	ldr	r3, [pc, #260]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a40      	ldr	r2, [pc, #256]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002792:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002794:	4b3e      	ldr	r3, [pc, #248]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a3d      	ldr	r2, [pc, #244]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 800279a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800279e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff f940 	bl	8001a24 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff f93c 	bl	8001a24 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e066      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ba:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x530>
 80027c6:	e05e      	b.n	8002886 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c8:	4b31      	ldr	r3, [pc, #196]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a30      	ldr	r2, [pc, #192]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 80027ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff f926 	bl	8001a24 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff f922 	bl	8001a24 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04c      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ee:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027fa:	4b25      	ldr	r3, [pc, #148]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	4924      	ldr	r1, [pc, #144]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 8002800:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_OscConfig+0x620>)
 8002802:	4013      	ands	r3, r2
 8002804:	60cb      	str	r3, [r1, #12]
 8002806:	e03e      	b.n	8002886 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e039      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	429a      	cmp	r2, r3
 8002826:	d12c      	bne.n	8002882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	3b01      	subs	r3, #1
 8002834:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d123      	bne.n	8002882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d11b      	bne.n	8002882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d113      	bne.n	8002882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	3b01      	subs	r3, #1
 8002868:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d109      	bne.n	8002882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	019f800c 	.word	0x019f800c
 8002898:	feeefffc 	.word	0xfeeefffc

0800289c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e11e      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b91      	ldr	r3, [pc, #580]	@ (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d910      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b8e      	ldr	r3, [pc, #568]	@ (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 020f 	bic.w	r2, r3, #15
 80028ca:	498c      	ldr	r1, [pc, #560]	@ (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b8a      	ldr	r3, [pc, #552]	@ (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e106      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d073      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d129      	bne.n	800294c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f8:	4b81      	ldr	r3, [pc, #516]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0f4      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002908:	f000 f99e 	bl	8002c48 <RCC_GetSysClockFreqFromPLLSource>
 800290c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4a7c      	ldr	r2, [pc, #496]	@ (8002b04 <HAL_RCC_ClockConfig+0x268>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d93f      	bls.n	8002996 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002916:	4b7a      	ldr	r3, [pc, #488]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800292a:	2b00      	cmp	r3, #0
 800292c:	d033      	beq.n	8002996 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d12f      	bne.n	8002996 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002936:	4b72      	ldr	r3, [pc, #456]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800293e:	4a70      	ldr	r2, [pc, #448]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002944:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002946:	2380      	movs	r3, #128	@ 0x80
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e024      	b.n	8002996 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d107      	bne.n	8002964 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002954:	4b6a      	ldr	r3, [pc, #424]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0c6      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	4b66      	ldr	r3, [pc, #408]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0be      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002974:	f000 f8ce 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4a61      	ldr	r2, [pc, #388]	@ (8002b04 <HAL_RCC_ClockConfig+0x268>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d909      	bls.n	8002996 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002982:	4b5f      	ldr	r3, [pc, #380]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800298a:	4a5d      	ldr	r2, [pc, #372]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 800298c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002990:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002996:	4b5a      	ldr	r3, [pc, #360]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 0203 	bic.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4957      	ldr	r1, [pc, #348]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7ff f83c 	bl	8001a24 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b0:	f7ff f838 	bl	8001a24 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e095      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 020c 	and.w	r2, r3, #12
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1eb      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f0:	4b43      	ldr	r3, [pc, #268]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a42      	ldr	r2, [pc, #264]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a08:	4b3d      	ldr	r3, [pc, #244]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a10:	4a3b      	ldr	r2, [pc, #236]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b39      	ldr	r3, [pc, #228]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4936      	ldr	r1, [pc, #216]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b80      	cmp	r3, #128	@ 0x80
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a32:	4b33      	ldr	r3, [pc, #204]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	4a32      	ldr	r2, [pc, #200]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d21d      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 020f 	bic.w	r2, r3, #15
 8002a54:	4929      	ldr	r1, [pc, #164]	@ (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe ffe2 	bl	8001a24 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fe ffde 	bl	8001a24 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e03b      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	@ (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d1ed      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4917      	ldr	r1, [pc, #92]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490f      	ldr	r1, [pc, #60]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac6:	f000 f825 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490c      	ldr	r1, [pc, #48]	@ (8002b08 <HAL_RCC_ClockConfig+0x26c>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_RCC_ClockConfig+0x270>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_RCC_ClockConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe ff4e 	bl	800198c <HAL_InitTick>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40021000 	.word	0x40021000
 8002b04:	04c4b400 	.word	0x04c4b400
 8002b08:	080064b0 	.word	0x080064b0
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	2000000c 	.word	0x2000000c

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b26:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e047      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b2c:	4b27      	ldr	r3, [pc, #156]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d102      	bne.n	8002b3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b38:	4b26      	ldr	r3, [pc, #152]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e03e      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b3e:	4b23      	ldr	r3, [pc, #140]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d136      	bne.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b4a:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3301      	adds	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b68:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	4a16      	ldr	r2, [pc, #88]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b72:	68d2      	ldr	r2, [r2, #12]
 8002b74:	0a12      	lsrs	r2, r2, #8
 8002b76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	617b      	str	r3, [r7, #20]
      break;
 8002b80:	e00c      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b82:	4a13      	ldr	r2, [pc, #76]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4a10      	ldr	r2, [pc, #64]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	0a12      	lsrs	r2, r2, #8
 8002b90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
      break;
 8002b9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	0e5b      	lsrs	r3, r3, #25
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e001      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bbc:	693b      	ldr	r3, [r7, #16]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	007a1200 	.word	0x007a1200

08002bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	@ (8002bec <HAL_RCC_GetHCLKFreq+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bf4:	f7ff fff0 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4904      	ldr	r1, [pc, #16]	@ (8002c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	080064c0 	.word	0x080064c0

08002c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c20:	f7ff ffda 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0adb      	lsrs	r3, r3, #11
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4904      	ldr	r1, [pc, #16]	@ (8002c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	080064c0 	.word	0x080064c0

08002c48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	3301      	adds	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d10c      	bne.n	8002c86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c6c:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c76:	68d2      	ldr	r2, [r2, #12]
 8002c78:	0a12      	lsrs	r2, r2, #8
 8002c7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
    break;
 8002c84:	e00c      	b.n	8002ca0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c86:	4a12      	ldr	r2, [pc, #72]	@ (8002cd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c90:	68d2      	ldr	r2, [r2, #12]
 8002c92:	0a12      	lsrs	r2, r2, #8
 8002c94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    break;
 8002c9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0e5b      	lsrs	r3, r3, #25
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cba:	687b      	ldr	r3, [r7, #4]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	00f42400 	.word	0x00f42400

08002cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8098 	beq.w	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b43      	ldr	r3, [pc, #268]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b40      	ldr	r3, [pc, #256]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	4a3f      	ldr	r2, [pc, #252]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a39      	ldr	r2, [pc, #228]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fe7b 	bl	8001a24 <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d30:	e009      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fe fe77 	bl	8001a24 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d902      	bls.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	74fb      	strb	r3, [r7, #19]
        break;
 8002d44:	e005      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d46:	4b30      	ldr	r3, [pc, #192]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0ef      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d159      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d58:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01e      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d019      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d74:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d80:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	4a1f      	ldr	r2, [pc, #124]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d90:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	4a1b      	ldr	r2, [pc, #108]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002da0:	4a18      	ldr	r2, [pc, #96]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d016      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fe37 	bl	8001a24 <HAL_GetTick>
 8002db6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	e00b      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe fe33 	bl	8001a24 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	74fb      	strb	r3, [r7, #19]
            break;
 8002dd0:	e006      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ec      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de6:	4b07      	ldr	r3, [pc, #28]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	4903      	ldr	r1, [pc, #12]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dfc:	e008      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	74bb      	strb	r3, [r7, #18]
 8002e02:	e005      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e10:	7c7b      	ldrb	r3, [r7, #17]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4ba6      	ldr	r3, [pc, #664]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	4aa5      	ldr	r2, [pc, #660]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e2e:	4ba0      	ldr	r3, [pc, #640]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e34:	f023 0203 	bic.w	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	499c      	ldr	r1, [pc, #624]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e50:	4b97      	ldr	r3, [pc, #604]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	f023 020c 	bic.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4994      	ldr	r1, [pc, #592]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e72:	4b8f      	ldr	r3, [pc, #572]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	498b      	ldr	r1, [pc, #556]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e94:	4b86      	ldr	r3, [pc, #536]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	4983      	ldr	r1, [pc, #524]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb6:	4b7e      	ldr	r3, [pc, #504]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	497a      	ldr	r1, [pc, #488]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed8:	4b75      	ldr	r3, [pc, #468]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ede:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4972      	ldr	r1, [pc, #456]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002efa:	4b6d      	ldr	r3, [pc, #436]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4969      	ldr	r1, [pc, #420]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f1c:	4b64      	ldr	r3, [pc, #400]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4961      	ldr	r1, [pc, #388]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	4958      	ldr	r1, [pc, #352]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f60:	4b53      	ldr	r3, [pc, #332]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	4950      	ldr	r1, [pc, #320]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f80:	4b4b      	ldr	r3, [pc, #300]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a4a      	ldr	r2, [pc, #296]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f98:	4b45      	ldr	r3, [pc, #276]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa6:	4942      	ldr	r1, [pc, #264]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fc2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fd0:	4b37      	ldr	r3, [pc, #220]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4934      	ldr	r1, [pc, #208]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fee:	d105      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003008:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	4926      	ldr	r1, [pc, #152]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003022:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003028:	4b21      	ldr	r3, [pc, #132]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a20      	ldr	r2, [pc, #128]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003032:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003040:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304e:	4918      	ldr	r1, [pc, #96]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003078:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	490a      	ldr	r1, [pc, #40]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003096:	d105      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e042      	b.n	800314c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe f9bf 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2224      	movs	r2, #36	@ 0x24
 80030e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 ff08 	bl	8003f14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fc39 	bl	800397c <UART_SetConfig>
 800310a:	4603      	mov	r3, r0
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e01b      	b.n	800314c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 ff87 	bl	8004058 <UART_CheckIdleState>
 800314a:	4603      	mov	r3, r0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	@ 0x28
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	2b20      	cmp	r3, #32
 800316c:	d17b      	bne.n	8003266 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_UART_Transmit+0x26>
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e074      	b.n	8003268 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2221      	movs	r2, #33	@ 0x21
 800318a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800318e:	f7fe fc49 	bl	8001a24 <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ac:	d108      	bne.n	80031c0 <HAL_UART_Transmit+0x6c>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	e003      	b.n	80031c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031c8:	e030      	b.n	800322c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2180      	movs	r1, #128	@ 0x80
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 ffe9 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03d      	b.n	8003268 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003200:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3302      	adds	r3, #2
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e007      	b.n	800321a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	3301      	adds	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1c8      	bne.n	80031ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	2140      	movs	r1, #64	@ 0x40
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 ffb2 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e006      	b.n	8003268 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003284:	2b20      	cmp	r3, #32
 8003286:	d137      	bne.n	80032f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_UART_Receive_IT+0x24>
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e030      	b.n	80032fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <HAL_UART_Receive_IT+0x94>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d01f      	beq.n	80032e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d018      	beq.n	80032e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	613b      	str	r3, [r7, #16]
   return(result);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	69f9      	ldr	r1, [r7, #28]
 80032da:	6a3a      	ldr	r2, [r7, #32]
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e6      	bne.n	80032b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 ffca 	bl	8004288 <UART_Start_Receive_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	e000      	b.n	80032fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3728      	adds	r7, #40	@ 0x28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40008000 	.word	0x40008000

08003308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0ba      	sub	sp, #232	@ 0xe8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800332e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003332:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003336:	4013      	ands	r3, r2
 8003338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800333c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11b      	bne.n	800337c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d015      	beq.n	800337c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d105      	bne.n	8003368 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800335c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 82e3 	beq.w	8003938 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
      }
      return;
 800337a:	e2dd      	b.n	8003938 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800337c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8123 	beq.w	80035cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003386:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800338a:	4b8d      	ldr	r3, [pc, #564]	@ (80035c0 <HAL_UART_IRQHandler+0x2b8>)
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003392:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003396:	4b8b      	ldr	r3, [pc, #556]	@ (80035c4 <HAL_UART_IRQHandler+0x2bc>)
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8116 	beq.w	80035cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d011      	beq.n	80033d0 <HAL_UART_IRQHandler+0xc8>
 80033ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d011      	beq.n	8003400 <HAL_UART_IRQHandler+0xf8>
 80033dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2202      	movs	r2, #2
 80033ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	f043 0204 	orr.w	r2, r3, #4
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d011      	beq.n	8003430 <HAL_UART_IRQHandler+0x128>
 800340c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2204      	movs	r2, #4
 800341e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800343c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003448:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800344c:	4b5c      	ldr	r3, [pc, #368]	@ (80035c0 <HAL_UART_IRQHandler+0x2b8>)
 800344e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2208      	movs	r2, #8
 800345a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003462:	f043 0208 	orr.w	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_UART_IRQHandler+0x196>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800347c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800348c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8249 	beq.w	800393c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d013      	beq.n	80034de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80034b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f2:	2b40      	cmp	r3, #64	@ 0x40
 80034f4:	d005      	beq.n	8003502 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d054      	beq.n	80035ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 ffe2 	bl	80044cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003512:	2b40      	cmp	r3, #64	@ 0x40
 8003514:	d146      	bne.n	80035a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3308      	adds	r3, #8
 800351c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800352c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3308      	adds	r3, #8
 800353e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003542:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800354e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800355a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1d9      	bne.n	8003516 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003568:	2b00      	cmp	r3, #0
 800356a:	d017      	beq.n	800359c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003572:	4a15      	ldr	r2, [pc, #84]	@ (80035c8 <HAL_UART_IRQHandler+0x2c0>)
 8003574:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe fbc5 	bl	8001d0c <HAL_DMA_Abort_IT>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d019      	beq.n	80035bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003596:	4610      	mov	r0, r2
 8003598:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359a:	e00f      	b.n	80035bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7fd fef1 	bl	8001384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a2:	e00b      	b.n	80035bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd feed 	bl	8001384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035aa:	e007      	b.n	80035bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fd fee9 	bl	8001384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80035ba:	e1bf      	b.n	800393c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	bf00      	nop
    return;
 80035be:	e1bd      	b.n	800393c <HAL_UART_IRQHandler+0x634>
 80035c0:	10000001 	.word	0x10000001
 80035c4:	04000120 	.word	0x04000120
 80035c8:	08004599 	.word	0x08004599

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 8153 	bne.w	800387c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 814c 	beq.w	800387c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8145 	beq.w	800387c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2210      	movs	r2, #16
 80035f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b40      	cmp	r3, #64	@ 0x40
 8003606:	f040 80bb 	bne.w	8003780 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 818f 	beq.w	8003940 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003628:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800362c:	429a      	cmp	r2, r3
 800362e:	f080 8187 	bcs.w	8003940 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003638:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 8087 	bne.w	800375e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800366c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800367a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800367e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003686:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1da      	bne.n	8003650 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3308      	adds	r3, #8
 80036a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3308      	adds	r3, #8
 80036ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e1      	bne.n	800369a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3308      	adds	r3, #8
 80036dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3308      	adds	r3, #8
 80036f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003700:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e3      	bne.n	80036d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800372a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800372c:	f023 0310 	bic.w	r3, r3, #16
 8003730:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800373e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003740:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800374c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e4      	bne.n	800371c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fa7e 	bl	8001c5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003770:	b29b      	uxth	r3, r3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	b29b      	uxth	r3, r3
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8f3 	bl	8003964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800377e:	e0df      	b.n	8003940 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800378c:	b29b      	uxth	r3, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80d1 	beq.w	8003944 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80037a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80cc 	beq.w	8003944 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e4      	bne.n	80037ac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3308      	adds	r3, #8
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	623b      	str	r3, [r7, #32]
   return(result);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800380a:	633a      	str	r2, [r7, #48]	@ 0x30
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e1      	bne.n	80037e2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0310 	bic.w	r3, r3, #16
 8003846:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	69b9      	ldr	r1, [r7, #24]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	617b      	str	r3, [r7, #20]
   return(result);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e4      	bne.n	8003832 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800386e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f875 	bl	8003964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800387a:	e063      	b.n	8003944 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <HAL_UART_IRQHandler+0x59e>
 8003888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800388c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800389c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f001 fbd8 	bl	8005054 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038a4:	e051      	b.n	800394a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80038be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d03a      	beq.n	8003948 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
    }
    return;
 80038da:	e035      	b.n	8003948 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_UART_IRQHandler+0x5f4>
 80038e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fe65 	bl	80045c4 <UART_EndTransmit_IT>
    return;
 80038fa:	e026      	b.n	800394a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80038fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_UART_IRQHandler+0x614>
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f001 fbb1 	bl	800507c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800391a:	e016      	b.n	800394a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003920:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <HAL_UART_IRQHandler+0x642>
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800392c:	2b00      	cmp	r3, #0
 800392e:	da0c      	bge.n	800394a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f001 fb99 	bl	8005068 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003936:	e008      	b.n	800394a <HAL_UART_IRQHandler+0x642>
      return;
 8003938:	bf00      	nop
 800393a:	e006      	b.n	800394a <HAL_UART_IRQHandler+0x642>
    return;
 800393c:	bf00      	nop
 800393e:	e004      	b.n	800394a <HAL_UART_IRQHandler+0x642>
      return;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_UART_IRQHandler+0x642>
      return;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_UART_IRQHandler+0x642>
    return;
 8003948:	bf00      	nop
  }
}
 800394a:	37e8      	adds	r7, #232	@ 0xe8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b08c      	sub	sp, #48	@ 0x30
 8003982:	af00      	add	r7, sp, #0
 8003984:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4bab      	ldr	r3, [pc, #684]	@ (8003c58 <UART_SetConfig+0x2dc>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4aa0      	ldr	r2, [pc, #640]	@ (8003c5c <UART_SetConfig+0x2e0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e4:	4313      	orrs	r3, r2
 80039e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80039f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	f023 010f 	bic.w	r1, r3, #15
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a91      	ldr	r2, [pc, #580]	@ (8003c60 <UART_SetConfig+0x2e4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d125      	bne.n	8003a6c <UART_SetConfig+0xf0>
 8003a20:	4b90      	ldr	r3, [pc, #576]	@ (8003c64 <UART_SetConfig+0x2e8>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d81a      	bhi.n	8003a64 <UART_SetConfig+0xe8>
 8003a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <UART_SetConfig+0xb8>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a45 	.word	0x08003a45
 8003a38:	08003a55 	.word	0x08003a55
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a5d 	.word	0x08003a5d
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4a:	e0d6      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a52:	e0d2      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003a54:	2304      	movs	r3, #4
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5a:	e0ce      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a62:	e0ca      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003a64:	2310      	movs	r3, #16
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6a:	e0c6      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a7d      	ldr	r2, [pc, #500]	@ (8003c68 <UART_SetConfig+0x2ec>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d138      	bne.n	8003ae8 <UART_SetConfig+0x16c>
 8003a76:	4b7b      	ldr	r3, [pc, #492]	@ (8003c64 <UART_SetConfig+0x2e8>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d82d      	bhi.n	8003ae0 <UART_SetConfig+0x164>
 8003a84:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <UART_SetConfig+0x110>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003ae1 	.word	0x08003ae1
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003ae1 	.word	0x08003ae1
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003ae1 	.word	0x08003ae1
 8003aa4:	08003ae1 	.word	0x08003ae1
 8003aa8:	08003ae1 	.word	0x08003ae1
 8003aac:	08003ac9 	.word	0x08003ac9
 8003ab0:	08003ae1 	.word	0x08003ae1
 8003ab4:	08003ae1 	.word	0x08003ae1
 8003ab8:	08003ae1 	.word	0x08003ae1
 8003abc:	08003ad9 	.word	0x08003ad9
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac6:	e098      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ace:	e094      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad6:	e090      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003ad8:	2308      	movs	r3, #8
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ade:	e08c      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae6:	e088      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a5f      	ldr	r2, [pc, #380]	@ (8003c6c <UART_SetConfig+0x2f0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d125      	bne.n	8003b3e <UART_SetConfig+0x1c2>
 8003af2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c64 <UART_SetConfig+0x2e8>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003afc:	2b30      	cmp	r3, #48	@ 0x30
 8003afe:	d016      	beq.n	8003b2e <UART_SetConfig+0x1b2>
 8003b00:	2b30      	cmp	r3, #48	@ 0x30
 8003b02:	d818      	bhi.n	8003b36 <UART_SetConfig+0x1ba>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d00a      	beq.n	8003b1e <UART_SetConfig+0x1a2>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d814      	bhi.n	8003b36 <UART_SetConfig+0x1ba>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <UART_SetConfig+0x19a>
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d008      	beq.n	8003b26 <UART_SetConfig+0x1aa>
 8003b14:	e00f      	b.n	8003b36 <UART_SetConfig+0x1ba>
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1c:	e06d      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b24:	e069      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b26:	2304      	movs	r3, #4
 8003b28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2c:	e065      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b34:	e061      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b36:	2310      	movs	r3, #16
 8003b38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3c:	e05d      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a4b      	ldr	r2, [pc, #300]	@ (8003c70 <UART_SetConfig+0x2f4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d125      	bne.n	8003b94 <UART_SetConfig+0x218>
 8003b48:	4b46      	ldr	r3, [pc, #280]	@ (8003c64 <UART_SetConfig+0x2e8>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b54:	d016      	beq.n	8003b84 <UART_SetConfig+0x208>
 8003b56:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b58:	d818      	bhi.n	8003b8c <UART_SetConfig+0x210>
 8003b5a:	2b80      	cmp	r3, #128	@ 0x80
 8003b5c:	d00a      	beq.n	8003b74 <UART_SetConfig+0x1f8>
 8003b5e:	2b80      	cmp	r3, #128	@ 0x80
 8003b60:	d814      	bhi.n	8003b8c <UART_SetConfig+0x210>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <UART_SetConfig+0x1f0>
 8003b66:	2b40      	cmp	r3, #64	@ 0x40
 8003b68:	d008      	beq.n	8003b7c <UART_SetConfig+0x200>
 8003b6a:	e00f      	b.n	8003b8c <UART_SetConfig+0x210>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b72:	e042      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b74:	2302      	movs	r3, #2
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e03e      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b82:	e03a      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b84:	2308      	movs	r3, #8
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8a:	e036      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b92:	e032      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a30      	ldr	r2, [pc, #192]	@ (8003c5c <UART_SetConfig+0x2e0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d12a      	bne.n	8003bf4 <UART_SetConfig+0x278>
 8003b9e:	4b31      	ldr	r3, [pc, #196]	@ (8003c64 <UART_SetConfig+0x2e8>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ba8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bac:	d01a      	beq.n	8003be4 <UART_SetConfig+0x268>
 8003bae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bb2:	d81b      	bhi.n	8003bec <UART_SetConfig+0x270>
 8003bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb8:	d00c      	beq.n	8003bd4 <UART_SetConfig+0x258>
 8003bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bbe:	d815      	bhi.n	8003bec <UART_SetConfig+0x270>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <UART_SetConfig+0x250>
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc8:	d008      	beq.n	8003bdc <UART_SetConfig+0x260>
 8003bca:	e00f      	b.n	8003bec <UART_SetConfig+0x270>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd2:	e012      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bda:	e00e      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be2:	e00a      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003be4:	2308      	movs	r3, #8
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bea:	e006      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003bec:	2310      	movs	r3, #16
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf2:	e002      	b.n	8003bfa <UART_SetConfig+0x27e>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a17      	ldr	r2, [pc, #92]	@ (8003c5c <UART_SetConfig+0x2e0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	f040 80a8 	bne.w	8003d56 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d834      	bhi.n	8003c78 <UART_SetConfig+0x2fc>
 8003c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <UART_SetConfig+0x298>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c39 	.word	0x08003c39
 8003c18:	08003c79 	.word	0x08003c79
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c79 	.word	0x08003c79
 8003c24:	08003c47 	.word	0x08003c47
 8003c28:	08003c79 	.word	0x08003c79
 8003c2c:	08003c79 	.word	0x08003c79
 8003c30:	08003c79 	.word	0x08003c79
 8003c34:	08003c4f 	.word	0x08003c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c38:	f7fe ffda 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8003c3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c3e:	e021      	b.n	8003c84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <UART_SetConfig+0x2f8>)
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c44:	e01e      	b.n	8003c84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c46:	f7fe ff65 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8003c4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c4c:	e01a      	b.n	8003c84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c54:	e016      	b.n	8003c84 <UART_SetConfig+0x308>
 8003c56:	bf00      	nop
 8003c58:	cfff69f3 	.word	0xcfff69f3
 8003c5c:	40008000 	.word	0x40008000
 8003c60:	40013800 	.word	0x40013800
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40004400 	.word	0x40004400
 8003c6c:	40004800 	.word	0x40004800
 8003c70:	40004c00 	.word	0x40004c00
 8003c74:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 812a 	beq.w	8003ee0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	4a9e      	ldr	r2, [pc, #632]	@ (8003f0c <UART_SetConfig+0x590>)
 8003c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c96:	461a      	mov	r2, r3
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d305      	bcc.n	8003cbc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d903      	bls.n	8003cc4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003cc2:	e10d      	b.n	8003ee0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	60fa      	str	r2, [r7, #12]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	4a8e      	ldr	r2, [pc, #568]	@ (8003f0c <UART_SetConfig+0x590>)
 8003cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2200      	movs	r2, #0
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ce6:	f7fc ff11 	bl	8000b0c <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	020b      	lsls	r3, r1, #8
 8003cfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d00:	0202      	lsls	r2, r0, #8
 8003d02:	6979      	ldr	r1, [r7, #20]
 8003d04:	6849      	ldr	r1, [r1, #4]
 8003d06:	0849      	lsrs	r1, r1, #1
 8003d08:	2000      	movs	r0, #0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	eb12 0804 	adds.w	r8, r2, r4
 8003d12:	eb43 0905 	adc.w	r9, r3, r5
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	469a      	mov	sl, r3
 8003d1e:	4693      	mov	fp, r2
 8003d20:	4652      	mov	r2, sl
 8003d22:	465b      	mov	r3, fp
 8003d24:	4640      	mov	r0, r8
 8003d26:	4649      	mov	r1, r9
 8003d28:	f7fc fef0 	bl	8000b0c <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4613      	mov	r3, r2
 8003d32:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d3a:	d308      	bcc.n	8003d4e <UART_SetConfig+0x3d2>
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d42:	d204      	bcs.n	8003d4e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	e0c8      	b.n	8003ee0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d54:	e0c4      	b.n	8003ee0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5e:	d167      	bne.n	8003e30 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003d60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d828      	bhi.n	8003dba <UART_SetConfig+0x43e>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <UART_SetConfig+0x3f4>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003dbb 	.word	0x08003dbb
 8003d80:	08003dab 	.word	0x08003dab
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dbb 	.word	0x08003dbb
 8003d90:	08003db3 	.word	0x08003db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe ff2c 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8003d98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d9a:	e014      	b.n	8003dc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe ff3e 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003da0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003da2:	e010      	b.n	8003dc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da4:	4b5a      	ldr	r3, [pc, #360]	@ (8003f10 <UART_SetConfig+0x594>)
 8003da6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003da8:	e00d      	b.n	8003dc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003daa:	f7fe feb3 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8003dae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003db0:	e009      	b.n	8003dc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003db8:	e005      	b.n	8003dc6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8089 	beq.w	8003ee0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	4a4e      	ldr	r2, [pc, #312]	@ (8003f0c <UART_SetConfig+0x590>)
 8003dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003de0:	005a      	lsls	r2, r3, #1
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	441a      	add	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b0f      	cmp	r3, #15
 8003df8:	d916      	bls.n	8003e28 <UART_SetConfig+0x4ac>
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e00:	d212      	bcs.n	8003e28 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f023 030f 	bic.w	r3, r3, #15
 8003e0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	8bfb      	ldrh	r3, [r7, #30]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	8bfa      	ldrh	r2, [r7, #30]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	e05b      	b.n	8003ee0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e2e:	e057      	b.n	8003ee0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d828      	bhi.n	8003e8a <UART_SetConfig+0x50e>
 8003e38:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <UART_SetConfig+0x4c4>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	08003e6d 	.word	0x08003e6d
 8003e48:	08003e75 	.word	0x08003e75
 8003e4c:	08003e8b 	.word	0x08003e8b
 8003e50:	08003e7b 	.word	0x08003e7b
 8003e54:	08003e8b 	.word	0x08003e8b
 8003e58:	08003e8b 	.word	0x08003e8b
 8003e5c:	08003e8b 	.word	0x08003e8b
 8003e60:	08003e83 	.word	0x08003e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e64:	f7fe fec4 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8003e68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e6a:	e014      	b.n	8003e96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e6c:	f7fe fed6 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003e70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e72:	e010      	b.n	8003e96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e74:	4b26      	ldr	r3, [pc, #152]	@ (8003f10 <UART_SetConfig+0x594>)
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e78:	e00d      	b.n	8003e96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7a:	f7fe fe4b 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8003e7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e80:	e009      	b.n	8003e96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e88:	e005      	b.n	8003e96 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e94:	bf00      	nop
    }

    if (pclk != 0U)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d021      	beq.n	8003ee0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f0c <UART_SetConfig+0x590>)
 8003ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	441a      	add	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d909      	bls.n	8003eda <UART_SetConfig+0x55e>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ecc:	d205      	bcs.n	8003eda <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	e002      	b.n	8003ee0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003efc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3730      	adds	r7, #48	@ 0x30
 8003f04:	46bd      	mov	sp, r7
 8003f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0a:	bf00      	nop
 8003f0c:	08006554 	.word	0x08006554
 8003f10:	00f42400 	.word	0x00f42400

08003f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01a      	beq.n	800402a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004012:	d10a      	bne.n	800402a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b098      	sub	sp, #96	@ 0x60
 800405c:	af02      	add	r7, sp, #8
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004068:	f7fd fcdc 	bl	8001a24 <HAL_GetTick>
 800406c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b08      	cmp	r3, #8
 800407a:	d12f      	bne.n	80040dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800407c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	2200      	movs	r2, #0
 8004086:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f88e 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d022      	beq.n	80040dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e6      	bne.n	8004096 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e063      	b.n	80041a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d149      	bne.n	800417e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f2:	2200      	movs	r2, #0
 80040f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f857 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d03c      	beq.n	800417e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	623b      	str	r3, [r7, #32]
   return(result);
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004118:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004122:	633b      	str	r3, [r7, #48]	@ 0x30
 8004124:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e6      	bne.n	8004104 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	60fb      	str	r3, [r7, #12]
   return(result);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3308      	adds	r3, #8
 8004154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004156:	61fa      	str	r2, [r7, #28]
 8004158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	69b9      	ldr	r1, [r7, #24]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	617b      	str	r3, [r7, #20]
   return(result);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e012      	b.n	80041a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3758      	adds	r7, #88	@ 0x58
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041bc:	e04f      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041c4:	d04b      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7fd fc2d 	bl	8001a24 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <UART_WaitOnFlagUntilTimeout+0x30>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e04e      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d037      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b80      	cmp	r3, #128	@ 0x80
 80041f2:	d034      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d031      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d110      	bne.n	800422a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2208      	movs	r2, #8
 800420e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f95b 	bl	80044cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2208      	movs	r2, #8
 800421a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e029      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004238:	d111      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f941 	bl	80044cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e00f      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	429a      	cmp	r2, r3
 800427a:	d0a0      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004288:	b480      	push	{r7}
 800428a:	b0a3      	sub	sp, #140	@ 0x8c
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ba:	d10e      	bne.n	80042da <UART_Start_Receive_IT+0x52>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <UART_Start_Receive_IT+0x48>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80042ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042ce:	e02d      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	22ff      	movs	r2, #255	@ 0xff
 80042d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042d8:	e028      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <UART_Start_Receive_IT+0x76>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <UART_Start_Receive_IT+0x6c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	22ff      	movs	r2, #255	@ 0xff
 80042ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042f2:	e01b      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	227f      	movs	r2, #127	@ 0x7f
 80042f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042fc:	e016      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004306:	d10d      	bne.n	8004324 <UART_Start_Receive_IT+0x9c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <UART_Start_Receive_IT+0x92>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	227f      	movs	r2, #127	@ 0x7f
 8004314:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004318:	e008      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	223f      	movs	r2, #63	@ 0x3f
 800431e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004322:	e003      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2222      	movs	r2, #34	@ 0x22
 8004338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800434c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3308      	adds	r3, #8
 800435c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004360:	673a      	str	r2, [r7, #112]	@ 0x70
 8004362:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004366:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800436e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e3      	bne.n	800433c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800437c:	d14f      	bne.n	800441e <UART_Start_Receive_IT+0x196>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	429a      	cmp	r2, r3
 8004388:	d349      	bcc.n	800441e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004392:	d107      	bne.n	80043a4 <UART_Start_Receive_IT+0x11c>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d103      	bne.n	80043a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a47      	ldr	r2, [pc, #284]	@ (80044bc <UART_Start_Receive_IT+0x234>)
 80043a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80043a2:	e002      	b.n	80043aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a46      	ldr	r2, [pc, #280]	@ (80044c0 <UART_Start_Receive_IT+0x238>)
 80043a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01a      	beq.n	80043e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80043c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043d6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80043da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80043e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e4      	bne.n	80043b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004408:	64ba      	str	r2, [r7, #72]	@ 0x48
 800440a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800440e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <UART_Start_Receive_IT+0x160>
 800441c:	e046      	b.n	80044ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004426:	d107      	bne.n	8004438 <UART_Start_Receive_IT+0x1b0>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a24      	ldr	r2, [pc, #144]	@ (80044c4 <UART_Start_Receive_IT+0x23c>)
 8004434:	675a      	str	r2, [r3, #116]	@ 0x74
 8004436:	e002      	b.n	800443e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a23      	ldr	r2, [pc, #140]	@ (80044c8 <UART_Start_Receive_IT+0x240>)
 800443c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d019      	beq.n	800447a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800445a:	677b      	str	r3, [r7, #116]	@ 0x74
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004464:	637b      	str	r3, [r7, #52]	@ 0x34
 8004466:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800446a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_Start_Receive_IT+0x1be>
 8004478:	e018      	b.n	80044ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	613b      	str	r3, [r7, #16]
   return(result);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f043 0320 	orr.w	r3, r3, #32
 800448e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	69f9      	ldr	r1, [r7, #28]
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e6      	bne.n	800447a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	378c      	adds	r7, #140	@ 0x8c
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	08004ced 	.word	0x08004ced
 80044c0:	0800498d 	.word	0x0800498d
 80044c4:	080047d5 	.word	0x080047d5
 80044c8:	0800461d 	.word	0x0800461d

080044cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b095      	sub	sp, #84	@ 0x54
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80044f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e6      	bne.n	80044d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	61fb      	str	r3, [r7, #28]
   return(result);
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3308      	adds	r3, #8
 8004528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800452a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800452c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e3      	bne.n	8004506 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d118      	bne.n	8004578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	60bb      	str	r3, [r7, #8]
   return(result);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 0310 	bic.w	r3, r3, #16
 800455a:	647b      	str	r3, [r7, #68]	@ 0x44
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e6      	bne.n	8004546 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800458c:	bf00      	nop
 800458e:	3754      	adds	r7, #84	@ 0x54
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7fc fee4 	bl	8001384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6979      	ldr	r1, [r7, #20]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	613b      	str	r3, [r7, #16]
   return(result);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e6      	bne.n	80045cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff f99f 	bl	8003950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004612:	bf00      	nop
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b09c      	sub	sp, #112	@ 0x70
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800462a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004634:	2b22      	cmp	r3, #34	@ 0x22
 8004636:	f040 80be 	bne.w	80047b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004644:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004648:	b2d9      	uxtb	r1, r3
 800464a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800464e:	b2da      	uxtb	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	400a      	ands	r2, r1
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 80a1 	bne.w	80047c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e6      	bne.n	8004684 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3308      	adds	r3, #8
 80046bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3308      	adds	r3, #8
 80046d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80046d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e5      	bne.n	80046b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a33      	ldr	r2, [pc, #204]	@ (80047d0 <UART_RxISR_8BIT+0x1b4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d01f      	beq.n	8004748 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d018      	beq.n	8004748 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	623b      	str	r3, [r7, #32]
   return(result);
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800472a:	663b      	str	r3, [r7, #96]	@ 0x60
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004734:	633b      	str	r3, [r7, #48]	@ 0x30
 8004736:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800473a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e6      	bne.n	8004716 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d12e      	bne.n	80047ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	60fb      	str	r3, [r7, #12]
   return(result);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0310 	bic.w	r3, r3, #16
 800476a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	69b9      	ldr	r1, [r7, #24]
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	617b      	str	r3, [r7, #20]
   return(result);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e6      	bne.n	8004756 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b10      	cmp	r3, #16
 8004794:	d103      	bne.n	800479e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2210      	movs	r2, #16
 800479c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff f8dc 	bl	8003964 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047ac:	e00b      	b.n	80047c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc fcfc 	bl	80011ac <HAL_UART_RxCpltCallback>
}
 80047b4:	e007      	b.n	80047c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0208 	orr.w	r2, r2, #8
 80047c4:	619a      	str	r2, [r3, #24]
}
 80047c6:	bf00      	nop
 80047c8:	3770      	adds	r7, #112	@ 0x70
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40008000 	.word	0x40008000

080047d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b09c      	sub	sp, #112	@ 0x70
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80047e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ec:	2b22      	cmp	r3, #34	@ 0x22
 80047ee:	f040 80be 	bne.w	800496e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004802:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004806:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800480a:	4013      	ands	r3, r2
 800480c:	b29a      	uxth	r2, r3
 800480e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004810:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	1c9a      	adds	r2, r3, #2
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	f040 80a1 	bne.w	800497e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800484a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004850:	667b      	str	r3, [r7, #100]	@ 0x64
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800485a:	657b      	str	r3, [r7, #84]	@ 0x54
 800485c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004860:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e6      	bne.n	800483c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	663b      	str	r3, [r7, #96]	@ 0x60
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3308      	adds	r3, #8
 800488c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800488e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004894:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e5      	bne.n	800486e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a33      	ldr	r2, [pc, #204]	@ (8004988 <UART_RxISR_16BIT+0x1b4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d01f      	beq.n	8004900 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d018      	beq.n	8004900 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	61fb      	str	r3, [r7, #28]
   return(result);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d12e      	bne.n	8004966 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	60bb      	str	r3, [r7, #8]
   return(result);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6979      	ldr	r1, [r7, #20]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	613b      	str	r3, [r7, #16]
   return(result);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e6      	bne.n	800490e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b10      	cmp	r3, #16
 800494c:	d103      	bne.n	8004956 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2210      	movs	r2, #16
 8004954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff f800 	bl	8003964 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004964:	e00b      	b.n	800497e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc fc20 	bl	80011ac <HAL_UART_RxCpltCallback>
}
 800496c:	e007      	b.n	800497e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0208 	orr.w	r2, r2, #8
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	3770      	adds	r7, #112	@ 0x70
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40008000 	.word	0x40008000

0800498c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b0ac      	sub	sp, #176	@ 0xb0
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800499a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049c2:	2b22      	cmp	r3, #34	@ 0x22
 80049c4:	f040 8182 	bne.w	8004ccc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80049ce:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049d2:	e125      	b.n	8004c20 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80049e2:	b2d9      	uxtb	r1, r3
 80049e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ee:	400a      	ands	r2, r1
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d053      	beq.n	8004ace <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d011      	beq.n	8004a86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2202      	movs	r2, #2
 8004a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7c:	f043 0204 	orr.w	r2, r3, #4
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d011      	beq.n	8004ab6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aac:	f043 0202 	orr.w	r2, r3, #2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fc fc5f 	bl	8001384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f040 80a2 	bne.w	8004c20 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b00:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004b04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e4      	bne.n	8004adc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b3a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004b3c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004b40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004b48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e1      	bne.n	8004b12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a5f      	ldr	r2, [pc, #380]	@ (8004ce4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d021      	beq.n	8004bb0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01a      	beq.n	8004bb0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b9e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ba2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e4      	bne.n	8004b7a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d130      	bne.n	8004c1a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004be2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e4      	bne.n	8004bbe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d103      	bne.n	8004c0a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2210      	movs	r2, #16
 8004c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fe fea6 	bl	8003964 <HAL_UARTEx_RxEventCallback>
 8004c18:	e002      	b.n	8004c20 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fac6 	bl	80011ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c20:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d006      	beq.n	8004c36 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f47f aecf 	bne.w	80049d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004c40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d049      	beq.n	8004cdc <UART_RxISR_8BIT_FIFOEN+0x350>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004c4e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d242      	bcs.n	8004cdc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e3      	bne.n	8004c56 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004c92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f043 0320 	orr.w	r3, r3, #32
 8004ca8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6979      	ldr	r1, [r7, #20]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e4      	bne.n	8004c94 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cca:	e007      	b.n	8004cdc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0208 	orr.w	r2, r2, #8
 8004cda:	619a      	str	r2, [r3, #24]
}
 8004cdc:	bf00      	nop
 8004cde:	37b0      	adds	r7, #176	@ 0xb0
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40008000 	.word	0x40008000
 8004ce8:	0800461d 	.word	0x0800461d

08004cec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b0ae      	sub	sp, #184	@ 0xb8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004cfa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d22:	2b22      	cmp	r3, #34	@ 0x22
 8004d24:	f040 8186 	bne.w	8005034 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d32:	e129      	b.n	8004f88 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004d46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004d4a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004d4e:	4013      	ands	r3, r2
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	1c9a      	adds	r2, r3, #2
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004d7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d053      	beq.n	8004e32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d011      	beq.n	8004dba <UART_RxISR_16BIT_FIFOEN+0xce>
 8004d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00b      	beq.n	8004dba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2201      	movs	r2, #1
 8004da8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db0:	f043 0201 	orr.w	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d011      	beq.n	8004dea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de0:	f043 0204 	orr.w	r2, r3, #4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d011      	beq.n	8004e1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2204      	movs	r2, #4
 8004e08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e10:	f043 0202 	orr.w	r2, r3, #2
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d006      	beq.n	8004e32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7fc faad 	bl	8001384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 80a4 	bne.w	8004f88 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e66:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e2      	bne.n	8004e40 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e1      	bne.n	8004e7a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5f      	ldr	r2, [pc, #380]	@ (800504c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d021      	beq.n	8004f18 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01a      	beq.n	8004f18 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ef6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f06:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e4      	bne.n	8004ee2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d130      	bne.n	8004f82 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f36:	f023 0310 	bic.w	r3, r3, #16
 8004f3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e4      	bne.n	8004f26 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d103      	bne.n	8004f72 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2210      	movs	r2, #16
 8004f70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe fcf2 	bl	8003964 <HAL_UARTEx_RxEventCallback>
 8004f80:	e002      	b.n	8004f88 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc f912 	bl	80011ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f88:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d006      	beq.n	8004f9e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f47f aecb 	bne.w	8004d34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fa4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004fa8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d049      	beq.n	8005044 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004fb6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d242      	bcs.n	8005044 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004fe2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e3      	bne.n	8004fbe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004ffa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	60fb      	str	r3, [r7, #12]
   return(result);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f043 0320 	orr.w	r3, r3, #32
 8005010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800501e:	61fb      	str	r3, [r7, #28]
 8005020:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	69b9      	ldr	r1, [r7, #24]
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	617b      	str	r3, [r7, #20]
   return(result);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e4      	bne.n	8004ffc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005032:	e007      	b.n	8005044 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0208 	orr.w	r2, r2, #8
 8005042:	619a      	str	r2, [r3, #24]
}
 8005044:	bf00      	nop
 8005046:	37b8      	adds	r7, #184	@ 0xb8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40008000 	.word	0x40008000
 8005050:	080047d5 	.word	0x080047d5

08005054 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e027      	b.n	80050f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2224      	movs	r2, #36	@ 0x24
 80050b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005116:	2302      	movs	r3, #2
 8005118:	e02d      	b.n	8005176 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2224      	movs	r2, #36	@ 0x24
 8005126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f850 	bl	80051fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005192:	2302      	movs	r3, #2
 8005194:	e02d      	b.n	80051f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2224      	movs	r2, #36	@ 0x24
 80051a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f812 	bl	80051fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800521c:	e031      	b.n	8005282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800521e:	2308      	movs	r3, #8
 8005220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005222:	2308      	movs	r3, #8
 8005224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	0e5b      	lsrs	r3, r3, #25
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	0f5b      	lsrs	r3, r3, #29
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005246:	7bbb      	ldrb	r3, [r7, #14]
 8005248:	7b3a      	ldrb	r2, [r7, #12]
 800524a:	4911      	ldr	r1, [pc, #68]	@ (8005290 <UARTEx_SetNbDataToProcess+0x94>)
 800524c:	5c8a      	ldrb	r2, [r1, r2]
 800524e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005252:	7b3a      	ldrb	r2, [r7, #12]
 8005254:	490f      	ldr	r1, [pc, #60]	@ (8005294 <UARTEx_SetNbDataToProcess+0x98>)
 8005256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005258:	fb93 f3f2 	sdiv	r3, r3, r2
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	7b7a      	ldrb	r2, [r7, #13]
 8005268:	4909      	ldr	r1, [pc, #36]	@ (8005290 <UARTEx_SetNbDataToProcess+0x94>)
 800526a:	5c8a      	ldrb	r2, [r1, r2]
 800526c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005270:	7b7a      	ldrb	r2, [r7, #13]
 8005272:	4908      	ldr	r1, [pc, #32]	@ (8005294 <UARTEx_SetNbDataToProcess+0x98>)
 8005274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005276:	fb93 f3f2 	sdiv	r3, r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	0800656c 	.word	0x0800656c
 8005294:	08006574 	.word	0x08006574

08005298 <__assert_func>:
 8005298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800529a:	4614      	mov	r4, r2
 800529c:	461a      	mov	r2, r3
 800529e:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <__assert_func+0x2c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4605      	mov	r5, r0
 80052a4:	68d8      	ldr	r0, [r3, #12]
 80052a6:	b954      	cbnz	r4, 80052be <__assert_func+0x26>
 80052a8:	4b07      	ldr	r3, [pc, #28]	@ (80052c8 <__assert_func+0x30>)
 80052aa:	461c      	mov	r4, r3
 80052ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052b0:	9100      	str	r1, [sp, #0]
 80052b2:	462b      	mov	r3, r5
 80052b4:	4905      	ldr	r1, [pc, #20]	@ (80052cc <__assert_func+0x34>)
 80052b6:	f000 f8b1 	bl	800541c <fiprintf>
 80052ba:	f000 f984 	bl	80055c6 <abort>
 80052be:	4b04      	ldr	r3, [pc, #16]	@ (80052d0 <__assert_func+0x38>)
 80052c0:	e7f4      	b.n	80052ac <__assert_func+0x14>
 80052c2:	bf00      	nop
 80052c4:	20000020 	.word	0x20000020
 80052c8:	080065b7 	.word	0x080065b7
 80052cc:	08006589 	.word	0x08006589
 80052d0:	0800657c 	.word	0x0800657c

080052d4 <std>:
 80052d4:	2300      	movs	r3, #0
 80052d6:	b510      	push	{r4, lr}
 80052d8:	4604      	mov	r4, r0
 80052da:	e9c0 3300 	strd	r3, r3, [r0]
 80052de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052e2:	6083      	str	r3, [r0, #8]
 80052e4:	8181      	strh	r1, [r0, #12]
 80052e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052e8:	81c2      	strh	r2, [r0, #14]
 80052ea:	6183      	str	r3, [r0, #24]
 80052ec:	4619      	mov	r1, r3
 80052ee:	2208      	movs	r2, #8
 80052f0:	305c      	adds	r0, #92	@ 0x5c
 80052f2:	f000 f933 	bl	800555c <memset>
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <std+0x58>)
 80052f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80052fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <std+0x5c>)
 80052fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <std+0x60>)
 8005300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <std+0x64>)
 8005304:	6323      	str	r3, [r4, #48]	@ 0x30
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <std+0x68>)
 8005308:	6224      	str	r4, [r4, #32]
 800530a:	429c      	cmp	r4, r3
 800530c:	d006      	beq.n	800531c <std+0x48>
 800530e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005312:	4294      	cmp	r4, r2
 8005314:	d002      	beq.n	800531c <std+0x48>
 8005316:	33d0      	adds	r3, #208	@ 0xd0
 8005318:	429c      	cmp	r4, r3
 800531a:	d105      	bne.n	8005328 <std+0x54>
 800531c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005324:	f000 b94c 	b.w	80055c0 <__retarget_lock_init_recursive>
 8005328:	bd10      	pop	{r4, pc}
 800532a:	bf00      	nop
 800532c:	08005e29 	.word	0x08005e29
 8005330:	08005e4b 	.word	0x08005e4b
 8005334:	08005e83 	.word	0x08005e83
 8005338:	08005ea7 	.word	0x08005ea7
 800533c:	200003ec 	.word	0x200003ec

08005340 <stdio_exit_handler>:
 8005340:	4a02      	ldr	r2, [pc, #8]	@ (800534c <stdio_exit_handler+0xc>)
 8005342:	4903      	ldr	r1, [pc, #12]	@ (8005350 <stdio_exit_handler+0x10>)
 8005344:	4803      	ldr	r0, [pc, #12]	@ (8005354 <stdio_exit_handler+0x14>)
 8005346:	f000 b87b 	b.w	8005440 <_fwalk_sglue>
 800534a:	bf00      	nop
 800534c:	20000014 	.word	0x20000014
 8005350:	08005dc1 	.word	0x08005dc1
 8005354:	20000024 	.word	0x20000024

08005358 <cleanup_stdio>:
 8005358:	6841      	ldr	r1, [r0, #4]
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <cleanup_stdio+0x34>)
 800535c:	4299      	cmp	r1, r3
 800535e:	b510      	push	{r4, lr}
 8005360:	4604      	mov	r4, r0
 8005362:	d001      	beq.n	8005368 <cleanup_stdio+0x10>
 8005364:	f000 fd2c 	bl	8005dc0 <_fflush_r>
 8005368:	68a1      	ldr	r1, [r4, #8]
 800536a:	4b09      	ldr	r3, [pc, #36]	@ (8005390 <cleanup_stdio+0x38>)
 800536c:	4299      	cmp	r1, r3
 800536e:	d002      	beq.n	8005376 <cleanup_stdio+0x1e>
 8005370:	4620      	mov	r0, r4
 8005372:	f000 fd25 	bl	8005dc0 <_fflush_r>
 8005376:	68e1      	ldr	r1, [r4, #12]
 8005378:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <cleanup_stdio+0x3c>)
 800537a:	4299      	cmp	r1, r3
 800537c:	d004      	beq.n	8005388 <cleanup_stdio+0x30>
 800537e:	4620      	mov	r0, r4
 8005380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005384:	f000 bd1c 	b.w	8005dc0 <_fflush_r>
 8005388:	bd10      	pop	{r4, pc}
 800538a:	bf00      	nop
 800538c:	200003ec 	.word	0x200003ec
 8005390:	20000454 	.word	0x20000454
 8005394:	200004bc 	.word	0x200004bc

08005398 <global_stdio_init.part.0>:
 8005398:	b510      	push	{r4, lr}
 800539a:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <global_stdio_init.part.0+0x30>)
 800539c:	4c0b      	ldr	r4, [pc, #44]	@ (80053cc <global_stdio_init.part.0+0x34>)
 800539e:	4a0c      	ldr	r2, [pc, #48]	@ (80053d0 <global_stdio_init.part.0+0x38>)
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	4620      	mov	r0, r4
 80053a4:	2200      	movs	r2, #0
 80053a6:	2104      	movs	r1, #4
 80053a8:	f7ff ff94 	bl	80052d4 <std>
 80053ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053b0:	2201      	movs	r2, #1
 80053b2:	2109      	movs	r1, #9
 80053b4:	f7ff ff8e 	bl	80052d4 <std>
 80053b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053bc:	2202      	movs	r2, #2
 80053be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c2:	2112      	movs	r1, #18
 80053c4:	f7ff bf86 	b.w	80052d4 <std>
 80053c8:	20000524 	.word	0x20000524
 80053cc:	200003ec 	.word	0x200003ec
 80053d0:	08005341 	.word	0x08005341

080053d4 <__sfp_lock_acquire>:
 80053d4:	4801      	ldr	r0, [pc, #4]	@ (80053dc <__sfp_lock_acquire+0x8>)
 80053d6:	f000 b8f4 	b.w	80055c2 <__retarget_lock_acquire_recursive>
 80053da:	bf00      	nop
 80053dc:	20000529 	.word	0x20000529

080053e0 <__sfp_lock_release>:
 80053e0:	4801      	ldr	r0, [pc, #4]	@ (80053e8 <__sfp_lock_release+0x8>)
 80053e2:	f000 b8ef 	b.w	80055c4 <__retarget_lock_release_recursive>
 80053e6:	bf00      	nop
 80053e8:	20000529 	.word	0x20000529

080053ec <__sinit>:
 80053ec:	b510      	push	{r4, lr}
 80053ee:	4604      	mov	r4, r0
 80053f0:	f7ff fff0 	bl	80053d4 <__sfp_lock_acquire>
 80053f4:	6a23      	ldr	r3, [r4, #32]
 80053f6:	b11b      	cbz	r3, 8005400 <__sinit+0x14>
 80053f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053fc:	f7ff bff0 	b.w	80053e0 <__sfp_lock_release>
 8005400:	4b04      	ldr	r3, [pc, #16]	@ (8005414 <__sinit+0x28>)
 8005402:	6223      	str	r3, [r4, #32]
 8005404:	4b04      	ldr	r3, [pc, #16]	@ (8005418 <__sinit+0x2c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f5      	bne.n	80053f8 <__sinit+0xc>
 800540c:	f7ff ffc4 	bl	8005398 <global_stdio_init.part.0>
 8005410:	e7f2      	b.n	80053f8 <__sinit+0xc>
 8005412:	bf00      	nop
 8005414:	08005359 	.word	0x08005359
 8005418:	20000524 	.word	0x20000524

0800541c <fiprintf>:
 800541c:	b40e      	push	{r1, r2, r3}
 800541e:	b503      	push	{r0, r1, lr}
 8005420:	4601      	mov	r1, r0
 8005422:	ab03      	add	r3, sp, #12
 8005424:	4805      	ldr	r0, [pc, #20]	@ (800543c <fiprintf+0x20>)
 8005426:	f853 2b04 	ldr.w	r2, [r3], #4
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	f000 f8fb 	bl	8005628 <_vfiprintf_r>
 8005432:	b002      	add	sp, #8
 8005434:	f85d eb04 	ldr.w	lr, [sp], #4
 8005438:	b003      	add	sp, #12
 800543a:	4770      	bx	lr
 800543c:	20000020 	.word	0x20000020

08005440 <_fwalk_sglue>:
 8005440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005444:	4607      	mov	r7, r0
 8005446:	4688      	mov	r8, r1
 8005448:	4614      	mov	r4, r2
 800544a:	2600      	movs	r6, #0
 800544c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005450:	f1b9 0901 	subs.w	r9, r9, #1
 8005454:	d505      	bpl.n	8005462 <_fwalk_sglue+0x22>
 8005456:	6824      	ldr	r4, [r4, #0]
 8005458:	2c00      	cmp	r4, #0
 800545a:	d1f7      	bne.n	800544c <_fwalk_sglue+0xc>
 800545c:	4630      	mov	r0, r6
 800545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d907      	bls.n	8005478 <_fwalk_sglue+0x38>
 8005468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800546c:	3301      	adds	r3, #1
 800546e:	d003      	beq.n	8005478 <_fwalk_sglue+0x38>
 8005470:	4629      	mov	r1, r5
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	4306      	orrs	r6, r0
 8005478:	3568      	adds	r5, #104	@ 0x68
 800547a:	e7e9      	b.n	8005450 <_fwalk_sglue+0x10>

0800547c <iprintf>:
 800547c:	b40f      	push	{r0, r1, r2, r3}
 800547e:	b507      	push	{r0, r1, r2, lr}
 8005480:	4906      	ldr	r1, [pc, #24]	@ (800549c <iprintf+0x20>)
 8005482:	ab04      	add	r3, sp, #16
 8005484:	6808      	ldr	r0, [r1, #0]
 8005486:	f853 2b04 	ldr.w	r2, [r3], #4
 800548a:	6881      	ldr	r1, [r0, #8]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	f000 f8cb 	bl	8005628 <_vfiprintf_r>
 8005492:	b003      	add	sp, #12
 8005494:	f85d eb04 	ldr.w	lr, [sp], #4
 8005498:	b004      	add	sp, #16
 800549a:	4770      	bx	lr
 800549c:	20000020 	.word	0x20000020

080054a0 <_puts_r>:
 80054a0:	6a03      	ldr	r3, [r0, #32]
 80054a2:	b570      	push	{r4, r5, r6, lr}
 80054a4:	6884      	ldr	r4, [r0, #8]
 80054a6:	4605      	mov	r5, r0
 80054a8:	460e      	mov	r6, r1
 80054aa:	b90b      	cbnz	r3, 80054b0 <_puts_r+0x10>
 80054ac:	f7ff ff9e 	bl	80053ec <__sinit>
 80054b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054b2:	07db      	lsls	r3, r3, #31
 80054b4:	d405      	bmi.n	80054c2 <_puts_r+0x22>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	0598      	lsls	r0, r3, #22
 80054ba:	d402      	bmi.n	80054c2 <_puts_r+0x22>
 80054bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054be:	f000 f880 	bl	80055c2 <__retarget_lock_acquire_recursive>
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	0719      	lsls	r1, r3, #28
 80054c6:	d502      	bpl.n	80054ce <_puts_r+0x2e>
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d135      	bne.n	800553a <_puts_r+0x9a>
 80054ce:	4621      	mov	r1, r4
 80054d0:	4628      	mov	r0, r5
 80054d2:	f000 fd2b 	bl	8005f2c <__swsetup_r>
 80054d6:	b380      	cbz	r0, 800553a <_puts_r+0x9a>
 80054d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80054dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054de:	07da      	lsls	r2, r3, #31
 80054e0:	d405      	bmi.n	80054ee <_puts_r+0x4e>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	059b      	lsls	r3, r3, #22
 80054e6:	d402      	bmi.n	80054ee <_puts_r+0x4e>
 80054e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ea:	f000 f86b 	bl	80055c4 <__retarget_lock_release_recursive>
 80054ee:	4628      	mov	r0, r5
 80054f0:	bd70      	pop	{r4, r5, r6, pc}
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da04      	bge.n	8005500 <_puts_r+0x60>
 80054f6:	69a2      	ldr	r2, [r4, #24]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	dc17      	bgt.n	800552c <_puts_r+0x8c>
 80054fc:	290a      	cmp	r1, #10
 80054fe:	d015      	beq.n	800552c <_puts_r+0x8c>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	6022      	str	r2, [r4, #0]
 8005506:	7019      	strb	r1, [r3, #0]
 8005508:	68a3      	ldr	r3, [r4, #8]
 800550a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800550e:	3b01      	subs	r3, #1
 8005510:	60a3      	str	r3, [r4, #8]
 8005512:	2900      	cmp	r1, #0
 8005514:	d1ed      	bne.n	80054f2 <_puts_r+0x52>
 8005516:	2b00      	cmp	r3, #0
 8005518:	da11      	bge.n	800553e <_puts_r+0x9e>
 800551a:	4622      	mov	r2, r4
 800551c:	210a      	movs	r1, #10
 800551e:	4628      	mov	r0, r5
 8005520:	f000 fcc5 	bl	8005eae <__swbuf_r>
 8005524:	3001      	adds	r0, #1
 8005526:	d0d7      	beq.n	80054d8 <_puts_r+0x38>
 8005528:	250a      	movs	r5, #10
 800552a:	e7d7      	b.n	80054dc <_puts_r+0x3c>
 800552c:	4622      	mov	r2, r4
 800552e:	4628      	mov	r0, r5
 8005530:	f000 fcbd 	bl	8005eae <__swbuf_r>
 8005534:	3001      	adds	r0, #1
 8005536:	d1e7      	bne.n	8005508 <_puts_r+0x68>
 8005538:	e7ce      	b.n	80054d8 <_puts_r+0x38>
 800553a:	3e01      	subs	r6, #1
 800553c:	e7e4      	b.n	8005508 <_puts_r+0x68>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	6022      	str	r2, [r4, #0]
 8005544:	220a      	movs	r2, #10
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	e7ee      	b.n	8005528 <_puts_r+0x88>
	...

0800554c <puts>:
 800554c:	4b02      	ldr	r3, [pc, #8]	@ (8005558 <puts+0xc>)
 800554e:	4601      	mov	r1, r0
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	f7ff bfa5 	b.w	80054a0 <_puts_r>
 8005556:	bf00      	nop
 8005558:	20000020 	.word	0x20000020

0800555c <memset>:
 800555c:	4402      	add	r2, r0
 800555e:	4603      	mov	r3, r0
 8005560:	4293      	cmp	r3, r2
 8005562:	d100      	bne.n	8005566 <memset+0xa>
 8005564:	4770      	bx	lr
 8005566:	f803 1b01 	strb.w	r1, [r3], #1
 800556a:	e7f9      	b.n	8005560 <memset+0x4>

0800556c <__errno>:
 800556c:	4b01      	ldr	r3, [pc, #4]	@ (8005574 <__errno+0x8>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000020 	.word	0x20000020

08005578 <__libc_init_array>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4d0d      	ldr	r5, [pc, #52]	@ (80055b0 <__libc_init_array+0x38>)
 800557c:	4c0d      	ldr	r4, [pc, #52]	@ (80055b4 <__libc_init_array+0x3c>)
 800557e:	1b64      	subs	r4, r4, r5
 8005580:	10a4      	asrs	r4, r4, #2
 8005582:	2600      	movs	r6, #0
 8005584:	42a6      	cmp	r6, r4
 8005586:	d109      	bne.n	800559c <__libc_init_array+0x24>
 8005588:	4d0b      	ldr	r5, [pc, #44]	@ (80055b8 <__libc_init_array+0x40>)
 800558a:	4c0c      	ldr	r4, [pc, #48]	@ (80055bc <__libc_init_array+0x44>)
 800558c:	f000 fe8c 	bl	80062a8 <_init>
 8005590:	1b64      	subs	r4, r4, r5
 8005592:	10a4      	asrs	r4, r4, #2
 8005594:	2600      	movs	r6, #0
 8005596:	42a6      	cmp	r6, r4
 8005598:	d105      	bne.n	80055a6 <__libc_init_array+0x2e>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a0:	4798      	blx	r3
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7ee      	b.n	8005584 <__libc_init_array+0xc>
 80055a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055aa:	4798      	blx	r3
 80055ac:	3601      	adds	r6, #1
 80055ae:	e7f2      	b.n	8005596 <__libc_init_array+0x1e>
 80055b0:	080065f4 	.word	0x080065f4
 80055b4:	080065f4 	.word	0x080065f4
 80055b8:	080065f4 	.word	0x080065f4
 80055bc:	080065f8 	.word	0x080065f8

080055c0 <__retarget_lock_init_recursive>:
 80055c0:	4770      	bx	lr

080055c2 <__retarget_lock_acquire_recursive>:
 80055c2:	4770      	bx	lr

080055c4 <__retarget_lock_release_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <abort>:
 80055c6:	b508      	push	{r3, lr}
 80055c8:	2006      	movs	r0, #6
 80055ca:	f000 fdd3 	bl	8006174 <raise>
 80055ce:	2001      	movs	r0, #1
 80055d0:	f7fc f848 	bl	8001664 <_exit>

080055d4 <__sfputc_r>:
 80055d4:	6893      	ldr	r3, [r2, #8]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	b410      	push	{r4}
 80055dc:	6093      	str	r3, [r2, #8]
 80055de:	da08      	bge.n	80055f2 <__sfputc_r+0x1e>
 80055e0:	6994      	ldr	r4, [r2, #24]
 80055e2:	42a3      	cmp	r3, r4
 80055e4:	db01      	blt.n	80055ea <__sfputc_r+0x16>
 80055e6:	290a      	cmp	r1, #10
 80055e8:	d103      	bne.n	80055f2 <__sfputc_r+0x1e>
 80055ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ee:	f000 bc5e 	b.w	8005eae <__swbuf_r>
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	1c58      	adds	r0, r3, #1
 80055f6:	6010      	str	r0, [r2, #0]
 80055f8:	7019      	strb	r1, [r3, #0]
 80055fa:	4608      	mov	r0, r1
 80055fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005600:	4770      	bx	lr

08005602 <__sfputs_r>:
 8005602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	4614      	mov	r4, r2
 800560a:	18d5      	adds	r5, r2, r3
 800560c:	42ac      	cmp	r4, r5
 800560e:	d101      	bne.n	8005614 <__sfputs_r+0x12>
 8005610:	2000      	movs	r0, #0
 8005612:	e007      	b.n	8005624 <__sfputs_r+0x22>
 8005614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005618:	463a      	mov	r2, r7
 800561a:	4630      	mov	r0, r6
 800561c:	f7ff ffda 	bl	80055d4 <__sfputc_r>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d1f3      	bne.n	800560c <__sfputs_r+0xa>
 8005624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005628 <_vfiprintf_r>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	460d      	mov	r5, r1
 800562e:	b09d      	sub	sp, #116	@ 0x74
 8005630:	4614      	mov	r4, r2
 8005632:	4698      	mov	r8, r3
 8005634:	4606      	mov	r6, r0
 8005636:	b118      	cbz	r0, 8005640 <_vfiprintf_r+0x18>
 8005638:	6a03      	ldr	r3, [r0, #32]
 800563a:	b90b      	cbnz	r3, 8005640 <_vfiprintf_r+0x18>
 800563c:	f7ff fed6 	bl	80053ec <__sinit>
 8005640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005642:	07d9      	lsls	r1, r3, #31
 8005644:	d405      	bmi.n	8005652 <_vfiprintf_r+0x2a>
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	059a      	lsls	r2, r3, #22
 800564a:	d402      	bmi.n	8005652 <_vfiprintf_r+0x2a>
 800564c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800564e:	f7ff ffb8 	bl	80055c2 <__retarget_lock_acquire_recursive>
 8005652:	89ab      	ldrh	r3, [r5, #12]
 8005654:	071b      	lsls	r3, r3, #28
 8005656:	d501      	bpl.n	800565c <_vfiprintf_r+0x34>
 8005658:	692b      	ldr	r3, [r5, #16]
 800565a:	b99b      	cbnz	r3, 8005684 <_vfiprintf_r+0x5c>
 800565c:	4629      	mov	r1, r5
 800565e:	4630      	mov	r0, r6
 8005660:	f000 fc64 	bl	8005f2c <__swsetup_r>
 8005664:	b170      	cbz	r0, 8005684 <_vfiprintf_r+0x5c>
 8005666:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005668:	07dc      	lsls	r4, r3, #31
 800566a:	d504      	bpl.n	8005676 <_vfiprintf_r+0x4e>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005670:	b01d      	add	sp, #116	@ 0x74
 8005672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	0598      	lsls	r0, r3, #22
 800567a:	d4f7      	bmi.n	800566c <_vfiprintf_r+0x44>
 800567c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800567e:	f7ff ffa1 	bl	80055c4 <__retarget_lock_release_recursive>
 8005682:	e7f3      	b.n	800566c <_vfiprintf_r+0x44>
 8005684:	2300      	movs	r3, #0
 8005686:	9309      	str	r3, [sp, #36]	@ 0x24
 8005688:	2320      	movs	r3, #32
 800568a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800568e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005692:	2330      	movs	r3, #48	@ 0x30
 8005694:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005844 <_vfiprintf_r+0x21c>
 8005698:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800569c:	f04f 0901 	mov.w	r9, #1
 80056a0:	4623      	mov	r3, r4
 80056a2:	469a      	mov	sl, r3
 80056a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056a8:	b10a      	cbz	r2, 80056ae <_vfiprintf_r+0x86>
 80056aa:	2a25      	cmp	r2, #37	@ 0x25
 80056ac:	d1f9      	bne.n	80056a2 <_vfiprintf_r+0x7a>
 80056ae:	ebba 0b04 	subs.w	fp, sl, r4
 80056b2:	d00b      	beq.n	80056cc <_vfiprintf_r+0xa4>
 80056b4:	465b      	mov	r3, fp
 80056b6:	4622      	mov	r2, r4
 80056b8:	4629      	mov	r1, r5
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7ff ffa1 	bl	8005602 <__sfputs_r>
 80056c0:	3001      	adds	r0, #1
 80056c2:	f000 80a7 	beq.w	8005814 <_vfiprintf_r+0x1ec>
 80056c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056c8:	445a      	add	r2, fp
 80056ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80056cc:	f89a 3000 	ldrb.w	r3, [sl]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 809f 	beq.w	8005814 <_vfiprintf_r+0x1ec>
 80056d6:	2300      	movs	r3, #0
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056e0:	f10a 0a01 	add.w	sl, sl, #1
 80056e4:	9304      	str	r3, [sp, #16]
 80056e6:	9307      	str	r3, [sp, #28]
 80056e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80056ee:	4654      	mov	r4, sl
 80056f0:	2205      	movs	r2, #5
 80056f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f6:	4853      	ldr	r0, [pc, #332]	@ (8005844 <_vfiprintf_r+0x21c>)
 80056f8:	f7fa fd9a 	bl	8000230 <memchr>
 80056fc:	9a04      	ldr	r2, [sp, #16]
 80056fe:	b9d8      	cbnz	r0, 8005738 <_vfiprintf_r+0x110>
 8005700:	06d1      	lsls	r1, r2, #27
 8005702:	bf44      	itt	mi
 8005704:	2320      	movmi	r3, #32
 8005706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800570a:	0713      	lsls	r3, r2, #28
 800570c:	bf44      	itt	mi
 800570e:	232b      	movmi	r3, #43	@ 0x2b
 8005710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005714:	f89a 3000 	ldrb.w	r3, [sl]
 8005718:	2b2a      	cmp	r3, #42	@ 0x2a
 800571a:	d015      	beq.n	8005748 <_vfiprintf_r+0x120>
 800571c:	9a07      	ldr	r2, [sp, #28]
 800571e:	4654      	mov	r4, sl
 8005720:	2000      	movs	r0, #0
 8005722:	f04f 0c0a 	mov.w	ip, #10
 8005726:	4621      	mov	r1, r4
 8005728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800572c:	3b30      	subs	r3, #48	@ 0x30
 800572e:	2b09      	cmp	r3, #9
 8005730:	d94b      	bls.n	80057ca <_vfiprintf_r+0x1a2>
 8005732:	b1b0      	cbz	r0, 8005762 <_vfiprintf_r+0x13a>
 8005734:	9207      	str	r2, [sp, #28]
 8005736:	e014      	b.n	8005762 <_vfiprintf_r+0x13a>
 8005738:	eba0 0308 	sub.w	r3, r0, r8
 800573c:	fa09 f303 	lsl.w	r3, r9, r3
 8005740:	4313      	orrs	r3, r2
 8005742:	9304      	str	r3, [sp, #16]
 8005744:	46a2      	mov	sl, r4
 8005746:	e7d2      	b.n	80056ee <_vfiprintf_r+0xc6>
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	1d19      	adds	r1, r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	9103      	str	r1, [sp, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	bfbb      	ittet	lt
 8005754:	425b      	neglt	r3, r3
 8005756:	f042 0202 	orrlt.w	r2, r2, #2
 800575a:	9307      	strge	r3, [sp, #28]
 800575c:	9307      	strlt	r3, [sp, #28]
 800575e:	bfb8      	it	lt
 8005760:	9204      	strlt	r2, [sp, #16]
 8005762:	7823      	ldrb	r3, [r4, #0]
 8005764:	2b2e      	cmp	r3, #46	@ 0x2e
 8005766:	d10a      	bne.n	800577e <_vfiprintf_r+0x156>
 8005768:	7863      	ldrb	r3, [r4, #1]
 800576a:	2b2a      	cmp	r3, #42	@ 0x2a
 800576c:	d132      	bne.n	80057d4 <_vfiprintf_r+0x1ac>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	1d1a      	adds	r2, r3, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	9203      	str	r2, [sp, #12]
 8005776:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800577a:	3402      	adds	r4, #2
 800577c:	9305      	str	r3, [sp, #20]
 800577e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005854 <_vfiprintf_r+0x22c>
 8005782:	7821      	ldrb	r1, [r4, #0]
 8005784:	2203      	movs	r2, #3
 8005786:	4650      	mov	r0, sl
 8005788:	f7fa fd52 	bl	8000230 <memchr>
 800578c:	b138      	cbz	r0, 800579e <_vfiprintf_r+0x176>
 800578e:	9b04      	ldr	r3, [sp, #16]
 8005790:	eba0 000a 	sub.w	r0, r0, sl
 8005794:	2240      	movs	r2, #64	@ 0x40
 8005796:	4082      	lsls	r2, r0
 8005798:	4313      	orrs	r3, r2
 800579a:	3401      	adds	r4, #1
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a2:	4829      	ldr	r0, [pc, #164]	@ (8005848 <_vfiprintf_r+0x220>)
 80057a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057a8:	2206      	movs	r2, #6
 80057aa:	f7fa fd41 	bl	8000230 <memchr>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d03f      	beq.n	8005832 <_vfiprintf_r+0x20a>
 80057b2:	4b26      	ldr	r3, [pc, #152]	@ (800584c <_vfiprintf_r+0x224>)
 80057b4:	bb1b      	cbnz	r3, 80057fe <_vfiprintf_r+0x1d6>
 80057b6:	9b03      	ldr	r3, [sp, #12]
 80057b8:	3307      	adds	r3, #7
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	3308      	adds	r3, #8
 80057c0:	9303      	str	r3, [sp, #12]
 80057c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c4:	443b      	add	r3, r7
 80057c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c8:	e76a      	b.n	80056a0 <_vfiprintf_r+0x78>
 80057ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ce:	460c      	mov	r4, r1
 80057d0:	2001      	movs	r0, #1
 80057d2:	e7a8      	b.n	8005726 <_vfiprintf_r+0xfe>
 80057d4:	2300      	movs	r3, #0
 80057d6:	3401      	adds	r4, #1
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	4619      	mov	r1, r3
 80057dc:	f04f 0c0a 	mov.w	ip, #10
 80057e0:	4620      	mov	r0, r4
 80057e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e6:	3a30      	subs	r2, #48	@ 0x30
 80057e8:	2a09      	cmp	r2, #9
 80057ea:	d903      	bls.n	80057f4 <_vfiprintf_r+0x1cc>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0c6      	beq.n	800577e <_vfiprintf_r+0x156>
 80057f0:	9105      	str	r1, [sp, #20]
 80057f2:	e7c4      	b.n	800577e <_vfiprintf_r+0x156>
 80057f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80057f8:	4604      	mov	r4, r0
 80057fa:	2301      	movs	r3, #1
 80057fc:	e7f0      	b.n	80057e0 <_vfiprintf_r+0x1b8>
 80057fe:	ab03      	add	r3, sp, #12
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	462a      	mov	r2, r5
 8005804:	4b12      	ldr	r3, [pc, #72]	@ (8005850 <_vfiprintf_r+0x228>)
 8005806:	a904      	add	r1, sp, #16
 8005808:	4630      	mov	r0, r6
 800580a:	f3af 8000 	nop.w
 800580e:	4607      	mov	r7, r0
 8005810:	1c78      	adds	r0, r7, #1
 8005812:	d1d6      	bne.n	80057c2 <_vfiprintf_r+0x19a>
 8005814:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005816:	07d9      	lsls	r1, r3, #31
 8005818:	d405      	bmi.n	8005826 <_vfiprintf_r+0x1fe>
 800581a:	89ab      	ldrh	r3, [r5, #12]
 800581c:	059a      	lsls	r2, r3, #22
 800581e:	d402      	bmi.n	8005826 <_vfiprintf_r+0x1fe>
 8005820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005822:	f7ff fecf 	bl	80055c4 <__retarget_lock_release_recursive>
 8005826:	89ab      	ldrh	r3, [r5, #12]
 8005828:	065b      	lsls	r3, r3, #25
 800582a:	f53f af1f 	bmi.w	800566c <_vfiprintf_r+0x44>
 800582e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005830:	e71e      	b.n	8005670 <_vfiprintf_r+0x48>
 8005832:	ab03      	add	r3, sp, #12
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	462a      	mov	r2, r5
 8005838:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <_vfiprintf_r+0x228>)
 800583a:	a904      	add	r1, sp, #16
 800583c:	4630      	mov	r0, r6
 800583e:	f000 f91b 	bl	8005a78 <_printf_i>
 8005842:	e7e4      	b.n	800580e <_vfiprintf_r+0x1e6>
 8005844:	080065b8 	.word	0x080065b8
 8005848:	080065c2 	.word	0x080065c2
 800584c:	00000000 	.word	0x00000000
 8005850:	08005603 	.word	0x08005603
 8005854:	080065be 	.word	0x080065be

08005858 <sbrk_aligned>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4e0f      	ldr	r6, [pc, #60]	@ (8005898 <sbrk_aligned+0x40>)
 800585c:	460c      	mov	r4, r1
 800585e:	6831      	ldr	r1, [r6, #0]
 8005860:	4605      	mov	r5, r0
 8005862:	b911      	cbnz	r1, 800586a <sbrk_aligned+0x12>
 8005864:	f000 fcb4 	bl	80061d0 <_sbrk_r>
 8005868:	6030      	str	r0, [r6, #0]
 800586a:	4621      	mov	r1, r4
 800586c:	4628      	mov	r0, r5
 800586e:	f000 fcaf 	bl	80061d0 <_sbrk_r>
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	d103      	bne.n	800587e <sbrk_aligned+0x26>
 8005876:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800587a:	4620      	mov	r0, r4
 800587c:	bd70      	pop	{r4, r5, r6, pc}
 800587e:	1cc4      	adds	r4, r0, #3
 8005880:	f024 0403 	bic.w	r4, r4, #3
 8005884:	42a0      	cmp	r0, r4
 8005886:	d0f8      	beq.n	800587a <sbrk_aligned+0x22>
 8005888:	1a21      	subs	r1, r4, r0
 800588a:	4628      	mov	r0, r5
 800588c:	f000 fca0 	bl	80061d0 <_sbrk_r>
 8005890:	3001      	adds	r0, #1
 8005892:	d1f2      	bne.n	800587a <sbrk_aligned+0x22>
 8005894:	e7ef      	b.n	8005876 <sbrk_aligned+0x1e>
 8005896:	bf00      	nop
 8005898:	2000052c 	.word	0x2000052c

0800589c <_malloc_r>:
 800589c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a0:	1ccd      	adds	r5, r1, #3
 80058a2:	f025 0503 	bic.w	r5, r5, #3
 80058a6:	3508      	adds	r5, #8
 80058a8:	2d0c      	cmp	r5, #12
 80058aa:	bf38      	it	cc
 80058ac:	250c      	movcc	r5, #12
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	4606      	mov	r6, r0
 80058b2:	db01      	blt.n	80058b8 <_malloc_r+0x1c>
 80058b4:	42a9      	cmp	r1, r5
 80058b6:	d904      	bls.n	80058c2 <_malloc_r+0x26>
 80058b8:	230c      	movs	r3, #12
 80058ba:	6033      	str	r3, [r6, #0]
 80058bc:	2000      	movs	r0, #0
 80058be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005998 <_malloc_r+0xfc>
 80058c6:	f000 faa3 	bl	8005e10 <__malloc_lock>
 80058ca:	f8d8 3000 	ldr.w	r3, [r8]
 80058ce:	461c      	mov	r4, r3
 80058d0:	bb44      	cbnz	r4, 8005924 <_malloc_r+0x88>
 80058d2:	4629      	mov	r1, r5
 80058d4:	4630      	mov	r0, r6
 80058d6:	f7ff ffbf 	bl	8005858 <sbrk_aligned>
 80058da:	1c43      	adds	r3, r0, #1
 80058dc:	4604      	mov	r4, r0
 80058de:	d158      	bne.n	8005992 <_malloc_r+0xf6>
 80058e0:	f8d8 4000 	ldr.w	r4, [r8]
 80058e4:	4627      	mov	r7, r4
 80058e6:	2f00      	cmp	r7, #0
 80058e8:	d143      	bne.n	8005972 <_malloc_r+0xd6>
 80058ea:	2c00      	cmp	r4, #0
 80058ec:	d04b      	beq.n	8005986 <_malloc_r+0xea>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	4639      	mov	r1, r7
 80058f2:	4630      	mov	r0, r6
 80058f4:	eb04 0903 	add.w	r9, r4, r3
 80058f8:	f000 fc6a 	bl	80061d0 <_sbrk_r>
 80058fc:	4581      	cmp	r9, r0
 80058fe:	d142      	bne.n	8005986 <_malloc_r+0xea>
 8005900:	6821      	ldr	r1, [r4, #0]
 8005902:	1a6d      	subs	r5, r5, r1
 8005904:	4629      	mov	r1, r5
 8005906:	4630      	mov	r0, r6
 8005908:	f7ff ffa6 	bl	8005858 <sbrk_aligned>
 800590c:	3001      	adds	r0, #1
 800590e:	d03a      	beq.n	8005986 <_malloc_r+0xea>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	442b      	add	r3, r5
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	f8d8 3000 	ldr.w	r3, [r8]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	bb62      	cbnz	r2, 8005978 <_malloc_r+0xdc>
 800591e:	f8c8 7000 	str.w	r7, [r8]
 8005922:	e00f      	b.n	8005944 <_malloc_r+0xa8>
 8005924:	6822      	ldr	r2, [r4, #0]
 8005926:	1b52      	subs	r2, r2, r5
 8005928:	d420      	bmi.n	800596c <_malloc_r+0xd0>
 800592a:	2a0b      	cmp	r2, #11
 800592c:	d917      	bls.n	800595e <_malloc_r+0xc2>
 800592e:	1961      	adds	r1, r4, r5
 8005930:	42a3      	cmp	r3, r4
 8005932:	6025      	str	r5, [r4, #0]
 8005934:	bf18      	it	ne
 8005936:	6059      	strne	r1, [r3, #4]
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	bf08      	it	eq
 800593c:	f8c8 1000 	streq.w	r1, [r8]
 8005940:	5162      	str	r2, [r4, r5]
 8005942:	604b      	str	r3, [r1, #4]
 8005944:	4630      	mov	r0, r6
 8005946:	f000 fa69 	bl	8005e1c <__malloc_unlock>
 800594a:	f104 000b 	add.w	r0, r4, #11
 800594e:	1d23      	adds	r3, r4, #4
 8005950:	f020 0007 	bic.w	r0, r0, #7
 8005954:	1ac2      	subs	r2, r0, r3
 8005956:	bf1c      	itt	ne
 8005958:	1a1b      	subne	r3, r3, r0
 800595a:	50a3      	strne	r3, [r4, r2]
 800595c:	e7af      	b.n	80058be <_malloc_r+0x22>
 800595e:	6862      	ldr	r2, [r4, #4]
 8005960:	42a3      	cmp	r3, r4
 8005962:	bf0c      	ite	eq
 8005964:	f8c8 2000 	streq.w	r2, [r8]
 8005968:	605a      	strne	r2, [r3, #4]
 800596a:	e7eb      	b.n	8005944 <_malloc_r+0xa8>
 800596c:	4623      	mov	r3, r4
 800596e:	6864      	ldr	r4, [r4, #4]
 8005970:	e7ae      	b.n	80058d0 <_malloc_r+0x34>
 8005972:	463c      	mov	r4, r7
 8005974:	687f      	ldr	r7, [r7, #4]
 8005976:	e7b6      	b.n	80058e6 <_malloc_r+0x4a>
 8005978:	461a      	mov	r2, r3
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	42a3      	cmp	r3, r4
 800597e:	d1fb      	bne.n	8005978 <_malloc_r+0xdc>
 8005980:	2300      	movs	r3, #0
 8005982:	6053      	str	r3, [r2, #4]
 8005984:	e7de      	b.n	8005944 <_malloc_r+0xa8>
 8005986:	230c      	movs	r3, #12
 8005988:	6033      	str	r3, [r6, #0]
 800598a:	4630      	mov	r0, r6
 800598c:	f000 fa46 	bl	8005e1c <__malloc_unlock>
 8005990:	e794      	b.n	80058bc <_malloc_r+0x20>
 8005992:	6005      	str	r5, [r0, #0]
 8005994:	e7d6      	b.n	8005944 <_malloc_r+0xa8>
 8005996:	bf00      	nop
 8005998:	20000530 	.word	0x20000530

0800599c <_printf_common>:
 800599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	4616      	mov	r6, r2
 80059a2:	4698      	mov	r8, r3
 80059a4:	688a      	ldr	r2, [r1, #8]
 80059a6:	690b      	ldr	r3, [r1, #16]
 80059a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059ac:	4293      	cmp	r3, r2
 80059ae:	bfb8      	it	lt
 80059b0:	4613      	movlt	r3, r2
 80059b2:	6033      	str	r3, [r6, #0]
 80059b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059b8:	4607      	mov	r7, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	b10a      	cbz	r2, 80059c2 <_printf_common+0x26>
 80059be:	3301      	adds	r3, #1
 80059c0:	6033      	str	r3, [r6, #0]
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	0699      	lsls	r1, r3, #26
 80059c6:	bf42      	ittt	mi
 80059c8:	6833      	ldrmi	r3, [r6, #0]
 80059ca:	3302      	addmi	r3, #2
 80059cc:	6033      	strmi	r3, [r6, #0]
 80059ce:	6825      	ldr	r5, [r4, #0]
 80059d0:	f015 0506 	ands.w	r5, r5, #6
 80059d4:	d106      	bne.n	80059e4 <_printf_common+0x48>
 80059d6:	f104 0a19 	add.w	sl, r4, #25
 80059da:	68e3      	ldr	r3, [r4, #12]
 80059dc:	6832      	ldr	r2, [r6, #0]
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	42ab      	cmp	r3, r5
 80059e2:	dc26      	bgt.n	8005a32 <_printf_common+0x96>
 80059e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	3b00      	subs	r3, #0
 80059ec:	bf18      	it	ne
 80059ee:	2301      	movne	r3, #1
 80059f0:	0692      	lsls	r2, r2, #26
 80059f2:	d42b      	bmi.n	8005a4c <_printf_common+0xb0>
 80059f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059f8:	4641      	mov	r1, r8
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c8      	blx	r9
 80059fe:	3001      	adds	r0, #1
 8005a00:	d01e      	beq.n	8005a40 <_printf_common+0xa4>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	6922      	ldr	r2, [r4, #16]
 8005a06:	f003 0306 	and.w	r3, r3, #6
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	bf02      	ittt	eq
 8005a0e:	68e5      	ldreq	r5, [r4, #12]
 8005a10:	6833      	ldreq	r3, [r6, #0]
 8005a12:	1aed      	subeq	r5, r5, r3
 8005a14:	68a3      	ldr	r3, [r4, #8]
 8005a16:	bf0c      	ite	eq
 8005a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a1c:	2500      	movne	r5, #0
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	bfc4      	itt	gt
 8005a22:	1a9b      	subgt	r3, r3, r2
 8005a24:	18ed      	addgt	r5, r5, r3
 8005a26:	2600      	movs	r6, #0
 8005a28:	341a      	adds	r4, #26
 8005a2a:	42b5      	cmp	r5, r6
 8005a2c:	d11a      	bne.n	8005a64 <_printf_common+0xc8>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e008      	b.n	8005a44 <_printf_common+0xa8>
 8005a32:	2301      	movs	r3, #1
 8005a34:	4652      	mov	r2, sl
 8005a36:	4641      	mov	r1, r8
 8005a38:	4638      	mov	r0, r7
 8005a3a:	47c8      	blx	r9
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d103      	bne.n	8005a48 <_printf_common+0xac>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a48:	3501      	adds	r5, #1
 8005a4a:	e7c6      	b.n	80059da <_printf_common+0x3e>
 8005a4c:	18e1      	adds	r1, r4, r3
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	2030      	movs	r0, #48	@ 0x30
 8005a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a56:	4422      	add	r2, r4
 8005a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a60:	3302      	adds	r3, #2
 8005a62:	e7c7      	b.n	80059f4 <_printf_common+0x58>
 8005a64:	2301      	movs	r3, #1
 8005a66:	4622      	mov	r2, r4
 8005a68:	4641      	mov	r1, r8
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	47c8      	blx	r9
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d0e6      	beq.n	8005a40 <_printf_common+0xa4>
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7d9      	b.n	8005a2a <_printf_common+0x8e>
	...

08005a78 <_printf_i>:
 8005a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	7e0f      	ldrb	r7, [r1, #24]
 8005a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a80:	2f78      	cmp	r7, #120	@ 0x78
 8005a82:	4691      	mov	r9, r2
 8005a84:	4680      	mov	r8, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	469a      	mov	sl, r3
 8005a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a8e:	d807      	bhi.n	8005aa0 <_printf_i+0x28>
 8005a90:	2f62      	cmp	r7, #98	@ 0x62
 8005a92:	d80a      	bhi.n	8005aaa <_printf_i+0x32>
 8005a94:	2f00      	cmp	r7, #0
 8005a96:	f000 80d2 	beq.w	8005c3e <_printf_i+0x1c6>
 8005a9a:	2f58      	cmp	r7, #88	@ 0x58
 8005a9c:	f000 80b9 	beq.w	8005c12 <_printf_i+0x19a>
 8005aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005aa8:	e03a      	b.n	8005b20 <_printf_i+0xa8>
 8005aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005aae:	2b15      	cmp	r3, #21
 8005ab0:	d8f6      	bhi.n	8005aa0 <_printf_i+0x28>
 8005ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ab8 <_printf_i+0x40>)
 8005ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ab8:	08005b11 	.word	0x08005b11
 8005abc:	08005b25 	.word	0x08005b25
 8005ac0:	08005aa1 	.word	0x08005aa1
 8005ac4:	08005aa1 	.word	0x08005aa1
 8005ac8:	08005aa1 	.word	0x08005aa1
 8005acc:	08005aa1 	.word	0x08005aa1
 8005ad0:	08005b25 	.word	0x08005b25
 8005ad4:	08005aa1 	.word	0x08005aa1
 8005ad8:	08005aa1 	.word	0x08005aa1
 8005adc:	08005aa1 	.word	0x08005aa1
 8005ae0:	08005aa1 	.word	0x08005aa1
 8005ae4:	08005c25 	.word	0x08005c25
 8005ae8:	08005b4f 	.word	0x08005b4f
 8005aec:	08005bdf 	.word	0x08005bdf
 8005af0:	08005aa1 	.word	0x08005aa1
 8005af4:	08005aa1 	.word	0x08005aa1
 8005af8:	08005c47 	.word	0x08005c47
 8005afc:	08005aa1 	.word	0x08005aa1
 8005b00:	08005b4f 	.word	0x08005b4f
 8005b04:	08005aa1 	.word	0x08005aa1
 8005b08:	08005aa1 	.word	0x08005aa1
 8005b0c:	08005be7 	.word	0x08005be7
 8005b10:	6833      	ldr	r3, [r6, #0]
 8005b12:	1d1a      	adds	r2, r3, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6032      	str	r2, [r6, #0]
 8005b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b20:	2301      	movs	r3, #1
 8005b22:	e09d      	b.n	8005c60 <_printf_i+0x1e8>
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	6820      	ldr	r0, [r4, #0]
 8005b28:	1d19      	adds	r1, r3, #4
 8005b2a:	6031      	str	r1, [r6, #0]
 8005b2c:	0606      	lsls	r6, r0, #24
 8005b2e:	d501      	bpl.n	8005b34 <_printf_i+0xbc>
 8005b30:	681d      	ldr	r5, [r3, #0]
 8005b32:	e003      	b.n	8005b3c <_printf_i+0xc4>
 8005b34:	0645      	lsls	r5, r0, #25
 8005b36:	d5fb      	bpl.n	8005b30 <_printf_i+0xb8>
 8005b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	da03      	bge.n	8005b48 <_printf_i+0xd0>
 8005b40:	232d      	movs	r3, #45	@ 0x2d
 8005b42:	426d      	negs	r5, r5
 8005b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b48:	4859      	ldr	r0, [pc, #356]	@ (8005cb0 <_printf_i+0x238>)
 8005b4a:	230a      	movs	r3, #10
 8005b4c:	e011      	b.n	8005b72 <_printf_i+0xfa>
 8005b4e:	6821      	ldr	r1, [r4, #0]
 8005b50:	6833      	ldr	r3, [r6, #0]
 8005b52:	0608      	lsls	r0, r1, #24
 8005b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b58:	d402      	bmi.n	8005b60 <_printf_i+0xe8>
 8005b5a:	0649      	lsls	r1, r1, #25
 8005b5c:	bf48      	it	mi
 8005b5e:	b2ad      	uxthmi	r5, r5
 8005b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b62:	4853      	ldr	r0, [pc, #332]	@ (8005cb0 <_printf_i+0x238>)
 8005b64:	6033      	str	r3, [r6, #0]
 8005b66:	bf14      	ite	ne
 8005b68:	230a      	movne	r3, #10
 8005b6a:	2308      	moveq	r3, #8
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b72:	6866      	ldr	r6, [r4, #4]
 8005b74:	60a6      	str	r6, [r4, #8]
 8005b76:	2e00      	cmp	r6, #0
 8005b78:	bfa2      	ittt	ge
 8005b7a:	6821      	ldrge	r1, [r4, #0]
 8005b7c:	f021 0104 	bicge.w	r1, r1, #4
 8005b80:	6021      	strge	r1, [r4, #0]
 8005b82:	b90d      	cbnz	r5, 8005b88 <_printf_i+0x110>
 8005b84:	2e00      	cmp	r6, #0
 8005b86:	d04b      	beq.n	8005c20 <_printf_i+0x1a8>
 8005b88:	4616      	mov	r6, r2
 8005b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b92:	5dc7      	ldrb	r7, [r0, r7]
 8005b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b98:	462f      	mov	r7, r5
 8005b9a:	42bb      	cmp	r3, r7
 8005b9c:	460d      	mov	r5, r1
 8005b9e:	d9f4      	bls.n	8005b8a <_printf_i+0x112>
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d10b      	bne.n	8005bbc <_printf_i+0x144>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	07df      	lsls	r7, r3, #31
 8005ba8:	d508      	bpl.n	8005bbc <_printf_i+0x144>
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	6861      	ldr	r1, [r4, #4]
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	bfde      	ittt	le
 8005bb2:	2330      	movle	r3, #48	@ 0x30
 8005bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bb8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005bbc:	1b92      	subs	r2, r2, r6
 8005bbe:	6122      	str	r2, [r4, #16]
 8005bc0:	f8cd a000 	str.w	sl, [sp]
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	aa03      	add	r2, sp, #12
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7ff fee6 	bl	800599c <_printf_common>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d14a      	bne.n	8005c6a <_printf_i+0x1f2>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bd8:	b004      	add	sp, #16
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	f043 0320 	orr.w	r3, r3, #32
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	4833      	ldr	r0, [pc, #204]	@ (8005cb4 <_printf_i+0x23c>)
 8005be8:	2778      	movs	r7, #120	@ 0x78
 8005bea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	6831      	ldr	r1, [r6, #0]
 8005bf2:	061f      	lsls	r7, r3, #24
 8005bf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bf8:	d402      	bmi.n	8005c00 <_printf_i+0x188>
 8005bfa:	065f      	lsls	r7, r3, #25
 8005bfc:	bf48      	it	mi
 8005bfe:	b2ad      	uxthmi	r5, r5
 8005c00:	6031      	str	r1, [r6, #0]
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	bf44      	itt	mi
 8005c06:	f043 0320 	orrmi.w	r3, r3, #32
 8005c0a:	6023      	strmi	r3, [r4, #0]
 8005c0c:	b11d      	cbz	r5, 8005c16 <_printf_i+0x19e>
 8005c0e:	2310      	movs	r3, #16
 8005c10:	e7ac      	b.n	8005b6c <_printf_i+0xf4>
 8005c12:	4827      	ldr	r0, [pc, #156]	@ (8005cb0 <_printf_i+0x238>)
 8005c14:	e7e9      	b.n	8005bea <_printf_i+0x172>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f023 0320 	bic.w	r3, r3, #32
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	e7f6      	b.n	8005c0e <_printf_i+0x196>
 8005c20:	4616      	mov	r6, r2
 8005c22:	e7bd      	b.n	8005ba0 <_printf_i+0x128>
 8005c24:	6833      	ldr	r3, [r6, #0]
 8005c26:	6825      	ldr	r5, [r4, #0]
 8005c28:	6961      	ldr	r1, [r4, #20]
 8005c2a:	1d18      	adds	r0, r3, #4
 8005c2c:	6030      	str	r0, [r6, #0]
 8005c2e:	062e      	lsls	r6, r5, #24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	d501      	bpl.n	8005c38 <_printf_i+0x1c0>
 8005c34:	6019      	str	r1, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <_printf_i+0x1c6>
 8005c38:	0668      	lsls	r0, r5, #25
 8005c3a:	d5fb      	bpl.n	8005c34 <_printf_i+0x1bc>
 8005c3c:	8019      	strh	r1, [r3, #0]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6123      	str	r3, [r4, #16]
 8005c42:	4616      	mov	r6, r2
 8005c44:	e7bc      	b.n	8005bc0 <_printf_i+0x148>
 8005c46:	6833      	ldr	r3, [r6, #0]
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	6032      	str	r2, [r6, #0]
 8005c4c:	681e      	ldr	r6, [r3, #0]
 8005c4e:	6862      	ldr	r2, [r4, #4]
 8005c50:	2100      	movs	r1, #0
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7fa faec 	bl	8000230 <memchr>
 8005c58:	b108      	cbz	r0, 8005c5e <_printf_i+0x1e6>
 8005c5a:	1b80      	subs	r0, r0, r6
 8005c5c:	6060      	str	r0, [r4, #4]
 8005c5e:	6863      	ldr	r3, [r4, #4]
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	2300      	movs	r3, #0
 8005c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c68:	e7aa      	b.n	8005bc0 <_printf_i+0x148>
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	4649      	mov	r1, r9
 8005c70:	4640      	mov	r0, r8
 8005c72:	47d0      	blx	sl
 8005c74:	3001      	adds	r0, #1
 8005c76:	d0ad      	beq.n	8005bd4 <_printf_i+0x15c>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	d413      	bmi.n	8005ca6 <_printf_i+0x22e>
 8005c7e:	68e0      	ldr	r0, [r4, #12]
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	4298      	cmp	r0, r3
 8005c84:	bfb8      	it	lt
 8005c86:	4618      	movlt	r0, r3
 8005c88:	e7a6      	b.n	8005bd8 <_printf_i+0x160>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4640      	mov	r0, r8
 8005c92:	47d0      	blx	sl
 8005c94:	3001      	adds	r0, #1
 8005c96:	d09d      	beq.n	8005bd4 <_printf_i+0x15c>
 8005c98:	3501      	adds	r5, #1
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	9903      	ldr	r1, [sp, #12]
 8005c9e:	1a5b      	subs	r3, r3, r1
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	dcf2      	bgt.n	8005c8a <_printf_i+0x212>
 8005ca4:	e7eb      	b.n	8005c7e <_printf_i+0x206>
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	f104 0619 	add.w	r6, r4, #25
 8005cac:	e7f5      	b.n	8005c9a <_printf_i+0x222>
 8005cae:	bf00      	nop
 8005cb0:	080065c9 	.word	0x080065c9
 8005cb4:	080065da 	.word	0x080065da

08005cb8 <__sflush_r>:
 8005cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc0:	0716      	lsls	r6, r2, #28
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	d454      	bmi.n	8005d72 <__sflush_r+0xba>
 8005cc8:	684b      	ldr	r3, [r1, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	dc02      	bgt.n	8005cd4 <__sflush_r+0x1c>
 8005cce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dd48      	ble.n	8005d66 <__sflush_r+0xae>
 8005cd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	d045      	beq.n	8005d66 <__sflush_r+0xae>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ce0:	682f      	ldr	r7, [r5, #0]
 8005ce2:	6a21      	ldr	r1, [r4, #32]
 8005ce4:	602b      	str	r3, [r5, #0]
 8005ce6:	d030      	beq.n	8005d4a <__sflush_r+0x92>
 8005ce8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	0759      	lsls	r1, r3, #29
 8005cee:	d505      	bpl.n	8005cfc <__sflush_r+0x44>
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cf6:	b10b      	cbz	r3, 8005cfc <__sflush_r+0x44>
 8005cf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cfa:	1ad2      	subs	r2, r2, r3
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d00:	6a21      	ldr	r1, [r4, #32]
 8005d02:	4628      	mov	r0, r5
 8005d04:	47b0      	blx	r6
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	d106      	bne.n	8005d1a <__sflush_r+0x62>
 8005d0c:	6829      	ldr	r1, [r5, #0]
 8005d0e:	291d      	cmp	r1, #29
 8005d10:	d82b      	bhi.n	8005d6a <__sflush_r+0xb2>
 8005d12:	4a2a      	ldr	r2, [pc, #168]	@ (8005dbc <__sflush_r+0x104>)
 8005d14:	410a      	asrs	r2, r1
 8005d16:	07d6      	lsls	r6, r2, #31
 8005d18:	d427      	bmi.n	8005d6a <__sflush_r+0xb2>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	6062      	str	r2, [r4, #4]
 8005d1e:	04d9      	lsls	r1, r3, #19
 8005d20:	6922      	ldr	r2, [r4, #16]
 8005d22:	6022      	str	r2, [r4, #0]
 8005d24:	d504      	bpl.n	8005d30 <__sflush_r+0x78>
 8005d26:	1c42      	adds	r2, r0, #1
 8005d28:	d101      	bne.n	8005d2e <__sflush_r+0x76>
 8005d2a:	682b      	ldr	r3, [r5, #0]
 8005d2c:	b903      	cbnz	r3, 8005d30 <__sflush_r+0x78>
 8005d2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d32:	602f      	str	r7, [r5, #0]
 8005d34:	b1b9      	cbz	r1, 8005d66 <__sflush_r+0xae>
 8005d36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d3a:	4299      	cmp	r1, r3
 8005d3c:	d002      	beq.n	8005d44 <__sflush_r+0x8c>
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 fa68 	bl	8006214 <_free_r>
 8005d44:	2300      	movs	r3, #0
 8005d46:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d48:	e00d      	b.n	8005d66 <__sflush_r+0xae>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b0      	blx	r6
 8005d50:	4602      	mov	r2, r0
 8005d52:	1c50      	adds	r0, r2, #1
 8005d54:	d1c9      	bne.n	8005cea <__sflush_r+0x32>
 8005d56:	682b      	ldr	r3, [r5, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0c6      	beq.n	8005cea <__sflush_r+0x32>
 8005d5c:	2b1d      	cmp	r3, #29
 8005d5e:	d001      	beq.n	8005d64 <__sflush_r+0xac>
 8005d60:	2b16      	cmp	r3, #22
 8005d62:	d11e      	bne.n	8005da2 <__sflush_r+0xea>
 8005d64:	602f      	str	r7, [r5, #0]
 8005d66:	2000      	movs	r0, #0
 8005d68:	e022      	b.n	8005db0 <__sflush_r+0xf8>
 8005d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6e:	b21b      	sxth	r3, r3
 8005d70:	e01b      	b.n	8005daa <__sflush_r+0xf2>
 8005d72:	690f      	ldr	r7, [r1, #16]
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	d0f6      	beq.n	8005d66 <__sflush_r+0xae>
 8005d78:	0793      	lsls	r3, r2, #30
 8005d7a:	680e      	ldr	r6, [r1, #0]
 8005d7c:	bf08      	it	eq
 8005d7e:	694b      	ldreq	r3, [r1, #20]
 8005d80:	600f      	str	r7, [r1, #0]
 8005d82:	bf18      	it	ne
 8005d84:	2300      	movne	r3, #0
 8005d86:	eba6 0807 	sub.w	r8, r6, r7
 8005d8a:	608b      	str	r3, [r1, #8]
 8005d8c:	f1b8 0f00 	cmp.w	r8, #0
 8005d90:	dde9      	ble.n	8005d66 <__sflush_r+0xae>
 8005d92:	6a21      	ldr	r1, [r4, #32]
 8005d94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d96:	4643      	mov	r3, r8
 8005d98:	463a      	mov	r2, r7
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b0      	blx	r6
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	dc08      	bgt.n	8005db4 <__sflush_r+0xfc>
 8005da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db4:	4407      	add	r7, r0
 8005db6:	eba8 0800 	sub.w	r8, r8, r0
 8005dba:	e7e7      	b.n	8005d8c <__sflush_r+0xd4>
 8005dbc:	dfbffffe 	.word	0xdfbffffe

08005dc0 <_fflush_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	690b      	ldr	r3, [r1, #16]
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	b913      	cbnz	r3, 8005dd0 <_fflush_r+0x10>
 8005dca:	2500      	movs	r5, #0
 8005dcc:	4628      	mov	r0, r5
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	b118      	cbz	r0, 8005dda <_fflush_r+0x1a>
 8005dd2:	6a03      	ldr	r3, [r0, #32]
 8005dd4:	b90b      	cbnz	r3, 8005dda <_fflush_r+0x1a>
 8005dd6:	f7ff fb09 	bl	80053ec <__sinit>
 8005dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f3      	beq.n	8005dca <_fflush_r+0xa>
 8005de2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005de4:	07d0      	lsls	r0, r2, #31
 8005de6:	d404      	bmi.n	8005df2 <_fflush_r+0x32>
 8005de8:	0599      	lsls	r1, r3, #22
 8005dea:	d402      	bmi.n	8005df2 <_fflush_r+0x32>
 8005dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dee:	f7ff fbe8 	bl	80055c2 <__retarget_lock_acquire_recursive>
 8005df2:	4628      	mov	r0, r5
 8005df4:	4621      	mov	r1, r4
 8005df6:	f7ff ff5f 	bl	8005cb8 <__sflush_r>
 8005dfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dfc:	07da      	lsls	r2, r3, #31
 8005dfe:	4605      	mov	r5, r0
 8005e00:	d4e4      	bmi.n	8005dcc <_fflush_r+0xc>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	059b      	lsls	r3, r3, #22
 8005e06:	d4e1      	bmi.n	8005dcc <_fflush_r+0xc>
 8005e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e0a:	f7ff fbdb 	bl	80055c4 <__retarget_lock_release_recursive>
 8005e0e:	e7dd      	b.n	8005dcc <_fflush_r+0xc>

08005e10 <__malloc_lock>:
 8005e10:	4801      	ldr	r0, [pc, #4]	@ (8005e18 <__malloc_lock+0x8>)
 8005e12:	f7ff bbd6 	b.w	80055c2 <__retarget_lock_acquire_recursive>
 8005e16:	bf00      	nop
 8005e18:	20000528 	.word	0x20000528

08005e1c <__malloc_unlock>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	@ (8005e24 <__malloc_unlock+0x8>)
 8005e1e:	f7ff bbd1 	b.w	80055c4 <__retarget_lock_release_recursive>
 8005e22:	bf00      	nop
 8005e24:	20000528 	.word	0x20000528

08005e28 <__sread>:
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e30:	f000 f9a8 	bl	8006184 <_read_r>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	bfab      	itete	ge
 8005e38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e3c:	181b      	addge	r3, r3, r0
 8005e3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e42:	bfac      	ite	ge
 8005e44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e46:	81a3      	strhlt	r3, [r4, #12]
 8005e48:	bd10      	pop	{r4, pc}

08005e4a <__swrite>:
 8005e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4e:	461f      	mov	r7, r3
 8005e50:	898b      	ldrh	r3, [r1, #12]
 8005e52:	05db      	lsls	r3, r3, #23
 8005e54:	4605      	mov	r5, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	4616      	mov	r6, r2
 8005e5a:	d505      	bpl.n	8005e68 <__swrite+0x1e>
 8005e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e60:	2302      	movs	r3, #2
 8005e62:	2200      	movs	r2, #0
 8005e64:	f000 f94c 	bl	8006100 <_lseek_r>
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e72:	81a3      	strh	r3, [r4, #12]
 8005e74:	4632      	mov	r2, r6
 8005e76:	463b      	mov	r3, r7
 8005e78:	4628      	mov	r0, r5
 8005e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7e:	f000 b9b7 	b.w	80061f0 <_write_r>

08005e82 <__sseek>:
 8005e82:	b510      	push	{r4, lr}
 8005e84:	460c      	mov	r4, r1
 8005e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e8a:	f000 f939 	bl	8006100 <_lseek_r>
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	bf15      	itete	ne
 8005e94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e9e:	81a3      	strheq	r3, [r4, #12]
 8005ea0:	bf18      	it	ne
 8005ea2:	81a3      	strhne	r3, [r4, #12]
 8005ea4:	bd10      	pop	{r4, pc}

08005ea6 <__sclose>:
 8005ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eaa:	f000 b8f7 	b.w	800609c <_close_r>

08005eae <__swbuf_r>:
 8005eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb0:	460e      	mov	r6, r1
 8005eb2:	4614      	mov	r4, r2
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	b118      	cbz	r0, 8005ec0 <__swbuf_r+0x12>
 8005eb8:	6a03      	ldr	r3, [r0, #32]
 8005eba:	b90b      	cbnz	r3, 8005ec0 <__swbuf_r+0x12>
 8005ebc:	f7ff fa96 	bl	80053ec <__sinit>
 8005ec0:	69a3      	ldr	r3, [r4, #24]
 8005ec2:	60a3      	str	r3, [r4, #8]
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	071a      	lsls	r2, r3, #28
 8005ec8:	d501      	bpl.n	8005ece <__swbuf_r+0x20>
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	b943      	cbnz	r3, 8005ee0 <__swbuf_r+0x32>
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 f82b 	bl	8005f2c <__swsetup_r>
 8005ed6:	b118      	cbz	r0, 8005ee0 <__swbuf_r+0x32>
 8005ed8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005edc:	4638      	mov	r0, r7
 8005ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	6922      	ldr	r2, [r4, #16]
 8005ee4:	1a98      	subs	r0, r3, r2
 8005ee6:	6963      	ldr	r3, [r4, #20]
 8005ee8:	b2f6      	uxtb	r6, r6
 8005eea:	4283      	cmp	r3, r0
 8005eec:	4637      	mov	r7, r6
 8005eee:	dc05      	bgt.n	8005efc <__swbuf_r+0x4e>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f7ff ff64 	bl	8005dc0 <_fflush_r>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d1ed      	bne.n	8005ed8 <__swbuf_r+0x2a>
 8005efc:	68a3      	ldr	r3, [r4, #8]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	701e      	strb	r6, [r3, #0]
 8005f0a:	6962      	ldr	r2, [r4, #20]
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d004      	beq.n	8005f1c <__swbuf_r+0x6e>
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	07db      	lsls	r3, r3, #31
 8005f16:	d5e1      	bpl.n	8005edc <__swbuf_r+0x2e>
 8005f18:	2e0a      	cmp	r6, #10
 8005f1a:	d1df      	bne.n	8005edc <__swbuf_r+0x2e>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f7ff ff4e 	bl	8005dc0 <_fflush_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0d9      	beq.n	8005edc <__swbuf_r+0x2e>
 8005f28:	e7d6      	b.n	8005ed8 <__swbuf_r+0x2a>
	...

08005f2c <__swsetup_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4b29      	ldr	r3, [pc, #164]	@ (8005fd4 <__swsetup_r+0xa8>)
 8005f30:	4605      	mov	r5, r0
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	460c      	mov	r4, r1
 8005f36:	b118      	cbz	r0, 8005f40 <__swsetup_r+0x14>
 8005f38:	6a03      	ldr	r3, [r0, #32]
 8005f3a:	b90b      	cbnz	r3, 8005f40 <__swsetup_r+0x14>
 8005f3c:	f7ff fa56 	bl	80053ec <__sinit>
 8005f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f44:	0719      	lsls	r1, r3, #28
 8005f46:	d422      	bmi.n	8005f8e <__swsetup_r+0x62>
 8005f48:	06da      	lsls	r2, r3, #27
 8005f4a:	d407      	bmi.n	8005f5c <__swsetup_r+0x30>
 8005f4c:	2209      	movs	r2, #9
 8005f4e:	602a      	str	r2, [r5, #0]
 8005f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f5a:	e033      	b.n	8005fc4 <__swsetup_r+0x98>
 8005f5c:	0758      	lsls	r0, r3, #29
 8005f5e:	d512      	bpl.n	8005f86 <__swsetup_r+0x5a>
 8005f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f62:	b141      	cbz	r1, 8005f76 <__swsetup_r+0x4a>
 8005f64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f68:	4299      	cmp	r1, r3
 8005f6a:	d002      	beq.n	8005f72 <__swsetup_r+0x46>
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f000 f951 	bl	8006214 <_free_r>
 8005f72:	2300      	movs	r3, #0
 8005f74:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6063      	str	r3, [r4, #4]
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f043 0308 	orr.w	r3, r3, #8
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	b94b      	cbnz	r3, 8005fa6 <__swsetup_r+0x7a>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f9c:	d003      	beq.n	8005fa6 <__swsetup_r+0x7a>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 f83f 	bl	8006024 <__smakebuf_r>
 8005fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005faa:	f013 0201 	ands.w	r2, r3, #1
 8005fae:	d00a      	beq.n	8005fc6 <__swsetup_r+0x9a>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	60a2      	str	r2, [r4, #8]
 8005fb4:	6962      	ldr	r2, [r4, #20]
 8005fb6:	4252      	negs	r2, r2
 8005fb8:	61a2      	str	r2, [r4, #24]
 8005fba:	6922      	ldr	r2, [r4, #16]
 8005fbc:	b942      	cbnz	r2, 8005fd0 <__swsetup_r+0xa4>
 8005fbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fc2:	d1c5      	bne.n	8005f50 <__swsetup_r+0x24>
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	0799      	lsls	r1, r3, #30
 8005fc8:	bf58      	it	pl
 8005fca:	6962      	ldrpl	r2, [r4, #20]
 8005fcc:	60a2      	str	r2, [r4, #8]
 8005fce:	e7f4      	b.n	8005fba <__swsetup_r+0x8e>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e7f7      	b.n	8005fc4 <__swsetup_r+0x98>
 8005fd4:	20000020 	.word	0x20000020

08005fd8 <__swhatbuf_r>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	460c      	mov	r4, r1
 8005fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	b096      	sub	sp, #88	@ 0x58
 8005fe4:	4615      	mov	r5, r2
 8005fe6:	461e      	mov	r6, r3
 8005fe8:	da0d      	bge.n	8006006 <__swhatbuf_r+0x2e>
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	bf14      	ite	ne
 8005ff6:	2340      	movne	r3, #64	@ 0x40
 8005ff8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	6031      	str	r1, [r6, #0]
 8006000:	602b      	str	r3, [r5, #0]
 8006002:	b016      	add	sp, #88	@ 0x58
 8006004:	bd70      	pop	{r4, r5, r6, pc}
 8006006:	466a      	mov	r2, sp
 8006008:	f000 f858 	bl	80060bc <_fstat_r>
 800600c:	2800      	cmp	r0, #0
 800600e:	dbec      	blt.n	8005fea <__swhatbuf_r+0x12>
 8006010:	9901      	ldr	r1, [sp, #4]
 8006012:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006016:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800601a:	4259      	negs	r1, r3
 800601c:	4159      	adcs	r1, r3
 800601e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006022:	e7eb      	b.n	8005ffc <__swhatbuf_r+0x24>

08006024 <__smakebuf_r>:
 8006024:	898b      	ldrh	r3, [r1, #12]
 8006026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006028:	079d      	lsls	r5, r3, #30
 800602a:	4606      	mov	r6, r0
 800602c:	460c      	mov	r4, r1
 800602e:	d507      	bpl.n	8006040 <__smakebuf_r+0x1c>
 8006030:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	2301      	movs	r3, #1
 800603a:	6163      	str	r3, [r4, #20]
 800603c:	b003      	add	sp, #12
 800603e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006040:	ab01      	add	r3, sp, #4
 8006042:	466a      	mov	r2, sp
 8006044:	f7ff ffc8 	bl	8005fd8 <__swhatbuf_r>
 8006048:	9f00      	ldr	r7, [sp, #0]
 800604a:	4605      	mov	r5, r0
 800604c:	4639      	mov	r1, r7
 800604e:	4630      	mov	r0, r6
 8006050:	f7ff fc24 	bl	800589c <_malloc_r>
 8006054:	b948      	cbnz	r0, 800606a <__smakebuf_r+0x46>
 8006056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800605a:	059a      	lsls	r2, r3, #22
 800605c:	d4ee      	bmi.n	800603c <__smakebuf_r+0x18>
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	f043 0302 	orr.w	r3, r3, #2
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	e7e2      	b.n	8006030 <__smakebuf_r+0xc>
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	6020      	str	r0, [r4, #0]
 800606e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800607a:	b15b      	cbz	r3, 8006094 <__smakebuf_r+0x70>
 800607c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006080:	4630      	mov	r0, r6
 8006082:	f000 f82d 	bl	80060e0 <_isatty_r>
 8006086:	b128      	cbz	r0, 8006094 <__smakebuf_r+0x70>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f023 0303 	bic.w	r3, r3, #3
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	431d      	orrs	r5, r3
 8006098:	81a5      	strh	r5, [r4, #12]
 800609a:	e7cf      	b.n	800603c <__smakebuf_r+0x18>

0800609c <_close_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d06      	ldr	r5, [pc, #24]	@ (80060b8 <_close_r+0x1c>)
 80060a0:	2300      	movs	r3, #0
 80060a2:	4604      	mov	r4, r0
 80060a4:	4608      	mov	r0, r1
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	f7fb fb20 	bl	80016ec <_close>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d102      	bne.n	80060b6 <_close_r+0x1a>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	b103      	cbz	r3, 80060b6 <_close_r+0x1a>
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	20000534 	.word	0x20000534

080060bc <_fstat_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4d07      	ldr	r5, [pc, #28]	@ (80060dc <_fstat_r+0x20>)
 80060c0:	2300      	movs	r3, #0
 80060c2:	4604      	mov	r4, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	f7fb fb1b 	bl	8001704 <_fstat>
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	d102      	bne.n	80060d8 <_fstat_r+0x1c>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	b103      	cbz	r3, 80060d8 <_fstat_r+0x1c>
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	bd38      	pop	{r3, r4, r5, pc}
 80060da:	bf00      	nop
 80060dc:	20000534 	.word	0x20000534

080060e0 <_isatty_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d06      	ldr	r5, [pc, #24]	@ (80060fc <_isatty_r+0x1c>)
 80060e4:	2300      	movs	r3, #0
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	f7fb fb1a 	bl	8001724 <_isatty>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	d102      	bne.n	80060fa <_isatty_r+0x1a>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b103      	cbz	r3, 80060fa <_isatty_r+0x1a>
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	20000534 	.word	0x20000534

08006100 <_lseek_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d07      	ldr	r5, [pc, #28]	@ (8006120 <_lseek_r+0x20>)
 8006104:	4604      	mov	r4, r0
 8006106:	4608      	mov	r0, r1
 8006108:	4611      	mov	r1, r2
 800610a:	2200      	movs	r2, #0
 800610c:	602a      	str	r2, [r5, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	f7fb fb13 	bl	800173a <_lseek>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_lseek_r+0x1e>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_lseek_r+0x1e>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	20000534 	.word	0x20000534

08006124 <_raise_r>:
 8006124:	291f      	cmp	r1, #31
 8006126:	b538      	push	{r3, r4, r5, lr}
 8006128:	4605      	mov	r5, r0
 800612a:	460c      	mov	r4, r1
 800612c:	d904      	bls.n	8006138 <_raise_r+0x14>
 800612e:	2316      	movs	r3, #22
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800613a:	b112      	cbz	r2, 8006142 <_raise_r+0x1e>
 800613c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006140:	b94b      	cbnz	r3, 8006156 <_raise_r+0x32>
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f842 	bl	80061cc <_getpid_r>
 8006148:	4622      	mov	r2, r4
 800614a:	4601      	mov	r1, r0
 800614c:	4628      	mov	r0, r5
 800614e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006152:	f000 b829 	b.w	80061a8 <_kill_r>
 8006156:	2b01      	cmp	r3, #1
 8006158:	d00a      	beq.n	8006170 <_raise_r+0x4c>
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	d103      	bne.n	8006166 <_raise_r+0x42>
 800615e:	2316      	movs	r3, #22
 8006160:	6003      	str	r3, [r0, #0]
 8006162:	2001      	movs	r0, #1
 8006164:	e7e7      	b.n	8006136 <_raise_r+0x12>
 8006166:	2100      	movs	r1, #0
 8006168:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800616c:	4620      	mov	r0, r4
 800616e:	4798      	blx	r3
 8006170:	2000      	movs	r0, #0
 8006172:	e7e0      	b.n	8006136 <_raise_r+0x12>

08006174 <raise>:
 8006174:	4b02      	ldr	r3, [pc, #8]	@ (8006180 <raise+0xc>)
 8006176:	4601      	mov	r1, r0
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	f7ff bfd3 	b.w	8006124 <_raise_r>
 800617e:	bf00      	nop
 8006180:	20000020 	.word	0x20000020

08006184 <_read_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4d07      	ldr	r5, [pc, #28]	@ (80061a4 <_read_r+0x20>)
 8006188:	4604      	mov	r4, r0
 800618a:	4608      	mov	r0, r1
 800618c:	4611      	mov	r1, r2
 800618e:	2200      	movs	r2, #0
 8006190:	602a      	str	r2, [r5, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	f7fb fa71 	bl	800167a <_read>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_read_r+0x1e>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_read_r+0x1e>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20000534 	.word	0x20000534

080061a8 <_kill_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	@ (80061c8 <_kill_r+0x20>)
 80061ac:	2300      	movs	r3, #0
 80061ae:	4604      	mov	r4, r0
 80061b0:	4608      	mov	r0, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	602b      	str	r3, [r5, #0]
 80061b6:	f7fb fa45 	bl	8001644 <_kill>
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d102      	bne.n	80061c4 <_kill_r+0x1c>
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	b103      	cbz	r3, 80061c4 <_kill_r+0x1c>
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	bf00      	nop
 80061c8:	20000534 	.word	0x20000534

080061cc <_getpid_r>:
 80061cc:	f7fb ba32 	b.w	8001634 <_getpid>

080061d0 <_sbrk_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d06      	ldr	r5, [pc, #24]	@ (80061ec <_sbrk_r+0x1c>)
 80061d4:	2300      	movs	r3, #0
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	f7fb faba 	bl	8001754 <_sbrk>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_sbrk_r+0x1a>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_sbrk_r+0x1a>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000534 	.word	0x20000534

080061f0 <_write_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d07      	ldr	r5, [pc, #28]	@ (8006210 <_write_r+0x20>)
 80061f4:	4604      	mov	r4, r0
 80061f6:	4608      	mov	r0, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fb fa58 	bl	80016b4 <_write>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_write_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_write_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	20000534 	.word	0x20000534

08006214 <_free_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4605      	mov	r5, r0
 8006218:	2900      	cmp	r1, #0
 800621a:	d041      	beq.n	80062a0 <_free_r+0x8c>
 800621c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006220:	1f0c      	subs	r4, r1, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	bfb8      	it	lt
 8006226:	18e4      	addlt	r4, r4, r3
 8006228:	f7ff fdf2 	bl	8005e10 <__malloc_lock>
 800622c:	4a1d      	ldr	r2, [pc, #116]	@ (80062a4 <_free_r+0x90>)
 800622e:	6813      	ldr	r3, [r2, #0]
 8006230:	b933      	cbnz	r3, 8006240 <_free_r+0x2c>
 8006232:	6063      	str	r3, [r4, #4]
 8006234:	6014      	str	r4, [r2, #0]
 8006236:	4628      	mov	r0, r5
 8006238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800623c:	f7ff bdee 	b.w	8005e1c <__malloc_unlock>
 8006240:	42a3      	cmp	r3, r4
 8006242:	d908      	bls.n	8006256 <_free_r+0x42>
 8006244:	6820      	ldr	r0, [r4, #0]
 8006246:	1821      	adds	r1, r4, r0
 8006248:	428b      	cmp	r3, r1
 800624a:	bf01      	itttt	eq
 800624c:	6819      	ldreq	r1, [r3, #0]
 800624e:	685b      	ldreq	r3, [r3, #4]
 8006250:	1809      	addeq	r1, r1, r0
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	e7ed      	b.n	8006232 <_free_r+0x1e>
 8006256:	461a      	mov	r2, r3
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b10b      	cbz	r3, 8006260 <_free_r+0x4c>
 800625c:	42a3      	cmp	r3, r4
 800625e:	d9fa      	bls.n	8006256 <_free_r+0x42>
 8006260:	6811      	ldr	r1, [r2, #0]
 8006262:	1850      	adds	r0, r2, r1
 8006264:	42a0      	cmp	r0, r4
 8006266:	d10b      	bne.n	8006280 <_free_r+0x6c>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	4401      	add	r1, r0
 800626c:	1850      	adds	r0, r2, r1
 800626e:	4283      	cmp	r3, r0
 8006270:	6011      	str	r1, [r2, #0]
 8006272:	d1e0      	bne.n	8006236 <_free_r+0x22>
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	6053      	str	r3, [r2, #4]
 800627a:	4408      	add	r0, r1
 800627c:	6010      	str	r0, [r2, #0]
 800627e:	e7da      	b.n	8006236 <_free_r+0x22>
 8006280:	d902      	bls.n	8006288 <_free_r+0x74>
 8006282:	230c      	movs	r3, #12
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	e7d6      	b.n	8006236 <_free_r+0x22>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	1821      	adds	r1, r4, r0
 800628c:	428b      	cmp	r3, r1
 800628e:	bf04      	itt	eq
 8006290:	6819      	ldreq	r1, [r3, #0]
 8006292:	685b      	ldreq	r3, [r3, #4]
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	bf04      	itt	eq
 8006298:	1809      	addeq	r1, r1, r0
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	6054      	str	r4, [r2, #4]
 800629e:	e7ca      	b.n	8006236 <_free_r+0x22>
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
 80062a2:	bf00      	nop
 80062a4:	20000530 	.word	0x20000530

080062a8 <_init>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr

080062b4 <_fini>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr
