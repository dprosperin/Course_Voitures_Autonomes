
lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f18  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080060f8  080060f8  000070f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061cc  080061cc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d4  080061d4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d4  080061d4  000071d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061d8  080061d8  000071d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080061dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000afc  20000068  08006244  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  08006244  00008b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da2a  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d8  00000000  00000000  00015ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00017ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001cd10  00000000  00000000  00018698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d7fc  00000000  00000000  000353a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b8731  00000000  00000000  00042ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000fb2d5  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000850  00000000  00000000  000fb318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003318  00000000  00000000  000fbb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000fee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080060e0 	.word	0x080060e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080060e0 	.word	0x080060e0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005c8:	1d39      	adds	r1, r7, #4
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ce:	2201      	movs	r2, #1
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <__io_putchar+0x20>)
 80005d2:	f002 fb1b 	bl	8002c0c <HAL_UART_Transmit>

	return ch;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000918 	.word	0x20000918

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	@ 0x30
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fca0 	bl	8000f2e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f8f5 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fa05 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f6:	f000 f9d9 	bl	80009ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f989 	bl	8000910 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005fe:	f000 f939 	bl	8000874 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    int i = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t message[40] = "";
 8000606:	2300      	movs	r3, #0
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2224      	movs	r2, #36	@ 0x24
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f004 ff0b 	bl	800542c <memset>

    HAL_UART_Receive_DMA(&LIDAR_HUART, buffer, 2048);
 8000616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800061a:	4966      	ldr	r1, [pc, #408]	@ (80007b4 <main+0x1d0>)
 800061c:	4866      	ldr	r0, [pc, #408]	@ (80007b8 <main+0x1d4>)
 800061e:	f002 fbcf 	bl	8002dc0 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1); // A laisser proche de la boucle while(1)
 8000622:	2201      	movs	r2, #1
 8000624:	4965      	ldr	r1, [pc, #404]	@ (80007bc <main+0x1d8>)
 8000626:	4866      	ldr	r0, [pc, #408]	@ (80007c0 <main+0x1dc>)
 8000628:	f002 fb7e 	bl	8002d28 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_reception_uart2 == 1) {
 800062c:	4b65      	ldr	r3, [pc, #404]	@ (80007c4 <main+0x1e0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d131      	bne.n	8000698 <main+0xb4>
	  		  if (caractere == '\n') {
 8000634:	4b61      	ldr	r3, [pc, #388]	@ (80007bc <main+0x1d8>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b0a      	cmp	r3, #10
 800063a:	d11c      	bne.n	8000676 <main+0x92>
	  			  HAL_UART_Transmit(&PC_HUART, message, strlen(message), HAL_MAX_DELAY);
 800063c:	463b      	mov	r3, r7
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdee 	bl	8000220 <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	4639      	mov	r1, r7
 800064a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064e:	485c      	ldr	r0, [pc, #368]	@ (80007c0 <main+0x1dc>)
 8000650:	f002 fadc 	bl	8002c0c <HAL_UART_Transmit>
	  			  HAL_UART_Transmit(&LIDAR_HUART, message, strlen(message), HAL_MAX_DELAY);
 8000654:	463b      	mov	r3, r7
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fde2 	bl	8000220 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	4639      	mov	r1, r7
 8000662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000666:	4854      	ldr	r0, [pc, #336]	@ (80007b8 <main+0x1d4>)
 8000668:	f002 fad0 	bl	8002c0c <HAL_UART_Transmit>
	  			  message[0] = "\0";
 800066c:	4b56      	ldr	r3, [pc, #344]	@ (80007c8 <main+0x1e4>)
 800066e:	b2db      	uxtb	r3, r3
 8000670:	703b      	strb	r3, [r7, #0]
	  			  i = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  		  }

	  		  message[i++] = caractere;
 8000676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800067c:	4a4f      	ldr	r2, [pc, #316]	@ (80007bc <main+0x1d8>)
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	3330      	adds	r3, #48	@ 0x30
 8000682:	443b      	add	r3, r7
 8000684:	f803 2c30 	strb.w	r2, [r3, #-48]
	  		  flag_reception_uart2 = 0;
 8000688:	4b4e      	ldr	r3, [pc, #312]	@ (80007c4 <main+0x1e0>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]

	  		  HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	494a      	ldr	r1, [pc, #296]	@ (80007bc <main+0x1d8>)
 8000692:	484b      	ldr	r0, [pc, #300]	@ (80007c0 <main+0x1dc>)
 8000694:	f002 fb48 	bl	8002d28 <HAL_UART_Receive_IT>
	  	  }

	  if (flag_reception_uart1 == 1)
 8000698:	4b4c      	ldr	r3, [pc, #304]	@ (80007cc <main+0x1e8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d1c5      	bne.n	800062c <main+0x48>

	  {
		  for (int i = 0; i < sizeof(buffer); i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006a4:	e07c      	b.n	80007a0 <main+0x1bc>
		  		{
		  			if (buffer[i] == 0xA5 &&
 80006a6:	4a43      	ldr	r2, [pc, #268]	@ (80007b4 <main+0x1d0>)
 80006a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2ba5      	cmp	r3, #165	@ 0xa5
 80006b0:	d173      	bne.n	800079a <main+0x1b6>
 80006b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b4:	3301      	adds	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
		  			    buffer[++i] == 0x5A &&
 80006b8:	4a3e      	ldr	r2, [pc, #248]	@ (80007b4 <main+0x1d0>)
 80006ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
		  			if (buffer[i] == 0xA5 &&
 80006c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80006c2:	d16a      	bne.n	800079a <main+0x1b6>
		  			    buffer[++i] == 0x5A &&
 80006c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006c6:	3301      	adds	r3, #1
 80006c8:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x05 &&
 80006ca:	4a3a      	ldr	r2, [pc, #232]	@ (80007b4 <main+0x1d0>)
 80006cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
		  			    buffer[++i] == 0x5A &&
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	d161      	bne.n	800079a <main+0x1b6>
		  				buffer[++i] == 0x05 &&
 80006d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006d8:	3301      	adds	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x00 &&
 80006dc:	4a35      	ldr	r2, [pc, #212]	@ (80007b4 <main+0x1d0>)
 80006de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
		  				buffer[++i] == 0x05 &&
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d158      	bne.n	800079a <main+0x1b6>
		  				buffer[++i] == 0x00 &&
 80006e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ea:	3301      	adds	r3, #1
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x00 &&
 80006ee:	4a31      	ldr	r2, [pc, #196]	@ (80007b4 <main+0x1d0>)
 80006f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
		  				buffer[++i] == 0x00 &&
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d14f      	bne.n	800079a <main+0x1b6>
		  				buffer[++i] == 0x00 &&
 80006fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006fc:	3301      	adds	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x40 &&
 8000700:	4a2c      	ldr	r2, [pc, #176]	@ (80007b4 <main+0x1d0>)
 8000702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
		  				buffer[++i] == 0x00 &&
 8000708:	2b40      	cmp	r3, #64	@ 0x40
 800070a:	d146      	bne.n	800079a <main+0x1b6>
		  				buffer[++i] == 0x40 &&
 800070c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800070e:	3301      	adds	r3, #1
 8000710:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x81)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <main+0x1d0>)
 8000714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
		  				buffer[++i] == 0x40 &&
 800071a:	2b81      	cmp	r3, #129	@ 0x81
 800071c:	d13d      	bne.n	800079a <main+0x1b6>
		  			{
		  				printf("\n------- Primere trame ------\n");
 800071e:	482c      	ldr	r0, [pc, #176]	@ (80007d0 <main+0x1ec>)
 8000720:	f004 fe7c 	bl	800541c <puts>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 8000724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000726:	3301      	adds	r3, #1
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800072a:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <main+0x1d0>)
 800072c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4619      	mov	r1, r3
 8000734:	4827      	ldr	r0, [pc, #156]	@ (80007d4 <main+0x1f0>)
 8000736:	f004 fe09 	bl	800534c <iprintf>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 800073a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800073c:	3301      	adds	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000740:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <main+0x1d0>)
 8000742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	4822      	ldr	r0, [pc, #136]	@ (80007d4 <main+0x1f0>)
 800074c:	f004 fdfe 	bl	800534c <iprintf>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 8000750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000752:	3301      	adds	r3, #1
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000756:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <main+0x1d0>)
 8000758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4619      	mov	r1, r3
 8000760:	481c      	ldr	r0, [pc, #112]	@ (80007d4 <main+0x1f0>)
 8000762:	f004 fdf3 	bl	800534c <iprintf>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 8000766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000768:	3301      	adds	r3, #1
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800076c:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <main+0x1d0>)
 800076e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	4817      	ldr	r0, [pc, #92]	@ (80007d4 <main+0x1f0>)
 8000778:	f004 fde8 	bl	800534c <iprintf>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 800077c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800077e:	3301      	adds	r3, #1
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000782:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <main+0x1d0>)
 8000784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4619      	mov	r1, r3
 800078c:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <main+0x1f0>)
 800078e:	f004 fddd 	bl	800534c <iprintf>
		  			    printf("------- Fin primere trame ------\n");
 8000792:	4811      	ldr	r0, [pc, #68]	@ (80007d8 <main+0x1f4>)
 8000794:	f004 fe42 	bl	800541c <puts>


		  				break;
 8000798:	e007      	b.n	80007aa <main+0x1c6>
		  for (int i = 0; i < sizeof(buffer); i++)
 800079a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800079c:	3301      	adds	r3, #1
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007a6:	f4ff af7e 	bcc.w	80006a6 <main+0xc2>
		  			}


		  		}
		  flag_reception_uart1 = 0;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <main+0x1e8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
	  if (flag_reception_uart2 == 1) {
 80007b0:	e73c      	b.n	800062c <main+0x48>
 80007b2:	bf00      	nop
 80007b4:	20000084 	.word	0x20000084
 80007b8:	20000884 	.word	0x20000884
 80007bc:	20000a0e 	.word	0x20000a0e
 80007c0:	20000918 	.word	0x20000918
 80007c4:	20000a0c 	.word	0x20000a0c
 80007c8:	080060f8 	.word	0x080060f8
 80007cc:	20000a0d 	.word	0x20000a0d
 80007d0:	080060fc 	.word	0x080060fc
 80007d4:	0800611c 	.word	0x0800611c
 80007d8:	08006134 	.word	0x08006134

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	@ 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2238      	movs	r2, #56	@ 0x38
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fe1e 	bl	800542c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007fe:	2000      	movs	r0, #0
 8000800:	f001 f9e2 	bl	8001bc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080e:	2340      	movs	r3, #64	@ 0x40
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000816:	2302      	movs	r3, #2
 8000818:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800081a:	2304      	movs	r3, #4
 800081c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800081e:	2355      	movs	r3, #85	@ 0x55
 8000820:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	f107 0318 	add.w	r3, r7, #24
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fa7c 	bl	8001d30 <HAL_RCC_OscConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800083e:	f000 f949 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	230f      	movs	r3, #15
 8000844:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2303      	movs	r3, #3
 8000848:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2104      	movs	r1, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fd7a 	bl	8002354 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000866:	f000 f935 	bl	8000ad4 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	@ 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000878:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 800087a:	4a23      	ldr	r2, [pc, #140]	@ (8000908 <MX_USART1_UART_Init+0x94>)
 800087c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 8000880:	4a22      	ldr	r2, [pc, #136]	@ (800090c <MX_USART1_UART_Init+0x98>)
 8000882:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800088a:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000890:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000896:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 8000898:	220c      	movs	r2, #12
 800089a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a8:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ba:	4812      	ldr	r0, [pc, #72]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 80008bc:	f002 f956 	bl	8002b6c <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80008c6:	f000 f905 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	480d      	ldr	r0, [pc, #52]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 80008ce:	f004 fbb0 	bl	8005032 <HAL_UARTEx_SetTxFifoThreshold>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80008d8:	f000 f8fc 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 80008e0:	f004 fbe5 	bl	80050ae <HAL_UARTEx_SetRxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008ea:	f000 f8f3 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_USART1_UART_Init+0x90>)
 80008f0:	f004 fb66 	bl	8004fc0 <HAL_UARTEx_DisableFifoMode>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008fa:	f000 f8eb 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000884 	.word	0x20000884
 8000908:	40013800 	.word	0x40013800
 800090c:	000f4240 	.word	0x000f4240

08000910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	@ (80009a4 <MX_USART2_UART_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800091a:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 800091c:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <MX_USART2_UART_Init+0x98>)
 800091e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000920:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000926:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 8000934:	220c      	movs	r2, #12
 8000936:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4812      	ldr	r0, [pc, #72]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 8000958:	f002 f908 	bl	8002b6c <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000962:	f000 f8b7 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 800096a:	f004 fb62 	bl	8005032 <HAL_UARTEx_SetTxFifoThreshold>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000974:	f000 f8ae 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 800097c:	f004 fb97 	bl	80050ae <HAL_UARTEx_SetRxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000986:	f000 f8a5 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_USART2_UART_Init+0x90>)
 800098c:	f004 fb18 	bl	8004fc0 <HAL_UARTEx_DisableFifoMode>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000996:	f000 f89d 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000918 	.word	0x20000918
 80009a4:	40004400 	.word	0x40004400
 80009a8:	000f4240 	.word	0x000f4240

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_DMA_Init+0x50>)
 80009b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009b6:	4a11      	ldr	r2, [pc, #68]	@ (80009fc <MX_DMA_Init+0x50>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_DMA_Init+0x50>)
 80009c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_DMA_Init+0x50>)
 80009cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009ce:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <MX_DMA_Init+0x50>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_DMA_Init+0x50>)
 80009d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200b      	movs	r0, #11
 80009e8:	f000 fbed 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009ec:	200b      	movs	r0, #11
 80009ee:	f000 fc04 	bl	80011fa <HAL_NVIC_EnableIRQ>

}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_GPIO_Init+0x78>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <MX_GPIO_Init+0x78>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_GPIO_Init+0x78>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_GPIO_Init+0x78>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4a11      	ldr	r2, [pc, #68]	@ (8000a78 <MX_GPIO_Init+0x78>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_GPIO_Init+0x78>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <MX_GPIO_Init+0x7c>)
 8000a4e:	f001 f8a3 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_GPIO_Init+0x7c>)
 8000a6c:	f000 ff12 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000400 	.word	0x48000400

08000a80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <HAL_UART_RxCpltCallback+0x3c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d107      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0x22>
		flag_reception_uart2 = 1;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x40>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
		/*
		 * Relancer la réception dans l'interruption
	     */
		HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	490a      	ldr	r1, [pc, #40]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x44>)
 8000a9c:	480a      	ldr	r0, [pc, #40]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x48>)
 8000a9e:	f002 f943 	bl	8002d28 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART1) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <HAL_UART_RxCpltCallback+0x4c>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d102      	bne.n	8000ab2 <HAL_UART_RxCpltCallback+0x32>
		flag_reception_uart1 = 1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x50>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	20000a0c 	.word	0x20000a0c
 8000ac4:	20000a0e 	.word	0x20000a0e
 8000ac8:	20000918 	.word	0x20000918
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	20000a0d 	.word	0x20000a0d

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aea:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b02:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b16:	f001 f8fb 	bl	8001d10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09c      	sub	sp, #112	@ 0x70
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	2244      	movs	r2, #68	@ 0x44
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 fc6f 	bl	800542c <memset>
  if(huart->Instance==USART1)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a5b      	ldr	r2, [pc, #364]	@ (8000cc0 <HAL_UART_MspInit+0x198>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d16b      	bne.n	8000c30 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b60:	f107 0318 	add.w	r3, r7, #24
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 fe11 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b70:	f7ff ffb0 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b74:	4b53      	ldr	r3, [pc, #332]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b78:	4a52      	ldr	r2, [pc, #328]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b80:	4b50      	ldr	r3, [pc, #320]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b98:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f000 fe66 	bl	8001894 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000bca:	4a40      	ldr	r2, [pc, #256]	@ (8000ccc <HAL_UART_MspInit+0x1a4>)
 8000bcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000bce:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000bd0:	2218      	movs	r2, #24
 8000bd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bda:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000be0:	4b39      	ldr	r3, [pc, #228]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000be2:	2280      	movs	r2, #128	@ 0x80
 8000be4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000be6:	4b38      	ldr	r3, [pc, #224]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bec:	4b36      	ldr	r3, [pc, #216]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000bf2:	4b35      	ldr	r3, [pc, #212]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000bf8:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000bfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c00:	4831      	ldr	r0, [pc, #196]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000c02:	f000 fb15 	bl	8001230 <HAL_DMA_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000c0c:	f7ff ff62 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a2d      	ldr	r2, [pc, #180]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000c14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000c18:	4a2b      	ldr	r2, [pc, #172]	@ (8000cc8 <HAL_UART_MspInit+0x1a0>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2025      	movs	r0, #37	@ 0x25
 8000c24:	f000 facf 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c28:	2025      	movs	r0, #37	@ 0x25
 8000c2a:	f000 fae6 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2e:	e043      	b.n	8000cb8 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <HAL_UART_MspInit+0x1a8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d13e      	bne.n	8000cb8 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fda0 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8000c52:	f7ff ff3f 	bl	8000ad4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_UART_MspInit+0x19c>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c86:	230c      	movs	r3, #12
 8000c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c96:	2307      	movs	r3, #7
 8000c98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca4:	f000 fdf6 	bl	8001894 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2026      	movs	r0, #38	@ 0x26
 8000cae:	f000 fa8a 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cb2:	2026      	movs	r0, #38	@ 0x26
 8000cb4:	f000 faa1 	bl	80011fa <HAL_NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3770      	adds	r7, #112	@ 0x70
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40013800 	.word	0x40013800
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	200009ac 	.word	0x200009ac
 8000ccc:	40020008 	.word	0x40020008
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f953 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <DMA1_Channel1_IRQHandler+0x10>)
 8000d3a:	f000 fc5c 	bl	80015f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200009ac 	.word	0x200009ac

08000d48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <USART1_IRQHandler+0x10>)
 8000d4e:	f002 f883 	bl	8002e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000884 	.word	0x20000884

08000d5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <USART2_IRQHandler+0x10>)
 8000d62:	f002 f879 	bl	8002e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000918 	.word	0x20000918

08000d70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e00a      	b.n	8000d98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d82:	f3af 8000 	nop.w
 8000d86:	4601      	mov	r1, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf0      	blt.n	8000d82 <_read+0x12>
  }

  return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e009      	b.n	8000dd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fbfb 	bl	80005c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf1      	blt.n	8000dbc <_write+0x12>
  }
  return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_close>:

int _close(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_isatty>:

int _isatty(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a14      	ldr	r2, [pc, #80]	@ (8000ea8 <_sbrk+0x5c>)
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <_sbrk+0x60>)
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <_sbrk+0x64>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <_sbrk+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d207      	bcs.n	8000e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e7c:	f004 fade 	bl	800543c <__errno>
 8000e80:	4603      	mov	r3, r0
 8000e82:	220c      	movs	r2, #12
 8000e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e8a:	e009      	b.n	8000ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e92:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <_sbrk+0x64>)
 8000e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20008000 	.word	0x20008000
 8000eac:	00000400 	.word	0x00000400
 8000eb0:	20000a10 	.word	0x20000a10
 8000eb4:	20000b68 	.word	0x20000b68

08000eb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff ffea 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f004 fa9d 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff fb69 	bl	80005e4 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f20:	080061dc 	.word	0x080061dc
  ldr r2, =_sbss
 8000f24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f28:	20000b64 	.word	0x20000b64

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>

08000f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f939 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f80e 	bl	8000f60 <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e001      	b.n	8000f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f50:	f7ff fdc6 	bl	8000ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f54:	79fb      	ldrb	r3, [r7, #7]

}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <HAL_InitTick+0x68>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d022      	beq.n	8000fba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_InitTick+0x6c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <HAL_InitTick+0x68>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f944 	bl	8001216 <HAL_SYSTICK_Config>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10f      	bne.n	8000fb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	d809      	bhi.n	8000fae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fa2:	f000 f910 	bl	80011c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_InitTick+0x70>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e007      	b.n	8000fbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e004      	b.n	8000fbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e001      	b.n	8000fbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <HAL_IncTick+0x1c>)
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000a14 	.word	0x20000a14
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000a14 	.word	0x20000a14

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	@ (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	@ (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	@ (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	@ 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff29 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff40 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff90 	bl	8001104 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5f 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff33 	bl	8001074 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa4 	bl	800116c <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e08d      	b.n	800135e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b47      	ldr	r3, [pc, #284]	@ (8001368 <HAL_DMA_Init+0x138>)
 800124a:	429a      	cmp	r2, r3
 800124c:	d80f      	bhi.n	800126e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4b45      	ldr	r3, [pc, #276]	@ (800136c <HAL_DMA_Init+0x13c>)
 8001256:	4413      	add	r3, r2
 8001258:	4a45      	ldr	r2, [pc, #276]	@ (8001370 <HAL_DMA_Init+0x140>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	009a      	lsls	r2, r3, #2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a42      	ldr	r2, [pc, #264]	@ (8001374 <HAL_DMA_Init+0x144>)
 800126a:	641a      	str	r2, [r3, #64]	@ 0x40
 800126c:	e00e      	b.n	800128c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <HAL_DMA_Init+0x148>)
 8001276:	4413      	add	r3, r2
 8001278:	4a3d      	ldr	r2, [pc, #244]	@ (8001370 <HAL_DMA_Init+0x140>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	009a      	lsls	r2, r3, #2
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a3c      	ldr	r2, [pc, #240]	@ (800137c <HAL_DMA_Init+0x14c>)
 800128a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2202      	movs	r2, #2
 8001290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80012a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fa76 	bl	80017d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80012ec:	d102      	bne.n	80012f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001308:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d010      	beq.n	8001334 <HAL_DMA_Init+0x104>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b04      	cmp	r3, #4
 8001318:	d80c      	bhi.n	8001334 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fa96 	bl	800184c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	e008      	b.n	8001346 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40020407 	.word	0x40020407
 800136c:	bffdfff8 	.word	0xbffdfff8
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	40020000 	.word	0x40020000
 8001378:	bffdfbf8 	.word	0xbffdfbf8
 800137c:	40020400 	.word	0x40020400

08001380 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_DMA_Start_IT+0x20>
 800139c:	2302      	movs	r3, #2
 800139e:	e066      	b.n	800146e <HAL_DMA_Start_IT+0xee>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d155      	bne.n	8001460 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	68b9      	ldr	r1, [r7, #8]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 f9bb 	bl	8001754 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 020e 	orr.w	r2, r2, #14
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e00f      	b.n	8001418 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0204 	bic.w	r2, r2, #4
 8001406:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 020a 	orr.w	r2, r2, #10
 8001416:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001434:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800144c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e005      	b.n	800146c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001468:	2302      	movs	r3, #2
 800146a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d005      	beq.n	800149a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2204      	movs	r2, #4
 8001492:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e037      	b.n	800150a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 020e 	bic.w	r2, r2, #14
 80014a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f003 021f 	and.w	r2, r3, #31
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00c      	beq.n	800150a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001508:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d00d      	beq.n	800155c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e047      	b.n	80015ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020e 	bic.w	r2, r2, #14
 800156a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001586:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800158a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00c      	beq.n	80015cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	4798      	blx	r3
    }
  }
  return status;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	2204      	movs	r2, #4
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d026      	beq.n	8001670 <HAL_DMA_IRQHandler+0x7a>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d021      	beq.n	8001670 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	2b00      	cmp	r3, #0
 8001638:	d107      	bne.n	800164a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0204 	bic.w	r2, r2, #4
 8001648:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f003 021f 	and.w	r2, r3, #31
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	2104      	movs	r1, #4
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	2b00      	cmp	r3, #0
 8001664:	d071      	beq.n	800174a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800166e:	e06c      	b.n	800174a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2202      	movs	r2, #2
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d02e      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d029      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10b      	bne.n	80016b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 020a 	bic.w	r2, r2, #10
 80016aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	2102      	movs	r1, #2
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d038      	beq.n	800174a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016e0:	e033      	b.n	800174a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	2208      	movs	r2, #8
 80016ec:	409a      	lsls	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d02a      	beq.n	800174c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d025      	beq.n	800174c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 020e 	bic.w	r2, r2, #14
 800170e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800174a:	bf00      	nop
 800174c:	bf00      	nop
}
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800176a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800177c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	f003 021f 	and.w	r2, r3, #31
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f202 	lsl.w	r2, r1, r2
 8001790:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d108      	bne.n	80017b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017b2:	e007      	b.n	80017c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d802      	bhi.n	80017ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80017e4:	4b15      	ldr	r3, [pc, #84]	@ (800183c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e001      	b.n	80017ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017ec:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	3b08      	subs	r3, #8
 80017fa:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	009a      	lsls	r2, r3, #2
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4413      	add	r3, r2
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800181a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2201      	movs	r2, #1
 8001824:	409a      	lsls	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40020407 	.word	0x40020407
 800183c:	40020800 	.word	0x40020800
 8001840:	40020820 	.word	0x40020820
 8001844:	cccccccd 	.word	0xcccccccd
 8001848:	40020880 	.word	0x40020880

0800184c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	461a      	mov	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a08      	ldr	r2, [pc, #32]	@ (8001890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800186e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3b01      	subs	r3, #1
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2201      	movs	r2, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	1000823f 	.word	0x1000823f
 8001890:	40020940 	.word	0x40020940

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018a2:	e15a      	b.n	8001b5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 814c 	beq.w	8001b54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d123      	bne.n	80019c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0203 	and.w	r2, r3, #3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80a6 	beq.w	8001b54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a14:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a20:	4a56      	ldr	r2, [pc, #344]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a4a:	d01f      	beq.n	8001a8c <HAL_GPIO_Init+0x1f8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d019      	beq.n	8001a88 <HAL_GPIO_Init+0x1f4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a4b      	ldr	r2, [pc, #300]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <HAL_GPIO_Init+0x1f0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b88 <HAL_GPIO_Init+0x2f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00d      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_GPIO_Init+0x2f8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d007      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a48      	ldr	r2, [pc, #288]	@ (8001b90 <HAL_GPIO_Init+0x2fc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e00a      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a78:	2306      	movs	r3, #6
 8001a7a:	e008      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e006      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e004      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	f002 0203 	and.w	r2, r2, #3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9e:	4937      	ldr	r1, [pc, #220]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aac:	4b39      	ldr	r3, [pc, #228]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad0:	4a30      	ldr	r2, [pc, #192]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001afa:	4a26      	ldr	r2, [pc, #152]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b00:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b24:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b4e:	4a11      	ldr	r2, [pc, #68]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f ae9d 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	48001000 	.word	0x48001000
 8001b90:	48001400 	.word	0x48001400
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d141      	bne.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be2:	d131      	bne.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001be4:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bea:	4a46      	ldr	r2, [pc, #280]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf4:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bfc:	4a41      	ldr	r2, [pc, #260]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c04:	4b40      	ldr	r3, [pc, #256]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2232      	movs	r2, #50	@ 0x32
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0c9b      	lsrs	r3, r3, #18
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1a:	e002      	b.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c2e:	d102      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f2      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c36:	4b33      	ldr	r3, [pc, #204]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c42:	d158      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e057      	b.n	8001cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c58:	e04d      	b.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c60:	d141      	bne.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c62:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6e:	d131      	bne.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c76:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c80:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c88:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2232      	movs	r2, #50	@ 0x32
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	0c9b      	lsrs	r3, r3, #18
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca6:	e002      	b.n	8001cae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cba:	d102      	bne.n	8001cc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f2      	bne.n	8001ca8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cce:	d112      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e011      	b.n	8001cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cda:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ce4:	e007      	b.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cf4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40007000 	.word	0x40007000
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1e:	6093      	str	r3, [r2, #8]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40007000 	.word	0x40007000

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e2fe      	b.n	8002340 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d075      	beq.n	8001e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4e:	4b97      	ldr	r3, [pc, #604]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d58:	4b94      	ldr	r3, [pc, #592]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	d102      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3e>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_OscConfig+0x44>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d10b      	bne.n	8001d8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	4b8d      	ldr	r3, [pc, #564]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d05b      	beq.n	8001e38 <HAL_RCC_OscConfig+0x108>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d157      	bne.n	8001e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e2d9      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x74>
 8001d96:	4b85      	ldr	r3, [pc, #532]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a84      	ldr	r2, [pc, #528]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e01d      	b.n	8001de0 <HAL_RCC_OscConfig+0xb0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x98>
 8001dae:	4b7f      	ldr	r3, [pc, #508]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b7c      	ldr	r3, [pc, #496]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7b      	ldr	r2, [pc, #492]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0xb0>
 8001dc8:	4b78      	ldr	r3, [pc, #480]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a77      	ldr	r2, [pc, #476]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b75      	ldr	r3, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a74      	ldr	r2, [pc, #464]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f906 	bl	8000ff8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f902 	bl	8000ff8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e29e      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	4b6a      	ldr	r3, [pc, #424]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0xc0>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f8f2 	bl	8000ff8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff f8ee 	bl	8000ff8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e28a      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2a:	4b60      	ldr	r3, [pc, #384]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0xe8>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d075      	beq.n	8001f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4b59      	ldr	r3, [pc, #356]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4b56      	ldr	r3, [pc, #344]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0x136>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d002      	beq.n	8001e6c <HAL_RCC_OscConfig+0x13c>
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d11f      	bne.n	8001eac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x154>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e25d      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b49      	ldr	r3, [pc, #292]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	4946      	ldr	r1, [pc, #280]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e98:	4b45      	ldr	r3, [pc, #276]	@ (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f85f 	bl	8000f60 <HAL_InitTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d043      	beq.n	8001f30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e249      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d023      	beq.n	8001efc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a3c      	ldr	r2, [pc, #240]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f89a 	bl	8000ff8 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f896 	bl	8000ff8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e232      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eda:	4b34      	ldr	r3, [pc, #208]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	061b      	lsls	r3, r3, #24
 8001ef4:	492d      	ldr	r1, [pc, #180]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
 8001efa:	e01a      	b.n	8001f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efc:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2a      	ldr	r2, [pc, #168]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f876 	bl	8000ff8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff f872 	bl	8000ff8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e20e      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f22:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1e0>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d041      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d01c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4c:	4a17      	ldr	r2, [pc, #92]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f84f 	bl	8000ff8 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f84b 	bl	8000ff8 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1e7      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ef      	beq.n	8001f5e <HAL_RCC_OscConfig+0x22e>
 8001f7e:	e020      	b.n	8001fc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f80:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f832 	bl	8000ff8 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f96:	e00d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff f82e 	bl	8000ff8 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d906      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1ca      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ea      	bne.n	8001f98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80a6 	beq.w	800211c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd4:	4b84      	ldr	r3, [pc, #528]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2b4>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x2b6>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b7f      	ldr	r3, [pc, #508]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4a7e      	ldr	r2, [pc, #504]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002006:	4b79      	ldr	r3, [pc, #484]	@ (80021ec <HAL_RCC_OscConfig+0x4bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002012:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <HAL_RCC_OscConfig+0x4bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a75      	ldr	r2, [pc, #468]	@ (80021ec <HAL_RCC_OscConfig+0x4bc>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7fe ffeb 	bl	8000ff8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe ffe7 	bl	8000ff8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e183      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	4b6c      	ldr	r3, [pc, #432]	@ (80021ec <HAL_RCC_OscConfig+0x4bc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d108      	bne.n	800205e <HAL_RCC_OscConfig+0x32e>
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002052:	4a65      	ldr	r2, [pc, #404]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800205c:	e024      	b.n	80020a8 <HAL_RCC_OscConfig+0x378>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b05      	cmp	r3, #5
 8002064:	d110      	bne.n	8002088 <HAL_RCC_OscConfig+0x358>
 8002066:	4b60      	ldr	r3, [pc, #384]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	4a5e      	ldr	r2, [pc, #376]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002076:	4b5c      	ldr	r3, [pc, #368]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	4a5a      	ldr	r2, [pc, #360]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002086:	e00f      	b.n	80020a8 <HAL_RCC_OscConfig+0x378>
 8002088:	4b57      	ldr	r3, [pc, #348]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	4a56      	ldr	r2, [pc, #344]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002098:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	4a52      	ldr	r2, [pc, #328]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe ffa2 	bl	8000ff8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe ff9e 	bl	8000ff8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e138      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	4b46      	ldr	r3, [pc, #280]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ed      	beq.n	80020b8 <HAL_RCC_OscConfig+0x388>
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe ff8b 	bl	8000ff8 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe ff87 	bl	8000ff8 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e121      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020fc:	4b3a      	ldr	r3, [pc, #232]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ed      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	4b35      	ldr	r3, [pc, #212]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	4a34      	ldr	r2, [pc, #208]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d03c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01c      	beq.n	800216a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002130:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002132:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002136:	4a2c      	ldr	r2, [pc, #176]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7fe ff5a 	bl	8000ff8 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002148:	f7fe ff56 	bl	8000ff8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0f2      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800215a:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ef      	beq.n	8002148 <HAL_RCC_OscConfig+0x418>
 8002168:	e01b      	b.n	80021a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800216c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002170:	4a1d      	ldr	r2, [pc, #116]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7fe ff3d 	bl	8000ff8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002182:	f7fe ff39 	bl	8000ff8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0d5      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ef      	bne.n	8002182 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80c9 	beq.w	800233e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ac:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	f000 8083 	beq.w	80022c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d15e      	bne.n	8002280 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a08      	ldr	r2, [pc, #32]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe ff13 	bl	8000ff8 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d4:	e00c      	b.n	80021f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d6:	f7fe ff0f 	bl	8000ff8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d905      	bls.n	80021f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0ab      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f0:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ec      	bne.n	80021d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fc:	4b52      	ldr	r3, [pc, #328]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4b52      	ldr	r3, [pc, #328]	@ (800234c <HAL_RCC_OscConfig+0x61c>)
 8002202:	4013      	ands	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6a11      	ldr	r1, [r2, #32]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800220c:	3a01      	subs	r2, #1
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002216:	0212      	lsls	r2, r2, #8
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800221e:	0852      	lsrs	r2, r2, #1
 8002220:	3a01      	subs	r2, #1
 8002222:	0552      	lsls	r2, r2, #21
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800222a:	0852      	lsrs	r2, r2, #1
 800222c:	3a01      	subs	r2, #1
 800222e:	0652      	lsls	r2, r2, #25
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002236:	06d2      	lsls	r2, r2, #27
 8002238:	430a      	orrs	r2, r1
 800223a:	4943      	ldr	r1, [pc, #268]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 800223c:	4313      	orrs	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a40      	ldr	r2, [pc, #256]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800224c:	4b3e      	ldr	r3, [pc, #248]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a3d      	ldr	r2, [pc, #244]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002256:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fece 	bl	8000ff8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe feca 	bl	8000ff8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e066      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b35      	ldr	r3, [pc, #212]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x530>
 800227e:	e05e      	b.n	800233e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe feb4 	bl	8000ff8 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe feb0 	bl	8000ff8 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e04c      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a6:	4b28      	ldr	r3, [pc, #160]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022b2:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	4924      	ldr	r1, [pc, #144]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	60cb      	str	r3, [r1, #12]
 80022be:	e03e      	b.n	800233e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e039      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d12c      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	3b01      	subs	r3, #1
 80022ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d123      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d11b      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d113      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	3b01      	subs	r3, #1
 8002320:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d109      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	019f800c 	.word	0x019f800c
 8002350:	feeefffc 	.word	0xfeeefffc

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e11e      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b91      	ldr	r3, [pc, #580]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b8e      	ldr	r3, [pc, #568]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	498c      	ldr	r1, [pc, #560]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b8a      	ldr	r3, [pc, #552]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e106      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d073      	beq.n	8002490 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d129      	bne.n	8002404 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b0:	4b81      	ldr	r3, [pc, #516]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0f4      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023c0:	f000 f99e 	bl	8002700 <RCC_GetSysClockFreqFromPLLSource>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a7c      	ldr	r2, [pc, #496]	@ (80025bc <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d93f      	bls.n	800244e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023ce:	4b7a      	ldr	r3, [pc, #488]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d033      	beq.n	800244e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d12f      	bne.n	800244e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ee:	4b72      	ldr	r3, [pc, #456]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023f6:	4a70      	ldr	r2, [pc, #448]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e024      	b.n	800244e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240c:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0c6      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	4b66      	ldr	r3, [pc, #408]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0be      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800242c:	f000 f8ce 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002430:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4a61      	ldr	r2, [pc, #388]	@ (80025bc <HAL_RCC_ClockConfig+0x268>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d909      	bls.n	800244e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800243a:	4b5f      	ldr	r3, [pc, #380]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002442:	4a5d      	ldr	r2, [pc, #372]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002448:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b5a      	ldr	r3, [pc, #360]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4957      	ldr	r1, [pc, #348]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fdca 	bl	8000ff8 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fdc6 	bl	8000ff8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e095      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b4e      	ldr	r3, [pc, #312]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d023      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b43      	ldr	r3, [pc, #268]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a42      	ldr	r2, [pc, #264]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024c0:	4b3d      	ldr	r3, [pc, #244]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024c8:	4a3b      	ldr	r2, [pc, #236]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b39      	ldr	r3, [pc, #228]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4936      	ldr	r1, [pc, #216]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b80      	cmp	r3, #128	@ 0x80
 80024e8:	d105      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024ea:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4a32      	ldr	r2, [pc, #200]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f6:	4b2f      	ldr	r3, [pc, #188]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d21d      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002504:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 020f 	bic.w	r2, r3, #15
 800250c:	4929      	ldr	r1, [pc, #164]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002514:	f7fe fd70 	bl	8000ff8 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fd6c 	bl	8000ff8 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e03b      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d1ed      	bne.n	800251c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4917      	ldr	r1, [pc, #92]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490f      	ldr	r1, [pc, #60]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800257e:	f000 f825 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490c      	ldr	r1, [pc, #48]	@ (80025c0 <HAL_RCC_ClockConfig+0x26c>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800259e:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_RCC_ClockConfig+0x274>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fcdc 	bl	8000f60 <HAL_InitTick>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	04c4b400 	.word	0x04c4b400
 80025c0:	08006158 	.word	0x08006158
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025de:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e047      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e03e      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025f6:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d136      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800260c:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3301      	adds	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d10c      	bne.n	800263a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002620:	4a1a      	ldr	r2, [pc, #104]	@ (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	4a16      	ldr	r2, [pc, #88]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262a:	68d2      	ldr	r2, [r2, #12]
 800262c:	0a12      	lsrs	r2, r2, #8
 800262e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
      break;
 8002638:	e00c      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4a10      	ldr	r2, [pc, #64]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	0a12      	lsrs	r2, r2, #8
 8002648:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
      break;
 8002652:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0e5b      	lsrs	r3, r3, #25
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	3301      	adds	r3, #1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e001      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002674:	693b      	ldr	r3, [r7, #16]
}
 8002676:	4618      	mov	r0, r3
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	00f42400 	.word	0x00f42400
 800268c:	007a1200 	.word	0x007a1200

08002690 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000000 	.word	0x20000000

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026ac:	f7ff fff0 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08006168 	.word	0x08006168

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d8:	f7ff ffda 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0adb      	lsrs	r3, r3, #11
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4904      	ldr	r1, [pc, #16]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08006168 	.word	0x08006168

08002700 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002706:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3301      	adds	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d10c      	bne.n	800273e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002724:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800272e:	68d2      	ldr	r2, [r2, #12]
 8002730:	0a12      	lsrs	r2, r2, #8
 8002732:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
    break;
 800273c:	e00c      	b.n	8002758 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800273e:	4a12      	ldr	r2, [pc, #72]	@ (8002788 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4a0e      	ldr	r2, [pc, #56]	@ (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002748:	68d2      	ldr	r2, [r2, #12]
 800274a:	0a12      	lsrs	r2, r2, #8
 800274c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    break;
 8002756:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002758:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0e5b      	lsrs	r3, r3, #25
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	3301      	adds	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002772:	687b      	ldr	r3, [r7, #4]
}
 8002774:	4618      	mov	r0, r3
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40021000 	.word	0x40021000
 8002784:	007a1200 	.word	0x007a1200
 8002788:	00f42400 	.word	0x00f42400

0800278c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002794:	2300      	movs	r3, #0
 8002796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002798:	2300      	movs	r3, #0
 800279a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8098 	beq.w	80028da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b43      	ldr	r3, [pc, #268]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b40      	ldr	r3, [pc, #256]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	4a3f      	ldr	r2, [pc, #252]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c6:	4b3d      	ldr	r3, [pc, #244]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d6:	4b3a      	ldr	r3, [pc, #232]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a39      	ldr	r2, [pc, #228]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fc09 	bl	8000ff8 <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e8:	e009      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7fe fc05 	bl	8000ff8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d902      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	74fb      	strb	r3, [r7, #19]
        break;
 80027fc:	e005      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fe:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ef      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d159      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002810:	4b2a      	ldr	r3, [pc, #168]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800281a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01e      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	d019      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800282c:	4b23      	ldr	r3, [pc, #140]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002836:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002838:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002848:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	4a1b      	ldr	r2, [pc, #108]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002858:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fbc5 	bl	8000ff8 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002870:	e00b      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fbc1 	bl	8000ff8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d902      	bls.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	74fb      	strb	r3, [r7, #19]
            break;
 8002888:	e006      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288a:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ec      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10b      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289e:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	4903      	ldr	r1, [pc, #12]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028b4:	e008      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	74bb      	strb	r3, [r7, #18]
 80028ba:	e005      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c8:	7c7b      	ldrb	r3, [r7, #17]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d105      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4ba6      	ldr	r3, [pc, #664]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	4aa5      	ldr	r2, [pc, #660]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e6:	4ba0      	ldr	r3, [pc, #640]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ec:	f023 0203 	bic.w	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	499c      	ldr	r1, [pc, #624]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002908:	4b97      	ldr	r3, [pc, #604]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	f023 020c 	bic.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4994      	ldr	r1, [pc, #592]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002930:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	498b      	ldr	r1, [pc, #556]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800294c:	4b86      	ldr	r3, [pc, #536]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002952:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	4983      	ldr	r1, [pc, #524]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800296e:	4b7e      	ldr	r3, [pc, #504]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002974:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	497a      	ldr	r1, [pc, #488]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002990:	4b75      	ldr	r3, [pc, #468]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002996:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4972      	ldr	r1, [pc, #456]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4969      	ldr	r1, [pc, #420]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029d4:	4b64      	ldr	r3, [pc, #400]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4961      	ldr	r1, [pc, #388]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	4958      	ldr	r1, [pc, #352]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a18:	4b53      	ldr	r3, [pc, #332]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	4950      	ldr	r1, [pc, #320]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a36:	d105      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a38:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a50:	4b45      	ldr	r3, [pc, #276]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	4942      	ldr	r1, [pc, #264]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a70:	4b3d      	ldr	r3, [pc, #244]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a3c      	ldr	r2, [pc, #240]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a88:	4b37      	ldr	r3, [pc, #220]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4934      	ldr	r1, [pc, #208]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a2e      	ldr	r2, [pc, #184]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac0:	4b29      	ldr	r3, [pc, #164]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	4926      	ldr	r1, [pc, #152]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae0:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b06:	4918      	ldr	r1, [pc, #96]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a12      	ldr	r2, [pc, #72]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b30:	4b0d      	ldr	r3, [pc, #52]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3e:	490a      	ldr	r1, [pc, #40]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e042      	b.n	8002c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7fd ffc9 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2224      	movs	r2, #36	@ 0x24
 8002b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0201 	bic.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 ff68 	bl	8003a8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fc99 	bl	80034f4 <UART_SetConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e01b      	b.n	8002c04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 ffe7 	bl	8003bd0 <UART_CheckIdleState>
 8002c02:	4603      	mov	r3, r0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	@ 0x28
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d17b      	bne.n	8002d1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_UART_Transmit+0x26>
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e074      	b.n	8002d20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2221      	movs	r2, #33	@ 0x21
 8002c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c46:	f7fe f9d7 	bl	8000ff8 <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c64:	d108      	bne.n	8002c78 <HAL_UART_Transmit+0x6c>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e003      	b.n	8002c80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c80:	e030      	b.n	8002ce4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	@ 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f001 f849 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e03d      	b.n	8002d20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e007      	b.n	8002cd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1c8      	bne.n	8002c82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2140      	movs	r1, #64	@ 0x40
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f001 f812 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e006      	b.n	8002d20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	4613      	mov	r3, r2
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d137      	bne.n	8002db0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_UART_Receive_IT+0x24>
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e030      	b.n	8002db2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a18      	ldr	r2, [pc, #96]	@ (8002dbc <HAL_UART_Receive_IT+0x94>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d01f      	beq.n	8002da0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d018      	beq.n	8002da0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	69f9      	ldr	r1, [r7, #28]
 8002d92:	6a3a      	ldr	r2, [r7, #32]
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e6      	bne.n	8002d6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f001 f82a 	bl	8003e00 <UART_Start_Receive_IT>
 8002dac:	4603      	mov	r3, r0
 8002dae:	e000      	b.n	8002db2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3728      	adds	r7, #40	@ 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40008000 	.word	0x40008000

08002dc0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	@ 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d137      	bne.n	8002e48 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_UART_Receive_DMA+0x24>
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e030      	b.n	8002e4a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a18      	ldr	r2, [pc, #96]	@ (8002e54 <HAL_UART_Receive_DMA+0x94>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d01f      	beq.n	8002e38 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d018      	beq.n	8002e38 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	613b      	str	r3, [r7, #16]
   return(result);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	69f9      	ldr	r1, [r7, #28]
 8002e2a:	6a3a      	ldr	r2, [r7, #32]
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e6      	bne.n	8002e06 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f001 f900 	bl	8004044 <UART_Start_Receive_DMA>
 8002e44:	4603      	mov	r3, r0
 8002e46:	e000      	b.n	8002e4a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3728      	adds	r7, #40	@ 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40008000 	.word	0x40008000

08002e58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b0ba      	sub	sp, #232	@ 0xe8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002e82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002e86:	4013      	ands	r3, r2
 8002e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11b      	bne.n	8002ecc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d015      	beq.n	8002ecc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d009      	beq.n	8002ecc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 82e3 	beq.w	8003488 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
      }
      return;
 8002eca:	e2dd      	b.n	8003488 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8123 	beq.w	800311c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002eda:	4b8d      	ldr	r3, [pc, #564]	@ (8003110 <HAL_UART_IRQHandler+0x2b8>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002ee6:	4b8b      	ldr	r3, [pc, #556]	@ (8003114 <HAL_UART_IRQHandler+0x2bc>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8116 	beq.w	800311c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d011      	beq.n	8002f20 <HAL_UART_IRQHandler+0xc8>
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d011      	beq.n	8002f50 <HAL_UART_IRQHandler+0xf8>
 8002f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f46:	f043 0204 	orr.w	r2, r3, #4
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d011      	beq.n	8002f80 <HAL_UART_IRQHandler+0x128>
 8002f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8003110 <HAL_UART_IRQHandler+0x2b8>)
 8002f9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2208      	movs	r2, #8
 8002faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb2:	f043 0208 	orr.w	r2, r3, #8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <HAL_UART_IRQHandler+0x196>
 8002fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8249 	beq.w	800348c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003034:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	2b40      	cmp	r3, #64	@ 0x40
 8003044:	d005      	beq.n	8003052 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800304a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	d054      	beq.n	80030fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f001 f8dd 	bl	8004212 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003062:	2b40      	cmp	r3, #64	@ 0x40
 8003064:	d146      	bne.n	80030f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3308      	adds	r3, #8
 800306c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800307c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800309e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80030aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1d9      	bne.n	8003066 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d017      	beq.n	80030ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030c2:	4a15      	ldr	r2, [pc, #84]	@ (8003118 <HAL_UART_IRQHandler+0x2c0>)
 80030c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fa2b 	bl	8001528 <HAL_DMA_Abort_IT>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d019      	beq.n	800310c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80030e6:	4610      	mov	r0, r2
 80030e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ea:	e00f      	b.n	800310c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f9eb 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f2:	e00b      	b.n	800310c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f9e7 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fa:	e007      	b.n	800310c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f9e3 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800310a:	e1bf      	b.n	800348c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310c:	bf00      	nop
    return;
 800310e:	e1bd      	b.n	800348c <HAL_UART_IRQHandler+0x634>
 8003110:	10000001 	.word	0x10000001
 8003114:	04000120 	.word	0x04000120
 8003118:	080044c9 	.word	0x080044c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003120:	2b01      	cmp	r3, #1
 8003122:	f040 8153 	bne.w	80033cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 814c 	beq.w	80033cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8145 	beq.w	80033cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2210      	movs	r2, #16
 8003148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003154:	2b40      	cmp	r3, #64	@ 0x40
 8003156:	f040 80bb 	bne.w	80032d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 818f 	beq.w	8003490 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800317c:	429a      	cmp	r2, r3
 800317e:	f080 8187 	bcs.w	8003490 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003188:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 8087 	bne.w	80032ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80031b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80031d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80031e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1da      	bne.n	80031a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3308      	adds	r3, #8
 80031f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80031fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3308      	adds	r3, #8
 800320a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800320e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003212:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003216:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e1      	bne.n	80031ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3308      	adds	r3, #8
 800322c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800323c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3308      	adds	r3, #8
 8003246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800324a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800324c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003250:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e3      	bne.n	8003226 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800327a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327c:	f023 0310 	bic.w	r3, r3, #16
 8003280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800328e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003290:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003294:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800329c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e4      	bne.n	800326c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe f8e4 	bl	8001476 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f907 	bl	80034dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032ce:	e0df      	b.n	8003490 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80d1 	beq.w	8003494 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80032f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80cc 	beq.w	8003494 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003310:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800331e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003320:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003324:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800332c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e4      	bne.n	80032fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3308      	adds	r3, #8
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	623b      	str	r3, [r7, #32]
   return(result);
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3308      	adds	r3, #8
 8003356:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800335a:	633a      	str	r2, [r7, #48]	@ 0x30
 800335c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e1      	bne.n	8003332 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0310 	bic.w	r3, r3, #16
 8003396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	69b9      	ldr	r1, [r7, #24]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	617b      	str	r3, [r7, #20]
   return(result);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e4      	bne.n	8003382 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f889 	bl	80034dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ca:	e063      	b.n	8003494 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <HAL_UART_IRQHandler+0x59e>
 80033d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80033ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f001 fdc8 	bl	8004f84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033f4:	e051      	b.n	800349a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d014      	beq.n	800342c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800340e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800341e:	2b00      	cmp	r3, #0
 8003420:	d03a      	beq.n	8003498 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
    }
    return;
 800342a:	e035      	b.n	8003498 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800342c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <HAL_UART_IRQHandler+0x5f4>
 8003438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800343c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f001 f855 	bl	80044f4 <UART_EndTransmit_IT>
    return;
 800344a:	e026      	b.n	800349a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800344c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <HAL_UART_IRQHandler+0x614>
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800345c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f001 fda1 	bl	8004fac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800346a:	e016      	b.n	800349a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <HAL_UART_IRQHandler+0x642>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800347c:	2b00      	cmp	r3, #0
 800347e:	da0c      	bge.n	800349a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f001 fd89 	bl	8004f98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003486:	e008      	b.n	800349a <HAL_UART_IRQHandler+0x642>
      return;
 8003488:	bf00      	nop
 800348a:	e006      	b.n	800349a <HAL_UART_IRQHandler+0x642>
    return;
 800348c:	bf00      	nop
 800348e:	e004      	b.n	800349a <HAL_UART_IRQHandler+0x642>
      return;
 8003490:	bf00      	nop
 8003492:	e002      	b.n	800349a <HAL_UART_IRQHandler+0x642>
      return;
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_UART_IRQHandler+0x642>
    return;
 8003498:	bf00      	nop
  }
}
 800349a:	37e8      	adds	r7, #232	@ 0xe8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b08c      	sub	sp, #48	@ 0x30
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	4313      	orrs	r3, r2
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4bab      	ldr	r3, [pc, #684]	@ (80037d0 <UART_SetConfig+0x2dc>)
 8003524:	4013      	ands	r3, r2
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800352c:	430b      	orrs	r3, r1
 800352e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4aa0      	ldr	r2, [pc, #640]	@ (80037d4 <UART_SetConfig+0x2e0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800355c:	4313      	orrs	r3, r2
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800356a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003574:	430b      	orrs	r3, r1
 8003576:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	f023 010f 	bic.w	r1, r3, #15
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a91      	ldr	r2, [pc, #580]	@ (80037d8 <UART_SetConfig+0x2e4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d125      	bne.n	80035e4 <UART_SetConfig+0xf0>
 8003598:	4b90      	ldr	r3, [pc, #576]	@ (80037dc <UART_SetConfig+0x2e8>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d81a      	bhi.n	80035dc <UART_SetConfig+0xe8>
 80035a6:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <UART_SetConfig+0xb8>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035cd 	.word	0x080035cd
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035d5 	.word	0x080035d5
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035c2:	e0d6      	b.n	8003772 <UART_SetConfig+0x27e>
 80035c4:	2302      	movs	r3, #2
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ca:	e0d2      	b.n	8003772 <UART_SetConfig+0x27e>
 80035cc:	2304      	movs	r3, #4
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035d2:	e0ce      	b.n	8003772 <UART_SetConfig+0x27e>
 80035d4:	2308      	movs	r3, #8
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035da:	e0ca      	b.n	8003772 <UART_SetConfig+0x27e>
 80035dc:	2310      	movs	r3, #16
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e2:	e0c6      	b.n	8003772 <UART_SetConfig+0x27e>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7d      	ldr	r2, [pc, #500]	@ (80037e0 <UART_SetConfig+0x2ec>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d138      	bne.n	8003660 <UART_SetConfig+0x16c>
 80035ee:	4b7b      	ldr	r3, [pc, #492]	@ (80037dc <UART_SetConfig+0x2e8>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d82d      	bhi.n	8003658 <UART_SetConfig+0x164>
 80035fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <UART_SetConfig+0x110>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003639 	.word	0x08003639
 8003608:	08003659 	.word	0x08003659
 800360c:	08003659 	.word	0x08003659
 8003610:	08003659 	.word	0x08003659
 8003614:	08003649 	.word	0x08003649
 8003618:	08003659 	.word	0x08003659
 800361c:	08003659 	.word	0x08003659
 8003620:	08003659 	.word	0x08003659
 8003624:	08003641 	.word	0x08003641
 8003628:	08003659 	.word	0x08003659
 800362c:	08003659 	.word	0x08003659
 8003630:	08003659 	.word	0x08003659
 8003634:	08003651 	.word	0x08003651
 8003638:	2300      	movs	r3, #0
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800363e:	e098      	b.n	8003772 <UART_SetConfig+0x27e>
 8003640:	2302      	movs	r3, #2
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003646:	e094      	b.n	8003772 <UART_SetConfig+0x27e>
 8003648:	2304      	movs	r3, #4
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364e:	e090      	b.n	8003772 <UART_SetConfig+0x27e>
 8003650:	2308      	movs	r3, #8
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003656:	e08c      	b.n	8003772 <UART_SetConfig+0x27e>
 8003658:	2310      	movs	r3, #16
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800365e:	e088      	b.n	8003772 <UART_SetConfig+0x27e>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5f      	ldr	r2, [pc, #380]	@ (80037e4 <UART_SetConfig+0x2f0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d125      	bne.n	80036b6 <UART_SetConfig+0x1c2>
 800366a:	4b5c      	ldr	r3, [pc, #368]	@ (80037dc <UART_SetConfig+0x2e8>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003670:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003674:	2b30      	cmp	r3, #48	@ 0x30
 8003676:	d016      	beq.n	80036a6 <UART_SetConfig+0x1b2>
 8003678:	2b30      	cmp	r3, #48	@ 0x30
 800367a:	d818      	bhi.n	80036ae <UART_SetConfig+0x1ba>
 800367c:	2b20      	cmp	r3, #32
 800367e:	d00a      	beq.n	8003696 <UART_SetConfig+0x1a2>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d814      	bhi.n	80036ae <UART_SetConfig+0x1ba>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <UART_SetConfig+0x19a>
 8003688:	2b10      	cmp	r3, #16
 800368a:	d008      	beq.n	800369e <UART_SetConfig+0x1aa>
 800368c:	e00f      	b.n	80036ae <UART_SetConfig+0x1ba>
 800368e:	2300      	movs	r3, #0
 8003690:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003694:	e06d      	b.n	8003772 <UART_SetConfig+0x27e>
 8003696:	2302      	movs	r3, #2
 8003698:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369c:	e069      	b.n	8003772 <UART_SetConfig+0x27e>
 800369e:	2304      	movs	r3, #4
 80036a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a4:	e065      	b.n	8003772 <UART_SetConfig+0x27e>
 80036a6:	2308      	movs	r3, #8
 80036a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ac:	e061      	b.n	8003772 <UART_SetConfig+0x27e>
 80036ae:	2310      	movs	r3, #16
 80036b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b4:	e05d      	b.n	8003772 <UART_SetConfig+0x27e>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4b      	ldr	r2, [pc, #300]	@ (80037e8 <UART_SetConfig+0x2f4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d125      	bne.n	800370c <UART_SetConfig+0x218>
 80036c0:	4b46      	ldr	r3, [pc, #280]	@ (80037dc <UART_SetConfig+0x2e8>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80036cc:	d016      	beq.n	80036fc <UART_SetConfig+0x208>
 80036ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80036d0:	d818      	bhi.n	8003704 <UART_SetConfig+0x210>
 80036d2:	2b80      	cmp	r3, #128	@ 0x80
 80036d4:	d00a      	beq.n	80036ec <UART_SetConfig+0x1f8>
 80036d6:	2b80      	cmp	r3, #128	@ 0x80
 80036d8:	d814      	bhi.n	8003704 <UART_SetConfig+0x210>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <UART_SetConfig+0x1f0>
 80036de:	2b40      	cmp	r3, #64	@ 0x40
 80036e0:	d008      	beq.n	80036f4 <UART_SetConfig+0x200>
 80036e2:	e00f      	b.n	8003704 <UART_SetConfig+0x210>
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ea:	e042      	b.n	8003772 <UART_SetConfig+0x27e>
 80036ec:	2302      	movs	r3, #2
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f2:	e03e      	b.n	8003772 <UART_SetConfig+0x27e>
 80036f4:	2304      	movs	r3, #4
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fa:	e03a      	b.n	8003772 <UART_SetConfig+0x27e>
 80036fc:	2308      	movs	r3, #8
 80036fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003702:	e036      	b.n	8003772 <UART_SetConfig+0x27e>
 8003704:	2310      	movs	r3, #16
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370a:	e032      	b.n	8003772 <UART_SetConfig+0x27e>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a30      	ldr	r2, [pc, #192]	@ (80037d4 <UART_SetConfig+0x2e0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d12a      	bne.n	800376c <UART_SetConfig+0x278>
 8003716:	4b31      	ldr	r3, [pc, #196]	@ (80037dc <UART_SetConfig+0x2e8>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003720:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003724:	d01a      	beq.n	800375c <UART_SetConfig+0x268>
 8003726:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800372a:	d81b      	bhi.n	8003764 <UART_SetConfig+0x270>
 800372c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003730:	d00c      	beq.n	800374c <UART_SetConfig+0x258>
 8003732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003736:	d815      	bhi.n	8003764 <UART_SetConfig+0x270>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <UART_SetConfig+0x250>
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003740:	d008      	beq.n	8003754 <UART_SetConfig+0x260>
 8003742:	e00f      	b.n	8003764 <UART_SetConfig+0x270>
 8003744:	2300      	movs	r3, #0
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374a:	e012      	b.n	8003772 <UART_SetConfig+0x27e>
 800374c:	2302      	movs	r3, #2
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003752:	e00e      	b.n	8003772 <UART_SetConfig+0x27e>
 8003754:	2304      	movs	r3, #4
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375a:	e00a      	b.n	8003772 <UART_SetConfig+0x27e>
 800375c:	2308      	movs	r3, #8
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003762:	e006      	b.n	8003772 <UART_SetConfig+0x27e>
 8003764:	2310      	movs	r3, #16
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376a:	e002      	b.n	8003772 <UART_SetConfig+0x27e>
 800376c:	2310      	movs	r3, #16
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a17      	ldr	r2, [pc, #92]	@ (80037d4 <UART_SetConfig+0x2e0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	f040 80a8 	bne.w	80038ce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800377e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003782:	2b08      	cmp	r3, #8
 8003784:	d834      	bhi.n	80037f0 <UART_SetConfig+0x2fc>
 8003786:	a201      	add	r2, pc, #4	@ (adr r2, 800378c <UART_SetConfig+0x298>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037f1 	.word	0x080037f1
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037f1 	.word	0x080037f1
 800379c:	080037bf 	.word	0x080037bf
 80037a0:	080037f1 	.word	0x080037f1
 80037a4:	080037f1 	.word	0x080037f1
 80037a8:	080037f1 	.word	0x080037f1
 80037ac:	080037c7 	.word	0x080037c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b0:	f7fe ff7a 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80037b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037b6:	e021      	b.n	80037fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b8:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <UART_SetConfig+0x2f8>)
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037bc:	e01e      	b.n	80037fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037be:	f7fe ff05 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 80037c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037c4:	e01a      	b.n	80037fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037cc:	e016      	b.n	80037fc <UART_SetConfig+0x308>
 80037ce:	bf00      	nop
 80037d0:	cfff69f3 	.word	0xcfff69f3
 80037d4:	40008000 	.word	0x40008000
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40004400 	.word	0x40004400
 80037e4:	40004800 	.word	0x40004800
 80037e8:	40004c00 	.word	0x40004c00
 80037ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 812a 	beq.w	8003a58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	4a9e      	ldr	r2, [pc, #632]	@ (8003a84 <UART_SetConfig+0x590>)
 800380a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800380e:	461a      	mov	r2, r3
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	fbb3 f3f2 	udiv	r3, r3, r2
 8003816:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	429a      	cmp	r2, r3
 8003826:	d305      	bcc.n	8003834 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	429a      	cmp	r2, r3
 8003832:	d903      	bls.n	800383c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800383a:	e10d      	b.n	8003a58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	2200      	movs	r2, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	60fa      	str	r2, [r7, #12]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	4a8e      	ldr	r2, [pc, #568]	@ (8003a84 <UART_SetConfig+0x590>)
 800384a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800384e:	b29b      	uxth	r3, r3
 8003850:	2200      	movs	r2, #0
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800385a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800385e:	f7fc fd37 	bl	80002d0 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	020b      	lsls	r3, r1, #8
 8003874:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003878:	0202      	lsls	r2, r0, #8
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	6849      	ldr	r1, [r1, #4]
 800387e:	0849      	lsrs	r1, r1, #1
 8003880:	2000      	movs	r0, #0
 8003882:	460c      	mov	r4, r1
 8003884:	4605      	mov	r5, r0
 8003886:	eb12 0804 	adds.w	r8, r2, r4
 800388a:	eb43 0905 	adc.w	r9, r3, r5
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	469a      	mov	sl, r3
 8003896:	4693      	mov	fp, r2
 8003898:	4652      	mov	r2, sl
 800389a:	465b      	mov	r3, fp
 800389c:	4640      	mov	r0, r8
 800389e:	4649      	mov	r1, r9
 80038a0:	f7fc fd16 	bl	80002d0 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038b2:	d308      	bcc.n	80038c6 <UART_SetConfig+0x3d2>
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ba:	d204      	bcs.n	80038c6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a3a      	ldr	r2, [r7, #32]
 80038c2:	60da      	str	r2, [r3, #12]
 80038c4:	e0c8      	b.n	8003a58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038cc:	e0c4      	b.n	8003a58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d6:	d167      	bne.n	80039a8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80038d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d828      	bhi.n	8003932 <UART_SetConfig+0x43e>
 80038e0:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <UART_SetConfig+0x3f4>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	08003915 	.word	0x08003915
 80038f0:	0800391d 	.word	0x0800391d
 80038f4:	08003933 	.word	0x08003933
 80038f8:	08003923 	.word	0x08003923
 80038fc:	08003933 	.word	0x08003933
 8003900:	08003933 	.word	0x08003933
 8003904:	08003933 	.word	0x08003933
 8003908:	0800392b 	.word	0x0800392b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800390c:	f7fe fecc 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003912:	e014      	b.n	800393e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003914:	f7fe fede 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800391a:	e010      	b.n	800393e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800391c:	4b5a      	ldr	r3, [pc, #360]	@ (8003a88 <UART_SetConfig+0x594>)
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003920:	e00d      	b.n	800393e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003922:	f7fe fe53 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003926:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003928:	e009      	b.n	800393e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003930:	e005      	b.n	800393e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800393c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8089 	beq.w	8003a58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	4a4e      	ldr	r2, [pc, #312]	@ (8003a84 <UART_SetConfig+0x590>)
 800394c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003950:	461a      	mov	r2, r3
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	fbb3 f3f2 	udiv	r3, r3, r2
 8003958:	005a      	lsls	r2, r3, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	441a      	add	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	fbb2 f3f3 	udiv	r3, r2, r3
 800396a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	2b0f      	cmp	r3, #15
 8003970:	d916      	bls.n	80039a0 <UART_SetConfig+0x4ac>
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003978:	d212      	bcs.n	80039a0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f023 030f 	bic.w	r3, r3, #15
 8003982:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	b29b      	uxth	r3, r3
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	b29a      	uxth	r2, r3
 8003990:	8bfb      	ldrh	r3, [r7, #30]
 8003992:	4313      	orrs	r3, r2
 8003994:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	8bfa      	ldrh	r2, [r7, #30]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	e05b      	b.n	8003a58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039a6:	e057      	b.n	8003a58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d828      	bhi.n	8003a02 <UART_SetConfig+0x50e>
 80039b0:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <UART_SetConfig+0x4c4>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	08003a03 	.word	0x08003a03
 80039c8:	080039f3 	.word	0x080039f3
 80039cc:	08003a03 	.word	0x08003a03
 80039d0:	08003a03 	.word	0x08003a03
 80039d4:	08003a03 	.word	0x08003a03
 80039d8:	080039fb 	.word	0x080039fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe fe64 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80039e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e2:	e014      	b.n	8003a0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7fe fe76 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 80039e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ea:	e010      	b.n	8003a0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ec:	4b26      	ldr	r3, [pc, #152]	@ (8003a88 <UART_SetConfig+0x594>)
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039f0:	e00d      	b.n	8003a0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f2:	f7fe fdeb 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 80039f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039f8:	e009      	b.n	8003a0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a00:	e005      	b.n	8003a0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	4a1a      	ldr	r2, [pc, #104]	@ (8003a84 <UART_SetConfig+0x590>)
 8003a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	441a      	add	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d909      	bls.n	8003a52 <UART_SetConfig+0x55e>
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a44:	d205      	bcs.n	8003a52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	e002      	b.n	8003a58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3730      	adds	r7, #48	@ 0x30
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a82:	bf00      	nop
 8003a84:	08006170 	.word	0x08006170
 8003a88:	00f42400 	.word	0x00f42400

08003a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01a      	beq.n	8003ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b8a:	d10a      	bne.n	8003ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b098      	sub	sp, #96	@ 0x60
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003be0:	f7fd fa0a 	bl	8000ff8 <HAL_GetTick>
 8003be4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d12f      	bne.n	8003c54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f88e 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d022      	beq.n	8003c54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e6      	bne.n	8003c0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e063      	b.n	8003d1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d149      	bne.n	8003cf6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f857 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03c      	beq.n	8003cf6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	623b      	str	r3, [r7, #32]
   return(result);
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e6      	bne.n	8003c7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cce:	61fa      	str	r2, [r7, #28]
 8003cd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	617b      	str	r3, [r7, #20]
   return(result);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e012      	b.n	8003d1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3758      	adds	r7, #88	@ 0x58
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d34:	e04f      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d3c:	d04b      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fd f95b 	bl	8000ff8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e04e      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d037      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b80      	cmp	r3, #128	@ 0x80
 8003d6a:	d034      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	d031      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d110      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2208      	movs	r2, #8
 8003d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fa42 	bl	8004212 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2208      	movs	r2, #8
 8003d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e029      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003db0:	d111      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fa28 	bl	8004212 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e00f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d0a0      	beq.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b0a3      	sub	sp, #140	@ 0x8c
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e32:	d10e      	bne.n	8003e52 <UART_Start_Receive_IT+0x52>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <UART_Start_Receive_IT+0x48>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e46:	e02d      	b.n	8003ea4 <UART_Start_Receive_IT+0xa4>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	22ff      	movs	r2, #255	@ 0xff
 8003e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e50:	e028      	b.n	8003ea4 <UART_Start_Receive_IT+0xa4>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <UART_Start_Receive_IT+0x76>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <UART_Start_Receive_IT+0x6c>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	@ 0xff
 8003e66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e6a:	e01b      	b.n	8003ea4 <UART_Start_Receive_IT+0xa4>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	227f      	movs	r2, #127	@ 0x7f
 8003e70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e74:	e016      	b.n	8003ea4 <UART_Start_Receive_IT+0xa4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e7e:	d10d      	bne.n	8003e9c <UART_Start_Receive_IT+0x9c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <UART_Start_Receive_IT+0x92>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	227f      	movs	r2, #127	@ 0x7f
 8003e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e90:	e008      	b.n	8003ea4 <UART_Start_Receive_IT+0xa4>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	223f      	movs	r2, #63	@ 0x3f
 8003e96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e9a:	e003      	b.n	8003ea4 <UART_Start_Receive_IT+0xa4>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2222      	movs	r2, #34	@ 0x22
 8003eb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003ec4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003ed8:	673a      	str	r2, [r7, #112]	@ 0x70
 8003eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003ede:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8003ee6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e3      	bne.n	8003eb4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef4:	d14f      	bne.n	8003f96 <UART_Start_Receive_IT+0x196>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d349      	bcc.n	8003f96 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0a:	d107      	bne.n	8003f1c <UART_Start_Receive_IT+0x11c>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a47      	ldr	r2, [pc, #284]	@ (8004034 <UART_Start_Receive_IT+0x234>)
 8003f18:	675a      	str	r2, [r3, #116]	@ 0x74
 8003f1a:	e002      	b.n	8003f22 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a46      	ldr	r2, [pc, #280]	@ (8004038 <UART_Start_Receive_IT+0x238>)
 8003f20:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01a      	beq.n	8003f60 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f4e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003f52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e4      	bne.n	8003f2a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3308      	adds	r3, #8
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003f80:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f82:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e5      	bne.n	8003f60 <UART_Start_Receive_IT+0x160>
 8003f94:	e046      	b.n	8004024 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9e:	d107      	bne.n	8003fb0 <UART_Start_Receive_IT+0x1b0>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a24      	ldr	r2, [pc, #144]	@ (800403c <UART_Start_Receive_IT+0x23c>)
 8003fac:	675a      	str	r2, [r3, #116]	@ 0x74
 8003fae:	e002      	b.n	8003fb6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <UART_Start_Receive_IT+0x240>)
 8003fb4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d019      	beq.n	8003ff2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003fd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fde:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e6      	bne.n	8003fbe <UART_Start_Receive_IT+0x1be>
 8003ff0:	e018      	b.n	8004024 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f043 0320 	orr.w	r3, r3, #32
 8004006:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	69f9      	ldr	r1, [r7, #28]
 8004016:	6a3a      	ldr	r2, [r7, #32]
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	61bb      	str	r3, [r7, #24]
   return(result);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e6      	bne.n	8003ff2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	378c      	adds	r7, #140	@ 0x8c
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	08004c1d 	.word	0x08004c1d
 8004038:	080048bd 	.word	0x080048bd
 800403c:	08004705 	.word	0x08004705
 8004040:	0800454d 	.word	0x0800454d

08004044 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b096      	sub	sp, #88	@ 0x58
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2222      	movs	r2, #34	@ 0x22
 800406c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d02d      	beq.n	80040d6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004080:	4a40      	ldr	r2, [pc, #256]	@ (8004184 <UART_Start_Receive_DMA+0x140>)
 8004082:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800408a:	4a3f      	ldr	r2, [pc, #252]	@ (8004188 <UART_Start_Receive_DMA+0x144>)
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004094:	4a3d      	ldr	r2, [pc, #244]	@ (800418c <UART_Start_Receive_DMA+0x148>)
 8004096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800409e:	2200      	movs	r2, #0
 80040a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3324      	adds	r3, #36	@ 0x24
 80040ae:	4619      	mov	r1, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b4:	461a      	mov	r2, r3
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	f7fd f962 	bl	8001380 <HAL_DMA_Start_IT>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2210      	movs	r2, #16
 80040c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e051      	b.n	800417a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d018      	beq.n	8004110 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040fe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800410a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e6      	bne.n	80040de <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	653b      	str	r3, [r7, #80]	@ 0x50
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004130:	637a      	str	r2, [r7, #52]	@ 0x34
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800413e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	613b      	str	r3, [r7, #16]
   return(result);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800415a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004164:	623a      	str	r2, [r7, #32]
 8004166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	69f9      	ldr	r1, [r7, #28]
 800416a:	6a3a      	ldr	r2, [r7, #32]
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	61bb      	str	r3, [r7, #24]
   return(result);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e5      	bne.n	8004144 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3758      	adds	r7, #88	@ 0x58
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	080042df 	.word	0x080042df
 8004188:	0800440b 	.word	0x0800440b
 800418c:	08004449 	.word	0x08004449

08004190 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b08f      	sub	sp, #60	@ 0x3c
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e6      	bne.n	8004198 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3308      	adds	r3, #8
 80041e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ea:	61ba      	str	r2, [r7, #24]
 80041ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6979      	ldr	r1, [r7, #20]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	613b      	str	r3, [r7, #16]
   return(result);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e5      	bne.n	80041ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004206:	bf00      	nop
 8004208:	373c      	adds	r7, #60	@ 0x3c
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004212:	b480      	push	{r7}
 8004214:	b095      	sub	sp, #84	@ 0x54
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800422e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004238:	643b      	str	r3, [r7, #64]	@ 0x40
 800423a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800423e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e6      	bne.n	800421a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	61fb      	str	r3, [r7, #28]
   return(result);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3308      	adds	r3, #8
 800426e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e3      	bne.n	800424c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d118      	bne.n	80042be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	60bb      	str	r3, [r7, #8]
   return(result);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f023 0310 	bic.w	r3, r3, #16
 80042a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	613b      	str	r3, [r7, #16]
   return(result);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e6      	bne.n	800428c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042d2:	bf00      	nop
 80042d4:	3754      	adds	r7, #84	@ 0x54
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b09c      	sub	sp, #112	@ 0x70
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d171      	bne.n	80043de <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80042fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004312:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004316:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004320:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004322:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004326:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800432e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e6      	bne.n	8004302 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	667b      	str	r3, [r7, #100]	@ 0x64
 800434c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004354:	647a      	str	r2, [r7, #68]	@ 0x44
 8004356:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800435a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	623b      	str	r3, [r7, #32]
   return(result);
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800437e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004388:	633a      	str	r2, [r7, #48]	@ 0x30
 800438a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800438e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800439c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800439e:	2220      	movs	r2, #32
 80043a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d118      	bne.n	80043de <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 0310 	bic.w	r3, r3, #16
 80043c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	69b9      	ldr	r1, [r7, #24]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	617b      	str	r3, [r7, #20]
   return(result);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e6      	bne.n	80043ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e0:	2200      	movs	r2, #0
 80043e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043f2:	4619      	mov	r1, r3
 80043f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043f6:	f7ff f871 	bl	80034dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043fa:	e002      	b.n	8004402 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80043fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043fe:	f7fc fb3f 	bl	8000a80 <HAL_UART_RxCpltCallback>
}
 8004402:	bf00      	nop
 8004404:	3770      	adds	r7, #112	@ 0x70
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d109      	bne.n	800443a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	b29b      	uxth	r3, r3
 8004430:	4619      	mov	r1, r3
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7ff f852 	bl	80034dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004438:	e002      	b.n	8004440 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff f83a 	bl	80034b4 <HAL_UART_RxHalfCpltCallback>
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004464:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d109      	bne.n	8004488 <UART_DMAError+0x40>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b21      	cmp	r3, #33	@ 0x21
 8004478:	d106      	bne.n	8004488 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff fe84 	bl	8004190 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b40      	cmp	r3, #64	@ 0x40
 8004494:	d109      	bne.n	80044aa <UART_DMAError+0x62>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b22      	cmp	r3, #34	@ 0x22
 800449a:	d106      	bne.n	80044aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80044a4:	6978      	ldr	r0, [r7, #20]
 80044a6:	f7ff feb4 	bl	8004212 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b0:	f043 0210 	orr.w	r2, r3, #16
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ba:	6978      	ldr	r0, [r7, #20]
 80044bc:	f7ff f804 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7fe ffee 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	60bb      	str	r3, [r7, #8]
   return(result);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	613b      	str	r3, [r7, #16]
   return(result);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e6      	bne.n	80044fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fe ffaf 	bl	80034a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004542:	bf00      	nop
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b09c      	sub	sp, #112	@ 0x70
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800455a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004564:	2b22      	cmp	r3, #34	@ 0x22
 8004566:	f040 80be 	bne.w	80046e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004574:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004578:	b2d9      	uxtb	r1, r3
 800457a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800457e:	b2da      	uxtb	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004584:	400a      	ands	r2, r1
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 80a1 	bne.w	80046f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e6      	bne.n	80045b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3308      	adds	r3, #8
 80045ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3308      	adds	r3, #8
 8004604:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004606:	647a      	str	r2, [r7, #68]	@ 0x44
 8004608:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800460c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e5      	bne.n	80045e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a33      	ldr	r2, [pc, #204]	@ (8004700 <UART_RxISR_8BIT+0x1b4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01f      	beq.n	8004678 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d018      	beq.n	8004678 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	623b      	str	r3, [r7, #32]
   return(result);
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800465a:	663b      	str	r3, [r7, #96]	@ 0x60
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004664:	633b      	str	r3, [r7, #48]	@ 0x30
 8004666:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800466a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e6      	bne.n	8004646 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d12e      	bne.n	80046de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	60fb      	str	r3, [r7, #12]
   return(result);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0310 	bic.w	r3, r3, #16
 800469a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	617b      	str	r3, [r7, #20]
   return(result);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e6      	bne.n	8004686 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d103      	bne.n	80046ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2210      	movs	r2, #16
 80046cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe ff00 	bl	80034dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046dc:	e00b      	b.n	80046f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc f9ce 	bl	8000a80 <HAL_UART_RxCpltCallback>
}
 80046e4:	e007      	b.n	80046f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0208 	orr.w	r2, r2, #8
 80046f4:	619a      	str	r2, [r3, #24]
}
 80046f6:	bf00      	nop
 80046f8:	3770      	adds	r7, #112	@ 0x70
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40008000 	.word	0x40008000

08004704 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b09c      	sub	sp, #112	@ 0x70
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004712:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800471c:	2b22      	cmp	r3, #34	@ 0x22
 800471e:	f040 80be 	bne.w	800489e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004730:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004732:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004736:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800473a:	4013      	ands	r3, r2
 800473c:	b29a      	uxth	r2, r3
 800473e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004740:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 80a1 	bne.w	80048ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800477a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800477c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004780:	667b      	str	r3, [r7, #100]	@ 0x64
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800478a:	657b      	str	r3, [r7, #84]	@ 0x54
 800478c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004790:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e6      	bne.n	800476c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3308      	adds	r3, #8
 80047bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047be:	643a      	str	r2, [r7, #64]	@ 0x40
 80047c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e5      	bne.n	800479e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a33      	ldr	r2, [pc, #204]	@ (80048b8 <UART_RxISR_16BIT+0x1b4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01f      	beq.n	8004830 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	61fb      	str	r3, [r7, #28]
   return(result);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800481e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e6      	bne.n	80047fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d12e      	bne.n	8004896 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60bb      	str	r3, [r7, #8]
   return(result);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0310 	bic.w	r3, r3, #16
 8004852:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	613b      	str	r3, [r7, #16]
   return(result);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b10      	cmp	r3, #16
 800487c:	d103      	bne.n	8004886 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2210      	movs	r2, #16
 8004884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fe fe24 	bl	80034dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004894:	e00b      	b.n	80048ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc f8f2 	bl	8000a80 <HAL_UART_RxCpltCallback>
}
 800489c:	e007      	b.n	80048ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0208 	orr.w	r2, r2, #8
 80048ac:	619a      	str	r2, [r3, #24]
}
 80048ae:	bf00      	nop
 80048b0:	3770      	adds	r7, #112	@ 0x70
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40008000 	.word	0x40008000

080048bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b0ac      	sub	sp, #176	@ 0xb0
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80048ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f2:	2b22      	cmp	r3, #34	@ 0x22
 80048f4:	f040 8182 	bne.w	8004bfc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80048fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004902:	e125      	b.n	8004b50 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800490e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004912:	b2d9      	uxtb	r1, r3
 8004914:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004918:	b2da      	uxtb	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491e:	400a      	ands	r2, r1
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800494a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	d053      	beq.n	80049fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d011      	beq.n	80049b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2202      	movs	r2, #2
 80049a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	f043 0204 	orr.w	r2, r3, #4
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d011      	beq.n	80049e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80049c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2204      	movs	r2, #4
 80049d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	f043 0202 	orr.w	r2, r3, #2
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fe fd69 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 80a2 	bne.w	8004b50 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a30:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004a34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e4      	bne.n	8004a0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004a52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a6a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004a6c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004a70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004a78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e1      	bne.n	8004a42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a5f      	ldr	r2, [pc, #380]	@ (8004c14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d021      	beq.n	8004ae0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01a      	beq.n	8004ae0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004acc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ace:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ad2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e4      	bne.n	8004aaa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d130      	bne.n	8004b4a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	f023 0310 	bic.w	r3, r3, #16
 8004b02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e4      	bne.n	8004aee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d103      	bne.n	8004b3a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2210      	movs	r2, #16
 8004b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fe fcca 	bl	80034dc <HAL_UARTEx_RxEventCallback>
 8004b48:	e002      	b.n	8004b50 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fb ff98 	bl	8000a80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b50:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d006      	beq.n	8004b66 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f aecf 	bne.w	8004904 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d049      	beq.n	8004c0c <UART_RxISR_8BIT_FIFOEN+0x350>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004b7e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d242      	bcs.n	8004c0c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e3      	bne.n	8004b86 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a15      	ldr	r2, [pc, #84]	@ (8004c18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004bc2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f043 0320 	orr.w	r3, r3, #32
 8004bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	461a      	mov	r2, r3
 8004be2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6979      	ldr	r1, [r7, #20]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e4      	bne.n	8004bc4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bfa:	e007      	b.n	8004c0c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	619a      	str	r2, [r3, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	37b0      	adds	r7, #176	@ 0xb0
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40008000 	.word	0x40008000
 8004c18:	0800454d 	.word	0x0800454d

08004c1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0ae      	sub	sp, #184	@ 0xb8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004c2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c52:	2b22      	cmp	r3, #34	@ 0x22
 8004c54:	f040 8186 	bne.w	8004f64 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004c5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c62:	e129      	b.n	8004eb8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004c76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004c7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004c7e:	4013      	ands	r3, r2
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8c:	1c9a      	adds	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d053      	beq.n	8004d62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d011      	beq.n	8004cea <UART_RxISR_16BIT_FIFOEN+0xce>
 8004cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce0:	f043 0201 	orr.w	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d011      	beq.n	8004d1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2202      	movs	r2, #2
 8004d08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d011      	beq.n	8004d4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2204      	movs	r2, #4
 8004d38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d40:	f043 0202 	orr.w	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fe fbb7 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 80a4 	bne.w	8004eb8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e2      	bne.n	8004d70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3308      	adds	r3, #8
 8004db0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004dd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e1      	bne.n	8004daa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8004f7c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d021      	beq.n	8004e48 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01a      	beq.n	8004e48 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e36:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e4      	bne.n	8004e12 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d130      	bne.n	8004eb2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e66:	f023 0310 	bic.w	r3, r3, #16
 8004e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e4      	bne.n	8004e56 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d103      	bne.n	8004ea2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2210      	movs	r2, #16
 8004ea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fe fb16 	bl	80034dc <HAL_UARTEx_RxEventCallback>
 8004eb0:	e002      	b.n	8004eb8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fb fde4 	bl	8000a80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004eb8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004ec0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f47f aecb 	bne.w	8004c64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ed4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ed8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d049      	beq.n	8004f74 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004ee6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d242      	bcs.n	8004f74 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	623b      	str	r3, [r7, #32]
   return(result);
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004f12:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e3      	bne.n	8004eee <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a15      	ldr	r2, [pc, #84]	@ (8004f80 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004f2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f043 0320 	orr.w	r3, r3, #32
 8004f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	69b9      	ldr	r1, [r7, #24]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e4      	bne.n	8004f2c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f62:	e007      	b.n	8004f74 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0208 	orr.w	r2, r2, #8
 8004f72:	619a      	str	r2, [r3, #24]
}
 8004f74:	bf00      	nop
 8004f76:	37b8      	adds	r7, #184	@ 0xb8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40008000 	.word	0x40008000
 8004f80:	08004705 	.word	0x08004705

08004f84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e027      	b.n	8005026 <HAL_UARTEx_DisableFifoMode+0x66>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2224      	movs	r2, #36	@ 0x24
 8004fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005004:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005046:	2302      	movs	r3, #2
 8005048:	e02d      	b.n	80050a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2224      	movs	r2, #36	@ 0x24
 8005056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f850 	bl	800512c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e02d      	b.n	8005122 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2224      	movs	r2, #36	@ 0x24
 80050d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f812 	bl	800512c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005138:	2b00      	cmp	r3, #0
 800513a:	d108      	bne.n	800514e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800514c:	e031      	b.n	80051b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800514e:	2308      	movs	r3, #8
 8005150:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005152:	2308      	movs	r3, #8
 8005154:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	0e5b      	lsrs	r3, r3, #25
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	0f5b      	lsrs	r3, r3, #29
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005176:	7bbb      	ldrb	r3, [r7, #14]
 8005178:	7b3a      	ldrb	r2, [r7, #12]
 800517a:	4911      	ldr	r1, [pc, #68]	@ (80051c0 <UARTEx_SetNbDataToProcess+0x94>)
 800517c:	5c8a      	ldrb	r2, [r1, r2]
 800517e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005182:	7b3a      	ldrb	r2, [r7, #12]
 8005184:	490f      	ldr	r1, [pc, #60]	@ (80051c4 <UARTEx_SetNbDataToProcess+0x98>)
 8005186:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005188:	fb93 f3f2 	sdiv	r3, r3, r2
 800518c:	b29a      	uxth	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	7b7a      	ldrb	r2, [r7, #13]
 8005198:	4909      	ldr	r1, [pc, #36]	@ (80051c0 <UARTEx_SetNbDataToProcess+0x94>)
 800519a:	5c8a      	ldrb	r2, [r1, r2]
 800519c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051a0:	7b7a      	ldrb	r2, [r7, #13]
 80051a2:	4908      	ldr	r1, [pc, #32]	@ (80051c4 <UARTEx_SetNbDataToProcess+0x98>)
 80051a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	08006188 	.word	0x08006188
 80051c4:	08006190 	.word	0x08006190

080051c8 <std>:
 80051c8:	2300      	movs	r3, #0
 80051ca:	b510      	push	{r4, lr}
 80051cc:	4604      	mov	r4, r0
 80051ce:	e9c0 3300 	strd	r3, r3, [r0]
 80051d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051d6:	6083      	str	r3, [r0, #8]
 80051d8:	8181      	strh	r1, [r0, #12]
 80051da:	6643      	str	r3, [r0, #100]	@ 0x64
 80051dc:	81c2      	strh	r2, [r0, #14]
 80051de:	6183      	str	r3, [r0, #24]
 80051e0:	4619      	mov	r1, r3
 80051e2:	2208      	movs	r2, #8
 80051e4:	305c      	adds	r0, #92	@ 0x5c
 80051e6:	f000 f921 	bl	800542c <memset>
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <std+0x58>)
 80051ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <std+0x5c>)
 80051f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <std+0x60>)
 80051f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051f6:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <std+0x64>)
 80051f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80051fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <std+0x68>)
 80051fc:	6224      	str	r4, [r4, #32]
 80051fe:	429c      	cmp	r4, r3
 8005200:	d006      	beq.n	8005210 <std+0x48>
 8005202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005206:	4294      	cmp	r4, r2
 8005208:	d002      	beq.n	8005210 <std+0x48>
 800520a:	33d0      	adds	r3, #208	@ 0xd0
 800520c:	429c      	cmp	r4, r3
 800520e:	d105      	bne.n	800521c <std+0x54>
 8005210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005218:	f000 b93a 	b.w	8005490 <__retarget_lock_init_recursive>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop
 8005220:	08005ce9 	.word	0x08005ce9
 8005224:	08005d0b 	.word	0x08005d0b
 8005228:	08005d43 	.word	0x08005d43
 800522c:	08005d67 	.word	0x08005d67
 8005230:	20000a18 	.word	0x20000a18

08005234 <stdio_exit_handler>:
 8005234:	4a02      	ldr	r2, [pc, #8]	@ (8005240 <stdio_exit_handler+0xc>)
 8005236:	4903      	ldr	r1, [pc, #12]	@ (8005244 <stdio_exit_handler+0x10>)
 8005238:	4803      	ldr	r0, [pc, #12]	@ (8005248 <stdio_exit_handler+0x14>)
 800523a:	f000 b869 	b.w	8005310 <_fwalk_sglue>
 800523e:	bf00      	nop
 8005240:	2000000c 	.word	0x2000000c
 8005244:	08005c81 	.word	0x08005c81
 8005248:	2000001c 	.word	0x2000001c

0800524c <cleanup_stdio>:
 800524c:	6841      	ldr	r1, [r0, #4]
 800524e:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <cleanup_stdio+0x34>)
 8005250:	4299      	cmp	r1, r3
 8005252:	b510      	push	{r4, lr}
 8005254:	4604      	mov	r4, r0
 8005256:	d001      	beq.n	800525c <cleanup_stdio+0x10>
 8005258:	f000 fd12 	bl	8005c80 <_fflush_r>
 800525c:	68a1      	ldr	r1, [r4, #8]
 800525e:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <cleanup_stdio+0x38>)
 8005260:	4299      	cmp	r1, r3
 8005262:	d002      	beq.n	800526a <cleanup_stdio+0x1e>
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fd0b 	bl	8005c80 <_fflush_r>
 800526a:	68e1      	ldr	r1, [r4, #12]
 800526c:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <cleanup_stdio+0x3c>)
 800526e:	4299      	cmp	r1, r3
 8005270:	d004      	beq.n	800527c <cleanup_stdio+0x30>
 8005272:	4620      	mov	r0, r4
 8005274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005278:	f000 bd02 	b.w	8005c80 <_fflush_r>
 800527c:	bd10      	pop	{r4, pc}
 800527e:	bf00      	nop
 8005280:	20000a18 	.word	0x20000a18
 8005284:	20000a80 	.word	0x20000a80
 8005288:	20000ae8 	.word	0x20000ae8

0800528c <global_stdio_init.part.0>:
 800528c:	b510      	push	{r4, lr}
 800528e:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <global_stdio_init.part.0+0x30>)
 8005290:	4c0b      	ldr	r4, [pc, #44]	@ (80052c0 <global_stdio_init.part.0+0x34>)
 8005292:	4a0c      	ldr	r2, [pc, #48]	@ (80052c4 <global_stdio_init.part.0+0x38>)
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	4620      	mov	r0, r4
 8005298:	2200      	movs	r2, #0
 800529a:	2104      	movs	r1, #4
 800529c:	f7ff ff94 	bl	80051c8 <std>
 80052a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052a4:	2201      	movs	r2, #1
 80052a6:	2109      	movs	r1, #9
 80052a8:	f7ff ff8e 	bl	80051c8 <std>
 80052ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052b0:	2202      	movs	r2, #2
 80052b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b6:	2112      	movs	r1, #18
 80052b8:	f7ff bf86 	b.w	80051c8 <std>
 80052bc:	20000b50 	.word	0x20000b50
 80052c0:	20000a18 	.word	0x20000a18
 80052c4:	08005235 	.word	0x08005235

080052c8 <__sfp_lock_acquire>:
 80052c8:	4801      	ldr	r0, [pc, #4]	@ (80052d0 <__sfp_lock_acquire+0x8>)
 80052ca:	f000 b8e2 	b.w	8005492 <__retarget_lock_acquire_recursive>
 80052ce:	bf00      	nop
 80052d0:	20000b55 	.word	0x20000b55

080052d4 <__sfp_lock_release>:
 80052d4:	4801      	ldr	r0, [pc, #4]	@ (80052dc <__sfp_lock_release+0x8>)
 80052d6:	f000 b8dd 	b.w	8005494 <__retarget_lock_release_recursive>
 80052da:	bf00      	nop
 80052dc:	20000b55 	.word	0x20000b55

080052e0 <__sinit>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fff0 	bl	80052c8 <__sfp_lock_acquire>
 80052e8:	6a23      	ldr	r3, [r4, #32]
 80052ea:	b11b      	cbz	r3, 80052f4 <__sinit+0x14>
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f0:	f7ff bff0 	b.w	80052d4 <__sfp_lock_release>
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <__sinit+0x28>)
 80052f6:	6223      	str	r3, [r4, #32]
 80052f8:	4b04      	ldr	r3, [pc, #16]	@ (800530c <__sinit+0x2c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f5      	bne.n	80052ec <__sinit+0xc>
 8005300:	f7ff ffc4 	bl	800528c <global_stdio_init.part.0>
 8005304:	e7f2      	b.n	80052ec <__sinit+0xc>
 8005306:	bf00      	nop
 8005308:	0800524d 	.word	0x0800524d
 800530c:	20000b50 	.word	0x20000b50

08005310 <_fwalk_sglue>:
 8005310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005314:	4607      	mov	r7, r0
 8005316:	4688      	mov	r8, r1
 8005318:	4614      	mov	r4, r2
 800531a:	2600      	movs	r6, #0
 800531c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005320:	f1b9 0901 	subs.w	r9, r9, #1
 8005324:	d505      	bpl.n	8005332 <_fwalk_sglue+0x22>
 8005326:	6824      	ldr	r4, [r4, #0]
 8005328:	2c00      	cmp	r4, #0
 800532a:	d1f7      	bne.n	800531c <_fwalk_sglue+0xc>
 800532c:	4630      	mov	r0, r6
 800532e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d907      	bls.n	8005348 <_fwalk_sglue+0x38>
 8005338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800533c:	3301      	adds	r3, #1
 800533e:	d003      	beq.n	8005348 <_fwalk_sglue+0x38>
 8005340:	4629      	mov	r1, r5
 8005342:	4638      	mov	r0, r7
 8005344:	47c0      	blx	r8
 8005346:	4306      	orrs	r6, r0
 8005348:	3568      	adds	r5, #104	@ 0x68
 800534a:	e7e9      	b.n	8005320 <_fwalk_sglue+0x10>

0800534c <iprintf>:
 800534c:	b40f      	push	{r0, r1, r2, r3}
 800534e:	b507      	push	{r0, r1, r2, lr}
 8005350:	4906      	ldr	r1, [pc, #24]	@ (800536c <iprintf+0x20>)
 8005352:	ab04      	add	r3, sp, #16
 8005354:	6808      	ldr	r0, [r1, #0]
 8005356:	f853 2b04 	ldr.w	r2, [r3], #4
 800535a:	6881      	ldr	r1, [r0, #8]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	f000 f8c3 	bl	80054e8 <_vfiprintf_r>
 8005362:	b003      	add	sp, #12
 8005364:	f85d eb04 	ldr.w	lr, [sp], #4
 8005368:	b004      	add	sp, #16
 800536a:	4770      	bx	lr
 800536c:	20000018 	.word	0x20000018

08005370 <_puts_r>:
 8005370:	6a03      	ldr	r3, [r0, #32]
 8005372:	b570      	push	{r4, r5, r6, lr}
 8005374:	6884      	ldr	r4, [r0, #8]
 8005376:	4605      	mov	r5, r0
 8005378:	460e      	mov	r6, r1
 800537a:	b90b      	cbnz	r3, 8005380 <_puts_r+0x10>
 800537c:	f7ff ffb0 	bl	80052e0 <__sinit>
 8005380:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005382:	07db      	lsls	r3, r3, #31
 8005384:	d405      	bmi.n	8005392 <_puts_r+0x22>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	0598      	lsls	r0, r3, #22
 800538a:	d402      	bmi.n	8005392 <_puts_r+0x22>
 800538c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800538e:	f000 f880 	bl	8005492 <__retarget_lock_acquire_recursive>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	0719      	lsls	r1, r3, #28
 8005396:	d502      	bpl.n	800539e <_puts_r+0x2e>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d135      	bne.n	800540a <_puts_r+0x9a>
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fd23 	bl	8005dec <__swsetup_r>
 80053a6:	b380      	cbz	r0, 800540a <_puts_r+0x9a>
 80053a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80053ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053ae:	07da      	lsls	r2, r3, #31
 80053b0:	d405      	bmi.n	80053be <_puts_r+0x4e>
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	059b      	lsls	r3, r3, #22
 80053b6:	d402      	bmi.n	80053be <_puts_r+0x4e>
 80053b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ba:	f000 f86b 	bl	8005494 <__retarget_lock_release_recursive>
 80053be:	4628      	mov	r0, r5
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da04      	bge.n	80053d0 <_puts_r+0x60>
 80053c6:	69a2      	ldr	r2, [r4, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	dc17      	bgt.n	80053fc <_puts_r+0x8c>
 80053cc:	290a      	cmp	r1, #10
 80053ce:	d015      	beq.n	80053fc <_puts_r+0x8c>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	7019      	strb	r1, [r3, #0]
 80053d8:	68a3      	ldr	r3, [r4, #8]
 80053da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053de:	3b01      	subs	r3, #1
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	2900      	cmp	r1, #0
 80053e4:	d1ed      	bne.n	80053c2 <_puts_r+0x52>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da11      	bge.n	800540e <_puts_r+0x9e>
 80053ea:	4622      	mov	r2, r4
 80053ec:	210a      	movs	r1, #10
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 fcbd 	bl	8005d6e <__swbuf_r>
 80053f4:	3001      	adds	r0, #1
 80053f6:	d0d7      	beq.n	80053a8 <_puts_r+0x38>
 80053f8:	250a      	movs	r5, #10
 80053fa:	e7d7      	b.n	80053ac <_puts_r+0x3c>
 80053fc:	4622      	mov	r2, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fcb5 	bl	8005d6e <__swbuf_r>
 8005404:	3001      	adds	r0, #1
 8005406:	d1e7      	bne.n	80053d8 <_puts_r+0x68>
 8005408:	e7ce      	b.n	80053a8 <_puts_r+0x38>
 800540a:	3e01      	subs	r6, #1
 800540c:	e7e4      	b.n	80053d8 <_puts_r+0x68>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	6022      	str	r2, [r4, #0]
 8005414:	220a      	movs	r2, #10
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e7ee      	b.n	80053f8 <_puts_r+0x88>
	...

0800541c <puts>:
 800541c:	4b02      	ldr	r3, [pc, #8]	@ (8005428 <puts+0xc>)
 800541e:	4601      	mov	r1, r0
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f7ff bfa5 	b.w	8005370 <_puts_r>
 8005426:	bf00      	nop
 8005428:	20000018 	.word	0x20000018

0800542c <memset>:
 800542c:	4402      	add	r2, r0
 800542e:	4603      	mov	r3, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	f803 1b01 	strb.w	r1, [r3], #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <__errno>:
 800543c:	4b01      	ldr	r3, [pc, #4]	@ (8005444 <__errno+0x8>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000018 	.word	0x20000018

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4d0d      	ldr	r5, [pc, #52]	@ (8005480 <__libc_init_array+0x38>)
 800544c:	4c0d      	ldr	r4, [pc, #52]	@ (8005484 <__libc_init_array+0x3c>)
 800544e:	1b64      	subs	r4, r4, r5
 8005450:	10a4      	asrs	r4, r4, #2
 8005452:	2600      	movs	r6, #0
 8005454:	42a6      	cmp	r6, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	4d0b      	ldr	r5, [pc, #44]	@ (8005488 <__libc_init_array+0x40>)
 800545a:	4c0c      	ldr	r4, [pc, #48]	@ (800548c <__libc_init_array+0x44>)
 800545c:	f000 fe40 	bl	80060e0 <_init>
 8005460:	1b64      	subs	r4, r4, r5
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	2600      	movs	r6, #0
 8005466:	42a6      	cmp	r6, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005470:	4798      	blx	r3
 8005472:	3601      	adds	r6, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f855 3b04 	ldr.w	r3, [r5], #4
 800547a:	4798      	blx	r3
 800547c:	3601      	adds	r6, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	080061d4 	.word	0x080061d4
 8005484:	080061d4 	.word	0x080061d4
 8005488:	080061d4 	.word	0x080061d4
 800548c:	080061d8 	.word	0x080061d8

08005490 <__retarget_lock_init_recursive>:
 8005490:	4770      	bx	lr

08005492 <__retarget_lock_acquire_recursive>:
 8005492:	4770      	bx	lr

08005494 <__retarget_lock_release_recursive>:
 8005494:	4770      	bx	lr

08005496 <__sfputc_r>:
 8005496:	6893      	ldr	r3, [r2, #8]
 8005498:	3b01      	subs	r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	b410      	push	{r4}
 800549e:	6093      	str	r3, [r2, #8]
 80054a0:	da08      	bge.n	80054b4 <__sfputc_r+0x1e>
 80054a2:	6994      	ldr	r4, [r2, #24]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	db01      	blt.n	80054ac <__sfputc_r+0x16>
 80054a8:	290a      	cmp	r1, #10
 80054aa:	d103      	bne.n	80054b4 <__sfputc_r+0x1e>
 80054ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054b0:	f000 bc5d 	b.w	8005d6e <__swbuf_r>
 80054b4:	6813      	ldr	r3, [r2, #0]
 80054b6:	1c58      	adds	r0, r3, #1
 80054b8:	6010      	str	r0, [r2, #0]
 80054ba:	7019      	strb	r1, [r3, #0]
 80054bc:	4608      	mov	r0, r1
 80054be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <__sfputs_r>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	4606      	mov	r6, r0
 80054c8:	460f      	mov	r7, r1
 80054ca:	4614      	mov	r4, r2
 80054cc:	18d5      	adds	r5, r2, r3
 80054ce:	42ac      	cmp	r4, r5
 80054d0:	d101      	bne.n	80054d6 <__sfputs_r+0x12>
 80054d2:	2000      	movs	r0, #0
 80054d4:	e007      	b.n	80054e6 <__sfputs_r+0x22>
 80054d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054da:	463a      	mov	r2, r7
 80054dc:	4630      	mov	r0, r6
 80054de:	f7ff ffda 	bl	8005496 <__sfputc_r>
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	d1f3      	bne.n	80054ce <__sfputs_r+0xa>
 80054e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054e8 <_vfiprintf_r>:
 80054e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ec:	460d      	mov	r5, r1
 80054ee:	b09d      	sub	sp, #116	@ 0x74
 80054f0:	4614      	mov	r4, r2
 80054f2:	4698      	mov	r8, r3
 80054f4:	4606      	mov	r6, r0
 80054f6:	b118      	cbz	r0, 8005500 <_vfiprintf_r+0x18>
 80054f8:	6a03      	ldr	r3, [r0, #32]
 80054fa:	b90b      	cbnz	r3, 8005500 <_vfiprintf_r+0x18>
 80054fc:	f7ff fef0 	bl	80052e0 <__sinit>
 8005500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005502:	07d9      	lsls	r1, r3, #31
 8005504:	d405      	bmi.n	8005512 <_vfiprintf_r+0x2a>
 8005506:	89ab      	ldrh	r3, [r5, #12]
 8005508:	059a      	lsls	r2, r3, #22
 800550a:	d402      	bmi.n	8005512 <_vfiprintf_r+0x2a>
 800550c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800550e:	f7ff ffc0 	bl	8005492 <__retarget_lock_acquire_recursive>
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	071b      	lsls	r3, r3, #28
 8005516:	d501      	bpl.n	800551c <_vfiprintf_r+0x34>
 8005518:	692b      	ldr	r3, [r5, #16]
 800551a:	b99b      	cbnz	r3, 8005544 <_vfiprintf_r+0x5c>
 800551c:	4629      	mov	r1, r5
 800551e:	4630      	mov	r0, r6
 8005520:	f000 fc64 	bl	8005dec <__swsetup_r>
 8005524:	b170      	cbz	r0, 8005544 <_vfiprintf_r+0x5c>
 8005526:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005528:	07dc      	lsls	r4, r3, #31
 800552a:	d504      	bpl.n	8005536 <_vfiprintf_r+0x4e>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005530:	b01d      	add	sp, #116	@ 0x74
 8005532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005536:	89ab      	ldrh	r3, [r5, #12]
 8005538:	0598      	lsls	r0, r3, #22
 800553a:	d4f7      	bmi.n	800552c <_vfiprintf_r+0x44>
 800553c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800553e:	f7ff ffa9 	bl	8005494 <__retarget_lock_release_recursive>
 8005542:	e7f3      	b.n	800552c <_vfiprintf_r+0x44>
 8005544:	2300      	movs	r3, #0
 8005546:	9309      	str	r3, [sp, #36]	@ 0x24
 8005548:	2320      	movs	r3, #32
 800554a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800554e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005552:	2330      	movs	r3, #48	@ 0x30
 8005554:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005704 <_vfiprintf_r+0x21c>
 8005558:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800555c:	f04f 0901 	mov.w	r9, #1
 8005560:	4623      	mov	r3, r4
 8005562:	469a      	mov	sl, r3
 8005564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005568:	b10a      	cbz	r2, 800556e <_vfiprintf_r+0x86>
 800556a:	2a25      	cmp	r2, #37	@ 0x25
 800556c:	d1f9      	bne.n	8005562 <_vfiprintf_r+0x7a>
 800556e:	ebba 0b04 	subs.w	fp, sl, r4
 8005572:	d00b      	beq.n	800558c <_vfiprintf_r+0xa4>
 8005574:	465b      	mov	r3, fp
 8005576:	4622      	mov	r2, r4
 8005578:	4629      	mov	r1, r5
 800557a:	4630      	mov	r0, r6
 800557c:	f7ff ffa2 	bl	80054c4 <__sfputs_r>
 8005580:	3001      	adds	r0, #1
 8005582:	f000 80a7 	beq.w	80056d4 <_vfiprintf_r+0x1ec>
 8005586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005588:	445a      	add	r2, fp
 800558a:	9209      	str	r2, [sp, #36]	@ 0x24
 800558c:	f89a 3000 	ldrb.w	r3, [sl]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 809f 	beq.w	80056d4 <_vfiprintf_r+0x1ec>
 8005596:	2300      	movs	r3, #0
 8005598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800559c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055a0:	f10a 0a01 	add.w	sl, sl, #1
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80055ae:	4654      	mov	r4, sl
 80055b0:	2205      	movs	r2, #5
 80055b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b6:	4853      	ldr	r0, [pc, #332]	@ (8005704 <_vfiprintf_r+0x21c>)
 80055b8:	f7fa fe3a 	bl	8000230 <memchr>
 80055bc:	9a04      	ldr	r2, [sp, #16]
 80055be:	b9d8      	cbnz	r0, 80055f8 <_vfiprintf_r+0x110>
 80055c0:	06d1      	lsls	r1, r2, #27
 80055c2:	bf44      	itt	mi
 80055c4:	2320      	movmi	r3, #32
 80055c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055ca:	0713      	lsls	r3, r2, #28
 80055cc:	bf44      	itt	mi
 80055ce:	232b      	movmi	r3, #43	@ 0x2b
 80055d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055d4:	f89a 3000 	ldrb.w	r3, [sl]
 80055d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055da:	d015      	beq.n	8005608 <_vfiprintf_r+0x120>
 80055dc:	9a07      	ldr	r2, [sp, #28]
 80055de:	4654      	mov	r4, sl
 80055e0:	2000      	movs	r0, #0
 80055e2:	f04f 0c0a 	mov.w	ip, #10
 80055e6:	4621      	mov	r1, r4
 80055e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ec:	3b30      	subs	r3, #48	@ 0x30
 80055ee:	2b09      	cmp	r3, #9
 80055f0:	d94b      	bls.n	800568a <_vfiprintf_r+0x1a2>
 80055f2:	b1b0      	cbz	r0, 8005622 <_vfiprintf_r+0x13a>
 80055f4:	9207      	str	r2, [sp, #28]
 80055f6:	e014      	b.n	8005622 <_vfiprintf_r+0x13a>
 80055f8:	eba0 0308 	sub.w	r3, r0, r8
 80055fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005600:	4313      	orrs	r3, r2
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	46a2      	mov	sl, r4
 8005606:	e7d2      	b.n	80055ae <_vfiprintf_r+0xc6>
 8005608:	9b03      	ldr	r3, [sp, #12]
 800560a:	1d19      	adds	r1, r3, #4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	9103      	str	r1, [sp, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	bfbb      	ittet	lt
 8005614:	425b      	neglt	r3, r3
 8005616:	f042 0202 	orrlt.w	r2, r2, #2
 800561a:	9307      	strge	r3, [sp, #28]
 800561c:	9307      	strlt	r3, [sp, #28]
 800561e:	bfb8      	it	lt
 8005620:	9204      	strlt	r2, [sp, #16]
 8005622:	7823      	ldrb	r3, [r4, #0]
 8005624:	2b2e      	cmp	r3, #46	@ 0x2e
 8005626:	d10a      	bne.n	800563e <_vfiprintf_r+0x156>
 8005628:	7863      	ldrb	r3, [r4, #1]
 800562a:	2b2a      	cmp	r3, #42	@ 0x2a
 800562c:	d132      	bne.n	8005694 <_vfiprintf_r+0x1ac>
 800562e:	9b03      	ldr	r3, [sp, #12]
 8005630:	1d1a      	adds	r2, r3, #4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	9203      	str	r2, [sp, #12]
 8005636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800563a:	3402      	adds	r4, #2
 800563c:	9305      	str	r3, [sp, #20]
 800563e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005714 <_vfiprintf_r+0x22c>
 8005642:	7821      	ldrb	r1, [r4, #0]
 8005644:	2203      	movs	r2, #3
 8005646:	4650      	mov	r0, sl
 8005648:	f7fa fdf2 	bl	8000230 <memchr>
 800564c:	b138      	cbz	r0, 800565e <_vfiprintf_r+0x176>
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	eba0 000a 	sub.w	r0, r0, sl
 8005654:	2240      	movs	r2, #64	@ 0x40
 8005656:	4082      	lsls	r2, r0
 8005658:	4313      	orrs	r3, r2
 800565a:	3401      	adds	r4, #1
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005662:	4829      	ldr	r0, [pc, #164]	@ (8005708 <_vfiprintf_r+0x220>)
 8005664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005668:	2206      	movs	r2, #6
 800566a:	f7fa fde1 	bl	8000230 <memchr>
 800566e:	2800      	cmp	r0, #0
 8005670:	d03f      	beq.n	80056f2 <_vfiprintf_r+0x20a>
 8005672:	4b26      	ldr	r3, [pc, #152]	@ (800570c <_vfiprintf_r+0x224>)
 8005674:	bb1b      	cbnz	r3, 80056be <_vfiprintf_r+0x1d6>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	3307      	adds	r3, #7
 800567a:	f023 0307 	bic.w	r3, r3, #7
 800567e:	3308      	adds	r3, #8
 8005680:	9303      	str	r3, [sp, #12]
 8005682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005684:	443b      	add	r3, r7
 8005686:	9309      	str	r3, [sp, #36]	@ 0x24
 8005688:	e76a      	b.n	8005560 <_vfiprintf_r+0x78>
 800568a:	fb0c 3202 	mla	r2, ip, r2, r3
 800568e:	460c      	mov	r4, r1
 8005690:	2001      	movs	r0, #1
 8005692:	e7a8      	b.n	80055e6 <_vfiprintf_r+0xfe>
 8005694:	2300      	movs	r3, #0
 8005696:	3401      	adds	r4, #1
 8005698:	9305      	str	r3, [sp, #20]
 800569a:	4619      	mov	r1, r3
 800569c:	f04f 0c0a 	mov.w	ip, #10
 80056a0:	4620      	mov	r0, r4
 80056a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056a6:	3a30      	subs	r2, #48	@ 0x30
 80056a8:	2a09      	cmp	r2, #9
 80056aa:	d903      	bls.n	80056b4 <_vfiprintf_r+0x1cc>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0c6      	beq.n	800563e <_vfiprintf_r+0x156>
 80056b0:	9105      	str	r1, [sp, #20]
 80056b2:	e7c4      	b.n	800563e <_vfiprintf_r+0x156>
 80056b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056b8:	4604      	mov	r4, r0
 80056ba:	2301      	movs	r3, #1
 80056bc:	e7f0      	b.n	80056a0 <_vfiprintf_r+0x1b8>
 80056be:	ab03      	add	r3, sp, #12
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	462a      	mov	r2, r5
 80056c4:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <_vfiprintf_r+0x228>)
 80056c6:	a904      	add	r1, sp, #16
 80056c8:	4630      	mov	r0, r6
 80056ca:	f3af 8000 	nop.w
 80056ce:	4607      	mov	r7, r0
 80056d0:	1c78      	adds	r0, r7, #1
 80056d2:	d1d6      	bne.n	8005682 <_vfiprintf_r+0x19a>
 80056d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056d6:	07d9      	lsls	r1, r3, #31
 80056d8:	d405      	bmi.n	80056e6 <_vfiprintf_r+0x1fe>
 80056da:	89ab      	ldrh	r3, [r5, #12]
 80056dc:	059a      	lsls	r2, r3, #22
 80056de:	d402      	bmi.n	80056e6 <_vfiprintf_r+0x1fe>
 80056e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056e2:	f7ff fed7 	bl	8005494 <__retarget_lock_release_recursive>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	065b      	lsls	r3, r3, #25
 80056ea:	f53f af1f 	bmi.w	800552c <_vfiprintf_r+0x44>
 80056ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056f0:	e71e      	b.n	8005530 <_vfiprintf_r+0x48>
 80056f2:	ab03      	add	r3, sp, #12
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	462a      	mov	r2, r5
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <_vfiprintf_r+0x228>)
 80056fa:	a904      	add	r1, sp, #16
 80056fc:	4630      	mov	r0, r6
 80056fe:	f000 f91b 	bl	8005938 <_printf_i>
 8005702:	e7e4      	b.n	80056ce <_vfiprintf_r+0x1e6>
 8005704:	08006198 	.word	0x08006198
 8005708:	080061a2 	.word	0x080061a2
 800570c:	00000000 	.word	0x00000000
 8005710:	080054c5 	.word	0x080054c5
 8005714:	0800619e 	.word	0x0800619e

08005718 <sbrk_aligned>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	4e0f      	ldr	r6, [pc, #60]	@ (8005758 <sbrk_aligned+0x40>)
 800571c:	460c      	mov	r4, r1
 800571e:	6831      	ldr	r1, [r6, #0]
 8005720:	4605      	mov	r5, r0
 8005722:	b911      	cbnz	r1, 800572a <sbrk_aligned+0x12>
 8005724:	f000 fc70 	bl	8006008 <_sbrk_r>
 8005728:	6030      	str	r0, [r6, #0]
 800572a:	4621      	mov	r1, r4
 800572c:	4628      	mov	r0, r5
 800572e:	f000 fc6b 	bl	8006008 <_sbrk_r>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d103      	bne.n	800573e <sbrk_aligned+0x26>
 8005736:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800573a:	4620      	mov	r0, r4
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	1cc4      	adds	r4, r0, #3
 8005740:	f024 0403 	bic.w	r4, r4, #3
 8005744:	42a0      	cmp	r0, r4
 8005746:	d0f8      	beq.n	800573a <sbrk_aligned+0x22>
 8005748:	1a21      	subs	r1, r4, r0
 800574a:	4628      	mov	r0, r5
 800574c:	f000 fc5c 	bl	8006008 <_sbrk_r>
 8005750:	3001      	adds	r0, #1
 8005752:	d1f2      	bne.n	800573a <sbrk_aligned+0x22>
 8005754:	e7ef      	b.n	8005736 <sbrk_aligned+0x1e>
 8005756:	bf00      	nop
 8005758:	20000b58 	.word	0x20000b58

0800575c <_malloc_r>:
 800575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005760:	1ccd      	adds	r5, r1, #3
 8005762:	f025 0503 	bic.w	r5, r5, #3
 8005766:	3508      	adds	r5, #8
 8005768:	2d0c      	cmp	r5, #12
 800576a:	bf38      	it	cc
 800576c:	250c      	movcc	r5, #12
 800576e:	2d00      	cmp	r5, #0
 8005770:	4606      	mov	r6, r0
 8005772:	db01      	blt.n	8005778 <_malloc_r+0x1c>
 8005774:	42a9      	cmp	r1, r5
 8005776:	d904      	bls.n	8005782 <_malloc_r+0x26>
 8005778:	230c      	movs	r3, #12
 800577a:	6033      	str	r3, [r6, #0]
 800577c:	2000      	movs	r0, #0
 800577e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005782:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005858 <_malloc_r+0xfc>
 8005786:	f000 faa3 	bl	8005cd0 <__malloc_lock>
 800578a:	f8d8 3000 	ldr.w	r3, [r8]
 800578e:	461c      	mov	r4, r3
 8005790:	bb44      	cbnz	r4, 80057e4 <_malloc_r+0x88>
 8005792:	4629      	mov	r1, r5
 8005794:	4630      	mov	r0, r6
 8005796:	f7ff ffbf 	bl	8005718 <sbrk_aligned>
 800579a:	1c43      	adds	r3, r0, #1
 800579c:	4604      	mov	r4, r0
 800579e:	d158      	bne.n	8005852 <_malloc_r+0xf6>
 80057a0:	f8d8 4000 	ldr.w	r4, [r8]
 80057a4:	4627      	mov	r7, r4
 80057a6:	2f00      	cmp	r7, #0
 80057a8:	d143      	bne.n	8005832 <_malloc_r+0xd6>
 80057aa:	2c00      	cmp	r4, #0
 80057ac:	d04b      	beq.n	8005846 <_malloc_r+0xea>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	4639      	mov	r1, r7
 80057b2:	4630      	mov	r0, r6
 80057b4:	eb04 0903 	add.w	r9, r4, r3
 80057b8:	f000 fc26 	bl	8006008 <_sbrk_r>
 80057bc:	4581      	cmp	r9, r0
 80057be:	d142      	bne.n	8005846 <_malloc_r+0xea>
 80057c0:	6821      	ldr	r1, [r4, #0]
 80057c2:	1a6d      	subs	r5, r5, r1
 80057c4:	4629      	mov	r1, r5
 80057c6:	4630      	mov	r0, r6
 80057c8:	f7ff ffa6 	bl	8005718 <sbrk_aligned>
 80057cc:	3001      	adds	r0, #1
 80057ce:	d03a      	beq.n	8005846 <_malloc_r+0xea>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	442b      	add	r3, r5
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	f8d8 3000 	ldr.w	r3, [r8]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	bb62      	cbnz	r2, 8005838 <_malloc_r+0xdc>
 80057de:	f8c8 7000 	str.w	r7, [r8]
 80057e2:	e00f      	b.n	8005804 <_malloc_r+0xa8>
 80057e4:	6822      	ldr	r2, [r4, #0]
 80057e6:	1b52      	subs	r2, r2, r5
 80057e8:	d420      	bmi.n	800582c <_malloc_r+0xd0>
 80057ea:	2a0b      	cmp	r2, #11
 80057ec:	d917      	bls.n	800581e <_malloc_r+0xc2>
 80057ee:	1961      	adds	r1, r4, r5
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	6025      	str	r5, [r4, #0]
 80057f4:	bf18      	it	ne
 80057f6:	6059      	strne	r1, [r3, #4]
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	bf08      	it	eq
 80057fc:	f8c8 1000 	streq.w	r1, [r8]
 8005800:	5162      	str	r2, [r4, r5]
 8005802:	604b      	str	r3, [r1, #4]
 8005804:	4630      	mov	r0, r6
 8005806:	f000 fa69 	bl	8005cdc <__malloc_unlock>
 800580a:	f104 000b 	add.w	r0, r4, #11
 800580e:	1d23      	adds	r3, r4, #4
 8005810:	f020 0007 	bic.w	r0, r0, #7
 8005814:	1ac2      	subs	r2, r0, r3
 8005816:	bf1c      	itt	ne
 8005818:	1a1b      	subne	r3, r3, r0
 800581a:	50a3      	strne	r3, [r4, r2]
 800581c:	e7af      	b.n	800577e <_malloc_r+0x22>
 800581e:	6862      	ldr	r2, [r4, #4]
 8005820:	42a3      	cmp	r3, r4
 8005822:	bf0c      	ite	eq
 8005824:	f8c8 2000 	streq.w	r2, [r8]
 8005828:	605a      	strne	r2, [r3, #4]
 800582a:	e7eb      	b.n	8005804 <_malloc_r+0xa8>
 800582c:	4623      	mov	r3, r4
 800582e:	6864      	ldr	r4, [r4, #4]
 8005830:	e7ae      	b.n	8005790 <_malloc_r+0x34>
 8005832:	463c      	mov	r4, r7
 8005834:	687f      	ldr	r7, [r7, #4]
 8005836:	e7b6      	b.n	80057a6 <_malloc_r+0x4a>
 8005838:	461a      	mov	r2, r3
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	42a3      	cmp	r3, r4
 800583e:	d1fb      	bne.n	8005838 <_malloc_r+0xdc>
 8005840:	2300      	movs	r3, #0
 8005842:	6053      	str	r3, [r2, #4]
 8005844:	e7de      	b.n	8005804 <_malloc_r+0xa8>
 8005846:	230c      	movs	r3, #12
 8005848:	6033      	str	r3, [r6, #0]
 800584a:	4630      	mov	r0, r6
 800584c:	f000 fa46 	bl	8005cdc <__malloc_unlock>
 8005850:	e794      	b.n	800577c <_malloc_r+0x20>
 8005852:	6005      	str	r5, [r0, #0]
 8005854:	e7d6      	b.n	8005804 <_malloc_r+0xa8>
 8005856:	bf00      	nop
 8005858:	20000b5c 	.word	0x20000b5c

0800585c <_printf_common>:
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	4616      	mov	r6, r2
 8005862:	4698      	mov	r8, r3
 8005864:	688a      	ldr	r2, [r1, #8]
 8005866:	690b      	ldr	r3, [r1, #16]
 8005868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800586c:	4293      	cmp	r3, r2
 800586e:	bfb8      	it	lt
 8005870:	4613      	movlt	r3, r2
 8005872:	6033      	str	r3, [r6, #0]
 8005874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005878:	4607      	mov	r7, r0
 800587a:	460c      	mov	r4, r1
 800587c:	b10a      	cbz	r2, 8005882 <_printf_common+0x26>
 800587e:	3301      	adds	r3, #1
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	0699      	lsls	r1, r3, #26
 8005886:	bf42      	ittt	mi
 8005888:	6833      	ldrmi	r3, [r6, #0]
 800588a:	3302      	addmi	r3, #2
 800588c:	6033      	strmi	r3, [r6, #0]
 800588e:	6825      	ldr	r5, [r4, #0]
 8005890:	f015 0506 	ands.w	r5, r5, #6
 8005894:	d106      	bne.n	80058a4 <_printf_common+0x48>
 8005896:	f104 0a19 	add.w	sl, r4, #25
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	6832      	ldr	r2, [r6, #0]
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	dc26      	bgt.n	80058f2 <_printf_common+0x96>
 80058a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	3b00      	subs	r3, #0
 80058ac:	bf18      	it	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	0692      	lsls	r2, r2, #26
 80058b2:	d42b      	bmi.n	800590c <_printf_common+0xb0>
 80058b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058b8:	4641      	mov	r1, r8
 80058ba:	4638      	mov	r0, r7
 80058bc:	47c8      	blx	r9
 80058be:	3001      	adds	r0, #1
 80058c0:	d01e      	beq.n	8005900 <_printf_common+0xa4>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	f003 0306 	and.w	r3, r3, #6
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	bf02      	ittt	eq
 80058ce:	68e5      	ldreq	r5, [r4, #12]
 80058d0:	6833      	ldreq	r3, [r6, #0]
 80058d2:	1aed      	subeq	r5, r5, r3
 80058d4:	68a3      	ldr	r3, [r4, #8]
 80058d6:	bf0c      	ite	eq
 80058d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058dc:	2500      	movne	r5, #0
 80058de:	4293      	cmp	r3, r2
 80058e0:	bfc4      	itt	gt
 80058e2:	1a9b      	subgt	r3, r3, r2
 80058e4:	18ed      	addgt	r5, r5, r3
 80058e6:	2600      	movs	r6, #0
 80058e8:	341a      	adds	r4, #26
 80058ea:	42b5      	cmp	r5, r6
 80058ec:	d11a      	bne.n	8005924 <_printf_common+0xc8>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e008      	b.n	8005904 <_printf_common+0xa8>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4652      	mov	r2, sl
 80058f6:	4641      	mov	r1, r8
 80058f8:	4638      	mov	r0, r7
 80058fa:	47c8      	blx	r9
 80058fc:	3001      	adds	r0, #1
 80058fe:	d103      	bne.n	8005908 <_printf_common+0xac>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005908:	3501      	adds	r5, #1
 800590a:	e7c6      	b.n	800589a <_printf_common+0x3e>
 800590c:	18e1      	adds	r1, r4, r3
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	2030      	movs	r0, #48	@ 0x30
 8005912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005916:	4422      	add	r2, r4
 8005918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800591c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005920:	3302      	adds	r3, #2
 8005922:	e7c7      	b.n	80058b4 <_printf_common+0x58>
 8005924:	2301      	movs	r3, #1
 8005926:	4622      	mov	r2, r4
 8005928:	4641      	mov	r1, r8
 800592a:	4638      	mov	r0, r7
 800592c:	47c8      	blx	r9
 800592e:	3001      	adds	r0, #1
 8005930:	d0e6      	beq.n	8005900 <_printf_common+0xa4>
 8005932:	3601      	adds	r6, #1
 8005934:	e7d9      	b.n	80058ea <_printf_common+0x8e>
	...

08005938 <_printf_i>:
 8005938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	7e0f      	ldrb	r7, [r1, #24]
 800593e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005940:	2f78      	cmp	r7, #120	@ 0x78
 8005942:	4691      	mov	r9, r2
 8005944:	4680      	mov	r8, r0
 8005946:	460c      	mov	r4, r1
 8005948:	469a      	mov	sl, r3
 800594a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800594e:	d807      	bhi.n	8005960 <_printf_i+0x28>
 8005950:	2f62      	cmp	r7, #98	@ 0x62
 8005952:	d80a      	bhi.n	800596a <_printf_i+0x32>
 8005954:	2f00      	cmp	r7, #0
 8005956:	f000 80d2 	beq.w	8005afe <_printf_i+0x1c6>
 800595a:	2f58      	cmp	r7, #88	@ 0x58
 800595c:	f000 80b9 	beq.w	8005ad2 <_printf_i+0x19a>
 8005960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005968:	e03a      	b.n	80059e0 <_printf_i+0xa8>
 800596a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800596e:	2b15      	cmp	r3, #21
 8005970:	d8f6      	bhi.n	8005960 <_printf_i+0x28>
 8005972:	a101      	add	r1, pc, #4	@ (adr r1, 8005978 <_printf_i+0x40>)
 8005974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005978:	080059d1 	.word	0x080059d1
 800597c:	080059e5 	.word	0x080059e5
 8005980:	08005961 	.word	0x08005961
 8005984:	08005961 	.word	0x08005961
 8005988:	08005961 	.word	0x08005961
 800598c:	08005961 	.word	0x08005961
 8005990:	080059e5 	.word	0x080059e5
 8005994:	08005961 	.word	0x08005961
 8005998:	08005961 	.word	0x08005961
 800599c:	08005961 	.word	0x08005961
 80059a0:	08005961 	.word	0x08005961
 80059a4:	08005ae5 	.word	0x08005ae5
 80059a8:	08005a0f 	.word	0x08005a0f
 80059ac:	08005a9f 	.word	0x08005a9f
 80059b0:	08005961 	.word	0x08005961
 80059b4:	08005961 	.word	0x08005961
 80059b8:	08005b07 	.word	0x08005b07
 80059bc:	08005961 	.word	0x08005961
 80059c0:	08005a0f 	.word	0x08005a0f
 80059c4:	08005961 	.word	0x08005961
 80059c8:	08005961 	.word	0x08005961
 80059cc:	08005aa7 	.word	0x08005aa7
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6032      	str	r2, [r6, #0]
 80059d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059e0:	2301      	movs	r3, #1
 80059e2:	e09d      	b.n	8005b20 <_printf_i+0x1e8>
 80059e4:	6833      	ldr	r3, [r6, #0]
 80059e6:	6820      	ldr	r0, [r4, #0]
 80059e8:	1d19      	adds	r1, r3, #4
 80059ea:	6031      	str	r1, [r6, #0]
 80059ec:	0606      	lsls	r6, r0, #24
 80059ee:	d501      	bpl.n	80059f4 <_printf_i+0xbc>
 80059f0:	681d      	ldr	r5, [r3, #0]
 80059f2:	e003      	b.n	80059fc <_printf_i+0xc4>
 80059f4:	0645      	lsls	r5, r0, #25
 80059f6:	d5fb      	bpl.n	80059f0 <_printf_i+0xb8>
 80059f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059fc:	2d00      	cmp	r5, #0
 80059fe:	da03      	bge.n	8005a08 <_printf_i+0xd0>
 8005a00:	232d      	movs	r3, #45	@ 0x2d
 8005a02:	426d      	negs	r5, r5
 8005a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a08:	4859      	ldr	r0, [pc, #356]	@ (8005b70 <_printf_i+0x238>)
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	e011      	b.n	8005a32 <_printf_i+0xfa>
 8005a0e:	6821      	ldr	r1, [r4, #0]
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	0608      	lsls	r0, r1, #24
 8005a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a18:	d402      	bmi.n	8005a20 <_printf_i+0xe8>
 8005a1a:	0649      	lsls	r1, r1, #25
 8005a1c:	bf48      	it	mi
 8005a1e:	b2ad      	uxthmi	r5, r5
 8005a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a22:	4853      	ldr	r0, [pc, #332]	@ (8005b70 <_printf_i+0x238>)
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	bf14      	ite	ne
 8005a28:	230a      	movne	r3, #10
 8005a2a:	2308      	moveq	r3, #8
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a32:	6866      	ldr	r6, [r4, #4]
 8005a34:	60a6      	str	r6, [r4, #8]
 8005a36:	2e00      	cmp	r6, #0
 8005a38:	bfa2      	ittt	ge
 8005a3a:	6821      	ldrge	r1, [r4, #0]
 8005a3c:	f021 0104 	bicge.w	r1, r1, #4
 8005a40:	6021      	strge	r1, [r4, #0]
 8005a42:	b90d      	cbnz	r5, 8005a48 <_printf_i+0x110>
 8005a44:	2e00      	cmp	r6, #0
 8005a46:	d04b      	beq.n	8005ae0 <_printf_i+0x1a8>
 8005a48:	4616      	mov	r6, r2
 8005a4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a4e:	fb03 5711 	mls	r7, r3, r1, r5
 8005a52:	5dc7      	ldrb	r7, [r0, r7]
 8005a54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a58:	462f      	mov	r7, r5
 8005a5a:	42bb      	cmp	r3, r7
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	d9f4      	bls.n	8005a4a <_printf_i+0x112>
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d10b      	bne.n	8005a7c <_printf_i+0x144>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	07df      	lsls	r7, r3, #31
 8005a68:	d508      	bpl.n	8005a7c <_printf_i+0x144>
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	6861      	ldr	r1, [r4, #4]
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	bfde      	ittt	le
 8005a72:	2330      	movle	r3, #48	@ 0x30
 8005a74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005a7c:	1b92      	subs	r2, r2, r6
 8005a7e:	6122      	str	r2, [r4, #16]
 8005a80:	f8cd a000 	str.w	sl, [sp]
 8005a84:	464b      	mov	r3, r9
 8005a86:	aa03      	add	r2, sp, #12
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f7ff fee6 	bl	800585c <_printf_common>
 8005a90:	3001      	adds	r0, #1
 8005a92:	d14a      	bne.n	8005b2a <_printf_i+0x1f2>
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a98:	b004      	add	sp, #16
 8005a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	f043 0320 	orr.w	r3, r3, #32
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	4833      	ldr	r0, [pc, #204]	@ (8005b74 <_printf_i+0x23c>)
 8005aa8:	2778      	movs	r7, #120	@ 0x78
 8005aaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	6831      	ldr	r1, [r6, #0]
 8005ab2:	061f      	lsls	r7, r3, #24
 8005ab4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ab8:	d402      	bmi.n	8005ac0 <_printf_i+0x188>
 8005aba:	065f      	lsls	r7, r3, #25
 8005abc:	bf48      	it	mi
 8005abe:	b2ad      	uxthmi	r5, r5
 8005ac0:	6031      	str	r1, [r6, #0]
 8005ac2:	07d9      	lsls	r1, r3, #31
 8005ac4:	bf44      	itt	mi
 8005ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8005aca:	6023      	strmi	r3, [r4, #0]
 8005acc:	b11d      	cbz	r5, 8005ad6 <_printf_i+0x19e>
 8005ace:	2310      	movs	r3, #16
 8005ad0:	e7ac      	b.n	8005a2c <_printf_i+0xf4>
 8005ad2:	4827      	ldr	r0, [pc, #156]	@ (8005b70 <_printf_i+0x238>)
 8005ad4:	e7e9      	b.n	8005aaa <_printf_i+0x172>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	f023 0320 	bic.w	r3, r3, #32
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	e7f6      	b.n	8005ace <_printf_i+0x196>
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	e7bd      	b.n	8005a60 <_printf_i+0x128>
 8005ae4:	6833      	ldr	r3, [r6, #0]
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	6961      	ldr	r1, [r4, #20]
 8005aea:	1d18      	adds	r0, r3, #4
 8005aec:	6030      	str	r0, [r6, #0]
 8005aee:	062e      	lsls	r6, r5, #24
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	d501      	bpl.n	8005af8 <_printf_i+0x1c0>
 8005af4:	6019      	str	r1, [r3, #0]
 8005af6:	e002      	b.n	8005afe <_printf_i+0x1c6>
 8005af8:	0668      	lsls	r0, r5, #25
 8005afa:	d5fb      	bpl.n	8005af4 <_printf_i+0x1bc>
 8005afc:	8019      	strh	r1, [r3, #0]
 8005afe:	2300      	movs	r3, #0
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	4616      	mov	r6, r2
 8005b04:	e7bc      	b.n	8005a80 <_printf_i+0x148>
 8005b06:	6833      	ldr	r3, [r6, #0]
 8005b08:	1d1a      	adds	r2, r3, #4
 8005b0a:	6032      	str	r2, [r6, #0]
 8005b0c:	681e      	ldr	r6, [r3, #0]
 8005b0e:	6862      	ldr	r2, [r4, #4]
 8005b10:	2100      	movs	r1, #0
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7fa fb8c 	bl	8000230 <memchr>
 8005b18:	b108      	cbz	r0, 8005b1e <_printf_i+0x1e6>
 8005b1a:	1b80      	subs	r0, r0, r6
 8005b1c:	6060      	str	r0, [r4, #4]
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	2300      	movs	r3, #0
 8005b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b28:	e7aa      	b.n	8005a80 <_printf_i+0x148>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	4632      	mov	r2, r6
 8005b2e:	4649      	mov	r1, r9
 8005b30:	4640      	mov	r0, r8
 8005b32:	47d0      	blx	sl
 8005b34:	3001      	adds	r0, #1
 8005b36:	d0ad      	beq.n	8005a94 <_printf_i+0x15c>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	079b      	lsls	r3, r3, #30
 8005b3c:	d413      	bmi.n	8005b66 <_printf_i+0x22e>
 8005b3e:	68e0      	ldr	r0, [r4, #12]
 8005b40:	9b03      	ldr	r3, [sp, #12]
 8005b42:	4298      	cmp	r0, r3
 8005b44:	bfb8      	it	lt
 8005b46:	4618      	movlt	r0, r3
 8005b48:	e7a6      	b.n	8005a98 <_printf_i+0x160>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4640      	mov	r0, r8
 8005b52:	47d0      	blx	sl
 8005b54:	3001      	adds	r0, #1
 8005b56:	d09d      	beq.n	8005a94 <_printf_i+0x15c>
 8005b58:	3501      	adds	r5, #1
 8005b5a:	68e3      	ldr	r3, [r4, #12]
 8005b5c:	9903      	ldr	r1, [sp, #12]
 8005b5e:	1a5b      	subs	r3, r3, r1
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	dcf2      	bgt.n	8005b4a <_printf_i+0x212>
 8005b64:	e7eb      	b.n	8005b3e <_printf_i+0x206>
 8005b66:	2500      	movs	r5, #0
 8005b68:	f104 0619 	add.w	r6, r4, #25
 8005b6c:	e7f5      	b.n	8005b5a <_printf_i+0x222>
 8005b6e:	bf00      	nop
 8005b70:	080061a9 	.word	0x080061a9
 8005b74:	080061ba 	.word	0x080061ba

08005b78 <__sflush_r>:
 8005b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b80:	0716      	lsls	r6, r2, #28
 8005b82:	4605      	mov	r5, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	d454      	bmi.n	8005c32 <__sflush_r+0xba>
 8005b88:	684b      	ldr	r3, [r1, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dc02      	bgt.n	8005b94 <__sflush_r+0x1c>
 8005b8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dd48      	ble.n	8005c26 <__sflush_r+0xae>
 8005b94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b96:	2e00      	cmp	r6, #0
 8005b98:	d045      	beq.n	8005c26 <__sflush_r+0xae>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ba0:	682f      	ldr	r7, [r5, #0]
 8005ba2:	6a21      	ldr	r1, [r4, #32]
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	d030      	beq.n	8005c0a <__sflush_r+0x92>
 8005ba8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	0759      	lsls	r1, r3, #29
 8005bae:	d505      	bpl.n	8005bbc <__sflush_r+0x44>
 8005bb0:	6863      	ldr	r3, [r4, #4]
 8005bb2:	1ad2      	subs	r2, r2, r3
 8005bb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bb6:	b10b      	cbz	r3, 8005bbc <__sflush_r+0x44>
 8005bb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bc0:	6a21      	ldr	r1, [r4, #32]
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b0      	blx	r6
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	d106      	bne.n	8005bda <__sflush_r+0x62>
 8005bcc:	6829      	ldr	r1, [r5, #0]
 8005bce:	291d      	cmp	r1, #29
 8005bd0:	d82b      	bhi.n	8005c2a <__sflush_r+0xb2>
 8005bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c7c <__sflush_r+0x104>)
 8005bd4:	410a      	asrs	r2, r1
 8005bd6:	07d6      	lsls	r6, r2, #31
 8005bd8:	d427      	bmi.n	8005c2a <__sflush_r+0xb2>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	6062      	str	r2, [r4, #4]
 8005bde:	04d9      	lsls	r1, r3, #19
 8005be0:	6922      	ldr	r2, [r4, #16]
 8005be2:	6022      	str	r2, [r4, #0]
 8005be4:	d504      	bpl.n	8005bf0 <__sflush_r+0x78>
 8005be6:	1c42      	adds	r2, r0, #1
 8005be8:	d101      	bne.n	8005bee <__sflush_r+0x76>
 8005bea:	682b      	ldr	r3, [r5, #0]
 8005bec:	b903      	cbnz	r3, 8005bf0 <__sflush_r+0x78>
 8005bee:	6560      	str	r0, [r4, #84]	@ 0x54
 8005bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bf2:	602f      	str	r7, [r5, #0]
 8005bf4:	b1b9      	cbz	r1, 8005c26 <__sflush_r+0xae>
 8005bf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	d002      	beq.n	8005c04 <__sflush_r+0x8c>
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fa24 	bl	800604c <_free_r>
 8005c04:	2300      	movs	r3, #0
 8005c06:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c08:	e00d      	b.n	8005c26 <__sflush_r+0xae>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b0      	blx	r6
 8005c10:	4602      	mov	r2, r0
 8005c12:	1c50      	adds	r0, r2, #1
 8005c14:	d1c9      	bne.n	8005baa <__sflush_r+0x32>
 8005c16:	682b      	ldr	r3, [r5, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0c6      	beq.n	8005baa <__sflush_r+0x32>
 8005c1c:	2b1d      	cmp	r3, #29
 8005c1e:	d001      	beq.n	8005c24 <__sflush_r+0xac>
 8005c20:	2b16      	cmp	r3, #22
 8005c22:	d11e      	bne.n	8005c62 <__sflush_r+0xea>
 8005c24:	602f      	str	r7, [r5, #0]
 8005c26:	2000      	movs	r0, #0
 8005c28:	e022      	b.n	8005c70 <__sflush_r+0xf8>
 8005c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c2e:	b21b      	sxth	r3, r3
 8005c30:	e01b      	b.n	8005c6a <__sflush_r+0xf2>
 8005c32:	690f      	ldr	r7, [r1, #16]
 8005c34:	2f00      	cmp	r7, #0
 8005c36:	d0f6      	beq.n	8005c26 <__sflush_r+0xae>
 8005c38:	0793      	lsls	r3, r2, #30
 8005c3a:	680e      	ldr	r6, [r1, #0]
 8005c3c:	bf08      	it	eq
 8005c3e:	694b      	ldreq	r3, [r1, #20]
 8005c40:	600f      	str	r7, [r1, #0]
 8005c42:	bf18      	it	ne
 8005c44:	2300      	movne	r3, #0
 8005c46:	eba6 0807 	sub.w	r8, r6, r7
 8005c4a:	608b      	str	r3, [r1, #8]
 8005c4c:	f1b8 0f00 	cmp.w	r8, #0
 8005c50:	dde9      	ble.n	8005c26 <__sflush_r+0xae>
 8005c52:	6a21      	ldr	r1, [r4, #32]
 8005c54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c56:	4643      	mov	r3, r8
 8005c58:	463a      	mov	r2, r7
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b0      	blx	r6
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	dc08      	bgt.n	8005c74 <__sflush_r+0xfc>
 8005c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c74:	4407      	add	r7, r0
 8005c76:	eba8 0800 	sub.w	r8, r8, r0
 8005c7a:	e7e7      	b.n	8005c4c <__sflush_r+0xd4>
 8005c7c:	dfbffffe 	.word	0xdfbffffe

08005c80 <_fflush_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	690b      	ldr	r3, [r1, #16]
 8005c84:	4605      	mov	r5, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	b913      	cbnz	r3, 8005c90 <_fflush_r+0x10>
 8005c8a:	2500      	movs	r5, #0
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	b118      	cbz	r0, 8005c9a <_fflush_r+0x1a>
 8005c92:	6a03      	ldr	r3, [r0, #32]
 8005c94:	b90b      	cbnz	r3, 8005c9a <_fflush_r+0x1a>
 8005c96:	f7ff fb23 	bl	80052e0 <__sinit>
 8005c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f3      	beq.n	8005c8a <_fflush_r+0xa>
 8005ca2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ca4:	07d0      	lsls	r0, r2, #31
 8005ca6:	d404      	bmi.n	8005cb2 <_fflush_r+0x32>
 8005ca8:	0599      	lsls	r1, r3, #22
 8005caa:	d402      	bmi.n	8005cb2 <_fflush_r+0x32>
 8005cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cae:	f7ff fbf0 	bl	8005492 <__retarget_lock_acquire_recursive>
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	f7ff ff5f 	bl	8005b78 <__sflush_r>
 8005cba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cbc:	07da      	lsls	r2, r3, #31
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	d4e4      	bmi.n	8005c8c <_fflush_r+0xc>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	059b      	lsls	r3, r3, #22
 8005cc6:	d4e1      	bmi.n	8005c8c <_fflush_r+0xc>
 8005cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cca:	f7ff fbe3 	bl	8005494 <__retarget_lock_release_recursive>
 8005cce:	e7dd      	b.n	8005c8c <_fflush_r+0xc>

08005cd0 <__malloc_lock>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	@ (8005cd8 <__malloc_lock+0x8>)
 8005cd2:	f7ff bbde 	b.w	8005492 <__retarget_lock_acquire_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	20000b54 	.word	0x20000b54

08005cdc <__malloc_unlock>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	@ (8005ce4 <__malloc_unlock+0x8>)
 8005cde:	f7ff bbd9 	b.w	8005494 <__retarget_lock_release_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	20000b54 	.word	0x20000b54

08005ce8 <__sread>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	460c      	mov	r4, r1
 8005cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf0:	f000 f978 	bl	8005fe4 <_read_r>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	bfab      	itete	ge
 8005cf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8005cfc:	181b      	addge	r3, r3, r0
 8005cfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d02:	bfac      	ite	ge
 8005d04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d06:	81a3      	strhlt	r3, [r4, #12]
 8005d08:	bd10      	pop	{r4, pc}

08005d0a <__swrite>:
 8005d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0e:	461f      	mov	r7, r3
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	05db      	lsls	r3, r3, #23
 8005d14:	4605      	mov	r5, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	4616      	mov	r6, r2
 8005d1a:	d505      	bpl.n	8005d28 <__swrite+0x1e>
 8005d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d20:	2302      	movs	r3, #2
 8005d22:	2200      	movs	r2, #0
 8005d24:	f000 f94c 	bl	8005fc0 <_lseek_r>
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d32:	81a3      	strh	r3, [r4, #12]
 8005d34:	4632      	mov	r2, r6
 8005d36:	463b      	mov	r3, r7
 8005d38:	4628      	mov	r0, r5
 8005d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	f000 b973 	b.w	8006028 <_write_r>

08005d42 <__sseek>:
 8005d42:	b510      	push	{r4, lr}
 8005d44:	460c      	mov	r4, r1
 8005d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4a:	f000 f939 	bl	8005fc0 <_lseek_r>
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	bf15      	itete	ne
 8005d54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d5e:	81a3      	strheq	r3, [r4, #12]
 8005d60:	bf18      	it	ne
 8005d62:	81a3      	strhne	r3, [r4, #12]
 8005d64:	bd10      	pop	{r4, pc}

08005d66 <__sclose>:
 8005d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6a:	f000 b8f7 	b.w	8005f5c <_close_r>

08005d6e <__swbuf_r>:
 8005d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d70:	460e      	mov	r6, r1
 8005d72:	4614      	mov	r4, r2
 8005d74:	4605      	mov	r5, r0
 8005d76:	b118      	cbz	r0, 8005d80 <__swbuf_r+0x12>
 8005d78:	6a03      	ldr	r3, [r0, #32]
 8005d7a:	b90b      	cbnz	r3, 8005d80 <__swbuf_r+0x12>
 8005d7c:	f7ff fab0 	bl	80052e0 <__sinit>
 8005d80:	69a3      	ldr	r3, [r4, #24]
 8005d82:	60a3      	str	r3, [r4, #8]
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	071a      	lsls	r2, r3, #28
 8005d88:	d501      	bpl.n	8005d8e <__swbuf_r+0x20>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	b943      	cbnz	r3, 8005da0 <__swbuf_r+0x32>
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4628      	mov	r0, r5
 8005d92:	f000 f82b 	bl	8005dec <__swsetup_r>
 8005d96:	b118      	cbz	r0, 8005da0 <__swbuf_r+0x32>
 8005d98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	6922      	ldr	r2, [r4, #16]
 8005da4:	1a98      	subs	r0, r3, r2
 8005da6:	6963      	ldr	r3, [r4, #20]
 8005da8:	b2f6      	uxtb	r6, r6
 8005daa:	4283      	cmp	r3, r0
 8005dac:	4637      	mov	r7, r6
 8005dae:	dc05      	bgt.n	8005dbc <__swbuf_r+0x4e>
 8005db0:	4621      	mov	r1, r4
 8005db2:	4628      	mov	r0, r5
 8005db4:	f7ff ff64 	bl	8005c80 <_fflush_r>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d1ed      	bne.n	8005d98 <__swbuf_r+0x2a>
 8005dbc:	68a3      	ldr	r3, [r4, #8]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	60a3      	str	r3, [r4, #8]
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	6022      	str	r2, [r4, #0]
 8005dc8:	701e      	strb	r6, [r3, #0]
 8005dca:	6962      	ldr	r2, [r4, #20]
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d004      	beq.n	8005ddc <__swbuf_r+0x6e>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	07db      	lsls	r3, r3, #31
 8005dd6:	d5e1      	bpl.n	8005d9c <__swbuf_r+0x2e>
 8005dd8:	2e0a      	cmp	r6, #10
 8005dda:	d1df      	bne.n	8005d9c <__swbuf_r+0x2e>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4628      	mov	r0, r5
 8005de0:	f7ff ff4e 	bl	8005c80 <_fflush_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d0d9      	beq.n	8005d9c <__swbuf_r+0x2e>
 8005de8:	e7d6      	b.n	8005d98 <__swbuf_r+0x2a>
	...

08005dec <__swsetup_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4b29      	ldr	r3, [pc, #164]	@ (8005e94 <__swsetup_r+0xa8>)
 8005df0:	4605      	mov	r5, r0
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	460c      	mov	r4, r1
 8005df6:	b118      	cbz	r0, 8005e00 <__swsetup_r+0x14>
 8005df8:	6a03      	ldr	r3, [r0, #32]
 8005dfa:	b90b      	cbnz	r3, 8005e00 <__swsetup_r+0x14>
 8005dfc:	f7ff fa70 	bl	80052e0 <__sinit>
 8005e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e04:	0719      	lsls	r1, r3, #28
 8005e06:	d422      	bmi.n	8005e4e <__swsetup_r+0x62>
 8005e08:	06da      	lsls	r2, r3, #27
 8005e0a:	d407      	bmi.n	8005e1c <__swsetup_r+0x30>
 8005e0c:	2209      	movs	r2, #9
 8005e0e:	602a      	str	r2, [r5, #0]
 8005e10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e1a:	e033      	b.n	8005e84 <__swsetup_r+0x98>
 8005e1c:	0758      	lsls	r0, r3, #29
 8005e1e:	d512      	bpl.n	8005e46 <__swsetup_r+0x5a>
 8005e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e22:	b141      	cbz	r1, 8005e36 <__swsetup_r+0x4a>
 8005e24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e28:	4299      	cmp	r1, r3
 8005e2a:	d002      	beq.n	8005e32 <__swsetup_r+0x46>
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 f90d 	bl	800604c <_free_r>
 8005e32:	2300      	movs	r3, #0
 8005e34:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f043 0308 	orr.w	r3, r3, #8
 8005e4c:	81a3      	strh	r3, [r4, #12]
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	b94b      	cbnz	r3, 8005e66 <__swsetup_r+0x7a>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e5c:	d003      	beq.n	8005e66 <__swsetup_r+0x7a>
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 f83f 	bl	8005ee4 <__smakebuf_r>
 8005e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e6a:	f013 0201 	ands.w	r2, r3, #1
 8005e6e:	d00a      	beq.n	8005e86 <__swsetup_r+0x9a>
 8005e70:	2200      	movs	r2, #0
 8005e72:	60a2      	str	r2, [r4, #8]
 8005e74:	6962      	ldr	r2, [r4, #20]
 8005e76:	4252      	negs	r2, r2
 8005e78:	61a2      	str	r2, [r4, #24]
 8005e7a:	6922      	ldr	r2, [r4, #16]
 8005e7c:	b942      	cbnz	r2, 8005e90 <__swsetup_r+0xa4>
 8005e7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e82:	d1c5      	bne.n	8005e10 <__swsetup_r+0x24>
 8005e84:	bd38      	pop	{r3, r4, r5, pc}
 8005e86:	0799      	lsls	r1, r3, #30
 8005e88:	bf58      	it	pl
 8005e8a:	6962      	ldrpl	r2, [r4, #20]
 8005e8c:	60a2      	str	r2, [r4, #8]
 8005e8e:	e7f4      	b.n	8005e7a <__swsetup_r+0x8e>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e7f7      	b.n	8005e84 <__swsetup_r+0x98>
 8005e94:	20000018 	.word	0x20000018

08005e98 <__swhatbuf_r>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	b096      	sub	sp, #88	@ 0x58
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	461e      	mov	r6, r3
 8005ea8:	da0d      	bge.n	8005ec6 <__swhatbuf_r+0x2e>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	bf14      	ite	ne
 8005eb6:	2340      	movne	r3, #64	@ 0x40
 8005eb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	6031      	str	r1, [r6, #0]
 8005ec0:	602b      	str	r3, [r5, #0]
 8005ec2:	b016      	add	sp, #88	@ 0x58
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
 8005ec6:	466a      	mov	r2, sp
 8005ec8:	f000 f858 	bl	8005f7c <_fstat_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	dbec      	blt.n	8005eaa <__swhatbuf_r+0x12>
 8005ed0:	9901      	ldr	r1, [sp, #4]
 8005ed2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ed6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005eda:	4259      	negs	r1, r3
 8005edc:	4159      	adcs	r1, r3
 8005ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ee2:	e7eb      	b.n	8005ebc <__swhatbuf_r+0x24>

08005ee4 <__smakebuf_r>:
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee8:	079d      	lsls	r5, r3, #30
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	d507      	bpl.n	8005f00 <__smakebuf_r+0x1c>
 8005ef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6163      	str	r3, [r4, #20]
 8005efc:	b003      	add	sp, #12
 8005efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f00:	ab01      	add	r3, sp, #4
 8005f02:	466a      	mov	r2, sp
 8005f04:	f7ff ffc8 	bl	8005e98 <__swhatbuf_r>
 8005f08:	9f00      	ldr	r7, [sp, #0]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7ff fc24 	bl	800575c <_malloc_r>
 8005f14:	b948      	cbnz	r0, 8005f2a <__smakebuf_r+0x46>
 8005f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1a:	059a      	lsls	r2, r3, #22
 8005f1c:	d4ee      	bmi.n	8005efc <__smakebuf_r+0x18>
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	f043 0302 	orr.w	r3, r3, #2
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	e7e2      	b.n	8005ef0 <__smakebuf_r+0xc>
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	6020      	str	r0, [r4, #0]
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f3a:	b15b      	cbz	r3, 8005f54 <__smakebuf_r+0x70>
 8005f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 f82d 	bl	8005fa0 <_isatty_r>
 8005f46:	b128      	cbz	r0, 8005f54 <__smakebuf_r+0x70>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	431d      	orrs	r5, r3
 8005f58:	81a5      	strh	r5, [r4, #12]
 8005f5a:	e7cf      	b.n	8005efc <__smakebuf_r+0x18>

08005f5c <_close_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d06      	ldr	r5, [pc, #24]	@ (8005f78 <_close_r+0x1c>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	f7fa ff3b 	bl	8000de2 <_close>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_close_r+0x1a>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_close_r+0x1a>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	20000b60 	.word	0x20000b60

08005f7c <_fstat_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d07      	ldr	r5, [pc, #28]	@ (8005f9c <_fstat_r+0x20>)
 8005f80:	2300      	movs	r3, #0
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	f7fa ff36 	bl	8000dfa <_fstat>
 8005f8e:	1c43      	adds	r3, r0, #1
 8005f90:	d102      	bne.n	8005f98 <_fstat_r+0x1c>
 8005f92:	682b      	ldr	r3, [r5, #0]
 8005f94:	b103      	cbz	r3, 8005f98 <_fstat_r+0x1c>
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000b60 	.word	0x20000b60

08005fa0 <_isatty_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4d06      	ldr	r5, [pc, #24]	@ (8005fbc <_isatty_r+0x1c>)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	f7fa ff35 	bl	8000e1a <_isatty>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_isatty_r+0x1a>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_isatty_r+0x1a>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	20000b60 	.word	0x20000b60

08005fc0 <_lseek_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d07      	ldr	r5, [pc, #28]	@ (8005fe0 <_lseek_r+0x20>)
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	4611      	mov	r1, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	602a      	str	r2, [r5, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f7fa ff2e 	bl	8000e30 <_lseek>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_lseek_r+0x1e>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_lseek_r+0x1e>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20000b60 	.word	0x20000b60

08005fe4 <_read_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d07      	ldr	r5, [pc, #28]	@ (8006004 <_read_r+0x20>)
 8005fe8:	4604      	mov	r4, r0
 8005fea:	4608      	mov	r0, r1
 8005fec:	4611      	mov	r1, r2
 8005fee:	2200      	movs	r2, #0
 8005ff0:	602a      	str	r2, [r5, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f7fa febc 	bl	8000d70 <_read>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_read_r+0x1e>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_read_r+0x1e>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20000b60 	.word	0x20000b60

08006008 <_sbrk_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	@ (8006024 <_sbrk_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fa ff1a 	bl	8000e4c <_sbrk>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_sbrk_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_sbrk_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20000b60 	.word	0x20000b60

08006028 <_write_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d07      	ldr	r5, [pc, #28]	@ (8006048 <_write_r+0x20>)
 800602c:	4604      	mov	r4, r0
 800602e:	4608      	mov	r0, r1
 8006030:	4611      	mov	r1, r2
 8006032:	2200      	movs	r2, #0
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fa feb7 	bl	8000daa <_write>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_write_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_write_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000b60 	.word	0x20000b60

0800604c <_free_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4605      	mov	r5, r0
 8006050:	2900      	cmp	r1, #0
 8006052:	d041      	beq.n	80060d8 <_free_r+0x8c>
 8006054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006058:	1f0c      	subs	r4, r1, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	bfb8      	it	lt
 800605e:	18e4      	addlt	r4, r4, r3
 8006060:	f7ff fe36 	bl	8005cd0 <__malloc_lock>
 8006064:	4a1d      	ldr	r2, [pc, #116]	@ (80060dc <_free_r+0x90>)
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	b933      	cbnz	r3, 8006078 <_free_r+0x2c>
 800606a:	6063      	str	r3, [r4, #4]
 800606c:	6014      	str	r4, [r2, #0]
 800606e:	4628      	mov	r0, r5
 8006070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006074:	f7ff be32 	b.w	8005cdc <__malloc_unlock>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d908      	bls.n	800608e <_free_r+0x42>
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	1821      	adds	r1, r4, r0
 8006080:	428b      	cmp	r3, r1
 8006082:	bf01      	itttt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	1809      	addeq	r1, r1, r0
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	e7ed      	b.n	800606a <_free_r+0x1e>
 800608e:	461a      	mov	r2, r3
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b10b      	cbz	r3, 8006098 <_free_r+0x4c>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d9fa      	bls.n	800608e <_free_r+0x42>
 8006098:	6811      	ldr	r1, [r2, #0]
 800609a:	1850      	adds	r0, r2, r1
 800609c:	42a0      	cmp	r0, r4
 800609e:	d10b      	bne.n	80060b8 <_free_r+0x6c>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	4401      	add	r1, r0
 80060a4:	1850      	adds	r0, r2, r1
 80060a6:	4283      	cmp	r3, r0
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	d1e0      	bne.n	800606e <_free_r+0x22>
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	6053      	str	r3, [r2, #4]
 80060b2:	4408      	add	r0, r1
 80060b4:	6010      	str	r0, [r2, #0]
 80060b6:	e7da      	b.n	800606e <_free_r+0x22>
 80060b8:	d902      	bls.n	80060c0 <_free_r+0x74>
 80060ba:	230c      	movs	r3, #12
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	e7d6      	b.n	800606e <_free_r+0x22>
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	1821      	adds	r1, r4, r0
 80060c4:	428b      	cmp	r3, r1
 80060c6:	bf04      	itt	eq
 80060c8:	6819      	ldreq	r1, [r3, #0]
 80060ca:	685b      	ldreq	r3, [r3, #4]
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	bf04      	itt	eq
 80060d0:	1809      	addeq	r1, r1, r0
 80060d2:	6021      	streq	r1, [r4, #0]
 80060d4:	6054      	str	r4, [r2, #4]
 80060d6:	e7ca      	b.n	800606e <_free_r+0x22>
 80060d8:	bd38      	pop	{r3, r4, r5, pc}
 80060da:	bf00      	nop
 80060dc:	20000b5c 	.word	0x20000b5c

080060e0 <_init>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

080060ec <_fini>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr
