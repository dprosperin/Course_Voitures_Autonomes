
lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d8c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005f6c  08005f6c  00006f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006070  08006070  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006070  08006070  00007070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006078  08006078  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006078  08006078  00007078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800607c  0800607c  0000707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006080  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000068  080060e8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  080060e8  00008530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d7  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ac  00000000  00000000  0001586f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00017920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000875  00000000  00000000  00018430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc9d  00000000  00000000  00018ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d484  00000000  00000000  00036942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b86ac  00000000  00000000  00043dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000351c  00000000  00000000  000fc4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000ff9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005f54 	.word	0x08005f54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005f54 	.word	0x08005f54

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000e04:	1d39      	adds	r1, r7, #4
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <__io_putchar+0x20>)
 8000e0e:	f002 f873 	bl	8002ef8 <HAL_UART_Transmit>
}
 8000e12:	bf00      	nop
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000118 	.word	0x20000118

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	@ 0x30
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fc6a 	bl	80016fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f897 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 f97b 	bl	8001128 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e32:	f000 f92d 	bl	8001090 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e36:	f000 f8dd 	bl	8000ff4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    int i = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t message[40] = "";
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2224      	movs	r2, #36	@ 0x24
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fa29 	bl	80052a0 <memset>
    int a = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_UART_Receive_IT(&LIDAR_HUART, lidar_msg, size_msg);
 8000e52:	2207      	movs	r2, #7
 8000e54:	4938      	ldr	r1, [pc, #224]	@ (8000f38 <main+0x118>)
 8000e56:	4839      	ldr	r0, [pc, #228]	@ (8000f3c <main+0x11c>)
 8000e58:	f002 f8dc 	bl	8003014 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1); // A laisser proche de la boucle while(1)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4938      	ldr	r1, [pc, #224]	@ (8000f40 <main+0x120>)
 8000e60:	4838      	ldr	r0, [pc, #224]	@ (8000f44 <main+0x124>)
 8000e62:	f002 f8d7 	bl	8003014 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_reception_uart2 == 1) {
 8000e66:	4b38      	ldr	r3, [pc, #224]	@ (8000f48 <main+0x128>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d131      	bne.n	8000ed2 <main+0xb2>
	  		  if (caractere == '\n') {
 8000e6e:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <main+0x120>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b0a      	cmp	r3, #10
 8000e74:	d11c      	bne.n	8000eb0 <main+0x90>
	  			  HAL_UART_Transmit(&PC_HUART, message, strlen(message), HAL_MAX_DELAY);
 8000e76:	463b      	mov	r3, r7
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff f9d1 	bl	8000220 <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4639      	mov	r1, r7
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e88:	482e      	ldr	r0, [pc, #184]	@ (8000f44 <main+0x124>)
 8000e8a:	f002 f835 	bl	8002ef8 <HAL_UART_Transmit>
	  			  HAL_UART_Transmit(&LIDAR_HUART, message, strlen(message), HAL_MAX_DELAY);
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff f9c5 	bl	8000220 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4639      	mov	r1, r7
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ea0:	4826      	ldr	r0, [pc, #152]	@ (8000f3c <main+0x11c>)
 8000ea2:	f002 f829 	bl	8002ef8 <HAL_UART_Transmit>
	  			  //printf("%s", message);

	  			  message[0] = "\0";
 8000ea6:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <main+0x12c>)
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	703b      	strb	r3, [r7, #0]
	  			  i = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  		  }

	  		  message[i++] = caractere;
 8000eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000eb6:	4a22      	ldr	r2, [pc, #136]	@ (8000f40 <main+0x120>)
 8000eb8:	7812      	ldrb	r2, [r2, #0]
 8000eba:	3330      	adds	r3, #48	@ 0x30
 8000ebc:	443b      	add	r3, r7
 8000ebe:	f803 2c30 	strb.w	r2, [r3, #-48]
	  		  flag_reception_uart2 = 0;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <main+0x128>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]

	  		  HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	491d      	ldr	r1, [pc, #116]	@ (8000f40 <main+0x120>)
 8000ecc:	481d      	ldr	r0, [pc, #116]	@ (8000f44 <main+0x124>)
 8000ece:	f002 f8a1 	bl	8003014 <HAL_UART_Receive_IT>

	  	  }


	  if (flag_reception_uart1 == 1  && a < number_point) {
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <main+0x130>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d124      	bne.n	8000f24 <main+0x104>
 8000eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000edc:	2b31      	cmp	r3, #49	@ 0x31
 8000ede:	dc21      	bgt.n	8000f24 <main+0x104>
	  	  		  flag_reception_uart1 = 0;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <main+0x130>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
	  	  		  HAL_UART_Receive_IT(&huart1, lidar_msg[a], size_msg);
 8000ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <main+0x118>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <main+0x11c>)
 8000ef8:	f002 f88c 	bl	8003014 <HAL_UART_Receive_IT>
	  	  		  distance[a] = lidar_distance(lidar_msg[a]);
 8000efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	4a0c      	ldr	r2, [pc, #48]	@ (8000f38 <main+0x118>)
 8000f06:	4413      	add	r3, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f977 	bl	80011fc <lidar_distance>
 8000f0e:	eef0 7a40 	vmov.f32	s15, s0
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <main+0x134>)
 8000f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
	  	  		  a++;
 8000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f20:	3301      	adds	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
	  }


	  if (number_point == a) {
 8000f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f26:	2b32      	cmp	r3, #50	@ 0x32
 8000f28:	d19d      	bne.n	8000e66 <main+0x46>
		  lidar_send_stop();
 8000f2a:	f000 f991 	bl	8001250 <lidar_send_stop>
		  printf("Fin capture");
 8000f2e:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <main+0x138>)
 8000f30:	f004 f946 	bl	80051c0 <iprintf>
	  if (flag_reception_uart2 == 1) {
 8000f34:	e797      	b.n	8000e66 <main+0x46>
 8000f36:	bf00      	nop
 8000f38:	200001b0 	.word	0x200001b0
 8000f3c:	20000084 	.word	0x20000084
 8000f40:	200003d8 	.word	0x200003d8
 8000f44:	20000118 	.word	0x20000118
 8000f48:	200001ac 	.word	0x200001ac
 8000f4c:	08005f6c 	.word	0x08005f6c
 8000f50:	200001ad 	.word	0x200001ad
 8000f54:	20000310 	.word	0x20000310
 8000f58:	08005f70 	.word	0x08005f70

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	@ 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	2238      	movs	r2, #56	@ 0x38
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 f998 	bl	80052a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 ff98 	bl	8001eb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8e:	2340      	movs	r3, #64	@ 0x40
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f9e:	2355      	movs	r3, #85	@ 0x55
 8000fa0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f832 	bl	800201c <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fbe:	f000 f9a9 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fb30 	bl	8002640 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 f995 	bl	8001314 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	@ 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8000ffa:	4a23      	ldr	r2, [pc, #140]	@ (8001088 <MX_USART1_UART_Init+0x94>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001000:	4a22      	ldr	r2, [pc, #136]	@ (800108c <MX_USART1_UART_Init+0x98>)
 8001002:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001016:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001018:	220c      	movs	r2, #12
 800101a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001034:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103a:	4812      	ldr	r0, [pc, #72]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 800103c:	f001 ff0c 	bl	8002e58 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001046:	f000 f965 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104a:	2100      	movs	r1, #0
 800104c:	480d      	ldr	r0, [pc, #52]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 800104e:	f003 ff2a 	bl	8004ea6 <HAL_UARTEx_SetTxFifoThreshold>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001058:	f000 f95c 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105c:	2100      	movs	r1, #0
 800105e:	4809      	ldr	r0, [pc, #36]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001060:	f003 ff5f 	bl	8004f22 <HAL_UARTEx_SetRxFifoThreshold>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800106a:	f000 f953 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_USART1_UART_Init+0x90>)
 8001070:	f003 fee0 	bl	8004e34 <HAL_UARTEx_DisableFifoMode>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800107a:	f000 f94b 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000084 	.word	0x20000084
 8001088:	40013800 	.word	0x40013800
 800108c:	000f4240 	.word	0x000f4240

08001090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 8001096:	4a23      	ldr	r2, [pc, #140]	@ (8001124 <MX_USART2_UART_Init+0x94>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d8:	4811      	ldr	r0, [pc, #68]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010da:	f001 febd 	bl	8002e58 <HAL_UART_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010e4:	f000 f916 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	480d      	ldr	r0, [pc, #52]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010ec:	f003 fedb 	bl	8004ea6 <HAL_UARTEx_SetTxFifoThreshold>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010f6:	f000 f90d 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4808      	ldr	r0, [pc, #32]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 80010fe:	f003 ff10 	bl	8004f22 <HAL_UARTEx_SetRxFifoThreshold>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001108:	f000 f904 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_USART2_UART_Init+0x90>)
 800110e:	f003 fe91 	bl	8004e34 <HAL_UARTEx_DisableFifoMode>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001118:	f000 f8fc 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000118 	.word	0x20000118
 8001124:	40004400 	.word	0x40004400

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <MX_GPIO_Init+0x78>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <MX_GPIO_Init+0x78>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <MX_GPIO_Init+0x78>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <MX_GPIO_Init+0x78>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a11      	ldr	r2, [pc, #68]	@ (80011a0 <MX_GPIO_Init+0x78>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <MX_GPIO_Init+0x78>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001174:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <MX_GPIO_Init+0x7c>)
 8001176:	f000 fe85 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800117a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_GPIO_Init+0x7c>)
 8001194:	f000 fcf4 	bl	8001b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000400 	.word	0x48000400

080011a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <HAL_UART_RxCpltCallback+0x3c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d107      	bne.n	80011ca <HAL_UART_RxCpltCallback+0x22>
		flag_reception_uart2 = 1;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_UART_RxCpltCallback+0x40>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
		/*
		 * Relancer la réception dans l'interruption
	     */
		HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	490a      	ldr	r1, [pc, #40]	@ (80011ec <HAL_UART_RxCpltCallback+0x44>)
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <HAL_UART_RxCpltCallback+0x48>)
 80011c6:	f001 ff25 	bl	8003014 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART1) {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a09      	ldr	r2, [pc, #36]	@ (80011f4 <HAL_UART_RxCpltCallback+0x4c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d102      	bne.n	80011da <HAL_UART_RxCpltCallback+0x32>
		flag_reception_uart1 = 1;
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_UART_RxCpltCallback+0x50>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
	}
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40004400 	.word	0x40004400
 80011e8:	200001ac 	.word	0x200001ac
 80011ec:	200003d8 	.word	0x200003d8
 80011f0:	20000118 	.word	0x20000118
 80011f4:	40013800 	.word	0x40013800
 80011f8:	200001ad 	.word	0x200001ad

080011fc <lidar_distance>:


float lidar_distance(uint8_t trame[7]) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
   /**
	 * @brief Calcule la distance mesurée d'un point en mm
	 * @param la trame UART reçu
	 * @retval La distance entre le LIDAR et le point en mm
	 */
	uint16_t distance = (((uint16_t) trame[6] << 8) & 0xFF00) | (uint16_t) trame[5]; // TODO : A finir
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3306      	adds	r3, #6
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3305      	adds	r3, #5
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21b      	sxth	r3, r3
 800121a:	81fb      	strh	r3, [r7, #14]
	return distance / 4.0;
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9a8 	bl	8000574 <__aeabi_i2d>
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <lidar_distance+0x50>)
 800122a:	f7ff fb37 	bl	800089c <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc19 	bl	8000a6c <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	ee07 3a90 	vmov	s15, r3
}
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40100000 	.word	0x40100000

08001250 <lidar_send_stop>:
	}

}


void lidar_send_stop() {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
   /**
	 * @brief Envoi la commande d'arrêt de SCAN
	 * @retval void
	 */
	char command_stop[3] = "\xA5\x25";
 8001256:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <lidar_send_stop+0x38>)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	4611      	mov	r1, r2
 800125e:	8019      	strh	r1, [r3, #0]
 8001260:	3302      	adds	r3, #2
 8001262:	0c12      	lsrs	r2, r2, #16
 8001264:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, command_stop, strlen(command_stop), HAL_MAX_DELAY);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ffd9 	bl	8000220 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	1d39      	adds	r1, r7, #4
 8001274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001278:	4804      	ldr	r0, [pc, #16]	@ (800128c <lidar_send_stop+0x3c>)
 800127a:	f001 fe3d 	bl	8002ef8 <HAL_UART_Transmit>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08005f7c 	.word	0x08005f7c
 800128c:	20000084 	.word	0x20000084

08001290 <HAL_UART_ErrorCallback>:
	 */
	char command_get_info[3] = "\xA5\x50";
	HAL_UART_Transmit(&huart1, command_get_info, strlen(command_get_info), HAL_MAX_DELAY);
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <HAL_UART_ErrorCallback+0x1c>
        // Gestion de l'erreur de framing
        printf("Erreur de framing detectee.\n");
 80012a6:	4815      	ldr	r0, [pc, #84]	@ (80012fc <HAL_UART_ErrorCallback+0x6c>)
 80012a8:	f003 fff2 	bl	8005290 <puts>
    }
    if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <HAL_UART_ErrorCallback+0x30>
        // Gestion de l'erreur d'overrun
        printf("Erreur d'overrun detectee.\n");
 80012ba:	4811      	ldr	r0, [pc, #68]	@ (8001300 <HAL_UART_ErrorCallback+0x70>)
 80012bc:	f003 ffe8 	bl	8005290 <puts>
    }
    if (huart->ErrorCode & HAL_UART_ERROR_PE) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_UART_ErrorCallback+0x44>
        // Gestion de l'erreur de parité
        printf("Erreur de parité detectee.\n");
 80012ce:	480d      	ldr	r0, [pc, #52]	@ (8001304 <HAL_UART_ErrorCallback+0x74>)
 80012d0:	f003 ffde 	bl	8005290 <puts>
    }
    if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HAL_UART_ErrorCallback+0x58>
        // Gestion de l'erreur bruit
        printf("Erreur de bruit detectee.\n");
 80012e2:	4809      	ldr	r0, [pc, #36]	@ (8001308 <HAL_UART_ErrorCallback+0x78>)
 80012e4:	f003 ffd4 	bl	8005290 <puts>
    }
    // Réinitialise la réception pour continuer la communication
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <HAL_UART_ErrorCallback+0x7c>)
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <HAL_UART_ErrorCallback+0x80>)
 80012ee:	f001 fe91 	bl	8003014 <HAL_UART_Receive_IT>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	08005f8c 	.word	0x08005f8c
 8001300:	08005fa8 	.word	0x08005fa8
 8001304:	08005fc4 	.word	0x08005fc4
 8001308:	08005fe0 	.word	0x08005fe0
 800130c:	200003d8 	.word	0x200003d8
 8001310:	20000118 	.word	0x20000118

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <Error_Handler+0x8>

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <HAL_MspInit+0x44>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132a:	4a0e      	ldr	r2, [pc, #56]	@ (8001364 <HAL_MspInit+0x44>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6613      	str	r3, [r2, #96]	@ 0x60
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <HAL_MspInit+0x44>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_MspInit+0x44>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <HAL_MspInit+0x44>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001348:	6593      	str	r3, [r2, #88]	@ 0x58
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_MspInit+0x44>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001356:	f000 fe51 	bl	8001ffc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b09c      	sub	sp, #112	@ 0x70
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	2244      	movs	r2, #68	@ 0x44
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f003 ff89 	bl	80052a0 <memset>
  if(huart->Instance==USART1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a46      	ldr	r2, [pc, #280]	@ (80014ac <HAL_UART_MspInit+0x144>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d140      	bne.n	800141a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 fb67 	bl	8002a78 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013b0:	f7ff ffb0 	bl	8001314 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b4:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b8:	4a3d      	ldr	r2, [pc, #244]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013be:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c0:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	4a37      	ldr	r2, [pc, #220]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f6:	2307      	movs	r3, #7
 80013f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013fe:	4619      	mov	r1, r3
 8001400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001404:	f000 fbbc 	bl	8001b80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2025      	movs	r0, #37	@ 0x25
 800140e:	f000 fac2 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001412:	2025      	movs	r0, #37	@ 0x25
 8001414:	f000 fad9 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001418:	e043      	b.n	80014a2 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a25      	ldr	r2, [pc, #148]	@ (80014b4 <HAL_UART_MspInit+0x14c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d13e      	bne.n	80014a2 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142c:	f107 0318 	add.w	r3, r7, #24
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fb21 	bl	8002a78 <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800143c:	f7ff ff6a 	bl	8001314 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	4a1a      	ldr	r2, [pc, #104]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144a:	6593      	str	r3, [r2, #88]	@ 0x58
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_UART_MspInit+0x148>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001470:	230c      	movs	r3, #12
 8001472:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001480:	2307      	movs	r3, #7
 8001482:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148e:	f000 fb77 	bl	8001b80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2026      	movs	r0, #38	@ 0x26
 8001498:	f000 fa7d 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149c:	2026      	movs	r0, #38	@ 0x26
 800149e:	f000 fa94 	bl	80019ca <HAL_NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3770      	adds	r7, #112	@ 0x70
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40004400 	.word	0x40004400

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <NMI_Handler+0x4>

080014c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <MemManage_Handler+0x4>

080014d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <UsageFault_Handler+0x4>

080014e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150e:	f000 f949 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <USART1_IRQHandler+0x10>)
 800151e:	f001 fdc5 	bl	80030ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000084 	.word	0x20000084

0800152c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <USART2_IRQHandler+0x10>)
 8001532:	f001 fdbb 	bl	80030ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000118 	.word	0x20000118

08001540 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e00a      	b.n	8001568 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001552:	f3af 8000 	nop.w
 8001556:	4601      	mov	r1, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf0      	blt.n	8001552 <_read+0x12>
  }

  return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e009      	b.n	80015a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fc31 	bl	8000dfc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf1      	blt.n	800158c <_write+0x12>
  }
  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_close>:

int _close(int file)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015da:	605a      	str	r2, [r3, #4]
  return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_isatty>:

int _isatty(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f003 fe30 	bl	80052b0 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20008000 	.word	0x20008000
 800167c:	00000400 	.word	0x00000400
 8001680:	200003dc 	.word	0x200003dc
 8001684:	20000530 	.word	0x20000530

08001688 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016ac:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff ffea 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	@ (80016ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <LoopForever+0xe>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	@ (80016f8 <LoopForever+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80016da:	f003 fdef 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016de:	f7ff fb9f 	bl	8000e20 <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   r0, =_estack
 80016e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016f0:	08006080 	.word	0x08006080
  ldr r2, =_sbss
 80016f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016f8:	20000530 	.word	0x20000530

080016fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_2_IRQHandler>

080016fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f939 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f80e 	bl	8001730 <HAL_InitTick>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	e001      	b.n	8001724 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001720:	f7ff fdfe 	bl	8001320 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001724:	79fb      	ldrb	r3, [r7, #7]

}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800173c:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_InitTick+0x68>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d022      	beq.n	800178a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001744:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_InitTick+0x6c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <HAL_InitTick+0x68>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001750:	fbb1 f3f3 	udiv	r3, r1, r3
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f944 	bl	80019e6 <HAL_SYSTICK_Config>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10f      	bne.n	8001784 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	d809      	bhi.n	800177e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176a:	2200      	movs	r2, #0
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001772:	f000 f910 	bl	8001996 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_InitTick+0x70>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e007      	b.n	800178e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e004      	b.n	800178e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e001      	b.n	800178e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000008 	.word	0x20000008
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_IncTick+0x1c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_IncTick+0x20>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a03      	ldr	r2, [pc, #12]	@ (80017c0 <HAL_IncTick+0x1c>)
 80017b4:	6013      	str	r3, [r2, #0]
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	200003e0 	.word	0x200003e0
 80017c4:	20000008 	.word	0x20000008

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200003e0 	.word	0x200003e0

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4907      	ldr	r1, [pc, #28]	@ (800187c <__NVIC_EnableIRQ+0x38>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	@ (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	@ (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	@ 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001960:	f7ff ff8e 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	@ (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff29 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff40 	bl	8001828 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff90 	bl	80018d4 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5f 	bl	8001880 <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff33 	bl	8001844 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa4 	bl	800193c <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d005      	beq.n	8001a22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e037      	b.n	8001a92 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 020e 	bic.w	r2, r2, #14
 8001a30:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a40:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f003 021f 	and.w	r2, r3, #31
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a6e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00c      	beq.n	8001a92 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a86:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a90:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2204      	movs	r2, #4
 8001acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	e047      	b.n	8001b74 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 020e 	bic.w	r2, r2, #14
 8001af2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00c      	beq.n	8001b54 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
    }
  }
  return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b8e:	e15a      	b.n	8001e46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 814c 	beq.w	8001e40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d017      	beq.n	8001c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d123      	bne.n	8001cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	6939      	ldr	r1, [r7, #16]
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80a6 	beq.w	8001e40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e64 <HAL_GPIO_Init+0x2e4>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8001e64 <HAL_GPIO_Init+0x2e4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d00:	4b58      	ldr	r3, [pc, #352]	@ (8001e64 <HAL_GPIO_Init+0x2e4>)
 8001d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0c:	4a56      	ldr	r2, [pc, #344]	@ (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d36:	d01f      	beq.n	8001d78 <HAL_GPIO_Init+0x1f8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e6c <HAL_GPIO_Init+0x2ec>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d019      	beq.n	8001d74 <HAL_GPIO_Init+0x1f4>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a4b      	ldr	r2, [pc, #300]	@ (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_GPIO_Init+0x1f0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e74 <HAL_GPIO_Init+0x2f4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00d      	beq.n	8001d6c <HAL_GPIO_Init+0x1ec>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a49      	ldr	r2, [pc, #292]	@ (8001e78 <HAL_GPIO_Init+0x2f8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_Init+0x1e8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a48      	ldr	r2, [pc, #288]	@ (8001e7c <HAL_GPIO_Init+0x2fc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_GPIO_Init+0x1e4>
 8001d60:	2305      	movs	r3, #5
 8001d62:	e00a      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e008      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d68:	2304      	movs	r3, #4
 8001d6a:	e006      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e004      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	f002 0203 	and.w	r2, r2, #3
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	4093      	lsls	r3, r2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d8a:	4937      	ldr	r1, [pc, #220]	@ (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d98:	4b39      	ldr	r3, [pc, #228]	@ (8001e80 <HAL_GPIO_Init+0x300>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dbc:	4a30      	ldr	r2, [pc, #192]	@ (8001e80 <HAL_GPIO_Init+0x300>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e80 <HAL_GPIO_Init+0x300>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de6:	4a26      	ldr	r2, [pc, #152]	@ (8001e80 <HAL_GPIO_Init+0x300>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <HAL_GPIO_Init+0x300>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e10:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_GPIO_Init+0x300>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <HAL_GPIO_Init+0x300>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e3a:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_GPIO_Init+0x300>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3301      	adds	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f47f ae9d 	bne.w	8001b90 <HAL_GPIO_Init+0x10>
  }
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	48000400 	.word	0x48000400
 8001e70:	48000800 	.word	0x48000800
 8001e74:	48000c00 	.word	0x48000c00
 8001e78:	48001000 	.word	0x48001000
 8001e7c:	48001400 	.word	0x48001400
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d141      	bne.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d131      	bne.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed0:	4b47      	ldr	r3, [pc, #284]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed6:	4a46      	ldr	r2, [pc, #280]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee0:	4b43      	ldr	r3, [pc, #268]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ee8:	4a41      	ldr	r2, [pc, #260]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ef0:	4b40      	ldr	r3, [pc, #256]	@ (8001ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2232      	movs	r2, #50	@ 0x32
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	0c9b      	lsrs	r3, r3, #18
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f06:	e002      	b.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0e:	4b38      	ldr	r3, [pc, #224]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1a:	d102      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f2      	bne.n	8001f08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f22:	4b33      	ldr	r3, [pc, #204]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2e:	d158      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e057      	b.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f44:	e04d      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f4c:	d141      	bne.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f5a:	d131      	bne.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f62:	4a23      	ldr	r2, [pc, #140]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f74:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2232      	movs	r2, #50	@ 0x32
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	0c9b      	lsrs	r3, r3, #18
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f92:	e002      	b.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa6:	d102      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f2      	bne.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fba:	d112      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e011      	b.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fd0:	e007      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200a:	6093      	str	r3, [r2, #8]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40007000 	.word	0x40007000

0800201c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e2fe      	b.n	800262c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d075      	beq.n	8002126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4b97      	ldr	r3, [pc, #604]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002044:	4b94      	ldr	r3, [pc, #592]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d102      	bne.n	800205a <HAL_RCC_OscConfig+0x3e>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d002      	beq.n	8002060 <HAL_RCC_OscConfig+0x44>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4b8d      	ldr	r3, [pc, #564]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d05b      	beq.n	8002124 <HAL_RCC_OscConfig+0x108>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d157      	bne.n	8002124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e2d9      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x74>
 8002082:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a84      	ldr	r2, [pc, #528]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x98>
 800209a:	4b7f      	ldr	r3, [pc, #508]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7e      	ldr	r2, [pc, #504]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 80020b4:	4b78      	ldr	r3, [pc, #480]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a77      	ldr	r2, [pc, #476]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a74      	ldr	r2, [pc, #464]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fb78 	bl	80017c8 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fb74 	bl	80017c8 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e29e      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xc0>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff fb64 	bl	80017c8 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fb60 	bl	80017c8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	@ 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e28a      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0xe8>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d075      	beq.n	800221e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	4b56      	ldr	r3, [pc, #344]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	d102      	bne.n	8002152 <HAL_RCC_OscConfig+0x136>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d002      	beq.n	8002158 <HAL_RCC_OscConfig+0x13c>
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d11f      	bne.n	8002198 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002158:	4b4f      	ldr	r3, [pc, #316]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_OscConfig+0x154>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e25d      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b49      	ldr	r3, [pc, #292]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	061b      	lsls	r3, r3, #24
 800217e:	4946      	ldr	r1, [pc, #280]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002184:	4b45      	ldr	r3, [pc, #276]	@ (800229c <HAL_RCC_OscConfig+0x280>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fad1 	bl	8001730 <HAL_InitTick>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d043      	beq.n	800221c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e249      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fb0c 	bl	80017c8 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff fb08 	bl	80017c8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e232      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c6:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	061b      	lsls	r3, r3, #24
 80021e0:	492d      	ldr	r1, [pc, #180]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
 80021e6:	e01a      	b.n	800221e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff fae8 	bl	80017c8 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7ff fae4 	bl	80017c8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e20e      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1e0>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d041      	beq.n	80022ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01c      	beq.n	800226c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002238:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7ff fac1 	bl	80017c8 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224a:	f7ff fabd 	bl	80017c8 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1e7      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ef      	beq.n	800224a <HAL_RCC_OscConfig+0x22e>
 800226a:	e020      	b.n	80022ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002272:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff faa4 	bl	80017c8 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002282:	e00d      	b.n	80022a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff faa0 	bl	80017c8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d906      	bls.n	80022a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1ca      	b.n	800262c <HAL_RCC_OscConfig+0x610>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a0:	4b8c      	ldr	r3, [pc, #560]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ea      	bne.n	8002284 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80a6 	beq.w	8002408 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022c0:	4b84      	ldr	r3, [pc, #528]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2b4>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x2b6>
 80022d0:	2300      	movs	r3, #0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	4b7f      	ldr	r3, [pc, #508]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	4a7e      	ldr	r2, [pc, #504]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e2:	4b7c      	ldr	r3, [pc, #496]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ee:	2301      	movs	r3, #1
 80022f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f2:	4b79      	ldr	r3, [pc, #484]	@ (80024d8 <HAL_RCC_OscConfig+0x4bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d118      	bne.n	8002330 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022fe:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCC_OscConfig+0x4bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a75      	ldr	r2, [pc, #468]	@ (80024d8 <HAL_RCC_OscConfig+0x4bc>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7ff fa5d 	bl	80017c8 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7ff fa59 	bl	80017c8 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e183      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002324:	4b6c      	ldr	r3, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x4bc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d108      	bne.n	800234a <HAL_RCC_OscConfig+0x32e>
 8002338:	4b66      	ldr	r3, [pc, #408]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233e:	4a65      	ldr	r2, [pc, #404]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002348:	e024      	b.n	8002394 <HAL_RCC_OscConfig+0x378>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b05      	cmp	r3, #5
 8002350:	d110      	bne.n	8002374 <HAL_RCC_OscConfig+0x358>
 8002352:	4b60      	ldr	r3, [pc, #384]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002358:	4a5e      	ldr	r2, [pc, #376]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002362:	4b5c      	ldr	r3, [pc, #368]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002368:	4a5a      	ldr	r2, [pc, #360]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002372:	e00f      	b.n	8002394 <HAL_RCC_OscConfig+0x378>
 8002374:	4b57      	ldr	r3, [pc, #348]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237a:	4a56      	ldr	r2, [pc, #344]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002384:	4b53      	ldr	r3, [pc, #332]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238a:	4a52      	ldr	r2, [pc, #328]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d016      	beq.n	80023ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7ff fa14 	bl	80017c8 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7ff fa10 	bl	80017c8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e138      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ba:	4b46      	ldr	r3, [pc, #280]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ed      	beq.n	80023a4 <HAL_RCC_OscConfig+0x388>
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7ff f9fd 	bl	80017c8 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff f9f9 	bl	80017c8 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e121      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e8:	4b3a      	ldr	r3, [pc, #232]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ed      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	4b35      	ldr	r3, [pc, #212]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	4a34      	ldr	r2, [pc, #208]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002406:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03c      	beq.n	800248e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01c      	beq.n	8002456 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800241c:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002422:	4a2c      	ldr	r2, [pc, #176]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7ff f9cc 	bl	80017c8 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002434:	f7ff f9c8 	bl	80017c8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0f2      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002446:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002448:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ef      	beq.n	8002434 <HAL_RCC_OscConfig+0x418>
 8002454:	e01b      	b.n	800248e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002456:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002458:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7ff f9af 	bl	80017c8 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246e:	f7ff f9ab 	bl	80017c8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0d5      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002480:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80c9 	beq.w	800262a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002498:	4b0e      	ldr	r3, [pc, #56]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	f000 8083 	beq.w	80025ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d15e      	bne.n	800256c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80024b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7ff f985 	bl	80017c8 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c0:	e00c      	b.n	80024dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7ff f981 	bl	80017c8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d905      	bls.n	80024dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0ab      	b.n	800262c <HAL_RCC_OscConfig+0x610>
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024dc:	4b55      	ldr	r3, [pc, #340]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ec      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e8:	4b52      	ldr	r3, [pc, #328]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4b52      	ldr	r3, [pc, #328]	@ (8002638 <HAL_RCC_OscConfig+0x61c>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6a11      	ldr	r1, [r2, #32]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024f8:	3a01      	subs	r2, #1
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	4311      	orrs	r1, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002502:	0212      	lsls	r2, r2, #8
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800250a:	0852      	lsrs	r2, r2, #1
 800250c:	3a01      	subs	r2, #1
 800250e:	0552      	lsls	r2, r2, #21
 8002510:	4311      	orrs	r1, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002516:	0852      	lsrs	r2, r2, #1
 8002518:	3a01      	subs	r2, #1
 800251a:	0652      	lsls	r2, r2, #25
 800251c:	4311      	orrs	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002522:	06d2      	lsls	r2, r2, #27
 8002524:	430a      	orrs	r2, r1
 8002526:	4943      	ldr	r1, [pc, #268]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002528:	4313      	orrs	r3, r2
 800252a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b41      	ldr	r3, [pc, #260]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a40      	ldr	r2, [pc, #256]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002538:	4b3e      	ldr	r3, [pc, #248]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a3d      	ldr	r2, [pc, #244]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002542:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff f940 	bl	80017c8 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f93c 	bl	80017c8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e066      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b35      	ldr	r3, [pc, #212]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x530>
 800256a:	e05e      	b.n	800262a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a30      	ldr	r2, [pc, #192]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7ff f926 	bl	80017c8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff f922 	bl	80017c8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e04c      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002592:	4b28      	ldr	r3, [pc, #160]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800259e:	4b25      	ldr	r3, [pc, #148]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	4924      	ldr	r1, [pc, #144]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <HAL_RCC_OscConfig+0x620>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	60cb      	str	r3, [r1, #12]
 80025aa:	e03e      	b.n	800262a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e039      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d12c      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	3b01      	subs	r3, #1
 80025d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d123      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d11b      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d113      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d109      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	019f800c 	.word	0x019f800c
 800263c:	feeefffc 	.word	0xfeeefffc

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e11e      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b91      	ldr	r3, [pc, #580]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b8e      	ldr	r3, [pc, #568]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	498c      	ldr	r1, [pc, #560]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b8a      	ldr	r3, [pc, #552]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e106      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d073      	beq.n	800277c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d129      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269c:	4b81      	ldr	r3, [pc, #516]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0f4      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026ac:	f000 f99e 	bl	80029ec <RCC_GetSysClockFreqFromPLLSource>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4a7c      	ldr	r2, [pc, #496]	@ (80028a8 <HAL_RCC_ClockConfig+0x268>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d93f      	bls.n	800273a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ba:	4b7a      	ldr	r3, [pc, #488]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d033      	beq.n	800273a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d12f      	bne.n	800273a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026da:	4b72      	ldr	r3, [pc, #456]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026e2:	4a70      	ldr	r2, [pc, #448]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e024      	b.n	800273a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f8:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0c6      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002708:	4b66      	ldr	r3, [pc, #408]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0be      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002718:	f000 f8ce 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800271c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4a61      	ldr	r2, [pc, #388]	@ (80028a8 <HAL_RCC_ClockConfig+0x268>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d909      	bls.n	800273a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002726:	4b5f      	ldr	r3, [pc, #380]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800272e:	4a5d      	ldr	r2, [pc, #372]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002734:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b5a      	ldr	r3, [pc, #360]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4957      	ldr	r1, [pc, #348]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7ff f83c 	bl	80017c8 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff f838 	bl	80017c8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e095      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b4e      	ldr	r3, [pc, #312]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d023      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a42      	ldr	r2, [pc, #264]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800279a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800279e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027ac:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027b4:	4a3b      	ldr	r2, [pc, #236]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b39      	ldr	r3, [pc, #228]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4936      	ldr	r1, [pc, #216]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027d6:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4a32      	ldr	r2, [pc, #200]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e2:	4b2f      	ldr	r3, [pc, #188]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d21d      	bcs.n	800282c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f0:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 020f 	bic.w	r2, r3, #15
 80027f8:	4929      	ldr	r1, [pc, #164]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002800:	f7fe ffe2 	bl	80017c8 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe ffde 	bl	80017c8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e03b      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d1ed      	bne.n	8002808 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4917      	ldr	r1, [pc, #92]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490f      	ldr	r1, [pc, #60]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286a:	f000 f825 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490c      	ldr	r1, [pc, #48]	@ (80028ac <HAL_RCC_ClockConfig+0x26c>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	fa22 f303 	lsr.w	r3, r2, r3
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <HAL_RCC_ClockConfig+0x270>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800288a:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <HAL_RCC_ClockConfig+0x274>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe ff4e 	bl	8001730 <HAL_InitTick>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	04c4b400 	.word	0x04c4b400
 80028ac:	08005ffc 	.word	0x08005ffc
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028be:	4b2c      	ldr	r3, [pc, #176]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e047      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028d0:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028dc:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e03e      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028e2:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d136      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3301      	adds	r3, #1
 8002904:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290c:	4a1a      	ldr	r2, [pc, #104]	@ (8002978 <HAL_RCC_GetSysClockFreq+0xc0>)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	4a16      	ldr	r2, [pc, #88]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002916:	68d2      	ldr	r2, [r2, #12]
 8002918:	0a12      	lsrs	r2, r2, #8
 800291a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
      break;
 8002924:	e00c      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002926:	4a13      	ldr	r2, [pc, #76]	@ (8002974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4a10      	ldr	r2, [pc, #64]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	0a12      	lsrs	r2, r2, #8
 8002934:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
      break;
 800293e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0e5b      	lsrs	r3, r3, #25
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	e001      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002960:	693b      	ldr	r3, [r7, #16]
}
 8002962:	4618      	mov	r0, r3
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	00f42400 	.word	0x00f42400
 8002978:	007a1200 	.word	0x007a1200

0800297c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_RCC_GetHCLKFreq+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000000 	.word	0x20000000

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002998:	f7ff fff0 	bl	800297c <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	@ (80029bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	0800600c 	.word	0x0800600c

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029c4:	f7ff ffda 	bl	800297c <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0adb      	lsrs	r3, r3, #11
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4904      	ldr	r1, [pc, #16]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	0800600c 	.word	0x0800600c

080029ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029f2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d10c      	bne.n	8002a2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a10:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	4a14      	ldr	r2, [pc, #80]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a1a:	68d2      	ldr	r2, [r2, #12]
 8002a1c:	0a12      	lsrs	r2, r2, #8
 8002a1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
    break;
 8002a28:	e00c      	b.n	8002a44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a2a:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4a0e      	ldr	r2, [pc, #56]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	0a12      	lsrs	r2, r2, #8
 8002a38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    break;
 8002a42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0e5b      	lsrs	r3, r3, #25
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a5e:	687b      	ldr	r3, [r7, #4]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	00f42400 	.word	0x00f42400

08002a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a80:	2300      	movs	r3, #0
 8002a82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a84:	2300      	movs	r3, #0
 8002a86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8098 	beq.w	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a39      	ldr	r2, [pc, #228]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fe7b 	bl	80017c8 <HAL_GetTick>
 8002ad2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad4:	e009      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe fe77 	bl	80017c8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d902      	bls.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ae8:	e005      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aea:	4b30      	ldr	r3, [pc, #192]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0ef      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d159      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002afc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01e      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d019      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b18:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b24:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b44:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fe37 	bl	80017c8 <HAL_GetTick>
 8002b5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fe33 	bl	80017c8 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d902      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	74fb      	strb	r3, [r7, #19]
            break;
 8002b74:	e006      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ec      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	4903      	ldr	r1, [pc, #12]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	74bb      	strb	r3, [r7, #18]
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb4:	7c7b      	ldrb	r3, [r7, #17]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4ba6      	ldr	r3, [pc, #664]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	4aa5      	ldr	r2, [pc, #660]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd2:	4ba0      	ldr	r3, [pc, #640]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd8:	f023 0203 	bic.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	499c      	ldr	r1, [pc, #624]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf4:	4b97      	ldr	r3, [pc, #604]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfa:	f023 020c 	bic.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4994      	ldr	r1, [pc, #592]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c16:	4b8f      	ldr	r3, [pc, #572]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	498b      	ldr	r1, [pc, #556]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c38:	4b86      	ldr	r3, [pc, #536]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	4983      	ldr	r1, [pc, #524]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c5a:	4b7e      	ldr	r3, [pc, #504]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	497a      	ldr	r1, [pc, #488]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7c:	4b75      	ldr	r3, [pc, #468]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4972      	ldr	r1, [pc, #456]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4969      	ldr	r1, [pc, #420]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc0:	4b64      	ldr	r3, [pc, #400]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4961      	ldr	r1, [pc, #388]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	4958      	ldr	r1, [pc, #352]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d04:	4b53      	ldr	r3, [pc, #332]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	4950      	ldr	r1, [pc, #320]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d24:	4b4b      	ldr	r3, [pc, #300]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a4a      	ldr	r2, [pc, #296]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d3c:	4b45      	ldr	r3, [pc, #276]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	4942      	ldr	r1, [pc, #264]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a3c      	ldr	r2, [pc, #240]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d015      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d74:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	4934      	ldr	r1, [pc, #208]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b2f      	ldr	r3, [pc, #188]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a2e      	ldr	r2, [pc, #184]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dac:	4b29      	ldr	r3, [pc, #164]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dba:	4926      	ldr	r1, [pc, #152]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dcc:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d015      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	4918      	ldr	r1, [pc, #96]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e02:	d105      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d015      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2a:	490a      	ldr	r1, [pc, #40]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e48:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e042      	b.n	8002ef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fe fa73 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2224      	movs	r2, #36	@ 0x24
 8002e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 ff08 	bl	8003cb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fc39 	bl	8003720 <UART_SetConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e01b      	b.n	8002ef0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 ff87 	bl	8003dfc <UART_CheckIdleState>
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	@ 0x28
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d17b      	bne.n	800300a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_UART_Transmit+0x26>
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e074      	b.n	800300c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2221      	movs	r2, #33	@ 0x21
 8002f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f32:	f7fe fc49 	bl	80017c8 <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f50:	d108      	bne.n	8002f64 <HAL_UART_Transmit+0x6c>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	e003      	b.n	8002f6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f6c:	e030      	b.n	8002fd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2200      	movs	r2, #0
 8002f76:	2180      	movs	r1, #128	@ 0x80
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 ffe9 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e03d      	b.n	800300c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3302      	adds	r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e007      	b.n	8002fbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1c8      	bne.n	8002f6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2140      	movs	r1, #64	@ 0x40
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 ffb2 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e006      	b.n	800300c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
  }
}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	@ 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003028:	2b20      	cmp	r3, #32
 800302a:	d137      	bne.n	800309c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_UART_Receive_IT+0x24>
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e030      	b.n	800309e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a18      	ldr	r2, [pc, #96]	@ (80030a8 <HAL_UART_Receive_IT+0x94>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d01f      	beq.n	800308c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d018      	beq.n	800308c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	613b      	str	r3, [r7, #16]
   return(result);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	623b      	str	r3, [r7, #32]
 800307a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	69f9      	ldr	r1, [r7, #28]
 800307e:	6a3a      	ldr	r2, [r7, #32]
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	61bb      	str	r3, [r7, #24]
   return(result);
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e6      	bne.n	800305a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	461a      	mov	r2, r3
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 ffca 	bl	800402c <UART_Start_Receive_IT>
 8003098:	4603      	mov	r3, r0
 800309a:	e000      	b.n	800309e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
  }
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3728      	adds	r7, #40	@ 0x28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40008000 	.word	0x40008000

080030ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b0ba      	sub	sp, #232	@ 0xe8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80030da:	4013      	ands	r3, r2
 80030dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80030e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11b      	bne.n	8003120 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d015      	beq.n	8003120 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 82e3 	beq.w	80036dc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
      }
      return;
 800311e:	e2dd      	b.n	80036dc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8123 	beq.w	8003370 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800312a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800312e:	4b8d      	ldr	r3, [pc, #564]	@ (8003364 <HAL_UART_IRQHandler+0x2b8>)
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003136:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800313a:	4b8b      	ldr	r3, [pc, #556]	@ (8003368 <HAL_UART_IRQHandler+0x2bc>)
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8116 	beq.w	8003370 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d011      	beq.n	8003174 <HAL_UART_IRQHandler+0xc8>
 8003150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d011      	beq.n	80031a4 <HAL_UART_IRQHandler+0xf8>
 8003180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2202      	movs	r2, #2
 8003192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d011      	beq.n	80031d4 <HAL_UART_IRQHandler+0x128>
 80031b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2204      	movs	r2, #4
 80031c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d017      	beq.n	8003210 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80031ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80031f0:	4b5c      	ldr	r3, [pc, #368]	@ (8003364 <HAL_UART_IRQHandler+0x2b8>)
 80031f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2208      	movs	r2, #8
 80031fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003206:	f043 0208 	orr.w	r2, r3, #8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_UART_IRQHandler+0x196>
 800321c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003220:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00c      	beq.n	8003242 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8249 	beq.w	80036e0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d013      	beq.n	8003282 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800325a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003296:	2b40      	cmp	r3, #64	@ 0x40
 8003298:	d005      	beq.n	80032a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800329a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d054      	beq.n	8003350 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 ffe2 	bl	8004270 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b6:	2b40      	cmp	r3, #64	@ 0x40
 80032b8:	d146      	bne.n	8003348 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3308      	adds	r3, #8
 80032c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1d9      	bne.n	80032ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d017      	beq.n	8003340 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003316:	4a15      	ldr	r2, [pc, #84]	@ (800336c <HAL_UART_IRQHandler+0x2c0>)
 8003318:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fbc5 	bl	8001ab0 <HAL_DMA_Abort_IT>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d019      	beq.n	8003360 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800333a:	4610      	mov	r0, r2
 800333c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333e:	e00f      	b.n	8003360 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fd ffa5 	bl	8001290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003346:	e00b      	b.n	8003360 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fd ffa1 	bl	8001290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334e:	e007      	b.n	8003360 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7fd ff9d 	bl	8001290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800335e:	e1bf      	b.n	80036e0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	bf00      	nop
    return;
 8003362:	e1bd      	b.n	80036e0 <HAL_UART_IRQHandler+0x634>
 8003364:	10000001 	.word	0x10000001
 8003368:	04000120 	.word	0x04000120
 800336c:	0800433d 	.word	0x0800433d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003374:	2b01      	cmp	r3, #1
 8003376:	f040 8153 	bne.w	8003620 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 814c 	beq.w	8003620 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8145 	beq.w	8003620 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2210      	movs	r2, #16
 800339c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a8:	2b40      	cmp	r3, #64	@ 0x40
 80033aa:	f040 80bb 	bne.w	8003524 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 818f 	beq.w	80036e4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80033cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033d0:	429a      	cmp	r2, r3
 80033d2:	f080 8187 	bcs.w	80036e4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 8087 	bne.w	8003502 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003408:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800340c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800341e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003422:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800342a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1da      	bne.n	80033f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3308      	adds	r3, #8
 8003444:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800344e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003462:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003466:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800346a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e1      	bne.n	800343e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800348a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800348c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3308      	adds	r3, #8
 800349a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800349e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e3      	bne.n	800347a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034d0:	f023 0310 	bic.w	r3, r3, #16
 80034d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e4      	bne.n	80034c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fa7e 	bl	80019fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003514:	b29b      	uxth	r3, r3
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	b29b      	uxth	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8f3 	bl	8003708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003522:	e0df      	b.n	80036e4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003530:	b29b      	uxth	r3, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80d1 	beq.w	80036e8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80cc 	beq.w	80036e8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800355e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003564:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003572:	647b      	str	r3, [r7, #68]	@ 0x44
 8003574:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e4      	bne.n	8003550 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3308      	adds	r3, #8
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	623b      	str	r3, [r7, #32]
   return(result);
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3308      	adds	r3, #8
 80035aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e1      	bne.n	8003586 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0310 	bic.w	r3, r3, #16
 80035ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	617b      	str	r3, [r7, #20]
   return(result);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e4      	bne.n	80035d6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003612:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f875 	bl	8003708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800361e:	e063      	b.n	80036e8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00e      	beq.n	800364a <HAL_UART_IRQHandler+0x59e>
 800362c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f001 fbd8 	bl	8004df8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003648:	e051      	b.n	80036ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003652:	2b00      	cmp	r3, #0
 8003654:	d014      	beq.n	8003680 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03a      	beq.n	80036ec <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
    }
    return;
 800367e:	e035      	b.n	80036ec <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <HAL_UART_IRQHandler+0x5f4>
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fe65 	bl	8004368 <UART_EndTransmit_IT>
    return;
 800369e:	e026      	b.n	80036ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80036a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_UART_IRQHandler+0x614>
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f001 fbb1 	bl	8004e20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036be:	e016      	b.n	80036ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80036c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d010      	beq.n	80036ee <HAL_UART_IRQHandler+0x642>
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da0c      	bge.n	80036ee <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f001 fb99 	bl	8004e0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036da:	e008      	b.n	80036ee <HAL_UART_IRQHandler+0x642>
      return;
 80036dc:	bf00      	nop
 80036de:	e006      	b.n	80036ee <HAL_UART_IRQHandler+0x642>
    return;
 80036e0:	bf00      	nop
 80036e2:	e004      	b.n	80036ee <HAL_UART_IRQHandler+0x642>
      return;
 80036e4:	bf00      	nop
 80036e6:	e002      	b.n	80036ee <HAL_UART_IRQHandler+0x642>
      return;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_UART_IRQHandler+0x642>
    return;
 80036ec:	bf00      	nop
  }
}
 80036ee:	37e8      	adds	r7, #232	@ 0xe8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b08c      	sub	sp, #48	@ 0x30
 8003726:	af00      	add	r7, sp, #0
 8003728:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	431a      	orrs	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4313      	orrs	r3, r2
 8003746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4bab      	ldr	r3, [pc, #684]	@ (80039fc <UART_SetConfig+0x2dc>)
 8003750:	4013      	ands	r3, r2
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003758:	430b      	orrs	r3, r1
 800375a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4aa0      	ldr	r2, [pc, #640]	@ (8003a00 <UART_SetConfig+0x2e0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003788:	4313      	orrs	r3, r2
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003796:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	f023 010f 	bic.w	r1, r3, #15
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a91      	ldr	r2, [pc, #580]	@ (8003a04 <UART_SetConfig+0x2e4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d125      	bne.n	8003810 <UART_SetConfig+0xf0>
 80037c4:	4b90      	ldr	r3, [pc, #576]	@ (8003a08 <UART_SetConfig+0x2e8>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d81a      	bhi.n	8003808 <UART_SetConfig+0xe8>
 80037d2:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <UART_SetConfig+0xb8>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037f9 	.word	0x080037f9
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	08003801 	.word	0x08003801
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ee:	e0d6      	b.n	800399e <UART_SetConfig+0x27e>
 80037f0:	2302      	movs	r3, #2
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037f6:	e0d2      	b.n	800399e <UART_SetConfig+0x27e>
 80037f8:	2304      	movs	r3, #4
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037fe:	e0ce      	b.n	800399e <UART_SetConfig+0x27e>
 8003800:	2308      	movs	r3, #8
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003806:	e0ca      	b.n	800399e <UART_SetConfig+0x27e>
 8003808:	2310      	movs	r3, #16
 800380a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800380e:	e0c6      	b.n	800399e <UART_SetConfig+0x27e>
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a7d      	ldr	r2, [pc, #500]	@ (8003a0c <UART_SetConfig+0x2ec>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d138      	bne.n	800388c <UART_SetConfig+0x16c>
 800381a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a08 <UART_SetConfig+0x2e8>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d82d      	bhi.n	8003884 <UART_SetConfig+0x164>
 8003828:	a201      	add	r2, pc, #4	@ (adr r2, 8003830 <UART_SetConfig+0x110>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003865 	.word	0x08003865
 8003834:	08003885 	.word	0x08003885
 8003838:	08003885 	.word	0x08003885
 800383c:	08003885 	.word	0x08003885
 8003840:	08003875 	.word	0x08003875
 8003844:	08003885 	.word	0x08003885
 8003848:	08003885 	.word	0x08003885
 800384c:	08003885 	.word	0x08003885
 8003850:	0800386d 	.word	0x0800386d
 8003854:	08003885 	.word	0x08003885
 8003858:	08003885 	.word	0x08003885
 800385c:	08003885 	.word	0x08003885
 8003860:	0800387d 	.word	0x0800387d
 8003864:	2300      	movs	r3, #0
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386a:	e098      	b.n	800399e <UART_SetConfig+0x27e>
 800386c:	2302      	movs	r3, #2
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003872:	e094      	b.n	800399e <UART_SetConfig+0x27e>
 8003874:	2304      	movs	r3, #4
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e090      	b.n	800399e <UART_SetConfig+0x27e>
 800387c:	2308      	movs	r3, #8
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e08c      	b.n	800399e <UART_SetConfig+0x27e>
 8003884:	2310      	movs	r3, #16
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388a:	e088      	b.n	800399e <UART_SetConfig+0x27e>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5f      	ldr	r2, [pc, #380]	@ (8003a10 <UART_SetConfig+0x2f0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d125      	bne.n	80038e2 <UART_SetConfig+0x1c2>
 8003896:	4b5c      	ldr	r3, [pc, #368]	@ (8003a08 <UART_SetConfig+0x2e8>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038a0:	2b30      	cmp	r3, #48	@ 0x30
 80038a2:	d016      	beq.n	80038d2 <UART_SetConfig+0x1b2>
 80038a4:	2b30      	cmp	r3, #48	@ 0x30
 80038a6:	d818      	bhi.n	80038da <UART_SetConfig+0x1ba>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d00a      	beq.n	80038c2 <UART_SetConfig+0x1a2>
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d814      	bhi.n	80038da <UART_SetConfig+0x1ba>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <UART_SetConfig+0x19a>
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d008      	beq.n	80038ca <UART_SetConfig+0x1aa>
 80038b8:	e00f      	b.n	80038da <UART_SetConfig+0x1ba>
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c0:	e06d      	b.n	800399e <UART_SetConfig+0x27e>
 80038c2:	2302      	movs	r3, #2
 80038c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c8:	e069      	b.n	800399e <UART_SetConfig+0x27e>
 80038ca:	2304      	movs	r3, #4
 80038cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d0:	e065      	b.n	800399e <UART_SetConfig+0x27e>
 80038d2:	2308      	movs	r3, #8
 80038d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d8:	e061      	b.n	800399e <UART_SetConfig+0x27e>
 80038da:	2310      	movs	r3, #16
 80038dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e0:	e05d      	b.n	800399e <UART_SetConfig+0x27e>
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4b      	ldr	r2, [pc, #300]	@ (8003a14 <UART_SetConfig+0x2f4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d125      	bne.n	8003938 <UART_SetConfig+0x218>
 80038ec:	4b46      	ldr	r3, [pc, #280]	@ (8003a08 <UART_SetConfig+0x2e8>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038f8:	d016      	beq.n	8003928 <UART_SetConfig+0x208>
 80038fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80038fc:	d818      	bhi.n	8003930 <UART_SetConfig+0x210>
 80038fe:	2b80      	cmp	r3, #128	@ 0x80
 8003900:	d00a      	beq.n	8003918 <UART_SetConfig+0x1f8>
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d814      	bhi.n	8003930 <UART_SetConfig+0x210>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <UART_SetConfig+0x1f0>
 800390a:	2b40      	cmp	r3, #64	@ 0x40
 800390c:	d008      	beq.n	8003920 <UART_SetConfig+0x200>
 800390e:	e00f      	b.n	8003930 <UART_SetConfig+0x210>
 8003910:	2300      	movs	r3, #0
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003916:	e042      	b.n	800399e <UART_SetConfig+0x27e>
 8003918:	2302      	movs	r3, #2
 800391a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800391e:	e03e      	b.n	800399e <UART_SetConfig+0x27e>
 8003920:	2304      	movs	r3, #4
 8003922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003926:	e03a      	b.n	800399e <UART_SetConfig+0x27e>
 8003928:	2308      	movs	r3, #8
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392e:	e036      	b.n	800399e <UART_SetConfig+0x27e>
 8003930:	2310      	movs	r3, #16
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003936:	e032      	b.n	800399e <UART_SetConfig+0x27e>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a30      	ldr	r2, [pc, #192]	@ (8003a00 <UART_SetConfig+0x2e0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12a      	bne.n	8003998 <UART_SetConfig+0x278>
 8003942:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <UART_SetConfig+0x2e8>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800394c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003950:	d01a      	beq.n	8003988 <UART_SetConfig+0x268>
 8003952:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003956:	d81b      	bhi.n	8003990 <UART_SetConfig+0x270>
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800395c:	d00c      	beq.n	8003978 <UART_SetConfig+0x258>
 800395e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003962:	d815      	bhi.n	8003990 <UART_SetConfig+0x270>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <UART_SetConfig+0x250>
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800396c:	d008      	beq.n	8003980 <UART_SetConfig+0x260>
 800396e:	e00f      	b.n	8003990 <UART_SetConfig+0x270>
 8003970:	2300      	movs	r3, #0
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003976:	e012      	b.n	800399e <UART_SetConfig+0x27e>
 8003978:	2302      	movs	r3, #2
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800397e:	e00e      	b.n	800399e <UART_SetConfig+0x27e>
 8003980:	2304      	movs	r3, #4
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003986:	e00a      	b.n	800399e <UART_SetConfig+0x27e>
 8003988:	2308      	movs	r3, #8
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398e:	e006      	b.n	800399e <UART_SetConfig+0x27e>
 8003990:	2310      	movs	r3, #16
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003996:	e002      	b.n	800399e <UART_SetConfig+0x27e>
 8003998:	2310      	movs	r3, #16
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a17      	ldr	r2, [pc, #92]	@ (8003a00 <UART_SetConfig+0x2e0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	f040 80a8 	bne.w	8003afa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d834      	bhi.n	8003a1c <UART_SetConfig+0x2fc>
 80039b2:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <UART_SetConfig+0x298>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	08003a1d 	.word	0x08003a1d
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	08003a1d 	.word	0x08003a1d
 80039c8:	080039eb 	.word	0x080039eb
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003a1d 	.word	0x08003a1d
 80039d4:	08003a1d 	.word	0x08003a1d
 80039d8:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe ffda 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 80039e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e2:	e021      	b.n	8003a28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <UART_SetConfig+0x2f8>)
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039e8:	e01e      	b.n	8003a28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe ff65 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 80039ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039f0:	e01a      	b.n	8003a28 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039f8:	e016      	b.n	8003a28 <UART_SetConfig+0x308>
 80039fa:	bf00      	nop
 80039fc:	cfff69f3 	.word	0xcfff69f3
 8003a00:	40008000 	.word	0x40008000
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40004400 	.word	0x40004400
 8003a10:	40004800 	.word	0x40004800
 8003a14:	40004c00 	.word	0x40004c00
 8003a18:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 812a 	beq.w	8003c84 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	4a9e      	ldr	r2, [pc, #632]	@ (8003cb0 <UART_SetConfig+0x590>)
 8003a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d305      	bcc.n	8003a60 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d903      	bls.n	8003a68 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a66:	e10d      	b.n	8003c84 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	60fa      	str	r2, [r7, #12]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	4a8e      	ldr	r2, [pc, #568]	@ (8003cb0 <UART_SetConfig+0x590>)
 8003a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a8a:	f7fd f83f 	bl	8000b0c <__aeabi_uldivmod>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	020b      	lsls	r3, r1, #8
 8003aa0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003aa4:	0202      	lsls	r2, r0, #8
 8003aa6:	6979      	ldr	r1, [r7, #20]
 8003aa8:	6849      	ldr	r1, [r1, #4]
 8003aaa:	0849      	lsrs	r1, r1, #1
 8003aac:	2000      	movs	r0, #0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	eb12 0804 	adds.w	r8, r2, r4
 8003ab6:	eb43 0905 	adc.w	r9, r3, r5
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	469a      	mov	sl, r3
 8003ac2:	4693      	mov	fp, r2
 8003ac4:	4652      	mov	r2, sl
 8003ac6:	465b      	mov	r3, fp
 8003ac8:	4640      	mov	r0, r8
 8003aca:	4649      	mov	r1, r9
 8003acc:	f7fd f81e 	bl	8000b0c <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ade:	d308      	bcc.n	8003af2 <UART_SetConfig+0x3d2>
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ae6:	d204      	bcs.n	8003af2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6a3a      	ldr	r2, [r7, #32]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e0c8      	b.n	8003c84 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003af8:	e0c4      	b.n	8003c84 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b02:	d167      	bne.n	8003bd4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003b04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d828      	bhi.n	8003b5e <UART_SetConfig+0x43e>
 8003b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b14 <UART_SetConfig+0x3f4>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	08003b49 	.word	0x08003b49
 8003b20:	08003b5f 	.word	0x08003b5f
 8003b24:	08003b4f 	.word	0x08003b4f
 8003b28:	08003b5f 	.word	0x08003b5f
 8003b2c:	08003b5f 	.word	0x08003b5f
 8003b30:	08003b5f 	.word	0x08003b5f
 8003b34:	08003b57 	.word	0x08003b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe ff2c 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b3e:	e014      	b.n	8003b6a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b40:	f7fe ff3e 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8003b44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b46:	e010      	b.n	8003b6a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b48:	4b5a      	ldr	r3, [pc, #360]	@ (8003cb4 <UART_SetConfig+0x594>)
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b4c:	e00d      	b.n	8003b6a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4e:	f7fe feb3 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8003b52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b54:	e009      	b.n	8003b6a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b5c:	e005      	b.n	8003b6a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8089 	beq.w	8003c84 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb0 <UART_SetConfig+0x590>)
 8003b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b84:	005a      	lsls	r2, r3, #1
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	441a      	add	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	d916      	bls.n	8003bcc <UART_SetConfig+0x4ac>
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba4:	d212      	bcs.n	8003bcc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f023 030f 	bic.w	r3, r3, #15
 8003bae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	8bfb      	ldrh	r3, [r7, #30]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	8bfa      	ldrh	r2, [r7, #30]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	e05b      	b.n	8003c84 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003bd2:	e057      	b.n	8003c84 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d828      	bhi.n	8003c2e <UART_SetConfig+0x50e>
 8003bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003be4 <UART_SetConfig+0x4c4>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7fe fec4 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c0e:	e014      	b.n	8003c3a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fe fed6 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8003c14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c16:	e010      	b.n	8003c3a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b26      	ldr	r3, [pc, #152]	@ (8003cb4 <UART_SetConfig+0x594>)
 8003c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c1c:	e00d      	b.n	8003c3a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe fe4b 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8003c22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c24:	e009      	b.n	8003c3a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c2c:	e005      	b.n	8003c3a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c38:	bf00      	nop
    }

    if (pclk != 0U)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d021      	beq.n	8003c84 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <UART_SetConfig+0x590>)
 8003c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	441a      	add	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d909      	bls.n	8003c7e <UART_SetConfig+0x55e>
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c70:	d205      	bcs.n	8003c7e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60da      	str	r2, [r3, #12]
 8003c7c:	e002      	b.n	8003c84 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2200      	movs	r2, #0
 8003c98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ca0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3730      	adds	r7, #48	@ 0x30
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cae:	bf00      	nop
 8003cb0:	08006014 	.word	0x08006014
 8003cb4:	00f42400 	.word	0x00f42400

08003cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d01a      	beq.n	8003dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db6:	d10a      	bne.n	8003dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b098      	sub	sp, #96	@ 0x60
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e0c:	f7fd fcdc 	bl	80017c8 <HAL_GetTick>
 8003e10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d12f      	bne.n	8003e80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f88e 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d022      	beq.n	8003e80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e6      	bne.n	8003e3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e063      	b.n	8003f48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d149      	bne.n	8003f22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e96:	2200      	movs	r2, #0
 8003e98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f857 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d03c      	beq.n	8003f22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ec6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ec8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e6      	bne.n	8003ea8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003efa:	61fa      	str	r2, [r7, #28]
 8003efc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	69b9      	ldr	r1, [r7, #24]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	617b      	str	r3, [r7, #20]
   return(result);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e012      	b.n	8003f48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3758      	adds	r7, #88	@ 0x58
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f60:	e04f      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f68:	d04b      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fd fc2d 	bl	80017c8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e04e      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d037      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b80      	cmp	r3, #128	@ 0x80
 8003f96:	d034      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b40      	cmp	r3, #64	@ 0x40
 8003f9c:	d031      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d110      	bne.n	8003fce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f95b 	bl	8004270 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e029      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fdc:	d111      	bne.n	8004002 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f941 	bl	8004270 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e00f      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4013      	ands	r3, r2
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	429a      	cmp	r2, r3
 800401e:	d0a0      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800402c:	b480      	push	{r7}
 800402e:	b0a3      	sub	sp, #140	@ 0x8c
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405e:	d10e      	bne.n	800407e <UART_Start_Receive_IT+0x52>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <UART_Start_Receive_IT+0x48>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800406e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004072:	e02d      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	22ff      	movs	r2, #255	@ 0xff
 8004078:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800407c:	e028      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10d      	bne.n	80040a2 <UART_Start_Receive_IT+0x76>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <UART_Start_Receive_IT+0x6c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	22ff      	movs	r2, #255	@ 0xff
 8004092:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004096:	e01b      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	227f      	movs	r2, #127	@ 0x7f
 800409c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040a0:	e016      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040aa:	d10d      	bne.n	80040c8 <UART_Start_Receive_IT+0x9c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <UART_Start_Receive_IT+0x92>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	227f      	movs	r2, #127	@ 0x7f
 80040b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040bc:	e008      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	223f      	movs	r2, #63	@ 0x3f
 80040c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040c6:	e003      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2222      	movs	r2, #34	@ 0x22
 80040dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3308      	adds	r3, #8
 80040e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80040f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3308      	adds	r3, #8
 8004100:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004104:	673a      	str	r2, [r7, #112]	@ 0x70
 8004106:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800410a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e3      	bne.n	80040e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800411c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004120:	d14f      	bne.n	80041c2 <UART_Start_Receive_IT+0x196>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	429a      	cmp	r2, r3
 800412c:	d349      	bcc.n	80041c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004136:	d107      	bne.n	8004148 <UART_Start_Receive_IT+0x11c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a47      	ldr	r2, [pc, #284]	@ (8004260 <UART_Start_Receive_IT+0x234>)
 8004144:	675a      	str	r2, [r3, #116]	@ 0x74
 8004146:	e002      	b.n	800414e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a46      	ldr	r2, [pc, #280]	@ (8004264 <UART_Start_Receive_IT+0x238>)
 800414c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01a      	beq.n	800418c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004178:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800417a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800417e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e4      	bne.n	8004156 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3308      	adds	r3, #8
 8004192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3308      	adds	r3, #8
 80041aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80041ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 80041ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80041ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e5      	bne.n	800418c <UART_Start_Receive_IT+0x160>
 80041c0:	e046      	b.n	8004250 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ca:	d107      	bne.n	80041dc <UART_Start_Receive_IT+0x1b0>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d103      	bne.n	80041dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <UART_Start_Receive_IT+0x23c>)
 80041d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80041da:	e002      	b.n	80041e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a23      	ldr	r2, [pc, #140]	@ (800426c <UART_Start_Receive_IT+0x240>)
 80041e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d019      	beq.n	800421e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80041fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
 800420a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800420e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_Start_Receive_IT+0x1be>
 800421c:	e018      	b.n	8004250 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	613b      	str	r3, [r7, #16]
   return(result);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f043 0320 	orr.w	r3, r3, #32
 8004232:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	69f9      	ldr	r1, [r7, #28]
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	61bb      	str	r3, [r7, #24]
   return(result);
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e6      	bne.n	800421e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	378c      	adds	r7, #140	@ 0x8c
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	08004a91 	.word	0x08004a91
 8004264:	08004731 	.word	0x08004731
 8004268:	08004579 	.word	0x08004579
 800426c:	080043c1 	.word	0x080043c1

08004270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b095      	sub	sp, #84	@ 0x54
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800428c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004296:	643b      	str	r3, [r7, #64]	@ 0x40
 8004298:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800429c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e6      	bne.n	8004278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3308      	adds	r3, #8
 80042cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e3      	bne.n	80042aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d118      	bne.n	800431c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 0310 	bic.w	r3, r3, #16
 80042fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6979      	ldr	r1, [r7, #20]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	613b      	str	r3, [r7, #16]
   return(result);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e6      	bne.n	80042ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004330:	bf00      	nop
 8004332:	3754      	adds	r7, #84	@ 0x54
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7fc ff98 	bl	8001290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	60bb      	str	r3, [r7, #8]
   return(result);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	613b      	str	r3, [r7, #16]
   return(result);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e6      	bne.n	8004370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff f99f 	bl	80036f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b6:	bf00      	nop
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b09c      	sub	sp, #112	@ 0x70
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80043ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043d8:	2b22      	cmp	r3, #34	@ 0x22
 80043da:	f040 80be 	bne.w	800455a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043ec:	b2d9      	uxtb	r1, r3
 80043ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f8:	400a      	ands	r2, r1
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 80a1 	bne.w	800456a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800443c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004446:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004448:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800444c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e6      	bne.n	8004428 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3308      	adds	r3, #8
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800446a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	667b      	str	r3, [r7, #100]	@ 0x64
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3308      	adds	r3, #8
 8004478:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800447a:	647a      	str	r2, [r7, #68]	@ 0x44
 800447c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004480:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e5      	bne.n	800445a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a33      	ldr	r2, [pc, #204]	@ (8004574 <UART_RxISR_8BIT+0x1b4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d01f      	beq.n	80044ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	623b      	str	r3, [r7, #32]
   return(result);
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e6      	bne.n	80044ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d12e      	bne.n	8004552 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	60fb      	str	r3, [r7, #12]
   return(result);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	69b9      	ldr	r1, [r7, #24]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	617b      	str	r3, [r7, #20]
   return(result);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b10      	cmp	r3, #16
 8004538:	d103      	bne.n	8004542 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2210      	movs	r2, #16
 8004540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff f8dc 	bl	8003708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004550:	e00b      	b.n	800456a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fe28 	bl	80011a8 <HAL_UART_RxCpltCallback>
}
 8004558:	e007      	b.n	800456a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0208 	orr.w	r2, r2, #8
 8004568:	619a      	str	r2, [r3, #24]
}
 800456a:	bf00      	nop
 800456c:	3770      	adds	r7, #112	@ 0x70
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40008000 	.word	0x40008000

08004578 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b09c      	sub	sp, #112	@ 0x70
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004586:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004590:	2b22      	cmp	r3, #34	@ 0x22
 8004592:	f040 80be 	bne.w	8004712 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80045a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80045aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80045ae:	4013      	ands	r3, r2
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 80a1 	bne.w	8004722 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80045ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004600:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004604:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800460c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e6      	bne.n	80045e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3308      	adds	r3, #8
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	663b      	str	r3, [r7, #96]	@ 0x60
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004632:	643a      	str	r2, [r7, #64]	@ 0x40
 8004634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004638:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e5      	bne.n	8004612 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a33      	ldr	r2, [pc, #204]	@ (800472c <UART_RxISR_16BIT+0x1b4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d01f      	beq.n	80046a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004686:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004692:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e6      	bne.n	8004672 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d12e      	bne.n	800470a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	60bb      	str	r3, [r7, #8]
   return(result);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f023 0310 	bic.w	r3, r3, #16
 80046c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6979      	ldr	r1, [r7, #20]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	613b      	str	r3, [r7, #16]
   return(result);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e6      	bne.n	80046b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d103      	bne.n	80046fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2210      	movs	r2, #16
 80046f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff f800 	bl	8003708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004708:	e00b      	b.n	8004722 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc fd4c 	bl	80011a8 <HAL_UART_RxCpltCallback>
}
 8004710:	e007      	b.n	8004722 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0208 	orr.w	r2, r2, #8
 8004720:	619a      	str	r2, [r3, #24]
}
 8004722:	bf00      	nop
 8004724:	3770      	adds	r7, #112	@ 0x70
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40008000 	.word	0x40008000

08004730 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b0ac      	sub	sp, #176	@ 0xb0
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800473e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004766:	2b22      	cmp	r3, #34	@ 0x22
 8004768:	f040 8182 	bne.w	8004a70 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004772:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004776:	e125      	b.n	80049c4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004782:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004786:	b2d9      	uxtb	r1, r3
 8004788:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800478c:	b2da      	uxtb	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004792:	400a      	ands	r2, r1
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80047be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d053      	beq.n	8004872 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d011      	beq.n	80047fa <UART_RxISR_8BIT_FIFOEN+0xca>
 80047d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80047da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2201      	movs	r2, #1
 80047e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d011      	beq.n	800482a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2202      	movs	r2, #2
 8004818:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004820:	f043 0204 	orr.w	r2, r3, #4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800482a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d011      	beq.n	800485a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2204      	movs	r2, #4
 8004848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	f043 0202 	orr.w	r2, r3, #2
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	2b00      	cmp	r3, #0
 8004862:	d006      	beq.n	8004872 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fc fd13 	bl	8001290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 80a2 	bne.w	80049c4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800488e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048a4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80048a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80048b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e4      	bne.n	8004880 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80048c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048de:	66ba      	str	r2, [r7, #104]	@ 0x68
 80048e0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80048e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80048ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e1      	bne.n	80048b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a5f      	ldr	r2, [pc, #380]	@ (8004a88 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d021      	beq.n	8004954 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01a      	beq.n	8004954 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800492c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800492e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004940:	657b      	str	r3, [r7, #84]	@ 0x54
 8004942:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004946:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800494e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e4      	bne.n	800491e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d130      	bne.n	80049be <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	f023 0310 	bic.w	r3, r3, #16
 8004976:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004984:	643b      	str	r3, [r7, #64]	@ 0x40
 8004986:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800498a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e4      	bne.n	8004962 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d103      	bne.n	80049ae <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2210      	movs	r2, #16
 80049ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fe fea6 	bl	8003708 <HAL_UARTEx_RxEventCallback>
 80049bc:	e002      	b.n	80049c4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc fbf2 	bl	80011a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d006      	beq.n	80049da <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80049cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f47f aecf 	bne.w	8004778 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80049e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d049      	beq.n	8004a80 <UART_RxISR_8BIT_FIFOEN+0x350>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80049f2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d242      	bcs.n	8004a80 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3308      	adds	r3, #8
 8004a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e3      	bne.n	80049fa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a15      	ldr	r2, [pc, #84]	@ (8004a8c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004a36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f043 0320 	orr.w	r3, r3, #32
 8004a4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6979      	ldr	r1, [r7, #20]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	613b      	str	r3, [r7, #16]
   return(result);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e4      	bne.n	8004a38 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a6e:	e007      	b.n	8004a80 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	619a      	str	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	37b0      	adds	r7, #176	@ 0xb0
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40008000 	.word	0x40008000
 8004a8c:	080043c1 	.word	0x080043c1

08004a90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0ae      	sub	sp, #184	@ 0xb8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004a9e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ac6:	2b22      	cmp	r3, #34	@ 0x22
 8004ac8:	f040 8186 	bne.w	8004dd8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004ad2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ad6:	e129      	b.n	8004d2c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004aea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004aee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004af2:	4013      	ands	r3, r2
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004afa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	1c9a      	adds	r2, r3, #2
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d053      	beq.n	8004bd6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <UART_RxISR_16BIT_FIFOEN+0xce>
 8004b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b54:	f043 0201 	orr.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d011      	beq.n	8004b8e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f043 0204 	orr.w	r2, r3, #4
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d011      	beq.n	8004bbe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2204      	movs	r2, #4
 8004bac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb4:	f043 0202 	orr.w	r2, r3, #2
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fc fb61 	bl	8001290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 80a4 	bne.w	8004d2c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e2      	bne.n	8004be4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004c46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e1      	bne.n	8004c1e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a5f      	ldr	r2, [pc, #380]	@ (8004df0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d021      	beq.n	8004cbc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01a      	beq.n	8004cbc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004caa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e4      	bne.n	8004c86 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d130      	bne.n	8004d26 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cda:	f023 0310 	bic.w	r3, r3, #16
 8004cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e4      	bne.n	8004cca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d103      	bne.n	8004d16 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2210      	movs	r2, #16
 8004d14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fe fcf2 	bl	8003708 <HAL_UARTEx_RxEventCallback>
 8004d24:	e002      	b.n	8004d2c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fc fa3e 	bl	80011a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d2c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f47f aecb 	bne.w	8004ad8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d48:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004d4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d049      	beq.n	8004de8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d5a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d242      	bcs.n	8004de8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	623b      	str	r3, [r7, #32]
   return(result);
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004d86:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e3      	bne.n	8004d62 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a15      	ldr	r2, [pc, #84]	@ (8004df4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004d9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f043 0320 	orr.w	r3, r3, #32
 8004db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	69b9      	ldr	r1, [r7, #24]
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e4      	bne.n	8004da0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dd6:	e007      	b.n	8004de8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0208 	orr.w	r2, r2, #8
 8004de6:	619a      	str	r2, [r3, #24]
}
 8004de8:	bf00      	nop
 8004dea:	37b8      	adds	r7, #184	@ 0xb8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40008000 	.word	0x40008000
 8004df4:	08004579 	.word	0x08004579

08004df8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_UARTEx_DisableFifoMode+0x16>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e027      	b.n	8004e9a <HAL_UARTEx_DisableFifoMode+0x66>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2224      	movs	r2, #36	@ 0x24
 8004e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e02d      	b.n	8004f1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2224      	movs	r2, #36	@ 0x24
 8004eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f850 	bl	8004fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e02d      	b.n	8004f96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2224      	movs	r2, #36	@ 0x24
 8004f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f812 	bl	8004fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d108      	bne.n	8004fc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fc0:	e031      	b.n	8005026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	0e5b      	lsrs	r3, r3, #25
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	0f5b      	lsrs	r3, r3, #29
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fea:	7bbb      	ldrb	r3, [r7, #14]
 8004fec:	7b3a      	ldrb	r2, [r7, #12]
 8004fee:	4911      	ldr	r1, [pc, #68]	@ (8005034 <UARTEx_SetNbDataToProcess+0x94>)
 8004ff0:	5c8a      	ldrb	r2, [r1, r2]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ff6:	7b3a      	ldrb	r2, [r7, #12]
 8004ff8:	490f      	ldr	r1, [pc, #60]	@ (8005038 <UARTEx_SetNbDataToProcess+0x98>)
 8004ffa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	7b7a      	ldrb	r2, [r7, #13]
 800500c:	4909      	ldr	r1, [pc, #36]	@ (8005034 <UARTEx_SetNbDataToProcess+0x94>)
 800500e:	5c8a      	ldrb	r2, [r1, r2]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005014:	7b7a      	ldrb	r2, [r7, #13]
 8005016:	4908      	ldr	r1, [pc, #32]	@ (8005038 <UARTEx_SetNbDataToProcess+0x98>)
 8005018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800501a:	fb93 f3f2 	sdiv	r3, r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	0800602c 	.word	0x0800602c
 8005038:	08006034 	.word	0x08006034

0800503c <std>:
 800503c:	2300      	movs	r3, #0
 800503e:	b510      	push	{r4, lr}
 8005040:	4604      	mov	r4, r0
 8005042:	e9c0 3300 	strd	r3, r3, [r0]
 8005046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800504a:	6083      	str	r3, [r0, #8]
 800504c:	8181      	strh	r1, [r0, #12]
 800504e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005050:	81c2      	strh	r2, [r0, #14]
 8005052:	6183      	str	r3, [r0, #24]
 8005054:	4619      	mov	r1, r3
 8005056:	2208      	movs	r2, #8
 8005058:	305c      	adds	r0, #92	@ 0x5c
 800505a:	f000 f921 	bl	80052a0 <memset>
 800505e:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <std+0x58>)
 8005060:	6263      	str	r3, [r4, #36]	@ 0x24
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <std+0x5c>)
 8005064:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <std+0x60>)
 8005068:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800506a:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <std+0x64>)
 800506c:	6323      	str	r3, [r4, #48]	@ 0x30
 800506e:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <std+0x68>)
 8005070:	6224      	str	r4, [r4, #32]
 8005072:	429c      	cmp	r4, r3
 8005074:	d006      	beq.n	8005084 <std+0x48>
 8005076:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800507a:	4294      	cmp	r4, r2
 800507c:	d002      	beq.n	8005084 <std+0x48>
 800507e:	33d0      	adds	r3, #208	@ 0xd0
 8005080:	429c      	cmp	r4, r3
 8005082:	d105      	bne.n	8005090 <std+0x54>
 8005084:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800508c:	f000 b93a 	b.w	8005304 <__retarget_lock_init_recursive>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	bf00      	nop
 8005094:	08005b5d 	.word	0x08005b5d
 8005098:	08005b7f 	.word	0x08005b7f
 800509c:	08005bb7 	.word	0x08005bb7
 80050a0:	08005bdb 	.word	0x08005bdb
 80050a4:	200003e4 	.word	0x200003e4

080050a8 <stdio_exit_handler>:
 80050a8:	4a02      	ldr	r2, [pc, #8]	@ (80050b4 <stdio_exit_handler+0xc>)
 80050aa:	4903      	ldr	r1, [pc, #12]	@ (80050b8 <stdio_exit_handler+0x10>)
 80050ac:	4803      	ldr	r0, [pc, #12]	@ (80050bc <stdio_exit_handler+0x14>)
 80050ae:	f000 b869 	b.w	8005184 <_fwalk_sglue>
 80050b2:	bf00      	nop
 80050b4:	2000000c 	.word	0x2000000c
 80050b8:	08005af5 	.word	0x08005af5
 80050bc:	2000001c 	.word	0x2000001c

080050c0 <cleanup_stdio>:
 80050c0:	6841      	ldr	r1, [r0, #4]
 80050c2:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <cleanup_stdio+0x34>)
 80050c4:	4299      	cmp	r1, r3
 80050c6:	b510      	push	{r4, lr}
 80050c8:	4604      	mov	r4, r0
 80050ca:	d001      	beq.n	80050d0 <cleanup_stdio+0x10>
 80050cc:	f000 fd12 	bl	8005af4 <_fflush_r>
 80050d0:	68a1      	ldr	r1, [r4, #8]
 80050d2:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <cleanup_stdio+0x38>)
 80050d4:	4299      	cmp	r1, r3
 80050d6:	d002      	beq.n	80050de <cleanup_stdio+0x1e>
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 fd0b 	bl	8005af4 <_fflush_r>
 80050de:	68e1      	ldr	r1, [r4, #12]
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <cleanup_stdio+0x3c>)
 80050e2:	4299      	cmp	r1, r3
 80050e4:	d004      	beq.n	80050f0 <cleanup_stdio+0x30>
 80050e6:	4620      	mov	r0, r4
 80050e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ec:	f000 bd02 	b.w	8005af4 <_fflush_r>
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	200003e4 	.word	0x200003e4
 80050f8:	2000044c 	.word	0x2000044c
 80050fc:	200004b4 	.word	0x200004b4

08005100 <global_stdio_init.part.0>:
 8005100:	b510      	push	{r4, lr}
 8005102:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <global_stdio_init.part.0+0x30>)
 8005104:	4c0b      	ldr	r4, [pc, #44]	@ (8005134 <global_stdio_init.part.0+0x34>)
 8005106:	4a0c      	ldr	r2, [pc, #48]	@ (8005138 <global_stdio_init.part.0+0x38>)
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	4620      	mov	r0, r4
 800510c:	2200      	movs	r2, #0
 800510e:	2104      	movs	r1, #4
 8005110:	f7ff ff94 	bl	800503c <std>
 8005114:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005118:	2201      	movs	r2, #1
 800511a:	2109      	movs	r1, #9
 800511c:	f7ff ff8e 	bl	800503c <std>
 8005120:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005124:	2202      	movs	r2, #2
 8005126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512a:	2112      	movs	r1, #18
 800512c:	f7ff bf86 	b.w	800503c <std>
 8005130:	2000051c 	.word	0x2000051c
 8005134:	200003e4 	.word	0x200003e4
 8005138:	080050a9 	.word	0x080050a9

0800513c <__sfp_lock_acquire>:
 800513c:	4801      	ldr	r0, [pc, #4]	@ (8005144 <__sfp_lock_acquire+0x8>)
 800513e:	f000 b8e2 	b.w	8005306 <__retarget_lock_acquire_recursive>
 8005142:	bf00      	nop
 8005144:	20000521 	.word	0x20000521

08005148 <__sfp_lock_release>:
 8005148:	4801      	ldr	r0, [pc, #4]	@ (8005150 <__sfp_lock_release+0x8>)
 800514a:	f000 b8dd 	b.w	8005308 <__retarget_lock_release_recursive>
 800514e:	bf00      	nop
 8005150:	20000521 	.word	0x20000521

08005154 <__sinit>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4604      	mov	r4, r0
 8005158:	f7ff fff0 	bl	800513c <__sfp_lock_acquire>
 800515c:	6a23      	ldr	r3, [r4, #32]
 800515e:	b11b      	cbz	r3, 8005168 <__sinit+0x14>
 8005160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005164:	f7ff bff0 	b.w	8005148 <__sfp_lock_release>
 8005168:	4b04      	ldr	r3, [pc, #16]	@ (800517c <__sinit+0x28>)
 800516a:	6223      	str	r3, [r4, #32]
 800516c:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <__sinit+0x2c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f5      	bne.n	8005160 <__sinit+0xc>
 8005174:	f7ff ffc4 	bl	8005100 <global_stdio_init.part.0>
 8005178:	e7f2      	b.n	8005160 <__sinit+0xc>
 800517a:	bf00      	nop
 800517c:	080050c1 	.word	0x080050c1
 8005180:	2000051c 	.word	0x2000051c

08005184 <_fwalk_sglue>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	4607      	mov	r7, r0
 800518a:	4688      	mov	r8, r1
 800518c:	4614      	mov	r4, r2
 800518e:	2600      	movs	r6, #0
 8005190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005194:	f1b9 0901 	subs.w	r9, r9, #1
 8005198:	d505      	bpl.n	80051a6 <_fwalk_sglue+0x22>
 800519a:	6824      	ldr	r4, [r4, #0]
 800519c:	2c00      	cmp	r4, #0
 800519e:	d1f7      	bne.n	8005190 <_fwalk_sglue+0xc>
 80051a0:	4630      	mov	r0, r6
 80051a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d907      	bls.n	80051bc <_fwalk_sglue+0x38>
 80051ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b0:	3301      	adds	r3, #1
 80051b2:	d003      	beq.n	80051bc <_fwalk_sglue+0x38>
 80051b4:	4629      	mov	r1, r5
 80051b6:	4638      	mov	r0, r7
 80051b8:	47c0      	blx	r8
 80051ba:	4306      	orrs	r6, r0
 80051bc:	3568      	adds	r5, #104	@ 0x68
 80051be:	e7e9      	b.n	8005194 <_fwalk_sglue+0x10>

080051c0 <iprintf>:
 80051c0:	b40f      	push	{r0, r1, r2, r3}
 80051c2:	b507      	push	{r0, r1, r2, lr}
 80051c4:	4906      	ldr	r1, [pc, #24]	@ (80051e0 <iprintf+0x20>)
 80051c6:	ab04      	add	r3, sp, #16
 80051c8:	6808      	ldr	r0, [r1, #0]
 80051ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ce:	6881      	ldr	r1, [r0, #8]
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f000 f8c3 	bl	800535c <_vfiprintf_r>
 80051d6:	b003      	add	sp, #12
 80051d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051dc:	b004      	add	sp, #16
 80051de:	4770      	bx	lr
 80051e0:	20000018 	.word	0x20000018

080051e4 <_puts_r>:
 80051e4:	6a03      	ldr	r3, [r0, #32]
 80051e6:	b570      	push	{r4, r5, r6, lr}
 80051e8:	6884      	ldr	r4, [r0, #8]
 80051ea:	4605      	mov	r5, r0
 80051ec:	460e      	mov	r6, r1
 80051ee:	b90b      	cbnz	r3, 80051f4 <_puts_r+0x10>
 80051f0:	f7ff ffb0 	bl	8005154 <__sinit>
 80051f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051f6:	07db      	lsls	r3, r3, #31
 80051f8:	d405      	bmi.n	8005206 <_puts_r+0x22>
 80051fa:	89a3      	ldrh	r3, [r4, #12]
 80051fc:	0598      	lsls	r0, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_puts_r+0x22>
 8005200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005202:	f000 f880 	bl	8005306 <__retarget_lock_acquire_recursive>
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	0719      	lsls	r1, r3, #28
 800520a:	d502      	bpl.n	8005212 <_puts_r+0x2e>
 800520c:	6923      	ldr	r3, [r4, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d135      	bne.n	800527e <_puts_r+0x9a>
 8005212:	4621      	mov	r1, r4
 8005214:	4628      	mov	r0, r5
 8005216:	f000 fd23 	bl	8005c60 <__swsetup_r>
 800521a:	b380      	cbz	r0, 800527e <_puts_r+0x9a>
 800521c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005220:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005222:	07da      	lsls	r2, r3, #31
 8005224:	d405      	bmi.n	8005232 <_puts_r+0x4e>
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	059b      	lsls	r3, r3, #22
 800522a:	d402      	bmi.n	8005232 <_puts_r+0x4e>
 800522c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800522e:	f000 f86b 	bl	8005308 <__retarget_lock_release_recursive>
 8005232:	4628      	mov	r0, r5
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	2b00      	cmp	r3, #0
 8005238:	da04      	bge.n	8005244 <_puts_r+0x60>
 800523a:	69a2      	ldr	r2, [r4, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	dc17      	bgt.n	8005270 <_puts_r+0x8c>
 8005240:	290a      	cmp	r1, #10
 8005242:	d015      	beq.n	8005270 <_puts_r+0x8c>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	6022      	str	r2, [r4, #0]
 800524a:	7019      	strb	r1, [r3, #0]
 800524c:	68a3      	ldr	r3, [r4, #8]
 800524e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005252:	3b01      	subs	r3, #1
 8005254:	60a3      	str	r3, [r4, #8]
 8005256:	2900      	cmp	r1, #0
 8005258:	d1ed      	bne.n	8005236 <_puts_r+0x52>
 800525a:	2b00      	cmp	r3, #0
 800525c:	da11      	bge.n	8005282 <_puts_r+0x9e>
 800525e:	4622      	mov	r2, r4
 8005260:	210a      	movs	r1, #10
 8005262:	4628      	mov	r0, r5
 8005264:	f000 fcbd 	bl	8005be2 <__swbuf_r>
 8005268:	3001      	adds	r0, #1
 800526a:	d0d7      	beq.n	800521c <_puts_r+0x38>
 800526c:	250a      	movs	r5, #10
 800526e:	e7d7      	b.n	8005220 <_puts_r+0x3c>
 8005270:	4622      	mov	r2, r4
 8005272:	4628      	mov	r0, r5
 8005274:	f000 fcb5 	bl	8005be2 <__swbuf_r>
 8005278:	3001      	adds	r0, #1
 800527a:	d1e7      	bne.n	800524c <_puts_r+0x68>
 800527c:	e7ce      	b.n	800521c <_puts_r+0x38>
 800527e:	3e01      	subs	r6, #1
 8005280:	e7e4      	b.n	800524c <_puts_r+0x68>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	6022      	str	r2, [r4, #0]
 8005288:	220a      	movs	r2, #10
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e7ee      	b.n	800526c <_puts_r+0x88>
	...

08005290 <puts>:
 8005290:	4b02      	ldr	r3, [pc, #8]	@ (800529c <puts+0xc>)
 8005292:	4601      	mov	r1, r0
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	f7ff bfa5 	b.w	80051e4 <_puts_r>
 800529a:	bf00      	nop
 800529c:	20000018 	.word	0x20000018

080052a0 <memset>:
 80052a0:	4402      	add	r2, r0
 80052a2:	4603      	mov	r3, r0
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	f803 1b01 	strb.w	r1, [r3], #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <__errno>:
 80052b0:	4b01      	ldr	r3, [pc, #4]	@ (80052b8 <__errno+0x8>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000018 	.word	0x20000018

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4d0d      	ldr	r5, [pc, #52]	@ (80052f4 <__libc_init_array+0x38>)
 80052c0:	4c0d      	ldr	r4, [pc, #52]	@ (80052f8 <__libc_init_array+0x3c>)
 80052c2:	1b64      	subs	r4, r4, r5
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	2600      	movs	r6, #0
 80052c8:	42a6      	cmp	r6, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	4d0b      	ldr	r5, [pc, #44]	@ (80052fc <__libc_init_array+0x40>)
 80052ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005300 <__libc_init_array+0x44>)
 80052d0:	f000 fe40 	bl	8005f54 <_init>
 80052d4:	1b64      	subs	r4, r4, r5
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	2600      	movs	r6, #0
 80052da:	42a6      	cmp	r6, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e4:	4798      	blx	r3
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ee:	4798      	blx	r3
 80052f0:	3601      	adds	r6, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	08006078 	.word	0x08006078
 80052f8:	08006078 	.word	0x08006078
 80052fc:	08006078 	.word	0x08006078
 8005300:	0800607c 	.word	0x0800607c

08005304 <__retarget_lock_init_recursive>:
 8005304:	4770      	bx	lr

08005306 <__retarget_lock_acquire_recursive>:
 8005306:	4770      	bx	lr

08005308 <__retarget_lock_release_recursive>:
 8005308:	4770      	bx	lr

0800530a <__sfputc_r>:
 800530a:	6893      	ldr	r3, [r2, #8]
 800530c:	3b01      	subs	r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	b410      	push	{r4}
 8005312:	6093      	str	r3, [r2, #8]
 8005314:	da08      	bge.n	8005328 <__sfputc_r+0x1e>
 8005316:	6994      	ldr	r4, [r2, #24]
 8005318:	42a3      	cmp	r3, r4
 800531a:	db01      	blt.n	8005320 <__sfputc_r+0x16>
 800531c:	290a      	cmp	r1, #10
 800531e:	d103      	bne.n	8005328 <__sfputc_r+0x1e>
 8005320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005324:	f000 bc5d 	b.w	8005be2 <__swbuf_r>
 8005328:	6813      	ldr	r3, [r2, #0]
 800532a:	1c58      	adds	r0, r3, #1
 800532c:	6010      	str	r0, [r2, #0]
 800532e:	7019      	strb	r1, [r3, #0]
 8005330:	4608      	mov	r0, r1
 8005332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005336:	4770      	bx	lr

08005338 <__sfputs_r>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	4606      	mov	r6, r0
 800533c:	460f      	mov	r7, r1
 800533e:	4614      	mov	r4, r2
 8005340:	18d5      	adds	r5, r2, r3
 8005342:	42ac      	cmp	r4, r5
 8005344:	d101      	bne.n	800534a <__sfputs_r+0x12>
 8005346:	2000      	movs	r0, #0
 8005348:	e007      	b.n	800535a <__sfputs_r+0x22>
 800534a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800534e:	463a      	mov	r2, r7
 8005350:	4630      	mov	r0, r6
 8005352:	f7ff ffda 	bl	800530a <__sfputc_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d1f3      	bne.n	8005342 <__sfputs_r+0xa>
 800535a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800535c <_vfiprintf_r>:
 800535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005360:	460d      	mov	r5, r1
 8005362:	b09d      	sub	sp, #116	@ 0x74
 8005364:	4614      	mov	r4, r2
 8005366:	4698      	mov	r8, r3
 8005368:	4606      	mov	r6, r0
 800536a:	b118      	cbz	r0, 8005374 <_vfiprintf_r+0x18>
 800536c:	6a03      	ldr	r3, [r0, #32]
 800536e:	b90b      	cbnz	r3, 8005374 <_vfiprintf_r+0x18>
 8005370:	f7ff fef0 	bl	8005154 <__sinit>
 8005374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005376:	07d9      	lsls	r1, r3, #31
 8005378:	d405      	bmi.n	8005386 <_vfiprintf_r+0x2a>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	059a      	lsls	r2, r3, #22
 800537e:	d402      	bmi.n	8005386 <_vfiprintf_r+0x2a>
 8005380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005382:	f7ff ffc0 	bl	8005306 <__retarget_lock_acquire_recursive>
 8005386:	89ab      	ldrh	r3, [r5, #12]
 8005388:	071b      	lsls	r3, r3, #28
 800538a:	d501      	bpl.n	8005390 <_vfiprintf_r+0x34>
 800538c:	692b      	ldr	r3, [r5, #16]
 800538e:	b99b      	cbnz	r3, 80053b8 <_vfiprintf_r+0x5c>
 8005390:	4629      	mov	r1, r5
 8005392:	4630      	mov	r0, r6
 8005394:	f000 fc64 	bl	8005c60 <__swsetup_r>
 8005398:	b170      	cbz	r0, 80053b8 <_vfiprintf_r+0x5c>
 800539a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800539c:	07dc      	lsls	r4, r3, #31
 800539e:	d504      	bpl.n	80053aa <_vfiprintf_r+0x4e>
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053a4:	b01d      	add	sp, #116	@ 0x74
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	89ab      	ldrh	r3, [r5, #12]
 80053ac:	0598      	lsls	r0, r3, #22
 80053ae:	d4f7      	bmi.n	80053a0 <_vfiprintf_r+0x44>
 80053b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053b2:	f7ff ffa9 	bl	8005308 <__retarget_lock_release_recursive>
 80053b6:	e7f3      	b.n	80053a0 <_vfiprintf_r+0x44>
 80053b8:	2300      	movs	r3, #0
 80053ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80053bc:	2320      	movs	r3, #32
 80053be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80053c6:	2330      	movs	r3, #48	@ 0x30
 80053c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005578 <_vfiprintf_r+0x21c>
 80053cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053d0:	f04f 0901 	mov.w	r9, #1
 80053d4:	4623      	mov	r3, r4
 80053d6:	469a      	mov	sl, r3
 80053d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053dc:	b10a      	cbz	r2, 80053e2 <_vfiprintf_r+0x86>
 80053de:	2a25      	cmp	r2, #37	@ 0x25
 80053e0:	d1f9      	bne.n	80053d6 <_vfiprintf_r+0x7a>
 80053e2:	ebba 0b04 	subs.w	fp, sl, r4
 80053e6:	d00b      	beq.n	8005400 <_vfiprintf_r+0xa4>
 80053e8:	465b      	mov	r3, fp
 80053ea:	4622      	mov	r2, r4
 80053ec:	4629      	mov	r1, r5
 80053ee:	4630      	mov	r0, r6
 80053f0:	f7ff ffa2 	bl	8005338 <__sfputs_r>
 80053f4:	3001      	adds	r0, #1
 80053f6:	f000 80a7 	beq.w	8005548 <_vfiprintf_r+0x1ec>
 80053fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053fc:	445a      	add	r2, fp
 80053fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8005400:	f89a 3000 	ldrb.w	r3, [sl]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 809f 	beq.w	8005548 <_vfiprintf_r+0x1ec>
 800540a:	2300      	movs	r3, #0
 800540c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005414:	f10a 0a01 	add.w	sl, sl, #1
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	9307      	str	r3, [sp, #28]
 800541c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005420:	931a      	str	r3, [sp, #104]	@ 0x68
 8005422:	4654      	mov	r4, sl
 8005424:	2205      	movs	r2, #5
 8005426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800542a:	4853      	ldr	r0, [pc, #332]	@ (8005578 <_vfiprintf_r+0x21c>)
 800542c:	f7fa ff00 	bl	8000230 <memchr>
 8005430:	9a04      	ldr	r2, [sp, #16]
 8005432:	b9d8      	cbnz	r0, 800546c <_vfiprintf_r+0x110>
 8005434:	06d1      	lsls	r1, r2, #27
 8005436:	bf44      	itt	mi
 8005438:	2320      	movmi	r3, #32
 800543a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800543e:	0713      	lsls	r3, r2, #28
 8005440:	bf44      	itt	mi
 8005442:	232b      	movmi	r3, #43	@ 0x2b
 8005444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005448:	f89a 3000 	ldrb.w	r3, [sl]
 800544c:	2b2a      	cmp	r3, #42	@ 0x2a
 800544e:	d015      	beq.n	800547c <_vfiprintf_r+0x120>
 8005450:	9a07      	ldr	r2, [sp, #28]
 8005452:	4654      	mov	r4, sl
 8005454:	2000      	movs	r0, #0
 8005456:	f04f 0c0a 	mov.w	ip, #10
 800545a:	4621      	mov	r1, r4
 800545c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005460:	3b30      	subs	r3, #48	@ 0x30
 8005462:	2b09      	cmp	r3, #9
 8005464:	d94b      	bls.n	80054fe <_vfiprintf_r+0x1a2>
 8005466:	b1b0      	cbz	r0, 8005496 <_vfiprintf_r+0x13a>
 8005468:	9207      	str	r2, [sp, #28]
 800546a:	e014      	b.n	8005496 <_vfiprintf_r+0x13a>
 800546c:	eba0 0308 	sub.w	r3, r0, r8
 8005470:	fa09 f303 	lsl.w	r3, r9, r3
 8005474:	4313      	orrs	r3, r2
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	46a2      	mov	sl, r4
 800547a:	e7d2      	b.n	8005422 <_vfiprintf_r+0xc6>
 800547c:	9b03      	ldr	r3, [sp, #12]
 800547e:	1d19      	adds	r1, r3, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	9103      	str	r1, [sp, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	bfbb      	ittet	lt
 8005488:	425b      	neglt	r3, r3
 800548a:	f042 0202 	orrlt.w	r2, r2, #2
 800548e:	9307      	strge	r3, [sp, #28]
 8005490:	9307      	strlt	r3, [sp, #28]
 8005492:	bfb8      	it	lt
 8005494:	9204      	strlt	r2, [sp, #16]
 8005496:	7823      	ldrb	r3, [r4, #0]
 8005498:	2b2e      	cmp	r3, #46	@ 0x2e
 800549a:	d10a      	bne.n	80054b2 <_vfiprintf_r+0x156>
 800549c:	7863      	ldrb	r3, [r4, #1]
 800549e:	2b2a      	cmp	r3, #42	@ 0x2a
 80054a0:	d132      	bne.n	8005508 <_vfiprintf_r+0x1ac>
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	1d1a      	adds	r2, r3, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	9203      	str	r2, [sp, #12]
 80054aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054ae:	3402      	adds	r4, #2
 80054b0:	9305      	str	r3, [sp, #20]
 80054b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005588 <_vfiprintf_r+0x22c>
 80054b6:	7821      	ldrb	r1, [r4, #0]
 80054b8:	2203      	movs	r2, #3
 80054ba:	4650      	mov	r0, sl
 80054bc:	f7fa feb8 	bl	8000230 <memchr>
 80054c0:	b138      	cbz	r0, 80054d2 <_vfiprintf_r+0x176>
 80054c2:	9b04      	ldr	r3, [sp, #16]
 80054c4:	eba0 000a 	sub.w	r0, r0, sl
 80054c8:	2240      	movs	r2, #64	@ 0x40
 80054ca:	4082      	lsls	r2, r0
 80054cc:	4313      	orrs	r3, r2
 80054ce:	3401      	adds	r4, #1
 80054d0:	9304      	str	r3, [sp, #16]
 80054d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d6:	4829      	ldr	r0, [pc, #164]	@ (800557c <_vfiprintf_r+0x220>)
 80054d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054dc:	2206      	movs	r2, #6
 80054de:	f7fa fea7 	bl	8000230 <memchr>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d03f      	beq.n	8005566 <_vfiprintf_r+0x20a>
 80054e6:	4b26      	ldr	r3, [pc, #152]	@ (8005580 <_vfiprintf_r+0x224>)
 80054e8:	bb1b      	cbnz	r3, 8005532 <_vfiprintf_r+0x1d6>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	3307      	adds	r3, #7
 80054ee:	f023 0307 	bic.w	r3, r3, #7
 80054f2:	3308      	adds	r3, #8
 80054f4:	9303      	str	r3, [sp, #12]
 80054f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054f8:	443b      	add	r3, r7
 80054fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80054fc:	e76a      	b.n	80053d4 <_vfiprintf_r+0x78>
 80054fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005502:	460c      	mov	r4, r1
 8005504:	2001      	movs	r0, #1
 8005506:	e7a8      	b.n	800545a <_vfiprintf_r+0xfe>
 8005508:	2300      	movs	r3, #0
 800550a:	3401      	adds	r4, #1
 800550c:	9305      	str	r3, [sp, #20]
 800550e:	4619      	mov	r1, r3
 8005510:	f04f 0c0a 	mov.w	ip, #10
 8005514:	4620      	mov	r0, r4
 8005516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800551a:	3a30      	subs	r2, #48	@ 0x30
 800551c:	2a09      	cmp	r2, #9
 800551e:	d903      	bls.n	8005528 <_vfiprintf_r+0x1cc>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0c6      	beq.n	80054b2 <_vfiprintf_r+0x156>
 8005524:	9105      	str	r1, [sp, #20]
 8005526:	e7c4      	b.n	80054b2 <_vfiprintf_r+0x156>
 8005528:	fb0c 2101 	mla	r1, ip, r1, r2
 800552c:	4604      	mov	r4, r0
 800552e:	2301      	movs	r3, #1
 8005530:	e7f0      	b.n	8005514 <_vfiprintf_r+0x1b8>
 8005532:	ab03      	add	r3, sp, #12
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	462a      	mov	r2, r5
 8005538:	4b12      	ldr	r3, [pc, #72]	@ (8005584 <_vfiprintf_r+0x228>)
 800553a:	a904      	add	r1, sp, #16
 800553c:	4630      	mov	r0, r6
 800553e:	f3af 8000 	nop.w
 8005542:	4607      	mov	r7, r0
 8005544:	1c78      	adds	r0, r7, #1
 8005546:	d1d6      	bne.n	80054f6 <_vfiprintf_r+0x19a>
 8005548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800554a:	07d9      	lsls	r1, r3, #31
 800554c:	d405      	bmi.n	800555a <_vfiprintf_r+0x1fe>
 800554e:	89ab      	ldrh	r3, [r5, #12]
 8005550:	059a      	lsls	r2, r3, #22
 8005552:	d402      	bmi.n	800555a <_vfiprintf_r+0x1fe>
 8005554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005556:	f7ff fed7 	bl	8005308 <__retarget_lock_release_recursive>
 800555a:	89ab      	ldrh	r3, [r5, #12]
 800555c:	065b      	lsls	r3, r3, #25
 800555e:	f53f af1f 	bmi.w	80053a0 <_vfiprintf_r+0x44>
 8005562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005564:	e71e      	b.n	80053a4 <_vfiprintf_r+0x48>
 8005566:	ab03      	add	r3, sp, #12
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	462a      	mov	r2, r5
 800556c:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <_vfiprintf_r+0x228>)
 800556e:	a904      	add	r1, sp, #16
 8005570:	4630      	mov	r0, r6
 8005572:	f000 f91b 	bl	80057ac <_printf_i>
 8005576:	e7e4      	b.n	8005542 <_vfiprintf_r+0x1e6>
 8005578:	0800603c 	.word	0x0800603c
 800557c:	08006046 	.word	0x08006046
 8005580:	00000000 	.word	0x00000000
 8005584:	08005339 	.word	0x08005339
 8005588:	08006042 	.word	0x08006042

0800558c <sbrk_aligned>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	4e0f      	ldr	r6, [pc, #60]	@ (80055cc <sbrk_aligned+0x40>)
 8005590:	460c      	mov	r4, r1
 8005592:	6831      	ldr	r1, [r6, #0]
 8005594:	4605      	mov	r5, r0
 8005596:	b911      	cbnz	r1, 800559e <sbrk_aligned+0x12>
 8005598:	f000 fc70 	bl	8005e7c <_sbrk_r>
 800559c:	6030      	str	r0, [r6, #0]
 800559e:	4621      	mov	r1, r4
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 fc6b 	bl	8005e7c <_sbrk_r>
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	d103      	bne.n	80055b2 <sbrk_aligned+0x26>
 80055aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80055ae:	4620      	mov	r0, r4
 80055b0:	bd70      	pop	{r4, r5, r6, pc}
 80055b2:	1cc4      	adds	r4, r0, #3
 80055b4:	f024 0403 	bic.w	r4, r4, #3
 80055b8:	42a0      	cmp	r0, r4
 80055ba:	d0f8      	beq.n	80055ae <sbrk_aligned+0x22>
 80055bc:	1a21      	subs	r1, r4, r0
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 fc5c 	bl	8005e7c <_sbrk_r>
 80055c4:	3001      	adds	r0, #1
 80055c6:	d1f2      	bne.n	80055ae <sbrk_aligned+0x22>
 80055c8:	e7ef      	b.n	80055aa <sbrk_aligned+0x1e>
 80055ca:	bf00      	nop
 80055cc:	20000524 	.word	0x20000524

080055d0 <_malloc_r>:
 80055d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d4:	1ccd      	adds	r5, r1, #3
 80055d6:	f025 0503 	bic.w	r5, r5, #3
 80055da:	3508      	adds	r5, #8
 80055dc:	2d0c      	cmp	r5, #12
 80055de:	bf38      	it	cc
 80055e0:	250c      	movcc	r5, #12
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	4606      	mov	r6, r0
 80055e6:	db01      	blt.n	80055ec <_malloc_r+0x1c>
 80055e8:	42a9      	cmp	r1, r5
 80055ea:	d904      	bls.n	80055f6 <_malloc_r+0x26>
 80055ec:	230c      	movs	r3, #12
 80055ee:	6033      	str	r3, [r6, #0]
 80055f0:	2000      	movs	r0, #0
 80055f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056cc <_malloc_r+0xfc>
 80055fa:	f000 faa3 	bl	8005b44 <__malloc_lock>
 80055fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005602:	461c      	mov	r4, r3
 8005604:	bb44      	cbnz	r4, 8005658 <_malloc_r+0x88>
 8005606:	4629      	mov	r1, r5
 8005608:	4630      	mov	r0, r6
 800560a:	f7ff ffbf 	bl	800558c <sbrk_aligned>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	4604      	mov	r4, r0
 8005612:	d158      	bne.n	80056c6 <_malloc_r+0xf6>
 8005614:	f8d8 4000 	ldr.w	r4, [r8]
 8005618:	4627      	mov	r7, r4
 800561a:	2f00      	cmp	r7, #0
 800561c:	d143      	bne.n	80056a6 <_malloc_r+0xd6>
 800561e:	2c00      	cmp	r4, #0
 8005620:	d04b      	beq.n	80056ba <_malloc_r+0xea>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	4639      	mov	r1, r7
 8005626:	4630      	mov	r0, r6
 8005628:	eb04 0903 	add.w	r9, r4, r3
 800562c:	f000 fc26 	bl	8005e7c <_sbrk_r>
 8005630:	4581      	cmp	r9, r0
 8005632:	d142      	bne.n	80056ba <_malloc_r+0xea>
 8005634:	6821      	ldr	r1, [r4, #0]
 8005636:	1a6d      	subs	r5, r5, r1
 8005638:	4629      	mov	r1, r5
 800563a:	4630      	mov	r0, r6
 800563c:	f7ff ffa6 	bl	800558c <sbrk_aligned>
 8005640:	3001      	adds	r0, #1
 8005642:	d03a      	beq.n	80056ba <_malloc_r+0xea>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	442b      	add	r3, r5
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	f8d8 3000 	ldr.w	r3, [r8]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	bb62      	cbnz	r2, 80056ac <_malloc_r+0xdc>
 8005652:	f8c8 7000 	str.w	r7, [r8]
 8005656:	e00f      	b.n	8005678 <_malloc_r+0xa8>
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	1b52      	subs	r2, r2, r5
 800565c:	d420      	bmi.n	80056a0 <_malloc_r+0xd0>
 800565e:	2a0b      	cmp	r2, #11
 8005660:	d917      	bls.n	8005692 <_malloc_r+0xc2>
 8005662:	1961      	adds	r1, r4, r5
 8005664:	42a3      	cmp	r3, r4
 8005666:	6025      	str	r5, [r4, #0]
 8005668:	bf18      	it	ne
 800566a:	6059      	strne	r1, [r3, #4]
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	bf08      	it	eq
 8005670:	f8c8 1000 	streq.w	r1, [r8]
 8005674:	5162      	str	r2, [r4, r5]
 8005676:	604b      	str	r3, [r1, #4]
 8005678:	4630      	mov	r0, r6
 800567a:	f000 fa69 	bl	8005b50 <__malloc_unlock>
 800567e:	f104 000b 	add.w	r0, r4, #11
 8005682:	1d23      	adds	r3, r4, #4
 8005684:	f020 0007 	bic.w	r0, r0, #7
 8005688:	1ac2      	subs	r2, r0, r3
 800568a:	bf1c      	itt	ne
 800568c:	1a1b      	subne	r3, r3, r0
 800568e:	50a3      	strne	r3, [r4, r2]
 8005690:	e7af      	b.n	80055f2 <_malloc_r+0x22>
 8005692:	6862      	ldr	r2, [r4, #4]
 8005694:	42a3      	cmp	r3, r4
 8005696:	bf0c      	ite	eq
 8005698:	f8c8 2000 	streq.w	r2, [r8]
 800569c:	605a      	strne	r2, [r3, #4]
 800569e:	e7eb      	b.n	8005678 <_malloc_r+0xa8>
 80056a0:	4623      	mov	r3, r4
 80056a2:	6864      	ldr	r4, [r4, #4]
 80056a4:	e7ae      	b.n	8005604 <_malloc_r+0x34>
 80056a6:	463c      	mov	r4, r7
 80056a8:	687f      	ldr	r7, [r7, #4]
 80056aa:	e7b6      	b.n	800561a <_malloc_r+0x4a>
 80056ac:	461a      	mov	r2, r3
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	d1fb      	bne.n	80056ac <_malloc_r+0xdc>
 80056b4:	2300      	movs	r3, #0
 80056b6:	6053      	str	r3, [r2, #4]
 80056b8:	e7de      	b.n	8005678 <_malloc_r+0xa8>
 80056ba:	230c      	movs	r3, #12
 80056bc:	6033      	str	r3, [r6, #0]
 80056be:	4630      	mov	r0, r6
 80056c0:	f000 fa46 	bl	8005b50 <__malloc_unlock>
 80056c4:	e794      	b.n	80055f0 <_malloc_r+0x20>
 80056c6:	6005      	str	r5, [r0, #0]
 80056c8:	e7d6      	b.n	8005678 <_malloc_r+0xa8>
 80056ca:	bf00      	nop
 80056cc:	20000528 	.word	0x20000528

080056d0 <_printf_common>:
 80056d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	4616      	mov	r6, r2
 80056d6:	4698      	mov	r8, r3
 80056d8:	688a      	ldr	r2, [r1, #8]
 80056da:	690b      	ldr	r3, [r1, #16]
 80056dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	bfb8      	it	lt
 80056e4:	4613      	movlt	r3, r2
 80056e6:	6033      	str	r3, [r6, #0]
 80056e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056ec:	4607      	mov	r7, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	b10a      	cbz	r2, 80056f6 <_printf_common+0x26>
 80056f2:	3301      	adds	r3, #1
 80056f4:	6033      	str	r3, [r6, #0]
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	0699      	lsls	r1, r3, #26
 80056fa:	bf42      	ittt	mi
 80056fc:	6833      	ldrmi	r3, [r6, #0]
 80056fe:	3302      	addmi	r3, #2
 8005700:	6033      	strmi	r3, [r6, #0]
 8005702:	6825      	ldr	r5, [r4, #0]
 8005704:	f015 0506 	ands.w	r5, r5, #6
 8005708:	d106      	bne.n	8005718 <_printf_common+0x48>
 800570a:	f104 0a19 	add.w	sl, r4, #25
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	6832      	ldr	r2, [r6, #0]
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	42ab      	cmp	r3, r5
 8005716:	dc26      	bgt.n	8005766 <_printf_common+0x96>
 8005718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	3b00      	subs	r3, #0
 8005720:	bf18      	it	ne
 8005722:	2301      	movne	r3, #1
 8005724:	0692      	lsls	r2, r2, #26
 8005726:	d42b      	bmi.n	8005780 <_printf_common+0xb0>
 8005728:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800572c:	4641      	mov	r1, r8
 800572e:	4638      	mov	r0, r7
 8005730:	47c8      	blx	r9
 8005732:	3001      	adds	r0, #1
 8005734:	d01e      	beq.n	8005774 <_printf_common+0xa4>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	6922      	ldr	r2, [r4, #16]
 800573a:	f003 0306 	and.w	r3, r3, #6
 800573e:	2b04      	cmp	r3, #4
 8005740:	bf02      	ittt	eq
 8005742:	68e5      	ldreq	r5, [r4, #12]
 8005744:	6833      	ldreq	r3, [r6, #0]
 8005746:	1aed      	subeq	r5, r5, r3
 8005748:	68a3      	ldr	r3, [r4, #8]
 800574a:	bf0c      	ite	eq
 800574c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005750:	2500      	movne	r5, #0
 8005752:	4293      	cmp	r3, r2
 8005754:	bfc4      	itt	gt
 8005756:	1a9b      	subgt	r3, r3, r2
 8005758:	18ed      	addgt	r5, r5, r3
 800575a:	2600      	movs	r6, #0
 800575c:	341a      	adds	r4, #26
 800575e:	42b5      	cmp	r5, r6
 8005760:	d11a      	bne.n	8005798 <_printf_common+0xc8>
 8005762:	2000      	movs	r0, #0
 8005764:	e008      	b.n	8005778 <_printf_common+0xa8>
 8005766:	2301      	movs	r3, #1
 8005768:	4652      	mov	r2, sl
 800576a:	4641      	mov	r1, r8
 800576c:	4638      	mov	r0, r7
 800576e:	47c8      	blx	r9
 8005770:	3001      	adds	r0, #1
 8005772:	d103      	bne.n	800577c <_printf_common+0xac>
 8005774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577c:	3501      	adds	r5, #1
 800577e:	e7c6      	b.n	800570e <_printf_common+0x3e>
 8005780:	18e1      	adds	r1, r4, r3
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	2030      	movs	r0, #48	@ 0x30
 8005786:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800578a:	4422      	add	r2, r4
 800578c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005790:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005794:	3302      	adds	r3, #2
 8005796:	e7c7      	b.n	8005728 <_printf_common+0x58>
 8005798:	2301      	movs	r3, #1
 800579a:	4622      	mov	r2, r4
 800579c:	4641      	mov	r1, r8
 800579e:	4638      	mov	r0, r7
 80057a0:	47c8      	blx	r9
 80057a2:	3001      	adds	r0, #1
 80057a4:	d0e6      	beq.n	8005774 <_printf_common+0xa4>
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7d9      	b.n	800575e <_printf_common+0x8e>
	...

080057ac <_printf_i>:
 80057ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	7e0f      	ldrb	r7, [r1, #24]
 80057b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057b4:	2f78      	cmp	r7, #120	@ 0x78
 80057b6:	4691      	mov	r9, r2
 80057b8:	4680      	mov	r8, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	469a      	mov	sl, r3
 80057be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057c2:	d807      	bhi.n	80057d4 <_printf_i+0x28>
 80057c4:	2f62      	cmp	r7, #98	@ 0x62
 80057c6:	d80a      	bhi.n	80057de <_printf_i+0x32>
 80057c8:	2f00      	cmp	r7, #0
 80057ca:	f000 80d2 	beq.w	8005972 <_printf_i+0x1c6>
 80057ce:	2f58      	cmp	r7, #88	@ 0x58
 80057d0:	f000 80b9 	beq.w	8005946 <_printf_i+0x19a>
 80057d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057dc:	e03a      	b.n	8005854 <_printf_i+0xa8>
 80057de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057e2:	2b15      	cmp	r3, #21
 80057e4:	d8f6      	bhi.n	80057d4 <_printf_i+0x28>
 80057e6:	a101      	add	r1, pc, #4	@ (adr r1, 80057ec <_printf_i+0x40>)
 80057e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ec:	08005845 	.word	0x08005845
 80057f0:	08005859 	.word	0x08005859
 80057f4:	080057d5 	.word	0x080057d5
 80057f8:	080057d5 	.word	0x080057d5
 80057fc:	080057d5 	.word	0x080057d5
 8005800:	080057d5 	.word	0x080057d5
 8005804:	08005859 	.word	0x08005859
 8005808:	080057d5 	.word	0x080057d5
 800580c:	080057d5 	.word	0x080057d5
 8005810:	080057d5 	.word	0x080057d5
 8005814:	080057d5 	.word	0x080057d5
 8005818:	08005959 	.word	0x08005959
 800581c:	08005883 	.word	0x08005883
 8005820:	08005913 	.word	0x08005913
 8005824:	080057d5 	.word	0x080057d5
 8005828:	080057d5 	.word	0x080057d5
 800582c:	0800597b 	.word	0x0800597b
 8005830:	080057d5 	.word	0x080057d5
 8005834:	08005883 	.word	0x08005883
 8005838:	080057d5 	.word	0x080057d5
 800583c:	080057d5 	.word	0x080057d5
 8005840:	0800591b 	.word	0x0800591b
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6032      	str	r2, [r6, #0]
 800584c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005850:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005854:	2301      	movs	r3, #1
 8005856:	e09d      	b.n	8005994 <_printf_i+0x1e8>
 8005858:	6833      	ldr	r3, [r6, #0]
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	1d19      	adds	r1, r3, #4
 800585e:	6031      	str	r1, [r6, #0]
 8005860:	0606      	lsls	r6, r0, #24
 8005862:	d501      	bpl.n	8005868 <_printf_i+0xbc>
 8005864:	681d      	ldr	r5, [r3, #0]
 8005866:	e003      	b.n	8005870 <_printf_i+0xc4>
 8005868:	0645      	lsls	r5, r0, #25
 800586a:	d5fb      	bpl.n	8005864 <_printf_i+0xb8>
 800586c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005870:	2d00      	cmp	r5, #0
 8005872:	da03      	bge.n	800587c <_printf_i+0xd0>
 8005874:	232d      	movs	r3, #45	@ 0x2d
 8005876:	426d      	negs	r5, r5
 8005878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800587c:	4859      	ldr	r0, [pc, #356]	@ (80059e4 <_printf_i+0x238>)
 800587e:	230a      	movs	r3, #10
 8005880:	e011      	b.n	80058a6 <_printf_i+0xfa>
 8005882:	6821      	ldr	r1, [r4, #0]
 8005884:	6833      	ldr	r3, [r6, #0]
 8005886:	0608      	lsls	r0, r1, #24
 8005888:	f853 5b04 	ldr.w	r5, [r3], #4
 800588c:	d402      	bmi.n	8005894 <_printf_i+0xe8>
 800588e:	0649      	lsls	r1, r1, #25
 8005890:	bf48      	it	mi
 8005892:	b2ad      	uxthmi	r5, r5
 8005894:	2f6f      	cmp	r7, #111	@ 0x6f
 8005896:	4853      	ldr	r0, [pc, #332]	@ (80059e4 <_printf_i+0x238>)
 8005898:	6033      	str	r3, [r6, #0]
 800589a:	bf14      	ite	ne
 800589c:	230a      	movne	r3, #10
 800589e:	2308      	moveq	r3, #8
 80058a0:	2100      	movs	r1, #0
 80058a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058a6:	6866      	ldr	r6, [r4, #4]
 80058a8:	60a6      	str	r6, [r4, #8]
 80058aa:	2e00      	cmp	r6, #0
 80058ac:	bfa2      	ittt	ge
 80058ae:	6821      	ldrge	r1, [r4, #0]
 80058b0:	f021 0104 	bicge.w	r1, r1, #4
 80058b4:	6021      	strge	r1, [r4, #0]
 80058b6:	b90d      	cbnz	r5, 80058bc <_printf_i+0x110>
 80058b8:	2e00      	cmp	r6, #0
 80058ba:	d04b      	beq.n	8005954 <_printf_i+0x1a8>
 80058bc:	4616      	mov	r6, r2
 80058be:	fbb5 f1f3 	udiv	r1, r5, r3
 80058c2:	fb03 5711 	mls	r7, r3, r1, r5
 80058c6:	5dc7      	ldrb	r7, [r0, r7]
 80058c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058cc:	462f      	mov	r7, r5
 80058ce:	42bb      	cmp	r3, r7
 80058d0:	460d      	mov	r5, r1
 80058d2:	d9f4      	bls.n	80058be <_printf_i+0x112>
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d10b      	bne.n	80058f0 <_printf_i+0x144>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	07df      	lsls	r7, r3, #31
 80058dc:	d508      	bpl.n	80058f0 <_printf_i+0x144>
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	6861      	ldr	r1, [r4, #4]
 80058e2:	4299      	cmp	r1, r3
 80058e4:	bfde      	ittt	le
 80058e6:	2330      	movle	r3, #48	@ 0x30
 80058e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80058f0:	1b92      	subs	r2, r2, r6
 80058f2:	6122      	str	r2, [r4, #16]
 80058f4:	f8cd a000 	str.w	sl, [sp]
 80058f8:	464b      	mov	r3, r9
 80058fa:	aa03      	add	r2, sp, #12
 80058fc:	4621      	mov	r1, r4
 80058fe:	4640      	mov	r0, r8
 8005900:	f7ff fee6 	bl	80056d0 <_printf_common>
 8005904:	3001      	adds	r0, #1
 8005906:	d14a      	bne.n	800599e <_printf_i+0x1f2>
 8005908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800590c:	b004      	add	sp, #16
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	f043 0320 	orr.w	r3, r3, #32
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	4833      	ldr	r0, [pc, #204]	@ (80059e8 <_printf_i+0x23c>)
 800591c:	2778      	movs	r7, #120	@ 0x78
 800591e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	6831      	ldr	r1, [r6, #0]
 8005926:	061f      	lsls	r7, r3, #24
 8005928:	f851 5b04 	ldr.w	r5, [r1], #4
 800592c:	d402      	bmi.n	8005934 <_printf_i+0x188>
 800592e:	065f      	lsls	r7, r3, #25
 8005930:	bf48      	it	mi
 8005932:	b2ad      	uxthmi	r5, r5
 8005934:	6031      	str	r1, [r6, #0]
 8005936:	07d9      	lsls	r1, r3, #31
 8005938:	bf44      	itt	mi
 800593a:	f043 0320 	orrmi.w	r3, r3, #32
 800593e:	6023      	strmi	r3, [r4, #0]
 8005940:	b11d      	cbz	r5, 800594a <_printf_i+0x19e>
 8005942:	2310      	movs	r3, #16
 8005944:	e7ac      	b.n	80058a0 <_printf_i+0xf4>
 8005946:	4827      	ldr	r0, [pc, #156]	@ (80059e4 <_printf_i+0x238>)
 8005948:	e7e9      	b.n	800591e <_printf_i+0x172>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f023 0320 	bic.w	r3, r3, #32
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	e7f6      	b.n	8005942 <_printf_i+0x196>
 8005954:	4616      	mov	r6, r2
 8005956:	e7bd      	b.n	80058d4 <_printf_i+0x128>
 8005958:	6833      	ldr	r3, [r6, #0]
 800595a:	6825      	ldr	r5, [r4, #0]
 800595c:	6961      	ldr	r1, [r4, #20]
 800595e:	1d18      	adds	r0, r3, #4
 8005960:	6030      	str	r0, [r6, #0]
 8005962:	062e      	lsls	r6, r5, #24
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	d501      	bpl.n	800596c <_printf_i+0x1c0>
 8005968:	6019      	str	r1, [r3, #0]
 800596a:	e002      	b.n	8005972 <_printf_i+0x1c6>
 800596c:	0668      	lsls	r0, r5, #25
 800596e:	d5fb      	bpl.n	8005968 <_printf_i+0x1bc>
 8005970:	8019      	strh	r1, [r3, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	4616      	mov	r6, r2
 8005978:	e7bc      	b.n	80058f4 <_printf_i+0x148>
 800597a:	6833      	ldr	r3, [r6, #0]
 800597c:	1d1a      	adds	r2, r3, #4
 800597e:	6032      	str	r2, [r6, #0]
 8005980:	681e      	ldr	r6, [r3, #0]
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	2100      	movs	r1, #0
 8005986:	4630      	mov	r0, r6
 8005988:	f7fa fc52 	bl	8000230 <memchr>
 800598c:	b108      	cbz	r0, 8005992 <_printf_i+0x1e6>
 800598e:	1b80      	subs	r0, r0, r6
 8005990:	6060      	str	r0, [r4, #4]
 8005992:	6863      	ldr	r3, [r4, #4]
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	2300      	movs	r3, #0
 8005998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599c:	e7aa      	b.n	80058f4 <_printf_i+0x148>
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	4632      	mov	r2, r6
 80059a2:	4649      	mov	r1, r9
 80059a4:	4640      	mov	r0, r8
 80059a6:	47d0      	blx	sl
 80059a8:	3001      	adds	r0, #1
 80059aa:	d0ad      	beq.n	8005908 <_printf_i+0x15c>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	079b      	lsls	r3, r3, #30
 80059b0:	d413      	bmi.n	80059da <_printf_i+0x22e>
 80059b2:	68e0      	ldr	r0, [r4, #12]
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	4298      	cmp	r0, r3
 80059b8:	bfb8      	it	lt
 80059ba:	4618      	movlt	r0, r3
 80059bc:	e7a6      	b.n	800590c <_printf_i+0x160>
 80059be:	2301      	movs	r3, #1
 80059c0:	4632      	mov	r2, r6
 80059c2:	4649      	mov	r1, r9
 80059c4:	4640      	mov	r0, r8
 80059c6:	47d0      	blx	sl
 80059c8:	3001      	adds	r0, #1
 80059ca:	d09d      	beq.n	8005908 <_printf_i+0x15c>
 80059cc:	3501      	adds	r5, #1
 80059ce:	68e3      	ldr	r3, [r4, #12]
 80059d0:	9903      	ldr	r1, [sp, #12]
 80059d2:	1a5b      	subs	r3, r3, r1
 80059d4:	42ab      	cmp	r3, r5
 80059d6:	dcf2      	bgt.n	80059be <_printf_i+0x212>
 80059d8:	e7eb      	b.n	80059b2 <_printf_i+0x206>
 80059da:	2500      	movs	r5, #0
 80059dc:	f104 0619 	add.w	r6, r4, #25
 80059e0:	e7f5      	b.n	80059ce <_printf_i+0x222>
 80059e2:	bf00      	nop
 80059e4:	0800604d 	.word	0x0800604d
 80059e8:	0800605e 	.word	0x0800605e

080059ec <__sflush_r>:
 80059ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	0716      	lsls	r6, r2, #28
 80059f6:	4605      	mov	r5, r0
 80059f8:	460c      	mov	r4, r1
 80059fa:	d454      	bmi.n	8005aa6 <__sflush_r+0xba>
 80059fc:	684b      	ldr	r3, [r1, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dc02      	bgt.n	8005a08 <__sflush_r+0x1c>
 8005a02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	dd48      	ble.n	8005a9a <__sflush_r+0xae>
 8005a08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	d045      	beq.n	8005a9a <__sflush_r+0xae>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a14:	682f      	ldr	r7, [r5, #0]
 8005a16:	6a21      	ldr	r1, [r4, #32]
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	d030      	beq.n	8005a7e <__sflush_r+0x92>
 8005a1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	0759      	lsls	r1, r3, #29
 8005a22:	d505      	bpl.n	8005a30 <__sflush_r+0x44>
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a2a:	b10b      	cbz	r3, 8005a30 <__sflush_r+0x44>
 8005a2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	2300      	movs	r3, #0
 8005a32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a34:	6a21      	ldr	r1, [r4, #32]
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b0      	blx	r6
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	d106      	bne.n	8005a4e <__sflush_r+0x62>
 8005a40:	6829      	ldr	r1, [r5, #0]
 8005a42:	291d      	cmp	r1, #29
 8005a44:	d82b      	bhi.n	8005a9e <__sflush_r+0xb2>
 8005a46:	4a2a      	ldr	r2, [pc, #168]	@ (8005af0 <__sflush_r+0x104>)
 8005a48:	410a      	asrs	r2, r1
 8005a4a:	07d6      	lsls	r6, r2, #31
 8005a4c:	d427      	bmi.n	8005a9e <__sflush_r+0xb2>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	6062      	str	r2, [r4, #4]
 8005a52:	04d9      	lsls	r1, r3, #19
 8005a54:	6922      	ldr	r2, [r4, #16]
 8005a56:	6022      	str	r2, [r4, #0]
 8005a58:	d504      	bpl.n	8005a64 <__sflush_r+0x78>
 8005a5a:	1c42      	adds	r2, r0, #1
 8005a5c:	d101      	bne.n	8005a62 <__sflush_r+0x76>
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	b903      	cbnz	r3, 8005a64 <__sflush_r+0x78>
 8005a62:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a66:	602f      	str	r7, [r5, #0]
 8005a68:	b1b9      	cbz	r1, 8005a9a <__sflush_r+0xae>
 8005a6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	d002      	beq.n	8005a78 <__sflush_r+0x8c>
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 fa24 	bl	8005ec0 <_free_r>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a7c:	e00d      	b.n	8005a9a <__sflush_r+0xae>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b0      	blx	r6
 8005a84:	4602      	mov	r2, r0
 8005a86:	1c50      	adds	r0, r2, #1
 8005a88:	d1c9      	bne.n	8005a1e <__sflush_r+0x32>
 8005a8a:	682b      	ldr	r3, [r5, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0c6      	beq.n	8005a1e <__sflush_r+0x32>
 8005a90:	2b1d      	cmp	r3, #29
 8005a92:	d001      	beq.n	8005a98 <__sflush_r+0xac>
 8005a94:	2b16      	cmp	r3, #22
 8005a96:	d11e      	bne.n	8005ad6 <__sflush_r+0xea>
 8005a98:	602f      	str	r7, [r5, #0]
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e022      	b.n	8005ae4 <__sflush_r+0xf8>
 8005a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aa2:	b21b      	sxth	r3, r3
 8005aa4:	e01b      	b.n	8005ade <__sflush_r+0xf2>
 8005aa6:	690f      	ldr	r7, [r1, #16]
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	d0f6      	beq.n	8005a9a <__sflush_r+0xae>
 8005aac:	0793      	lsls	r3, r2, #30
 8005aae:	680e      	ldr	r6, [r1, #0]
 8005ab0:	bf08      	it	eq
 8005ab2:	694b      	ldreq	r3, [r1, #20]
 8005ab4:	600f      	str	r7, [r1, #0]
 8005ab6:	bf18      	it	ne
 8005ab8:	2300      	movne	r3, #0
 8005aba:	eba6 0807 	sub.w	r8, r6, r7
 8005abe:	608b      	str	r3, [r1, #8]
 8005ac0:	f1b8 0f00 	cmp.w	r8, #0
 8005ac4:	dde9      	ble.n	8005a9a <__sflush_r+0xae>
 8005ac6:	6a21      	ldr	r1, [r4, #32]
 8005ac8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005aca:	4643      	mov	r3, r8
 8005acc:	463a      	mov	r2, r7
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b0      	blx	r6
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	dc08      	bgt.n	8005ae8 <__sflush_r+0xfc>
 8005ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae8:	4407      	add	r7, r0
 8005aea:	eba8 0800 	sub.w	r8, r8, r0
 8005aee:	e7e7      	b.n	8005ac0 <__sflush_r+0xd4>
 8005af0:	dfbffffe 	.word	0xdfbffffe

08005af4 <_fflush_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	690b      	ldr	r3, [r1, #16]
 8005af8:	4605      	mov	r5, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	b913      	cbnz	r3, 8005b04 <_fflush_r+0x10>
 8005afe:	2500      	movs	r5, #0
 8005b00:	4628      	mov	r0, r5
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	b118      	cbz	r0, 8005b0e <_fflush_r+0x1a>
 8005b06:	6a03      	ldr	r3, [r0, #32]
 8005b08:	b90b      	cbnz	r3, 8005b0e <_fflush_r+0x1a>
 8005b0a:	f7ff fb23 	bl	8005154 <__sinit>
 8005b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f3      	beq.n	8005afe <_fflush_r+0xa>
 8005b16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b18:	07d0      	lsls	r0, r2, #31
 8005b1a:	d404      	bmi.n	8005b26 <_fflush_r+0x32>
 8005b1c:	0599      	lsls	r1, r3, #22
 8005b1e:	d402      	bmi.n	8005b26 <_fflush_r+0x32>
 8005b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b22:	f7ff fbf0 	bl	8005306 <__retarget_lock_acquire_recursive>
 8005b26:	4628      	mov	r0, r5
 8005b28:	4621      	mov	r1, r4
 8005b2a:	f7ff ff5f 	bl	80059ec <__sflush_r>
 8005b2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b30:	07da      	lsls	r2, r3, #31
 8005b32:	4605      	mov	r5, r0
 8005b34:	d4e4      	bmi.n	8005b00 <_fflush_r+0xc>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	059b      	lsls	r3, r3, #22
 8005b3a:	d4e1      	bmi.n	8005b00 <_fflush_r+0xc>
 8005b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b3e:	f7ff fbe3 	bl	8005308 <__retarget_lock_release_recursive>
 8005b42:	e7dd      	b.n	8005b00 <_fflush_r+0xc>

08005b44 <__malloc_lock>:
 8005b44:	4801      	ldr	r0, [pc, #4]	@ (8005b4c <__malloc_lock+0x8>)
 8005b46:	f7ff bbde 	b.w	8005306 <__retarget_lock_acquire_recursive>
 8005b4a:	bf00      	nop
 8005b4c:	20000520 	.word	0x20000520

08005b50 <__malloc_unlock>:
 8005b50:	4801      	ldr	r0, [pc, #4]	@ (8005b58 <__malloc_unlock+0x8>)
 8005b52:	f7ff bbd9 	b.w	8005308 <__retarget_lock_release_recursive>
 8005b56:	bf00      	nop
 8005b58:	20000520 	.word	0x20000520

08005b5c <__sread>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	460c      	mov	r4, r1
 8005b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b64:	f000 f978 	bl	8005e58 <_read_r>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	bfab      	itete	ge
 8005b6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b70:	181b      	addge	r3, r3, r0
 8005b72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b76:	bfac      	ite	ge
 8005b78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b7a:	81a3      	strhlt	r3, [r4, #12]
 8005b7c:	bd10      	pop	{r4, pc}

08005b7e <__swrite>:
 8005b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b82:	461f      	mov	r7, r3
 8005b84:	898b      	ldrh	r3, [r1, #12]
 8005b86:	05db      	lsls	r3, r3, #23
 8005b88:	4605      	mov	r5, r0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	d505      	bpl.n	8005b9c <__swrite+0x1e>
 8005b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b94:	2302      	movs	r3, #2
 8005b96:	2200      	movs	r2, #0
 8005b98:	f000 f94c 	bl	8005e34 <_lseek_r>
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	4632      	mov	r2, r6
 8005baa:	463b      	mov	r3, r7
 8005bac:	4628      	mov	r0, r5
 8005bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb2:	f000 b973 	b.w	8005e9c <_write_r>

08005bb6 <__sseek>:
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	460c      	mov	r4, r1
 8005bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbe:	f000 f939 	bl	8005e34 <_lseek_r>
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	bf15      	itete	ne
 8005bc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bd2:	81a3      	strheq	r3, [r4, #12]
 8005bd4:	bf18      	it	ne
 8005bd6:	81a3      	strhne	r3, [r4, #12]
 8005bd8:	bd10      	pop	{r4, pc}

08005bda <__sclose>:
 8005bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bde:	f000 b8f7 	b.w	8005dd0 <_close_r>

08005be2 <__swbuf_r>:
 8005be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be4:	460e      	mov	r6, r1
 8005be6:	4614      	mov	r4, r2
 8005be8:	4605      	mov	r5, r0
 8005bea:	b118      	cbz	r0, 8005bf4 <__swbuf_r+0x12>
 8005bec:	6a03      	ldr	r3, [r0, #32]
 8005bee:	b90b      	cbnz	r3, 8005bf4 <__swbuf_r+0x12>
 8005bf0:	f7ff fab0 	bl	8005154 <__sinit>
 8005bf4:	69a3      	ldr	r3, [r4, #24]
 8005bf6:	60a3      	str	r3, [r4, #8]
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	071a      	lsls	r2, r3, #28
 8005bfc:	d501      	bpl.n	8005c02 <__swbuf_r+0x20>
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	b943      	cbnz	r3, 8005c14 <__swbuf_r+0x32>
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 f82b 	bl	8005c60 <__swsetup_r>
 8005c0a:	b118      	cbz	r0, 8005c14 <__swbuf_r+0x32>
 8005c0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005c10:	4638      	mov	r0, r7
 8005c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	6922      	ldr	r2, [r4, #16]
 8005c18:	1a98      	subs	r0, r3, r2
 8005c1a:	6963      	ldr	r3, [r4, #20]
 8005c1c:	b2f6      	uxtb	r6, r6
 8005c1e:	4283      	cmp	r3, r0
 8005c20:	4637      	mov	r7, r6
 8005c22:	dc05      	bgt.n	8005c30 <__swbuf_r+0x4e>
 8005c24:	4621      	mov	r1, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7ff ff64 	bl	8005af4 <_fflush_r>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d1ed      	bne.n	8005c0c <__swbuf_r+0x2a>
 8005c30:	68a3      	ldr	r3, [r4, #8]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	60a3      	str	r3, [r4, #8]
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	6022      	str	r2, [r4, #0]
 8005c3c:	701e      	strb	r6, [r3, #0]
 8005c3e:	6962      	ldr	r2, [r4, #20]
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d004      	beq.n	8005c50 <__swbuf_r+0x6e>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	07db      	lsls	r3, r3, #31
 8005c4a:	d5e1      	bpl.n	8005c10 <__swbuf_r+0x2e>
 8005c4c:	2e0a      	cmp	r6, #10
 8005c4e:	d1df      	bne.n	8005c10 <__swbuf_r+0x2e>
 8005c50:	4621      	mov	r1, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7ff ff4e 	bl	8005af4 <_fflush_r>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d0d9      	beq.n	8005c10 <__swbuf_r+0x2e>
 8005c5c:	e7d6      	b.n	8005c0c <__swbuf_r+0x2a>
	...

08005c60 <__swsetup_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4b29      	ldr	r3, [pc, #164]	@ (8005d08 <__swsetup_r+0xa8>)
 8005c64:	4605      	mov	r5, r0
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	460c      	mov	r4, r1
 8005c6a:	b118      	cbz	r0, 8005c74 <__swsetup_r+0x14>
 8005c6c:	6a03      	ldr	r3, [r0, #32]
 8005c6e:	b90b      	cbnz	r3, 8005c74 <__swsetup_r+0x14>
 8005c70:	f7ff fa70 	bl	8005154 <__sinit>
 8005c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c78:	0719      	lsls	r1, r3, #28
 8005c7a:	d422      	bmi.n	8005cc2 <__swsetup_r+0x62>
 8005c7c:	06da      	lsls	r2, r3, #27
 8005c7e:	d407      	bmi.n	8005c90 <__swsetup_r+0x30>
 8005c80:	2209      	movs	r2, #9
 8005c82:	602a      	str	r2, [r5, #0]
 8005c84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c88:	81a3      	strh	r3, [r4, #12]
 8005c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c8e:	e033      	b.n	8005cf8 <__swsetup_r+0x98>
 8005c90:	0758      	lsls	r0, r3, #29
 8005c92:	d512      	bpl.n	8005cba <__swsetup_r+0x5a>
 8005c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c96:	b141      	cbz	r1, 8005caa <__swsetup_r+0x4a>
 8005c98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c9c:	4299      	cmp	r1, r3
 8005c9e:	d002      	beq.n	8005ca6 <__swsetup_r+0x46>
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 f90d 	bl	8005ec0 <_free_r>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005cb0:	81a3      	strh	r3, [r4, #12]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	f043 0308 	orr.w	r3, r3, #8
 8005cc0:	81a3      	strh	r3, [r4, #12]
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	b94b      	cbnz	r3, 8005cda <__swsetup_r+0x7a>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd0:	d003      	beq.n	8005cda <__swsetup_r+0x7a>
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 f83f 	bl	8005d58 <__smakebuf_r>
 8005cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cde:	f013 0201 	ands.w	r2, r3, #1
 8005ce2:	d00a      	beq.n	8005cfa <__swsetup_r+0x9a>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	60a2      	str	r2, [r4, #8]
 8005ce8:	6962      	ldr	r2, [r4, #20]
 8005cea:	4252      	negs	r2, r2
 8005cec:	61a2      	str	r2, [r4, #24]
 8005cee:	6922      	ldr	r2, [r4, #16]
 8005cf0:	b942      	cbnz	r2, 8005d04 <__swsetup_r+0xa4>
 8005cf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cf6:	d1c5      	bne.n	8005c84 <__swsetup_r+0x24>
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	0799      	lsls	r1, r3, #30
 8005cfc:	bf58      	it	pl
 8005cfe:	6962      	ldrpl	r2, [r4, #20]
 8005d00:	60a2      	str	r2, [r4, #8]
 8005d02:	e7f4      	b.n	8005cee <__swsetup_r+0x8e>
 8005d04:	2000      	movs	r0, #0
 8005d06:	e7f7      	b.n	8005cf8 <__swsetup_r+0x98>
 8005d08:	20000018 	.word	0x20000018

08005d0c <__swhatbuf_r>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	460c      	mov	r4, r1
 8005d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d14:	2900      	cmp	r1, #0
 8005d16:	b096      	sub	sp, #88	@ 0x58
 8005d18:	4615      	mov	r5, r2
 8005d1a:	461e      	mov	r6, r3
 8005d1c:	da0d      	bge.n	8005d3a <__swhatbuf_r+0x2e>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d24:	f04f 0100 	mov.w	r1, #0
 8005d28:	bf14      	ite	ne
 8005d2a:	2340      	movne	r3, #64	@ 0x40
 8005d2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d30:	2000      	movs	r0, #0
 8005d32:	6031      	str	r1, [r6, #0]
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	b016      	add	sp, #88	@ 0x58
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
 8005d3a:	466a      	mov	r2, sp
 8005d3c:	f000 f858 	bl	8005df0 <_fstat_r>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	dbec      	blt.n	8005d1e <__swhatbuf_r+0x12>
 8005d44:	9901      	ldr	r1, [sp, #4]
 8005d46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d4e:	4259      	negs	r1, r3
 8005d50:	4159      	adcs	r1, r3
 8005d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d56:	e7eb      	b.n	8005d30 <__swhatbuf_r+0x24>

08005d58 <__smakebuf_r>:
 8005d58:	898b      	ldrh	r3, [r1, #12]
 8005d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d5c:	079d      	lsls	r5, r3, #30
 8005d5e:	4606      	mov	r6, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	d507      	bpl.n	8005d74 <__smakebuf_r+0x1c>
 8005d64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	6123      	str	r3, [r4, #16]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	6163      	str	r3, [r4, #20]
 8005d70:	b003      	add	sp, #12
 8005d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d74:	ab01      	add	r3, sp, #4
 8005d76:	466a      	mov	r2, sp
 8005d78:	f7ff ffc8 	bl	8005d0c <__swhatbuf_r>
 8005d7c:	9f00      	ldr	r7, [sp, #0]
 8005d7e:	4605      	mov	r5, r0
 8005d80:	4639      	mov	r1, r7
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff fc24 	bl	80055d0 <_malloc_r>
 8005d88:	b948      	cbnz	r0, 8005d9e <__smakebuf_r+0x46>
 8005d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8e:	059a      	lsls	r2, r3, #22
 8005d90:	d4ee      	bmi.n	8005d70 <__smakebuf_r+0x18>
 8005d92:	f023 0303 	bic.w	r3, r3, #3
 8005d96:	f043 0302 	orr.w	r3, r3, #2
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	e7e2      	b.n	8005d64 <__smakebuf_r+0xc>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	6020      	str	r0, [r4, #0]
 8005da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	9b01      	ldr	r3, [sp, #4]
 8005daa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005dae:	b15b      	cbz	r3, 8005dc8 <__smakebuf_r+0x70>
 8005db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005db4:	4630      	mov	r0, r6
 8005db6:	f000 f82d 	bl	8005e14 <_isatty_r>
 8005dba:	b128      	cbz	r0, 8005dc8 <__smakebuf_r+0x70>
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	f043 0301 	orr.w	r3, r3, #1
 8005dc6:	81a3      	strh	r3, [r4, #12]
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	431d      	orrs	r5, r3
 8005dcc:	81a5      	strh	r5, [r4, #12]
 8005dce:	e7cf      	b.n	8005d70 <__smakebuf_r+0x18>

08005dd0 <_close_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4d06      	ldr	r5, [pc, #24]	@ (8005dec <_close_r+0x1c>)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	4608      	mov	r0, r1
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	f7fb fbe9 	bl	80015b2 <_close>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_close_r+0x1a>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_close_r+0x1a>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	2000052c 	.word	0x2000052c

08005df0 <_fstat_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d07      	ldr	r5, [pc, #28]	@ (8005e10 <_fstat_r+0x20>)
 8005df4:	2300      	movs	r3, #0
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	f7fb fbe4 	bl	80015ca <_fstat>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	d102      	bne.n	8005e0c <_fstat_r+0x1c>
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	b103      	cbz	r3, 8005e0c <_fstat_r+0x1c>
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000052c 	.word	0x2000052c

08005e14 <_isatty_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4d06      	ldr	r5, [pc, #24]	@ (8005e30 <_isatty_r+0x1c>)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	f7fb fbe3 	bl	80015ea <_isatty>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_isatty_r+0x1a>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_isatty_r+0x1a>
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	2000052c 	.word	0x2000052c

08005e34 <_lseek_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d07      	ldr	r5, [pc, #28]	@ (8005e54 <_lseek_r+0x20>)
 8005e38:	4604      	mov	r4, r0
 8005e3a:	4608      	mov	r0, r1
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	602a      	str	r2, [r5, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f7fb fbdc 	bl	8001600 <_lseek>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_lseek_r+0x1e>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_lseek_r+0x1e>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	2000052c 	.word	0x2000052c

08005e58 <_read_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d07      	ldr	r5, [pc, #28]	@ (8005e78 <_read_r+0x20>)
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	4608      	mov	r0, r1
 8005e60:	4611      	mov	r1, r2
 8005e62:	2200      	movs	r2, #0
 8005e64:	602a      	str	r2, [r5, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f7fb fb6a 	bl	8001540 <_read>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_read_r+0x1e>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_read_r+0x1e>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	2000052c 	.word	0x2000052c

08005e7c <_sbrk_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4d06      	ldr	r5, [pc, #24]	@ (8005e98 <_sbrk_r+0x1c>)
 8005e80:	2300      	movs	r3, #0
 8005e82:	4604      	mov	r4, r0
 8005e84:	4608      	mov	r0, r1
 8005e86:	602b      	str	r3, [r5, #0]
 8005e88:	f7fb fbc8 	bl	800161c <_sbrk>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_sbrk_r+0x1a>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_sbrk_r+0x1a>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	2000052c 	.word	0x2000052c

08005e9c <_write_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	@ (8005ebc <_write_r+0x20>)
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7fb fb65 	bl	800157a <_write>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_write_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_write_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	2000052c 	.word	0x2000052c

08005ec0 <_free_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d041      	beq.n	8005f4c <_free_r+0x8c>
 8005ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ecc:	1f0c      	subs	r4, r1, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bfb8      	it	lt
 8005ed2:	18e4      	addlt	r4, r4, r3
 8005ed4:	f7ff fe36 	bl	8005b44 <__malloc_lock>
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f50 <_free_r+0x90>)
 8005eda:	6813      	ldr	r3, [r2, #0]
 8005edc:	b933      	cbnz	r3, 8005eec <_free_r+0x2c>
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	6014      	str	r4, [r2, #0]
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ee8:	f7ff be32 	b.w	8005b50 <__malloc_unlock>
 8005eec:	42a3      	cmp	r3, r4
 8005eee:	d908      	bls.n	8005f02 <_free_r+0x42>
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	1821      	adds	r1, r4, r0
 8005ef4:	428b      	cmp	r3, r1
 8005ef6:	bf01      	itttt	eq
 8005ef8:	6819      	ldreq	r1, [r3, #0]
 8005efa:	685b      	ldreq	r3, [r3, #4]
 8005efc:	1809      	addeq	r1, r1, r0
 8005efe:	6021      	streq	r1, [r4, #0]
 8005f00:	e7ed      	b.n	8005ede <_free_r+0x1e>
 8005f02:	461a      	mov	r2, r3
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b10b      	cbz	r3, 8005f0c <_free_r+0x4c>
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	d9fa      	bls.n	8005f02 <_free_r+0x42>
 8005f0c:	6811      	ldr	r1, [r2, #0]
 8005f0e:	1850      	adds	r0, r2, r1
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	d10b      	bne.n	8005f2c <_free_r+0x6c>
 8005f14:	6820      	ldr	r0, [r4, #0]
 8005f16:	4401      	add	r1, r0
 8005f18:	1850      	adds	r0, r2, r1
 8005f1a:	4283      	cmp	r3, r0
 8005f1c:	6011      	str	r1, [r2, #0]
 8005f1e:	d1e0      	bne.n	8005ee2 <_free_r+0x22>
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	6053      	str	r3, [r2, #4]
 8005f26:	4408      	add	r0, r1
 8005f28:	6010      	str	r0, [r2, #0]
 8005f2a:	e7da      	b.n	8005ee2 <_free_r+0x22>
 8005f2c:	d902      	bls.n	8005f34 <_free_r+0x74>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	e7d6      	b.n	8005ee2 <_free_r+0x22>
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	1821      	adds	r1, r4, r0
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	bf04      	itt	eq
 8005f3c:	6819      	ldreq	r1, [r3, #0]
 8005f3e:	685b      	ldreq	r3, [r3, #4]
 8005f40:	6063      	str	r3, [r4, #4]
 8005f42:	bf04      	itt	eq
 8005f44:	1809      	addeq	r1, r1, r0
 8005f46:	6021      	streq	r1, [r4, #0]
 8005f48:	6054      	str	r4, [r2, #4]
 8005f4a:	e7ca      	b.n	8005ee2 <_free_r+0x22>
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000528 	.word	0x20000528

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
