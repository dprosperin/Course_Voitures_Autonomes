
lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800a6b0  0800a6b0  0000b6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac2c  0800ac2c  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac2c  0800ac2c  0000bc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac34  0800ac34  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac34  0800ac34  0000bc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac38  0800ac38  0000bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ac3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200001d4  0800ae10  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  0800ae10  0000ccd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e417  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002308  00000000  00000000  0001a61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0001c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000889  00000000  00000000  0001d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0f0  00000000  00000000  0001dce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e17b  00000000  00000000  0003bdd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b89b5  00000000  00000000  00049f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004224  00000000  00000000  0010294c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00106b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a694 	.word	0x0800a694

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a694 	.word	0x0800a694

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <automate_decode>:
 *      Author: davidprosperin
 */
#include <automate.h>

void automate_decode(uint8_t receivedByte)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    static state_automate_t next_state = FLAG_START1;
    static state_automate_t current_state;

    uint8_t quality = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]
    uint8_t constant_bit = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	75bb      	strb	r3, [r7, #22]
    uint8_t s = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	757b      	strb	r3, [r7, #21]
    uint8_t not_s = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	753b      	strb	r3, [r7, #20]

    uint8_t distance_low_byte = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	74fb      	strb	r3, [r7, #19]
    uint8_t distance_high_byte = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	74bb      	strb	r3, [r7, #18]

    uint8_t angle_low_byte = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	747b      	strb	r3, [r7, #17]
    uint8_t angle_high_byte = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	743b      	strb	r3, [r7, #16]

    float distance;
    float angle;

    current_state = next_state;
 800105e:	4b78      	ldr	r3, [pc, #480]	@ (8001240 <automate_decode+0x20c>)
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	4b78      	ldr	r3, [pc, #480]	@ (8001244 <automate_decode+0x210>)
 8001064:	701a      	strb	r2, [r3, #0]

    switch (current_state)
 8001066:	4b77      	ldr	r3, [pc, #476]	@ (8001244 <automate_decode+0x210>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b0b      	cmp	r3, #11
 800106c:	f200 80e4 	bhi.w	8001238 <automate_decode+0x204>
 8001070:	a201      	add	r2, pc, #4	@ (adr r2, 8001078 <automate_decode+0x44>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	080010a9 	.word	0x080010a9
 800107c:	080010b9 	.word	0x080010b9
 8001080:	080010d5 	.word	0x080010d5
 8001084:	080010e5 	.word	0x080010e5
 8001088:	080010f5 	.word	0x080010f5
 800108c:	08001105 	.word	0x08001105
 8001090:	08001115 	.word	0x08001115
 8001094:	0800112b 	.word	0x0800112b
 8001098:	08001169 	.word	0x08001169
 800109c:	0800118b 	.word	0x0800118b
 80010a0:	080011bf 	.word	0x080011bf
 80010a4:	080011cb 	.word	0x080011cb
    {
    case FLAG_START1 :
    	//printf("Etat courant : FLAG_START1\n");
    	if (receivedByte == 0xA5)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2ba5      	cmp	r3, #165	@ 0xa5
 80010ac:	f040 80b9 	bne.w	8001222 <automate_decode+0x1ee>
        {
             next_state = FLAG_START2;
 80010b0:	4b63      	ldr	r3, [pc, #396]	@ (8001240 <automate_decode+0x20c>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
        }
    break;
 80010b6:	e0b4      	b.n	8001222 <automate_decode+0x1ee>

    case FLAG_START2:
    	printf("Etat courant : FLAG_START2\n");
 80010b8:	4863      	ldr	r0, [pc, #396]	@ (8001248 <automate_decode+0x214>)
 80010ba:	f006 fd35 	bl	8007b28 <puts>
        if (receivedByte == 0x5A)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80010c2:	d103      	bne.n	80010cc <automate_decode+0x98>
        {
            next_state = RESPONSE_DESCRIPTOR1;
 80010c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001240 <automate_decode+0x20c>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	701a      	strb	r2, [r3, #0]
        } else {
        	next_state = FLAG_START1;
        }
    break;
 80010ca:	e0b5      	b.n	8001238 <automate_decode+0x204>
        	next_state = FLAG_START1;
 80010cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <automate_decode+0x20c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
    break;
 80010d2:	e0b1      	b.n	8001238 <automate_decode+0x204>

    case RESPONSE_DESCRIPTOR1:
    	if (receivedByte == 0x05)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	f040 80a5 	bne.w	8001226 <automate_decode+0x1f2>
    	{
    		next_state = RESPONSE_DESCRIPTOR2;
 80010dc:	4b58      	ldr	r3, [pc, #352]	@ (8001240 <automate_decode+0x20c>)
 80010de:	2203      	movs	r2, #3
 80010e0:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 80010e2:	e0a0      	b.n	8001226 <automate_decode+0x1f2>
    case RESPONSE_DESCRIPTOR2:
    	if (receivedByte == 0x00)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 809f 	bne.w	800122a <automate_decode+0x1f6>
    	{
    		next_state = RESPONSE_DESCRIPTOR3;
 80010ec:	4b54      	ldr	r3, [pc, #336]	@ (8001240 <automate_decode+0x20c>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 80010f2:	e09a      	b.n	800122a <automate_decode+0x1f6>

    case RESPONSE_DESCRIPTOR3:
        if (receivedByte == 0x00)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 8099 	bne.w	800122e <automate_decode+0x1fa>
        {
        	next_state = RESPONSE_DESCRIPTOR4;
 80010fc:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <automate_decode+0x20c>)
 80010fe:	2205      	movs	r2, #5
 8001100:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001102:	e094      	b.n	800122e <automate_decode+0x1fa>
    case RESPONSE_DESCRIPTOR4:
    	if (receivedByte == 0x40)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b40      	cmp	r3, #64	@ 0x40
 8001108:	f040 8093 	bne.w	8001232 <automate_decode+0x1fe>
    	{
    	    next_state = RESPONSE_DESCRIPTOR5;
 800110c:	4b4c      	ldr	r3, [pc, #304]	@ (8001240 <automate_decode+0x20c>)
 800110e:	2206      	movs	r2, #6
 8001110:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 8001112:	e08e      	b.n	8001232 <automate_decode+0x1fe>

    case RESPONSE_DESCRIPTOR5:
        if (receivedByte == 0x81)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b81      	cmp	r3, #129	@ 0x81
 8001118:	f040 808d 	bne.w	8001236 <automate_decode+0x202>
        {
        	printf("Response descriptor correctement lu\n");
 800111c:	484b      	ldr	r0, [pc, #300]	@ (800124c <automate_decode+0x218>)
 800111e:	f006 fd03 	bl	8007b28 <puts>
        	next_state = QUALITY;
 8001122:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <automate_decode+0x20c>)
 8001124:	2207      	movs	r2, #7
 8001126:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001128:	e085      	b.n	8001236 <automate_decode+0x202>

    case QUALITY:
    		quality = receivedByte >> 2;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	75fb      	strb	r3, [r7, #23]
    		not_s = (receivedByte >> 1) & 1;
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	085b      	lsrs	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	753b      	strb	r3, [r7, #20]
    		s = receivedByte & 1;
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	757b      	strb	r3, [r7, #21]

            if (!not_s == s)
 8001144:	7d3b      	ldrb	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	7d7b      	ldrb	r3, [r7, #21]
 8001154:	429a      	cmp	r2, r3
 8001156:	d103      	bne.n	8001160 <automate_decode+0x12c>
            {
            	//printf("Pass QUALITY : not S : %d S : %d, Quality : %d\n", not_s, s, quality);
            	next_state = ANGLE_FIRST_PART;
 8001158:	4b39      	ldr	r3, [pc, #228]	@ (8001240 <automate_decode+0x20c>)
 800115a:	2208      	movs	r2, #8
 800115c:	701a      	strb	r2, [r3, #0]

            } else {
            	//printf("No pass QUALITY : not S : %d S : %d, Quality : %d\n", not_s, s, quality);
            	next_state = QUALITY;
            }
    break;
 800115e:	e06b      	b.n	8001238 <automate_decode+0x204>
            	next_state = QUALITY;
 8001160:	4b37      	ldr	r3, [pc, #220]	@ (8001240 <automate_decode+0x20c>)
 8001162:	2207      	movs	r2, #7
 8001164:	701a      	strb	r2, [r3, #0]
    break;
 8001166:	e067      	b.n	8001238 <automate_decode+0x204>

    case ANGLE_FIRST_PART:
    	constant_bit = receivedByte & 0b1;
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	75bb      	strb	r3, [r7, #22]
    	angle_low_byte = receivedByte;
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	747b      	strb	r3, [r7, #17]

    	//printf("ANGLE_FIRST_PART\n");

        if (constant_bit)
 8001174:	7dbb      	ldrb	r3, [r7, #22]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <automate_decode+0x14e>
        {
            next_state = ANGLE_SECOND_PART;
 800117a:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <automate_decode+0x20c>)
 800117c:	2209      	movs	r2, #9
 800117e:	701a      	strb	r2, [r3, #0]
        } else {
        	next_state = QUALITY;
        }
    break;
 8001180:	e05a      	b.n	8001238 <automate_decode+0x204>
        	next_state = QUALITY;
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <automate_decode+0x20c>)
 8001184:	2207      	movs	r2, #7
 8001186:	701a      	strb	r2, [r3, #0]
    break;
 8001188:	e056      	b.n	8001238 <automate_decode+0x204>

    case ANGLE_SECOND_PART:
    	angle_high_byte = receivedByte;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	743b      	strb	r3, [r7, #16]

    	angle = (((uint16_t)(angle_high_byte) << 7) | ((uint16_t)(angle_low_byte) & 0x00FF)) / 64.0;
 800118e:	7c3b      	ldrb	r3, [r7, #16]
 8001190:	01da      	lsls	r2, r3, #7
 8001192:	7c7b      	ldrb	r3, [r7, #17]
 8001194:	4313      	orrs	r3, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9ec 	bl	8000574 <__aeabi_i2d>
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001250 <automate_decode+0x21c>)
 80011a2:	f7ff fb7b 	bl	800089c <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd43 	bl	8000c38 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	60bb      	str	r3, [r7, #8]

    	//printf("angle_high_byte : 0x%x angle_low_byte : 0x%x Angle %f degree\n", angle_high_byte, angle_low_byte, angle);

    	next_state = DISTANCE_FIRST_PART;
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <automate_decode+0x20c>)
 80011b8:	220a      	movs	r2, #10
 80011ba:	701a      	strb	r2, [r3, #0]
    break;
 80011bc:	e03c      	b.n	8001238 <automate_decode+0x204>

    case DISTANCE_FIRST_PART:
    	distance_low_byte = receivedByte;
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	74fb      	strb	r3, [r7, #19]

    	next_state = DISTANCE_SECOND_PART;
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <automate_decode+0x20c>)
 80011c4:	220b      	movs	r2, #11
 80011c6:	701a      	strb	r2, [r3, #0]

    break;
 80011c8:	e036      	b.n	8001238 <automate_decode+0x204>

    case DISTANCE_SECOND_PART:
    	distance_high_byte = receivedByte;
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	74bb      	strb	r3, [r7, #18]

    	distance = ((((uint16_t) distance_high_byte << 8) & 0xFF00 ) | ((uint16_t) distance_low_byte & 0x00FF)) / 4.0;
 80011ce:	7cbb      	ldrb	r3, [r7, #18]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	7cfb      	ldrb	r3, [r7, #19]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9cb 	bl	8000574 <__aeabi_i2d>
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <automate_decode+0x220>)
 80011e4:	f7ff fb5a 	bl	800089c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd22 	bl	8000c38 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]

    	//printf("distance_high_byte : 0x%x distance_low_byte : 0x%x Distance %3.6f mm\n", distance_high_byte, distance_low_byte, distance);

    	printf("(%f, %f)\n", angle, distance);
 80011f8:	68b8      	ldr	r0, [r7, #8]
 80011fa:	f7ff f9cd 	bl	8000598 <__aeabi_f2d>
 80011fe:	4604      	mov	r4, r0
 8001200:	460d      	mov	r5, r1
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff f9c8 	bl	8000598 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	e9cd 2300 	strd	r2, r3, [sp]
 8001210:	4622      	mov	r2, r4
 8001212:	462b      	mov	r3, r5
 8001214:	4810      	ldr	r0, [pc, #64]	@ (8001258 <automate_decode+0x224>)
 8001216:	f006 fc1f 	bl	8007a58 <iprintf>
        next_state = QUALITY;
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <automate_decode+0x20c>)
 800121c:	2207      	movs	r2, #7
 800121e:	701a      	strb	r2, [r3, #0]
    break;
 8001220:	e00a      	b.n	8001238 <automate_decode+0x204>
    break;
 8001222:	bf00      	nop
 8001224:	e008      	b.n	8001238 <automate_decode+0x204>
    	break;
 8001226:	bf00      	nop
 8001228:	e006      	b.n	8001238 <automate_decode+0x204>
    	break;
 800122a:	bf00      	nop
 800122c:	e004      	b.n	8001238 <automate_decode+0x204>
        break;
 800122e:	bf00      	nop
 8001230:	e002      	b.n	8001238 <automate_decode+0x204>
    	break;
 8001232:	bf00      	nop
 8001234:	e000      	b.n	8001238 <automate_decode+0x204>
        break;
 8001236:	bf00      	nop
    }
}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	200001f0 	.word	0x200001f0
 8001244:	200001f1 	.word	0x200001f1
 8001248:	0800a6b0 	.word	0x0800a6b0
 800124c:	0800a6cc 	.word	0x0800a6cc
 8001250:	40500000 	.word	0x40500000
 8001254:	40100000 	.word	0x40100000
 8001258:	0800a6f0 	.word	0x0800a6f0

0800125c <dequeue>:
 *
 * @param Variable
 * @retval Retourne True si élément est bien retiré du buffer False sinon
 */

bool dequeue(uint8_t *value) {
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
        return false;
    }*/

    // Si on peut lire

    uint32_t remainingByte = 2048 - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <dequeue+0x50>)
 8001266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001272:	60fb      	str	r3, [r7, #12]


    if (remainingByte > index_read)
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <dequeue+0x54>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	429a      	cmp	r2, r3
 800127c:	d90e      	bls.n	800129c <dequeue+0x40>
    {
    	*value = buffer[index_read];
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <dequeue+0x54>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <dequeue+0x58>)
 8001284:	5cd2      	ldrb	r2, [r2, r3]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	701a      	strb	r2, [r3, #0]

    	index_read = (index_read + 1) % 2048;  // Boucle autour
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <dequeue+0x54>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001294:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <dequeue+0x54>)
 8001296:	6013      	str	r3, [r2, #0]

    	return true;
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <dequeue+0x42>
    } else {
    	return false;
 800129c:	2300      	movs	r3, #0
    }

    //buffer_size--;
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200009f8 	.word	0x200009f8
 80012b0:	200001f4 	.word	0x200001f4
 80012b4:	200001f8 	.word	0x200001f8

080012b8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80012c0:	1d39      	adds	r1, r7, #4
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012c6:	2201      	movs	r2, #1
 80012c8:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <__io_putchar+0x20>)
 80012ca:	f002 fb13 	bl	80038f4 <HAL_UART_Transmit>

	return ch;
 80012ce:	687b      	ldr	r3, [r7, #4]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000a8c 	.word	0x20000a8c

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	@ 0x30
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e2:	f000 fc98 	bl	8001c16 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e6:	f000 f8cb 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ea:	f000 f9db 	bl	80016a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ee:	f000 f9af 	bl	8001650 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012f2:	f000 f95f 	bl	80015b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012f6:	f000 f90f 	bl	8001518 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Programme interface LIDAR\n");
 80012fa:	484c      	ldr	r0, [pc, #304]	@ (800142c <main+0x150>)
 80012fc:	f006 fc14 	bl	8007b28 <puts>
  printf("Compile le %s\n", __DATE__);
 8001300:	494b      	ldr	r1, [pc, #300]	@ (8001430 <main+0x154>)
 8001302:	484c      	ldr	r0, [pc, #304]	@ (8001434 <main+0x158>)
 8001304:	f006 fba8 	bl	8007a58 <iprintf>

    int i = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char message[40] = "";
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2224      	movs	r2, #36	@ 0x24
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f006 fc35 	bl	8007b88 <memset>

    HAL_UART_Receive_DMA(&LIDAR_HUART, buffer, sizeof(buffer));
 800131e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001322:	4945      	ldr	r1, [pc, #276]	@ (8001438 <main+0x15c>)
 8001324:	4845      	ldr	r0, [pc, #276]	@ (800143c <main+0x160>)
 8001326:	f002 fbbf 	bl	8003aa8 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1); // A laisser proche de la boucle while(1)
 800132a:	2201      	movs	r2, #1
 800132c:	4944      	ldr	r1, [pc, #272]	@ (8001440 <main+0x164>)
 800132e:	4845      	ldr	r0, [pc, #276]	@ (8001444 <main+0x168>)
 8001330:	f002 fb6e 	bl	8003a10 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_reception_uart2 == 1) {
 8001334:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <main+0x16c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d169      	bne.n	8001410 <main+0x134>
	  		  if (caractere == '\n') {
 800133c:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <main+0x164>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b0a      	cmp	r3, #10
 8001342:	d154      	bne.n	80013ee <main+0x112>
	  			  if (strstr(message, "START_SCAN") != NULL)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4941      	ldr	r1, [pc, #260]	@ (800144c <main+0x170>)
 8001348:	4618      	mov	r0, r3
 800134a:	f006 fc07 	bl	8007b5c <strstr>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <main+0x8e>
	  			  {
	  				printf("Demarrage du scan normal\n");
 8001354:	483e      	ldr	r0, [pc, #248]	@ (8001450 <main+0x174>)
 8001356:	f006 fbe7 	bl	8007b28 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_START_SCAN, LIDAR_COMMAND_START_SCAN_LEN, HAL_MAX_DELAY);
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135e:	2202      	movs	r2, #2
 8001360:	493c      	ldr	r1, [pc, #240]	@ (8001454 <main+0x178>)
 8001362:	4836      	ldr	r0, [pc, #216]	@ (800143c <main+0x160>)
 8001364:	f002 fac6 	bl	80038f4 <HAL_UART_Transmit>
 8001368:	e03d      	b.n	80013e6 <main+0x10a>
	  			  } else if (strstr(message, "STOP") != NULL)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	493a      	ldr	r1, [pc, #232]	@ (8001458 <main+0x17c>)
 800136e:	4618      	mov	r0, r3
 8001370:	f006 fbf4 	bl	8007b5c <strstr>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <main+0xb4>
	  			  {
	  				printf("Arret\n");
 800137a:	4838      	ldr	r0, [pc, #224]	@ (800145c <main+0x180>)
 800137c:	f006 fbd4 	bl	8007b28 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_STOP, LIDAR_COMMAND_STOP_LEN, HAL_MAX_DELAY);
 8001380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001384:	2202      	movs	r2, #2
 8001386:	4936      	ldr	r1, [pc, #216]	@ (8001460 <main+0x184>)
 8001388:	482c      	ldr	r0, [pc, #176]	@ (800143c <main+0x160>)
 800138a:	f002 fab3 	bl	80038f4 <HAL_UART_Transmit>
 800138e:	e02a      	b.n	80013e6 <main+0x10a>
	  			  } else if (strstr(message, "RESET") != NULL)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4934      	ldr	r1, [pc, #208]	@ (8001464 <main+0x188>)
 8001394:	4618      	mov	r0, r3
 8001396:	f006 fbe1 	bl	8007b5c <strstr>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00a      	beq.n	80013b6 <main+0xda>
	  			  {
	  				printf("Reset\n");
 80013a0:	4831      	ldr	r0, [pc, #196]	@ (8001468 <main+0x18c>)
 80013a2:	f006 fbc1 	bl	8007b28 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_RESET, LIDAR_COMMAND_RESET_LEN, HAL_MAX_DELAY);
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013aa:	2202      	movs	r2, #2
 80013ac:	492f      	ldr	r1, [pc, #188]	@ (800146c <main+0x190>)
 80013ae:	4823      	ldr	r0, [pc, #140]	@ (800143c <main+0x160>)
 80013b0:	f002 faa0 	bl	80038f4 <HAL_UART_Transmit>
 80013b4:	e017      	b.n	80013e6 <main+0x10a>
	  			  } else if (strstr(message, "GET_INFO") != NULL)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	492d      	ldr	r1, [pc, #180]	@ (8001470 <main+0x194>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f006 fbce 	bl	8007b5c <strstr>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <main+0x100>
	  			  {
	  				printf("RTFM ! <*_*>\n");
 80013c6:	482b      	ldr	r0, [pc, #172]	@ (8001474 <main+0x198>)
 80013c8:	f006 fbae 	bl	8007b28 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_GET_INFO, LIDAR_COMMAND_GET_INFO_LEN, HAL_MAX_DELAY);
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d0:	2202      	movs	r2, #2
 80013d2:	4929      	ldr	r1, [pc, #164]	@ (8001478 <main+0x19c>)
 80013d4:	4819      	ldr	r0, [pc, #100]	@ (800143c <main+0x160>)
 80013d6:	f002 fa8d 	bl	80038f4 <HAL_UART_Transmit>
 80013da:	e004      	b.n	80013e6 <main+0x10a>
	  			  } else {
	  				  printf("Commande non reconnue : %s\n", message);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4826      	ldr	r0, [pc, #152]	@ (800147c <main+0x1a0>)
 80013e2:	f006 fb39 	bl	8007a58 <iprintf>
	  			  }

	  			  message[0] = '\0';
 80013e6:	2300      	movs	r3, #0
 80013e8:	713b      	strb	r3, [r7, #4]
	  			  i = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  		  }

	  		  message[i++] = caractere;
 80013ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <main+0x164>)
 80013f6:	7812      	ldrb	r2, [r2, #0]
 80013f8:	3330      	adds	r3, #48	@ 0x30
 80013fa:	443b      	add	r3, r7
 80013fc:	f803 2c2c 	strb.w	r2, [r3, #-44]
	  		  flag_reception_uart2 = 0;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <main+0x16c>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]

	  		  HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 8001406:	2201      	movs	r2, #1
 8001408:	490d      	ldr	r1, [pc, #52]	@ (8001440 <main+0x164>)
 800140a:	480e      	ldr	r0, [pc, #56]	@ (8001444 <main+0x168>)
 800140c:	f002 fb00 	bl	8003a10 <HAL_UART_Receive_IT>

	  //{
	  	  //printf("Data remaining : %ld \n",  2048 - __HAL_DMA_GET_COUNTER(huart1.hdmarx));
		  //printf("(0,%ld)\n",  2048 - __HAL_DMA_GET_COUNTER(huart1.hdmarx));

		  uint8_t receivedByte = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	70fb      	strb	r3, [r7, #3]

		  if (dequeue(&receivedByte))
 8001414:	1cfb      	adds	r3, r7, #3
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff20 	bl	800125c <dequeue>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d088      	beq.n	8001334 <main+0x58>
		  {
			  //printf("Ox%x\n", receivedByte);

			  automate_decode(receivedByte);
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe05 	bl	8001034 <automate_decode>
  {
 800142a:	e783      	b.n	8001334 <main+0x58>
 800142c:	0800a6fc 	.word	0x0800a6fc
 8001430:	0800a718 	.word	0x0800a718
 8001434:	0800a724 	.word	0x0800a724
 8001438:	200001f8 	.word	0x200001f8
 800143c:	200009f8 	.word	0x200009f8
 8001440:	20000b82 	.word	0x20000b82
 8001444:	20000a8c 	.word	0x20000a8c
 8001448:	20000b80 	.word	0x20000b80
 800144c:	0800a734 	.word	0x0800a734
 8001450:	0800a740 	.word	0x0800a740
 8001454:	0800a75c 	.word	0x0800a75c
 8001458:	0800a760 	.word	0x0800a760
 800145c:	0800a768 	.word	0x0800a768
 8001460:	0800a770 	.word	0x0800a770
 8001464:	0800a774 	.word	0x0800a774
 8001468:	0800a77c 	.word	0x0800a77c
 800146c:	0800a784 	.word	0x0800a784
 8001470:	0800a788 	.word	0x0800a788
 8001474:	0800a794 	.word	0x0800a794
 8001478:	0800a7a4 	.word	0x0800a7a4
 800147c:	0800a7a8 	.word	0x0800a7a8

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b094      	sub	sp, #80	@ 0x50
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0318 	add.w	r3, r7, #24
 800148a:	2238      	movs	r2, #56	@ 0x38
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f006 fb7a 	bl	8007b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f001 fa04 	bl	80028b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	2340      	movs	r3, #64	@ 0x40
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ba:	2302      	movs	r3, #2
 80014bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014be:	2304      	movs	r3, #4
 80014c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014c2:	2355      	movs	r3, #85	@ 0x55
 80014c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fa9e 	bl	8002a18 <HAL_RCC_OscConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014e2:	f000 f949 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	230f      	movs	r3, #15
 80014e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ea:	2303      	movs	r3, #3
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2104      	movs	r1, #4
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fd9c 	bl	800303c <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800150a:	f000 f935 	bl	8001778 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800151c:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 800151e:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <MX_USART1_UART_Init+0x94>)
 8001520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001524:	4a22      	ldr	r2, [pc, #136]	@ (80015b0 <MX_USART1_UART_Init+0x98>)
 8001526:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 800153c:	220c      	movs	r2, #12
 800153e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155e:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001560:	f002 f978 	bl	8003854 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800156a:	f000 f905 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001572:	f004 fbd2 	bl	8005d1a <HAL_UARTEx_SetTxFifoThreshold>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800157c:	f000 f8fc 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	4809      	ldr	r0, [pc, #36]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001584:	f004 fc07 	bl	8005d96 <HAL_UARTEx_SetRxFifoThreshold>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800158e:	f000 f8f3 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_USART1_UART_Init+0x90>)
 8001594:	f004 fb88 	bl	8005ca8 <HAL_UARTEx_DisableFifoMode>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800159e:	f000 f8eb 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200009f8 	.word	0x200009f8
 80015ac:	40013800 	.word	0x40013800
 80015b0:	000f4240 	.word	0x000f4240

080015b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b8:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015ba:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <MX_USART2_UART_Init+0x94>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015c0:	4a22      	ldr	r2, [pc, #136]	@ (800164c <MX_USART2_UART_Init+0x98>)
 80015c2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015d8:	220c      	movs	r2, #12
 80015da:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015fa:	4812      	ldr	r0, [pc, #72]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 80015fc:	f002 f92a 	bl	8003854 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001606:	f000 f8b7 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	480d      	ldr	r0, [pc, #52]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 800160e:	f004 fb84 	bl	8005d1a <HAL_UARTEx_SetTxFifoThreshold>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001618:	f000 f8ae 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 8001620:	f004 fbb9 	bl	8005d96 <HAL_UARTEx_SetRxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800162a:	f000 f8a5 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_USART2_UART_Init+0x90>)
 8001630:	f004 fb3a 	bl	8005ca8 <HAL_UARTEx_DisableFifoMode>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800163a:	f000 f89d 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000a8c 	.word	0x20000a8c
 8001648:	40004400 	.word	0x40004400
 800164c:	000f4240 	.word	0x000f4240

08001650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_DMA_Init+0x50>)
 8001658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165a:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <MX_DMA_Init+0x50>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6493      	str	r3, [r2, #72]	@ 0x48
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_DMA_Init+0x50>)
 8001664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_DMA_Init+0x50>)
 8001670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001672:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <MX_DMA_Init+0x50>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6493      	str	r3, [r2, #72]	@ 0x48
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_DMA_Init+0x50>)
 800167c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	200b      	movs	r0, #11
 800168c:	f000 fc0f 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001690:	200b      	movs	r0, #11
 8001692:	f000 fc26 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <MX_GPIO_Init+0x78>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a17      	ldr	r2, [pc, #92]	@ (800171c <MX_GPIO_Init+0x78>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <MX_GPIO_Init+0x78>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_GPIO_Init+0x78>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	4a11      	ldr	r2, [pc, #68]	@ (800171c <MX_GPIO_Init+0x78>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_GPIO_Init+0x78>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f0:	480b      	ldr	r0, [pc, #44]	@ (8001720 <MX_GPIO_Init+0x7c>)
 80016f2:	f001 f8c5 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4619      	mov	r1, r3
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <MX_GPIO_Init+0x7c>)
 8001710:	f000 ff34 	bl	800257c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000
 8001720:	48000400 	.word	0x48000400

08001724 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <HAL_UART_RxCpltCallback+0x3c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d107      	bne.n	8001746 <HAL_UART_RxCpltCallback+0x22>
		flag_reception_uart2 = 1;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <HAL_UART_RxCpltCallback+0x40>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
		/*
		 * Relancer la réception dans l'interruption
	     */
		HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 800173c:	2201      	movs	r2, #1
 800173e:	490a      	ldr	r1, [pc, #40]	@ (8001768 <HAL_UART_RxCpltCallback+0x44>)
 8001740:	480a      	ldr	r0, [pc, #40]	@ (800176c <HAL_UART_RxCpltCallback+0x48>)
 8001742:	f002 f965 	bl	8003a10 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART1) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a09      	ldr	r2, [pc, #36]	@ (8001770 <HAL_UART_RxCpltCallback+0x4c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d102      	bne.n	8001756 <HAL_UART_RxCpltCallback+0x32>
		flag_reception_uart1 = 1;
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <HAL_UART_RxCpltCallback+0x50>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
	}
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40004400 	.word	0x40004400
 8001764:	20000b80 	.word	0x20000b80
 8001768:	20000b82 	.word	0x20000b82
 800176c:	20000a8c 	.word	0x20000a8c
 8001770:	40013800 	.word	0x40013800
 8001774:	20000b81 	.word	0x20000b81

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <Error_Handler+0x8>

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178e:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_MspInit+0x44>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6613      	str	r3, [r2, #96]	@ 0x60
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <HAL_MspInit+0x44>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x44>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017ba:	f001 f91d 	bl	80029f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09c      	sub	sp, #112	@ 0x70
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	f107 0318 	add.w	r3, r7, #24
 80017e8:	2244      	movs	r2, #68	@ 0x44
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 f9cb 	bl	8007b88 <memset>
  if(huart->Instance==USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001964 <HAL_UART_MspInit+0x198>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d16b      	bne.n	80018d4 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fe33 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001814:	f7ff ffb0 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 800181a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181c:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 800181e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001822:	6613      	str	r3, [r2, #96]	@ 0x60
 8001824:	4b50      	ldr	r3, [pc, #320]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 8001826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b4d      	ldr	r3, [pc, #308]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	4a4c      	ldr	r2, [pc, #304]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183c:	4b4a      	ldr	r3, [pc, #296]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001848:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800184c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800185a:	2307      	movs	r3, #7
 800185c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001868:	f000 fe88 	bl	800257c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800186c:	4b3f      	ldr	r3, [pc, #252]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 800186e:	4a40      	ldr	r2, [pc, #256]	@ (8001970 <HAL_UART_MspInit+0x1a4>)
 8001870:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001872:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 8001874:	2218      	movs	r2, #24
 8001876:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001878:	4b3c      	ldr	r3, [pc, #240]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187e:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001884:	4b39      	ldr	r3, [pc, #228]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 8001886:	2280      	movs	r2, #128	@ 0x80
 8001888:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188a:	4b38      	ldr	r3, [pc, #224]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001890:	4b36      	ldr	r3, [pc, #216]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001896:	4b35      	ldr	r3, [pc, #212]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 8001898:	2220      	movs	r2, #32
 800189a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800189c:	4b33      	ldr	r3, [pc, #204]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 800189e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018a4:	4831      	ldr	r0, [pc, #196]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 80018a6:	f000 fb37 	bl	8001f18 <HAL_DMA_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80018b0:	f7ff ff62 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a2d      	ldr	r2, [pc, #180]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 80018b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018bc:	4a2b      	ldr	r2, [pc, #172]	@ (800196c <HAL_UART_MspInit+0x1a0>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2025      	movs	r0, #37	@ 0x25
 80018c8:	f000 faf1 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018cc:	2025      	movs	r0, #37	@ 0x25
 80018ce:	f000 fb08 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d2:	e043      	b.n	800195c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a26      	ldr	r2, [pc, #152]	@ (8001974 <HAL_UART_MspInit+0x1a8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d13e      	bne.n	800195c <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018de:	2302      	movs	r3, #2
 80018e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e6:	f107 0318 	add.w	r3, r7, #24
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fdc2 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_UART_MspInit+0x12e>
      Error_Handler();
 80018f6:	f7ff ff3f 	bl	8001778 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001904:	6593      	str	r3, [r2, #88]	@ 0x58
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_UART_MspInit+0x19c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800192a:	230c      	movs	r3, #12
 800192c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193a:	2307      	movs	r3, #7
 800193c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001948:	f000 fe18 	bl	800257c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2026      	movs	r0, #38	@ 0x26
 8001952:	f000 faac 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001956:	2026      	movs	r0, #38	@ 0x26
 8001958:	f000 fac3 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3770      	adds	r7, #112	@ 0x70
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013800 	.word	0x40013800
 8001968:	40021000 	.word	0x40021000
 800196c:	20000b20 	.word	0x20000b20
 8001970:	40020008 	.word	0x40020008
 8001974:	40004400 	.word	0x40004400

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <NMI_Handler+0x4>

08001980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <MemManage_Handler+0x4>

08001990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <UsageFault_Handler+0x4>

080019a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f000 f975 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <DMA1_Channel1_IRQHandler+0x10>)
 80019de:	f000 fc7e 	bl	80022de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000b20 	.word	0x20000b20

080019ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <USART1_IRQHandler+0x10>)
 80019f2:	f002 f8a5 	bl	8003b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200009f8 	.word	0x200009f8

08001a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <USART2_IRQHandler+0x10>)
 8001a06:	f002 f89b 	bl	8003b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000a8c 	.word	0x20000a8c

08001a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_kill>:

int _kill(int pid, int sig)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a2e:	f006 f8b7 	bl	8007ba0 <__errno>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2216      	movs	r2, #22
 8001a36:	601a      	str	r2, [r3, #0]
  return -1;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_exit>:

void _exit (int status)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffe7 	bl	8001a24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <_exit+0x12>

08001a5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e00a      	b.n	8001a82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a6c:	f3af 8000 	nop.w
 8001a70:	4601      	mov	r1, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	b2ca      	uxtb	r2, r1
 8001a7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf0      	blt.n	8001a6c <_read+0x12>
  }

  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e009      	b.n	8001aba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	60ba      	str	r2, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fc02 	bl	80012b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbf1      	blt.n	8001aa6 <_write+0x12>
  }
  return len;
 8001ac2:	687b      	ldr	r3, [r7, #4]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_close>:

int _close(int file)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af4:	605a      	str	r2, [r3, #4]
  return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_isatty>:

int _isatty(int file)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f006 f81c 	bl	8007ba0 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20008000 	.word	0x20008000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	20000b84 	.word	0x20000b84
 8001b9c:	20000cd8 	.word	0x20000cd8

08001ba0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc4:	480d      	ldr	r0, [pc, #52]	@ (8001bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc8:	f7ff ffea 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	@ (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	@ (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f005 ffdb 	bl	8007bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf6:	f7ff fb71 	bl	80012dc <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   r0, =_estack
 8001bfc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c08:	0800ac3c 	.word	0x0800ac3c
  ldr r2, =_sbss
 8001c0c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c10:	20000cd8 	.word	0x20000cd8

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>

08001c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f939 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f80e 	bl	8001c48 <HAL_InitTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	e001      	b.n	8001c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c38:	f7ff fda4 	bl	8001784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_InitTick+0x68>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d022      	beq.n	8001ca2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_InitTick+0x6c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_InitTick+0x68>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f944 	bl	8001efe <HAL_SYSTICK_Config>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10f      	bne.n	8001c9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	d809      	bhi.n	8001c96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c82:	2200      	movs	r2, #0
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c8a:	f000 f910 	bl	8001eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <HAL_InitTick+0x70>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e007      	b.n	8001ca6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e004      	b.n	8001ca6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_IncTick+0x1c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_IncTick+0x20>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a03      	ldr	r2, [pc, #12]	@ (8001cd8 <HAL_IncTick+0x1c>)
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000b88 	.word	0x20000b88
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000b88 	.word	0x20000b88

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	@ (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	@ (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	@ (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	@ 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e78:	f7ff ff8e 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff29 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff40 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff90 	bl	8001dec <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5f 	bl	8001d98 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff33 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa4 	bl	8001e54 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e08d      	b.n	8002046 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <HAL_DMA_Init+0x138>)
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d80f      	bhi.n	8001f56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b45      	ldr	r3, [pc, #276]	@ (8002054 <HAL_DMA_Init+0x13c>)
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a45      	ldr	r2, [pc, #276]	@ (8002058 <HAL_DMA_Init+0x140>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	009a      	lsls	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a42      	ldr	r2, [pc, #264]	@ (800205c <HAL_DMA_Init+0x144>)
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f54:	e00e      	b.n	8001f74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b40      	ldr	r3, [pc, #256]	@ (8002060 <HAL_DMA_Init+0x148>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a3d      	ldr	r2, [pc, #244]	@ (8002058 <HAL_DMA_Init+0x140>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a3c      	ldr	r2, [pc, #240]	@ (8002064 <HAL_DMA_Init+0x14c>)
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fa76 	bl	80024b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fd4:	d102      	bne.n	8001fdc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ff0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_DMA_Init+0x104>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d80c      	bhi.n	800201c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fa96 	bl	8002534 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e008      	b.n	800202e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40020407 	.word	0x40020407
 8002054:	bffdfff8 	.word	0xbffdfff8
 8002058:	cccccccd 	.word	0xcccccccd
 800205c:	40020000 	.word	0x40020000
 8002060:	bffdfbf8 	.word	0xbffdfbf8
 8002064:	40020400 	.word	0x40020400

08002068 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Start_IT+0x20>
 8002084:	2302      	movs	r3, #2
 8002086:	e066      	b.n	8002156 <HAL_DMA_Start_IT+0xee>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d155      	bne.n	8002148 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f9bb 	bl	800243c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 020e 	orr.w	r2, r2, #14
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e00f      	b.n	8002100 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0204 	bic.w	r2, r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 020a 	orr.w	r2, r2, #10
 80020fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800211c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002134:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e005      	b.n	8002154 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002150:	2302      	movs	r3, #2
 8002152:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002154:	7dfb      	ldrb	r3, [r7, #23]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d005      	beq.n	8002182 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2204      	movs	r2, #4
 800217a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e037      	b.n	80021f2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 020e 	bic.w	r2, r2, #14
 8002190:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021a0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f003 021f 	and.w	r2, r3, #31
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021ce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00c      	beq.n	80021f2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021f0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d00d      	beq.n	8002244 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2204      	movs	r2, #4
 800222c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e047      	b.n	80022d4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 020e 	bic.w	r2, r2, #14
 8002252:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002272:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002290:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00c      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
    }
  }
  return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2204      	movs	r2, #4
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d026      	beq.n	8002358 <HAL_DMA_IRQHandler+0x7a>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d021      	beq.n	8002358 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0204 	bic.w	r2, r2, #4
 8002330:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f003 021f 	and.w	r2, r3, #31
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	2104      	movs	r1, #4
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	2b00      	cmp	r3, #0
 800234c:	d071      	beq.n	8002432 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002356:	e06c      	b.n	8002432 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2202      	movs	r2, #2
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d02e      	beq.n	80023ca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d029      	beq.n	80023ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10b      	bne.n	800239c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 020a 	bic.w	r2, r2, #10
 8002392:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	2102      	movs	r1, #2
 80023aa:	fa01 f202 	lsl.w	r2, r1, r2
 80023ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d038      	beq.n	8002432 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023c8:	e033      	b.n	8002432 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2208      	movs	r2, #8
 80023d4:	409a      	lsls	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02a      	beq.n	8002434 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d025      	beq.n	8002434 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 020e 	bic.w	r2, r2, #14
 80023f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002432:	bf00      	nop
 8002434:	bf00      	nop
}
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002452:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002464:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f003 021f 	and.w	r2, r3, #31
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d108      	bne.n	800249c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800249a:	e007      	b.n	80024ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d802      	bhi.n	80024d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e001      	b.n	80024d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80024d4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3b08      	subs	r3, #8
 80024e2:	4a12      	ldr	r2, [pc, #72]	@ (800252c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	009a      	lsls	r2, r3, #2
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a0b      	ldr	r2, [pc, #44]	@ (8002530 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002502:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2201      	movs	r2, #1
 800250c:	409a      	lsls	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40020407 	.word	0x40020407
 8002524:	40020800 	.word	0x40020800
 8002528:	40020820 	.word	0x40020820
 800252c:	cccccccd 	.word	0xcccccccd
 8002530:	40020880 	.word	0x40020880

08002534 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	461a      	mov	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002556:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3b01      	subs	r3, #1
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	1000823f 	.word	0x1000823f
 8002578:	40020940 	.word	0x40020940

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800258a:	e15a      	b.n	8002842 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 814c 	beq.w	800283c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d005      	beq.n	80025bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d130      	bne.n	800261e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025f2:	2201      	movs	r2, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f003 0201 	and.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b03      	cmp	r3, #3
 8002628:	d017      	beq.n	800265a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d123      	bne.n	80026ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	08da      	lsrs	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3208      	adds	r2, #8
 800266e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	6939      	ldr	r1, [r7, #16]
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0203 	and.w	r2, r3, #3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80a6 	beq.w	800283c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002860 <HAL_GPIO_Init+0x2e4>)
 80026f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002860 <HAL_GPIO_Init+0x2e4>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80026fc:	4b58      	ldr	r3, [pc, #352]	@ (8002860 <HAL_GPIO_Init+0x2e4>)
 80026fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002708:	4a56      	ldr	r2, [pc, #344]	@ (8002864 <HAL_GPIO_Init+0x2e8>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	220f      	movs	r2, #15
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002732:	d01f      	beq.n	8002774 <HAL_GPIO_Init+0x1f8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a4c      	ldr	r2, [pc, #304]	@ (8002868 <HAL_GPIO_Init+0x2ec>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d019      	beq.n	8002770 <HAL_GPIO_Init+0x1f4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a4b      	ldr	r2, [pc, #300]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d013      	beq.n	800276c <HAL_GPIO_Init+0x1f0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a4a      	ldr	r2, [pc, #296]	@ (8002870 <HAL_GPIO_Init+0x2f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00d      	beq.n	8002768 <HAL_GPIO_Init+0x1ec>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a49      	ldr	r2, [pc, #292]	@ (8002874 <HAL_GPIO_Init+0x2f8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <HAL_GPIO_Init+0x1e8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a48      	ldr	r2, [pc, #288]	@ (8002878 <HAL_GPIO_Init+0x2fc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_GPIO_Init+0x1e4>
 800275c:	2305      	movs	r3, #5
 800275e:	e00a      	b.n	8002776 <HAL_GPIO_Init+0x1fa>
 8002760:	2306      	movs	r3, #6
 8002762:	e008      	b.n	8002776 <HAL_GPIO_Init+0x1fa>
 8002764:	2304      	movs	r3, #4
 8002766:	e006      	b.n	8002776 <HAL_GPIO_Init+0x1fa>
 8002768:	2303      	movs	r3, #3
 800276a:	e004      	b.n	8002776 <HAL_GPIO_Init+0x1fa>
 800276c:	2302      	movs	r3, #2
 800276e:	e002      	b.n	8002776 <HAL_GPIO_Init+0x1fa>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_GPIO_Init+0x1fa>
 8002774:	2300      	movs	r3, #0
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	f002 0203 	and.w	r2, r2, #3
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	4093      	lsls	r3, r2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002786:	4937      	ldr	r1, [pc, #220]	@ (8002864 <HAL_GPIO_Init+0x2e8>)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002794:	4b39      	ldr	r3, [pc, #228]	@ (800287c <HAL_GPIO_Init+0x300>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027b8:	4a30      	ldr	r2, [pc, #192]	@ (800287c <HAL_GPIO_Init+0x300>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027be:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <HAL_GPIO_Init+0x300>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e2:	4a26      	ldr	r2, [pc, #152]	@ (800287c <HAL_GPIO_Init+0x300>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_GPIO_Init+0x300>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800280c:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <HAL_GPIO_Init+0x300>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002812:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HAL_GPIO_Init+0x300>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002836:	4a11      	ldr	r2, [pc, #68]	@ (800287c <HAL_GPIO_Init+0x300>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3301      	adds	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f ae9d 	bne.w	800258c <HAL_GPIO_Init+0x10>
  }
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40021000 	.word	0x40021000
 8002864:	40010000 	.word	0x40010000
 8002868:	48000400 	.word	0x48000400
 800286c:	48000800 	.word	0x48000800
 8002870:	48000c00 	.word	0x48000c00
 8002874:	48001000 	.word	0x48001000
 8002878:	48001400 	.word	0x48001400
 800287c:	40010400 	.word	0x40010400

08002880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
 800288c:	4613      	mov	r3, r2
 800288e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002890:	787b      	ldrb	r3, [r7, #1]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800289c:	e002      	b.n	80028a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d141      	bne.n	8002942 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028be:	4b4b      	ldr	r3, [pc, #300]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ca:	d131      	bne.n	8002930 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028cc:	4b47      	ldr	r3, [pc, #284]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028d2:	4a46      	ldr	r2, [pc, #280]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028dc:	4b43      	ldr	r3, [pc, #268]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028e4:	4a41      	ldr	r2, [pc, #260]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028ec:	4b40      	ldr	r3, [pc, #256]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2232      	movs	r2, #50	@ 0x32
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	4a3f      	ldr	r2, [pc, #252]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	0c9b      	lsrs	r3, r3, #18
 80028fe:	3301      	adds	r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002902:	e002      	b.n	800290a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3b01      	subs	r3, #1
 8002908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290a:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002916:	d102      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f2      	bne.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800291e:	4b33      	ldr	r3, [pc, #204]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800292a:	d158      	bne.n	80029de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e057      	b.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002930:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002936:	4a2d      	ldr	r2, [pc, #180]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800293c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002940:	e04d      	b.n	80029de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002948:	d141      	bne.n	80029ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800294a:	4b28      	ldr	r3, [pc, #160]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002956:	d131      	bne.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002958:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800295e:	4a23      	ldr	r2, [pc, #140]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002964:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002968:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002970:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002976:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002978:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2232      	movs	r2, #50	@ 0x32
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	0c9b      	lsrs	r3, r3, #18
 800298a:	3301      	adds	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800298e:	e002      	b.n	8002996 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3b01      	subs	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002996:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a2:	d102      	bne.n	80029aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f2      	bne.n	8002990 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029aa:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b6:	d112      	bne.n	80029de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e011      	b.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029c2:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029cc:	e007      	b.n	80029de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ce:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029d6:	4a05      	ldr	r2, [pc, #20]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40007000 	.word	0x40007000
 80029f0:	20000000 	.word	0x20000000
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a04      	ldr	r2, [pc, #16]	@ (8002a14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a06:	6093      	str	r3, [r2, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40007000 	.word	0x40007000

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e2fe      	b.n	8003028 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d075      	beq.n	8002b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a36:	4b97      	ldr	r3, [pc, #604]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a40:	4b94      	ldr	r3, [pc, #592]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3e>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d002      	beq.n	8002a5c <HAL_RCC_OscConfig+0x44>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d10b      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d05b      	beq.n	8002b20 <HAL_RCC_OscConfig+0x108>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d157      	bne.n	8002b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e2d9      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCC_OscConfig+0x74>
 8002a7e:	4b85      	ldr	r3, [pc, #532]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a84      	ldr	r2, [pc, #528]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e01d      	b.n	8002ac8 <HAL_RCC_OscConfig+0xb0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x98>
 8002a96:	4b7f      	ldr	r3, [pc, #508]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7b      	ldr	r2, [pc, #492]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0xb0>
 8002ab0:	4b78      	ldr	r3, [pc, #480]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a77      	ldr	r2, [pc, #476]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4b75      	ldr	r3, [pc, #468]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a74      	ldr	r2, [pc, #464]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7ff f906 	bl	8001ce0 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff f902 	bl	8001ce0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	@ 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e29e      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aea:	4b6a      	ldr	r3, [pc, #424]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0xc0>
 8002af6:	e014      	b.n	8002b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7ff f8f2 	bl	8001ce0 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7ff f8ee 	bl	8001ce0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	@ 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e28a      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b12:	4b60      	ldr	r3, [pc, #384]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0xe8>
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d075      	beq.n	8002c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b2e:	4b59      	ldr	r3, [pc, #356]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b38:	4b56      	ldr	r3, [pc, #344]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0x136>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_OscConfig+0x13c>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d11f      	bne.n	8002b94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b54:	4b4f      	ldr	r3, [pc, #316]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_OscConfig+0x154>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e25d      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b49      	ldr	r3, [pc, #292]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	4946      	ldr	r1, [pc, #280]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b80:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f85f 	bl	8001c48 <HAL_InitTick>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d043      	beq.n	8002c18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e249      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f89a 	bl	8001ce0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7ff f896 	bl	8001ce0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e232      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc2:	4b34      	ldr	r3, [pc, #208]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b31      	ldr	r3, [pc, #196]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	492d      	ldr	r1, [pc, #180]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
 8002be2:	e01a      	b.n	8002c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2a      	ldr	r2, [pc, #168]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002bea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f876 	bl	8001ce0 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7ff f872 	bl	8001ce0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e20e      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0a:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1e0>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d041      	beq.n	8002caa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2e:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c34:	4a17      	ldr	r2, [pc, #92]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7ff f84f 	bl	8001ce0 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c46:	f7ff f84b 	bl	8001ce0 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1e7      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c58:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ef      	beq.n	8002c46 <HAL_RCC_OscConfig+0x22e>
 8002c66:	e020      	b.n	8002caa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6e:	4a09      	ldr	r2, [pc, #36]	@ (8002c94 <HAL_RCC_OscConfig+0x27c>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7ff f832 	bl	8001ce0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c7e:	e00d      	b.n	8002c9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c80:	f7ff f82e 	bl	8001ce0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d906      	bls.n	8002c9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1ca      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ea      	bne.n	8002c80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80a6 	beq.w	8002e04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cbc:	4b84      	ldr	r3, [pc, #528]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2b4>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x2b6>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cde:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cea:	2301      	movs	r3, #1
 8002cec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cee:	4b79      	ldr	r3, [pc, #484]	@ (8002ed4 <HAL_RCC_OscConfig+0x4bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d118      	bne.n	8002d2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cfa:	4b76      	ldr	r3, [pc, #472]	@ (8002ed4 <HAL_RCC_OscConfig+0x4bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a75      	ldr	r2, [pc, #468]	@ (8002ed4 <HAL_RCC_OscConfig+0x4bc>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d06:	f7fe ffeb 	bl	8001ce0 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7fe ffe7 	bl	8001ce0 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e183      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d20:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed4 <HAL_RCC_OscConfig+0x4bc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d108      	bne.n	8002d46 <HAL_RCC_OscConfig+0x32e>
 8002d34:	4b66      	ldr	r3, [pc, #408]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3a:	4a65      	ldr	r2, [pc, #404]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d44:	e024      	b.n	8002d90 <HAL_RCC_OscConfig+0x378>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b05      	cmp	r3, #5
 8002d4c:	d110      	bne.n	8002d70 <HAL_RCC_OscConfig+0x358>
 8002d4e:	4b60      	ldr	r3, [pc, #384]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d54:	4a5e      	ldr	r2, [pc, #376]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d64:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d6e:	e00f      	b.n	8002d90 <HAL_RCC_OscConfig+0x378>
 8002d70:	4b57      	ldr	r3, [pc, #348]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d76:	4a56      	ldr	r2, [pc, #344]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d80:	4b53      	ldr	r3, [pc, #332]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	4a52      	ldr	r2, [pc, #328]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe ffa2 	bl	8001ce0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe ff9e 	bl	8001ce0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e138      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db6:	4b46      	ldr	r3, [pc, #280]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ed      	beq.n	8002da0 <HAL_RCC_OscConfig+0x388>
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe ff8b 	bl	8001ce0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe ff87 	bl	8001ce0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e121      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ed      	bne.n	8002dce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b35      	ldr	r3, [pc, #212]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a34      	ldr	r2, [pc, #208]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002dfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d03c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01c      	beq.n	8002e52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e18:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7fe ff5a 	bl	8001ce0 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e30:	f7fe ff56 	bl	8001ce0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0f2      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e42:	4b23      	ldr	r3, [pc, #140]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ef      	beq.n	8002e30 <HAL_RCC_OscConfig+0x418>
 8002e50:	e01b      	b.n	8002e8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e52:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fe ff3d 	bl	8001ce0 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6a:	f7fe ff39 	bl	8001ce0 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0d5      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ef      	bne.n	8002e6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80c9 	beq.w	8003026 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b0c      	cmp	r3, #12
 8002e9e:	f000 8083 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d15e      	bne.n	8002f68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a08      	ldr	r2, [pc, #32]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b8>)
 8002eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe ff13 	bl	8001ce0 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	e00c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe ff0f 	bl	8001ce0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d905      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0ab      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	4b55      	ldr	r3, [pc, #340]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ec      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee4:	4b52      	ldr	r3, [pc, #328]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	4b52      	ldr	r3, [pc, #328]	@ (8003034 <HAL_RCC_OscConfig+0x61c>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6a11      	ldr	r1, [r2, #32]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	4311      	orrs	r1, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002efe:	0212      	lsls	r2, r2, #8
 8002f00:	4311      	orrs	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f06:	0852      	lsrs	r2, r2, #1
 8002f08:	3a01      	subs	r2, #1
 8002f0a:	0552      	lsls	r2, r2, #21
 8002f0c:	4311      	orrs	r1, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f12:	0852      	lsrs	r2, r2, #1
 8002f14:	3a01      	subs	r2, #1
 8002f16:	0652      	lsls	r2, r2, #25
 8002f18:	4311      	orrs	r1, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f1e:	06d2      	lsls	r2, r2, #27
 8002f20:	430a      	orrs	r2, r1
 8002f22:	4943      	ldr	r1, [pc, #268]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a40      	ldr	r2, [pc, #256]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f34:	4b3e      	ldr	r3, [pc, #248]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a3d      	ldr	r2, [pc, #244]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fece 	bl	8001ce0 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe feca 	bl	8001ce0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e066      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	4b35      	ldr	r3, [pc, #212]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x530>
 8002f66:	e05e      	b.n	8003026 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a30      	ldr	r2, [pc, #192]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe feb4 	bl	8001ce0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe feb0 	bl	8001ce0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e04c      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8e:	4b28      	ldr	r3, [pc, #160]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f9a:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	4924      	ldr	r1, [pc, #144]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_RCC_OscConfig+0x620>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60cb      	str	r3, [r1, #12]
 8002fa6:	e03e      	b.n	8003026 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e039      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <HAL_RCC_OscConfig+0x618>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0203 	and.w	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d12c      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d123      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d11b      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d113      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d109      	bne.n	8003022 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	019f800c 	.word	0x019f800c
 8003038:	feeefffc 	.word	0xfeeefffc

0800303c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e11e      	b.n	8003292 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b91      	ldr	r3, [pc, #580]	@ (800329c <HAL_RCC_ClockConfig+0x260>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d910      	bls.n	8003084 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b8e      	ldr	r3, [pc, #568]	@ (800329c <HAL_RCC_ClockConfig+0x260>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 020f 	bic.w	r2, r3, #15
 800306a:	498c      	ldr	r1, [pc, #560]	@ (800329c <HAL_RCC_ClockConfig+0x260>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b8a      	ldr	r3, [pc, #552]	@ (800329c <HAL_RCC_ClockConfig+0x260>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e106      	b.n	8003292 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d073      	beq.n	8003178 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d129      	bne.n	80030ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003098:	4b81      	ldr	r3, [pc, #516]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0f4      	b.n	8003292 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030a8:	f000 f99e 	bl	80033e8 <RCC_GetSysClockFreqFromPLLSource>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4a7c      	ldr	r2, [pc, #496]	@ (80032a4 <HAL_RCC_ClockConfig+0x268>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d93f      	bls.n	8003136 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030b6:	4b7a      	ldr	r3, [pc, #488]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d033      	beq.n	8003136 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d12f      	bne.n	8003136 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030d6:	4b72      	ldr	r3, [pc, #456]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030de:	4a70      	ldr	r2, [pc, #448]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80030e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030e6:	2380      	movs	r3, #128	@ 0x80
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e024      	b.n	8003136 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f4:	4b6a      	ldr	r3, [pc, #424]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0c6      	b.n	8003292 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003104:	4b66      	ldr	r3, [pc, #408]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0be      	b.n	8003292 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003114:	f000 f8ce 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003118:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4a61      	ldr	r2, [pc, #388]	@ (80032a4 <HAL_RCC_ClockConfig+0x268>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d909      	bls.n	8003136 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003122:	4b5f      	ldr	r3, [pc, #380]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800312a:	4a5d      	ldr	r2, [pc, #372]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 800312c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003130:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b5a      	ldr	r3, [pc, #360]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4957      	ldr	r1, [pc, #348]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003148:	f7fe fdca 	bl	8001ce0 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7fe fdc6 	bl	8001ce0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e095      	b.n	8003292 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b4e      	ldr	r3, [pc, #312]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d023      	beq.n	80031cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003190:	4b43      	ldr	r3, [pc, #268]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a42      	ldr	r2, [pc, #264]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003196:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800319a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031a8:	4b3d      	ldr	r3, [pc, #244]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031b0:	4a3b      	ldr	r2, [pc, #236]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80031b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b39      	ldr	r3, [pc, #228]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4936      	ldr	r1, [pc, #216]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
 80031ca:	e008      	b.n	80031de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b80      	cmp	r3, #128	@ 0x80
 80031d0:	d105      	bne.n	80031de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031d2:	4b33      	ldr	r3, [pc, #204]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4a32      	ldr	r2, [pc, #200]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 80031d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031de:	4b2f      	ldr	r3, [pc, #188]	@ (800329c <HAL_RCC_ClockConfig+0x260>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d21d      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ec:	4b2b      	ldr	r3, [pc, #172]	@ (800329c <HAL_RCC_ClockConfig+0x260>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 020f 	bic.w	r2, r3, #15
 80031f4:	4929      	ldr	r1, [pc, #164]	@ (800329c <HAL_RCC_ClockConfig+0x260>)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fd70 	bl	8001ce0 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	e00a      	b.n	800321a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fe fd6c 	bl	8001ce0 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e03b      	b.n	8003292 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b20      	ldr	r3, [pc, #128]	@ (800329c <HAL_RCC_ClockConfig+0x260>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d1ed      	bne.n	8003204 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003234:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4917      	ldr	r1, [pc, #92]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003252:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	490f      	ldr	r1, [pc, #60]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003266:	f000 f825 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <HAL_RCC_ClockConfig+0x264>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	490c      	ldr	r1, [pc, #48]	@ (80032a8 <HAL_RCC_ClockConfig+0x26c>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <HAL_RCC_ClockConfig+0x270>)
 8003284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x274>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fcdc 	bl	8001c48 <HAL_InitTick>
 8003290:	4603      	mov	r3, r0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40022000 	.word	0x40022000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	04c4b400 	.word	0x04c4b400
 80032a8:	0800a7c4 	.word	0x0800a7c4
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032ba:	4b2c      	ldr	r3, [pc, #176]	@ (800336c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	e047      	b.n	800335c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032cc:	4b27      	ldr	r3, [pc, #156]	@ (800336c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d102      	bne.n	80032de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032d8:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	e03e      	b.n	800335c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80032de:	4b23      	ldr	r3, [pc, #140]	@ (800336c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d136      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ea:	4b20      	ldr	r3, [pc, #128]	@ (800336c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3301      	adds	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d10c      	bne.n	8003322 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003308:	4a1a      	ldr	r2, [pc, #104]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xc0>)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	4a16      	ldr	r2, [pc, #88]	@ (800336c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003312:	68d2      	ldr	r2, [r2, #12]
 8003314:	0a12      	lsrs	r2, r2, #8
 8003316:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	617b      	str	r3, [r7, #20]
      break;
 8003320:	e00c      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003322:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4a10      	ldr	r2, [pc, #64]	@ (800336c <HAL_RCC_GetSysClockFreq+0xb8>)
 800332c:	68d2      	ldr	r2, [r2, #12]
 800332e:	0a12      	lsrs	r2, r2, #8
 8003330:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
      break;
 800333a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <HAL_RCC_GetSysClockFreq+0xb8>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	0e5b      	lsrs	r3, r3, #25
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e001      	b.n	800335c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800335c:	693b      	ldr	r3, [r7, #16]
}
 800335e:	4618      	mov	r0, r3
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	00f42400 	.word	0x00f42400
 8003374:	007a1200 	.word	0x007a1200

08003378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	@ (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4904      	ldr	r1, [pc, #16]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	0800a7d4 	.word	0x0800a7d4

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c0:	f7ff ffda 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4904      	ldr	r1, [pc, #16]	@ (80033e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	0800a7d4 	.word	0x0800a7d4

080033e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d10c      	bne.n	8003426 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800340c:	4a17      	ldr	r2, [pc, #92]	@ (800346c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	4a14      	ldr	r2, [pc, #80]	@ (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003416:	68d2      	ldr	r2, [r2, #12]
 8003418:	0a12      	lsrs	r2, r2, #8
 800341a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
    break;
 8003424:	e00c      	b.n	8003440 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003426:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003430:	68d2      	ldr	r2, [r2, #12]
 8003432:	0a12      	lsrs	r2, r2, #8
 8003434:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
    break;
 800343e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003440:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0e5b      	lsrs	r3, r3, #25
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800345a:	687b      	ldr	r3, [r7, #4]
}
 800345c:	4618      	mov	r0, r3
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40021000 	.word	0x40021000
 800346c:	007a1200 	.word	0x007a1200
 8003470:	00f42400 	.word	0x00f42400

08003474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800347c:	2300      	movs	r3, #0
 800347e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003480:	2300      	movs	r3, #0
 8003482:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8098 	beq.w	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003496:	4b43      	ldr	r3, [pc, #268]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10d      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	4b40      	ldr	r3, [pc, #256]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a6:	4a3f      	ldr	r2, [pc, #252]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ae:	4b3d      	ldr	r3, [pc, #244]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ba:	2301      	movs	r3, #1
 80034bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034be:	4b3a      	ldr	r3, [pc, #232]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a39      	ldr	r2, [pc, #228]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ca:	f7fe fc09 	bl	8001ce0 <HAL_GetTick>
 80034ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d0:	e009      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7fe fc05 	bl	8001ce0 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d902      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	74fb      	strb	r3, [r7, #19]
        break;
 80034e4:	e005      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e6:	4b30      	ldr	r3, [pc, #192]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ef      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d159      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034f8:	4b2a      	ldr	r3, [pc, #168]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003502:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01e      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	d019      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003514:	4b23      	ldr	r3, [pc, #140]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003520:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003526:	4a1f      	ldr	r2, [pc, #124]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003530:	4b1c      	ldr	r3, [pc, #112]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a1b      	ldr	r2, [pc, #108]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003540:	4a18      	ldr	r2, [pc, #96]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fe fbc5 	bl	8001ce0 <HAL_GetTick>
 8003556:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003558:	e00b      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe fbc1 	bl	8001ce0 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d902      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	74fb      	strb	r3, [r7, #19]
            break;
 8003570:	e006      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003572:	4b0c      	ldr	r3, [pc, #48]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ec      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003586:	4b07      	ldr	r3, [pc, #28]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	4903      	ldr	r1, [pc, #12]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800359c:	e008      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	74bb      	strb	r3, [r7, #18]
 80035a2:	e005      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b0:	7c7b      	ldrb	r3, [r7, #17]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d105      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b6:	4ba6      	ldr	r3, [pc, #664]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	4aa5      	ldr	r2, [pc, #660]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ce:	4ba0      	ldr	r3, [pc, #640]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f023 0203 	bic.w	r2, r3, #3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	499c      	ldr	r1, [pc, #624]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f0:	4b97      	ldr	r3, [pc, #604]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f6:	f023 020c 	bic.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4994      	ldr	r1, [pc, #592]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003612:	4b8f      	ldr	r3, [pc, #572]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	498b      	ldr	r1, [pc, #556]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003634:	4b86      	ldr	r3, [pc, #536]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	4983      	ldr	r1, [pc, #524]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003656:	4b7e      	ldr	r3, [pc, #504]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	497a      	ldr	r1, [pc, #488]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003678:	4b75      	ldr	r3, [pc, #468]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	4972      	ldr	r1, [pc, #456]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800369a:	4b6d      	ldr	r3, [pc, #436]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	4969      	ldr	r1, [pc, #420]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036bc:	4b64      	ldr	r3, [pc, #400]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4961      	ldr	r1, [pc, #388]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036de:	4b5c      	ldr	r3, [pc, #368]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	4958      	ldr	r1, [pc, #352]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003700:	4b53      	ldr	r3, [pc, #332]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	4950      	ldr	r1, [pc, #320]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800371e:	d105      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003720:	4b4b      	ldr	r3, [pc, #300]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a4a      	ldr	r2, [pc, #296]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800372a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003734:	2b00      	cmp	r3, #0
 8003736:	d015      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003738:	4b45      	ldr	r3, [pc, #276]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	4942      	ldr	r1, [pc, #264]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003756:	d105      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003758:	4b3d      	ldr	r3, [pc, #244]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a3c      	ldr	r2, [pc, #240]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003762:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003770:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	4934      	ldr	r1, [pc, #208]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800378e:	d105      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003790:	4b2f      	ldr	r3, [pc, #188]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a2e      	ldr	r2, [pc, #184]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a8:	4b29      	ldr	r3, [pc, #164]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	4926      	ldr	r1, [pc, #152]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c8:	4b21      	ldr	r3, [pc, #132]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a20      	ldr	r2, [pc, #128]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ee:	4918      	ldr	r1, [pc, #96]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003800:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a12      	ldr	r2, [pc, #72]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800380a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003818:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	490a      	ldr	r1, [pc, #40]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003836:	d105      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003842:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003844:	7cbb      	ldrb	r3, [r7, #18]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000

08003854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e042      	b.n	80038ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fd ffa7 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2224      	movs	r2, #36	@ 0x24
 8003882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 ff68 	bl	8004774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fc99 	bl	80041dc <UART_SetConfig>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e01b      	b.n	80038ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 ffe7 	bl	80048b8 <UART_CheckIdleState>
 80038ea:	4603      	mov	r3, r0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	@ 0x28
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	2b20      	cmp	r3, #32
 800390c:	d17b      	bne.n	8003a06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <HAL_UART_Transmit+0x26>
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e074      	b.n	8003a08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	@ 0x21
 800392a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fe f9d7 	bl	8001ce0 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394c:	d108      	bne.n	8003960 <HAL_UART_Transmit+0x6c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e003      	b.n	8003968 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003968:	e030      	b.n	80039cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	@ 0x80
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f001 f849 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e03d      	b.n	8003a08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	3302      	adds	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	e007      	b.n	80039ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3301      	adds	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1c8      	bne.n	800396a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	2140      	movs	r1, #64	@ 0x40
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f001 f812 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e006      	b.n	8003a08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	@ 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d137      	bne.n	8003a98 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_UART_Receive_IT+0x24>
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e030      	b.n	8003a9a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a18      	ldr	r2, [pc, #96]	@ (8003aa4 <HAL_UART_Receive_IT+0x94>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d01f      	beq.n	8003a88 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d018      	beq.n	8003a88 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	613b      	str	r3, [r7, #16]
   return(result);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	623b      	str	r3, [r7, #32]
 8003a76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	69f9      	ldr	r1, [r7, #28]
 8003a7a:	6a3a      	ldr	r2, [r7, #32]
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e6      	bne.n	8003a56 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f001 f82a 	bl	8004ae8 <UART_Start_Receive_IT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	e000      	b.n	8003a9a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3728      	adds	r7, #40	@ 0x28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40008000 	.word	0x40008000

08003aa8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	@ 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d137      	bne.n	8003b30 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_UART_Receive_DMA+0x24>
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e030      	b.n	8003b32 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <HAL_UART_Receive_DMA+0x94>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01f      	beq.n	8003b20 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d018      	beq.n	8003b20 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	613b      	str	r3, [r7, #16]
   return(result);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	69f9      	ldr	r1, [r7, #28]
 8003b12:	6a3a      	ldr	r2, [r7, #32]
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e6      	bne.n	8003aee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f001 f900 	bl	8004d2c <UART_Start_Receive_DMA>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3728      	adds	r7, #40	@ 0x28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40008000 	.word	0x40008000

08003b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b0ba      	sub	sp, #232	@ 0xe8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b6e:	4013      	ands	r3, r2
 8003b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d015      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 82e3 	beq.w	8004170 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
      }
      return;
 8003bb2:	e2dd      	b.n	8004170 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8123 	beq.w	8003e04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003bbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8003df8 <HAL_UART_IRQHandler+0x2b8>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003bca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003bce:	4b8b      	ldr	r3, [pc, #556]	@ (8003dfc <HAL_UART_IRQHandler+0x2bc>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8116 	beq.w	8003e04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d011      	beq.n	8003c08 <HAL_UART_IRQHandler+0xc8>
 8003be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d011      	beq.n	8003c38 <HAL_UART_IRQHandler+0xf8>
 8003c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00b      	beq.n	8003c38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2202      	movs	r2, #2
 8003c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d011      	beq.n	8003c68 <HAL_UART_IRQHandler+0x128>
 8003c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2204      	movs	r2, #4
 8003c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	f043 0202 	orr.w	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d017      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003c84:	4b5c      	ldr	r3, [pc, #368]	@ (8003df8 <HAL_UART_IRQHandler+0x2b8>)
 8003c86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2208      	movs	r2, #8
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	f043 0208 	orr.w	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x196>
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8249 	beq.w	8004174 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d013      	beq.n	8003d16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2a:	2b40      	cmp	r3, #64	@ 0x40
 8003d2c:	d005      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d054      	beq.n	8003de4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 f8dd 	bl	8004efa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d146      	bne.n	8003ddc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3308      	adds	r3, #8
 8003d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3308      	adds	r3, #8
 8003d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1d9      	bne.n	8003d4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003daa:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <HAL_UART_IRQHandler+0x2c0>)
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fa2b 	bl	8002210 <HAL_DMA_Abort_IT>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	e00f      	b.n	8003df4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f9eb 	bl	80041b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dda:	e00b      	b.n	8003df4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f9e7 	bl	80041b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de2:	e007      	b.n	8003df4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f9e3 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003df2:	e1bf      	b.n	8004174 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	bf00      	nop
    return;
 8003df6:	e1bd      	b.n	8004174 <HAL_UART_IRQHandler+0x634>
 8003df8:	10000001 	.word	0x10000001
 8003dfc:	04000120 	.word	0x04000120
 8003e00:	080051b1 	.word	0x080051b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 8153 	bne.w	80040b4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 814c 	beq.w	80040b4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8145 	beq.w	80040b4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2210      	movs	r2, #16
 8003e30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b40      	cmp	r3, #64	@ 0x40
 8003e3e:	f040 80bb 	bne.w	8003fb8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 818f 	beq.w	8004178 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e64:	429a      	cmp	r2, r3
 8003e66:	f080 8187 	bcs.w	8004178 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 8087 	bne.w	8003f96 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003eb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1da      	bne.n	8003e88 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ef6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e1      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3308      	adds	r3, #8
 8003f14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e3      	bne.n	8003f0e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f64:	f023 0310 	bic.w	r3, r3, #16
 8003f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e4      	bne.n	8003f54 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe f8e4 	bl	800215e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f907 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fb6:	e0df      	b.n	8004178 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80d1 	beq.w	800417c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003fda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80cc 	beq.w	800417c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004006:	647b      	str	r3, [r7, #68]	@ 0x44
 8004008:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800400c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e4      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	623b      	str	r3, [r7, #32]
   return(result);
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004042:	633a      	str	r2, [r7, #48]	@ 0x30
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e1      	bne.n	800401a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	60fb      	str	r3, [r7, #12]
   return(result);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0310 	bic.w	r3, r3, #16
 800407e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	617b      	str	r3, [r7, #20]
   return(result);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e4      	bne.n	800406a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f889 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040b2:	e063      	b.n	800417c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00e      	beq.n	80040de <HAL_UART_IRQHandler+0x59e>
 80040c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f001 fdc8 	bl	8005c6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040dc:	e051      	b.n	8004182 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d014      	beq.n	8004114 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004106:	2b00      	cmp	r3, #0
 8004108:	d03a      	beq.n	8004180 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
    }
    return;
 8004112:	e035      	b.n	8004180 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_UART_IRQHandler+0x5f4>
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f001 f855 	bl	80051dc <UART_EndTransmit_IT>
    return;
 8004132:	e026      	b.n	8004182 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_UART_IRQHandler+0x614>
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004144:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f001 fda1 	bl	8005c94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004152:	e016      	b.n	8004182 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d010      	beq.n	8004182 <HAL_UART_IRQHandler+0x642>
 8004160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004164:	2b00      	cmp	r3, #0
 8004166:	da0c      	bge.n	8004182 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 fd89 	bl	8005c80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800416e:	e008      	b.n	8004182 <HAL_UART_IRQHandler+0x642>
      return;
 8004170:	bf00      	nop
 8004172:	e006      	b.n	8004182 <HAL_UART_IRQHandler+0x642>
    return;
 8004174:	bf00      	nop
 8004176:	e004      	b.n	8004182 <HAL_UART_IRQHandler+0x642>
      return;
 8004178:	bf00      	nop
 800417a:	e002      	b.n	8004182 <HAL_UART_IRQHandler+0x642>
      return;
 800417c:	bf00      	nop
 800417e:	e000      	b.n	8004182 <HAL_UART_IRQHandler+0x642>
    return;
 8004180:	bf00      	nop
  }
}
 8004182:	37e8      	adds	r7, #232	@ 0xe8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b08c      	sub	sp, #48	@ 0x30
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	4313      	orrs	r3, r2
 8004202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4bab      	ldr	r3, [pc, #684]	@ (80044b8 <UART_SetConfig+0x2dc>)
 800420c:	4013      	ands	r3, r2
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004214:	430b      	orrs	r3, r1
 8004216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4aa0      	ldr	r2, [pc, #640]	@ (80044bc <UART_SetConfig+0x2e0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004244:	4313      	orrs	r3, r2
 8004246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004252:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800425c:	430b      	orrs	r3, r1
 800425e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	f023 010f 	bic.w	r1, r3, #15
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a91      	ldr	r2, [pc, #580]	@ (80044c0 <UART_SetConfig+0x2e4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d125      	bne.n	80042cc <UART_SetConfig+0xf0>
 8004280:	4b90      	ldr	r3, [pc, #576]	@ (80044c4 <UART_SetConfig+0x2e8>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b03      	cmp	r3, #3
 800428c:	d81a      	bhi.n	80042c4 <UART_SetConfig+0xe8>
 800428e:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <UART_SetConfig+0xb8>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042b5 	.word	0x080042b5
 800429c:	080042ad 	.word	0x080042ad
 80042a0:	080042bd 	.word	0x080042bd
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042aa:	e0d6      	b.n	800445a <UART_SetConfig+0x27e>
 80042ac:	2302      	movs	r3, #2
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042b2:	e0d2      	b.n	800445a <UART_SetConfig+0x27e>
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ba:	e0ce      	b.n	800445a <UART_SetConfig+0x27e>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c2:	e0ca      	b.n	800445a <UART_SetConfig+0x27e>
 80042c4:	2310      	movs	r3, #16
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ca:	e0c6      	b.n	800445a <UART_SetConfig+0x27e>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7d      	ldr	r2, [pc, #500]	@ (80044c8 <UART_SetConfig+0x2ec>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d138      	bne.n	8004348 <UART_SetConfig+0x16c>
 80042d6:	4b7b      	ldr	r3, [pc, #492]	@ (80044c4 <UART_SetConfig+0x2e8>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d82d      	bhi.n	8004340 <UART_SetConfig+0x164>
 80042e4:	a201      	add	r2, pc, #4	@ (adr r2, 80042ec <UART_SetConfig+0x110>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004321 	.word	0x08004321
 80042f0:	08004341 	.word	0x08004341
 80042f4:	08004341 	.word	0x08004341
 80042f8:	08004341 	.word	0x08004341
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004341 	.word	0x08004341
 8004304:	08004341 	.word	0x08004341
 8004308:	08004341 	.word	0x08004341
 800430c:	08004329 	.word	0x08004329
 8004310:	08004341 	.word	0x08004341
 8004314:	08004341 	.word	0x08004341
 8004318:	08004341 	.word	0x08004341
 800431c:	08004339 	.word	0x08004339
 8004320:	2300      	movs	r3, #0
 8004322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004326:	e098      	b.n	800445a <UART_SetConfig+0x27e>
 8004328:	2302      	movs	r3, #2
 800432a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800432e:	e094      	b.n	800445a <UART_SetConfig+0x27e>
 8004330:	2304      	movs	r3, #4
 8004332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004336:	e090      	b.n	800445a <UART_SetConfig+0x27e>
 8004338:	2308      	movs	r3, #8
 800433a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800433e:	e08c      	b.n	800445a <UART_SetConfig+0x27e>
 8004340:	2310      	movs	r3, #16
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004346:	e088      	b.n	800445a <UART_SetConfig+0x27e>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a5f      	ldr	r2, [pc, #380]	@ (80044cc <UART_SetConfig+0x2f0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d125      	bne.n	800439e <UART_SetConfig+0x1c2>
 8004352:	4b5c      	ldr	r3, [pc, #368]	@ (80044c4 <UART_SetConfig+0x2e8>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004358:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800435c:	2b30      	cmp	r3, #48	@ 0x30
 800435e:	d016      	beq.n	800438e <UART_SetConfig+0x1b2>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d818      	bhi.n	8004396 <UART_SetConfig+0x1ba>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d00a      	beq.n	800437e <UART_SetConfig+0x1a2>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d814      	bhi.n	8004396 <UART_SetConfig+0x1ba>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <UART_SetConfig+0x19a>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d008      	beq.n	8004386 <UART_SetConfig+0x1aa>
 8004374:	e00f      	b.n	8004396 <UART_SetConfig+0x1ba>
 8004376:	2300      	movs	r3, #0
 8004378:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437c:	e06d      	b.n	800445a <UART_SetConfig+0x27e>
 800437e:	2302      	movs	r3, #2
 8004380:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004384:	e069      	b.n	800445a <UART_SetConfig+0x27e>
 8004386:	2304      	movs	r3, #4
 8004388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800438c:	e065      	b.n	800445a <UART_SetConfig+0x27e>
 800438e:	2308      	movs	r3, #8
 8004390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004394:	e061      	b.n	800445a <UART_SetConfig+0x27e>
 8004396:	2310      	movs	r3, #16
 8004398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800439c:	e05d      	b.n	800445a <UART_SetConfig+0x27e>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a4b      	ldr	r2, [pc, #300]	@ (80044d0 <UART_SetConfig+0x2f4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d125      	bne.n	80043f4 <UART_SetConfig+0x218>
 80043a8:	4b46      	ldr	r3, [pc, #280]	@ (80044c4 <UART_SetConfig+0x2e8>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80043b4:	d016      	beq.n	80043e4 <UART_SetConfig+0x208>
 80043b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80043b8:	d818      	bhi.n	80043ec <UART_SetConfig+0x210>
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d00a      	beq.n	80043d4 <UART_SetConfig+0x1f8>
 80043be:	2b80      	cmp	r3, #128	@ 0x80
 80043c0:	d814      	bhi.n	80043ec <UART_SetConfig+0x210>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <UART_SetConfig+0x1f0>
 80043c6:	2b40      	cmp	r3, #64	@ 0x40
 80043c8:	d008      	beq.n	80043dc <UART_SetConfig+0x200>
 80043ca:	e00f      	b.n	80043ec <UART_SetConfig+0x210>
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d2:	e042      	b.n	800445a <UART_SetConfig+0x27e>
 80043d4:	2302      	movs	r3, #2
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043da:	e03e      	b.n	800445a <UART_SetConfig+0x27e>
 80043dc:	2304      	movs	r3, #4
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e2:	e03a      	b.n	800445a <UART_SetConfig+0x27e>
 80043e4:	2308      	movs	r3, #8
 80043e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ea:	e036      	b.n	800445a <UART_SetConfig+0x27e>
 80043ec:	2310      	movs	r3, #16
 80043ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043f2:	e032      	b.n	800445a <UART_SetConfig+0x27e>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a30      	ldr	r2, [pc, #192]	@ (80044bc <UART_SetConfig+0x2e0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d12a      	bne.n	8004454 <UART_SetConfig+0x278>
 80043fe:	4b31      	ldr	r3, [pc, #196]	@ (80044c4 <UART_SetConfig+0x2e8>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004408:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800440c:	d01a      	beq.n	8004444 <UART_SetConfig+0x268>
 800440e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004412:	d81b      	bhi.n	800444c <UART_SetConfig+0x270>
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004418:	d00c      	beq.n	8004434 <UART_SetConfig+0x258>
 800441a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800441e:	d815      	bhi.n	800444c <UART_SetConfig+0x270>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <UART_SetConfig+0x250>
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004428:	d008      	beq.n	800443c <UART_SetConfig+0x260>
 800442a:	e00f      	b.n	800444c <UART_SetConfig+0x270>
 800442c:	2300      	movs	r3, #0
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004432:	e012      	b.n	800445a <UART_SetConfig+0x27e>
 8004434:	2302      	movs	r3, #2
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443a:	e00e      	b.n	800445a <UART_SetConfig+0x27e>
 800443c:	2304      	movs	r3, #4
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004442:	e00a      	b.n	800445a <UART_SetConfig+0x27e>
 8004444:	2308      	movs	r3, #8
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444a:	e006      	b.n	800445a <UART_SetConfig+0x27e>
 800444c:	2310      	movs	r3, #16
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004452:	e002      	b.n	800445a <UART_SetConfig+0x27e>
 8004454:	2310      	movs	r3, #16
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <UART_SetConfig+0x2e0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	f040 80a8 	bne.w	80045b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004466:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800446a:	2b08      	cmp	r3, #8
 800446c:	d834      	bhi.n	80044d8 <UART_SetConfig+0x2fc>
 800446e:	a201      	add	r2, pc, #4	@ (adr r2, 8004474 <UART_SetConfig+0x298>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	08004499 	.word	0x08004499
 8004478:	080044d9 	.word	0x080044d9
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044a7 	.word	0x080044a7
 8004488:	080044d9 	.word	0x080044d9
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044d9 	.word	0x080044d9
 8004494:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004498:	f7fe ff7a 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 800449c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800449e:	e021      	b.n	80044e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b0c      	ldr	r3, [pc, #48]	@ (80044d4 <UART_SetConfig+0x2f8>)
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044a4:	e01e      	b.n	80044e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fe ff05 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80044aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044ac:	e01a      	b.n	80044e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044b4:	e016      	b.n	80044e4 <UART_SetConfig+0x308>
 80044b6:	bf00      	nop
 80044b8:	cfff69f3 	.word	0xcfff69f3
 80044bc:	40008000 	.word	0x40008000
 80044c0:	40013800 	.word	0x40013800
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40004400 	.word	0x40004400
 80044cc:	40004800 	.word	0x40004800
 80044d0:	40004c00 	.word	0x40004c00
 80044d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 812a 	beq.w	8004740 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	4a9e      	ldr	r2, [pc, #632]	@ (800476c <UART_SetConfig+0x590>)
 80044f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044f6:	461a      	mov	r2, r3
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	429a      	cmp	r2, r3
 800450e:	d305      	bcc.n	800451c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	d903      	bls.n	8004524 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004522:	e10d      	b.n	8004740 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	2200      	movs	r2, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	60fa      	str	r2, [r7, #12]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	4a8e      	ldr	r2, [pc, #568]	@ (800476c <UART_SetConfig+0x590>)
 8004532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004536:	b29b      	uxth	r3, r3
 8004538:	2200      	movs	r2, #0
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004546:	f7fc fbc7 	bl	8000cd8 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	020b      	lsls	r3, r1, #8
 800455c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004560:	0202      	lsls	r2, r0, #8
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	6849      	ldr	r1, [r1, #4]
 8004566:	0849      	lsrs	r1, r1, #1
 8004568:	2000      	movs	r0, #0
 800456a:	460c      	mov	r4, r1
 800456c:	4605      	mov	r5, r0
 800456e:	eb12 0804 	adds.w	r8, r2, r4
 8004572:	eb43 0905 	adc.w	r9, r3, r5
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	469a      	mov	sl, r3
 800457e:	4693      	mov	fp, r2
 8004580:	4652      	mov	r2, sl
 8004582:	465b      	mov	r3, fp
 8004584:	4640      	mov	r0, r8
 8004586:	4649      	mov	r1, r9
 8004588:	f7fc fba6 	bl	8000cd8 <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800459a:	d308      	bcc.n	80045ae <UART_SetConfig+0x3d2>
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045a2:	d204      	bcs.n	80045ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	60da      	str	r2, [r3, #12]
 80045ac:	e0c8      	b.n	8004740 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045b4:	e0c4      	b.n	8004740 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045be:	d167      	bne.n	8004690 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80045c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d828      	bhi.n	800461a <UART_SetConfig+0x43e>
 80045c8:	a201      	add	r2, pc, #4	@ (adr r2, 80045d0 <UART_SetConfig+0x3f4>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7fe fecc 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 80045f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045fa:	e014      	b.n	8004626 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe fede 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b5a      	ldr	r3, [pc, #360]	@ (8004770 <UART_SetConfig+0x594>)
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fe fe53 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800460e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8089 	beq.w	8004740 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	4a4e      	ldr	r2, [pc, #312]	@ (800476c <UART_SetConfig+0x590>)
 8004634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004638:	461a      	mov	r2, r3
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004640:	005a      	lsls	r2, r3, #1
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	441a      	add	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d916      	bls.n	8004688 <UART_SetConfig+0x4ac>
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004660:	d212      	bcs.n	8004688 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f023 030f 	bic.w	r3, r3, #15
 800466a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	b29b      	uxth	r3, r3
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	b29a      	uxth	r2, r3
 8004678:	8bfb      	ldrh	r3, [r7, #30]
 800467a:	4313      	orrs	r3, r2
 800467c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	8bfa      	ldrh	r2, [r7, #30]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	e05b      	b.n	8004740 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800468e:	e057      	b.n	8004740 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004690:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004694:	2b08      	cmp	r3, #8
 8004696:	d828      	bhi.n	80046ea <UART_SetConfig+0x50e>
 8004698:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <UART_SetConfig+0x4c4>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046eb 	.word	0x080046eb
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c4:	f7fe fe64 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 80046c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046ca:	e014      	b.n	80046f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046cc:	f7fe fe76 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80046d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046d2:	e010      	b.n	80046f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b26      	ldr	r3, [pc, #152]	@ (8004770 <UART_SetConfig+0x594>)
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046d8:	e00d      	b.n	80046f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7fe fdeb 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80046de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046e0:	e009      	b.n	80046f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046e8:	e005      	b.n	80046f6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046f4:	bf00      	nop
    }

    if (pclk != 0U)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d021      	beq.n	8004740 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	4a1a      	ldr	r2, [pc, #104]	@ (800476c <UART_SetConfig+0x590>)
 8004702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004706:	461a      	mov	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	fbb3 f2f2 	udiv	r2, r3, r2
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	441a      	add	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	d909      	bls.n	800473a <UART_SetConfig+0x55e>
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472c:	d205      	bcs.n	800473a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	b29a      	uxth	r2, r3
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	e002      	b.n	8004740 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2201      	movs	r2, #1
 8004744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2201      	movs	r2, #1
 800474c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2200      	movs	r2, #0
 8004754:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2200      	movs	r2, #0
 800475a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800475c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004760:	4618      	mov	r0, r3
 8004762:	3730      	adds	r7, #48	@ 0x30
 8004764:	46bd      	mov	sp, r7
 8004766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476a:	bf00      	nop
 800476c:	0800a7dc 	.word	0x0800a7dc
 8004770:	00f42400 	.word	0x00f42400

08004774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01a      	beq.n	800488a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004872:	d10a      	bne.n	800488a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b098      	sub	sp, #96	@ 0x60
 80048bc:	af02      	add	r7, sp, #8
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c8:	f7fd fa0a 	bl	8001ce0 <HAL_GetTick>
 80048cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d12f      	bne.n	800493c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e4:	2200      	movs	r2, #0
 80048e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f88e 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d022      	beq.n	800493c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800490a:	653b      	str	r3, [r7, #80]	@ 0x50
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004914:	647b      	str	r3, [r7, #68]	@ 0x44
 8004916:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800491a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e6      	bne.n	80048f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e063      	b.n	8004a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b04      	cmp	r3, #4
 8004948:	d149      	bne.n	80049de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004952:	2200      	movs	r2, #0
 8004954:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f857 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d03c      	beq.n	80049de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	623b      	str	r3, [r7, #32]
   return(result);
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004982:	633b      	str	r3, [r7, #48]	@ 0x30
 8004984:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e6      	bne.n	8004964 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049b6:	61fa      	str	r2, [r7, #28]
 80049b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	69b9      	ldr	r1, [r7, #24]
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	617b      	str	r3, [r7, #20]
   return(result);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e5      	bne.n	8004996 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e012      	b.n	8004a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3758      	adds	r7, #88	@ 0x58
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	e04f      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a24:	d04b      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fd f95b 	bl	8001ce0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e04e      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d037      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b80      	cmp	r3, #128	@ 0x80
 8004a52:	d034      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d031      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d110      	bne.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fa42 	bl	8004efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e029      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d111      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fa28 	bl	8004efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e00f      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d0a0      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b0a3      	sub	sp, #140	@ 0x8c
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	88fa      	ldrh	r2, [r7, #6]
 8004b08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1a:	d10e      	bne.n	8004b3a <UART_Start_Receive_IT+0x52>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <UART_Start_Receive_IT+0x48>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004b2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b2e:	e02d      	b.n	8004b8c <UART_Start_Receive_IT+0xa4>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	22ff      	movs	r2, #255	@ 0xff
 8004b34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b38:	e028      	b.n	8004b8c <UART_Start_Receive_IT+0xa4>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <UART_Start_Receive_IT+0x76>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <UART_Start_Receive_IT+0x6c>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	22ff      	movs	r2, #255	@ 0xff
 8004b4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b52:	e01b      	b.n	8004b8c <UART_Start_Receive_IT+0xa4>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	227f      	movs	r2, #127	@ 0x7f
 8004b58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b5c:	e016      	b.n	8004b8c <UART_Start_Receive_IT+0xa4>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b66:	d10d      	bne.n	8004b84 <UART_Start_Receive_IT+0x9c>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <UART_Start_Receive_IT+0x92>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	227f      	movs	r2, #127	@ 0x7f
 8004b74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b78:	e008      	b.n	8004b8c <UART_Start_Receive_IT+0xa4>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	223f      	movs	r2, #63	@ 0x3f
 8004b7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b82:	e003      	b.n	8004b8c <UART_Start_Receive_IT+0xa4>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2222      	movs	r2, #34	@ 0x22
 8004b98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004bac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004bc0:	673a      	str	r2, [r7, #112]	@ 0x70
 8004bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004bc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004bce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e3      	bne.n	8004b9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bdc:	d14f      	bne.n	8004c7e <UART_Start_Receive_IT+0x196>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d349      	bcc.n	8004c7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf2:	d107      	bne.n	8004c04 <UART_Start_Receive_IT+0x11c>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a47      	ldr	r2, [pc, #284]	@ (8004d1c <UART_Start_Receive_IT+0x234>)
 8004c00:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c02:	e002      	b.n	8004c0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a46      	ldr	r2, [pc, #280]	@ (8004d20 <UART_Start_Receive_IT+0x238>)
 8004c08:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01a      	beq.n	8004c48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c36:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e4      	bne.n	8004c12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004c68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004c6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e5      	bne.n	8004c48 <UART_Start_Receive_IT+0x160>
 8004c7c:	e046      	b.n	8004d0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c86:	d107      	bne.n	8004c98 <UART_Start_Receive_IT+0x1b0>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a24      	ldr	r2, [pc, #144]	@ (8004d24 <UART_Start_Receive_IT+0x23c>)
 8004c94:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c96:	e002      	b.n	8004c9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a23      	ldr	r2, [pc, #140]	@ (8004d28 <UART_Start_Receive_IT+0x240>)
 8004c9c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d019      	beq.n	8004cda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004cba:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_Start_Receive_IT+0x1be>
 8004cd8:	e018      	b.n	8004d0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f043 0320 	orr.w	r3, r3, #32
 8004cee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cf8:	623b      	str	r3, [r7, #32]
 8004cfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	69f9      	ldr	r1, [r7, #28]
 8004cfe:	6a3a      	ldr	r2, [r7, #32]
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e6      	bne.n	8004cda <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	378c      	adds	r7, #140	@ 0x8c
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	08005905 	.word	0x08005905
 8004d20:	080055a5 	.word	0x080055a5
 8004d24:	080053ed 	.word	0x080053ed
 8004d28:	08005235 	.word	0x08005235

08004d2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b096      	sub	sp, #88	@ 0x58
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2222      	movs	r2, #34	@ 0x22
 8004d54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02d      	beq.n	8004dbe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d68:	4a40      	ldr	r2, [pc, #256]	@ (8004e6c <UART_Start_Receive_DMA+0x140>)
 8004d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d72:	4a3f      	ldr	r2, [pc, #252]	@ (8004e70 <UART_Start_Receive_DMA+0x144>)
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e74 <UART_Start_Receive_DMA+0x148>)
 8004d7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d86:	2200      	movs	r2, #0
 8004d88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3324      	adds	r3, #36	@ 0x24
 8004d96:	4619      	mov	r1, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	f7fd f962 	bl	8002068 <HAL_DMA_Start_IT>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2210      	movs	r2, #16
 8004dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e051      	b.n	8004e62 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004de6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e18:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e4c:	623a      	str	r2, [r7, #32]
 8004e4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69f9      	ldr	r1, [r7, #28]
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3758      	adds	r7, #88	@ 0x58
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	08004fc7 	.word	0x08004fc7
 8004e70:	080050f3 	.word	0x080050f3
 8004e74:	08005131 	.word	0x08005131

08004e78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b08f      	sub	sp, #60	@ 0x3c
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ea0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e6      	bne.n	8004e80 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed2:	61ba      	str	r2, [r7, #24]
 8004ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6979      	ldr	r1, [r7, #20]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e5      	bne.n	8004eb2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004eee:	bf00      	nop
 8004ef0:	373c      	adds	r7, #60	@ 0x3c
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b095      	sub	sp, #84	@ 0x54
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e6      	bne.n	8004f02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3308      	adds	r3, #8
 8004f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e3      	bne.n	8004f34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d118      	bne.n	8004fa6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e6      	bne.n	8004f74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004fba:	bf00      	nop
 8004fbc:	3754      	adds	r7, #84	@ 0x54
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b09c      	sub	sp, #112	@ 0x70
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d171      	bne.n	80050c6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ffa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005008:	65bb      	str	r3, [r7, #88]	@ 0x58
 800500a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800500e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e6      	bne.n	8004fea <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800502c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	667b      	str	r3, [r7, #100]	@ 0x64
 8005034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800503c:	647a      	str	r2, [r7, #68]	@ 0x44
 800503e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800504a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	623b      	str	r3, [r7, #32]
   return(result);
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005066:	663b      	str	r3, [r7, #96]	@ 0x60
 8005068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005070:	633a      	str	r2, [r7, #48]	@ 0x30
 8005072:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005086:	2220      	movs	r2, #32
 8005088:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800508e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d118      	bne.n	80050c6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f023 0310 	bic.w	r3, r3, #16
 80050a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	69b9      	ldr	r1, [r7, #24]
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	617b      	str	r3, [r7, #20]
   return(result);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e6      	bne.n	8005094 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050c8:	2200      	movs	r2, #0
 80050ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050da:	4619      	mov	r1, r3
 80050dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80050de:	f7ff f871 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050e2:	e002      	b.n	80050ea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80050e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80050e6:	f7fc fb1d 	bl	8001724 <HAL_UART_RxCpltCallback>
}
 80050ea:	bf00      	nop
 80050ec:	3770      	adds	r7, #112	@ 0x70
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d109      	bne.n	8005122 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	b29b      	uxth	r3, r3
 8005118:	4619      	mov	r1, r3
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7ff f852 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005120:	e002      	b.n	8005128 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff f83a 	bl	800419c <HAL_UART_RxHalfCpltCallback>
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800514c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005158:	2b80      	cmp	r3, #128	@ 0x80
 800515a:	d109      	bne.n	8005170 <UART_DMAError+0x40>
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b21      	cmp	r3, #33	@ 0x21
 8005160:	d106      	bne.n	8005170 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800516a:	6978      	ldr	r0, [r7, #20]
 800516c:	f7ff fe84 	bl	8004e78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517a:	2b40      	cmp	r3, #64	@ 0x40
 800517c:	d109      	bne.n	8005192 <UART_DMAError+0x62>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b22      	cmp	r3, #34	@ 0x22
 8005182:	d106      	bne.n	8005192 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2200      	movs	r2, #0
 8005188:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f7ff feb4 	bl	8004efa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005198:	f043 0210 	orr.w	r2, r3, #16
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a2:	6978      	ldr	r0, [r7, #20]
 80051a4:	f7ff f804 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a8:	bf00      	nop
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7fe ffee 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6979      	ldr	r1, [r7, #20]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	613b      	str	r3, [r7, #16]
   return(result);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e6      	bne.n	80051e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fe ffaf 	bl	8004188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522a:	bf00      	nop
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b09c      	sub	sp, #112	@ 0x70
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005242:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800524c:	2b22      	cmp	r3, #34	@ 0x22
 800524e:	f040 80be 	bne.w	80053ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800525c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005260:	b2d9      	uxtb	r1, r3
 8005262:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005266:	b2da      	uxtb	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526c:	400a      	ands	r2, r1
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	f040 80a1 	bne.w	80053de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e6      	bne.n	800529c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80052f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a33      	ldr	r2, [pc, #204]	@ (80053e8 <UART_RxISR_8BIT+0x1b4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01f      	beq.n	8005360 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d018      	beq.n	8005360 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	623b      	str	r3, [r7, #32]
   return(result);
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005342:	663b      	str	r3, [r7, #96]	@ 0x60
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800534c:	633b      	str	r3, [r7, #48]	@ 0x30
 800534e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e6      	bne.n	800532e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d12e      	bne.n	80053c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	60fb      	str	r3, [r7, #12]
   return(result);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0310 	bic.w	r3, r3, #16
 8005382:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	69b9      	ldr	r1, [r7, #24]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	617b      	str	r3, [r7, #20]
   return(result);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e6      	bne.n	800536e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d103      	bne.n	80053b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2210      	movs	r2, #16
 80053b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fe ff00 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053c4:	e00b      	b.n	80053de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fc f9ac 	bl	8001724 <HAL_UART_RxCpltCallback>
}
 80053cc:	e007      	b.n	80053de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0208 	orr.w	r2, r2, #8
 80053dc:	619a      	str	r2, [r3, #24]
}
 80053de:	bf00      	nop
 80053e0:	3770      	adds	r7, #112	@ 0x70
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40008000 	.word	0x40008000

080053ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b09c      	sub	sp, #112	@ 0x70
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80053fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005404:	2b22      	cmp	r3, #34	@ 0x22
 8005406:	f040 80be 	bne.w	8005586 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005418:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800541a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800541e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005422:	4013      	ands	r3, r2
 8005424:	b29a      	uxth	r2, r3
 8005426:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005428:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542e:	1c9a      	adds	r2, r3, #2
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 80a1 	bne.w	8005596 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005468:	667b      	str	r3, [r7, #100]	@ 0x64
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005472:	657b      	str	r3, [r7, #84]	@ 0x54
 8005474:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005478:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e6      	bne.n	8005454 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	663b      	str	r3, [r7, #96]	@ 0x60
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e5      	bne.n	8005486 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a33      	ldr	r2, [pc, #204]	@ (80055a0 <UART_RxISR_16BIT+0x1b4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d01f      	beq.n	8005518 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005506:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800550a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e6      	bne.n	80054e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d12e      	bne.n	800557e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	60bb      	str	r3, [r7, #8]
   return(result);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f023 0310 	bic.w	r3, r3, #16
 800553a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	613b      	str	r3, [r7, #16]
   return(result);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e6      	bne.n	8005526 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b10      	cmp	r3, #16
 8005564:	d103      	bne.n	800556e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2210      	movs	r2, #16
 800556c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fe fe24 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800557c:	e00b      	b.n	8005596 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc f8d0 	bl	8001724 <HAL_UART_RxCpltCallback>
}
 8005584:	e007      	b.n	8005596 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0208 	orr.w	r2, r2, #8
 8005594:	619a      	str	r2, [r3, #24]
}
 8005596:	bf00      	nop
 8005598:	3770      	adds	r7, #112	@ 0x70
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40008000 	.word	0x40008000

080055a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b0ac      	sub	sp, #176	@ 0xb0
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80055b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055da:	2b22      	cmp	r3, #34	@ 0x22
 80055dc:	f040 8182 	bne.w	80058e4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80055e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055ea:	e125      	b.n	8005838 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80055fa:	b2d9      	uxtb	r1, r3
 80055fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005600:	b2da      	uxtb	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005606:	400a      	ands	r2, r1
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	2b00      	cmp	r3, #0
 800563c:	d053      	beq.n	80056e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800563e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d011      	beq.n	800566e <UART_RxISR_8BIT_FIFOEN+0xca>
 800564a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800564e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2201      	movs	r2, #1
 800565c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005664:	f043 0201 	orr.w	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800566e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d011      	beq.n	800569e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800567a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00b      	beq.n	800569e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2202      	movs	r2, #2
 800568c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005694:	f043 0204 	orr.w	r2, r3, #4
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800569e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d011      	beq.n	80056ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80056aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2204      	movs	r2, #4
 80056bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c4:	f043 0202 	orr.w	r2, r3, #2
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d006      	beq.n	80056e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fe fd69 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 80a2 	bne.w	8005838 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005716:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005718:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800571c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005724:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e4      	bne.n	80056f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3308      	adds	r3, #8
 8005730:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800573a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800573c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005752:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005754:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005758:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005760:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e1      	bne.n	800572a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a5f      	ldr	r2, [pc, #380]	@ (80058fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d021      	beq.n	80057c8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01a      	beq.n	80057c8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80057b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80057b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80057c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e4      	bne.n	8005792 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d130      	bne.n	8005832 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	f023 0310 	bic.w	r3, r3, #16
 80057ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e4      	bne.n	80057d6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b10      	cmp	r3, #16
 8005818:	d103      	bne.n	8005822 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2210      	movs	r2, #16
 8005820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fe fcca 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
 8005830:	e002      	b.n	8005838 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fb ff76 	bl	8001724 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005838:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800583c:	2b00      	cmp	r3, #0
 800583e:	d006      	beq.n	800584e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f aecf 	bne.w	80055ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005854:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800585c:	2b00      	cmp	r3, #0
 800585e:	d049      	beq.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005866:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800586a:	429a      	cmp	r2, r3
 800586c:	d242      	bcs.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	61fb      	str	r3, [r7, #28]
   return(result);
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e3      	bne.n	800586e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a15      	ldr	r2, [pc, #84]	@ (8005900 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80058aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f043 0320 	orr.w	r3, r3, #32
 80058c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6979      	ldr	r1, [r7, #20]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	613b      	str	r3, [r7, #16]
   return(result);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e4      	bne.n	80058ac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058e2:	e007      	b.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0208 	orr.w	r2, r2, #8
 80058f2:	619a      	str	r2, [r3, #24]
}
 80058f4:	bf00      	nop
 80058f6:	37b0      	adds	r7, #176	@ 0xb0
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40008000 	.word	0x40008000
 8005900:	08005235 	.word	0x08005235

08005904 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b0ae      	sub	sp, #184	@ 0xb8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005912:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800593a:	2b22      	cmp	r3, #34	@ 0x22
 800593c:	f040 8186 	bne.w	8005c4c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005946:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800594a:	e129      	b.n	8005ba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800595e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005962:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005966:	4013      	ands	r3, r2
 8005968:	b29a      	uxth	r2, r3
 800596a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800596e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005974:	1c9a      	adds	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d053      	beq.n	8005a4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d011      	beq.n	80059d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80059ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00b      	beq.n	80059d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2201      	movs	r2, #1
 80059c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c8:	f043 0201 	orr.w	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d011      	beq.n	8005a02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80059de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2202      	movs	r2, #2
 80059f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f8:	f043 0204 	orr.w	r2, r3, #4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d011      	beq.n	8005a32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a28:	f043 0202 	orr.w	r2, r3, #2
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fe fbb7 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f040 80a4 	bne.w	8005ba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e2      	bne.n	8005a58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005aba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005abc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ac0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e1      	bne.n	8005a92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a5f      	ldr	r2, [pc, #380]	@ (8005c64 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d021      	beq.n	8005b30 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01a      	beq.n	8005b30 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e4      	bne.n	8005afa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d130      	bne.n	8005b9a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e4      	bne.n	8005b3e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d103      	bne.n	8005b8a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2210      	movs	r2, #16
 8005b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fe fb16 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
 8005b98:	e002      	b.n	8005ba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fb fdc2 	bl	8001724 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ba0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d006      	beq.n	8005bb6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f47f aecb 	bne.w	800594c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bbc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005bc0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d049      	beq.n	8005c5c <UART_RxISR_16BIT_FIFOEN+0x358>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005bce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d242      	bcs.n	8005c5c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	623b      	str	r3, [r7, #32]
   return(result);
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005bfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e3      	bne.n	8005bd6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a15      	ldr	r2, [pc, #84]	@ (8005c68 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005c12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f043 0320 	orr.w	r3, r3, #32
 8005c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	69b9      	ldr	r1, [r7, #24]
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	617b      	str	r3, [r7, #20]
   return(result);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e4      	bne.n	8005c14 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c4a:	e007      	b.n	8005c5c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0208 	orr.w	r2, r2, #8
 8005c5a:	619a      	str	r2, [r3, #24]
}
 8005c5c:	bf00      	nop
 8005c5e:	37b8      	adds	r7, #184	@ 0xb8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40008000 	.word	0x40008000
 8005c68:	080053ed 	.word	0x080053ed

08005c6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_UARTEx_DisableFifoMode+0x16>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e027      	b.n	8005d0e <HAL_UARTEx_DisableFifoMode+0x66>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	@ 0x24
 8005cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005cec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e02d      	b.n	8005d8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2224      	movs	r2, #36	@ 0x24
 8005d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f850 	bl	8005e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e02d      	b.n	8005e0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2224      	movs	r2, #36	@ 0x24
 8005dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f812 	bl	8005e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d108      	bne.n	8005e36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e34:	e031      	b.n	8005e9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e36:	2308      	movs	r3, #8
 8005e38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	0e5b      	lsrs	r3, r3, #25
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	0f5b      	lsrs	r3, r3, #29
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	7b3a      	ldrb	r2, [r7, #12]
 8005e62:	4911      	ldr	r1, [pc, #68]	@ (8005ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8005e64:	5c8a      	ldrb	r2, [r1, r2]
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e6a:	7b3a      	ldrb	r2, [r7, #12]
 8005e6c:	490f      	ldr	r1, [pc, #60]	@ (8005eac <UARTEx_SetNbDataToProcess+0x98>)
 8005e6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	7b7a      	ldrb	r2, [r7, #13]
 8005e80:	4909      	ldr	r1, [pc, #36]	@ (8005ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8005e82:	5c8a      	ldrb	r2, [r1, r2]
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e88:	7b7a      	ldrb	r2, [r7, #13]
 8005e8a:	4908      	ldr	r1, [pc, #32]	@ (8005eac <UARTEx_SetNbDataToProcess+0x98>)
 8005e8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	0800a7f4 	.word	0x0800a7f4
 8005eac:	0800a7fc 	.word	0x0800a7fc

08005eb0 <__cvt>:
 8005eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	ec57 6b10 	vmov	r6, r7, d0
 8005eb8:	2f00      	cmp	r7, #0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	bfbb      	ittet	lt
 8005ec2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005ec6:	461f      	movlt	r7, r3
 8005ec8:	2300      	movge	r3, #0
 8005eca:	232d      	movlt	r3, #45	@ 0x2d
 8005ecc:	700b      	strb	r3, [r1, #0]
 8005ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ed0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	f023 0820 	bic.w	r8, r3, #32
 8005eda:	bfbc      	itt	lt
 8005edc:	4632      	movlt	r2, r6
 8005ede:	4616      	movlt	r6, r2
 8005ee0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ee4:	d005      	beq.n	8005ef2 <__cvt+0x42>
 8005ee6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005eea:	d100      	bne.n	8005eee <__cvt+0x3e>
 8005eec:	3401      	adds	r4, #1
 8005eee:	2102      	movs	r1, #2
 8005ef0:	e000      	b.n	8005ef4 <__cvt+0x44>
 8005ef2:	2103      	movs	r1, #3
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	ab02      	add	r3, sp, #8
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	ec47 6b10 	vmov	d0, r6, r7
 8005f00:	4653      	mov	r3, sl
 8005f02:	4622      	mov	r2, r4
 8005f04:	f001 ff20 	bl	8007d48 <_dtoa_r>
 8005f08:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	d119      	bne.n	8005f44 <__cvt+0x94>
 8005f10:	f019 0f01 	tst.w	r9, #1
 8005f14:	d00e      	beq.n	8005f34 <__cvt+0x84>
 8005f16:	eb00 0904 	add.w	r9, r0, r4
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa fdf9 	bl	8000b18 <__aeabi_dcmpeq>
 8005f26:	b108      	cbz	r0, 8005f2c <__cvt+0x7c>
 8005f28:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f2c:	2230      	movs	r2, #48	@ 0x30
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	454b      	cmp	r3, r9
 8005f32:	d31e      	bcc.n	8005f72 <__cvt+0xc2>
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f38:	1b5b      	subs	r3, r3, r5
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	b004      	add	sp, #16
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f48:	eb00 0904 	add.w	r9, r0, r4
 8005f4c:	d1e5      	bne.n	8005f1a <__cvt+0x6a>
 8005f4e:	7803      	ldrb	r3, [r0, #0]
 8005f50:	2b30      	cmp	r3, #48	@ 0x30
 8005f52:	d10a      	bne.n	8005f6a <__cvt+0xba>
 8005f54:	2200      	movs	r2, #0
 8005f56:	2300      	movs	r3, #0
 8005f58:	4630      	mov	r0, r6
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	f7fa fddc 	bl	8000b18 <__aeabi_dcmpeq>
 8005f60:	b918      	cbnz	r0, 8005f6a <__cvt+0xba>
 8005f62:	f1c4 0401 	rsb	r4, r4, #1
 8005f66:	f8ca 4000 	str.w	r4, [sl]
 8005f6a:	f8da 3000 	ldr.w	r3, [sl]
 8005f6e:	4499      	add	r9, r3
 8005f70:	e7d3      	b.n	8005f1a <__cvt+0x6a>
 8005f72:	1c59      	adds	r1, r3, #1
 8005f74:	9103      	str	r1, [sp, #12]
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e7d9      	b.n	8005f2e <__cvt+0x7e>

08005f7a <__exponent>:
 8005f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	bfba      	itte	lt
 8005f80:	4249      	neglt	r1, r1
 8005f82:	232d      	movlt	r3, #45	@ 0x2d
 8005f84:	232b      	movge	r3, #43	@ 0x2b
 8005f86:	2909      	cmp	r1, #9
 8005f88:	7002      	strb	r2, [r0, #0]
 8005f8a:	7043      	strb	r3, [r0, #1]
 8005f8c:	dd29      	ble.n	8005fe2 <__exponent+0x68>
 8005f8e:	f10d 0307 	add.w	r3, sp, #7
 8005f92:	461d      	mov	r5, r3
 8005f94:	270a      	movs	r7, #10
 8005f96:	461a      	mov	r2, r3
 8005f98:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f9c:	fb07 1416 	mls	r4, r7, r6, r1
 8005fa0:	3430      	adds	r4, #48	@ 0x30
 8005fa2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	2c63      	cmp	r4, #99	@ 0x63
 8005faa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005fae:	4631      	mov	r1, r6
 8005fb0:	dcf1      	bgt.n	8005f96 <__exponent+0x1c>
 8005fb2:	3130      	adds	r1, #48	@ 0x30
 8005fb4:	1e94      	subs	r4, r2, #2
 8005fb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fba:	1c41      	adds	r1, r0, #1
 8005fbc:	4623      	mov	r3, r4
 8005fbe:	42ab      	cmp	r3, r5
 8005fc0:	d30a      	bcc.n	8005fd8 <__exponent+0x5e>
 8005fc2:	f10d 0309 	add.w	r3, sp, #9
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	42ac      	cmp	r4, r5
 8005fca:	bf88      	it	hi
 8005fcc:	2300      	movhi	r3, #0
 8005fce:	3302      	adds	r3, #2
 8005fd0:	4403      	add	r3, r0
 8005fd2:	1a18      	subs	r0, r3, r0
 8005fd4:	b003      	add	sp, #12
 8005fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005fdc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005fe0:	e7ed      	b.n	8005fbe <__exponent+0x44>
 8005fe2:	2330      	movs	r3, #48	@ 0x30
 8005fe4:	3130      	adds	r1, #48	@ 0x30
 8005fe6:	7083      	strb	r3, [r0, #2]
 8005fe8:	70c1      	strb	r1, [r0, #3]
 8005fea:	1d03      	adds	r3, r0, #4
 8005fec:	e7f1      	b.n	8005fd2 <__exponent+0x58>
	...

08005ff0 <_printf_float>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	b08d      	sub	sp, #52	@ 0x34
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	461f      	mov	r7, r3
 8006000:	4605      	mov	r5, r0
 8006002:	f001 fdc9 	bl	8007b98 <_localeconv_r>
 8006006:	6803      	ldr	r3, [r0, #0]
 8006008:	9304      	str	r3, [sp, #16]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fa f958 	bl	80002c0 <strlen>
 8006010:	2300      	movs	r3, #0
 8006012:	930a      	str	r3, [sp, #40]	@ 0x28
 8006014:	f8d8 3000 	ldr.w	r3, [r8]
 8006018:	9005      	str	r0, [sp, #20]
 800601a:	3307      	adds	r3, #7
 800601c:	f023 0307 	bic.w	r3, r3, #7
 8006020:	f103 0208 	add.w	r2, r3, #8
 8006024:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006028:	f8d4 b000 	ldr.w	fp, [r4]
 800602c:	f8c8 2000 	str.w	r2, [r8]
 8006030:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006034:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006038:	9307      	str	r3, [sp, #28]
 800603a:	f8cd 8018 	str.w	r8, [sp, #24]
 800603e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006046:	4b9c      	ldr	r3, [pc, #624]	@ (80062b8 <_printf_float+0x2c8>)
 8006048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800604c:	f7fa fd96 	bl	8000b7c <__aeabi_dcmpun>
 8006050:	bb70      	cbnz	r0, 80060b0 <_printf_float+0xc0>
 8006052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006056:	4b98      	ldr	r3, [pc, #608]	@ (80062b8 <_printf_float+0x2c8>)
 8006058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800605c:	f7fa fd70 	bl	8000b40 <__aeabi_dcmple>
 8006060:	bb30      	cbnz	r0, 80060b0 <_printf_float+0xc0>
 8006062:	2200      	movs	r2, #0
 8006064:	2300      	movs	r3, #0
 8006066:	4640      	mov	r0, r8
 8006068:	4649      	mov	r1, r9
 800606a:	f7fa fd5f 	bl	8000b2c <__aeabi_dcmplt>
 800606e:	b110      	cbz	r0, 8006076 <_printf_float+0x86>
 8006070:	232d      	movs	r3, #45	@ 0x2d
 8006072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006076:	4a91      	ldr	r2, [pc, #580]	@ (80062bc <_printf_float+0x2cc>)
 8006078:	4b91      	ldr	r3, [pc, #580]	@ (80062c0 <_printf_float+0x2d0>)
 800607a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800607e:	bf94      	ite	ls
 8006080:	4690      	movls	r8, r2
 8006082:	4698      	movhi	r8, r3
 8006084:	2303      	movs	r3, #3
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	f02b 0304 	bic.w	r3, fp, #4
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	f04f 0900 	mov.w	r9, #0
 8006092:	9700      	str	r7, [sp, #0]
 8006094:	4633      	mov	r3, r6
 8006096:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006098:	4621      	mov	r1, r4
 800609a:	4628      	mov	r0, r5
 800609c:	f000 f9d2 	bl	8006444 <_printf_common>
 80060a0:	3001      	adds	r0, #1
 80060a2:	f040 808d 	bne.w	80061c0 <_printf_float+0x1d0>
 80060a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060aa:	b00d      	add	sp, #52	@ 0x34
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	4640      	mov	r0, r8
 80060b6:	4649      	mov	r1, r9
 80060b8:	f7fa fd60 	bl	8000b7c <__aeabi_dcmpun>
 80060bc:	b140      	cbz	r0, 80060d0 <_printf_float+0xe0>
 80060be:	464b      	mov	r3, r9
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bfbc      	itt	lt
 80060c4:	232d      	movlt	r3, #45	@ 0x2d
 80060c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80060ca:	4a7e      	ldr	r2, [pc, #504]	@ (80062c4 <_printf_float+0x2d4>)
 80060cc:	4b7e      	ldr	r3, [pc, #504]	@ (80062c8 <_printf_float+0x2d8>)
 80060ce:	e7d4      	b.n	800607a <_printf_float+0x8a>
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80060d6:	9206      	str	r2, [sp, #24]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	d13b      	bne.n	8006154 <_printf_float+0x164>
 80060dc:	2306      	movs	r3, #6
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80060e4:	2300      	movs	r3, #0
 80060e6:	6022      	str	r2, [r4, #0]
 80060e8:	9303      	str	r3, [sp, #12]
 80060ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80060ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80060f0:	ab09      	add	r3, sp, #36	@ 0x24
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	6861      	ldr	r1, [r4, #4]
 80060f6:	ec49 8b10 	vmov	d0, r8, r9
 80060fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80060fe:	4628      	mov	r0, r5
 8006100:	f7ff fed6 	bl	8005eb0 <__cvt>
 8006104:	9b06      	ldr	r3, [sp, #24]
 8006106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006108:	2b47      	cmp	r3, #71	@ 0x47
 800610a:	4680      	mov	r8, r0
 800610c:	d129      	bne.n	8006162 <_printf_float+0x172>
 800610e:	1cc8      	adds	r0, r1, #3
 8006110:	db02      	blt.n	8006118 <_printf_float+0x128>
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	4299      	cmp	r1, r3
 8006116:	dd41      	ble.n	800619c <_printf_float+0x1ac>
 8006118:	f1aa 0a02 	sub.w	sl, sl, #2
 800611c:	fa5f fa8a 	uxtb.w	sl, sl
 8006120:	3901      	subs	r1, #1
 8006122:	4652      	mov	r2, sl
 8006124:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006128:	9109      	str	r1, [sp, #36]	@ 0x24
 800612a:	f7ff ff26 	bl	8005f7a <__exponent>
 800612e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006130:	1813      	adds	r3, r2, r0
 8006132:	2a01      	cmp	r2, #1
 8006134:	4681      	mov	r9, r0
 8006136:	6123      	str	r3, [r4, #16]
 8006138:	dc02      	bgt.n	8006140 <_printf_float+0x150>
 800613a:	6822      	ldr	r2, [r4, #0]
 800613c:	07d2      	lsls	r2, r2, #31
 800613e:	d501      	bpl.n	8006144 <_printf_float+0x154>
 8006140:	3301      	adds	r3, #1
 8006142:	6123      	str	r3, [r4, #16]
 8006144:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0a2      	beq.n	8006092 <_printf_float+0xa2>
 800614c:	232d      	movs	r3, #45	@ 0x2d
 800614e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006152:	e79e      	b.n	8006092 <_printf_float+0xa2>
 8006154:	9a06      	ldr	r2, [sp, #24]
 8006156:	2a47      	cmp	r2, #71	@ 0x47
 8006158:	d1c2      	bne.n	80060e0 <_printf_float+0xf0>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1c0      	bne.n	80060e0 <_printf_float+0xf0>
 800615e:	2301      	movs	r3, #1
 8006160:	e7bd      	b.n	80060de <_printf_float+0xee>
 8006162:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006166:	d9db      	bls.n	8006120 <_printf_float+0x130>
 8006168:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800616c:	d118      	bne.n	80061a0 <_printf_float+0x1b0>
 800616e:	2900      	cmp	r1, #0
 8006170:	6863      	ldr	r3, [r4, #4]
 8006172:	dd0b      	ble.n	800618c <_printf_float+0x19c>
 8006174:	6121      	str	r1, [r4, #16]
 8006176:	b913      	cbnz	r3, 800617e <_printf_float+0x18e>
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	07d0      	lsls	r0, r2, #31
 800617c:	d502      	bpl.n	8006184 <_printf_float+0x194>
 800617e:	3301      	adds	r3, #1
 8006180:	440b      	add	r3, r1
 8006182:	6123      	str	r3, [r4, #16]
 8006184:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006186:	f04f 0900 	mov.w	r9, #0
 800618a:	e7db      	b.n	8006144 <_printf_float+0x154>
 800618c:	b913      	cbnz	r3, 8006194 <_printf_float+0x1a4>
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	07d2      	lsls	r2, r2, #31
 8006192:	d501      	bpl.n	8006198 <_printf_float+0x1a8>
 8006194:	3302      	adds	r3, #2
 8006196:	e7f4      	b.n	8006182 <_printf_float+0x192>
 8006198:	2301      	movs	r3, #1
 800619a:	e7f2      	b.n	8006182 <_printf_float+0x192>
 800619c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061a2:	4299      	cmp	r1, r3
 80061a4:	db05      	blt.n	80061b2 <_printf_float+0x1c2>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	6121      	str	r1, [r4, #16]
 80061aa:	07d8      	lsls	r0, r3, #31
 80061ac:	d5ea      	bpl.n	8006184 <_printf_float+0x194>
 80061ae:	1c4b      	adds	r3, r1, #1
 80061b0:	e7e7      	b.n	8006182 <_printf_float+0x192>
 80061b2:	2900      	cmp	r1, #0
 80061b4:	bfd4      	ite	le
 80061b6:	f1c1 0202 	rsble	r2, r1, #2
 80061ba:	2201      	movgt	r2, #1
 80061bc:	4413      	add	r3, r2
 80061be:	e7e0      	b.n	8006182 <_printf_float+0x192>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	055a      	lsls	r2, r3, #21
 80061c4:	d407      	bmi.n	80061d6 <_printf_float+0x1e6>
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	4642      	mov	r2, r8
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	d12b      	bne.n	800622c <_printf_float+0x23c>
 80061d4:	e767      	b.n	80060a6 <_printf_float+0xb6>
 80061d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061da:	f240 80dd 	bls.w	8006398 <_printf_float+0x3a8>
 80061de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061e2:	2200      	movs	r2, #0
 80061e4:	2300      	movs	r3, #0
 80061e6:	f7fa fc97 	bl	8000b18 <__aeabi_dcmpeq>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d033      	beq.n	8006256 <_printf_float+0x266>
 80061ee:	4a37      	ldr	r2, [pc, #220]	@ (80062cc <_printf_float+0x2dc>)
 80061f0:	2301      	movs	r3, #1
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f af54 	beq.w	80060a6 <_printf_float+0xb6>
 80061fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006202:	4543      	cmp	r3, r8
 8006204:	db02      	blt.n	800620c <_printf_float+0x21c>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	07d8      	lsls	r0, r3, #31
 800620a:	d50f      	bpl.n	800622c <_printf_float+0x23c>
 800620c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	f43f af45 	beq.w	80060a6 <_printf_float+0xb6>
 800621c:	f04f 0900 	mov.w	r9, #0
 8006220:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006224:	f104 0a1a 	add.w	sl, r4, #26
 8006228:	45c8      	cmp	r8, r9
 800622a:	dc09      	bgt.n	8006240 <_printf_float+0x250>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	079b      	lsls	r3, r3, #30
 8006230:	f100 8103 	bmi.w	800643a <_printf_float+0x44a>
 8006234:	68e0      	ldr	r0, [r4, #12]
 8006236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006238:	4298      	cmp	r0, r3
 800623a:	bfb8      	it	lt
 800623c:	4618      	movlt	r0, r3
 800623e:	e734      	b.n	80060aa <_printf_float+0xba>
 8006240:	2301      	movs	r3, #1
 8006242:	4652      	mov	r2, sl
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	f43f af2b 	beq.w	80060a6 <_printf_float+0xb6>
 8006250:	f109 0901 	add.w	r9, r9, #1
 8006254:	e7e8      	b.n	8006228 <_printf_float+0x238>
 8006256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	dc39      	bgt.n	80062d0 <_printf_float+0x2e0>
 800625c:	4a1b      	ldr	r2, [pc, #108]	@ (80062cc <_printf_float+0x2dc>)
 800625e:	2301      	movs	r3, #1
 8006260:	4631      	mov	r1, r6
 8006262:	4628      	mov	r0, r5
 8006264:	47b8      	blx	r7
 8006266:	3001      	adds	r0, #1
 8006268:	f43f af1d 	beq.w	80060a6 <_printf_float+0xb6>
 800626c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006270:	ea59 0303 	orrs.w	r3, r9, r3
 8006274:	d102      	bne.n	800627c <_printf_float+0x28c>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	07d9      	lsls	r1, r3, #31
 800627a:	d5d7      	bpl.n	800622c <_printf_float+0x23c>
 800627c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006280:	4631      	mov	r1, r6
 8006282:	4628      	mov	r0, r5
 8006284:	47b8      	blx	r7
 8006286:	3001      	adds	r0, #1
 8006288:	f43f af0d 	beq.w	80060a6 <_printf_float+0xb6>
 800628c:	f04f 0a00 	mov.w	sl, #0
 8006290:	f104 0b1a 	add.w	fp, r4, #26
 8006294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006296:	425b      	negs	r3, r3
 8006298:	4553      	cmp	r3, sl
 800629a:	dc01      	bgt.n	80062a0 <_printf_float+0x2b0>
 800629c:	464b      	mov	r3, r9
 800629e:	e793      	b.n	80061c8 <_printf_float+0x1d8>
 80062a0:	2301      	movs	r3, #1
 80062a2:	465a      	mov	r2, fp
 80062a4:	4631      	mov	r1, r6
 80062a6:	4628      	mov	r0, r5
 80062a8:	47b8      	blx	r7
 80062aa:	3001      	adds	r0, #1
 80062ac:	f43f aefb 	beq.w	80060a6 <_printf_float+0xb6>
 80062b0:	f10a 0a01 	add.w	sl, sl, #1
 80062b4:	e7ee      	b.n	8006294 <_printf_float+0x2a4>
 80062b6:	bf00      	nop
 80062b8:	7fefffff 	.word	0x7fefffff
 80062bc:	0800a804 	.word	0x0800a804
 80062c0:	0800a808 	.word	0x0800a808
 80062c4:	0800a80c 	.word	0x0800a80c
 80062c8:	0800a810 	.word	0x0800a810
 80062cc:	0800a814 	.word	0x0800a814
 80062d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062d6:	4553      	cmp	r3, sl
 80062d8:	bfa8      	it	ge
 80062da:	4653      	movge	r3, sl
 80062dc:	2b00      	cmp	r3, #0
 80062de:	4699      	mov	r9, r3
 80062e0:	dc36      	bgt.n	8006350 <_printf_float+0x360>
 80062e2:	f04f 0b00 	mov.w	fp, #0
 80062e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ea:	f104 021a 	add.w	r2, r4, #26
 80062ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062f0:	9306      	str	r3, [sp, #24]
 80062f2:	eba3 0309 	sub.w	r3, r3, r9
 80062f6:	455b      	cmp	r3, fp
 80062f8:	dc31      	bgt.n	800635e <_printf_float+0x36e>
 80062fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062fc:	459a      	cmp	sl, r3
 80062fe:	dc3a      	bgt.n	8006376 <_printf_float+0x386>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	07da      	lsls	r2, r3, #31
 8006304:	d437      	bmi.n	8006376 <_printf_float+0x386>
 8006306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006308:	ebaa 0903 	sub.w	r9, sl, r3
 800630c:	9b06      	ldr	r3, [sp, #24]
 800630e:	ebaa 0303 	sub.w	r3, sl, r3
 8006312:	4599      	cmp	r9, r3
 8006314:	bfa8      	it	ge
 8006316:	4699      	movge	r9, r3
 8006318:	f1b9 0f00 	cmp.w	r9, #0
 800631c:	dc33      	bgt.n	8006386 <_printf_float+0x396>
 800631e:	f04f 0800 	mov.w	r8, #0
 8006322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006326:	f104 0b1a 	add.w	fp, r4, #26
 800632a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632c:	ebaa 0303 	sub.w	r3, sl, r3
 8006330:	eba3 0309 	sub.w	r3, r3, r9
 8006334:	4543      	cmp	r3, r8
 8006336:	f77f af79 	ble.w	800622c <_printf_float+0x23c>
 800633a:	2301      	movs	r3, #1
 800633c:	465a      	mov	r2, fp
 800633e:	4631      	mov	r1, r6
 8006340:	4628      	mov	r0, r5
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	f43f aeae 	beq.w	80060a6 <_printf_float+0xb6>
 800634a:	f108 0801 	add.w	r8, r8, #1
 800634e:	e7ec      	b.n	800632a <_printf_float+0x33a>
 8006350:	4642      	mov	r2, r8
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	d1c2      	bne.n	80062e2 <_printf_float+0x2f2>
 800635c:	e6a3      	b.n	80060a6 <_printf_float+0xb6>
 800635e:	2301      	movs	r3, #1
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	9206      	str	r2, [sp, #24]
 8006366:	47b8      	blx	r7
 8006368:	3001      	adds	r0, #1
 800636a:	f43f ae9c 	beq.w	80060a6 <_printf_float+0xb6>
 800636e:	9a06      	ldr	r2, [sp, #24]
 8006370:	f10b 0b01 	add.w	fp, fp, #1
 8006374:	e7bb      	b.n	80062ee <_printf_float+0x2fe>
 8006376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	d1c0      	bne.n	8006306 <_printf_float+0x316>
 8006384:	e68f      	b.n	80060a6 <_printf_float+0xb6>
 8006386:	9a06      	ldr	r2, [sp, #24]
 8006388:	464b      	mov	r3, r9
 800638a:	4442      	add	r2, r8
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	d1c3      	bne.n	800631e <_printf_float+0x32e>
 8006396:	e686      	b.n	80060a6 <_printf_float+0xb6>
 8006398:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800639c:	f1ba 0f01 	cmp.w	sl, #1
 80063a0:	dc01      	bgt.n	80063a6 <_printf_float+0x3b6>
 80063a2:	07db      	lsls	r3, r3, #31
 80063a4:	d536      	bpl.n	8006414 <_printf_float+0x424>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4642      	mov	r2, r8
 80063aa:	4631      	mov	r1, r6
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b8      	blx	r7
 80063b0:	3001      	adds	r0, #1
 80063b2:	f43f ae78 	beq.w	80060a6 <_printf_float+0xb6>
 80063b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ba:	4631      	mov	r1, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	47b8      	blx	r7
 80063c0:	3001      	adds	r0, #1
 80063c2:	f43f ae70 	beq.w	80060a6 <_printf_float+0xb6>
 80063c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063ca:	2200      	movs	r2, #0
 80063cc:	2300      	movs	r3, #0
 80063ce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80063d2:	f7fa fba1 	bl	8000b18 <__aeabi_dcmpeq>
 80063d6:	b9c0      	cbnz	r0, 800640a <_printf_float+0x41a>
 80063d8:	4653      	mov	r3, sl
 80063da:	f108 0201 	add.w	r2, r8, #1
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	d10c      	bne.n	8006402 <_printf_float+0x412>
 80063e8:	e65d      	b.n	80060a6 <_printf_float+0xb6>
 80063ea:	2301      	movs	r3, #1
 80063ec:	465a      	mov	r2, fp
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f ae56 	beq.w	80060a6 <_printf_float+0xb6>
 80063fa:	f108 0801 	add.w	r8, r8, #1
 80063fe:	45d0      	cmp	r8, sl
 8006400:	dbf3      	blt.n	80063ea <_printf_float+0x3fa>
 8006402:	464b      	mov	r3, r9
 8006404:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006408:	e6df      	b.n	80061ca <_printf_float+0x1da>
 800640a:	f04f 0800 	mov.w	r8, #0
 800640e:	f104 0b1a 	add.w	fp, r4, #26
 8006412:	e7f4      	b.n	80063fe <_printf_float+0x40e>
 8006414:	2301      	movs	r3, #1
 8006416:	4642      	mov	r2, r8
 8006418:	e7e1      	b.n	80063de <_printf_float+0x3ee>
 800641a:	2301      	movs	r3, #1
 800641c:	464a      	mov	r2, r9
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	f43f ae3e 	beq.w	80060a6 <_printf_float+0xb6>
 800642a:	f108 0801 	add.w	r8, r8, #1
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006432:	1a5b      	subs	r3, r3, r1
 8006434:	4543      	cmp	r3, r8
 8006436:	dcf0      	bgt.n	800641a <_printf_float+0x42a>
 8006438:	e6fc      	b.n	8006234 <_printf_float+0x244>
 800643a:	f04f 0800 	mov.w	r8, #0
 800643e:	f104 0919 	add.w	r9, r4, #25
 8006442:	e7f4      	b.n	800642e <_printf_float+0x43e>

08006444 <_printf_common>:
 8006444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	4616      	mov	r6, r2
 800644a:	4698      	mov	r8, r3
 800644c:	688a      	ldr	r2, [r1, #8]
 800644e:	690b      	ldr	r3, [r1, #16]
 8006450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006454:	4293      	cmp	r3, r2
 8006456:	bfb8      	it	lt
 8006458:	4613      	movlt	r3, r2
 800645a:	6033      	str	r3, [r6, #0]
 800645c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006460:	4607      	mov	r7, r0
 8006462:	460c      	mov	r4, r1
 8006464:	b10a      	cbz	r2, 800646a <_printf_common+0x26>
 8006466:	3301      	adds	r3, #1
 8006468:	6033      	str	r3, [r6, #0]
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	0699      	lsls	r1, r3, #26
 800646e:	bf42      	ittt	mi
 8006470:	6833      	ldrmi	r3, [r6, #0]
 8006472:	3302      	addmi	r3, #2
 8006474:	6033      	strmi	r3, [r6, #0]
 8006476:	6825      	ldr	r5, [r4, #0]
 8006478:	f015 0506 	ands.w	r5, r5, #6
 800647c:	d106      	bne.n	800648c <_printf_common+0x48>
 800647e:	f104 0a19 	add.w	sl, r4, #25
 8006482:	68e3      	ldr	r3, [r4, #12]
 8006484:	6832      	ldr	r2, [r6, #0]
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	42ab      	cmp	r3, r5
 800648a:	dc26      	bgt.n	80064da <_printf_common+0x96>
 800648c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	3b00      	subs	r3, #0
 8006494:	bf18      	it	ne
 8006496:	2301      	movne	r3, #1
 8006498:	0692      	lsls	r2, r2, #26
 800649a:	d42b      	bmi.n	80064f4 <_printf_common+0xb0>
 800649c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064a0:	4641      	mov	r1, r8
 80064a2:	4638      	mov	r0, r7
 80064a4:	47c8      	blx	r9
 80064a6:	3001      	adds	r0, #1
 80064a8:	d01e      	beq.n	80064e8 <_printf_common+0xa4>
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	6922      	ldr	r2, [r4, #16]
 80064ae:	f003 0306 	and.w	r3, r3, #6
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	bf02      	ittt	eq
 80064b6:	68e5      	ldreq	r5, [r4, #12]
 80064b8:	6833      	ldreq	r3, [r6, #0]
 80064ba:	1aed      	subeq	r5, r5, r3
 80064bc:	68a3      	ldr	r3, [r4, #8]
 80064be:	bf0c      	ite	eq
 80064c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064c4:	2500      	movne	r5, #0
 80064c6:	4293      	cmp	r3, r2
 80064c8:	bfc4      	itt	gt
 80064ca:	1a9b      	subgt	r3, r3, r2
 80064cc:	18ed      	addgt	r5, r5, r3
 80064ce:	2600      	movs	r6, #0
 80064d0:	341a      	adds	r4, #26
 80064d2:	42b5      	cmp	r5, r6
 80064d4:	d11a      	bne.n	800650c <_printf_common+0xc8>
 80064d6:	2000      	movs	r0, #0
 80064d8:	e008      	b.n	80064ec <_printf_common+0xa8>
 80064da:	2301      	movs	r3, #1
 80064dc:	4652      	mov	r2, sl
 80064de:	4641      	mov	r1, r8
 80064e0:	4638      	mov	r0, r7
 80064e2:	47c8      	blx	r9
 80064e4:	3001      	adds	r0, #1
 80064e6:	d103      	bne.n	80064f0 <_printf_common+0xac>
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f0:	3501      	adds	r5, #1
 80064f2:	e7c6      	b.n	8006482 <_printf_common+0x3e>
 80064f4:	18e1      	adds	r1, r4, r3
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	2030      	movs	r0, #48	@ 0x30
 80064fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064fe:	4422      	add	r2, r4
 8006500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006508:	3302      	adds	r3, #2
 800650a:	e7c7      	b.n	800649c <_printf_common+0x58>
 800650c:	2301      	movs	r3, #1
 800650e:	4622      	mov	r2, r4
 8006510:	4641      	mov	r1, r8
 8006512:	4638      	mov	r0, r7
 8006514:	47c8      	blx	r9
 8006516:	3001      	adds	r0, #1
 8006518:	d0e6      	beq.n	80064e8 <_printf_common+0xa4>
 800651a:	3601      	adds	r6, #1
 800651c:	e7d9      	b.n	80064d2 <_printf_common+0x8e>
	...

08006520 <_printf_i>:
 8006520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	7e0f      	ldrb	r7, [r1, #24]
 8006526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006528:	2f78      	cmp	r7, #120	@ 0x78
 800652a:	4691      	mov	r9, r2
 800652c:	4680      	mov	r8, r0
 800652e:	460c      	mov	r4, r1
 8006530:	469a      	mov	sl, r3
 8006532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006536:	d807      	bhi.n	8006548 <_printf_i+0x28>
 8006538:	2f62      	cmp	r7, #98	@ 0x62
 800653a:	d80a      	bhi.n	8006552 <_printf_i+0x32>
 800653c:	2f00      	cmp	r7, #0
 800653e:	f000 80d2 	beq.w	80066e6 <_printf_i+0x1c6>
 8006542:	2f58      	cmp	r7, #88	@ 0x58
 8006544:	f000 80b9 	beq.w	80066ba <_printf_i+0x19a>
 8006548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800654c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006550:	e03a      	b.n	80065c8 <_printf_i+0xa8>
 8006552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006556:	2b15      	cmp	r3, #21
 8006558:	d8f6      	bhi.n	8006548 <_printf_i+0x28>
 800655a:	a101      	add	r1, pc, #4	@ (adr r1, 8006560 <_printf_i+0x40>)
 800655c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006560:	080065b9 	.word	0x080065b9
 8006564:	080065cd 	.word	0x080065cd
 8006568:	08006549 	.word	0x08006549
 800656c:	08006549 	.word	0x08006549
 8006570:	08006549 	.word	0x08006549
 8006574:	08006549 	.word	0x08006549
 8006578:	080065cd 	.word	0x080065cd
 800657c:	08006549 	.word	0x08006549
 8006580:	08006549 	.word	0x08006549
 8006584:	08006549 	.word	0x08006549
 8006588:	08006549 	.word	0x08006549
 800658c:	080066cd 	.word	0x080066cd
 8006590:	080065f7 	.word	0x080065f7
 8006594:	08006687 	.word	0x08006687
 8006598:	08006549 	.word	0x08006549
 800659c:	08006549 	.word	0x08006549
 80065a0:	080066ef 	.word	0x080066ef
 80065a4:	08006549 	.word	0x08006549
 80065a8:	080065f7 	.word	0x080065f7
 80065ac:	08006549 	.word	0x08006549
 80065b0:	08006549 	.word	0x08006549
 80065b4:	0800668f 	.word	0x0800668f
 80065b8:	6833      	ldr	r3, [r6, #0]
 80065ba:	1d1a      	adds	r2, r3, #4
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6032      	str	r2, [r6, #0]
 80065c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065c8:	2301      	movs	r3, #1
 80065ca:	e09d      	b.n	8006708 <_printf_i+0x1e8>
 80065cc:	6833      	ldr	r3, [r6, #0]
 80065ce:	6820      	ldr	r0, [r4, #0]
 80065d0:	1d19      	adds	r1, r3, #4
 80065d2:	6031      	str	r1, [r6, #0]
 80065d4:	0606      	lsls	r6, r0, #24
 80065d6:	d501      	bpl.n	80065dc <_printf_i+0xbc>
 80065d8:	681d      	ldr	r5, [r3, #0]
 80065da:	e003      	b.n	80065e4 <_printf_i+0xc4>
 80065dc:	0645      	lsls	r5, r0, #25
 80065de:	d5fb      	bpl.n	80065d8 <_printf_i+0xb8>
 80065e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065e4:	2d00      	cmp	r5, #0
 80065e6:	da03      	bge.n	80065f0 <_printf_i+0xd0>
 80065e8:	232d      	movs	r3, #45	@ 0x2d
 80065ea:	426d      	negs	r5, r5
 80065ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065f0:	4859      	ldr	r0, [pc, #356]	@ (8006758 <_printf_i+0x238>)
 80065f2:	230a      	movs	r3, #10
 80065f4:	e011      	b.n	800661a <_printf_i+0xfa>
 80065f6:	6821      	ldr	r1, [r4, #0]
 80065f8:	6833      	ldr	r3, [r6, #0]
 80065fa:	0608      	lsls	r0, r1, #24
 80065fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006600:	d402      	bmi.n	8006608 <_printf_i+0xe8>
 8006602:	0649      	lsls	r1, r1, #25
 8006604:	bf48      	it	mi
 8006606:	b2ad      	uxthmi	r5, r5
 8006608:	2f6f      	cmp	r7, #111	@ 0x6f
 800660a:	4853      	ldr	r0, [pc, #332]	@ (8006758 <_printf_i+0x238>)
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	bf14      	ite	ne
 8006610:	230a      	movne	r3, #10
 8006612:	2308      	moveq	r3, #8
 8006614:	2100      	movs	r1, #0
 8006616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800661a:	6866      	ldr	r6, [r4, #4]
 800661c:	60a6      	str	r6, [r4, #8]
 800661e:	2e00      	cmp	r6, #0
 8006620:	bfa2      	ittt	ge
 8006622:	6821      	ldrge	r1, [r4, #0]
 8006624:	f021 0104 	bicge.w	r1, r1, #4
 8006628:	6021      	strge	r1, [r4, #0]
 800662a:	b90d      	cbnz	r5, 8006630 <_printf_i+0x110>
 800662c:	2e00      	cmp	r6, #0
 800662e:	d04b      	beq.n	80066c8 <_printf_i+0x1a8>
 8006630:	4616      	mov	r6, r2
 8006632:	fbb5 f1f3 	udiv	r1, r5, r3
 8006636:	fb03 5711 	mls	r7, r3, r1, r5
 800663a:	5dc7      	ldrb	r7, [r0, r7]
 800663c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006640:	462f      	mov	r7, r5
 8006642:	42bb      	cmp	r3, r7
 8006644:	460d      	mov	r5, r1
 8006646:	d9f4      	bls.n	8006632 <_printf_i+0x112>
 8006648:	2b08      	cmp	r3, #8
 800664a:	d10b      	bne.n	8006664 <_printf_i+0x144>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	07df      	lsls	r7, r3, #31
 8006650:	d508      	bpl.n	8006664 <_printf_i+0x144>
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	6861      	ldr	r1, [r4, #4]
 8006656:	4299      	cmp	r1, r3
 8006658:	bfde      	ittt	le
 800665a:	2330      	movle	r3, #48	@ 0x30
 800665c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006660:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006664:	1b92      	subs	r2, r2, r6
 8006666:	6122      	str	r2, [r4, #16]
 8006668:	f8cd a000 	str.w	sl, [sp]
 800666c:	464b      	mov	r3, r9
 800666e:	aa03      	add	r2, sp, #12
 8006670:	4621      	mov	r1, r4
 8006672:	4640      	mov	r0, r8
 8006674:	f7ff fee6 	bl	8006444 <_printf_common>
 8006678:	3001      	adds	r0, #1
 800667a:	d14a      	bne.n	8006712 <_printf_i+0x1f2>
 800667c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006680:	b004      	add	sp, #16
 8006682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	f043 0320 	orr.w	r3, r3, #32
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	4833      	ldr	r0, [pc, #204]	@ (800675c <_printf_i+0x23c>)
 8006690:	2778      	movs	r7, #120	@ 0x78
 8006692:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	6831      	ldr	r1, [r6, #0]
 800669a:	061f      	lsls	r7, r3, #24
 800669c:	f851 5b04 	ldr.w	r5, [r1], #4
 80066a0:	d402      	bmi.n	80066a8 <_printf_i+0x188>
 80066a2:	065f      	lsls	r7, r3, #25
 80066a4:	bf48      	it	mi
 80066a6:	b2ad      	uxthmi	r5, r5
 80066a8:	6031      	str	r1, [r6, #0]
 80066aa:	07d9      	lsls	r1, r3, #31
 80066ac:	bf44      	itt	mi
 80066ae:	f043 0320 	orrmi.w	r3, r3, #32
 80066b2:	6023      	strmi	r3, [r4, #0]
 80066b4:	b11d      	cbz	r5, 80066be <_printf_i+0x19e>
 80066b6:	2310      	movs	r3, #16
 80066b8:	e7ac      	b.n	8006614 <_printf_i+0xf4>
 80066ba:	4827      	ldr	r0, [pc, #156]	@ (8006758 <_printf_i+0x238>)
 80066bc:	e7e9      	b.n	8006692 <_printf_i+0x172>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	f023 0320 	bic.w	r3, r3, #32
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	e7f6      	b.n	80066b6 <_printf_i+0x196>
 80066c8:	4616      	mov	r6, r2
 80066ca:	e7bd      	b.n	8006648 <_printf_i+0x128>
 80066cc:	6833      	ldr	r3, [r6, #0]
 80066ce:	6825      	ldr	r5, [r4, #0]
 80066d0:	6961      	ldr	r1, [r4, #20]
 80066d2:	1d18      	adds	r0, r3, #4
 80066d4:	6030      	str	r0, [r6, #0]
 80066d6:	062e      	lsls	r6, r5, #24
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	d501      	bpl.n	80066e0 <_printf_i+0x1c0>
 80066dc:	6019      	str	r1, [r3, #0]
 80066de:	e002      	b.n	80066e6 <_printf_i+0x1c6>
 80066e0:	0668      	lsls	r0, r5, #25
 80066e2:	d5fb      	bpl.n	80066dc <_printf_i+0x1bc>
 80066e4:	8019      	strh	r1, [r3, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	4616      	mov	r6, r2
 80066ec:	e7bc      	b.n	8006668 <_printf_i+0x148>
 80066ee:	6833      	ldr	r3, [r6, #0]
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	6032      	str	r2, [r6, #0]
 80066f4:	681e      	ldr	r6, [r3, #0]
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	2100      	movs	r1, #0
 80066fa:	4630      	mov	r0, r6
 80066fc:	f7f9 fd90 	bl	8000220 <memchr>
 8006700:	b108      	cbz	r0, 8006706 <_printf_i+0x1e6>
 8006702:	1b80      	subs	r0, r0, r6
 8006704:	6060      	str	r0, [r4, #4]
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	2300      	movs	r3, #0
 800670c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006710:	e7aa      	b.n	8006668 <_printf_i+0x148>
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	4632      	mov	r2, r6
 8006716:	4649      	mov	r1, r9
 8006718:	4640      	mov	r0, r8
 800671a:	47d0      	blx	sl
 800671c:	3001      	adds	r0, #1
 800671e:	d0ad      	beq.n	800667c <_printf_i+0x15c>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	079b      	lsls	r3, r3, #30
 8006724:	d413      	bmi.n	800674e <_printf_i+0x22e>
 8006726:	68e0      	ldr	r0, [r4, #12]
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	4298      	cmp	r0, r3
 800672c:	bfb8      	it	lt
 800672e:	4618      	movlt	r0, r3
 8006730:	e7a6      	b.n	8006680 <_printf_i+0x160>
 8006732:	2301      	movs	r3, #1
 8006734:	4632      	mov	r2, r6
 8006736:	4649      	mov	r1, r9
 8006738:	4640      	mov	r0, r8
 800673a:	47d0      	blx	sl
 800673c:	3001      	adds	r0, #1
 800673e:	d09d      	beq.n	800667c <_printf_i+0x15c>
 8006740:	3501      	adds	r5, #1
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	9903      	ldr	r1, [sp, #12]
 8006746:	1a5b      	subs	r3, r3, r1
 8006748:	42ab      	cmp	r3, r5
 800674a:	dcf2      	bgt.n	8006732 <_printf_i+0x212>
 800674c:	e7eb      	b.n	8006726 <_printf_i+0x206>
 800674e:	2500      	movs	r5, #0
 8006750:	f104 0619 	add.w	r6, r4, #25
 8006754:	e7f5      	b.n	8006742 <_printf_i+0x222>
 8006756:	bf00      	nop
 8006758:	0800a816 	.word	0x0800a816
 800675c:	0800a827 	.word	0x0800a827

08006760 <_scanf_float>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	b087      	sub	sp, #28
 8006766:	4617      	mov	r7, r2
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	688b      	ldr	r3, [r1, #8]
 800676c:	1e5a      	subs	r2, r3, #1
 800676e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006772:	bf81      	itttt	hi
 8006774:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006778:	eb03 0b05 	addhi.w	fp, r3, r5
 800677c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006780:	608b      	strhi	r3, [r1, #8]
 8006782:	680b      	ldr	r3, [r1, #0]
 8006784:	460a      	mov	r2, r1
 8006786:	f04f 0500 	mov.w	r5, #0
 800678a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800678e:	f842 3b1c 	str.w	r3, [r2], #28
 8006792:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006796:	4680      	mov	r8, r0
 8006798:	460c      	mov	r4, r1
 800679a:	bf98      	it	ls
 800679c:	f04f 0b00 	movls.w	fp, #0
 80067a0:	9201      	str	r2, [sp, #4]
 80067a2:	4616      	mov	r6, r2
 80067a4:	46aa      	mov	sl, r5
 80067a6:	46a9      	mov	r9, r5
 80067a8:	9502      	str	r5, [sp, #8]
 80067aa:	68a2      	ldr	r2, [r4, #8]
 80067ac:	b152      	cbz	r2, 80067c4 <_scanf_float+0x64>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80067b4:	d864      	bhi.n	8006880 <_scanf_float+0x120>
 80067b6:	2b40      	cmp	r3, #64	@ 0x40
 80067b8:	d83c      	bhi.n	8006834 <_scanf_float+0xd4>
 80067ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80067be:	b2c8      	uxtb	r0, r1
 80067c0:	280e      	cmp	r0, #14
 80067c2:	d93a      	bls.n	800683a <_scanf_float+0xda>
 80067c4:	f1b9 0f00 	cmp.w	r9, #0
 80067c8:	d003      	beq.n	80067d2 <_scanf_float+0x72>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80067d6:	f1ba 0f01 	cmp.w	sl, #1
 80067da:	f200 8117 	bhi.w	8006a0c <_scanf_float+0x2ac>
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	429e      	cmp	r6, r3
 80067e2:	f200 8108 	bhi.w	80069f6 <_scanf_float+0x296>
 80067e6:	2001      	movs	r0, #1
 80067e8:	b007      	add	sp, #28
 80067ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80067f2:	2a0d      	cmp	r2, #13
 80067f4:	d8e6      	bhi.n	80067c4 <_scanf_float+0x64>
 80067f6:	a101      	add	r1, pc, #4	@ (adr r1, 80067fc <_scanf_float+0x9c>)
 80067f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80067fc:	08006943 	.word	0x08006943
 8006800:	080067c5 	.word	0x080067c5
 8006804:	080067c5 	.word	0x080067c5
 8006808:	080067c5 	.word	0x080067c5
 800680c:	080069a3 	.word	0x080069a3
 8006810:	0800697b 	.word	0x0800697b
 8006814:	080067c5 	.word	0x080067c5
 8006818:	080067c5 	.word	0x080067c5
 800681c:	08006951 	.word	0x08006951
 8006820:	080067c5 	.word	0x080067c5
 8006824:	080067c5 	.word	0x080067c5
 8006828:	080067c5 	.word	0x080067c5
 800682c:	080067c5 	.word	0x080067c5
 8006830:	08006909 	.word	0x08006909
 8006834:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006838:	e7db      	b.n	80067f2 <_scanf_float+0x92>
 800683a:	290e      	cmp	r1, #14
 800683c:	d8c2      	bhi.n	80067c4 <_scanf_float+0x64>
 800683e:	a001      	add	r0, pc, #4	@ (adr r0, 8006844 <_scanf_float+0xe4>)
 8006840:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006844:	080068f9 	.word	0x080068f9
 8006848:	080067c5 	.word	0x080067c5
 800684c:	080068f9 	.word	0x080068f9
 8006850:	0800698f 	.word	0x0800698f
 8006854:	080067c5 	.word	0x080067c5
 8006858:	080068a1 	.word	0x080068a1
 800685c:	080068df 	.word	0x080068df
 8006860:	080068df 	.word	0x080068df
 8006864:	080068df 	.word	0x080068df
 8006868:	080068df 	.word	0x080068df
 800686c:	080068df 	.word	0x080068df
 8006870:	080068df 	.word	0x080068df
 8006874:	080068df 	.word	0x080068df
 8006878:	080068df 	.word	0x080068df
 800687c:	080068df 	.word	0x080068df
 8006880:	2b6e      	cmp	r3, #110	@ 0x6e
 8006882:	d809      	bhi.n	8006898 <_scanf_float+0x138>
 8006884:	2b60      	cmp	r3, #96	@ 0x60
 8006886:	d8b2      	bhi.n	80067ee <_scanf_float+0x8e>
 8006888:	2b54      	cmp	r3, #84	@ 0x54
 800688a:	d07b      	beq.n	8006984 <_scanf_float+0x224>
 800688c:	2b59      	cmp	r3, #89	@ 0x59
 800688e:	d199      	bne.n	80067c4 <_scanf_float+0x64>
 8006890:	2d07      	cmp	r5, #7
 8006892:	d197      	bne.n	80067c4 <_scanf_float+0x64>
 8006894:	2508      	movs	r5, #8
 8006896:	e02c      	b.n	80068f2 <_scanf_float+0x192>
 8006898:	2b74      	cmp	r3, #116	@ 0x74
 800689a:	d073      	beq.n	8006984 <_scanf_float+0x224>
 800689c:	2b79      	cmp	r3, #121	@ 0x79
 800689e:	e7f6      	b.n	800688e <_scanf_float+0x12e>
 80068a0:	6821      	ldr	r1, [r4, #0]
 80068a2:	05c8      	lsls	r0, r1, #23
 80068a4:	d51b      	bpl.n	80068de <_scanf_float+0x17e>
 80068a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80068aa:	6021      	str	r1, [r4, #0]
 80068ac:	f109 0901 	add.w	r9, r9, #1
 80068b0:	f1bb 0f00 	cmp.w	fp, #0
 80068b4:	d003      	beq.n	80068be <_scanf_float+0x15e>
 80068b6:	3201      	adds	r2, #1
 80068b8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80068bc:	60a2      	str	r2, [r4, #8]
 80068be:	68a3      	ldr	r3, [r4, #8]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	3301      	adds	r3, #1
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	f340 8087 	ble.w	80069e4 <_scanf_float+0x284>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	e765      	b.n	80067aa <_scanf_float+0x4a>
 80068de:	eb1a 0105 	adds.w	r1, sl, r5
 80068e2:	f47f af6f 	bne.w	80067c4 <_scanf_float+0x64>
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80068ec:	6022      	str	r2, [r4, #0]
 80068ee:	460d      	mov	r5, r1
 80068f0:	468a      	mov	sl, r1
 80068f2:	f806 3b01 	strb.w	r3, [r6], #1
 80068f6:	e7e2      	b.n	80068be <_scanf_float+0x15e>
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	0610      	lsls	r0, r2, #24
 80068fc:	f57f af62 	bpl.w	80067c4 <_scanf_float+0x64>
 8006900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006904:	6022      	str	r2, [r4, #0]
 8006906:	e7f4      	b.n	80068f2 <_scanf_float+0x192>
 8006908:	f1ba 0f00 	cmp.w	sl, #0
 800690c:	d10e      	bne.n	800692c <_scanf_float+0x1cc>
 800690e:	f1b9 0f00 	cmp.w	r9, #0
 8006912:	d10e      	bne.n	8006932 <_scanf_float+0x1d2>
 8006914:	6822      	ldr	r2, [r4, #0]
 8006916:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800691a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800691e:	d108      	bne.n	8006932 <_scanf_float+0x1d2>
 8006920:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006924:	6022      	str	r2, [r4, #0]
 8006926:	f04f 0a01 	mov.w	sl, #1
 800692a:	e7e2      	b.n	80068f2 <_scanf_float+0x192>
 800692c:	f1ba 0f02 	cmp.w	sl, #2
 8006930:	d055      	beq.n	80069de <_scanf_float+0x27e>
 8006932:	2d01      	cmp	r5, #1
 8006934:	d002      	beq.n	800693c <_scanf_float+0x1dc>
 8006936:	2d04      	cmp	r5, #4
 8006938:	f47f af44 	bne.w	80067c4 <_scanf_float+0x64>
 800693c:	3501      	adds	r5, #1
 800693e:	b2ed      	uxtb	r5, r5
 8006940:	e7d7      	b.n	80068f2 <_scanf_float+0x192>
 8006942:	f1ba 0f01 	cmp.w	sl, #1
 8006946:	f47f af3d 	bne.w	80067c4 <_scanf_float+0x64>
 800694a:	f04f 0a02 	mov.w	sl, #2
 800694e:	e7d0      	b.n	80068f2 <_scanf_float+0x192>
 8006950:	b97d      	cbnz	r5, 8006972 <_scanf_float+0x212>
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	f47f af38 	bne.w	80067ca <_scanf_float+0x6a>
 800695a:	6822      	ldr	r2, [r4, #0]
 800695c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006960:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006964:	f040 8108 	bne.w	8006b78 <_scanf_float+0x418>
 8006968:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800696c:	6022      	str	r2, [r4, #0]
 800696e:	2501      	movs	r5, #1
 8006970:	e7bf      	b.n	80068f2 <_scanf_float+0x192>
 8006972:	2d03      	cmp	r5, #3
 8006974:	d0e2      	beq.n	800693c <_scanf_float+0x1dc>
 8006976:	2d05      	cmp	r5, #5
 8006978:	e7de      	b.n	8006938 <_scanf_float+0x1d8>
 800697a:	2d02      	cmp	r5, #2
 800697c:	f47f af22 	bne.w	80067c4 <_scanf_float+0x64>
 8006980:	2503      	movs	r5, #3
 8006982:	e7b6      	b.n	80068f2 <_scanf_float+0x192>
 8006984:	2d06      	cmp	r5, #6
 8006986:	f47f af1d 	bne.w	80067c4 <_scanf_float+0x64>
 800698a:	2507      	movs	r5, #7
 800698c:	e7b1      	b.n	80068f2 <_scanf_float+0x192>
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	0591      	lsls	r1, r2, #22
 8006992:	f57f af17 	bpl.w	80067c4 <_scanf_float+0x64>
 8006996:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800699a:	6022      	str	r2, [r4, #0]
 800699c:	f8cd 9008 	str.w	r9, [sp, #8]
 80069a0:	e7a7      	b.n	80068f2 <_scanf_float+0x192>
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80069a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80069ac:	d006      	beq.n	80069bc <_scanf_float+0x25c>
 80069ae:	0550      	lsls	r0, r2, #21
 80069b0:	f57f af08 	bpl.w	80067c4 <_scanf_float+0x64>
 80069b4:	f1b9 0f00 	cmp.w	r9, #0
 80069b8:	f000 80de 	beq.w	8006b78 <_scanf_float+0x418>
 80069bc:	0591      	lsls	r1, r2, #22
 80069be:	bf58      	it	pl
 80069c0:	9902      	ldrpl	r1, [sp, #8]
 80069c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069c6:	bf58      	it	pl
 80069c8:	eba9 0101 	subpl.w	r1, r9, r1
 80069cc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80069d0:	bf58      	it	pl
 80069d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80069d6:	6022      	str	r2, [r4, #0]
 80069d8:	f04f 0900 	mov.w	r9, #0
 80069dc:	e789      	b.n	80068f2 <_scanf_float+0x192>
 80069de:	f04f 0a03 	mov.w	sl, #3
 80069e2:	e786      	b.n	80068f2 <_scanf_float+0x192>
 80069e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80069e8:	4639      	mov	r1, r7
 80069ea:	4640      	mov	r0, r8
 80069ec:	4798      	blx	r3
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f43f aedb 	beq.w	80067aa <_scanf_float+0x4a>
 80069f4:	e6e6      	b.n	80067c4 <_scanf_float+0x64>
 80069f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069fe:	463a      	mov	r2, r7
 8006a00:	4640      	mov	r0, r8
 8006a02:	4798      	blx	r3
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	6123      	str	r3, [r4, #16]
 8006a0a:	e6e8      	b.n	80067de <_scanf_float+0x7e>
 8006a0c:	1e6b      	subs	r3, r5, #1
 8006a0e:	2b06      	cmp	r3, #6
 8006a10:	d824      	bhi.n	8006a5c <_scanf_float+0x2fc>
 8006a12:	2d02      	cmp	r5, #2
 8006a14:	d836      	bhi.n	8006a84 <_scanf_float+0x324>
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	429e      	cmp	r6, r3
 8006a1a:	f67f aee4 	bls.w	80067e6 <_scanf_float+0x86>
 8006a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a26:	463a      	mov	r2, r7
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4798      	blx	r3
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	e7f0      	b.n	8006a16 <_scanf_float+0x2b6>
 8006a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006a3c:	463a      	mov	r2, r7
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4798      	blx	r3
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006a4c:	fa5f fa8a 	uxtb.w	sl, sl
 8006a50:	f1ba 0f02 	cmp.w	sl, #2
 8006a54:	d1ee      	bne.n	8006a34 <_scanf_float+0x2d4>
 8006a56:	3d03      	subs	r5, #3
 8006a58:	b2ed      	uxtb	r5, r5
 8006a5a:	1b76      	subs	r6, r6, r5
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	05da      	lsls	r2, r3, #23
 8006a60:	d530      	bpl.n	8006ac4 <_scanf_float+0x364>
 8006a62:	055b      	lsls	r3, r3, #21
 8006a64:	d511      	bpl.n	8006a8a <_scanf_float+0x32a>
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	429e      	cmp	r6, r3
 8006a6a:	f67f aebc 	bls.w	80067e6 <_scanf_float+0x86>
 8006a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a76:	463a      	mov	r2, r7
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4798      	blx	r3
 8006a7c:	6923      	ldr	r3, [r4, #16]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	6123      	str	r3, [r4, #16]
 8006a82:	e7f0      	b.n	8006a66 <_scanf_float+0x306>
 8006a84:	46aa      	mov	sl, r5
 8006a86:	46b3      	mov	fp, r6
 8006a88:	e7de      	b.n	8006a48 <_scanf_float+0x2e8>
 8006a8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	2965      	cmp	r1, #101	@ 0x65
 8006a92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006a96:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006a9a:	6123      	str	r3, [r4, #16]
 8006a9c:	d00c      	beq.n	8006ab8 <_scanf_float+0x358>
 8006a9e:	2945      	cmp	r1, #69	@ 0x45
 8006aa0:	d00a      	beq.n	8006ab8 <_scanf_float+0x358>
 8006aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006aa6:	463a      	mov	r2, r7
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	4798      	blx	r3
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	1eb5      	subs	r5, r6, #2
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006abc:	463a      	mov	r2, r7
 8006abe:	4640      	mov	r0, r8
 8006ac0:	4798      	blx	r3
 8006ac2:	462e      	mov	r6, r5
 8006ac4:	6822      	ldr	r2, [r4, #0]
 8006ac6:	f012 0210 	ands.w	r2, r2, #16
 8006aca:	d001      	beq.n	8006ad0 <_scanf_float+0x370>
 8006acc:	2000      	movs	r0, #0
 8006ace:	e68b      	b.n	80067e8 <_scanf_float+0x88>
 8006ad0:	7032      	strb	r2, [r6, #0]
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006adc:	d11c      	bne.n	8006b18 <_scanf_float+0x3b8>
 8006ade:	9b02      	ldr	r3, [sp, #8]
 8006ae0:	454b      	cmp	r3, r9
 8006ae2:	eba3 0209 	sub.w	r2, r3, r9
 8006ae6:	d123      	bne.n	8006b30 <_scanf_float+0x3d0>
 8006ae8:	9901      	ldr	r1, [sp, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	4640      	mov	r0, r8
 8006aee:	f000 ff13 	bl	8007918 <_strtod_r>
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	6821      	ldr	r1, [r4, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f011 0f02 	tst.w	r1, #2
 8006afc:	ec57 6b10 	vmov	r6, r7, d0
 8006b00:	f103 0204 	add.w	r2, r3, #4
 8006b04:	d01f      	beq.n	8006b46 <_scanf_float+0x3e6>
 8006b06:	9903      	ldr	r1, [sp, #12]
 8006b08:	600a      	str	r2, [r1, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	e9c3 6700 	strd	r6, r7, [r3]
 8006b10:	68e3      	ldr	r3, [r4, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60e3      	str	r3, [r4, #12]
 8006b16:	e7d9      	b.n	8006acc <_scanf_float+0x36c>
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0e4      	beq.n	8006ae8 <_scanf_float+0x388>
 8006b1e:	9905      	ldr	r1, [sp, #20]
 8006b20:	230a      	movs	r3, #10
 8006b22:	3101      	adds	r1, #1
 8006b24:	4640      	mov	r0, r8
 8006b26:	f000 ff77 	bl	8007a18 <_strtol_r>
 8006b2a:	9b04      	ldr	r3, [sp, #16]
 8006b2c:	9e05      	ldr	r6, [sp, #20]
 8006b2e:	1ac2      	subs	r2, r0, r3
 8006b30:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006b34:	429e      	cmp	r6, r3
 8006b36:	bf28      	it	cs
 8006b38:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006b3c:	4910      	ldr	r1, [pc, #64]	@ (8006b80 <_scanf_float+0x420>)
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f000 f822 	bl	8006b88 <siprintf>
 8006b44:	e7d0      	b.n	8006ae8 <_scanf_float+0x388>
 8006b46:	f011 0f04 	tst.w	r1, #4
 8006b4a:	9903      	ldr	r1, [sp, #12]
 8006b4c:	600a      	str	r2, [r1, #0]
 8006b4e:	d1dc      	bne.n	8006b0a <_scanf_float+0x3aa>
 8006b50:	681d      	ldr	r5, [r3, #0]
 8006b52:	4632      	mov	r2, r6
 8006b54:	463b      	mov	r3, r7
 8006b56:	4630      	mov	r0, r6
 8006b58:	4639      	mov	r1, r7
 8006b5a:	f7fa f80f 	bl	8000b7c <__aeabi_dcmpun>
 8006b5e:	b128      	cbz	r0, 8006b6c <_scanf_float+0x40c>
 8006b60:	4808      	ldr	r0, [pc, #32]	@ (8006b84 <_scanf_float+0x424>)
 8006b62:	f001 f861 	bl	8007c28 <nanf>
 8006b66:	ed85 0a00 	vstr	s0, [r5]
 8006b6a:	e7d1      	b.n	8006b10 <_scanf_float+0x3b0>
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7fa f862 	bl	8000c38 <__aeabi_d2f>
 8006b74:	6028      	str	r0, [r5, #0]
 8006b76:	e7cb      	b.n	8006b10 <_scanf_float+0x3b0>
 8006b78:	f04f 0900 	mov.w	r9, #0
 8006b7c:	e629      	b.n	80067d2 <_scanf_float+0x72>
 8006b7e:	bf00      	nop
 8006b80:	0800a838 	.word	0x0800a838
 8006b84:	0800ac2b 	.word	0x0800ac2b

08006b88 <siprintf>:
 8006b88:	b40e      	push	{r1, r2, r3}
 8006b8a:	b500      	push	{lr}
 8006b8c:	b09c      	sub	sp, #112	@ 0x70
 8006b8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b90:	9002      	str	r0, [sp, #8]
 8006b92:	9006      	str	r0, [sp, #24]
 8006b94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b98:	4809      	ldr	r0, [pc, #36]	@ (8006bc0 <siprintf+0x38>)
 8006b9a:	9107      	str	r1, [sp, #28]
 8006b9c:	9104      	str	r1, [sp, #16]
 8006b9e:	4909      	ldr	r1, [pc, #36]	@ (8006bc4 <siprintf+0x3c>)
 8006ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba4:	9105      	str	r1, [sp, #20]
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	a902      	add	r1, sp, #8
 8006bac:	f002 fa24 	bl	8008ff8 <_svfiprintf_r>
 8006bb0:	9b02      	ldr	r3, [sp, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	b01c      	add	sp, #112	@ 0x70
 8006bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bbc:	b003      	add	sp, #12
 8006bbe:	4770      	bx	lr
 8006bc0:	20000184 	.word	0x20000184
 8006bc4:	ffff0208 	.word	0xffff0208

08006bc8 <std>:
 8006bc8:	2300      	movs	r3, #0
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	4604      	mov	r4, r0
 8006bce:	e9c0 3300 	strd	r3, r3, [r0]
 8006bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bd6:	6083      	str	r3, [r0, #8]
 8006bd8:	8181      	strh	r1, [r0, #12]
 8006bda:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bdc:	81c2      	strh	r2, [r0, #14]
 8006bde:	6183      	str	r3, [r0, #24]
 8006be0:	4619      	mov	r1, r3
 8006be2:	2208      	movs	r2, #8
 8006be4:	305c      	adds	r0, #92	@ 0x5c
 8006be6:	f000 ffcf 	bl	8007b88 <memset>
 8006bea:	4b0d      	ldr	r3, [pc, #52]	@ (8006c20 <std+0x58>)
 8006bec:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bee:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <std+0x5c>)
 8006bf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <std+0x60>)
 8006bf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c2c <std+0x64>)
 8006bf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <std+0x68>)
 8006bfc:	6224      	str	r4, [r4, #32]
 8006bfe:	429c      	cmp	r4, r3
 8006c00:	d006      	beq.n	8006c10 <std+0x48>
 8006c02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c06:	4294      	cmp	r4, r2
 8006c08:	d002      	beq.n	8006c10 <std+0x48>
 8006c0a:	33d0      	adds	r3, #208	@ 0xd0
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d105      	bne.n	8006c1c <std+0x54>
 8006c10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c18:	f000 bfec 	b.w	8007bf4 <__retarget_lock_init_recursive>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	bf00      	nop
 8006c20:	0800a0c1 	.word	0x0800a0c1
 8006c24:	0800a0e3 	.word	0x0800a0e3
 8006c28:	0800a11b 	.word	0x0800a11b
 8006c2c:	0800a13f 	.word	0x0800a13f
 8006c30:	20000b8c 	.word	0x20000b8c

08006c34 <stdio_exit_handler>:
 8006c34:	4a02      	ldr	r2, [pc, #8]	@ (8006c40 <stdio_exit_handler+0xc>)
 8006c36:	4903      	ldr	r1, [pc, #12]	@ (8006c44 <stdio_exit_handler+0x10>)
 8006c38:	4803      	ldr	r0, [pc, #12]	@ (8006c48 <stdio_exit_handler+0x14>)
 8006c3a:	f000 beef 	b.w	8007a1c <_fwalk_sglue>
 8006c3e:	bf00      	nop
 8006c40:	2000000c 	.word	0x2000000c
 8006c44:	080096f5 	.word	0x080096f5
 8006c48:	20000188 	.word	0x20000188

08006c4c <cleanup_stdio>:
 8006c4c:	6841      	ldr	r1, [r0, #4]
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <cleanup_stdio+0x34>)
 8006c50:	4299      	cmp	r1, r3
 8006c52:	b510      	push	{r4, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	d001      	beq.n	8006c5c <cleanup_stdio+0x10>
 8006c58:	f002 fd4c 	bl	80096f4 <_fflush_r>
 8006c5c:	68a1      	ldr	r1, [r4, #8]
 8006c5e:	4b09      	ldr	r3, [pc, #36]	@ (8006c84 <cleanup_stdio+0x38>)
 8006c60:	4299      	cmp	r1, r3
 8006c62:	d002      	beq.n	8006c6a <cleanup_stdio+0x1e>
 8006c64:	4620      	mov	r0, r4
 8006c66:	f002 fd45 	bl	80096f4 <_fflush_r>
 8006c6a:	68e1      	ldr	r1, [r4, #12]
 8006c6c:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <cleanup_stdio+0x3c>)
 8006c6e:	4299      	cmp	r1, r3
 8006c70:	d004      	beq.n	8006c7c <cleanup_stdio+0x30>
 8006c72:	4620      	mov	r0, r4
 8006c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c78:	f002 bd3c 	b.w	80096f4 <_fflush_r>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000b8c 	.word	0x20000b8c
 8006c84:	20000bf4 	.word	0x20000bf4
 8006c88:	20000c5c 	.word	0x20000c5c

08006c8c <global_stdio_init.part.0>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <global_stdio_init.part.0+0x30>)
 8006c90:	4c0b      	ldr	r4, [pc, #44]	@ (8006cc0 <global_stdio_init.part.0+0x34>)
 8006c92:	4a0c      	ldr	r2, [pc, #48]	@ (8006cc4 <global_stdio_init.part.0+0x38>)
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	4620      	mov	r0, r4
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2104      	movs	r1, #4
 8006c9c:	f7ff ff94 	bl	8006bc8 <std>
 8006ca0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	2109      	movs	r1, #9
 8006ca8:	f7ff ff8e 	bl	8006bc8 <std>
 8006cac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb6:	2112      	movs	r1, #18
 8006cb8:	f7ff bf86 	b.w	8006bc8 <std>
 8006cbc:	20000cc4 	.word	0x20000cc4
 8006cc0:	20000b8c 	.word	0x20000b8c
 8006cc4:	08006c35 	.word	0x08006c35

08006cc8 <__sfp_lock_acquire>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	@ (8006cd0 <__sfp_lock_acquire+0x8>)
 8006cca:	f000 bf94 	b.w	8007bf6 <__retarget_lock_acquire_recursive>
 8006cce:	bf00      	nop
 8006cd0:	20000cc9 	.word	0x20000cc9

08006cd4 <__sfp_lock_release>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	@ (8006cdc <__sfp_lock_release+0x8>)
 8006cd6:	f000 bf8f 	b.w	8007bf8 <__retarget_lock_release_recursive>
 8006cda:	bf00      	nop
 8006cdc:	20000cc9 	.word	0x20000cc9

08006ce0 <__sinit>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	f7ff fff0 	bl	8006cc8 <__sfp_lock_acquire>
 8006ce8:	6a23      	ldr	r3, [r4, #32]
 8006cea:	b11b      	cbz	r3, 8006cf4 <__sinit+0x14>
 8006cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf0:	f7ff bff0 	b.w	8006cd4 <__sfp_lock_release>
 8006cf4:	4b04      	ldr	r3, [pc, #16]	@ (8006d08 <__sinit+0x28>)
 8006cf6:	6223      	str	r3, [r4, #32]
 8006cf8:	4b04      	ldr	r3, [pc, #16]	@ (8006d0c <__sinit+0x2c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f5      	bne.n	8006cec <__sinit+0xc>
 8006d00:	f7ff ffc4 	bl	8006c8c <global_stdio_init.part.0>
 8006d04:	e7f2      	b.n	8006cec <__sinit+0xc>
 8006d06:	bf00      	nop
 8006d08:	08006c4d 	.word	0x08006c4d
 8006d0c:	20000cc4 	.word	0x20000cc4

08006d10 <sulp>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4604      	mov	r4, r0
 8006d14:	460d      	mov	r5, r1
 8006d16:	ec45 4b10 	vmov	d0, r4, r5
 8006d1a:	4616      	mov	r6, r2
 8006d1c:	f003 f892 	bl	8009e44 <__ulp>
 8006d20:	ec51 0b10 	vmov	r0, r1, d0
 8006d24:	b17e      	cbz	r6, 8006d46 <sulp+0x36>
 8006d26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dd09      	ble.n	8006d46 <sulp+0x36>
 8006d32:	051b      	lsls	r3, r3, #20
 8006d34:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006d38:	2400      	movs	r4, #0
 8006d3a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006d3e:	4622      	mov	r2, r4
 8006d40:	462b      	mov	r3, r5
 8006d42:	f7f9 fc81 	bl	8000648 <__aeabi_dmul>
 8006d46:	ec41 0b10 	vmov	d0, r0, r1
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	0000      	movs	r0, r0
	...

08006d50 <_strtod_l>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	b09f      	sub	sp, #124	@ 0x7c
 8006d56:	460c      	mov	r4, r1
 8006d58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d5e:	9005      	str	r0, [sp, #20]
 8006d60:	f04f 0a00 	mov.w	sl, #0
 8006d64:	f04f 0b00 	mov.w	fp, #0
 8006d68:	460a      	mov	r2, r1
 8006d6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d6c:	7811      	ldrb	r1, [r2, #0]
 8006d6e:	292b      	cmp	r1, #43	@ 0x2b
 8006d70:	d04a      	beq.n	8006e08 <_strtod_l+0xb8>
 8006d72:	d838      	bhi.n	8006de6 <_strtod_l+0x96>
 8006d74:	290d      	cmp	r1, #13
 8006d76:	d832      	bhi.n	8006dde <_strtod_l+0x8e>
 8006d78:	2908      	cmp	r1, #8
 8006d7a:	d832      	bhi.n	8006de2 <_strtod_l+0x92>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d03b      	beq.n	8006df8 <_strtod_l+0xa8>
 8006d80:	2200      	movs	r2, #0
 8006d82:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d86:	782a      	ldrb	r2, [r5, #0]
 8006d88:	2a30      	cmp	r2, #48	@ 0x30
 8006d8a:	f040 80b3 	bne.w	8006ef4 <_strtod_l+0x1a4>
 8006d8e:	786a      	ldrb	r2, [r5, #1]
 8006d90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d94:	2a58      	cmp	r2, #88	@ 0x58
 8006d96:	d16e      	bne.n	8006e76 <_strtod_l+0x126>
 8006d98:	9302      	str	r3, [sp, #8]
 8006d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	4a8e      	ldr	r2, [pc, #568]	@ (8006fdc <_strtod_l+0x28c>)
 8006da4:	9805      	ldr	r0, [sp, #20]
 8006da6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006da8:	a919      	add	r1, sp, #100	@ 0x64
 8006daa:	f001 fdf9 	bl	80089a0 <__gethex>
 8006dae:	f010 060f 	ands.w	r6, r0, #15
 8006db2:	4604      	mov	r4, r0
 8006db4:	d005      	beq.n	8006dc2 <_strtod_l+0x72>
 8006db6:	2e06      	cmp	r6, #6
 8006db8:	d128      	bne.n	8006e0c <_strtod_l+0xbc>
 8006dba:	3501      	adds	r5, #1
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9519      	str	r5, [sp, #100]	@ 0x64
 8006dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 858e 	bne.w	80078e6 <_strtod_l+0xb96>
 8006dca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dcc:	b1cb      	cbz	r3, 8006e02 <_strtod_l+0xb2>
 8006dce:	4652      	mov	r2, sl
 8006dd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006dd4:	ec43 2b10 	vmov	d0, r2, r3
 8006dd8:	b01f      	add	sp, #124	@ 0x7c
 8006dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dde:	2920      	cmp	r1, #32
 8006de0:	d1ce      	bne.n	8006d80 <_strtod_l+0x30>
 8006de2:	3201      	adds	r2, #1
 8006de4:	e7c1      	b.n	8006d6a <_strtod_l+0x1a>
 8006de6:	292d      	cmp	r1, #45	@ 0x2d
 8006de8:	d1ca      	bne.n	8006d80 <_strtod_l+0x30>
 8006dea:	2101      	movs	r1, #1
 8006dec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006dee:	1c51      	adds	r1, r2, #1
 8006df0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006df2:	7852      	ldrb	r2, [r2, #1]
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	d1c5      	bne.n	8006d84 <_strtod_l+0x34>
 8006df8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dfa:	9419      	str	r4, [sp, #100]	@ 0x64
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f040 8570 	bne.w	80078e2 <_strtod_l+0xb92>
 8006e02:	4652      	mov	r2, sl
 8006e04:	465b      	mov	r3, fp
 8006e06:	e7e5      	b.n	8006dd4 <_strtod_l+0x84>
 8006e08:	2100      	movs	r1, #0
 8006e0a:	e7ef      	b.n	8006dec <_strtod_l+0x9c>
 8006e0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e0e:	b13a      	cbz	r2, 8006e20 <_strtod_l+0xd0>
 8006e10:	2135      	movs	r1, #53	@ 0x35
 8006e12:	a81c      	add	r0, sp, #112	@ 0x70
 8006e14:	f003 f910 	bl	800a038 <__copybits>
 8006e18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e1a:	9805      	ldr	r0, [sp, #20]
 8006e1c:	f002 fcde 	bl	80097dc <_Bfree>
 8006e20:	3e01      	subs	r6, #1
 8006e22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e24:	2e04      	cmp	r6, #4
 8006e26:	d806      	bhi.n	8006e36 <_strtod_l+0xe6>
 8006e28:	e8df f006 	tbb	[pc, r6]
 8006e2c:	201d0314 	.word	0x201d0314
 8006e30:	14          	.byte	0x14
 8006e31:	00          	.byte	0x00
 8006e32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006e36:	05e1      	lsls	r1, r4, #23
 8006e38:	bf48      	it	mi
 8006e3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006e3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e42:	0d1b      	lsrs	r3, r3, #20
 8006e44:	051b      	lsls	r3, r3, #20
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1bb      	bne.n	8006dc2 <_strtod_l+0x72>
 8006e4a:	f000 fea9 	bl	8007ba0 <__errno>
 8006e4e:	2322      	movs	r3, #34	@ 0x22
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	e7b6      	b.n	8006dc2 <_strtod_l+0x72>
 8006e54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e64:	e7e7      	b.n	8006e36 <_strtod_l+0xe6>
 8006e66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006fe4 <_strtod_l+0x294>
 8006e6a:	e7e4      	b.n	8006e36 <_strtod_l+0xe6>
 8006e6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e70:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006e74:	e7df      	b.n	8006e36 <_strtod_l+0xe6>
 8006e76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b30      	cmp	r3, #48	@ 0x30
 8006e80:	d0f9      	beq.n	8006e76 <_strtod_l+0x126>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d09d      	beq.n	8006dc2 <_strtod_l+0x72>
 8006e86:	2301      	movs	r3, #1
 8006e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9308      	str	r3, [sp, #32]
 8006e92:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e94:	461f      	mov	r7, r3
 8006e96:	220a      	movs	r2, #10
 8006e98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e9a:	7805      	ldrb	r5, [r0, #0]
 8006e9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006ea0:	b2d9      	uxtb	r1, r3
 8006ea2:	2909      	cmp	r1, #9
 8006ea4:	d928      	bls.n	8006ef8 <_strtod_l+0x1a8>
 8006ea6:	494e      	ldr	r1, [pc, #312]	@ (8006fe0 <_strtod_l+0x290>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f000 fe45 	bl	8007b38 <strncmp>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d032      	beq.n	8006f18 <_strtod_l+0x1c8>
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	462a      	mov	r2, r5
 8006eb6:	4681      	mov	r9, r0
 8006eb8:	463d      	mov	r5, r7
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2a65      	cmp	r2, #101	@ 0x65
 8006ebe:	d001      	beq.n	8006ec4 <_strtod_l+0x174>
 8006ec0:	2a45      	cmp	r2, #69	@ 0x45
 8006ec2:	d114      	bne.n	8006eee <_strtod_l+0x19e>
 8006ec4:	b91d      	cbnz	r5, 8006ece <_strtod_l+0x17e>
 8006ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ec8:	4302      	orrs	r2, r0
 8006eca:	d095      	beq.n	8006df8 <_strtod_l+0xa8>
 8006ecc:	2500      	movs	r5, #0
 8006ece:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006ed0:	1c62      	adds	r2, r4, #1
 8006ed2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ed4:	7862      	ldrb	r2, [r4, #1]
 8006ed6:	2a2b      	cmp	r2, #43	@ 0x2b
 8006ed8:	d077      	beq.n	8006fca <_strtod_l+0x27a>
 8006eda:	2a2d      	cmp	r2, #45	@ 0x2d
 8006edc:	d07b      	beq.n	8006fd6 <_strtod_l+0x286>
 8006ede:	f04f 0c00 	mov.w	ip, #0
 8006ee2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006ee6:	2909      	cmp	r1, #9
 8006ee8:	f240 8082 	bls.w	8006ff0 <_strtod_l+0x2a0>
 8006eec:	9419      	str	r4, [sp, #100]	@ 0x64
 8006eee:	f04f 0800 	mov.w	r8, #0
 8006ef2:	e0a2      	b.n	800703a <_strtod_l+0x2ea>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e7c7      	b.n	8006e88 <_strtod_l+0x138>
 8006ef8:	2f08      	cmp	r7, #8
 8006efa:	bfd5      	itete	le
 8006efc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006efe:	9908      	ldrgt	r1, [sp, #32]
 8006f00:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f08:	f100 0001 	add.w	r0, r0, #1
 8006f0c:	bfd4      	ite	le
 8006f0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006f10:	9308      	strgt	r3, [sp, #32]
 8006f12:	3701      	adds	r7, #1
 8006f14:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f16:	e7bf      	b.n	8006e98 <_strtod_l+0x148>
 8006f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f1e:	785a      	ldrb	r2, [r3, #1]
 8006f20:	b37f      	cbz	r7, 8006f82 <_strtod_l+0x232>
 8006f22:	4681      	mov	r9, r0
 8006f24:	463d      	mov	r5, r7
 8006f26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006f2a:	2b09      	cmp	r3, #9
 8006f2c:	d912      	bls.n	8006f54 <_strtod_l+0x204>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e7c4      	b.n	8006ebc <_strtod_l+0x16c>
 8006f32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f38:	785a      	ldrb	r2, [r3, #1]
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	2a30      	cmp	r2, #48	@ 0x30
 8006f3e:	d0f8      	beq.n	8006f32 <_strtod_l+0x1e2>
 8006f40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	f200 84d3 	bhi.w	80078f0 <_strtod_l+0xba0>
 8006f4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f4e:	4681      	mov	r9, r0
 8006f50:	2000      	movs	r0, #0
 8006f52:	4605      	mov	r5, r0
 8006f54:	3a30      	subs	r2, #48	@ 0x30
 8006f56:	f100 0301 	add.w	r3, r0, #1
 8006f5a:	d02a      	beq.n	8006fb2 <_strtod_l+0x262>
 8006f5c:	4499      	add	r9, r3
 8006f5e:	eb00 0c05 	add.w	ip, r0, r5
 8006f62:	462b      	mov	r3, r5
 8006f64:	210a      	movs	r1, #10
 8006f66:	4563      	cmp	r3, ip
 8006f68:	d10d      	bne.n	8006f86 <_strtod_l+0x236>
 8006f6a:	1c69      	adds	r1, r5, #1
 8006f6c:	4401      	add	r1, r0
 8006f6e:	4428      	add	r0, r5
 8006f70:	2808      	cmp	r0, #8
 8006f72:	dc16      	bgt.n	8006fa2 <_strtod_l+0x252>
 8006f74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f76:	230a      	movs	r3, #10
 8006f78:	fb03 2300 	mla	r3, r3, r0, r2
 8006f7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e018      	b.n	8006fb4 <_strtod_l+0x264>
 8006f82:	4638      	mov	r0, r7
 8006f84:	e7da      	b.n	8006f3c <_strtod_l+0x1ec>
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	f103 0301 	add.w	r3, r3, #1
 8006f8c:	dc03      	bgt.n	8006f96 <_strtod_l+0x246>
 8006f8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f90:	434e      	muls	r6, r1
 8006f92:	960a      	str	r6, [sp, #40]	@ 0x28
 8006f94:	e7e7      	b.n	8006f66 <_strtod_l+0x216>
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	bfde      	ittt	le
 8006f9a:	9e08      	ldrle	r6, [sp, #32]
 8006f9c:	434e      	mulle	r6, r1
 8006f9e:	9608      	strle	r6, [sp, #32]
 8006fa0:	e7e1      	b.n	8006f66 <_strtod_l+0x216>
 8006fa2:	280f      	cmp	r0, #15
 8006fa4:	dceb      	bgt.n	8006f7e <_strtod_l+0x22e>
 8006fa6:	9808      	ldr	r0, [sp, #32]
 8006fa8:	230a      	movs	r3, #10
 8006faa:	fb03 2300 	mla	r3, r3, r0, r2
 8006fae:	9308      	str	r3, [sp, #32]
 8006fb0:	e7e5      	b.n	8006f7e <_strtod_l+0x22e>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fb6:	1c50      	adds	r0, r2, #1
 8006fb8:	9019      	str	r0, [sp, #100]	@ 0x64
 8006fba:	7852      	ldrb	r2, [r2, #1]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	460d      	mov	r5, r1
 8006fc0:	e7b1      	b.n	8006f26 <_strtod_l+0x1d6>
 8006fc2:	f04f 0900 	mov.w	r9, #0
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e77d      	b.n	8006ec6 <_strtod_l+0x176>
 8006fca:	f04f 0c00 	mov.w	ip, #0
 8006fce:	1ca2      	adds	r2, r4, #2
 8006fd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fd2:	78a2      	ldrb	r2, [r4, #2]
 8006fd4:	e785      	b.n	8006ee2 <_strtod_l+0x192>
 8006fd6:	f04f 0c01 	mov.w	ip, #1
 8006fda:	e7f8      	b.n	8006fce <_strtod_l+0x27e>
 8006fdc:	0800a854 	.word	0x0800a854
 8006fe0:	0800a83d 	.word	0x0800a83d
 8006fe4:	7ff00000 	.word	0x7ff00000
 8006fe8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fea:	1c51      	adds	r1, r2, #1
 8006fec:	9119      	str	r1, [sp, #100]	@ 0x64
 8006fee:	7852      	ldrb	r2, [r2, #1]
 8006ff0:	2a30      	cmp	r2, #48	@ 0x30
 8006ff2:	d0f9      	beq.n	8006fe8 <_strtod_l+0x298>
 8006ff4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006ff8:	2908      	cmp	r1, #8
 8006ffa:	f63f af78 	bhi.w	8006eee <_strtod_l+0x19e>
 8006ffe:	3a30      	subs	r2, #48	@ 0x30
 8007000:	920e      	str	r2, [sp, #56]	@ 0x38
 8007002:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007004:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007006:	f04f 080a 	mov.w	r8, #10
 800700a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800700c:	1c56      	adds	r6, r2, #1
 800700e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007010:	7852      	ldrb	r2, [r2, #1]
 8007012:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007016:	f1be 0f09 	cmp.w	lr, #9
 800701a:	d939      	bls.n	8007090 <_strtod_l+0x340>
 800701c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800701e:	1a76      	subs	r6, r6, r1
 8007020:	2e08      	cmp	r6, #8
 8007022:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007026:	dc03      	bgt.n	8007030 <_strtod_l+0x2e0>
 8007028:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800702a:	4588      	cmp	r8, r1
 800702c:	bfa8      	it	ge
 800702e:	4688      	movge	r8, r1
 8007030:	f1bc 0f00 	cmp.w	ip, #0
 8007034:	d001      	beq.n	800703a <_strtod_l+0x2ea>
 8007036:	f1c8 0800 	rsb	r8, r8, #0
 800703a:	2d00      	cmp	r5, #0
 800703c:	d14e      	bne.n	80070dc <_strtod_l+0x38c>
 800703e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007040:	4308      	orrs	r0, r1
 8007042:	f47f aebe 	bne.w	8006dc2 <_strtod_l+0x72>
 8007046:	2b00      	cmp	r3, #0
 8007048:	f47f aed6 	bne.w	8006df8 <_strtod_l+0xa8>
 800704c:	2a69      	cmp	r2, #105	@ 0x69
 800704e:	d028      	beq.n	80070a2 <_strtod_l+0x352>
 8007050:	dc25      	bgt.n	800709e <_strtod_l+0x34e>
 8007052:	2a49      	cmp	r2, #73	@ 0x49
 8007054:	d025      	beq.n	80070a2 <_strtod_l+0x352>
 8007056:	2a4e      	cmp	r2, #78	@ 0x4e
 8007058:	f47f aece 	bne.w	8006df8 <_strtod_l+0xa8>
 800705c:	499b      	ldr	r1, [pc, #620]	@ (80072cc <_strtod_l+0x57c>)
 800705e:	a819      	add	r0, sp, #100	@ 0x64
 8007060:	f001 fec0 	bl	8008de4 <__match>
 8007064:	2800      	cmp	r0, #0
 8007066:	f43f aec7 	beq.w	8006df8 <_strtod_l+0xa8>
 800706a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b28      	cmp	r3, #40	@ 0x28
 8007070:	d12e      	bne.n	80070d0 <_strtod_l+0x380>
 8007072:	4997      	ldr	r1, [pc, #604]	@ (80072d0 <_strtod_l+0x580>)
 8007074:	aa1c      	add	r2, sp, #112	@ 0x70
 8007076:	a819      	add	r0, sp, #100	@ 0x64
 8007078:	f001 fec8 	bl	8008e0c <__hexnan>
 800707c:	2805      	cmp	r0, #5
 800707e:	d127      	bne.n	80070d0 <_strtod_l+0x380>
 8007080:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007082:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007086:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800708a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800708e:	e698      	b.n	8006dc2 <_strtod_l+0x72>
 8007090:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007092:	fb08 2101 	mla	r1, r8, r1, r2
 8007096:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800709a:	920e      	str	r2, [sp, #56]	@ 0x38
 800709c:	e7b5      	b.n	800700a <_strtod_l+0x2ba>
 800709e:	2a6e      	cmp	r2, #110	@ 0x6e
 80070a0:	e7da      	b.n	8007058 <_strtod_l+0x308>
 80070a2:	498c      	ldr	r1, [pc, #560]	@ (80072d4 <_strtod_l+0x584>)
 80070a4:	a819      	add	r0, sp, #100	@ 0x64
 80070a6:	f001 fe9d 	bl	8008de4 <__match>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	f43f aea4 	beq.w	8006df8 <_strtod_l+0xa8>
 80070b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070b2:	4989      	ldr	r1, [pc, #548]	@ (80072d8 <_strtod_l+0x588>)
 80070b4:	3b01      	subs	r3, #1
 80070b6:	a819      	add	r0, sp, #100	@ 0x64
 80070b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80070ba:	f001 fe93 	bl	8008de4 <__match>
 80070be:	b910      	cbnz	r0, 80070c6 <_strtod_l+0x376>
 80070c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070c2:	3301      	adds	r3, #1
 80070c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80070c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80072e8 <_strtod_l+0x598>
 80070ca:	f04f 0a00 	mov.w	sl, #0
 80070ce:	e678      	b.n	8006dc2 <_strtod_l+0x72>
 80070d0:	4882      	ldr	r0, [pc, #520]	@ (80072dc <_strtod_l+0x58c>)
 80070d2:	f000 fda1 	bl	8007c18 <nan>
 80070d6:	ec5b ab10 	vmov	sl, fp, d0
 80070da:	e672      	b.n	8006dc2 <_strtod_l+0x72>
 80070dc:	eba8 0309 	sub.w	r3, r8, r9
 80070e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e4:	2f00      	cmp	r7, #0
 80070e6:	bf08      	it	eq
 80070e8:	462f      	moveq	r7, r5
 80070ea:	2d10      	cmp	r5, #16
 80070ec:	462c      	mov	r4, r5
 80070ee:	bfa8      	it	ge
 80070f0:	2410      	movge	r4, #16
 80070f2:	f7f9 fa2f 	bl	8000554 <__aeabi_ui2d>
 80070f6:	2d09      	cmp	r5, #9
 80070f8:	4682      	mov	sl, r0
 80070fa:	468b      	mov	fp, r1
 80070fc:	dc13      	bgt.n	8007126 <_strtod_l+0x3d6>
 80070fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	f43f ae5e 	beq.w	8006dc2 <_strtod_l+0x72>
 8007106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007108:	dd78      	ble.n	80071fc <_strtod_l+0x4ac>
 800710a:	2b16      	cmp	r3, #22
 800710c:	dc5f      	bgt.n	80071ce <_strtod_l+0x47e>
 800710e:	4974      	ldr	r1, [pc, #464]	@ (80072e0 <_strtod_l+0x590>)
 8007110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007118:	4652      	mov	r2, sl
 800711a:	465b      	mov	r3, fp
 800711c:	f7f9 fa94 	bl	8000648 <__aeabi_dmul>
 8007120:	4682      	mov	sl, r0
 8007122:	468b      	mov	fp, r1
 8007124:	e64d      	b.n	8006dc2 <_strtod_l+0x72>
 8007126:	4b6e      	ldr	r3, [pc, #440]	@ (80072e0 <_strtod_l+0x590>)
 8007128:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800712c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007130:	f7f9 fa8a 	bl	8000648 <__aeabi_dmul>
 8007134:	4682      	mov	sl, r0
 8007136:	9808      	ldr	r0, [sp, #32]
 8007138:	468b      	mov	fp, r1
 800713a:	f7f9 fa0b 	bl	8000554 <__aeabi_ui2d>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4650      	mov	r0, sl
 8007144:	4659      	mov	r1, fp
 8007146:	f7f9 f8c9 	bl	80002dc <__adddf3>
 800714a:	2d0f      	cmp	r5, #15
 800714c:	4682      	mov	sl, r0
 800714e:	468b      	mov	fp, r1
 8007150:	ddd5      	ble.n	80070fe <_strtod_l+0x3ae>
 8007152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007154:	1b2c      	subs	r4, r5, r4
 8007156:	441c      	add	r4, r3
 8007158:	2c00      	cmp	r4, #0
 800715a:	f340 8096 	ble.w	800728a <_strtod_l+0x53a>
 800715e:	f014 030f 	ands.w	r3, r4, #15
 8007162:	d00a      	beq.n	800717a <_strtod_l+0x42a>
 8007164:	495e      	ldr	r1, [pc, #376]	@ (80072e0 <_strtod_l+0x590>)
 8007166:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800716a:	4652      	mov	r2, sl
 800716c:	465b      	mov	r3, fp
 800716e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007172:	f7f9 fa69 	bl	8000648 <__aeabi_dmul>
 8007176:	4682      	mov	sl, r0
 8007178:	468b      	mov	fp, r1
 800717a:	f034 040f 	bics.w	r4, r4, #15
 800717e:	d073      	beq.n	8007268 <_strtod_l+0x518>
 8007180:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007184:	dd48      	ble.n	8007218 <_strtod_l+0x4c8>
 8007186:	2400      	movs	r4, #0
 8007188:	46a0      	mov	r8, r4
 800718a:	940a      	str	r4, [sp, #40]	@ 0x28
 800718c:	46a1      	mov	r9, r4
 800718e:	9a05      	ldr	r2, [sp, #20]
 8007190:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80072e8 <_strtod_l+0x598>
 8007194:	2322      	movs	r3, #34	@ 0x22
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	f04f 0a00 	mov.w	sl, #0
 800719c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f43f ae0f 	beq.w	8006dc2 <_strtod_l+0x72>
 80071a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071a6:	9805      	ldr	r0, [sp, #20]
 80071a8:	f002 fb18 	bl	80097dc <_Bfree>
 80071ac:	9805      	ldr	r0, [sp, #20]
 80071ae:	4649      	mov	r1, r9
 80071b0:	f002 fb14 	bl	80097dc <_Bfree>
 80071b4:	9805      	ldr	r0, [sp, #20]
 80071b6:	4641      	mov	r1, r8
 80071b8:	f002 fb10 	bl	80097dc <_Bfree>
 80071bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071be:	9805      	ldr	r0, [sp, #20]
 80071c0:	f002 fb0c 	bl	80097dc <_Bfree>
 80071c4:	9805      	ldr	r0, [sp, #20]
 80071c6:	4621      	mov	r1, r4
 80071c8:	f002 fb08 	bl	80097dc <_Bfree>
 80071cc:	e5f9      	b.n	8006dc2 <_strtod_l+0x72>
 80071ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80071d4:	4293      	cmp	r3, r2
 80071d6:	dbbc      	blt.n	8007152 <_strtod_l+0x402>
 80071d8:	4c41      	ldr	r4, [pc, #260]	@ (80072e0 <_strtod_l+0x590>)
 80071da:	f1c5 050f 	rsb	r5, r5, #15
 80071de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80071e2:	4652      	mov	r2, sl
 80071e4:	465b      	mov	r3, fp
 80071e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ea:	f7f9 fa2d 	bl	8000648 <__aeabi_dmul>
 80071ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f0:	1b5d      	subs	r5, r3, r5
 80071f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071fa:	e78f      	b.n	800711c <_strtod_l+0x3cc>
 80071fc:	3316      	adds	r3, #22
 80071fe:	dba8      	blt.n	8007152 <_strtod_l+0x402>
 8007200:	4b37      	ldr	r3, [pc, #220]	@ (80072e0 <_strtod_l+0x590>)
 8007202:	eba9 0808 	sub.w	r8, r9, r8
 8007206:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800720a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800720e:	4650      	mov	r0, sl
 8007210:	4659      	mov	r1, fp
 8007212:	f7f9 fb43 	bl	800089c <__aeabi_ddiv>
 8007216:	e783      	b.n	8007120 <_strtod_l+0x3d0>
 8007218:	4b32      	ldr	r3, [pc, #200]	@ (80072e4 <_strtod_l+0x594>)
 800721a:	9308      	str	r3, [sp, #32]
 800721c:	2300      	movs	r3, #0
 800721e:	1124      	asrs	r4, r4, #4
 8007220:	4650      	mov	r0, sl
 8007222:	4659      	mov	r1, fp
 8007224:	461e      	mov	r6, r3
 8007226:	2c01      	cmp	r4, #1
 8007228:	dc21      	bgt.n	800726e <_strtod_l+0x51e>
 800722a:	b10b      	cbz	r3, 8007230 <_strtod_l+0x4e0>
 800722c:	4682      	mov	sl, r0
 800722e:	468b      	mov	fp, r1
 8007230:	492c      	ldr	r1, [pc, #176]	@ (80072e4 <_strtod_l+0x594>)
 8007232:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007236:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800723a:	4652      	mov	r2, sl
 800723c:	465b      	mov	r3, fp
 800723e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007242:	f7f9 fa01 	bl	8000648 <__aeabi_dmul>
 8007246:	4b28      	ldr	r3, [pc, #160]	@ (80072e8 <_strtod_l+0x598>)
 8007248:	460a      	mov	r2, r1
 800724a:	400b      	ands	r3, r1
 800724c:	4927      	ldr	r1, [pc, #156]	@ (80072ec <_strtod_l+0x59c>)
 800724e:	428b      	cmp	r3, r1
 8007250:	4682      	mov	sl, r0
 8007252:	d898      	bhi.n	8007186 <_strtod_l+0x436>
 8007254:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007258:	428b      	cmp	r3, r1
 800725a:	bf86      	itte	hi
 800725c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80072f0 <_strtod_l+0x5a0>
 8007260:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007264:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007268:	2300      	movs	r3, #0
 800726a:	9308      	str	r3, [sp, #32]
 800726c:	e07a      	b.n	8007364 <_strtod_l+0x614>
 800726e:	07e2      	lsls	r2, r4, #31
 8007270:	d505      	bpl.n	800727e <_strtod_l+0x52e>
 8007272:	9b08      	ldr	r3, [sp, #32]
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f9e6 	bl	8000648 <__aeabi_dmul>
 800727c:	2301      	movs	r3, #1
 800727e:	9a08      	ldr	r2, [sp, #32]
 8007280:	3208      	adds	r2, #8
 8007282:	3601      	adds	r6, #1
 8007284:	1064      	asrs	r4, r4, #1
 8007286:	9208      	str	r2, [sp, #32]
 8007288:	e7cd      	b.n	8007226 <_strtod_l+0x4d6>
 800728a:	d0ed      	beq.n	8007268 <_strtod_l+0x518>
 800728c:	4264      	negs	r4, r4
 800728e:	f014 020f 	ands.w	r2, r4, #15
 8007292:	d00a      	beq.n	80072aa <_strtod_l+0x55a>
 8007294:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <_strtod_l+0x590>)
 8007296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800729a:	4650      	mov	r0, sl
 800729c:	4659      	mov	r1, fp
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f9 fafb 	bl	800089c <__aeabi_ddiv>
 80072a6:	4682      	mov	sl, r0
 80072a8:	468b      	mov	fp, r1
 80072aa:	1124      	asrs	r4, r4, #4
 80072ac:	d0dc      	beq.n	8007268 <_strtod_l+0x518>
 80072ae:	2c1f      	cmp	r4, #31
 80072b0:	dd20      	ble.n	80072f4 <_strtod_l+0x5a4>
 80072b2:	2400      	movs	r4, #0
 80072b4:	46a0      	mov	r8, r4
 80072b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80072b8:	46a1      	mov	r9, r4
 80072ba:	9a05      	ldr	r2, [sp, #20]
 80072bc:	2322      	movs	r3, #34	@ 0x22
 80072be:	f04f 0a00 	mov.w	sl, #0
 80072c2:	f04f 0b00 	mov.w	fp, #0
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	e768      	b.n	800719c <_strtod_l+0x44c>
 80072ca:	bf00      	nop
 80072cc:	0800a811 	.word	0x0800a811
 80072d0:	0800a840 	.word	0x0800a840
 80072d4:	0800a809 	.word	0x0800a809
 80072d8:	0800a99c 	.word	0x0800a99c
 80072dc:	0800ac2b 	.word	0x0800ac2b
 80072e0:	0800ab28 	.word	0x0800ab28
 80072e4:	0800ab00 	.word	0x0800ab00
 80072e8:	7ff00000 	.word	0x7ff00000
 80072ec:	7ca00000 	.word	0x7ca00000
 80072f0:	7fefffff 	.word	0x7fefffff
 80072f4:	f014 0310 	ands.w	r3, r4, #16
 80072f8:	bf18      	it	ne
 80072fa:	236a      	movne	r3, #106	@ 0x6a
 80072fc:	4ea9      	ldr	r6, [pc, #676]	@ (80075a4 <_strtod_l+0x854>)
 80072fe:	9308      	str	r3, [sp, #32]
 8007300:	4650      	mov	r0, sl
 8007302:	4659      	mov	r1, fp
 8007304:	2300      	movs	r3, #0
 8007306:	07e2      	lsls	r2, r4, #31
 8007308:	d504      	bpl.n	8007314 <_strtod_l+0x5c4>
 800730a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800730e:	f7f9 f99b 	bl	8000648 <__aeabi_dmul>
 8007312:	2301      	movs	r3, #1
 8007314:	1064      	asrs	r4, r4, #1
 8007316:	f106 0608 	add.w	r6, r6, #8
 800731a:	d1f4      	bne.n	8007306 <_strtod_l+0x5b6>
 800731c:	b10b      	cbz	r3, 8007322 <_strtod_l+0x5d2>
 800731e:	4682      	mov	sl, r0
 8007320:	468b      	mov	fp, r1
 8007322:	9b08      	ldr	r3, [sp, #32]
 8007324:	b1b3      	cbz	r3, 8007354 <_strtod_l+0x604>
 8007326:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800732a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800732e:	2b00      	cmp	r3, #0
 8007330:	4659      	mov	r1, fp
 8007332:	dd0f      	ble.n	8007354 <_strtod_l+0x604>
 8007334:	2b1f      	cmp	r3, #31
 8007336:	dd55      	ble.n	80073e4 <_strtod_l+0x694>
 8007338:	2b34      	cmp	r3, #52	@ 0x34
 800733a:	bfde      	ittt	le
 800733c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007340:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007344:	4093      	lslle	r3, r2
 8007346:	f04f 0a00 	mov.w	sl, #0
 800734a:	bfcc      	ite	gt
 800734c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007350:	ea03 0b01 	andle.w	fp, r3, r1
 8007354:	2200      	movs	r2, #0
 8007356:	2300      	movs	r3, #0
 8007358:	4650      	mov	r0, sl
 800735a:	4659      	mov	r1, fp
 800735c:	f7f9 fbdc 	bl	8000b18 <__aeabi_dcmpeq>
 8007360:	2800      	cmp	r0, #0
 8007362:	d1a6      	bne.n	80072b2 <_strtod_l+0x562>
 8007364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800736a:	9805      	ldr	r0, [sp, #20]
 800736c:	462b      	mov	r3, r5
 800736e:	463a      	mov	r2, r7
 8007370:	f002 fa9c 	bl	80098ac <__s2b>
 8007374:	900a      	str	r0, [sp, #40]	@ 0x28
 8007376:	2800      	cmp	r0, #0
 8007378:	f43f af05 	beq.w	8007186 <_strtod_l+0x436>
 800737c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800737e:	2a00      	cmp	r2, #0
 8007380:	eba9 0308 	sub.w	r3, r9, r8
 8007384:	bfa8      	it	ge
 8007386:	2300      	movge	r3, #0
 8007388:	9312      	str	r3, [sp, #72]	@ 0x48
 800738a:	2400      	movs	r4, #0
 800738c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007390:	9316      	str	r3, [sp, #88]	@ 0x58
 8007392:	46a0      	mov	r8, r4
 8007394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007396:	9805      	ldr	r0, [sp, #20]
 8007398:	6859      	ldr	r1, [r3, #4]
 800739a:	f002 f9df 	bl	800975c <_Balloc>
 800739e:	4681      	mov	r9, r0
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f43f aef4 	beq.w	800718e <_strtod_l+0x43e>
 80073a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	3202      	adds	r2, #2
 80073ac:	f103 010c 	add.w	r1, r3, #12
 80073b0:	0092      	lsls	r2, r2, #2
 80073b2:	300c      	adds	r0, #12
 80073b4:	f000 fc21 	bl	8007bfa <memcpy>
 80073b8:	ec4b ab10 	vmov	d0, sl, fp
 80073bc:	9805      	ldr	r0, [sp, #20]
 80073be:	aa1c      	add	r2, sp, #112	@ 0x70
 80073c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80073c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80073c6:	f002 fdad 	bl	8009f24 <__d2b>
 80073ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f43f aede 	beq.w	800718e <_strtod_l+0x43e>
 80073d2:	9805      	ldr	r0, [sp, #20]
 80073d4:	2101      	movs	r1, #1
 80073d6:	f002 faff 	bl	80099d8 <__i2b>
 80073da:	4680      	mov	r8, r0
 80073dc:	b948      	cbnz	r0, 80073f2 <_strtod_l+0x6a2>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	e6d4      	b.n	800718e <_strtod_l+0x43e>
 80073e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073e8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ec:	ea03 0a0a 	and.w	sl, r3, sl
 80073f0:	e7b0      	b.n	8007354 <_strtod_l+0x604>
 80073f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80073f6:	2d00      	cmp	r5, #0
 80073f8:	bfab      	itete	ge
 80073fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80073fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80073fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007400:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007402:	bfac      	ite	ge
 8007404:	18ef      	addge	r7, r5, r3
 8007406:	1b5e      	sublt	r6, r3, r5
 8007408:	9b08      	ldr	r3, [sp, #32]
 800740a:	1aed      	subs	r5, r5, r3
 800740c:	4415      	add	r5, r2
 800740e:	4b66      	ldr	r3, [pc, #408]	@ (80075a8 <_strtod_l+0x858>)
 8007410:	3d01      	subs	r5, #1
 8007412:	429d      	cmp	r5, r3
 8007414:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007418:	da50      	bge.n	80074bc <_strtod_l+0x76c>
 800741a:	1b5b      	subs	r3, r3, r5
 800741c:	2b1f      	cmp	r3, #31
 800741e:	eba2 0203 	sub.w	r2, r2, r3
 8007422:	f04f 0101 	mov.w	r1, #1
 8007426:	dc3d      	bgt.n	80074a4 <_strtod_l+0x754>
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800742e:	2300      	movs	r3, #0
 8007430:	9310      	str	r3, [sp, #64]	@ 0x40
 8007432:	18bd      	adds	r5, r7, r2
 8007434:	9b08      	ldr	r3, [sp, #32]
 8007436:	42af      	cmp	r7, r5
 8007438:	4416      	add	r6, r2
 800743a:	441e      	add	r6, r3
 800743c:	463b      	mov	r3, r7
 800743e:	bfa8      	it	ge
 8007440:	462b      	movge	r3, r5
 8007442:	42b3      	cmp	r3, r6
 8007444:	bfa8      	it	ge
 8007446:	4633      	movge	r3, r6
 8007448:	2b00      	cmp	r3, #0
 800744a:	bfc2      	ittt	gt
 800744c:	1aed      	subgt	r5, r5, r3
 800744e:	1af6      	subgt	r6, r6, r3
 8007450:	1aff      	subgt	r7, r7, r3
 8007452:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007454:	2b00      	cmp	r3, #0
 8007456:	dd16      	ble.n	8007486 <_strtod_l+0x736>
 8007458:	4641      	mov	r1, r8
 800745a:	9805      	ldr	r0, [sp, #20]
 800745c:	461a      	mov	r2, r3
 800745e:	f002 fb7b 	bl	8009b58 <__pow5mult>
 8007462:	4680      	mov	r8, r0
 8007464:	2800      	cmp	r0, #0
 8007466:	d0ba      	beq.n	80073de <_strtod_l+0x68e>
 8007468:	4601      	mov	r1, r0
 800746a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800746c:	9805      	ldr	r0, [sp, #20]
 800746e:	f002 fac9 	bl	8009a04 <__multiply>
 8007472:	900e      	str	r0, [sp, #56]	@ 0x38
 8007474:	2800      	cmp	r0, #0
 8007476:	f43f ae8a 	beq.w	800718e <_strtod_l+0x43e>
 800747a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800747c:	9805      	ldr	r0, [sp, #20]
 800747e:	f002 f9ad 	bl	80097dc <_Bfree>
 8007482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007484:	931a      	str	r3, [sp, #104]	@ 0x68
 8007486:	2d00      	cmp	r5, #0
 8007488:	dc1d      	bgt.n	80074c6 <_strtod_l+0x776>
 800748a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	dd23      	ble.n	80074d8 <_strtod_l+0x788>
 8007490:	4649      	mov	r1, r9
 8007492:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007494:	9805      	ldr	r0, [sp, #20]
 8007496:	f002 fb5f 	bl	8009b58 <__pow5mult>
 800749a:	4681      	mov	r9, r0
 800749c:	b9e0      	cbnz	r0, 80074d8 <_strtod_l+0x788>
 800749e:	f04f 0900 	mov.w	r9, #0
 80074a2:	e674      	b.n	800718e <_strtod_l+0x43e>
 80074a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80074a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80074ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80074b0:	35e2      	adds	r5, #226	@ 0xe2
 80074b2:	fa01 f305 	lsl.w	r3, r1, r5
 80074b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80074b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80074ba:	e7ba      	b.n	8007432 <_strtod_l+0x6e2>
 80074bc:	2300      	movs	r3, #0
 80074be:	9310      	str	r3, [sp, #64]	@ 0x40
 80074c0:	2301      	movs	r3, #1
 80074c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074c4:	e7b5      	b.n	8007432 <_strtod_l+0x6e2>
 80074c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074c8:	9805      	ldr	r0, [sp, #20]
 80074ca:	462a      	mov	r2, r5
 80074cc:	f002 fb9e 	bl	8009c0c <__lshift>
 80074d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d1d9      	bne.n	800748a <_strtod_l+0x73a>
 80074d6:	e65a      	b.n	800718e <_strtod_l+0x43e>
 80074d8:	2e00      	cmp	r6, #0
 80074da:	dd07      	ble.n	80074ec <_strtod_l+0x79c>
 80074dc:	4649      	mov	r1, r9
 80074de:	9805      	ldr	r0, [sp, #20]
 80074e0:	4632      	mov	r2, r6
 80074e2:	f002 fb93 	bl	8009c0c <__lshift>
 80074e6:	4681      	mov	r9, r0
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d0d8      	beq.n	800749e <_strtod_l+0x74e>
 80074ec:	2f00      	cmp	r7, #0
 80074ee:	dd08      	ble.n	8007502 <_strtod_l+0x7b2>
 80074f0:	4641      	mov	r1, r8
 80074f2:	9805      	ldr	r0, [sp, #20]
 80074f4:	463a      	mov	r2, r7
 80074f6:	f002 fb89 	bl	8009c0c <__lshift>
 80074fa:	4680      	mov	r8, r0
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f43f ae46 	beq.w	800718e <_strtod_l+0x43e>
 8007502:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007504:	9805      	ldr	r0, [sp, #20]
 8007506:	464a      	mov	r2, r9
 8007508:	f002 fc08 	bl	8009d1c <__mdiff>
 800750c:	4604      	mov	r4, r0
 800750e:	2800      	cmp	r0, #0
 8007510:	f43f ae3d 	beq.w	800718e <_strtod_l+0x43e>
 8007514:	68c3      	ldr	r3, [r0, #12]
 8007516:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007518:	2300      	movs	r3, #0
 800751a:	60c3      	str	r3, [r0, #12]
 800751c:	4641      	mov	r1, r8
 800751e:	f002 fbe1 	bl	8009ce4 <__mcmp>
 8007522:	2800      	cmp	r0, #0
 8007524:	da46      	bge.n	80075b4 <_strtod_l+0x864>
 8007526:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007528:	ea53 030a 	orrs.w	r3, r3, sl
 800752c:	d16c      	bne.n	8007608 <_strtod_l+0x8b8>
 800752e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007532:	2b00      	cmp	r3, #0
 8007534:	d168      	bne.n	8007608 <_strtod_l+0x8b8>
 8007536:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800753a:	0d1b      	lsrs	r3, r3, #20
 800753c:	051b      	lsls	r3, r3, #20
 800753e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007542:	d961      	bls.n	8007608 <_strtod_l+0x8b8>
 8007544:	6963      	ldr	r3, [r4, #20]
 8007546:	b913      	cbnz	r3, 800754e <_strtod_l+0x7fe>
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	2b01      	cmp	r3, #1
 800754c:	dd5c      	ble.n	8007608 <_strtod_l+0x8b8>
 800754e:	4621      	mov	r1, r4
 8007550:	2201      	movs	r2, #1
 8007552:	9805      	ldr	r0, [sp, #20]
 8007554:	f002 fb5a 	bl	8009c0c <__lshift>
 8007558:	4641      	mov	r1, r8
 800755a:	4604      	mov	r4, r0
 800755c:	f002 fbc2 	bl	8009ce4 <__mcmp>
 8007560:	2800      	cmp	r0, #0
 8007562:	dd51      	ble.n	8007608 <_strtod_l+0x8b8>
 8007564:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007568:	9a08      	ldr	r2, [sp, #32]
 800756a:	0d1b      	lsrs	r3, r3, #20
 800756c:	051b      	lsls	r3, r3, #20
 800756e:	2a00      	cmp	r2, #0
 8007570:	d06b      	beq.n	800764a <_strtod_l+0x8fa>
 8007572:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007576:	d868      	bhi.n	800764a <_strtod_l+0x8fa>
 8007578:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800757c:	f67f ae9d 	bls.w	80072ba <_strtod_l+0x56a>
 8007580:	4b0a      	ldr	r3, [pc, #40]	@ (80075ac <_strtod_l+0x85c>)
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	2200      	movs	r2, #0
 8007588:	f7f9 f85e 	bl	8000648 <__aeabi_dmul>
 800758c:	4b08      	ldr	r3, [pc, #32]	@ (80075b0 <_strtod_l+0x860>)
 800758e:	400b      	ands	r3, r1
 8007590:	4682      	mov	sl, r0
 8007592:	468b      	mov	fp, r1
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f ae05 	bne.w	80071a4 <_strtod_l+0x454>
 800759a:	9a05      	ldr	r2, [sp, #20]
 800759c:	2322      	movs	r3, #34	@ 0x22
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e600      	b.n	80071a4 <_strtod_l+0x454>
 80075a2:	bf00      	nop
 80075a4:	0800a868 	.word	0x0800a868
 80075a8:	fffffc02 	.word	0xfffffc02
 80075ac:	39500000 	.word	0x39500000
 80075b0:	7ff00000 	.word	0x7ff00000
 80075b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80075b8:	d165      	bne.n	8007686 <_strtod_l+0x936>
 80075ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80075bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075c0:	b35a      	cbz	r2, 800761a <_strtod_l+0x8ca>
 80075c2:	4a9f      	ldr	r2, [pc, #636]	@ (8007840 <_strtod_l+0xaf0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d12b      	bne.n	8007620 <_strtod_l+0x8d0>
 80075c8:	9b08      	ldr	r3, [sp, #32]
 80075ca:	4651      	mov	r1, sl
 80075cc:	b303      	cbz	r3, 8007610 <_strtod_l+0x8c0>
 80075ce:	4b9d      	ldr	r3, [pc, #628]	@ (8007844 <_strtod_l+0xaf4>)
 80075d0:	465a      	mov	r2, fp
 80075d2:	4013      	ands	r3, r2
 80075d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075dc:	d81b      	bhi.n	8007616 <_strtod_l+0x8c6>
 80075de:	0d1b      	lsrs	r3, r3, #20
 80075e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	4299      	cmp	r1, r3
 80075ea:	d119      	bne.n	8007620 <_strtod_l+0x8d0>
 80075ec:	4b96      	ldr	r3, [pc, #600]	@ (8007848 <_strtod_l+0xaf8>)
 80075ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d102      	bne.n	80075fa <_strtod_l+0x8aa>
 80075f4:	3101      	adds	r1, #1
 80075f6:	f43f adca 	beq.w	800718e <_strtod_l+0x43e>
 80075fa:	4b92      	ldr	r3, [pc, #584]	@ (8007844 <_strtod_l+0xaf4>)
 80075fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075fe:	401a      	ands	r2, r3
 8007600:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007604:	f04f 0a00 	mov.w	sl, #0
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1b8      	bne.n	8007580 <_strtod_l+0x830>
 800760e:	e5c9      	b.n	80071a4 <_strtod_l+0x454>
 8007610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007614:	e7e8      	b.n	80075e8 <_strtod_l+0x898>
 8007616:	4613      	mov	r3, r2
 8007618:	e7e6      	b.n	80075e8 <_strtod_l+0x898>
 800761a:	ea53 030a 	orrs.w	r3, r3, sl
 800761e:	d0a1      	beq.n	8007564 <_strtod_l+0x814>
 8007620:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007622:	b1db      	cbz	r3, 800765c <_strtod_l+0x90c>
 8007624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007626:	4213      	tst	r3, r2
 8007628:	d0ee      	beq.n	8007608 <_strtod_l+0x8b8>
 800762a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800762c:	9a08      	ldr	r2, [sp, #32]
 800762e:	4650      	mov	r0, sl
 8007630:	4659      	mov	r1, fp
 8007632:	b1bb      	cbz	r3, 8007664 <_strtod_l+0x914>
 8007634:	f7ff fb6c 	bl	8006d10 <sulp>
 8007638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800763c:	ec53 2b10 	vmov	r2, r3, d0
 8007640:	f7f8 fe4c 	bl	80002dc <__adddf3>
 8007644:	4682      	mov	sl, r0
 8007646:	468b      	mov	fp, r1
 8007648:	e7de      	b.n	8007608 <_strtod_l+0x8b8>
 800764a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800764e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007652:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007656:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800765a:	e7d5      	b.n	8007608 <_strtod_l+0x8b8>
 800765c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800765e:	ea13 0f0a 	tst.w	r3, sl
 8007662:	e7e1      	b.n	8007628 <_strtod_l+0x8d8>
 8007664:	f7ff fb54 	bl	8006d10 <sulp>
 8007668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800766c:	ec53 2b10 	vmov	r2, r3, d0
 8007670:	f7f8 fe32 	bl	80002d8 <__aeabi_dsub>
 8007674:	2200      	movs	r2, #0
 8007676:	2300      	movs	r3, #0
 8007678:	4682      	mov	sl, r0
 800767a:	468b      	mov	fp, r1
 800767c:	f7f9 fa4c 	bl	8000b18 <__aeabi_dcmpeq>
 8007680:	2800      	cmp	r0, #0
 8007682:	d0c1      	beq.n	8007608 <_strtod_l+0x8b8>
 8007684:	e619      	b.n	80072ba <_strtod_l+0x56a>
 8007686:	4641      	mov	r1, r8
 8007688:	4620      	mov	r0, r4
 800768a:	f002 fca3 	bl	8009fd4 <__ratio>
 800768e:	ec57 6b10 	vmov	r6, r7, d0
 8007692:	2200      	movs	r2, #0
 8007694:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f9 fa50 	bl	8000b40 <__aeabi_dcmple>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d06f      	beq.n	8007784 <_strtod_l+0xa34>
 80076a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d17a      	bne.n	80077a0 <_strtod_l+0xa50>
 80076aa:	f1ba 0f00 	cmp.w	sl, #0
 80076ae:	d158      	bne.n	8007762 <_strtod_l+0xa12>
 80076b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d15a      	bne.n	8007770 <_strtod_l+0xa20>
 80076ba:	4b64      	ldr	r3, [pc, #400]	@ (800784c <_strtod_l+0xafc>)
 80076bc:	2200      	movs	r2, #0
 80076be:	4630      	mov	r0, r6
 80076c0:	4639      	mov	r1, r7
 80076c2:	f7f9 fa33 	bl	8000b2c <__aeabi_dcmplt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d159      	bne.n	800777e <_strtod_l+0xa2e>
 80076ca:	4630      	mov	r0, r6
 80076cc:	4639      	mov	r1, r7
 80076ce:	4b60      	ldr	r3, [pc, #384]	@ (8007850 <_strtod_l+0xb00>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	f7f8 ffb9 	bl	8000648 <__aeabi_dmul>
 80076d6:	4606      	mov	r6, r0
 80076d8:	460f      	mov	r7, r1
 80076da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80076de:	9606      	str	r6, [sp, #24]
 80076e0:	9307      	str	r3, [sp, #28]
 80076e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076e6:	4d57      	ldr	r5, [pc, #348]	@ (8007844 <_strtod_l+0xaf4>)
 80076e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80076ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ee:	401d      	ands	r5, r3
 80076f0:	4b58      	ldr	r3, [pc, #352]	@ (8007854 <_strtod_l+0xb04>)
 80076f2:	429d      	cmp	r5, r3
 80076f4:	f040 80b2 	bne.w	800785c <_strtod_l+0xb0c>
 80076f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80076fe:	ec4b ab10 	vmov	d0, sl, fp
 8007702:	f002 fb9f 	bl	8009e44 <__ulp>
 8007706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800770a:	ec51 0b10 	vmov	r0, r1, d0
 800770e:	f7f8 ff9b 	bl	8000648 <__aeabi_dmul>
 8007712:	4652      	mov	r2, sl
 8007714:	465b      	mov	r3, fp
 8007716:	f7f8 fde1 	bl	80002dc <__adddf3>
 800771a:	460b      	mov	r3, r1
 800771c:	4949      	ldr	r1, [pc, #292]	@ (8007844 <_strtod_l+0xaf4>)
 800771e:	4a4e      	ldr	r2, [pc, #312]	@ (8007858 <_strtod_l+0xb08>)
 8007720:	4019      	ands	r1, r3
 8007722:	4291      	cmp	r1, r2
 8007724:	4682      	mov	sl, r0
 8007726:	d942      	bls.n	80077ae <_strtod_l+0xa5e>
 8007728:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800772a:	4b47      	ldr	r3, [pc, #284]	@ (8007848 <_strtod_l+0xaf8>)
 800772c:	429a      	cmp	r2, r3
 800772e:	d103      	bne.n	8007738 <_strtod_l+0x9e8>
 8007730:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007732:	3301      	adds	r3, #1
 8007734:	f43f ad2b 	beq.w	800718e <_strtod_l+0x43e>
 8007738:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007848 <_strtod_l+0xaf8>
 800773c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007740:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007742:	9805      	ldr	r0, [sp, #20]
 8007744:	f002 f84a 	bl	80097dc <_Bfree>
 8007748:	9805      	ldr	r0, [sp, #20]
 800774a:	4649      	mov	r1, r9
 800774c:	f002 f846 	bl	80097dc <_Bfree>
 8007750:	9805      	ldr	r0, [sp, #20]
 8007752:	4641      	mov	r1, r8
 8007754:	f002 f842 	bl	80097dc <_Bfree>
 8007758:	9805      	ldr	r0, [sp, #20]
 800775a:	4621      	mov	r1, r4
 800775c:	f002 f83e 	bl	80097dc <_Bfree>
 8007760:	e618      	b.n	8007394 <_strtod_l+0x644>
 8007762:	f1ba 0f01 	cmp.w	sl, #1
 8007766:	d103      	bne.n	8007770 <_strtod_l+0xa20>
 8007768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800776a:	2b00      	cmp	r3, #0
 800776c:	f43f ada5 	beq.w	80072ba <_strtod_l+0x56a>
 8007770:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007820 <_strtod_l+0xad0>
 8007774:	4f35      	ldr	r7, [pc, #212]	@ (800784c <_strtod_l+0xafc>)
 8007776:	ed8d 7b06 	vstr	d7, [sp, #24]
 800777a:	2600      	movs	r6, #0
 800777c:	e7b1      	b.n	80076e2 <_strtod_l+0x992>
 800777e:	4f34      	ldr	r7, [pc, #208]	@ (8007850 <_strtod_l+0xb00>)
 8007780:	2600      	movs	r6, #0
 8007782:	e7aa      	b.n	80076da <_strtod_l+0x98a>
 8007784:	4b32      	ldr	r3, [pc, #200]	@ (8007850 <_strtod_l+0xb00>)
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	2200      	movs	r2, #0
 800778c:	f7f8 ff5c 	bl	8000648 <__aeabi_dmul>
 8007790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007792:	4606      	mov	r6, r0
 8007794:	460f      	mov	r7, r1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d09f      	beq.n	80076da <_strtod_l+0x98a>
 800779a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800779e:	e7a0      	b.n	80076e2 <_strtod_l+0x992>
 80077a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007828 <_strtod_l+0xad8>
 80077a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077a8:	ec57 6b17 	vmov	r6, r7, d7
 80077ac:	e799      	b.n	80076e2 <_strtod_l+0x992>
 80077ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80077b2:	9b08      	ldr	r3, [sp, #32]
 80077b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1c1      	bne.n	8007740 <_strtod_l+0x9f0>
 80077bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077c0:	0d1b      	lsrs	r3, r3, #20
 80077c2:	051b      	lsls	r3, r3, #20
 80077c4:	429d      	cmp	r5, r3
 80077c6:	d1bb      	bne.n	8007740 <_strtod_l+0x9f0>
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f9 fa9c 	bl	8000d08 <__aeabi_d2lz>
 80077d0:	f7f8 ff0c 	bl	80005ec <__aeabi_l2d>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f8 fd7c 	bl	80002d8 <__aeabi_dsub>
 80077e0:	460b      	mov	r3, r1
 80077e2:	4602      	mov	r2, r0
 80077e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80077e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80077ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ee:	ea46 060a 	orr.w	r6, r6, sl
 80077f2:	431e      	orrs	r6, r3
 80077f4:	d06f      	beq.n	80078d6 <_strtod_l+0xb86>
 80077f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007830 <_strtod_l+0xae0>)
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f7f9 f996 	bl	8000b2c <__aeabi_dcmplt>
 8007800:	2800      	cmp	r0, #0
 8007802:	f47f accf 	bne.w	80071a4 <_strtod_l+0x454>
 8007806:	a30c      	add	r3, pc, #48	@ (adr r3, 8007838 <_strtod_l+0xae8>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007810:	f7f9 f9aa 	bl	8000b68 <__aeabi_dcmpgt>
 8007814:	2800      	cmp	r0, #0
 8007816:	d093      	beq.n	8007740 <_strtod_l+0x9f0>
 8007818:	e4c4      	b.n	80071a4 <_strtod_l+0x454>
 800781a:	bf00      	nop
 800781c:	f3af 8000 	nop.w
 8007820:	00000000 	.word	0x00000000
 8007824:	bff00000 	.word	0xbff00000
 8007828:	00000000 	.word	0x00000000
 800782c:	3ff00000 	.word	0x3ff00000
 8007830:	94a03595 	.word	0x94a03595
 8007834:	3fdfffff 	.word	0x3fdfffff
 8007838:	35afe535 	.word	0x35afe535
 800783c:	3fe00000 	.word	0x3fe00000
 8007840:	000fffff 	.word	0x000fffff
 8007844:	7ff00000 	.word	0x7ff00000
 8007848:	7fefffff 	.word	0x7fefffff
 800784c:	3ff00000 	.word	0x3ff00000
 8007850:	3fe00000 	.word	0x3fe00000
 8007854:	7fe00000 	.word	0x7fe00000
 8007858:	7c9fffff 	.word	0x7c9fffff
 800785c:	9b08      	ldr	r3, [sp, #32]
 800785e:	b323      	cbz	r3, 80078aa <_strtod_l+0xb5a>
 8007860:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007864:	d821      	bhi.n	80078aa <_strtod_l+0xb5a>
 8007866:	a328      	add	r3, pc, #160	@ (adr r3, 8007908 <_strtod_l+0xbb8>)
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f9 f966 	bl	8000b40 <__aeabi_dcmple>
 8007874:	b1a0      	cbz	r0, 80078a0 <_strtod_l+0xb50>
 8007876:	4639      	mov	r1, r7
 8007878:	4630      	mov	r0, r6
 800787a:	f7f9 f9bd 	bl	8000bf8 <__aeabi_d2uiz>
 800787e:	2801      	cmp	r0, #1
 8007880:	bf38      	it	cc
 8007882:	2001      	movcc	r0, #1
 8007884:	f7f8 fe66 	bl	8000554 <__aeabi_ui2d>
 8007888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	b9fb      	cbnz	r3, 80078d0 <_strtod_l+0xb80>
 8007890:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007894:	9014      	str	r0, [sp, #80]	@ 0x50
 8007896:	9315      	str	r3, [sp, #84]	@ 0x54
 8007898:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800789c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80078a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80078a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80078a6:	1b5b      	subs	r3, r3, r5
 80078a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80078aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80078ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80078b2:	f002 fac7 	bl	8009e44 <__ulp>
 80078b6:	4650      	mov	r0, sl
 80078b8:	ec53 2b10 	vmov	r2, r3, d0
 80078bc:	4659      	mov	r1, fp
 80078be:	f7f8 fec3 	bl	8000648 <__aeabi_dmul>
 80078c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80078c6:	f7f8 fd09 	bl	80002dc <__adddf3>
 80078ca:	4682      	mov	sl, r0
 80078cc:	468b      	mov	fp, r1
 80078ce:	e770      	b.n	80077b2 <_strtod_l+0xa62>
 80078d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80078d4:	e7e0      	b.n	8007898 <_strtod_l+0xb48>
 80078d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007910 <_strtod_l+0xbc0>)
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f7f9 f926 	bl	8000b2c <__aeabi_dcmplt>
 80078e0:	e798      	b.n	8007814 <_strtod_l+0xac4>
 80078e2:	2300      	movs	r3, #0
 80078e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80078e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	f7ff ba6d 	b.w	8006dca <_strtod_l+0x7a>
 80078f0:	2a65      	cmp	r2, #101	@ 0x65
 80078f2:	f43f ab66 	beq.w	8006fc2 <_strtod_l+0x272>
 80078f6:	2a45      	cmp	r2, #69	@ 0x45
 80078f8:	f43f ab63 	beq.w	8006fc2 <_strtod_l+0x272>
 80078fc:	2301      	movs	r3, #1
 80078fe:	f7ff bb9e 	b.w	800703e <_strtod_l+0x2ee>
 8007902:	bf00      	nop
 8007904:	f3af 8000 	nop.w
 8007908:	ffc00000 	.word	0xffc00000
 800790c:	41dfffff 	.word	0x41dfffff
 8007910:	94a03595 	.word	0x94a03595
 8007914:	3fcfffff 	.word	0x3fcfffff

08007918 <_strtod_r>:
 8007918:	4b01      	ldr	r3, [pc, #4]	@ (8007920 <_strtod_r+0x8>)
 800791a:	f7ff ba19 	b.w	8006d50 <_strtod_l>
 800791e:	bf00      	nop
 8007920:	20000018 	.word	0x20000018

08007924 <_strtol_l.constprop.0>:
 8007924:	2b24      	cmp	r3, #36	@ 0x24
 8007926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800792a:	4686      	mov	lr, r0
 800792c:	4690      	mov	r8, r2
 800792e:	d801      	bhi.n	8007934 <_strtol_l.constprop.0+0x10>
 8007930:	2b01      	cmp	r3, #1
 8007932:	d106      	bne.n	8007942 <_strtol_l.constprop.0+0x1e>
 8007934:	f000 f934 	bl	8007ba0 <__errno>
 8007938:	2316      	movs	r3, #22
 800793a:	6003      	str	r3, [r0, #0]
 800793c:	2000      	movs	r0, #0
 800793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007942:	4834      	ldr	r0, [pc, #208]	@ (8007a14 <_strtol_l.constprop.0+0xf0>)
 8007944:	460d      	mov	r5, r1
 8007946:	462a      	mov	r2, r5
 8007948:	f815 4b01 	ldrb.w	r4, [r5], #1
 800794c:	5d06      	ldrb	r6, [r0, r4]
 800794e:	f016 0608 	ands.w	r6, r6, #8
 8007952:	d1f8      	bne.n	8007946 <_strtol_l.constprop.0+0x22>
 8007954:	2c2d      	cmp	r4, #45	@ 0x2d
 8007956:	d12d      	bne.n	80079b4 <_strtol_l.constprop.0+0x90>
 8007958:	782c      	ldrb	r4, [r5, #0]
 800795a:	2601      	movs	r6, #1
 800795c:	1c95      	adds	r5, r2, #2
 800795e:	f033 0210 	bics.w	r2, r3, #16
 8007962:	d109      	bne.n	8007978 <_strtol_l.constprop.0+0x54>
 8007964:	2c30      	cmp	r4, #48	@ 0x30
 8007966:	d12a      	bne.n	80079be <_strtol_l.constprop.0+0x9a>
 8007968:	782a      	ldrb	r2, [r5, #0]
 800796a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800796e:	2a58      	cmp	r2, #88	@ 0x58
 8007970:	d125      	bne.n	80079be <_strtol_l.constprop.0+0x9a>
 8007972:	786c      	ldrb	r4, [r5, #1]
 8007974:	2310      	movs	r3, #16
 8007976:	3502      	adds	r5, #2
 8007978:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800797c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007980:	2200      	movs	r2, #0
 8007982:	fbbc f9f3 	udiv	r9, ip, r3
 8007986:	4610      	mov	r0, r2
 8007988:	fb03 ca19 	mls	sl, r3, r9, ip
 800798c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007990:	2f09      	cmp	r7, #9
 8007992:	d81b      	bhi.n	80079cc <_strtol_l.constprop.0+0xa8>
 8007994:	463c      	mov	r4, r7
 8007996:	42a3      	cmp	r3, r4
 8007998:	dd27      	ble.n	80079ea <_strtol_l.constprop.0+0xc6>
 800799a:	1c57      	adds	r7, r2, #1
 800799c:	d007      	beq.n	80079ae <_strtol_l.constprop.0+0x8a>
 800799e:	4581      	cmp	r9, r0
 80079a0:	d320      	bcc.n	80079e4 <_strtol_l.constprop.0+0xc0>
 80079a2:	d101      	bne.n	80079a8 <_strtol_l.constprop.0+0x84>
 80079a4:	45a2      	cmp	sl, r4
 80079a6:	db1d      	blt.n	80079e4 <_strtol_l.constprop.0+0xc0>
 80079a8:	fb00 4003 	mla	r0, r0, r3, r4
 80079ac:	2201      	movs	r2, #1
 80079ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079b2:	e7eb      	b.n	800798c <_strtol_l.constprop.0+0x68>
 80079b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80079b6:	bf04      	itt	eq
 80079b8:	782c      	ldrbeq	r4, [r5, #0]
 80079ba:	1c95      	addeq	r5, r2, #2
 80079bc:	e7cf      	b.n	800795e <_strtol_l.constprop.0+0x3a>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1da      	bne.n	8007978 <_strtol_l.constprop.0+0x54>
 80079c2:	2c30      	cmp	r4, #48	@ 0x30
 80079c4:	bf0c      	ite	eq
 80079c6:	2308      	moveq	r3, #8
 80079c8:	230a      	movne	r3, #10
 80079ca:	e7d5      	b.n	8007978 <_strtol_l.constprop.0+0x54>
 80079cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80079d0:	2f19      	cmp	r7, #25
 80079d2:	d801      	bhi.n	80079d8 <_strtol_l.constprop.0+0xb4>
 80079d4:	3c37      	subs	r4, #55	@ 0x37
 80079d6:	e7de      	b.n	8007996 <_strtol_l.constprop.0+0x72>
 80079d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80079dc:	2f19      	cmp	r7, #25
 80079de:	d804      	bhi.n	80079ea <_strtol_l.constprop.0+0xc6>
 80079e0:	3c57      	subs	r4, #87	@ 0x57
 80079e2:	e7d8      	b.n	8007996 <_strtol_l.constprop.0+0x72>
 80079e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079e8:	e7e1      	b.n	80079ae <_strtol_l.constprop.0+0x8a>
 80079ea:	1c53      	adds	r3, r2, #1
 80079ec:	d108      	bne.n	8007a00 <_strtol_l.constprop.0+0xdc>
 80079ee:	2322      	movs	r3, #34	@ 0x22
 80079f0:	f8ce 3000 	str.w	r3, [lr]
 80079f4:	4660      	mov	r0, ip
 80079f6:	f1b8 0f00 	cmp.w	r8, #0
 80079fa:	d0a0      	beq.n	800793e <_strtol_l.constprop.0+0x1a>
 80079fc:	1e69      	subs	r1, r5, #1
 80079fe:	e006      	b.n	8007a0e <_strtol_l.constprop.0+0xea>
 8007a00:	b106      	cbz	r6, 8007a04 <_strtol_l.constprop.0+0xe0>
 8007a02:	4240      	negs	r0, r0
 8007a04:	f1b8 0f00 	cmp.w	r8, #0
 8007a08:	d099      	beq.n	800793e <_strtol_l.constprop.0+0x1a>
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	d1f6      	bne.n	80079fc <_strtol_l.constprop.0+0xd8>
 8007a0e:	f8c8 1000 	str.w	r1, [r8]
 8007a12:	e794      	b.n	800793e <_strtol_l.constprop.0+0x1a>
 8007a14:	0800a899 	.word	0x0800a899

08007a18 <_strtol_r>:
 8007a18:	f7ff bf84 	b.w	8007924 <_strtol_l.constprop.0>

08007a1c <_fwalk_sglue>:
 8007a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a20:	4607      	mov	r7, r0
 8007a22:	4688      	mov	r8, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	2600      	movs	r6, #0
 8007a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007a30:	d505      	bpl.n	8007a3e <_fwalk_sglue+0x22>
 8007a32:	6824      	ldr	r4, [r4, #0]
 8007a34:	2c00      	cmp	r4, #0
 8007a36:	d1f7      	bne.n	8007a28 <_fwalk_sglue+0xc>
 8007a38:	4630      	mov	r0, r6
 8007a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d907      	bls.n	8007a54 <_fwalk_sglue+0x38>
 8007a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	d003      	beq.n	8007a54 <_fwalk_sglue+0x38>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4638      	mov	r0, r7
 8007a50:	47c0      	blx	r8
 8007a52:	4306      	orrs	r6, r0
 8007a54:	3568      	adds	r5, #104	@ 0x68
 8007a56:	e7e9      	b.n	8007a2c <_fwalk_sglue+0x10>

08007a58 <iprintf>:
 8007a58:	b40f      	push	{r0, r1, r2, r3}
 8007a5a:	b507      	push	{r0, r1, r2, lr}
 8007a5c:	4906      	ldr	r1, [pc, #24]	@ (8007a78 <iprintf+0x20>)
 8007a5e:	ab04      	add	r3, sp, #16
 8007a60:	6808      	ldr	r0, [r1, #0]
 8007a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a66:	6881      	ldr	r1, [r0, #8]
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	f001 fbeb 	bl	8009244 <_vfiprintf_r>
 8007a6e:	b003      	add	sp, #12
 8007a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a74:	b004      	add	sp, #16
 8007a76:	4770      	bx	lr
 8007a78:	20000184 	.word	0x20000184

08007a7c <_puts_r>:
 8007a7c:	6a03      	ldr	r3, [r0, #32]
 8007a7e:	b570      	push	{r4, r5, r6, lr}
 8007a80:	6884      	ldr	r4, [r0, #8]
 8007a82:	4605      	mov	r5, r0
 8007a84:	460e      	mov	r6, r1
 8007a86:	b90b      	cbnz	r3, 8007a8c <_puts_r+0x10>
 8007a88:	f7ff f92a 	bl	8006ce0 <__sinit>
 8007a8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a8e:	07db      	lsls	r3, r3, #31
 8007a90:	d405      	bmi.n	8007a9e <_puts_r+0x22>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	0598      	lsls	r0, r3, #22
 8007a96:	d402      	bmi.n	8007a9e <_puts_r+0x22>
 8007a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a9a:	f000 f8ac 	bl	8007bf6 <__retarget_lock_acquire_recursive>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	0719      	lsls	r1, r3, #28
 8007aa2:	d502      	bpl.n	8007aaa <_puts_r+0x2e>
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d135      	bne.n	8007b16 <_puts_r+0x9a>
 8007aaa:	4621      	mov	r1, r4
 8007aac:	4628      	mov	r0, r5
 8007aae:	f002 fbb7 	bl	800a220 <__swsetup_r>
 8007ab2:	b380      	cbz	r0, 8007b16 <_puts_r+0x9a>
 8007ab4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007ab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aba:	07da      	lsls	r2, r3, #31
 8007abc:	d405      	bmi.n	8007aca <_puts_r+0x4e>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	059b      	lsls	r3, r3, #22
 8007ac2:	d402      	bmi.n	8007aca <_puts_r+0x4e>
 8007ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ac6:	f000 f897 	bl	8007bf8 <__retarget_lock_release_recursive>
 8007aca:	4628      	mov	r0, r5
 8007acc:	bd70      	pop	{r4, r5, r6, pc}
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da04      	bge.n	8007adc <_puts_r+0x60>
 8007ad2:	69a2      	ldr	r2, [r4, #24]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	dc17      	bgt.n	8007b08 <_puts_r+0x8c>
 8007ad8:	290a      	cmp	r1, #10
 8007ada:	d015      	beq.n	8007b08 <_puts_r+0x8c>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	6022      	str	r2, [r4, #0]
 8007ae2:	7019      	strb	r1, [r3, #0]
 8007ae4:	68a3      	ldr	r3, [r4, #8]
 8007ae6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007aea:	3b01      	subs	r3, #1
 8007aec:	60a3      	str	r3, [r4, #8]
 8007aee:	2900      	cmp	r1, #0
 8007af0:	d1ed      	bne.n	8007ace <_puts_r+0x52>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da11      	bge.n	8007b1a <_puts_r+0x9e>
 8007af6:	4622      	mov	r2, r4
 8007af8:	210a      	movs	r1, #10
 8007afa:	4628      	mov	r0, r5
 8007afc:	f002 fb51 	bl	800a1a2 <__swbuf_r>
 8007b00:	3001      	adds	r0, #1
 8007b02:	d0d7      	beq.n	8007ab4 <_puts_r+0x38>
 8007b04:	250a      	movs	r5, #10
 8007b06:	e7d7      	b.n	8007ab8 <_puts_r+0x3c>
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f002 fb49 	bl	800a1a2 <__swbuf_r>
 8007b10:	3001      	adds	r0, #1
 8007b12:	d1e7      	bne.n	8007ae4 <_puts_r+0x68>
 8007b14:	e7ce      	b.n	8007ab4 <_puts_r+0x38>
 8007b16:	3e01      	subs	r6, #1
 8007b18:	e7e4      	b.n	8007ae4 <_puts_r+0x68>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	6022      	str	r2, [r4, #0]
 8007b20:	220a      	movs	r2, #10
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	e7ee      	b.n	8007b04 <_puts_r+0x88>
	...

08007b28 <puts>:
 8007b28:	4b02      	ldr	r3, [pc, #8]	@ (8007b34 <puts+0xc>)
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	f7ff bfa5 	b.w	8007a7c <_puts_r>
 8007b32:	bf00      	nop
 8007b34:	20000184 	.word	0x20000184

08007b38 <strncmp>:
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	b16a      	cbz	r2, 8007b58 <strncmp+0x20>
 8007b3c:	3901      	subs	r1, #1
 8007b3e:	1884      	adds	r4, r0, r2
 8007b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d103      	bne.n	8007b54 <strncmp+0x1c>
 8007b4c:	42a0      	cmp	r0, r4
 8007b4e:	d001      	beq.n	8007b54 <strncmp+0x1c>
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	d1f5      	bne.n	8007b40 <strncmp+0x8>
 8007b54:	1ad0      	subs	r0, r2, r3
 8007b56:	bd10      	pop	{r4, pc}
 8007b58:	4610      	mov	r0, r2
 8007b5a:	e7fc      	b.n	8007b56 <strncmp+0x1e>

08007b5c <strstr>:
 8007b5c:	780a      	ldrb	r2, [r1, #0]
 8007b5e:	b570      	push	{r4, r5, r6, lr}
 8007b60:	b96a      	cbnz	r2, 8007b7e <strstr+0x22>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d109      	bne.n	8007b7c <strstr+0x20>
 8007b68:	460c      	mov	r4, r1
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f6      	beq.n	8007b62 <strstr+0x6>
 8007b74:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007b78:	429e      	cmp	r6, r3
 8007b7a:	d0f7      	beq.n	8007b6c <strstr+0x10>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	7803      	ldrb	r3, [r0, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1ef      	bne.n	8007b64 <strstr+0x8>
 8007b84:	4618      	mov	r0, r3
 8007b86:	e7ec      	b.n	8007b62 <strstr+0x6>

08007b88 <memset>:
 8007b88:	4402      	add	r2, r0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d100      	bne.n	8007b92 <memset+0xa>
 8007b90:	4770      	bx	lr
 8007b92:	f803 1b01 	strb.w	r1, [r3], #1
 8007b96:	e7f9      	b.n	8007b8c <memset+0x4>

08007b98 <_localeconv_r>:
 8007b98:	4800      	ldr	r0, [pc, #0]	@ (8007b9c <_localeconv_r+0x4>)
 8007b9a:	4770      	bx	lr
 8007b9c:	20000108 	.word	0x20000108

08007ba0 <__errno>:
 8007ba0:	4b01      	ldr	r3, [pc, #4]	@ (8007ba8 <__errno+0x8>)
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20000184 	.word	0x20000184

08007bac <__libc_init_array>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4d0d      	ldr	r5, [pc, #52]	@ (8007be4 <__libc_init_array+0x38>)
 8007bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8007be8 <__libc_init_array+0x3c>)
 8007bb2:	1b64      	subs	r4, r4, r5
 8007bb4:	10a4      	asrs	r4, r4, #2
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	42a6      	cmp	r6, r4
 8007bba:	d109      	bne.n	8007bd0 <__libc_init_array+0x24>
 8007bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007bec <__libc_init_array+0x40>)
 8007bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007bf0 <__libc_init_array+0x44>)
 8007bc0:	f002 fd68 	bl	800a694 <_init>
 8007bc4:	1b64      	subs	r4, r4, r5
 8007bc6:	10a4      	asrs	r4, r4, #2
 8007bc8:	2600      	movs	r6, #0
 8007bca:	42a6      	cmp	r6, r4
 8007bcc:	d105      	bne.n	8007bda <__libc_init_array+0x2e>
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd4:	4798      	blx	r3
 8007bd6:	3601      	adds	r6, #1
 8007bd8:	e7ee      	b.n	8007bb8 <__libc_init_array+0xc>
 8007bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bde:	4798      	blx	r3
 8007be0:	3601      	adds	r6, #1
 8007be2:	e7f2      	b.n	8007bca <__libc_init_array+0x1e>
 8007be4:	0800ac34 	.word	0x0800ac34
 8007be8:	0800ac34 	.word	0x0800ac34
 8007bec:	0800ac34 	.word	0x0800ac34
 8007bf0:	0800ac38 	.word	0x0800ac38

08007bf4 <__retarget_lock_init_recursive>:
 8007bf4:	4770      	bx	lr

08007bf6 <__retarget_lock_acquire_recursive>:
 8007bf6:	4770      	bx	lr

08007bf8 <__retarget_lock_release_recursive>:
 8007bf8:	4770      	bx	lr

08007bfa <memcpy>:
 8007bfa:	440a      	add	r2, r1
 8007bfc:	4291      	cmp	r1, r2
 8007bfe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007c02:	d100      	bne.n	8007c06 <memcpy+0xc>
 8007c04:	4770      	bx	lr
 8007c06:	b510      	push	{r4, lr}
 8007c08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c10:	4291      	cmp	r1, r2
 8007c12:	d1f9      	bne.n	8007c08 <memcpy+0xe>
 8007c14:	bd10      	pop	{r4, pc}
	...

08007c18 <nan>:
 8007c18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007c20 <nan+0x8>
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	00000000 	.word	0x00000000
 8007c24:	7ff80000 	.word	0x7ff80000

08007c28 <nanf>:
 8007c28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007c30 <nanf+0x8>
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	7fc00000 	.word	0x7fc00000

08007c34 <quorem>:
 8007c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c38:	6903      	ldr	r3, [r0, #16]
 8007c3a:	690c      	ldr	r4, [r1, #16]
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	4607      	mov	r7, r0
 8007c40:	db7e      	blt.n	8007d40 <quorem+0x10c>
 8007c42:	3c01      	subs	r4, #1
 8007c44:	f101 0814 	add.w	r8, r1, #20
 8007c48:	00a3      	lsls	r3, r4, #2
 8007c4a:	f100 0514 	add.w	r5, r0, #20
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	429a      	cmp	r2, r3
 8007c62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c66:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c6a:	d32e      	bcc.n	8007cca <quorem+0x96>
 8007c6c:	f04f 0a00 	mov.w	sl, #0
 8007c70:	46c4      	mov	ip, r8
 8007c72:	46ae      	mov	lr, r5
 8007c74:	46d3      	mov	fp, sl
 8007c76:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c7a:	b298      	uxth	r0, r3
 8007c7c:	fb06 a000 	mla	r0, r6, r0, sl
 8007c80:	0c02      	lsrs	r2, r0, #16
 8007c82:	0c1b      	lsrs	r3, r3, #16
 8007c84:	fb06 2303 	mla	r3, r6, r3, r2
 8007c88:	f8de 2000 	ldr.w	r2, [lr]
 8007c8c:	b280      	uxth	r0, r0
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	1a12      	subs	r2, r2, r0
 8007c92:	445a      	add	r2, fp
 8007c94:	f8de 0000 	ldr.w	r0, [lr]
 8007c98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ca2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ca6:	b292      	uxth	r2, r2
 8007ca8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cac:	45e1      	cmp	r9, ip
 8007cae:	f84e 2b04 	str.w	r2, [lr], #4
 8007cb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007cb6:	d2de      	bcs.n	8007c76 <quorem+0x42>
 8007cb8:	9b00      	ldr	r3, [sp, #0]
 8007cba:	58eb      	ldr	r3, [r5, r3]
 8007cbc:	b92b      	cbnz	r3, 8007cca <quorem+0x96>
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	3b04      	subs	r3, #4
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	d32f      	bcc.n	8007d28 <quorem+0xf4>
 8007cc8:	613c      	str	r4, [r7, #16]
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f002 f80a 	bl	8009ce4 <__mcmp>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	db25      	blt.n	8007d20 <quorem+0xec>
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cdc:	f8d1 c000 	ldr.w	ip, [r1]
 8007ce0:	fa1f fe82 	uxth.w	lr, r2
 8007ce4:	fa1f f38c 	uxth.w	r3, ip
 8007ce8:	eba3 030e 	sub.w	r3, r3, lr
 8007cec:	4403      	add	r3, r0
 8007cee:	0c12      	lsrs	r2, r2, #16
 8007cf0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007cf4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cfe:	45c1      	cmp	r9, r8
 8007d00:	f841 3b04 	str.w	r3, [r1], #4
 8007d04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d08:	d2e6      	bcs.n	8007cd8 <quorem+0xa4>
 8007d0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d12:	b922      	cbnz	r2, 8007d1e <quorem+0xea>
 8007d14:	3b04      	subs	r3, #4
 8007d16:	429d      	cmp	r5, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	d30b      	bcc.n	8007d34 <quorem+0x100>
 8007d1c:	613c      	str	r4, [r7, #16]
 8007d1e:	3601      	adds	r6, #1
 8007d20:	4630      	mov	r0, r6
 8007d22:	b003      	add	sp, #12
 8007d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d28:	6812      	ldr	r2, [r2, #0]
 8007d2a:	3b04      	subs	r3, #4
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d1cb      	bne.n	8007cc8 <quorem+0x94>
 8007d30:	3c01      	subs	r4, #1
 8007d32:	e7c6      	b.n	8007cc2 <quorem+0x8e>
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	3b04      	subs	r3, #4
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	d1ef      	bne.n	8007d1c <quorem+0xe8>
 8007d3c:	3c01      	subs	r4, #1
 8007d3e:	e7ea      	b.n	8007d16 <quorem+0xe2>
 8007d40:	2000      	movs	r0, #0
 8007d42:	e7ee      	b.n	8007d22 <quorem+0xee>
 8007d44:	0000      	movs	r0, r0
	...

08007d48 <_dtoa_r>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	69c7      	ldr	r7, [r0, #28]
 8007d4e:	b099      	sub	sp, #100	@ 0x64
 8007d50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d54:	ec55 4b10 	vmov	r4, r5, d0
 8007d58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007d5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d5c:	4683      	mov	fp, r0
 8007d5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d62:	b97f      	cbnz	r7, 8007d84 <_dtoa_r+0x3c>
 8007d64:	2010      	movs	r0, #16
 8007d66:	f001 fb85 	bl	8009474 <malloc>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007d70:	b920      	cbnz	r0, 8007d7c <_dtoa_r+0x34>
 8007d72:	4ba7      	ldr	r3, [pc, #668]	@ (8008010 <_dtoa_r+0x2c8>)
 8007d74:	21ef      	movs	r1, #239	@ 0xef
 8007d76:	48a7      	ldr	r0, [pc, #668]	@ (8008014 <_dtoa_r+0x2cc>)
 8007d78:	f002 fbaa 	bl	800a4d0 <__assert_func>
 8007d7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d80:	6007      	str	r7, [r0, #0]
 8007d82:	60c7      	str	r7, [r0, #12]
 8007d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d88:	6819      	ldr	r1, [r3, #0]
 8007d8a:	b159      	cbz	r1, 8007da4 <_dtoa_r+0x5c>
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	604a      	str	r2, [r1, #4]
 8007d90:	2301      	movs	r3, #1
 8007d92:	4093      	lsls	r3, r2
 8007d94:	608b      	str	r3, [r1, #8]
 8007d96:	4658      	mov	r0, fp
 8007d98:	f001 fd20 	bl	80097dc <_Bfree>
 8007d9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	1e2b      	subs	r3, r5, #0
 8007da6:	bfb9      	ittee	lt
 8007da8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007dac:	9303      	strlt	r3, [sp, #12]
 8007dae:	2300      	movge	r3, #0
 8007db0:	6033      	strge	r3, [r6, #0]
 8007db2:	9f03      	ldr	r7, [sp, #12]
 8007db4:	4b98      	ldr	r3, [pc, #608]	@ (8008018 <_dtoa_r+0x2d0>)
 8007db6:	bfbc      	itt	lt
 8007db8:	2201      	movlt	r2, #1
 8007dba:	6032      	strlt	r2, [r6, #0]
 8007dbc:	43bb      	bics	r3, r7
 8007dbe:	d112      	bne.n	8007de6 <_dtoa_r+0x9e>
 8007dc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007dc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dcc:	4323      	orrs	r3, r4
 8007dce:	f000 854d 	beq.w	800886c <_dtoa_r+0xb24>
 8007dd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800802c <_dtoa_r+0x2e4>
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 854f 	beq.w	800887c <_dtoa_r+0xb34>
 8007dde:	f10a 0303 	add.w	r3, sl, #3
 8007de2:	f000 bd49 	b.w	8008878 <_dtoa_r+0xb30>
 8007de6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	ec51 0b17 	vmov	r0, r1, d7
 8007df0:	2300      	movs	r3, #0
 8007df2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007df6:	f7f8 fe8f 	bl	8000b18 <__aeabi_dcmpeq>
 8007dfa:	4680      	mov	r8, r0
 8007dfc:	b158      	cbz	r0, 8007e16 <_dtoa_r+0xce>
 8007dfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e00:	2301      	movs	r3, #1
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e06:	b113      	cbz	r3, 8007e0e <_dtoa_r+0xc6>
 8007e08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e0a:	4b84      	ldr	r3, [pc, #528]	@ (800801c <_dtoa_r+0x2d4>)
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008030 <_dtoa_r+0x2e8>
 8007e12:	f000 bd33 	b.w	800887c <_dtoa_r+0xb34>
 8007e16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007e1a:	aa16      	add	r2, sp, #88	@ 0x58
 8007e1c:	a917      	add	r1, sp, #92	@ 0x5c
 8007e1e:	4658      	mov	r0, fp
 8007e20:	f002 f880 	bl	8009f24 <__d2b>
 8007e24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007e28:	4681      	mov	r9, r0
 8007e2a:	2e00      	cmp	r6, #0
 8007e2c:	d077      	beq.n	8007f1e <_dtoa_r+0x1d6>
 8007e2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e48:	4619      	mov	r1, r3
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	4b74      	ldr	r3, [pc, #464]	@ (8008020 <_dtoa_r+0x2d8>)
 8007e4e:	f7f8 fa43 	bl	80002d8 <__aeabi_dsub>
 8007e52:	a369      	add	r3, pc, #420	@ (adr r3, 8007ff8 <_dtoa_r+0x2b0>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fbf6 	bl	8000648 <__aeabi_dmul>
 8007e5c:	a368      	add	r3, pc, #416	@ (adr r3, 8008000 <_dtoa_r+0x2b8>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fa3b 	bl	80002dc <__adddf3>
 8007e66:	4604      	mov	r4, r0
 8007e68:	4630      	mov	r0, r6
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	f7f8 fb82 	bl	8000574 <__aeabi_i2d>
 8007e70:	a365      	add	r3, pc, #404	@ (adr r3, 8008008 <_dtoa_r+0x2c0>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fbe7 	bl	8000648 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 fa2b 	bl	80002dc <__adddf3>
 8007e86:	4604      	mov	r4, r0
 8007e88:	460d      	mov	r5, r1
 8007e8a:	f7f8 fe8d 	bl	8000ba8 <__aeabi_d2iz>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4607      	mov	r7, r0
 8007e92:	2300      	movs	r3, #0
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fe48 	bl	8000b2c <__aeabi_dcmplt>
 8007e9c:	b140      	cbz	r0, 8007eb0 <_dtoa_r+0x168>
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7f8 fb68 	bl	8000574 <__aeabi_i2d>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	f7f8 fe36 	bl	8000b18 <__aeabi_dcmpeq>
 8007eac:	b900      	cbnz	r0, 8007eb0 <_dtoa_r+0x168>
 8007eae:	3f01      	subs	r7, #1
 8007eb0:	2f16      	cmp	r7, #22
 8007eb2:	d851      	bhi.n	8007f58 <_dtoa_r+0x210>
 8007eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8008024 <_dtoa_r+0x2dc>)
 8007eb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ec2:	f7f8 fe33 	bl	8000b2c <__aeabi_dcmplt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d048      	beq.n	8007f5c <_dtoa_r+0x214>
 8007eca:	3f01      	subs	r7, #1
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ed0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ed2:	1b9b      	subs	r3, r3, r6
 8007ed4:	1e5a      	subs	r2, r3, #1
 8007ed6:	bf44      	itt	mi
 8007ed8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007edc:	2300      	movmi	r3, #0
 8007ede:	9208      	str	r2, [sp, #32]
 8007ee0:	bf54      	ite	pl
 8007ee2:	f04f 0800 	movpl.w	r8, #0
 8007ee6:	9308      	strmi	r3, [sp, #32]
 8007ee8:	2f00      	cmp	r7, #0
 8007eea:	db39      	blt.n	8007f60 <_dtoa_r+0x218>
 8007eec:	9b08      	ldr	r3, [sp, #32]
 8007eee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ef0:	443b      	add	r3, r7
 8007ef2:	9308      	str	r3, [sp, #32]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007efa:	2b09      	cmp	r3, #9
 8007efc:	d864      	bhi.n	8007fc8 <_dtoa_r+0x280>
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	bfc4      	itt	gt
 8007f02:	3b04      	subgt	r3, #4
 8007f04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f08:	f1a3 0302 	sub.w	r3, r3, #2
 8007f0c:	bfcc      	ite	gt
 8007f0e:	2400      	movgt	r4, #0
 8007f10:	2401      	movle	r4, #1
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d863      	bhi.n	8007fde <_dtoa_r+0x296>
 8007f16:	e8df f003 	tbb	[pc, r3]
 8007f1a:	372a      	.short	0x372a
 8007f1c:	5535      	.short	0x5535
 8007f1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007f22:	441e      	add	r6, r3
 8007f24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	bfc1      	itttt	gt
 8007f2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f30:	409f      	lslgt	r7, r3
 8007f32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f3a:	bfd6      	itet	le
 8007f3c:	f1c3 0320 	rsble	r3, r3, #32
 8007f40:	ea47 0003 	orrgt.w	r0, r7, r3
 8007f44:	fa04 f003 	lslle.w	r0, r4, r3
 8007f48:	f7f8 fb04 	bl	8000554 <__aeabi_ui2d>
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f52:	3e01      	subs	r6, #1
 8007f54:	9214      	str	r2, [sp, #80]	@ 0x50
 8007f56:	e777      	b.n	8007e48 <_dtoa_r+0x100>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7b8      	b.n	8007ece <_dtoa_r+0x186>
 8007f5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007f5e:	e7b7      	b.n	8007ed0 <_dtoa_r+0x188>
 8007f60:	427b      	negs	r3, r7
 8007f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f64:	2300      	movs	r3, #0
 8007f66:	eba8 0807 	sub.w	r8, r8, r7
 8007f6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f6c:	e7c4      	b.n	8007ef8 <_dtoa_r+0x1b0>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dc35      	bgt.n	8007fe4 <_dtoa_r+0x29c>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f82:	e00b      	b.n	8007f9c <_dtoa_r+0x254>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e7f3      	b.n	8007f70 <_dtoa_r+0x228>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f8e:	18fb      	adds	r3, r7, r3
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	3301      	adds	r3, #1
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	9307      	str	r3, [sp, #28]
 8007f98:	bfb8      	it	lt
 8007f9a:	2301      	movlt	r3, #1
 8007f9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	f102 0514 	add.w	r5, r2, #20
 8007fa8:	429d      	cmp	r5, r3
 8007faa:	d91f      	bls.n	8007fec <_dtoa_r+0x2a4>
 8007fac:	6041      	str	r1, [r0, #4]
 8007fae:	4658      	mov	r0, fp
 8007fb0:	f001 fbd4 	bl	800975c <_Balloc>
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d13c      	bne.n	8008034 <_dtoa_r+0x2ec>
 8007fba:	4b1b      	ldr	r3, [pc, #108]	@ (8008028 <_dtoa_r+0x2e0>)
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007fc2:	e6d8      	b.n	8007d76 <_dtoa_r+0x2e>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e7e0      	b.n	8007f8a <_dtoa_r+0x242>
 8007fc8:	2401      	movs	r4, #1
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	9307      	str	r3, [sp, #28]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2312      	movs	r3, #18
 8007fdc:	e7d0      	b.n	8007f80 <_dtoa_r+0x238>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fe2:	e7f5      	b.n	8007fd0 <_dtoa_r+0x288>
 8007fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	e7d7      	b.n	8007f9c <_dtoa_r+0x254>
 8007fec:	3101      	adds	r1, #1
 8007fee:	0052      	lsls	r2, r2, #1
 8007ff0:	e7d8      	b.n	8007fa4 <_dtoa_r+0x25c>
 8007ff2:	bf00      	nop
 8007ff4:	f3af 8000 	nop.w
 8007ff8:	636f4361 	.word	0x636f4361
 8007ffc:	3fd287a7 	.word	0x3fd287a7
 8008000:	8b60c8b3 	.word	0x8b60c8b3
 8008004:	3fc68a28 	.word	0x3fc68a28
 8008008:	509f79fb 	.word	0x509f79fb
 800800c:	3fd34413 	.word	0x3fd34413
 8008010:	0800a9a6 	.word	0x0800a9a6
 8008014:	0800a9bd 	.word	0x0800a9bd
 8008018:	7ff00000 	.word	0x7ff00000
 800801c:	0800a815 	.word	0x0800a815
 8008020:	3ff80000 	.word	0x3ff80000
 8008024:	0800ab28 	.word	0x0800ab28
 8008028:	0800aa15 	.word	0x0800aa15
 800802c:	0800a9a2 	.word	0x0800a9a2
 8008030:	0800a814 	.word	0x0800a814
 8008034:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008038:	6018      	str	r0, [r3, #0]
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b0e      	cmp	r3, #14
 800803e:	f200 80a4 	bhi.w	800818a <_dtoa_r+0x442>
 8008042:	2c00      	cmp	r4, #0
 8008044:	f000 80a1 	beq.w	800818a <_dtoa_r+0x442>
 8008048:	2f00      	cmp	r7, #0
 800804a:	dd33      	ble.n	80080b4 <_dtoa_r+0x36c>
 800804c:	4bad      	ldr	r3, [pc, #692]	@ (8008304 <_dtoa_r+0x5bc>)
 800804e:	f007 020f 	and.w	r2, r7, #15
 8008052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008056:	ed93 7b00 	vldr	d7, [r3]
 800805a:	05f8      	lsls	r0, r7, #23
 800805c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008060:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008064:	d516      	bpl.n	8008094 <_dtoa_r+0x34c>
 8008066:	4ba8      	ldr	r3, [pc, #672]	@ (8008308 <_dtoa_r+0x5c0>)
 8008068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800806c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008070:	f7f8 fc14 	bl	800089c <__aeabi_ddiv>
 8008074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008078:	f004 040f 	and.w	r4, r4, #15
 800807c:	2603      	movs	r6, #3
 800807e:	4da2      	ldr	r5, [pc, #648]	@ (8008308 <_dtoa_r+0x5c0>)
 8008080:	b954      	cbnz	r4, 8008098 <_dtoa_r+0x350>
 8008082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800808a:	f7f8 fc07 	bl	800089c <__aeabi_ddiv>
 800808e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008092:	e028      	b.n	80080e6 <_dtoa_r+0x39e>
 8008094:	2602      	movs	r6, #2
 8008096:	e7f2      	b.n	800807e <_dtoa_r+0x336>
 8008098:	07e1      	lsls	r1, r4, #31
 800809a:	d508      	bpl.n	80080ae <_dtoa_r+0x366>
 800809c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080a4:	f7f8 fad0 	bl	8000648 <__aeabi_dmul>
 80080a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080ac:	3601      	adds	r6, #1
 80080ae:	1064      	asrs	r4, r4, #1
 80080b0:	3508      	adds	r5, #8
 80080b2:	e7e5      	b.n	8008080 <_dtoa_r+0x338>
 80080b4:	f000 80d2 	beq.w	800825c <_dtoa_r+0x514>
 80080b8:	427c      	negs	r4, r7
 80080ba:	4b92      	ldr	r3, [pc, #584]	@ (8008304 <_dtoa_r+0x5bc>)
 80080bc:	4d92      	ldr	r5, [pc, #584]	@ (8008308 <_dtoa_r+0x5c0>)
 80080be:	f004 020f 	and.w	r2, r4, #15
 80080c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080ce:	f7f8 fabb 	bl	8000648 <__aeabi_dmul>
 80080d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d6:	1124      	asrs	r4, r4, #4
 80080d8:	2300      	movs	r3, #0
 80080da:	2602      	movs	r6, #2
 80080dc:	2c00      	cmp	r4, #0
 80080de:	f040 80b2 	bne.w	8008246 <_dtoa_r+0x4fe>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1d3      	bne.n	800808e <_dtoa_r+0x346>
 80080e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80b7 	beq.w	8008260 <_dtoa_r+0x518>
 80080f2:	4b86      	ldr	r3, [pc, #536]	@ (800830c <_dtoa_r+0x5c4>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 fd17 	bl	8000b2c <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f000 80ae 	beq.w	8008260 <_dtoa_r+0x518>
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80aa 	beq.w	8008260 <_dtoa_r+0x518>
 800810c:	9b00      	ldr	r3, [sp, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	dd37      	ble.n	8008182 <_dtoa_r+0x43a>
 8008112:	1e7b      	subs	r3, r7, #1
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	4620      	mov	r0, r4
 8008118:	4b7d      	ldr	r3, [pc, #500]	@ (8008310 <_dtoa_r+0x5c8>)
 800811a:	2200      	movs	r2, #0
 800811c:	4629      	mov	r1, r5
 800811e:	f7f8 fa93 	bl	8000648 <__aeabi_dmul>
 8008122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008126:	9c00      	ldr	r4, [sp, #0]
 8008128:	3601      	adds	r6, #1
 800812a:	4630      	mov	r0, r6
 800812c:	f7f8 fa22 	bl	8000574 <__aeabi_i2d>
 8008130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008134:	f7f8 fa88 	bl	8000648 <__aeabi_dmul>
 8008138:	4b76      	ldr	r3, [pc, #472]	@ (8008314 <_dtoa_r+0x5cc>)
 800813a:	2200      	movs	r2, #0
 800813c:	f7f8 f8ce 	bl	80002dc <__adddf3>
 8008140:	4605      	mov	r5, r0
 8008142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008146:	2c00      	cmp	r4, #0
 8008148:	f040 808d 	bne.w	8008266 <_dtoa_r+0x51e>
 800814c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008150:	4b71      	ldr	r3, [pc, #452]	@ (8008318 <_dtoa_r+0x5d0>)
 8008152:	2200      	movs	r2, #0
 8008154:	f7f8 f8c0 	bl	80002d8 <__aeabi_dsub>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008160:	462a      	mov	r2, r5
 8008162:	4633      	mov	r3, r6
 8008164:	f7f8 fd00 	bl	8000b68 <__aeabi_dcmpgt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f040 828b 	bne.w	8008684 <_dtoa_r+0x93c>
 800816e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008172:	462a      	mov	r2, r5
 8008174:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008178:	f7f8 fcd8 	bl	8000b2c <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	f040 8128 	bne.w	80083d2 <_dtoa_r+0x68a>
 8008182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800818a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800818c:	2b00      	cmp	r3, #0
 800818e:	f2c0 815a 	blt.w	8008446 <_dtoa_r+0x6fe>
 8008192:	2f0e      	cmp	r7, #14
 8008194:	f300 8157 	bgt.w	8008446 <_dtoa_r+0x6fe>
 8008198:	4b5a      	ldr	r3, [pc, #360]	@ (8008304 <_dtoa_r+0x5bc>)
 800819a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800819e:	ed93 7b00 	vldr	d7, [r3]
 80081a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	ed8d 7b00 	vstr	d7, [sp]
 80081aa:	da03      	bge.n	80081b4 <_dtoa_r+0x46c>
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f340 8101 	ble.w	80083b6 <_dtoa_r+0x66e>
 80081b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80081b8:	4656      	mov	r6, sl
 80081ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081be:	4620      	mov	r0, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	f7f8 fb6b 	bl	800089c <__aeabi_ddiv>
 80081c6:	f7f8 fcef 	bl	8000ba8 <__aeabi_d2iz>
 80081ca:	4680      	mov	r8, r0
 80081cc:	f7f8 f9d2 	bl	8000574 <__aeabi_i2d>
 80081d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d4:	f7f8 fa38 	bl	8000648 <__aeabi_dmul>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081e4:	f7f8 f878 	bl	80002d8 <__aeabi_dsub>
 80081e8:	f806 4b01 	strb.w	r4, [r6], #1
 80081ec:	9d07      	ldr	r5, [sp, #28]
 80081ee:	eba6 040a 	sub.w	r4, r6, sl
 80081f2:	42a5      	cmp	r5, r4
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	f040 8117 	bne.w	800842a <_dtoa_r+0x6e2>
 80081fc:	f7f8 f86e 	bl	80002dc <__adddf3>
 8008200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008204:	4604      	mov	r4, r0
 8008206:	460d      	mov	r5, r1
 8008208:	f7f8 fcae 	bl	8000b68 <__aeabi_dcmpgt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f040 80f9 	bne.w	8008404 <_dtoa_r+0x6bc>
 8008212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	f7f8 fc7d 	bl	8000b18 <__aeabi_dcmpeq>
 800821e:	b118      	cbz	r0, 8008228 <_dtoa_r+0x4e0>
 8008220:	f018 0f01 	tst.w	r8, #1
 8008224:	f040 80ee 	bne.w	8008404 <_dtoa_r+0x6bc>
 8008228:	4649      	mov	r1, r9
 800822a:	4658      	mov	r0, fp
 800822c:	f001 fad6 	bl	80097dc <_Bfree>
 8008230:	2300      	movs	r3, #0
 8008232:	7033      	strb	r3, [r6, #0]
 8008234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008236:	3701      	adds	r7, #1
 8008238:	601f      	str	r7, [r3, #0]
 800823a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 831d 	beq.w	800887c <_dtoa_r+0xb34>
 8008242:	601e      	str	r6, [r3, #0]
 8008244:	e31a      	b.n	800887c <_dtoa_r+0xb34>
 8008246:	07e2      	lsls	r2, r4, #31
 8008248:	d505      	bpl.n	8008256 <_dtoa_r+0x50e>
 800824a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800824e:	f7f8 f9fb 	bl	8000648 <__aeabi_dmul>
 8008252:	3601      	adds	r6, #1
 8008254:	2301      	movs	r3, #1
 8008256:	1064      	asrs	r4, r4, #1
 8008258:	3508      	adds	r5, #8
 800825a:	e73f      	b.n	80080dc <_dtoa_r+0x394>
 800825c:	2602      	movs	r6, #2
 800825e:	e742      	b.n	80080e6 <_dtoa_r+0x39e>
 8008260:	9c07      	ldr	r4, [sp, #28]
 8008262:	9704      	str	r7, [sp, #16]
 8008264:	e761      	b.n	800812a <_dtoa_r+0x3e2>
 8008266:	4b27      	ldr	r3, [pc, #156]	@ (8008304 <_dtoa_r+0x5bc>)
 8008268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800826a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800826e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008272:	4454      	add	r4, sl
 8008274:	2900      	cmp	r1, #0
 8008276:	d053      	beq.n	8008320 <_dtoa_r+0x5d8>
 8008278:	4928      	ldr	r1, [pc, #160]	@ (800831c <_dtoa_r+0x5d4>)
 800827a:	2000      	movs	r0, #0
 800827c:	f7f8 fb0e 	bl	800089c <__aeabi_ddiv>
 8008280:	4633      	mov	r3, r6
 8008282:	462a      	mov	r2, r5
 8008284:	f7f8 f828 	bl	80002d8 <__aeabi_dsub>
 8008288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800828c:	4656      	mov	r6, sl
 800828e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008292:	f7f8 fc89 	bl	8000ba8 <__aeabi_d2iz>
 8008296:	4605      	mov	r5, r0
 8008298:	f7f8 f96c 	bl	8000574 <__aeabi_i2d>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a4:	f7f8 f818 	bl	80002d8 <__aeabi_dsub>
 80082a8:	3530      	adds	r5, #48	@ 0x30
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082b2:	f806 5b01 	strb.w	r5, [r6], #1
 80082b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082ba:	f7f8 fc37 	bl	8000b2c <__aeabi_dcmplt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d171      	bne.n	80083a6 <_dtoa_r+0x65e>
 80082c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082c6:	4911      	ldr	r1, [pc, #68]	@ (800830c <_dtoa_r+0x5c4>)
 80082c8:	2000      	movs	r0, #0
 80082ca:	f7f8 f805 	bl	80002d8 <__aeabi_dsub>
 80082ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082d2:	f7f8 fc2b 	bl	8000b2c <__aeabi_dcmplt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f040 8095 	bne.w	8008406 <_dtoa_r+0x6be>
 80082dc:	42a6      	cmp	r6, r4
 80082de:	f43f af50 	beq.w	8008182 <_dtoa_r+0x43a>
 80082e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <_dtoa_r+0x5c8>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	f7f8 f9ad 	bl	8000648 <__aeabi_dmul>
 80082ee:	4b08      	ldr	r3, [pc, #32]	@ (8008310 <_dtoa_r+0x5c8>)
 80082f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082f4:	2200      	movs	r2, #0
 80082f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082fa:	f7f8 f9a5 	bl	8000648 <__aeabi_dmul>
 80082fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008302:	e7c4      	b.n	800828e <_dtoa_r+0x546>
 8008304:	0800ab28 	.word	0x0800ab28
 8008308:	0800ab00 	.word	0x0800ab00
 800830c:	3ff00000 	.word	0x3ff00000
 8008310:	40240000 	.word	0x40240000
 8008314:	401c0000 	.word	0x401c0000
 8008318:	40140000 	.word	0x40140000
 800831c:	3fe00000 	.word	0x3fe00000
 8008320:	4631      	mov	r1, r6
 8008322:	4628      	mov	r0, r5
 8008324:	f7f8 f990 	bl	8000648 <__aeabi_dmul>
 8008328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800832c:	9415      	str	r4, [sp, #84]	@ 0x54
 800832e:	4656      	mov	r6, sl
 8008330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008334:	f7f8 fc38 	bl	8000ba8 <__aeabi_d2iz>
 8008338:	4605      	mov	r5, r0
 800833a:	f7f8 f91b 	bl	8000574 <__aeabi_i2d>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008346:	f7f7 ffc7 	bl	80002d8 <__aeabi_dsub>
 800834a:	3530      	adds	r5, #48	@ 0x30
 800834c:	f806 5b01 	strb.w	r5, [r6], #1
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	42a6      	cmp	r6, r4
 8008356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	d124      	bne.n	80083aa <_dtoa_r+0x662>
 8008360:	4bac      	ldr	r3, [pc, #688]	@ (8008614 <_dtoa_r+0x8cc>)
 8008362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008366:	f7f7 ffb9 	bl	80002dc <__adddf3>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008372:	f7f8 fbf9 	bl	8000b68 <__aeabi_dcmpgt>
 8008376:	2800      	cmp	r0, #0
 8008378:	d145      	bne.n	8008406 <_dtoa_r+0x6be>
 800837a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800837e:	49a5      	ldr	r1, [pc, #660]	@ (8008614 <_dtoa_r+0x8cc>)
 8008380:	2000      	movs	r0, #0
 8008382:	f7f7 ffa9 	bl	80002d8 <__aeabi_dsub>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838e:	f7f8 fbcd 	bl	8000b2c <__aeabi_dcmplt>
 8008392:	2800      	cmp	r0, #0
 8008394:	f43f aef5 	beq.w	8008182 <_dtoa_r+0x43a>
 8008398:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800839a:	1e73      	subs	r3, r6, #1
 800839c:	9315      	str	r3, [sp, #84]	@ 0x54
 800839e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083a2:	2b30      	cmp	r3, #48	@ 0x30
 80083a4:	d0f8      	beq.n	8008398 <_dtoa_r+0x650>
 80083a6:	9f04      	ldr	r7, [sp, #16]
 80083a8:	e73e      	b.n	8008228 <_dtoa_r+0x4e0>
 80083aa:	4b9b      	ldr	r3, [pc, #620]	@ (8008618 <_dtoa_r+0x8d0>)
 80083ac:	f7f8 f94c 	bl	8000648 <__aeabi_dmul>
 80083b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b4:	e7bc      	b.n	8008330 <_dtoa_r+0x5e8>
 80083b6:	d10c      	bne.n	80083d2 <_dtoa_r+0x68a>
 80083b8:	4b98      	ldr	r3, [pc, #608]	@ (800861c <_dtoa_r+0x8d4>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083c0:	f7f8 f942 	bl	8000648 <__aeabi_dmul>
 80083c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c8:	f7f8 fbc4 	bl	8000b54 <__aeabi_dcmpge>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f000 8157 	beq.w	8008680 <_dtoa_r+0x938>
 80083d2:	2400      	movs	r4, #0
 80083d4:	4625      	mov	r5, r4
 80083d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083d8:	43db      	mvns	r3, r3
 80083da:	9304      	str	r3, [sp, #16]
 80083dc:	4656      	mov	r6, sl
 80083de:	2700      	movs	r7, #0
 80083e0:	4621      	mov	r1, r4
 80083e2:	4658      	mov	r0, fp
 80083e4:	f001 f9fa 	bl	80097dc <_Bfree>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	d0dc      	beq.n	80083a6 <_dtoa_r+0x65e>
 80083ec:	b12f      	cbz	r7, 80083fa <_dtoa_r+0x6b2>
 80083ee:	42af      	cmp	r7, r5
 80083f0:	d003      	beq.n	80083fa <_dtoa_r+0x6b2>
 80083f2:	4639      	mov	r1, r7
 80083f4:	4658      	mov	r0, fp
 80083f6:	f001 f9f1 	bl	80097dc <_Bfree>
 80083fa:	4629      	mov	r1, r5
 80083fc:	4658      	mov	r0, fp
 80083fe:	f001 f9ed 	bl	80097dc <_Bfree>
 8008402:	e7d0      	b.n	80083a6 <_dtoa_r+0x65e>
 8008404:	9704      	str	r7, [sp, #16]
 8008406:	4633      	mov	r3, r6
 8008408:	461e      	mov	r6, r3
 800840a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800840e:	2a39      	cmp	r2, #57	@ 0x39
 8008410:	d107      	bne.n	8008422 <_dtoa_r+0x6da>
 8008412:	459a      	cmp	sl, r3
 8008414:	d1f8      	bne.n	8008408 <_dtoa_r+0x6c0>
 8008416:	9a04      	ldr	r2, [sp, #16]
 8008418:	3201      	adds	r2, #1
 800841a:	9204      	str	r2, [sp, #16]
 800841c:	2230      	movs	r2, #48	@ 0x30
 800841e:	f88a 2000 	strb.w	r2, [sl]
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	3201      	adds	r2, #1
 8008426:	701a      	strb	r2, [r3, #0]
 8008428:	e7bd      	b.n	80083a6 <_dtoa_r+0x65e>
 800842a:	4b7b      	ldr	r3, [pc, #492]	@ (8008618 <_dtoa_r+0x8d0>)
 800842c:	2200      	movs	r2, #0
 800842e:	f7f8 f90b 	bl	8000648 <__aeabi_dmul>
 8008432:	2200      	movs	r2, #0
 8008434:	2300      	movs	r3, #0
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
 800843a:	f7f8 fb6d 	bl	8000b18 <__aeabi_dcmpeq>
 800843e:	2800      	cmp	r0, #0
 8008440:	f43f aebb 	beq.w	80081ba <_dtoa_r+0x472>
 8008444:	e6f0      	b.n	8008228 <_dtoa_r+0x4e0>
 8008446:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008448:	2a00      	cmp	r2, #0
 800844a:	f000 80db 	beq.w	8008604 <_dtoa_r+0x8bc>
 800844e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008450:	2a01      	cmp	r2, #1
 8008452:	f300 80bf 	bgt.w	80085d4 <_dtoa_r+0x88c>
 8008456:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008458:	2a00      	cmp	r2, #0
 800845a:	f000 80b7 	beq.w	80085cc <_dtoa_r+0x884>
 800845e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008462:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008464:	4646      	mov	r6, r8
 8008466:	9a08      	ldr	r2, [sp, #32]
 8008468:	2101      	movs	r1, #1
 800846a:	441a      	add	r2, r3
 800846c:	4658      	mov	r0, fp
 800846e:	4498      	add	r8, r3
 8008470:	9208      	str	r2, [sp, #32]
 8008472:	f001 fab1 	bl	80099d8 <__i2b>
 8008476:	4605      	mov	r5, r0
 8008478:	b15e      	cbz	r6, 8008492 <_dtoa_r+0x74a>
 800847a:	9b08      	ldr	r3, [sp, #32]
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd08      	ble.n	8008492 <_dtoa_r+0x74a>
 8008480:	42b3      	cmp	r3, r6
 8008482:	9a08      	ldr	r2, [sp, #32]
 8008484:	bfa8      	it	ge
 8008486:	4633      	movge	r3, r6
 8008488:	eba8 0803 	sub.w	r8, r8, r3
 800848c:	1af6      	subs	r6, r6, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008494:	b1f3      	cbz	r3, 80084d4 <_dtoa_r+0x78c>
 8008496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 80b7 	beq.w	800860c <_dtoa_r+0x8c4>
 800849e:	b18c      	cbz	r4, 80084c4 <_dtoa_r+0x77c>
 80084a0:	4629      	mov	r1, r5
 80084a2:	4622      	mov	r2, r4
 80084a4:	4658      	mov	r0, fp
 80084a6:	f001 fb57 	bl	8009b58 <__pow5mult>
 80084aa:	464a      	mov	r2, r9
 80084ac:	4601      	mov	r1, r0
 80084ae:	4605      	mov	r5, r0
 80084b0:	4658      	mov	r0, fp
 80084b2:	f001 faa7 	bl	8009a04 <__multiply>
 80084b6:	4649      	mov	r1, r9
 80084b8:	9004      	str	r0, [sp, #16]
 80084ba:	4658      	mov	r0, fp
 80084bc:	f001 f98e 	bl	80097dc <_Bfree>
 80084c0:	9b04      	ldr	r3, [sp, #16]
 80084c2:	4699      	mov	r9, r3
 80084c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084c6:	1b1a      	subs	r2, r3, r4
 80084c8:	d004      	beq.n	80084d4 <_dtoa_r+0x78c>
 80084ca:	4649      	mov	r1, r9
 80084cc:	4658      	mov	r0, fp
 80084ce:	f001 fb43 	bl	8009b58 <__pow5mult>
 80084d2:	4681      	mov	r9, r0
 80084d4:	2101      	movs	r1, #1
 80084d6:	4658      	mov	r0, fp
 80084d8:	f001 fa7e 	bl	80099d8 <__i2b>
 80084dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084de:	4604      	mov	r4, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 81cf 	beq.w	8008884 <_dtoa_r+0xb3c>
 80084e6:	461a      	mov	r2, r3
 80084e8:	4601      	mov	r1, r0
 80084ea:	4658      	mov	r0, fp
 80084ec:	f001 fb34 	bl	8009b58 <__pow5mult>
 80084f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	4604      	mov	r4, r0
 80084f6:	f300 8095 	bgt.w	8008624 <_dtoa_r+0x8dc>
 80084fa:	9b02      	ldr	r3, [sp, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 8087 	bne.w	8008610 <_dtoa_r+0x8c8>
 8008502:	9b03      	ldr	r3, [sp, #12]
 8008504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008508:	2b00      	cmp	r3, #0
 800850a:	f040 8089 	bne.w	8008620 <_dtoa_r+0x8d8>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008514:	0d1b      	lsrs	r3, r3, #20
 8008516:	051b      	lsls	r3, r3, #20
 8008518:	b12b      	cbz	r3, 8008526 <_dtoa_r+0x7de>
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	3301      	adds	r3, #1
 800851e:	9308      	str	r3, [sp, #32]
 8008520:	f108 0801 	add.w	r8, r8, #1
 8008524:	2301      	movs	r3, #1
 8008526:	930a      	str	r3, [sp, #40]	@ 0x28
 8008528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 81b0 	beq.w	8008890 <_dtoa_r+0xb48>
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008536:	6918      	ldr	r0, [r3, #16]
 8008538:	f001 fa02 	bl	8009940 <__hi0bits>
 800853c:	f1c0 0020 	rsb	r0, r0, #32
 8008540:	9b08      	ldr	r3, [sp, #32]
 8008542:	4418      	add	r0, r3
 8008544:	f010 001f 	ands.w	r0, r0, #31
 8008548:	d077      	beq.n	800863a <_dtoa_r+0x8f2>
 800854a:	f1c0 0320 	rsb	r3, r0, #32
 800854e:	2b04      	cmp	r3, #4
 8008550:	dd6b      	ble.n	800862a <_dtoa_r+0x8e2>
 8008552:	9b08      	ldr	r3, [sp, #32]
 8008554:	f1c0 001c 	rsb	r0, r0, #28
 8008558:	4403      	add	r3, r0
 800855a:	4480      	add	r8, r0
 800855c:	4406      	add	r6, r0
 800855e:	9308      	str	r3, [sp, #32]
 8008560:	f1b8 0f00 	cmp.w	r8, #0
 8008564:	dd05      	ble.n	8008572 <_dtoa_r+0x82a>
 8008566:	4649      	mov	r1, r9
 8008568:	4642      	mov	r2, r8
 800856a:	4658      	mov	r0, fp
 800856c:	f001 fb4e 	bl	8009c0c <__lshift>
 8008570:	4681      	mov	r9, r0
 8008572:	9b08      	ldr	r3, [sp, #32]
 8008574:	2b00      	cmp	r3, #0
 8008576:	dd05      	ble.n	8008584 <_dtoa_r+0x83c>
 8008578:	4621      	mov	r1, r4
 800857a:	461a      	mov	r2, r3
 800857c:	4658      	mov	r0, fp
 800857e:	f001 fb45 	bl	8009c0c <__lshift>
 8008582:	4604      	mov	r4, r0
 8008584:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008586:	2b00      	cmp	r3, #0
 8008588:	d059      	beq.n	800863e <_dtoa_r+0x8f6>
 800858a:	4621      	mov	r1, r4
 800858c:	4648      	mov	r0, r9
 800858e:	f001 fba9 	bl	8009ce4 <__mcmp>
 8008592:	2800      	cmp	r0, #0
 8008594:	da53      	bge.n	800863e <_dtoa_r+0x8f6>
 8008596:	1e7b      	subs	r3, r7, #1
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	4649      	mov	r1, r9
 800859c:	2300      	movs	r3, #0
 800859e:	220a      	movs	r2, #10
 80085a0:	4658      	mov	r0, fp
 80085a2:	f001 f93d 	bl	8009820 <__multadd>
 80085a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a8:	4681      	mov	r9, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 8172 	beq.w	8008894 <_dtoa_r+0xb4c>
 80085b0:	2300      	movs	r3, #0
 80085b2:	4629      	mov	r1, r5
 80085b4:	220a      	movs	r2, #10
 80085b6:	4658      	mov	r0, fp
 80085b8:	f001 f932 	bl	8009820 <__multadd>
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	4605      	mov	r5, r0
 80085c2:	dc67      	bgt.n	8008694 <_dtoa_r+0x94c>
 80085c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dc41      	bgt.n	800864e <_dtoa_r+0x906>
 80085ca:	e063      	b.n	8008694 <_dtoa_r+0x94c>
 80085cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80085ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80085d2:	e746      	b.n	8008462 <_dtoa_r+0x71a>
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	1e5c      	subs	r4, r3, #1
 80085d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085da:	42a3      	cmp	r3, r4
 80085dc:	bfbf      	itttt	lt
 80085de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80085e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80085e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80085e4:	1ae3      	sublt	r3, r4, r3
 80085e6:	bfb4      	ite	lt
 80085e8:	18d2      	addlt	r2, r2, r3
 80085ea:	1b1c      	subge	r4, r3, r4
 80085ec:	9b07      	ldr	r3, [sp, #28]
 80085ee:	bfbc      	itt	lt
 80085f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80085f2:	2400      	movlt	r4, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bfb5      	itete	lt
 80085f8:	eba8 0603 	sublt.w	r6, r8, r3
 80085fc:	9b07      	ldrge	r3, [sp, #28]
 80085fe:	2300      	movlt	r3, #0
 8008600:	4646      	movge	r6, r8
 8008602:	e730      	b.n	8008466 <_dtoa_r+0x71e>
 8008604:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008606:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008608:	4646      	mov	r6, r8
 800860a:	e735      	b.n	8008478 <_dtoa_r+0x730>
 800860c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800860e:	e75c      	b.n	80084ca <_dtoa_r+0x782>
 8008610:	2300      	movs	r3, #0
 8008612:	e788      	b.n	8008526 <_dtoa_r+0x7de>
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	40240000 	.word	0x40240000
 800861c:	40140000 	.word	0x40140000
 8008620:	9b02      	ldr	r3, [sp, #8]
 8008622:	e780      	b.n	8008526 <_dtoa_r+0x7de>
 8008624:	2300      	movs	r3, #0
 8008626:	930a      	str	r3, [sp, #40]	@ 0x28
 8008628:	e782      	b.n	8008530 <_dtoa_r+0x7e8>
 800862a:	d099      	beq.n	8008560 <_dtoa_r+0x818>
 800862c:	9a08      	ldr	r2, [sp, #32]
 800862e:	331c      	adds	r3, #28
 8008630:	441a      	add	r2, r3
 8008632:	4498      	add	r8, r3
 8008634:	441e      	add	r6, r3
 8008636:	9208      	str	r2, [sp, #32]
 8008638:	e792      	b.n	8008560 <_dtoa_r+0x818>
 800863a:	4603      	mov	r3, r0
 800863c:	e7f6      	b.n	800862c <_dtoa_r+0x8e4>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	9704      	str	r7, [sp, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	dc20      	bgt.n	8008688 <_dtoa_r+0x940>
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864a:	2b02      	cmp	r3, #2
 800864c:	dd1e      	ble.n	800868c <_dtoa_r+0x944>
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f47f aec0 	bne.w	80083d6 <_dtoa_r+0x68e>
 8008656:	4621      	mov	r1, r4
 8008658:	2205      	movs	r2, #5
 800865a:	4658      	mov	r0, fp
 800865c:	f001 f8e0 	bl	8009820 <__multadd>
 8008660:	4601      	mov	r1, r0
 8008662:	4604      	mov	r4, r0
 8008664:	4648      	mov	r0, r9
 8008666:	f001 fb3d 	bl	8009ce4 <__mcmp>
 800866a:	2800      	cmp	r0, #0
 800866c:	f77f aeb3 	ble.w	80083d6 <_dtoa_r+0x68e>
 8008670:	4656      	mov	r6, sl
 8008672:	2331      	movs	r3, #49	@ 0x31
 8008674:	f806 3b01 	strb.w	r3, [r6], #1
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	3301      	adds	r3, #1
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	e6ae      	b.n	80083de <_dtoa_r+0x696>
 8008680:	9c07      	ldr	r4, [sp, #28]
 8008682:	9704      	str	r7, [sp, #16]
 8008684:	4625      	mov	r5, r4
 8008686:	e7f3      	b.n	8008670 <_dtoa_r+0x928>
 8008688:	9b07      	ldr	r3, [sp, #28]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 8104 	beq.w	800889c <_dtoa_r+0xb54>
 8008694:	2e00      	cmp	r6, #0
 8008696:	dd05      	ble.n	80086a4 <_dtoa_r+0x95c>
 8008698:	4629      	mov	r1, r5
 800869a:	4632      	mov	r2, r6
 800869c:	4658      	mov	r0, fp
 800869e:	f001 fab5 	bl	8009c0c <__lshift>
 80086a2:	4605      	mov	r5, r0
 80086a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d05a      	beq.n	8008760 <_dtoa_r+0xa18>
 80086aa:	6869      	ldr	r1, [r5, #4]
 80086ac:	4658      	mov	r0, fp
 80086ae:	f001 f855 	bl	800975c <_Balloc>
 80086b2:	4606      	mov	r6, r0
 80086b4:	b928      	cbnz	r0, 80086c2 <_dtoa_r+0x97a>
 80086b6:	4b84      	ldr	r3, [pc, #528]	@ (80088c8 <_dtoa_r+0xb80>)
 80086b8:	4602      	mov	r2, r0
 80086ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80086be:	f7ff bb5a 	b.w	8007d76 <_dtoa_r+0x2e>
 80086c2:	692a      	ldr	r2, [r5, #16]
 80086c4:	3202      	adds	r2, #2
 80086c6:	0092      	lsls	r2, r2, #2
 80086c8:	f105 010c 	add.w	r1, r5, #12
 80086cc:	300c      	adds	r0, #12
 80086ce:	f7ff fa94 	bl	8007bfa <memcpy>
 80086d2:	2201      	movs	r2, #1
 80086d4:	4631      	mov	r1, r6
 80086d6:	4658      	mov	r0, fp
 80086d8:	f001 fa98 	bl	8009c0c <__lshift>
 80086dc:	f10a 0301 	add.w	r3, sl, #1
 80086e0:	9307      	str	r3, [sp, #28]
 80086e2:	9b00      	ldr	r3, [sp, #0]
 80086e4:	4453      	add	r3, sl
 80086e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086e8:	9b02      	ldr	r3, [sp, #8]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	462f      	mov	r7, r5
 80086f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086f2:	4605      	mov	r5, r0
 80086f4:	9b07      	ldr	r3, [sp, #28]
 80086f6:	4621      	mov	r1, r4
 80086f8:	3b01      	subs	r3, #1
 80086fa:	4648      	mov	r0, r9
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	f7ff fa99 	bl	8007c34 <quorem>
 8008702:	4639      	mov	r1, r7
 8008704:	9002      	str	r0, [sp, #8]
 8008706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800870a:	4648      	mov	r0, r9
 800870c:	f001 faea 	bl	8009ce4 <__mcmp>
 8008710:	462a      	mov	r2, r5
 8008712:	9008      	str	r0, [sp, #32]
 8008714:	4621      	mov	r1, r4
 8008716:	4658      	mov	r0, fp
 8008718:	f001 fb00 	bl	8009d1c <__mdiff>
 800871c:	68c2      	ldr	r2, [r0, #12]
 800871e:	4606      	mov	r6, r0
 8008720:	bb02      	cbnz	r2, 8008764 <_dtoa_r+0xa1c>
 8008722:	4601      	mov	r1, r0
 8008724:	4648      	mov	r0, r9
 8008726:	f001 fadd 	bl	8009ce4 <__mcmp>
 800872a:	4602      	mov	r2, r0
 800872c:	4631      	mov	r1, r6
 800872e:	4658      	mov	r0, fp
 8008730:	920e      	str	r2, [sp, #56]	@ 0x38
 8008732:	f001 f853 	bl	80097dc <_Bfree>
 8008736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800873a:	9e07      	ldr	r6, [sp, #28]
 800873c:	ea43 0102 	orr.w	r1, r3, r2
 8008740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008742:	4319      	orrs	r1, r3
 8008744:	d110      	bne.n	8008768 <_dtoa_r+0xa20>
 8008746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800874a:	d029      	beq.n	80087a0 <_dtoa_r+0xa58>
 800874c:	9b08      	ldr	r3, [sp, #32]
 800874e:	2b00      	cmp	r3, #0
 8008750:	dd02      	ble.n	8008758 <_dtoa_r+0xa10>
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008758:	9b00      	ldr	r3, [sp, #0]
 800875a:	f883 8000 	strb.w	r8, [r3]
 800875e:	e63f      	b.n	80083e0 <_dtoa_r+0x698>
 8008760:	4628      	mov	r0, r5
 8008762:	e7bb      	b.n	80086dc <_dtoa_r+0x994>
 8008764:	2201      	movs	r2, #1
 8008766:	e7e1      	b.n	800872c <_dtoa_r+0x9e4>
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	2b00      	cmp	r3, #0
 800876c:	db04      	blt.n	8008778 <_dtoa_r+0xa30>
 800876e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008770:	430b      	orrs	r3, r1
 8008772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008774:	430b      	orrs	r3, r1
 8008776:	d120      	bne.n	80087ba <_dtoa_r+0xa72>
 8008778:	2a00      	cmp	r2, #0
 800877a:	dded      	ble.n	8008758 <_dtoa_r+0xa10>
 800877c:	4649      	mov	r1, r9
 800877e:	2201      	movs	r2, #1
 8008780:	4658      	mov	r0, fp
 8008782:	f001 fa43 	bl	8009c0c <__lshift>
 8008786:	4621      	mov	r1, r4
 8008788:	4681      	mov	r9, r0
 800878a:	f001 faab 	bl	8009ce4 <__mcmp>
 800878e:	2800      	cmp	r0, #0
 8008790:	dc03      	bgt.n	800879a <_dtoa_r+0xa52>
 8008792:	d1e1      	bne.n	8008758 <_dtoa_r+0xa10>
 8008794:	f018 0f01 	tst.w	r8, #1
 8008798:	d0de      	beq.n	8008758 <_dtoa_r+0xa10>
 800879a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800879e:	d1d8      	bne.n	8008752 <_dtoa_r+0xa0a>
 80087a0:	9a00      	ldr	r2, [sp, #0]
 80087a2:	2339      	movs	r3, #57	@ 0x39
 80087a4:	7013      	strb	r3, [r2, #0]
 80087a6:	4633      	mov	r3, r6
 80087a8:	461e      	mov	r6, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80087b0:	2a39      	cmp	r2, #57	@ 0x39
 80087b2:	d052      	beq.n	800885a <_dtoa_r+0xb12>
 80087b4:	3201      	adds	r2, #1
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	e612      	b.n	80083e0 <_dtoa_r+0x698>
 80087ba:	2a00      	cmp	r2, #0
 80087bc:	dd07      	ble.n	80087ce <_dtoa_r+0xa86>
 80087be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087c2:	d0ed      	beq.n	80087a0 <_dtoa_r+0xa58>
 80087c4:	9a00      	ldr	r2, [sp, #0]
 80087c6:	f108 0301 	add.w	r3, r8, #1
 80087ca:	7013      	strb	r3, [r2, #0]
 80087cc:	e608      	b.n	80083e0 <_dtoa_r+0x698>
 80087ce:	9b07      	ldr	r3, [sp, #28]
 80087d0:	9a07      	ldr	r2, [sp, #28]
 80087d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80087d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087d8:	4293      	cmp	r3, r2
 80087da:	d028      	beq.n	800882e <_dtoa_r+0xae6>
 80087dc:	4649      	mov	r1, r9
 80087de:	2300      	movs	r3, #0
 80087e0:	220a      	movs	r2, #10
 80087e2:	4658      	mov	r0, fp
 80087e4:	f001 f81c 	bl	8009820 <__multadd>
 80087e8:	42af      	cmp	r7, r5
 80087ea:	4681      	mov	r9, r0
 80087ec:	f04f 0300 	mov.w	r3, #0
 80087f0:	f04f 020a 	mov.w	r2, #10
 80087f4:	4639      	mov	r1, r7
 80087f6:	4658      	mov	r0, fp
 80087f8:	d107      	bne.n	800880a <_dtoa_r+0xac2>
 80087fa:	f001 f811 	bl	8009820 <__multadd>
 80087fe:	4607      	mov	r7, r0
 8008800:	4605      	mov	r5, r0
 8008802:	9b07      	ldr	r3, [sp, #28]
 8008804:	3301      	adds	r3, #1
 8008806:	9307      	str	r3, [sp, #28]
 8008808:	e774      	b.n	80086f4 <_dtoa_r+0x9ac>
 800880a:	f001 f809 	bl	8009820 <__multadd>
 800880e:	4629      	mov	r1, r5
 8008810:	4607      	mov	r7, r0
 8008812:	2300      	movs	r3, #0
 8008814:	220a      	movs	r2, #10
 8008816:	4658      	mov	r0, fp
 8008818:	f001 f802 	bl	8009820 <__multadd>
 800881c:	4605      	mov	r5, r0
 800881e:	e7f0      	b.n	8008802 <_dtoa_r+0xaba>
 8008820:	9b00      	ldr	r3, [sp, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	bfcc      	ite	gt
 8008826:	461e      	movgt	r6, r3
 8008828:	2601      	movle	r6, #1
 800882a:	4456      	add	r6, sl
 800882c:	2700      	movs	r7, #0
 800882e:	4649      	mov	r1, r9
 8008830:	2201      	movs	r2, #1
 8008832:	4658      	mov	r0, fp
 8008834:	f001 f9ea 	bl	8009c0c <__lshift>
 8008838:	4621      	mov	r1, r4
 800883a:	4681      	mov	r9, r0
 800883c:	f001 fa52 	bl	8009ce4 <__mcmp>
 8008840:	2800      	cmp	r0, #0
 8008842:	dcb0      	bgt.n	80087a6 <_dtoa_r+0xa5e>
 8008844:	d102      	bne.n	800884c <_dtoa_r+0xb04>
 8008846:	f018 0f01 	tst.w	r8, #1
 800884a:	d1ac      	bne.n	80087a6 <_dtoa_r+0xa5e>
 800884c:	4633      	mov	r3, r6
 800884e:	461e      	mov	r6, r3
 8008850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008854:	2a30      	cmp	r2, #48	@ 0x30
 8008856:	d0fa      	beq.n	800884e <_dtoa_r+0xb06>
 8008858:	e5c2      	b.n	80083e0 <_dtoa_r+0x698>
 800885a:	459a      	cmp	sl, r3
 800885c:	d1a4      	bne.n	80087a8 <_dtoa_r+0xa60>
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	3301      	adds	r3, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	2331      	movs	r3, #49	@ 0x31
 8008866:	f88a 3000 	strb.w	r3, [sl]
 800886a:	e5b9      	b.n	80083e0 <_dtoa_r+0x698>
 800886c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800886e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80088cc <_dtoa_r+0xb84>
 8008872:	b11b      	cbz	r3, 800887c <_dtoa_r+0xb34>
 8008874:	f10a 0308 	add.w	r3, sl, #8
 8008878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	4650      	mov	r0, sl
 800887e:	b019      	add	sp, #100	@ 0x64
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008886:	2b01      	cmp	r3, #1
 8008888:	f77f ae37 	ble.w	80084fa <_dtoa_r+0x7b2>
 800888c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800888e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008890:	2001      	movs	r0, #1
 8008892:	e655      	b.n	8008540 <_dtoa_r+0x7f8>
 8008894:	9b00      	ldr	r3, [sp, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f77f aed6 	ble.w	8008648 <_dtoa_r+0x900>
 800889c:	4656      	mov	r6, sl
 800889e:	4621      	mov	r1, r4
 80088a0:	4648      	mov	r0, r9
 80088a2:	f7ff f9c7 	bl	8007c34 <quorem>
 80088a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80088aa:	f806 8b01 	strb.w	r8, [r6], #1
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	eba6 020a 	sub.w	r2, r6, sl
 80088b4:	4293      	cmp	r3, r2
 80088b6:	ddb3      	ble.n	8008820 <_dtoa_r+0xad8>
 80088b8:	4649      	mov	r1, r9
 80088ba:	2300      	movs	r3, #0
 80088bc:	220a      	movs	r2, #10
 80088be:	4658      	mov	r0, fp
 80088c0:	f000 ffae 	bl	8009820 <__multadd>
 80088c4:	4681      	mov	r9, r0
 80088c6:	e7ea      	b.n	800889e <_dtoa_r+0xb56>
 80088c8:	0800aa15 	.word	0x0800aa15
 80088cc:	0800a999 	.word	0x0800a999

080088d0 <rshift>:
 80088d0:	6903      	ldr	r3, [r0, #16]
 80088d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088de:	f100 0414 	add.w	r4, r0, #20
 80088e2:	dd45      	ble.n	8008970 <rshift+0xa0>
 80088e4:	f011 011f 	ands.w	r1, r1, #31
 80088e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088f0:	d10c      	bne.n	800890c <rshift+0x3c>
 80088f2:	f100 0710 	add.w	r7, r0, #16
 80088f6:	4629      	mov	r1, r5
 80088f8:	42b1      	cmp	r1, r6
 80088fa:	d334      	bcc.n	8008966 <rshift+0x96>
 80088fc:	1a9b      	subs	r3, r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	1eea      	subs	r2, r5, #3
 8008902:	4296      	cmp	r6, r2
 8008904:	bf38      	it	cc
 8008906:	2300      	movcc	r3, #0
 8008908:	4423      	add	r3, r4
 800890a:	e015      	b.n	8008938 <rshift+0x68>
 800890c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008910:	f1c1 0820 	rsb	r8, r1, #32
 8008914:	40cf      	lsrs	r7, r1
 8008916:	f105 0e04 	add.w	lr, r5, #4
 800891a:	46a1      	mov	r9, r4
 800891c:	4576      	cmp	r6, lr
 800891e:	46f4      	mov	ip, lr
 8008920:	d815      	bhi.n	800894e <rshift+0x7e>
 8008922:	1a9a      	subs	r2, r3, r2
 8008924:	0092      	lsls	r2, r2, #2
 8008926:	3a04      	subs	r2, #4
 8008928:	3501      	adds	r5, #1
 800892a:	42ae      	cmp	r6, r5
 800892c:	bf38      	it	cc
 800892e:	2200      	movcc	r2, #0
 8008930:	18a3      	adds	r3, r4, r2
 8008932:	50a7      	str	r7, [r4, r2]
 8008934:	b107      	cbz	r7, 8008938 <rshift+0x68>
 8008936:	3304      	adds	r3, #4
 8008938:	1b1a      	subs	r2, r3, r4
 800893a:	42a3      	cmp	r3, r4
 800893c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008940:	bf08      	it	eq
 8008942:	2300      	moveq	r3, #0
 8008944:	6102      	str	r2, [r0, #16]
 8008946:	bf08      	it	eq
 8008948:	6143      	streq	r3, [r0, #20]
 800894a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800894e:	f8dc c000 	ldr.w	ip, [ip]
 8008952:	fa0c fc08 	lsl.w	ip, ip, r8
 8008956:	ea4c 0707 	orr.w	r7, ip, r7
 800895a:	f849 7b04 	str.w	r7, [r9], #4
 800895e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008962:	40cf      	lsrs	r7, r1
 8008964:	e7da      	b.n	800891c <rshift+0x4c>
 8008966:	f851 cb04 	ldr.w	ip, [r1], #4
 800896a:	f847 cf04 	str.w	ip, [r7, #4]!
 800896e:	e7c3      	b.n	80088f8 <rshift+0x28>
 8008970:	4623      	mov	r3, r4
 8008972:	e7e1      	b.n	8008938 <rshift+0x68>

08008974 <__hexdig_fun>:
 8008974:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008978:	2b09      	cmp	r3, #9
 800897a:	d802      	bhi.n	8008982 <__hexdig_fun+0xe>
 800897c:	3820      	subs	r0, #32
 800897e:	b2c0      	uxtb	r0, r0
 8008980:	4770      	bx	lr
 8008982:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008986:	2b05      	cmp	r3, #5
 8008988:	d801      	bhi.n	800898e <__hexdig_fun+0x1a>
 800898a:	3847      	subs	r0, #71	@ 0x47
 800898c:	e7f7      	b.n	800897e <__hexdig_fun+0xa>
 800898e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008992:	2b05      	cmp	r3, #5
 8008994:	d801      	bhi.n	800899a <__hexdig_fun+0x26>
 8008996:	3827      	subs	r0, #39	@ 0x27
 8008998:	e7f1      	b.n	800897e <__hexdig_fun+0xa>
 800899a:	2000      	movs	r0, #0
 800899c:	4770      	bx	lr
	...

080089a0 <__gethex>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	b085      	sub	sp, #20
 80089a6:	468a      	mov	sl, r1
 80089a8:	9302      	str	r3, [sp, #8]
 80089aa:	680b      	ldr	r3, [r1, #0]
 80089ac:	9001      	str	r0, [sp, #4]
 80089ae:	4690      	mov	r8, r2
 80089b0:	1c9c      	adds	r4, r3, #2
 80089b2:	46a1      	mov	r9, r4
 80089b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80089b8:	2830      	cmp	r0, #48	@ 0x30
 80089ba:	d0fa      	beq.n	80089b2 <__gethex+0x12>
 80089bc:	eba9 0303 	sub.w	r3, r9, r3
 80089c0:	f1a3 0b02 	sub.w	fp, r3, #2
 80089c4:	f7ff ffd6 	bl	8008974 <__hexdig_fun>
 80089c8:	4605      	mov	r5, r0
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d168      	bne.n	8008aa0 <__gethex+0x100>
 80089ce:	49a0      	ldr	r1, [pc, #640]	@ (8008c50 <__gethex+0x2b0>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	4648      	mov	r0, r9
 80089d4:	f7ff f8b0 	bl	8007b38 <strncmp>
 80089d8:	4607      	mov	r7, r0
 80089da:	2800      	cmp	r0, #0
 80089dc:	d167      	bne.n	8008aae <__gethex+0x10e>
 80089de:	f899 0001 	ldrb.w	r0, [r9, #1]
 80089e2:	4626      	mov	r6, r4
 80089e4:	f7ff ffc6 	bl	8008974 <__hexdig_fun>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d062      	beq.n	8008ab2 <__gethex+0x112>
 80089ec:	4623      	mov	r3, r4
 80089ee:	7818      	ldrb	r0, [r3, #0]
 80089f0:	2830      	cmp	r0, #48	@ 0x30
 80089f2:	4699      	mov	r9, r3
 80089f4:	f103 0301 	add.w	r3, r3, #1
 80089f8:	d0f9      	beq.n	80089ee <__gethex+0x4e>
 80089fa:	f7ff ffbb 	bl	8008974 <__hexdig_fun>
 80089fe:	fab0 f580 	clz	r5, r0
 8008a02:	096d      	lsrs	r5, r5, #5
 8008a04:	f04f 0b01 	mov.w	fp, #1
 8008a08:	464a      	mov	r2, r9
 8008a0a:	4616      	mov	r6, r2
 8008a0c:	3201      	adds	r2, #1
 8008a0e:	7830      	ldrb	r0, [r6, #0]
 8008a10:	f7ff ffb0 	bl	8008974 <__hexdig_fun>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d1f8      	bne.n	8008a0a <__gethex+0x6a>
 8008a18:	498d      	ldr	r1, [pc, #564]	@ (8008c50 <__gethex+0x2b0>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff f88b 	bl	8007b38 <strncmp>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d13f      	bne.n	8008aa6 <__gethex+0x106>
 8008a26:	b944      	cbnz	r4, 8008a3a <__gethex+0x9a>
 8008a28:	1c74      	adds	r4, r6, #1
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	3201      	adds	r2, #1
 8008a30:	7830      	ldrb	r0, [r6, #0]
 8008a32:	f7ff ff9f 	bl	8008974 <__hexdig_fun>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1f8      	bne.n	8008a2c <__gethex+0x8c>
 8008a3a:	1ba4      	subs	r4, r4, r6
 8008a3c:	00a7      	lsls	r7, r4, #2
 8008a3e:	7833      	ldrb	r3, [r6, #0]
 8008a40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a44:	2b50      	cmp	r3, #80	@ 0x50
 8008a46:	d13e      	bne.n	8008ac6 <__gethex+0x126>
 8008a48:	7873      	ldrb	r3, [r6, #1]
 8008a4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a4c:	d033      	beq.n	8008ab6 <__gethex+0x116>
 8008a4e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a50:	d034      	beq.n	8008abc <__gethex+0x11c>
 8008a52:	1c71      	adds	r1, r6, #1
 8008a54:	2400      	movs	r4, #0
 8008a56:	7808      	ldrb	r0, [r1, #0]
 8008a58:	f7ff ff8c 	bl	8008974 <__hexdig_fun>
 8008a5c:	1e43      	subs	r3, r0, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b18      	cmp	r3, #24
 8008a62:	d830      	bhi.n	8008ac6 <__gethex+0x126>
 8008a64:	f1a0 0210 	sub.w	r2, r0, #16
 8008a68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a6c:	f7ff ff82 	bl	8008974 <__hexdig_fun>
 8008a70:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008a74:	fa5f fc8c 	uxtb.w	ip, ip
 8008a78:	f1bc 0f18 	cmp.w	ip, #24
 8008a7c:	f04f 030a 	mov.w	r3, #10
 8008a80:	d91e      	bls.n	8008ac0 <__gethex+0x120>
 8008a82:	b104      	cbz	r4, 8008a86 <__gethex+0xe6>
 8008a84:	4252      	negs	r2, r2
 8008a86:	4417      	add	r7, r2
 8008a88:	f8ca 1000 	str.w	r1, [sl]
 8008a8c:	b1ed      	cbz	r5, 8008aca <__gethex+0x12a>
 8008a8e:	f1bb 0f00 	cmp.w	fp, #0
 8008a92:	bf0c      	ite	eq
 8008a94:	2506      	moveq	r5, #6
 8008a96:	2500      	movne	r5, #0
 8008a98:	4628      	mov	r0, r5
 8008a9a:	b005      	add	sp, #20
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	2500      	movs	r5, #0
 8008aa2:	462c      	mov	r4, r5
 8008aa4:	e7b0      	b.n	8008a08 <__gethex+0x68>
 8008aa6:	2c00      	cmp	r4, #0
 8008aa8:	d1c7      	bne.n	8008a3a <__gethex+0x9a>
 8008aaa:	4627      	mov	r7, r4
 8008aac:	e7c7      	b.n	8008a3e <__gethex+0x9e>
 8008aae:	464e      	mov	r6, r9
 8008ab0:	462f      	mov	r7, r5
 8008ab2:	2501      	movs	r5, #1
 8008ab4:	e7c3      	b.n	8008a3e <__gethex+0x9e>
 8008ab6:	2400      	movs	r4, #0
 8008ab8:	1cb1      	adds	r1, r6, #2
 8008aba:	e7cc      	b.n	8008a56 <__gethex+0xb6>
 8008abc:	2401      	movs	r4, #1
 8008abe:	e7fb      	b.n	8008ab8 <__gethex+0x118>
 8008ac0:	fb03 0002 	mla	r0, r3, r2, r0
 8008ac4:	e7ce      	b.n	8008a64 <__gethex+0xc4>
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	e7de      	b.n	8008a88 <__gethex+0xe8>
 8008aca:	eba6 0309 	sub.w	r3, r6, r9
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	2b07      	cmp	r3, #7
 8008ad4:	dc0a      	bgt.n	8008aec <__gethex+0x14c>
 8008ad6:	9801      	ldr	r0, [sp, #4]
 8008ad8:	f000 fe40 	bl	800975c <_Balloc>
 8008adc:	4604      	mov	r4, r0
 8008ade:	b940      	cbnz	r0, 8008af2 <__gethex+0x152>
 8008ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8008c54 <__gethex+0x2b4>)
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	21e4      	movs	r1, #228	@ 0xe4
 8008ae6:	485c      	ldr	r0, [pc, #368]	@ (8008c58 <__gethex+0x2b8>)
 8008ae8:	f001 fcf2 	bl	800a4d0 <__assert_func>
 8008aec:	3101      	adds	r1, #1
 8008aee:	105b      	asrs	r3, r3, #1
 8008af0:	e7ef      	b.n	8008ad2 <__gethex+0x132>
 8008af2:	f100 0a14 	add.w	sl, r0, #20
 8008af6:	2300      	movs	r3, #0
 8008af8:	4655      	mov	r5, sl
 8008afa:	469b      	mov	fp, r3
 8008afc:	45b1      	cmp	r9, r6
 8008afe:	d337      	bcc.n	8008b70 <__gethex+0x1d0>
 8008b00:	f845 bb04 	str.w	fp, [r5], #4
 8008b04:	eba5 050a 	sub.w	r5, r5, sl
 8008b08:	10ad      	asrs	r5, r5, #2
 8008b0a:	6125      	str	r5, [r4, #16]
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 ff17 	bl	8009940 <__hi0bits>
 8008b12:	016d      	lsls	r5, r5, #5
 8008b14:	f8d8 6000 	ldr.w	r6, [r8]
 8008b18:	1a2d      	subs	r5, r5, r0
 8008b1a:	42b5      	cmp	r5, r6
 8008b1c:	dd54      	ble.n	8008bc8 <__gethex+0x228>
 8008b1e:	1bad      	subs	r5, r5, r6
 8008b20:	4629      	mov	r1, r5
 8008b22:	4620      	mov	r0, r4
 8008b24:	f001 faab 	bl	800a07e <__any_on>
 8008b28:	4681      	mov	r9, r0
 8008b2a:	b178      	cbz	r0, 8008b4c <__gethex+0x1ac>
 8008b2c:	1e6b      	subs	r3, r5, #1
 8008b2e:	1159      	asrs	r1, r3, #5
 8008b30:	f003 021f 	and.w	r2, r3, #31
 8008b34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b38:	f04f 0901 	mov.w	r9, #1
 8008b3c:	fa09 f202 	lsl.w	r2, r9, r2
 8008b40:	420a      	tst	r2, r1
 8008b42:	d003      	beq.n	8008b4c <__gethex+0x1ac>
 8008b44:	454b      	cmp	r3, r9
 8008b46:	dc36      	bgt.n	8008bb6 <__gethex+0x216>
 8008b48:	f04f 0902 	mov.w	r9, #2
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7ff febe 	bl	80088d0 <rshift>
 8008b54:	442f      	add	r7, r5
 8008b56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b5a:	42bb      	cmp	r3, r7
 8008b5c:	da42      	bge.n	8008be4 <__gethex+0x244>
 8008b5e:	9801      	ldr	r0, [sp, #4]
 8008b60:	4621      	mov	r1, r4
 8008b62:	f000 fe3b 	bl	80097dc <_Bfree>
 8008b66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b68:	2300      	movs	r3, #0
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	25a3      	movs	r5, #163	@ 0xa3
 8008b6e:	e793      	b.n	8008a98 <__gethex+0xf8>
 8008b70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008b74:	2a2e      	cmp	r2, #46	@ 0x2e
 8008b76:	d012      	beq.n	8008b9e <__gethex+0x1fe>
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	d104      	bne.n	8008b86 <__gethex+0x1e6>
 8008b7c:	f845 bb04 	str.w	fp, [r5], #4
 8008b80:	f04f 0b00 	mov.w	fp, #0
 8008b84:	465b      	mov	r3, fp
 8008b86:	7830      	ldrb	r0, [r6, #0]
 8008b88:	9303      	str	r3, [sp, #12]
 8008b8a:	f7ff fef3 	bl	8008974 <__hexdig_fun>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	f000 000f 	and.w	r0, r0, #15
 8008b94:	4098      	lsls	r0, r3
 8008b96:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	e7ae      	b.n	8008afc <__gethex+0x15c>
 8008b9e:	45b1      	cmp	r9, r6
 8008ba0:	d8ea      	bhi.n	8008b78 <__gethex+0x1d8>
 8008ba2:	492b      	ldr	r1, [pc, #172]	@ (8008c50 <__gethex+0x2b0>)
 8008ba4:	9303      	str	r3, [sp, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7fe ffc5 	bl	8007b38 <strncmp>
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d1e1      	bne.n	8008b78 <__gethex+0x1d8>
 8008bb4:	e7a2      	b.n	8008afc <__gethex+0x15c>
 8008bb6:	1ea9      	subs	r1, r5, #2
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f001 fa60 	bl	800a07e <__any_on>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d0c2      	beq.n	8008b48 <__gethex+0x1a8>
 8008bc2:	f04f 0903 	mov.w	r9, #3
 8008bc6:	e7c1      	b.n	8008b4c <__gethex+0x1ac>
 8008bc8:	da09      	bge.n	8008bde <__gethex+0x23e>
 8008bca:	1b75      	subs	r5, r6, r5
 8008bcc:	4621      	mov	r1, r4
 8008bce:	9801      	ldr	r0, [sp, #4]
 8008bd0:	462a      	mov	r2, r5
 8008bd2:	f001 f81b 	bl	8009c0c <__lshift>
 8008bd6:	1b7f      	subs	r7, r7, r5
 8008bd8:	4604      	mov	r4, r0
 8008bda:	f100 0a14 	add.w	sl, r0, #20
 8008bde:	f04f 0900 	mov.w	r9, #0
 8008be2:	e7b8      	b.n	8008b56 <__gethex+0x1b6>
 8008be4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008be8:	42bd      	cmp	r5, r7
 8008bea:	dd6f      	ble.n	8008ccc <__gethex+0x32c>
 8008bec:	1bed      	subs	r5, r5, r7
 8008bee:	42ae      	cmp	r6, r5
 8008bf0:	dc34      	bgt.n	8008c5c <__gethex+0x2bc>
 8008bf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d022      	beq.n	8008c40 <__gethex+0x2a0>
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d024      	beq.n	8008c48 <__gethex+0x2a8>
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d115      	bne.n	8008c2e <__gethex+0x28e>
 8008c02:	42ae      	cmp	r6, r5
 8008c04:	d113      	bne.n	8008c2e <__gethex+0x28e>
 8008c06:	2e01      	cmp	r6, #1
 8008c08:	d10b      	bne.n	8008c22 <__gethex+0x282>
 8008c0a:	9a02      	ldr	r2, [sp, #8]
 8008c0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	2301      	movs	r3, #1
 8008c14:	6123      	str	r3, [r4, #16]
 8008c16:	f8ca 3000 	str.w	r3, [sl]
 8008c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c1c:	2562      	movs	r5, #98	@ 0x62
 8008c1e:	601c      	str	r4, [r3, #0]
 8008c20:	e73a      	b.n	8008a98 <__gethex+0xf8>
 8008c22:	1e71      	subs	r1, r6, #1
 8008c24:	4620      	mov	r0, r4
 8008c26:	f001 fa2a 	bl	800a07e <__any_on>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1ed      	bne.n	8008c0a <__gethex+0x26a>
 8008c2e:	9801      	ldr	r0, [sp, #4]
 8008c30:	4621      	mov	r1, r4
 8008c32:	f000 fdd3 	bl	80097dc <_Bfree>
 8008c36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	2550      	movs	r5, #80	@ 0x50
 8008c3e:	e72b      	b.n	8008a98 <__gethex+0xf8>
 8008c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f3      	bne.n	8008c2e <__gethex+0x28e>
 8008c46:	e7e0      	b.n	8008c0a <__gethex+0x26a>
 8008c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1dd      	bne.n	8008c0a <__gethex+0x26a>
 8008c4e:	e7ee      	b.n	8008c2e <__gethex+0x28e>
 8008c50:	0800a83d 	.word	0x0800a83d
 8008c54:	0800aa15 	.word	0x0800aa15
 8008c58:	0800aa26 	.word	0x0800aa26
 8008c5c:	1e6f      	subs	r7, r5, #1
 8008c5e:	f1b9 0f00 	cmp.w	r9, #0
 8008c62:	d130      	bne.n	8008cc6 <__gethex+0x326>
 8008c64:	b127      	cbz	r7, 8008c70 <__gethex+0x2d0>
 8008c66:	4639      	mov	r1, r7
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f001 fa08 	bl	800a07e <__any_on>
 8008c6e:	4681      	mov	r9, r0
 8008c70:	117a      	asrs	r2, r7, #5
 8008c72:	2301      	movs	r3, #1
 8008c74:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c78:	f007 071f 	and.w	r7, r7, #31
 8008c7c:	40bb      	lsls	r3, r7
 8008c7e:	4213      	tst	r3, r2
 8008c80:	4629      	mov	r1, r5
 8008c82:	4620      	mov	r0, r4
 8008c84:	bf18      	it	ne
 8008c86:	f049 0902 	orrne.w	r9, r9, #2
 8008c8a:	f7ff fe21 	bl	80088d0 <rshift>
 8008c8e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008c92:	1b76      	subs	r6, r6, r5
 8008c94:	2502      	movs	r5, #2
 8008c96:	f1b9 0f00 	cmp.w	r9, #0
 8008c9a:	d047      	beq.n	8008d2c <__gethex+0x38c>
 8008c9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d015      	beq.n	8008cd0 <__gethex+0x330>
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d017      	beq.n	8008cd8 <__gethex+0x338>
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d109      	bne.n	8008cc0 <__gethex+0x320>
 8008cac:	f019 0f02 	tst.w	r9, #2
 8008cb0:	d006      	beq.n	8008cc0 <__gethex+0x320>
 8008cb2:	f8da 3000 	ldr.w	r3, [sl]
 8008cb6:	ea49 0903 	orr.w	r9, r9, r3
 8008cba:	f019 0f01 	tst.w	r9, #1
 8008cbe:	d10e      	bne.n	8008cde <__gethex+0x33e>
 8008cc0:	f045 0510 	orr.w	r5, r5, #16
 8008cc4:	e032      	b.n	8008d2c <__gethex+0x38c>
 8008cc6:	f04f 0901 	mov.w	r9, #1
 8008cca:	e7d1      	b.n	8008c70 <__gethex+0x2d0>
 8008ccc:	2501      	movs	r5, #1
 8008cce:	e7e2      	b.n	8008c96 <__gethex+0x2f6>
 8008cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd2:	f1c3 0301 	rsb	r3, r3, #1
 8008cd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0f0      	beq.n	8008cc0 <__gethex+0x320>
 8008cde:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ce2:	f104 0314 	add.w	r3, r4, #20
 8008ce6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008cea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008cee:	f04f 0c00 	mov.w	ip, #0
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008cfc:	d01b      	beq.n	8008d36 <__gethex+0x396>
 8008cfe:	3201      	adds	r2, #1
 8008d00:	6002      	str	r2, [r0, #0]
 8008d02:	2d02      	cmp	r5, #2
 8008d04:	f104 0314 	add.w	r3, r4, #20
 8008d08:	d13c      	bne.n	8008d84 <__gethex+0x3e4>
 8008d0a:	f8d8 2000 	ldr.w	r2, [r8]
 8008d0e:	3a01      	subs	r2, #1
 8008d10:	42b2      	cmp	r2, r6
 8008d12:	d109      	bne.n	8008d28 <__gethex+0x388>
 8008d14:	1171      	asrs	r1, r6, #5
 8008d16:	2201      	movs	r2, #1
 8008d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d1c:	f006 061f 	and.w	r6, r6, #31
 8008d20:	fa02 f606 	lsl.w	r6, r2, r6
 8008d24:	421e      	tst	r6, r3
 8008d26:	d13a      	bne.n	8008d9e <__gethex+0x3fe>
 8008d28:	f045 0520 	orr.w	r5, r5, #32
 8008d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d2e:	601c      	str	r4, [r3, #0]
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	601f      	str	r7, [r3, #0]
 8008d34:	e6b0      	b.n	8008a98 <__gethex+0xf8>
 8008d36:	4299      	cmp	r1, r3
 8008d38:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d3c:	d8d9      	bhi.n	8008cf2 <__gethex+0x352>
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	459b      	cmp	fp, r3
 8008d42:	db17      	blt.n	8008d74 <__gethex+0x3d4>
 8008d44:	6861      	ldr	r1, [r4, #4]
 8008d46:	9801      	ldr	r0, [sp, #4]
 8008d48:	3101      	adds	r1, #1
 8008d4a:	f000 fd07 	bl	800975c <_Balloc>
 8008d4e:	4681      	mov	r9, r0
 8008d50:	b918      	cbnz	r0, 8008d5a <__gethex+0x3ba>
 8008d52:	4b1a      	ldr	r3, [pc, #104]	@ (8008dbc <__gethex+0x41c>)
 8008d54:	4602      	mov	r2, r0
 8008d56:	2184      	movs	r1, #132	@ 0x84
 8008d58:	e6c5      	b.n	8008ae6 <__gethex+0x146>
 8008d5a:	6922      	ldr	r2, [r4, #16]
 8008d5c:	3202      	adds	r2, #2
 8008d5e:	f104 010c 	add.w	r1, r4, #12
 8008d62:	0092      	lsls	r2, r2, #2
 8008d64:	300c      	adds	r0, #12
 8008d66:	f7fe ff48 	bl	8007bfa <memcpy>
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	9801      	ldr	r0, [sp, #4]
 8008d6e:	f000 fd35 	bl	80097dc <_Bfree>
 8008d72:	464c      	mov	r4, r9
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d7c:	6122      	str	r2, [r4, #16]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	615a      	str	r2, [r3, #20]
 8008d82:	e7be      	b.n	8008d02 <__gethex+0x362>
 8008d84:	6922      	ldr	r2, [r4, #16]
 8008d86:	455a      	cmp	r2, fp
 8008d88:	dd0b      	ble.n	8008da2 <__gethex+0x402>
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7ff fd9f 	bl	80088d0 <rshift>
 8008d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d96:	3701      	adds	r7, #1
 8008d98:	42bb      	cmp	r3, r7
 8008d9a:	f6ff aee0 	blt.w	8008b5e <__gethex+0x1be>
 8008d9e:	2501      	movs	r5, #1
 8008da0:	e7c2      	b.n	8008d28 <__gethex+0x388>
 8008da2:	f016 061f 	ands.w	r6, r6, #31
 8008da6:	d0fa      	beq.n	8008d9e <__gethex+0x3fe>
 8008da8:	4453      	add	r3, sl
 8008daa:	f1c6 0620 	rsb	r6, r6, #32
 8008dae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008db2:	f000 fdc5 	bl	8009940 <__hi0bits>
 8008db6:	42b0      	cmp	r0, r6
 8008db8:	dbe7      	blt.n	8008d8a <__gethex+0x3ea>
 8008dba:	e7f0      	b.n	8008d9e <__gethex+0x3fe>
 8008dbc:	0800aa15 	.word	0x0800aa15

08008dc0 <L_shift>:
 8008dc0:	f1c2 0208 	rsb	r2, r2, #8
 8008dc4:	0092      	lsls	r2, r2, #2
 8008dc6:	b570      	push	{r4, r5, r6, lr}
 8008dc8:	f1c2 0620 	rsb	r6, r2, #32
 8008dcc:	6843      	ldr	r3, [r0, #4]
 8008dce:	6804      	ldr	r4, [r0, #0]
 8008dd0:	fa03 f506 	lsl.w	r5, r3, r6
 8008dd4:	432c      	orrs	r4, r5
 8008dd6:	40d3      	lsrs	r3, r2
 8008dd8:	6004      	str	r4, [r0, #0]
 8008dda:	f840 3f04 	str.w	r3, [r0, #4]!
 8008dde:	4288      	cmp	r0, r1
 8008de0:	d3f4      	bcc.n	8008dcc <L_shift+0xc>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}

08008de4 <__match>:
 8008de4:	b530      	push	{r4, r5, lr}
 8008de6:	6803      	ldr	r3, [r0, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dee:	b914      	cbnz	r4, 8008df6 <__match+0x12>
 8008df0:	6003      	str	r3, [r0, #0]
 8008df2:	2001      	movs	r0, #1
 8008df4:	bd30      	pop	{r4, r5, pc}
 8008df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008dfe:	2d19      	cmp	r5, #25
 8008e00:	bf98      	it	ls
 8008e02:	3220      	addls	r2, #32
 8008e04:	42a2      	cmp	r2, r4
 8008e06:	d0f0      	beq.n	8008dea <__match+0x6>
 8008e08:	2000      	movs	r0, #0
 8008e0a:	e7f3      	b.n	8008df4 <__match+0x10>

08008e0c <__hexnan>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	680b      	ldr	r3, [r1, #0]
 8008e12:	6801      	ldr	r1, [r0, #0]
 8008e14:	115e      	asrs	r6, r3, #5
 8008e16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e1a:	f013 031f 	ands.w	r3, r3, #31
 8008e1e:	b087      	sub	sp, #28
 8008e20:	bf18      	it	ne
 8008e22:	3604      	addne	r6, #4
 8008e24:	2500      	movs	r5, #0
 8008e26:	1f37      	subs	r7, r6, #4
 8008e28:	4682      	mov	sl, r0
 8008e2a:	4690      	mov	r8, r2
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e32:	46b9      	mov	r9, r7
 8008e34:	463c      	mov	r4, r7
 8008e36:	9502      	str	r5, [sp, #8]
 8008e38:	46ab      	mov	fp, r5
 8008e3a:	784a      	ldrb	r2, [r1, #1]
 8008e3c:	1c4b      	adds	r3, r1, #1
 8008e3e:	9303      	str	r3, [sp, #12]
 8008e40:	b342      	cbz	r2, 8008e94 <__hexnan+0x88>
 8008e42:	4610      	mov	r0, r2
 8008e44:	9105      	str	r1, [sp, #20]
 8008e46:	9204      	str	r2, [sp, #16]
 8008e48:	f7ff fd94 	bl	8008974 <__hexdig_fun>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d151      	bne.n	8008ef4 <__hexnan+0xe8>
 8008e50:	9a04      	ldr	r2, [sp, #16]
 8008e52:	9905      	ldr	r1, [sp, #20]
 8008e54:	2a20      	cmp	r2, #32
 8008e56:	d818      	bhi.n	8008e8a <__hexnan+0x7e>
 8008e58:	9b02      	ldr	r3, [sp, #8]
 8008e5a:	459b      	cmp	fp, r3
 8008e5c:	dd13      	ble.n	8008e86 <__hexnan+0x7a>
 8008e5e:	454c      	cmp	r4, r9
 8008e60:	d206      	bcs.n	8008e70 <__hexnan+0x64>
 8008e62:	2d07      	cmp	r5, #7
 8008e64:	dc04      	bgt.n	8008e70 <__hexnan+0x64>
 8008e66:	462a      	mov	r2, r5
 8008e68:	4649      	mov	r1, r9
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f7ff ffa8 	bl	8008dc0 <L_shift>
 8008e70:	4544      	cmp	r4, r8
 8008e72:	d952      	bls.n	8008f1a <__hexnan+0x10e>
 8008e74:	2300      	movs	r3, #0
 8008e76:	f1a4 0904 	sub.w	r9, r4, #4
 8008e7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e7e:	f8cd b008 	str.w	fp, [sp, #8]
 8008e82:	464c      	mov	r4, r9
 8008e84:	461d      	mov	r5, r3
 8008e86:	9903      	ldr	r1, [sp, #12]
 8008e88:	e7d7      	b.n	8008e3a <__hexnan+0x2e>
 8008e8a:	2a29      	cmp	r2, #41	@ 0x29
 8008e8c:	d157      	bne.n	8008f3e <__hexnan+0x132>
 8008e8e:	3102      	adds	r1, #2
 8008e90:	f8ca 1000 	str.w	r1, [sl]
 8008e94:	f1bb 0f00 	cmp.w	fp, #0
 8008e98:	d051      	beq.n	8008f3e <__hexnan+0x132>
 8008e9a:	454c      	cmp	r4, r9
 8008e9c:	d206      	bcs.n	8008eac <__hexnan+0xa0>
 8008e9e:	2d07      	cmp	r5, #7
 8008ea0:	dc04      	bgt.n	8008eac <__hexnan+0xa0>
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f7ff ff8a 	bl	8008dc0 <L_shift>
 8008eac:	4544      	cmp	r4, r8
 8008eae:	d936      	bls.n	8008f1e <__hexnan+0x112>
 8008eb0:	f1a8 0204 	sub.w	r2, r8, #4
 8008eb4:	4623      	mov	r3, r4
 8008eb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008eba:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ebe:	429f      	cmp	r7, r3
 8008ec0:	d2f9      	bcs.n	8008eb6 <__hexnan+0xaa>
 8008ec2:	1b3b      	subs	r3, r7, r4
 8008ec4:	f023 0303 	bic.w	r3, r3, #3
 8008ec8:	3304      	adds	r3, #4
 8008eca:	3401      	adds	r4, #1
 8008ecc:	3e03      	subs	r6, #3
 8008ece:	42b4      	cmp	r4, r6
 8008ed0:	bf88      	it	hi
 8008ed2:	2304      	movhi	r3, #4
 8008ed4:	4443      	add	r3, r8
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f843 2b04 	str.w	r2, [r3], #4
 8008edc:	429f      	cmp	r7, r3
 8008ede:	d2fb      	bcs.n	8008ed8 <__hexnan+0xcc>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	b91b      	cbnz	r3, 8008eec <__hexnan+0xe0>
 8008ee4:	4547      	cmp	r7, r8
 8008ee6:	d128      	bne.n	8008f3a <__hexnan+0x12e>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	2005      	movs	r0, #5
 8008eee:	b007      	add	sp, #28
 8008ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	2d08      	cmp	r5, #8
 8008ef8:	f10b 0b01 	add.w	fp, fp, #1
 8008efc:	dd06      	ble.n	8008f0c <__hexnan+0x100>
 8008efe:	4544      	cmp	r4, r8
 8008f00:	d9c1      	bls.n	8008e86 <__hexnan+0x7a>
 8008f02:	2300      	movs	r3, #0
 8008f04:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f08:	2501      	movs	r5, #1
 8008f0a:	3c04      	subs	r4, #4
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	f000 000f 	and.w	r0, r0, #15
 8008f12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f16:	6020      	str	r0, [r4, #0]
 8008f18:	e7b5      	b.n	8008e86 <__hexnan+0x7a>
 8008f1a:	2508      	movs	r5, #8
 8008f1c:	e7b3      	b.n	8008e86 <__hexnan+0x7a>
 8008f1e:	9b01      	ldr	r3, [sp, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0dd      	beq.n	8008ee0 <__hexnan+0xd4>
 8008f24:	f1c3 0320 	rsb	r3, r3, #32
 8008f28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f2c:	40da      	lsrs	r2, r3
 8008f2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f32:	4013      	ands	r3, r2
 8008f34:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f38:	e7d2      	b.n	8008ee0 <__hexnan+0xd4>
 8008f3a:	3f04      	subs	r7, #4
 8008f3c:	e7d0      	b.n	8008ee0 <__hexnan+0xd4>
 8008f3e:	2004      	movs	r0, #4
 8008f40:	e7d5      	b.n	8008eee <__hexnan+0xe2>

08008f42 <__ssputs_r>:
 8008f42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f46:	688e      	ldr	r6, [r1, #8]
 8008f48:	461f      	mov	r7, r3
 8008f4a:	42be      	cmp	r6, r7
 8008f4c:	680b      	ldr	r3, [r1, #0]
 8008f4e:	4682      	mov	sl, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4690      	mov	r8, r2
 8008f54:	d82d      	bhi.n	8008fb2 <__ssputs_r+0x70>
 8008f56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f5a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f5e:	d026      	beq.n	8008fae <__ssputs_r+0x6c>
 8008f60:	6965      	ldr	r5, [r4, #20]
 8008f62:	6909      	ldr	r1, [r1, #16]
 8008f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f68:	eba3 0901 	sub.w	r9, r3, r1
 8008f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f70:	1c7b      	adds	r3, r7, #1
 8008f72:	444b      	add	r3, r9
 8008f74:	106d      	asrs	r5, r5, #1
 8008f76:	429d      	cmp	r5, r3
 8008f78:	bf38      	it	cc
 8008f7a:	461d      	movcc	r5, r3
 8008f7c:	0553      	lsls	r3, r2, #21
 8008f7e:	d527      	bpl.n	8008fd0 <__ssputs_r+0x8e>
 8008f80:	4629      	mov	r1, r5
 8008f82:	f000 faa1 	bl	80094c8 <_malloc_r>
 8008f86:	4606      	mov	r6, r0
 8008f88:	b360      	cbz	r0, 8008fe4 <__ssputs_r+0xa2>
 8008f8a:	6921      	ldr	r1, [r4, #16]
 8008f8c:	464a      	mov	r2, r9
 8008f8e:	f7fe fe34 	bl	8007bfa <memcpy>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	6126      	str	r6, [r4, #16]
 8008fa0:	6165      	str	r5, [r4, #20]
 8008fa2:	444e      	add	r6, r9
 8008fa4:	eba5 0509 	sub.w	r5, r5, r9
 8008fa8:	6026      	str	r6, [r4, #0]
 8008faa:	60a5      	str	r5, [r4, #8]
 8008fac:	463e      	mov	r6, r7
 8008fae:	42be      	cmp	r6, r7
 8008fb0:	d900      	bls.n	8008fb4 <__ssputs_r+0x72>
 8008fb2:	463e      	mov	r6, r7
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	4632      	mov	r2, r6
 8008fb8:	4641      	mov	r1, r8
 8008fba:	f001 f9f6 	bl	800a3aa <memmove>
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	1b9b      	subs	r3, r3, r6
 8008fc2:	60a3      	str	r3, [r4, #8]
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	4433      	add	r3, r6
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	f001 f8b8 	bl	800a146 <_realloc_r>
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d1e0      	bne.n	8008f9e <__ssputs_r+0x5c>
 8008fdc:	6921      	ldr	r1, [r4, #16]
 8008fde:	4650      	mov	r0, sl
 8008fe0:	f001 faa8 	bl	800a534 <_free_r>
 8008fe4:	230c      	movs	r3, #12
 8008fe6:	f8ca 3000 	str.w	r3, [sl]
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ff6:	e7e9      	b.n	8008fcc <__ssputs_r+0x8a>

08008ff8 <_svfiprintf_r>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	4698      	mov	r8, r3
 8008ffe:	898b      	ldrh	r3, [r1, #12]
 8009000:	061b      	lsls	r3, r3, #24
 8009002:	b09d      	sub	sp, #116	@ 0x74
 8009004:	4607      	mov	r7, r0
 8009006:	460d      	mov	r5, r1
 8009008:	4614      	mov	r4, r2
 800900a:	d510      	bpl.n	800902e <_svfiprintf_r+0x36>
 800900c:	690b      	ldr	r3, [r1, #16]
 800900e:	b973      	cbnz	r3, 800902e <_svfiprintf_r+0x36>
 8009010:	2140      	movs	r1, #64	@ 0x40
 8009012:	f000 fa59 	bl	80094c8 <_malloc_r>
 8009016:	6028      	str	r0, [r5, #0]
 8009018:	6128      	str	r0, [r5, #16]
 800901a:	b930      	cbnz	r0, 800902a <_svfiprintf_r+0x32>
 800901c:	230c      	movs	r3, #12
 800901e:	603b      	str	r3, [r7, #0]
 8009020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009024:	b01d      	add	sp, #116	@ 0x74
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	2340      	movs	r3, #64	@ 0x40
 800902c:	616b      	str	r3, [r5, #20]
 800902e:	2300      	movs	r3, #0
 8009030:	9309      	str	r3, [sp, #36]	@ 0x24
 8009032:	2320      	movs	r3, #32
 8009034:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009038:	f8cd 800c 	str.w	r8, [sp, #12]
 800903c:	2330      	movs	r3, #48	@ 0x30
 800903e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091dc <_svfiprintf_r+0x1e4>
 8009042:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009046:	f04f 0901 	mov.w	r9, #1
 800904a:	4623      	mov	r3, r4
 800904c:	469a      	mov	sl, r3
 800904e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009052:	b10a      	cbz	r2, 8009058 <_svfiprintf_r+0x60>
 8009054:	2a25      	cmp	r2, #37	@ 0x25
 8009056:	d1f9      	bne.n	800904c <_svfiprintf_r+0x54>
 8009058:	ebba 0b04 	subs.w	fp, sl, r4
 800905c:	d00b      	beq.n	8009076 <_svfiprintf_r+0x7e>
 800905e:	465b      	mov	r3, fp
 8009060:	4622      	mov	r2, r4
 8009062:	4629      	mov	r1, r5
 8009064:	4638      	mov	r0, r7
 8009066:	f7ff ff6c 	bl	8008f42 <__ssputs_r>
 800906a:	3001      	adds	r0, #1
 800906c:	f000 80a7 	beq.w	80091be <_svfiprintf_r+0x1c6>
 8009070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009072:	445a      	add	r2, fp
 8009074:	9209      	str	r2, [sp, #36]	@ 0x24
 8009076:	f89a 3000 	ldrb.w	r3, [sl]
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 809f 	beq.w	80091be <_svfiprintf_r+0x1c6>
 8009080:	2300      	movs	r3, #0
 8009082:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800908a:	f10a 0a01 	add.w	sl, sl, #1
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	9307      	str	r3, [sp, #28]
 8009092:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009096:	931a      	str	r3, [sp, #104]	@ 0x68
 8009098:	4654      	mov	r4, sl
 800909a:	2205      	movs	r2, #5
 800909c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a0:	484e      	ldr	r0, [pc, #312]	@ (80091dc <_svfiprintf_r+0x1e4>)
 80090a2:	f7f7 f8bd 	bl	8000220 <memchr>
 80090a6:	9a04      	ldr	r2, [sp, #16]
 80090a8:	b9d8      	cbnz	r0, 80090e2 <_svfiprintf_r+0xea>
 80090aa:	06d0      	lsls	r0, r2, #27
 80090ac:	bf44      	itt	mi
 80090ae:	2320      	movmi	r3, #32
 80090b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090b4:	0711      	lsls	r1, r2, #28
 80090b6:	bf44      	itt	mi
 80090b8:	232b      	movmi	r3, #43	@ 0x2b
 80090ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090be:	f89a 3000 	ldrb.w	r3, [sl]
 80090c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090c4:	d015      	beq.n	80090f2 <_svfiprintf_r+0xfa>
 80090c6:	9a07      	ldr	r2, [sp, #28]
 80090c8:	4654      	mov	r4, sl
 80090ca:	2000      	movs	r0, #0
 80090cc:	f04f 0c0a 	mov.w	ip, #10
 80090d0:	4621      	mov	r1, r4
 80090d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d6:	3b30      	subs	r3, #48	@ 0x30
 80090d8:	2b09      	cmp	r3, #9
 80090da:	d94b      	bls.n	8009174 <_svfiprintf_r+0x17c>
 80090dc:	b1b0      	cbz	r0, 800910c <_svfiprintf_r+0x114>
 80090de:	9207      	str	r2, [sp, #28]
 80090e0:	e014      	b.n	800910c <_svfiprintf_r+0x114>
 80090e2:	eba0 0308 	sub.w	r3, r0, r8
 80090e6:	fa09 f303 	lsl.w	r3, r9, r3
 80090ea:	4313      	orrs	r3, r2
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	46a2      	mov	sl, r4
 80090f0:	e7d2      	b.n	8009098 <_svfiprintf_r+0xa0>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	1d19      	adds	r1, r3, #4
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	9103      	str	r1, [sp, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfbb      	ittet	lt
 80090fe:	425b      	neglt	r3, r3
 8009100:	f042 0202 	orrlt.w	r2, r2, #2
 8009104:	9307      	strge	r3, [sp, #28]
 8009106:	9307      	strlt	r3, [sp, #28]
 8009108:	bfb8      	it	lt
 800910a:	9204      	strlt	r2, [sp, #16]
 800910c:	7823      	ldrb	r3, [r4, #0]
 800910e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009110:	d10a      	bne.n	8009128 <_svfiprintf_r+0x130>
 8009112:	7863      	ldrb	r3, [r4, #1]
 8009114:	2b2a      	cmp	r3, #42	@ 0x2a
 8009116:	d132      	bne.n	800917e <_svfiprintf_r+0x186>
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	1d1a      	adds	r2, r3, #4
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	9203      	str	r2, [sp, #12]
 8009120:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009124:	3402      	adds	r4, #2
 8009126:	9305      	str	r3, [sp, #20]
 8009128:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091ec <_svfiprintf_r+0x1f4>
 800912c:	7821      	ldrb	r1, [r4, #0]
 800912e:	2203      	movs	r2, #3
 8009130:	4650      	mov	r0, sl
 8009132:	f7f7 f875 	bl	8000220 <memchr>
 8009136:	b138      	cbz	r0, 8009148 <_svfiprintf_r+0x150>
 8009138:	9b04      	ldr	r3, [sp, #16]
 800913a:	eba0 000a 	sub.w	r0, r0, sl
 800913e:	2240      	movs	r2, #64	@ 0x40
 8009140:	4082      	lsls	r2, r0
 8009142:	4313      	orrs	r3, r2
 8009144:	3401      	adds	r4, #1
 8009146:	9304      	str	r3, [sp, #16]
 8009148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914c:	4824      	ldr	r0, [pc, #144]	@ (80091e0 <_svfiprintf_r+0x1e8>)
 800914e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009152:	2206      	movs	r2, #6
 8009154:	f7f7 f864 	bl	8000220 <memchr>
 8009158:	2800      	cmp	r0, #0
 800915a:	d036      	beq.n	80091ca <_svfiprintf_r+0x1d2>
 800915c:	4b21      	ldr	r3, [pc, #132]	@ (80091e4 <_svfiprintf_r+0x1ec>)
 800915e:	bb1b      	cbnz	r3, 80091a8 <_svfiprintf_r+0x1b0>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	3307      	adds	r3, #7
 8009164:	f023 0307 	bic.w	r3, r3, #7
 8009168:	3308      	adds	r3, #8
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916e:	4433      	add	r3, r6
 8009170:	9309      	str	r3, [sp, #36]	@ 0x24
 8009172:	e76a      	b.n	800904a <_svfiprintf_r+0x52>
 8009174:	fb0c 3202 	mla	r2, ip, r2, r3
 8009178:	460c      	mov	r4, r1
 800917a:	2001      	movs	r0, #1
 800917c:	e7a8      	b.n	80090d0 <_svfiprintf_r+0xd8>
 800917e:	2300      	movs	r3, #0
 8009180:	3401      	adds	r4, #1
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	4619      	mov	r1, r3
 8009186:	f04f 0c0a 	mov.w	ip, #10
 800918a:	4620      	mov	r0, r4
 800918c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009190:	3a30      	subs	r2, #48	@ 0x30
 8009192:	2a09      	cmp	r2, #9
 8009194:	d903      	bls.n	800919e <_svfiprintf_r+0x1a6>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0c6      	beq.n	8009128 <_svfiprintf_r+0x130>
 800919a:	9105      	str	r1, [sp, #20]
 800919c:	e7c4      	b.n	8009128 <_svfiprintf_r+0x130>
 800919e:	fb0c 2101 	mla	r1, ip, r1, r2
 80091a2:	4604      	mov	r4, r0
 80091a4:	2301      	movs	r3, #1
 80091a6:	e7f0      	b.n	800918a <_svfiprintf_r+0x192>
 80091a8:	ab03      	add	r3, sp, #12
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	462a      	mov	r2, r5
 80091ae:	4b0e      	ldr	r3, [pc, #56]	@ (80091e8 <_svfiprintf_r+0x1f0>)
 80091b0:	a904      	add	r1, sp, #16
 80091b2:	4638      	mov	r0, r7
 80091b4:	f7fc ff1c 	bl	8005ff0 <_printf_float>
 80091b8:	1c42      	adds	r2, r0, #1
 80091ba:	4606      	mov	r6, r0
 80091bc:	d1d6      	bne.n	800916c <_svfiprintf_r+0x174>
 80091be:	89ab      	ldrh	r3, [r5, #12]
 80091c0:	065b      	lsls	r3, r3, #25
 80091c2:	f53f af2d 	bmi.w	8009020 <_svfiprintf_r+0x28>
 80091c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091c8:	e72c      	b.n	8009024 <_svfiprintf_r+0x2c>
 80091ca:	ab03      	add	r3, sp, #12
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	462a      	mov	r2, r5
 80091d0:	4b05      	ldr	r3, [pc, #20]	@ (80091e8 <_svfiprintf_r+0x1f0>)
 80091d2:	a904      	add	r1, sp, #16
 80091d4:	4638      	mov	r0, r7
 80091d6:	f7fd f9a3 	bl	8006520 <_printf_i>
 80091da:	e7ed      	b.n	80091b8 <_svfiprintf_r+0x1c0>
 80091dc:	0800aa86 	.word	0x0800aa86
 80091e0:	0800aa90 	.word	0x0800aa90
 80091e4:	08005ff1 	.word	0x08005ff1
 80091e8:	08008f43 	.word	0x08008f43
 80091ec:	0800aa8c 	.word	0x0800aa8c

080091f0 <__sfputc_r>:
 80091f0:	6893      	ldr	r3, [r2, #8]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	b410      	push	{r4}
 80091f8:	6093      	str	r3, [r2, #8]
 80091fa:	da08      	bge.n	800920e <__sfputc_r+0x1e>
 80091fc:	6994      	ldr	r4, [r2, #24]
 80091fe:	42a3      	cmp	r3, r4
 8009200:	db01      	blt.n	8009206 <__sfputc_r+0x16>
 8009202:	290a      	cmp	r1, #10
 8009204:	d103      	bne.n	800920e <__sfputc_r+0x1e>
 8009206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800920a:	f000 bfca 	b.w	800a1a2 <__swbuf_r>
 800920e:	6813      	ldr	r3, [r2, #0]
 8009210:	1c58      	adds	r0, r3, #1
 8009212:	6010      	str	r0, [r2, #0]
 8009214:	7019      	strb	r1, [r3, #0]
 8009216:	4608      	mov	r0, r1
 8009218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800921c:	4770      	bx	lr

0800921e <__sfputs_r>:
 800921e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009220:	4606      	mov	r6, r0
 8009222:	460f      	mov	r7, r1
 8009224:	4614      	mov	r4, r2
 8009226:	18d5      	adds	r5, r2, r3
 8009228:	42ac      	cmp	r4, r5
 800922a:	d101      	bne.n	8009230 <__sfputs_r+0x12>
 800922c:	2000      	movs	r0, #0
 800922e:	e007      	b.n	8009240 <__sfputs_r+0x22>
 8009230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009234:	463a      	mov	r2, r7
 8009236:	4630      	mov	r0, r6
 8009238:	f7ff ffda 	bl	80091f0 <__sfputc_r>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d1f3      	bne.n	8009228 <__sfputs_r+0xa>
 8009240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009244 <_vfiprintf_r>:
 8009244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009248:	460d      	mov	r5, r1
 800924a:	b09d      	sub	sp, #116	@ 0x74
 800924c:	4614      	mov	r4, r2
 800924e:	4698      	mov	r8, r3
 8009250:	4606      	mov	r6, r0
 8009252:	b118      	cbz	r0, 800925c <_vfiprintf_r+0x18>
 8009254:	6a03      	ldr	r3, [r0, #32]
 8009256:	b90b      	cbnz	r3, 800925c <_vfiprintf_r+0x18>
 8009258:	f7fd fd42 	bl	8006ce0 <__sinit>
 800925c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800925e:	07d9      	lsls	r1, r3, #31
 8009260:	d405      	bmi.n	800926e <_vfiprintf_r+0x2a>
 8009262:	89ab      	ldrh	r3, [r5, #12]
 8009264:	059a      	lsls	r2, r3, #22
 8009266:	d402      	bmi.n	800926e <_vfiprintf_r+0x2a>
 8009268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800926a:	f7fe fcc4 	bl	8007bf6 <__retarget_lock_acquire_recursive>
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	071b      	lsls	r3, r3, #28
 8009272:	d501      	bpl.n	8009278 <_vfiprintf_r+0x34>
 8009274:	692b      	ldr	r3, [r5, #16]
 8009276:	b99b      	cbnz	r3, 80092a0 <_vfiprintf_r+0x5c>
 8009278:	4629      	mov	r1, r5
 800927a:	4630      	mov	r0, r6
 800927c:	f000 ffd0 	bl	800a220 <__swsetup_r>
 8009280:	b170      	cbz	r0, 80092a0 <_vfiprintf_r+0x5c>
 8009282:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009284:	07dc      	lsls	r4, r3, #31
 8009286:	d504      	bpl.n	8009292 <_vfiprintf_r+0x4e>
 8009288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800928c:	b01d      	add	sp, #116	@ 0x74
 800928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	0598      	lsls	r0, r3, #22
 8009296:	d4f7      	bmi.n	8009288 <_vfiprintf_r+0x44>
 8009298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800929a:	f7fe fcad 	bl	8007bf8 <__retarget_lock_release_recursive>
 800929e:	e7f3      	b.n	8009288 <_vfiprintf_r+0x44>
 80092a0:	2300      	movs	r3, #0
 80092a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092a4:	2320      	movs	r3, #32
 80092a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ae:	2330      	movs	r3, #48	@ 0x30
 80092b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009460 <_vfiprintf_r+0x21c>
 80092b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092b8:	f04f 0901 	mov.w	r9, #1
 80092bc:	4623      	mov	r3, r4
 80092be:	469a      	mov	sl, r3
 80092c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c4:	b10a      	cbz	r2, 80092ca <_vfiprintf_r+0x86>
 80092c6:	2a25      	cmp	r2, #37	@ 0x25
 80092c8:	d1f9      	bne.n	80092be <_vfiprintf_r+0x7a>
 80092ca:	ebba 0b04 	subs.w	fp, sl, r4
 80092ce:	d00b      	beq.n	80092e8 <_vfiprintf_r+0xa4>
 80092d0:	465b      	mov	r3, fp
 80092d2:	4622      	mov	r2, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	4630      	mov	r0, r6
 80092d8:	f7ff ffa1 	bl	800921e <__sfputs_r>
 80092dc:	3001      	adds	r0, #1
 80092de:	f000 80a7 	beq.w	8009430 <_vfiprintf_r+0x1ec>
 80092e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092e4:	445a      	add	r2, fp
 80092e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80092e8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 809f 	beq.w	8009430 <_vfiprintf_r+0x1ec>
 80092f2:	2300      	movs	r3, #0
 80092f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092fc:	f10a 0a01 	add.w	sl, sl, #1
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	9307      	str	r3, [sp, #28]
 8009304:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009308:	931a      	str	r3, [sp, #104]	@ 0x68
 800930a:	4654      	mov	r4, sl
 800930c:	2205      	movs	r2, #5
 800930e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009312:	4853      	ldr	r0, [pc, #332]	@ (8009460 <_vfiprintf_r+0x21c>)
 8009314:	f7f6 ff84 	bl	8000220 <memchr>
 8009318:	9a04      	ldr	r2, [sp, #16]
 800931a:	b9d8      	cbnz	r0, 8009354 <_vfiprintf_r+0x110>
 800931c:	06d1      	lsls	r1, r2, #27
 800931e:	bf44      	itt	mi
 8009320:	2320      	movmi	r3, #32
 8009322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009326:	0713      	lsls	r3, r2, #28
 8009328:	bf44      	itt	mi
 800932a:	232b      	movmi	r3, #43	@ 0x2b
 800932c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009330:	f89a 3000 	ldrb.w	r3, [sl]
 8009334:	2b2a      	cmp	r3, #42	@ 0x2a
 8009336:	d015      	beq.n	8009364 <_vfiprintf_r+0x120>
 8009338:	9a07      	ldr	r2, [sp, #28]
 800933a:	4654      	mov	r4, sl
 800933c:	2000      	movs	r0, #0
 800933e:	f04f 0c0a 	mov.w	ip, #10
 8009342:	4621      	mov	r1, r4
 8009344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009348:	3b30      	subs	r3, #48	@ 0x30
 800934a:	2b09      	cmp	r3, #9
 800934c:	d94b      	bls.n	80093e6 <_vfiprintf_r+0x1a2>
 800934e:	b1b0      	cbz	r0, 800937e <_vfiprintf_r+0x13a>
 8009350:	9207      	str	r2, [sp, #28]
 8009352:	e014      	b.n	800937e <_vfiprintf_r+0x13a>
 8009354:	eba0 0308 	sub.w	r3, r0, r8
 8009358:	fa09 f303 	lsl.w	r3, r9, r3
 800935c:	4313      	orrs	r3, r2
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	46a2      	mov	sl, r4
 8009362:	e7d2      	b.n	800930a <_vfiprintf_r+0xc6>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	1d19      	adds	r1, r3, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	9103      	str	r1, [sp, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	bfbb      	ittet	lt
 8009370:	425b      	neglt	r3, r3
 8009372:	f042 0202 	orrlt.w	r2, r2, #2
 8009376:	9307      	strge	r3, [sp, #28]
 8009378:	9307      	strlt	r3, [sp, #28]
 800937a:	bfb8      	it	lt
 800937c:	9204      	strlt	r2, [sp, #16]
 800937e:	7823      	ldrb	r3, [r4, #0]
 8009380:	2b2e      	cmp	r3, #46	@ 0x2e
 8009382:	d10a      	bne.n	800939a <_vfiprintf_r+0x156>
 8009384:	7863      	ldrb	r3, [r4, #1]
 8009386:	2b2a      	cmp	r3, #42	@ 0x2a
 8009388:	d132      	bne.n	80093f0 <_vfiprintf_r+0x1ac>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	1d1a      	adds	r2, r3, #4
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	9203      	str	r2, [sp, #12]
 8009392:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009396:	3402      	adds	r4, #2
 8009398:	9305      	str	r3, [sp, #20]
 800939a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009470 <_vfiprintf_r+0x22c>
 800939e:	7821      	ldrb	r1, [r4, #0]
 80093a0:	2203      	movs	r2, #3
 80093a2:	4650      	mov	r0, sl
 80093a4:	f7f6 ff3c 	bl	8000220 <memchr>
 80093a8:	b138      	cbz	r0, 80093ba <_vfiprintf_r+0x176>
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	eba0 000a 	sub.w	r0, r0, sl
 80093b0:	2240      	movs	r2, #64	@ 0x40
 80093b2:	4082      	lsls	r2, r0
 80093b4:	4313      	orrs	r3, r2
 80093b6:	3401      	adds	r4, #1
 80093b8:	9304      	str	r3, [sp, #16]
 80093ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093be:	4829      	ldr	r0, [pc, #164]	@ (8009464 <_vfiprintf_r+0x220>)
 80093c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093c4:	2206      	movs	r2, #6
 80093c6:	f7f6 ff2b 	bl	8000220 <memchr>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d03f      	beq.n	800944e <_vfiprintf_r+0x20a>
 80093ce:	4b26      	ldr	r3, [pc, #152]	@ (8009468 <_vfiprintf_r+0x224>)
 80093d0:	bb1b      	cbnz	r3, 800941a <_vfiprintf_r+0x1d6>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	3307      	adds	r3, #7
 80093d6:	f023 0307 	bic.w	r3, r3, #7
 80093da:	3308      	adds	r3, #8
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e0:	443b      	add	r3, r7
 80093e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e4:	e76a      	b.n	80092bc <_vfiprintf_r+0x78>
 80093e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ea:	460c      	mov	r4, r1
 80093ec:	2001      	movs	r0, #1
 80093ee:	e7a8      	b.n	8009342 <_vfiprintf_r+0xfe>
 80093f0:	2300      	movs	r3, #0
 80093f2:	3401      	adds	r4, #1
 80093f4:	9305      	str	r3, [sp, #20]
 80093f6:	4619      	mov	r1, r3
 80093f8:	f04f 0c0a 	mov.w	ip, #10
 80093fc:	4620      	mov	r0, r4
 80093fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009402:	3a30      	subs	r2, #48	@ 0x30
 8009404:	2a09      	cmp	r2, #9
 8009406:	d903      	bls.n	8009410 <_vfiprintf_r+0x1cc>
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0c6      	beq.n	800939a <_vfiprintf_r+0x156>
 800940c:	9105      	str	r1, [sp, #20]
 800940e:	e7c4      	b.n	800939a <_vfiprintf_r+0x156>
 8009410:	fb0c 2101 	mla	r1, ip, r1, r2
 8009414:	4604      	mov	r4, r0
 8009416:	2301      	movs	r3, #1
 8009418:	e7f0      	b.n	80093fc <_vfiprintf_r+0x1b8>
 800941a:	ab03      	add	r3, sp, #12
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	462a      	mov	r2, r5
 8009420:	4b12      	ldr	r3, [pc, #72]	@ (800946c <_vfiprintf_r+0x228>)
 8009422:	a904      	add	r1, sp, #16
 8009424:	4630      	mov	r0, r6
 8009426:	f7fc fde3 	bl	8005ff0 <_printf_float>
 800942a:	4607      	mov	r7, r0
 800942c:	1c78      	adds	r0, r7, #1
 800942e:	d1d6      	bne.n	80093de <_vfiprintf_r+0x19a>
 8009430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009432:	07d9      	lsls	r1, r3, #31
 8009434:	d405      	bmi.n	8009442 <_vfiprintf_r+0x1fe>
 8009436:	89ab      	ldrh	r3, [r5, #12]
 8009438:	059a      	lsls	r2, r3, #22
 800943a:	d402      	bmi.n	8009442 <_vfiprintf_r+0x1fe>
 800943c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800943e:	f7fe fbdb 	bl	8007bf8 <__retarget_lock_release_recursive>
 8009442:	89ab      	ldrh	r3, [r5, #12]
 8009444:	065b      	lsls	r3, r3, #25
 8009446:	f53f af1f 	bmi.w	8009288 <_vfiprintf_r+0x44>
 800944a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800944c:	e71e      	b.n	800928c <_vfiprintf_r+0x48>
 800944e:	ab03      	add	r3, sp, #12
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	462a      	mov	r2, r5
 8009454:	4b05      	ldr	r3, [pc, #20]	@ (800946c <_vfiprintf_r+0x228>)
 8009456:	a904      	add	r1, sp, #16
 8009458:	4630      	mov	r0, r6
 800945a:	f7fd f861 	bl	8006520 <_printf_i>
 800945e:	e7e4      	b.n	800942a <_vfiprintf_r+0x1e6>
 8009460:	0800aa86 	.word	0x0800aa86
 8009464:	0800aa90 	.word	0x0800aa90
 8009468:	08005ff1 	.word	0x08005ff1
 800946c:	0800921f 	.word	0x0800921f
 8009470:	0800aa8c 	.word	0x0800aa8c

08009474 <malloc>:
 8009474:	4b02      	ldr	r3, [pc, #8]	@ (8009480 <malloc+0xc>)
 8009476:	4601      	mov	r1, r0
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f000 b825 	b.w	80094c8 <_malloc_r>
 800947e:	bf00      	nop
 8009480:	20000184 	.word	0x20000184

08009484 <sbrk_aligned>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4e0f      	ldr	r6, [pc, #60]	@ (80094c4 <sbrk_aligned+0x40>)
 8009488:	460c      	mov	r4, r1
 800948a:	6831      	ldr	r1, [r6, #0]
 800948c:	4605      	mov	r5, r0
 800948e:	b911      	cbnz	r1, 8009496 <sbrk_aligned+0x12>
 8009490:	f000 fffc 	bl	800a48c <_sbrk_r>
 8009494:	6030      	str	r0, [r6, #0]
 8009496:	4621      	mov	r1, r4
 8009498:	4628      	mov	r0, r5
 800949a:	f000 fff7 	bl	800a48c <_sbrk_r>
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	d103      	bne.n	80094aa <sbrk_aligned+0x26>
 80094a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80094a6:	4620      	mov	r0, r4
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
 80094aa:	1cc4      	adds	r4, r0, #3
 80094ac:	f024 0403 	bic.w	r4, r4, #3
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d0f8      	beq.n	80094a6 <sbrk_aligned+0x22>
 80094b4:	1a21      	subs	r1, r4, r0
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 ffe8 	bl	800a48c <_sbrk_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d1f2      	bne.n	80094a6 <sbrk_aligned+0x22>
 80094c0:	e7ef      	b.n	80094a2 <sbrk_aligned+0x1e>
 80094c2:	bf00      	nop
 80094c4:	20000ccc 	.word	0x20000ccc

080094c8 <_malloc_r>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	1ccd      	adds	r5, r1, #3
 80094ce:	f025 0503 	bic.w	r5, r5, #3
 80094d2:	3508      	adds	r5, #8
 80094d4:	2d0c      	cmp	r5, #12
 80094d6:	bf38      	it	cc
 80094d8:	250c      	movcc	r5, #12
 80094da:	2d00      	cmp	r5, #0
 80094dc:	4606      	mov	r6, r0
 80094de:	db01      	blt.n	80094e4 <_malloc_r+0x1c>
 80094e0:	42a9      	cmp	r1, r5
 80094e2:	d904      	bls.n	80094ee <_malloc_r+0x26>
 80094e4:	230c      	movs	r3, #12
 80094e6:	6033      	str	r3, [r6, #0]
 80094e8:	2000      	movs	r0, #0
 80094ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095c4 <_malloc_r+0xfc>
 80094f2:	f000 f927 	bl	8009744 <__malloc_lock>
 80094f6:	f8d8 3000 	ldr.w	r3, [r8]
 80094fa:	461c      	mov	r4, r3
 80094fc:	bb44      	cbnz	r4, 8009550 <_malloc_r+0x88>
 80094fe:	4629      	mov	r1, r5
 8009500:	4630      	mov	r0, r6
 8009502:	f7ff ffbf 	bl	8009484 <sbrk_aligned>
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	4604      	mov	r4, r0
 800950a:	d158      	bne.n	80095be <_malloc_r+0xf6>
 800950c:	f8d8 4000 	ldr.w	r4, [r8]
 8009510:	4627      	mov	r7, r4
 8009512:	2f00      	cmp	r7, #0
 8009514:	d143      	bne.n	800959e <_malloc_r+0xd6>
 8009516:	2c00      	cmp	r4, #0
 8009518:	d04b      	beq.n	80095b2 <_malloc_r+0xea>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	4639      	mov	r1, r7
 800951e:	4630      	mov	r0, r6
 8009520:	eb04 0903 	add.w	r9, r4, r3
 8009524:	f000 ffb2 	bl	800a48c <_sbrk_r>
 8009528:	4581      	cmp	r9, r0
 800952a:	d142      	bne.n	80095b2 <_malloc_r+0xea>
 800952c:	6821      	ldr	r1, [r4, #0]
 800952e:	1a6d      	subs	r5, r5, r1
 8009530:	4629      	mov	r1, r5
 8009532:	4630      	mov	r0, r6
 8009534:	f7ff ffa6 	bl	8009484 <sbrk_aligned>
 8009538:	3001      	adds	r0, #1
 800953a:	d03a      	beq.n	80095b2 <_malloc_r+0xea>
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	442b      	add	r3, r5
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	f8d8 3000 	ldr.w	r3, [r8]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	bb62      	cbnz	r2, 80095a4 <_malloc_r+0xdc>
 800954a:	f8c8 7000 	str.w	r7, [r8]
 800954e:	e00f      	b.n	8009570 <_malloc_r+0xa8>
 8009550:	6822      	ldr	r2, [r4, #0]
 8009552:	1b52      	subs	r2, r2, r5
 8009554:	d420      	bmi.n	8009598 <_malloc_r+0xd0>
 8009556:	2a0b      	cmp	r2, #11
 8009558:	d917      	bls.n	800958a <_malloc_r+0xc2>
 800955a:	1961      	adds	r1, r4, r5
 800955c:	42a3      	cmp	r3, r4
 800955e:	6025      	str	r5, [r4, #0]
 8009560:	bf18      	it	ne
 8009562:	6059      	strne	r1, [r3, #4]
 8009564:	6863      	ldr	r3, [r4, #4]
 8009566:	bf08      	it	eq
 8009568:	f8c8 1000 	streq.w	r1, [r8]
 800956c:	5162      	str	r2, [r4, r5]
 800956e:	604b      	str	r3, [r1, #4]
 8009570:	4630      	mov	r0, r6
 8009572:	f000 f8ed 	bl	8009750 <__malloc_unlock>
 8009576:	f104 000b 	add.w	r0, r4, #11
 800957a:	1d23      	adds	r3, r4, #4
 800957c:	f020 0007 	bic.w	r0, r0, #7
 8009580:	1ac2      	subs	r2, r0, r3
 8009582:	bf1c      	itt	ne
 8009584:	1a1b      	subne	r3, r3, r0
 8009586:	50a3      	strne	r3, [r4, r2]
 8009588:	e7af      	b.n	80094ea <_malloc_r+0x22>
 800958a:	6862      	ldr	r2, [r4, #4]
 800958c:	42a3      	cmp	r3, r4
 800958e:	bf0c      	ite	eq
 8009590:	f8c8 2000 	streq.w	r2, [r8]
 8009594:	605a      	strne	r2, [r3, #4]
 8009596:	e7eb      	b.n	8009570 <_malloc_r+0xa8>
 8009598:	4623      	mov	r3, r4
 800959a:	6864      	ldr	r4, [r4, #4]
 800959c:	e7ae      	b.n	80094fc <_malloc_r+0x34>
 800959e:	463c      	mov	r4, r7
 80095a0:	687f      	ldr	r7, [r7, #4]
 80095a2:	e7b6      	b.n	8009512 <_malloc_r+0x4a>
 80095a4:	461a      	mov	r2, r3
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	d1fb      	bne.n	80095a4 <_malloc_r+0xdc>
 80095ac:	2300      	movs	r3, #0
 80095ae:	6053      	str	r3, [r2, #4]
 80095b0:	e7de      	b.n	8009570 <_malloc_r+0xa8>
 80095b2:	230c      	movs	r3, #12
 80095b4:	6033      	str	r3, [r6, #0]
 80095b6:	4630      	mov	r0, r6
 80095b8:	f000 f8ca 	bl	8009750 <__malloc_unlock>
 80095bc:	e794      	b.n	80094e8 <_malloc_r+0x20>
 80095be:	6005      	str	r5, [r0, #0]
 80095c0:	e7d6      	b.n	8009570 <_malloc_r+0xa8>
 80095c2:	bf00      	nop
 80095c4:	20000cd0 	.word	0x20000cd0

080095c8 <__ascii_mbtowc>:
 80095c8:	b082      	sub	sp, #8
 80095ca:	b901      	cbnz	r1, 80095ce <__ascii_mbtowc+0x6>
 80095cc:	a901      	add	r1, sp, #4
 80095ce:	b142      	cbz	r2, 80095e2 <__ascii_mbtowc+0x1a>
 80095d0:	b14b      	cbz	r3, 80095e6 <__ascii_mbtowc+0x1e>
 80095d2:	7813      	ldrb	r3, [r2, #0]
 80095d4:	600b      	str	r3, [r1, #0]
 80095d6:	7812      	ldrb	r2, [r2, #0]
 80095d8:	1e10      	subs	r0, r2, #0
 80095da:	bf18      	it	ne
 80095dc:	2001      	movne	r0, #1
 80095de:	b002      	add	sp, #8
 80095e0:	4770      	bx	lr
 80095e2:	4610      	mov	r0, r2
 80095e4:	e7fb      	b.n	80095de <__ascii_mbtowc+0x16>
 80095e6:	f06f 0001 	mvn.w	r0, #1
 80095ea:	e7f8      	b.n	80095de <__ascii_mbtowc+0x16>

080095ec <__sflush_r>:
 80095ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	0716      	lsls	r6, r2, #28
 80095f6:	4605      	mov	r5, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	d454      	bmi.n	80096a6 <__sflush_r+0xba>
 80095fc:	684b      	ldr	r3, [r1, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dc02      	bgt.n	8009608 <__sflush_r+0x1c>
 8009602:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	dd48      	ble.n	800969a <__sflush_r+0xae>
 8009608:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800960a:	2e00      	cmp	r6, #0
 800960c:	d045      	beq.n	800969a <__sflush_r+0xae>
 800960e:	2300      	movs	r3, #0
 8009610:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009614:	682f      	ldr	r7, [r5, #0]
 8009616:	6a21      	ldr	r1, [r4, #32]
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	d030      	beq.n	800967e <__sflush_r+0x92>
 800961c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	0759      	lsls	r1, r3, #29
 8009622:	d505      	bpl.n	8009630 <__sflush_r+0x44>
 8009624:	6863      	ldr	r3, [r4, #4]
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800962a:	b10b      	cbz	r3, 8009630 <__sflush_r+0x44>
 800962c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	2300      	movs	r3, #0
 8009632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009634:	6a21      	ldr	r1, [r4, #32]
 8009636:	4628      	mov	r0, r5
 8009638:	47b0      	blx	r6
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	d106      	bne.n	800964e <__sflush_r+0x62>
 8009640:	6829      	ldr	r1, [r5, #0]
 8009642:	291d      	cmp	r1, #29
 8009644:	d82b      	bhi.n	800969e <__sflush_r+0xb2>
 8009646:	4a2a      	ldr	r2, [pc, #168]	@ (80096f0 <__sflush_r+0x104>)
 8009648:	410a      	asrs	r2, r1
 800964a:	07d6      	lsls	r6, r2, #31
 800964c:	d427      	bmi.n	800969e <__sflush_r+0xb2>
 800964e:	2200      	movs	r2, #0
 8009650:	6062      	str	r2, [r4, #4]
 8009652:	04d9      	lsls	r1, r3, #19
 8009654:	6922      	ldr	r2, [r4, #16]
 8009656:	6022      	str	r2, [r4, #0]
 8009658:	d504      	bpl.n	8009664 <__sflush_r+0x78>
 800965a:	1c42      	adds	r2, r0, #1
 800965c:	d101      	bne.n	8009662 <__sflush_r+0x76>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b903      	cbnz	r3, 8009664 <__sflush_r+0x78>
 8009662:	6560      	str	r0, [r4, #84]	@ 0x54
 8009664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009666:	602f      	str	r7, [r5, #0]
 8009668:	b1b9      	cbz	r1, 800969a <__sflush_r+0xae>
 800966a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800966e:	4299      	cmp	r1, r3
 8009670:	d002      	beq.n	8009678 <__sflush_r+0x8c>
 8009672:	4628      	mov	r0, r5
 8009674:	f000 ff5e 	bl	800a534 <_free_r>
 8009678:	2300      	movs	r3, #0
 800967a:	6363      	str	r3, [r4, #52]	@ 0x34
 800967c:	e00d      	b.n	800969a <__sflush_r+0xae>
 800967e:	2301      	movs	r3, #1
 8009680:	4628      	mov	r0, r5
 8009682:	47b0      	blx	r6
 8009684:	4602      	mov	r2, r0
 8009686:	1c50      	adds	r0, r2, #1
 8009688:	d1c9      	bne.n	800961e <__sflush_r+0x32>
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0c6      	beq.n	800961e <__sflush_r+0x32>
 8009690:	2b1d      	cmp	r3, #29
 8009692:	d001      	beq.n	8009698 <__sflush_r+0xac>
 8009694:	2b16      	cmp	r3, #22
 8009696:	d11e      	bne.n	80096d6 <__sflush_r+0xea>
 8009698:	602f      	str	r7, [r5, #0]
 800969a:	2000      	movs	r0, #0
 800969c:	e022      	b.n	80096e4 <__sflush_r+0xf8>
 800969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	e01b      	b.n	80096de <__sflush_r+0xf2>
 80096a6:	690f      	ldr	r7, [r1, #16]
 80096a8:	2f00      	cmp	r7, #0
 80096aa:	d0f6      	beq.n	800969a <__sflush_r+0xae>
 80096ac:	0793      	lsls	r3, r2, #30
 80096ae:	680e      	ldr	r6, [r1, #0]
 80096b0:	bf08      	it	eq
 80096b2:	694b      	ldreq	r3, [r1, #20]
 80096b4:	600f      	str	r7, [r1, #0]
 80096b6:	bf18      	it	ne
 80096b8:	2300      	movne	r3, #0
 80096ba:	eba6 0807 	sub.w	r8, r6, r7
 80096be:	608b      	str	r3, [r1, #8]
 80096c0:	f1b8 0f00 	cmp.w	r8, #0
 80096c4:	dde9      	ble.n	800969a <__sflush_r+0xae>
 80096c6:	6a21      	ldr	r1, [r4, #32]
 80096c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80096ca:	4643      	mov	r3, r8
 80096cc:	463a      	mov	r2, r7
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b0      	blx	r6
 80096d2:	2800      	cmp	r0, #0
 80096d4:	dc08      	bgt.n	80096e8 <__sflush_r+0xfc>
 80096d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	4407      	add	r7, r0
 80096ea:	eba8 0800 	sub.w	r8, r8, r0
 80096ee:	e7e7      	b.n	80096c0 <__sflush_r+0xd4>
 80096f0:	dfbffffe 	.word	0xdfbffffe

080096f4 <_fflush_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	690b      	ldr	r3, [r1, #16]
 80096f8:	4605      	mov	r5, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	b913      	cbnz	r3, 8009704 <_fflush_r+0x10>
 80096fe:	2500      	movs	r5, #0
 8009700:	4628      	mov	r0, r5
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	b118      	cbz	r0, 800970e <_fflush_r+0x1a>
 8009706:	6a03      	ldr	r3, [r0, #32]
 8009708:	b90b      	cbnz	r3, 800970e <_fflush_r+0x1a>
 800970a:	f7fd fae9 	bl	8006ce0 <__sinit>
 800970e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0f3      	beq.n	80096fe <_fflush_r+0xa>
 8009716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009718:	07d0      	lsls	r0, r2, #31
 800971a:	d404      	bmi.n	8009726 <_fflush_r+0x32>
 800971c:	0599      	lsls	r1, r3, #22
 800971e:	d402      	bmi.n	8009726 <_fflush_r+0x32>
 8009720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009722:	f7fe fa68 	bl	8007bf6 <__retarget_lock_acquire_recursive>
 8009726:	4628      	mov	r0, r5
 8009728:	4621      	mov	r1, r4
 800972a:	f7ff ff5f 	bl	80095ec <__sflush_r>
 800972e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009730:	07da      	lsls	r2, r3, #31
 8009732:	4605      	mov	r5, r0
 8009734:	d4e4      	bmi.n	8009700 <_fflush_r+0xc>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	059b      	lsls	r3, r3, #22
 800973a:	d4e1      	bmi.n	8009700 <_fflush_r+0xc>
 800973c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800973e:	f7fe fa5b 	bl	8007bf8 <__retarget_lock_release_recursive>
 8009742:	e7dd      	b.n	8009700 <_fflush_r+0xc>

08009744 <__malloc_lock>:
 8009744:	4801      	ldr	r0, [pc, #4]	@ (800974c <__malloc_lock+0x8>)
 8009746:	f7fe ba56 	b.w	8007bf6 <__retarget_lock_acquire_recursive>
 800974a:	bf00      	nop
 800974c:	20000cc8 	.word	0x20000cc8

08009750 <__malloc_unlock>:
 8009750:	4801      	ldr	r0, [pc, #4]	@ (8009758 <__malloc_unlock+0x8>)
 8009752:	f7fe ba51 	b.w	8007bf8 <__retarget_lock_release_recursive>
 8009756:	bf00      	nop
 8009758:	20000cc8 	.word	0x20000cc8

0800975c <_Balloc>:
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	69c6      	ldr	r6, [r0, #28]
 8009760:	4604      	mov	r4, r0
 8009762:	460d      	mov	r5, r1
 8009764:	b976      	cbnz	r6, 8009784 <_Balloc+0x28>
 8009766:	2010      	movs	r0, #16
 8009768:	f7ff fe84 	bl	8009474 <malloc>
 800976c:	4602      	mov	r2, r0
 800976e:	61e0      	str	r0, [r4, #28]
 8009770:	b920      	cbnz	r0, 800977c <_Balloc+0x20>
 8009772:	4b18      	ldr	r3, [pc, #96]	@ (80097d4 <_Balloc+0x78>)
 8009774:	4818      	ldr	r0, [pc, #96]	@ (80097d8 <_Balloc+0x7c>)
 8009776:	216b      	movs	r1, #107	@ 0x6b
 8009778:	f000 feaa 	bl	800a4d0 <__assert_func>
 800977c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009780:	6006      	str	r6, [r0, #0]
 8009782:	60c6      	str	r6, [r0, #12]
 8009784:	69e6      	ldr	r6, [r4, #28]
 8009786:	68f3      	ldr	r3, [r6, #12]
 8009788:	b183      	cbz	r3, 80097ac <_Balloc+0x50>
 800978a:	69e3      	ldr	r3, [r4, #28]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009792:	b9b8      	cbnz	r0, 80097c4 <_Balloc+0x68>
 8009794:	2101      	movs	r1, #1
 8009796:	fa01 f605 	lsl.w	r6, r1, r5
 800979a:	1d72      	adds	r2, r6, #5
 800979c:	0092      	lsls	r2, r2, #2
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 feb4 	bl	800a50c <_calloc_r>
 80097a4:	b160      	cbz	r0, 80097c0 <_Balloc+0x64>
 80097a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097aa:	e00e      	b.n	80097ca <_Balloc+0x6e>
 80097ac:	2221      	movs	r2, #33	@ 0x21
 80097ae:	2104      	movs	r1, #4
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 feab 	bl	800a50c <_calloc_r>
 80097b6:	69e3      	ldr	r3, [r4, #28]
 80097b8:	60f0      	str	r0, [r6, #12]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e4      	bne.n	800978a <_Balloc+0x2e>
 80097c0:	2000      	movs	r0, #0
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	6802      	ldr	r2, [r0, #0]
 80097c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097ca:	2300      	movs	r3, #0
 80097cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097d0:	e7f7      	b.n	80097c2 <_Balloc+0x66>
 80097d2:	bf00      	nop
 80097d4:	0800a9a6 	.word	0x0800a9a6
 80097d8:	0800aa97 	.word	0x0800aa97

080097dc <_Bfree>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	69c6      	ldr	r6, [r0, #28]
 80097e0:	4605      	mov	r5, r0
 80097e2:	460c      	mov	r4, r1
 80097e4:	b976      	cbnz	r6, 8009804 <_Bfree+0x28>
 80097e6:	2010      	movs	r0, #16
 80097e8:	f7ff fe44 	bl	8009474 <malloc>
 80097ec:	4602      	mov	r2, r0
 80097ee:	61e8      	str	r0, [r5, #28]
 80097f0:	b920      	cbnz	r0, 80097fc <_Bfree+0x20>
 80097f2:	4b09      	ldr	r3, [pc, #36]	@ (8009818 <_Bfree+0x3c>)
 80097f4:	4809      	ldr	r0, [pc, #36]	@ (800981c <_Bfree+0x40>)
 80097f6:	218f      	movs	r1, #143	@ 0x8f
 80097f8:	f000 fe6a 	bl	800a4d0 <__assert_func>
 80097fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009800:	6006      	str	r6, [r0, #0]
 8009802:	60c6      	str	r6, [r0, #12]
 8009804:	b13c      	cbz	r4, 8009816 <_Bfree+0x3a>
 8009806:	69eb      	ldr	r3, [r5, #28]
 8009808:	6862      	ldr	r2, [r4, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009810:	6021      	str	r1, [r4, #0]
 8009812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	0800a9a6 	.word	0x0800a9a6
 800981c:	0800aa97 	.word	0x0800aa97

08009820 <__multadd>:
 8009820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	690d      	ldr	r5, [r1, #16]
 8009826:	4607      	mov	r7, r0
 8009828:	460c      	mov	r4, r1
 800982a:	461e      	mov	r6, r3
 800982c:	f101 0c14 	add.w	ip, r1, #20
 8009830:	2000      	movs	r0, #0
 8009832:	f8dc 3000 	ldr.w	r3, [ip]
 8009836:	b299      	uxth	r1, r3
 8009838:	fb02 6101 	mla	r1, r2, r1, r6
 800983c:	0c1e      	lsrs	r6, r3, #16
 800983e:	0c0b      	lsrs	r3, r1, #16
 8009840:	fb02 3306 	mla	r3, r2, r6, r3
 8009844:	b289      	uxth	r1, r1
 8009846:	3001      	adds	r0, #1
 8009848:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800984c:	4285      	cmp	r5, r0
 800984e:	f84c 1b04 	str.w	r1, [ip], #4
 8009852:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009856:	dcec      	bgt.n	8009832 <__multadd+0x12>
 8009858:	b30e      	cbz	r6, 800989e <__multadd+0x7e>
 800985a:	68a3      	ldr	r3, [r4, #8]
 800985c:	42ab      	cmp	r3, r5
 800985e:	dc19      	bgt.n	8009894 <__multadd+0x74>
 8009860:	6861      	ldr	r1, [r4, #4]
 8009862:	4638      	mov	r0, r7
 8009864:	3101      	adds	r1, #1
 8009866:	f7ff ff79 	bl	800975c <_Balloc>
 800986a:	4680      	mov	r8, r0
 800986c:	b928      	cbnz	r0, 800987a <__multadd+0x5a>
 800986e:	4602      	mov	r2, r0
 8009870:	4b0c      	ldr	r3, [pc, #48]	@ (80098a4 <__multadd+0x84>)
 8009872:	480d      	ldr	r0, [pc, #52]	@ (80098a8 <__multadd+0x88>)
 8009874:	21ba      	movs	r1, #186	@ 0xba
 8009876:	f000 fe2b 	bl	800a4d0 <__assert_func>
 800987a:	6922      	ldr	r2, [r4, #16]
 800987c:	3202      	adds	r2, #2
 800987e:	f104 010c 	add.w	r1, r4, #12
 8009882:	0092      	lsls	r2, r2, #2
 8009884:	300c      	adds	r0, #12
 8009886:	f7fe f9b8 	bl	8007bfa <memcpy>
 800988a:	4621      	mov	r1, r4
 800988c:	4638      	mov	r0, r7
 800988e:	f7ff ffa5 	bl	80097dc <_Bfree>
 8009892:	4644      	mov	r4, r8
 8009894:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009898:	3501      	adds	r5, #1
 800989a:	615e      	str	r6, [r3, #20]
 800989c:	6125      	str	r5, [r4, #16]
 800989e:	4620      	mov	r0, r4
 80098a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a4:	0800aa15 	.word	0x0800aa15
 80098a8:	0800aa97 	.word	0x0800aa97

080098ac <__s2b>:
 80098ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b0:	460c      	mov	r4, r1
 80098b2:	4615      	mov	r5, r2
 80098b4:	461f      	mov	r7, r3
 80098b6:	2209      	movs	r2, #9
 80098b8:	3308      	adds	r3, #8
 80098ba:	4606      	mov	r6, r0
 80098bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80098c0:	2100      	movs	r1, #0
 80098c2:	2201      	movs	r2, #1
 80098c4:	429a      	cmp	r2, r3
 80098c6:	db09      	blt.n	80098dc <__s2b+0x30>
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7ff ff47 	bl	800975c <_Balloc>
 80098ce:	b940      	cbnz	r0, 80098e2 <__s2b+0x36>
 80098d0:	4602      	mov	r2, r0
 80098d2:	4b19      	ldr	r3, [pc, #100]	@ (8009938 <__s2b+0x8c>)
 80098d4:	4819      	ldr	r0, [pc, #100]	@ (800993c <__s2b+0x90>)
 80098d6:	21d3      	movs	r1, #211	@ 0xd3
 80098d8:	f000 fdfa 	bl	800a4d0 <__assert_func>
 80098dc:	0052      	lsls	r2, r2, #1
 80098de:	3101      	adds	r1, #1
 80098e0:	e7f0      	b.n	80098c4 <__s2b+0x18>
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	6143      	str	r3, [r0, #20]
 80098e6:	2d09      	cmp	r5, #9
 80098e8:	f04f 0301 	mov.w	r3, #1
 80098ec:	6103      	str	r3, [r0, #16]
 80098ee:	dd16      	ble.n	800991e <__s2b+0x72>
 80098f0:	f104 0909 	add.w	r9, r4, #9
 80098f4:	46c8      	mov	r8, r9
 80098f6:	442c      	add	r4, r5
 80098f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098fc:	4601      	mov	r1, r0
 80098fe:	3b30      	subs	r3, #48	@ 0x30
 8009900:	220a      	movs	r2, #10
 8009902:	4630      	mov	r0, r6
 8009904:	f7ff ff8c 	bl	8009820 <__multadd>
 8009908:	45a0      	cmp	r8, r4
 800990a:	d1f5      	bne.n	80098f8 <__s2b+0x4c>
 800990c:	f1a5 0408 	sub.w	r4, r5, #8
 8009910:	444c      	add	r4, r9
 8009912:	1b2d      	subs	r5, r5, r4
 8009914:	1963      	adds	r3, r4, r5
 8009916:	42bb      	cmp	r3, r7
 8009918:	db04      	blt.n	8009924 <__s2b+0x78>
 800991a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991e:	340a      	adds	r4, #10
 8009920:	2509      	movs	r5, #9
 8009922:	e7f6      	b.n	8009912 <__s2b+0x66>
 8009924:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009928:	4601      	mov	r1, r0
 800992a:	3b30      	subs	r3, #48	@ 0x30
 800992c:	220a      	movs	r2, #10
 800992e:	4630      	mov	r0, r6
 8009930:	f7ff ff76 	bl	8009820 <__multadd>
 8009934:	e7ee      	b.n	8009914 <__s2b+0x68>
 8009936:	bf00      	nop
 8009938:	0800aa15 	.word	0x0800aa15
 800993c:	0800aa97 	.word	0x0800aa97

08009940 <__hi0bits>:
 8009940:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009944:	4603      	mov	r3, r0
 8009946:	bf36      	itet	cc
 8009948:	0403      	lslcc	r3, r0, #16
 800994a:	2000      	movcs	r0, #0
 800994c:	2010      	movcc	r0, #16
 800994e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009952:	bf3c      	itt	cc
 8009954:	021b      	lslcc	r3, r3, #8
 8009956:	3008      	addcc	r0, #8
 8009958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800995c:	bf3c      	itt	cc
 800995e:	011b      	lslcc	r3, r3, #4
 8009960:	3004      	addcc	r0, #4
 8009962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009966:	bf3c      	itt	cc
 8009968:	009b      	lslcc	r3, r3, #2
 800996a:	3002      	addcc	r0, #2
 800996c:	2b00      	cmp	r3, #0
 800996e:	db05      	blt.n	800997c <__hi0bits+0x3c>
 8009970:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009974:	f100 0001 	add.w	r0, r0, #1
 8009978:	bf08      	it	eq
 800997a:	2020      	moveq	r0, #32
 800997c:	4770      	bx	lr

0800997e <__lo0bits>:
 800997e:	6803      	ldr	r3, [r0, #0]
 8009980:	4602      	mov	r2, r0
 8009982:	f013 0007 	ands.w	r0, r3, #7
 8009986:	d00b      	beq.n	80099a0 <__lo0bits+0x22>
 8009988:	07d9      	lsls	r1, r3, #31
 800998a:	d421      	bmi.n	80099d0 <__lo0bits+0x52>
 800998c:	0798      	lsls	r0, r3, #30
 800998e:	bf49      	itett	mi
 8009990:	085b      	lsrmi	r3, r3, #1
 8009992:	089b      	lsrpl	r3, r3, #2
 8009994:	2001      	movmi	r0, #1
 8009996:	6013      	strmi	r3, [r2, #0]
 8009998:	bf5c      	itt	pl
 800999a:	6013      	strpl	r3, [r2, #0]
 800999c:	2002      	movpl	r0, #2
 800999e:	4770      	bx	lr
 80099a0:	b299      	uxth	r1, r3
 80099a2:	b909      	cbnz	r1, 80099a8 <__lo0bits+0x2a>
 80099a4:	0c1b      	lsrs	r3, r3, #16
 80099a6:	2010      	movs	r0, #16
 80099a8:	b2d9      	uxtb	r1, r3
 80099aa:	b909      	cbnz	r1, 80099b0 <__lo0bits+0x32>
 80099ac:	3008      	adds	r0, #8
 80099ae:	0a1b      	lsrs	r3, r3, #8
 80099b0:	0719      	lsls	r1, r3, #28
 80099b2:	bf04      	itt	eq
 80099b4:	091b      	lsreq	r3, r3, #4
 80099b6:	3004      	addeq	r0, #4
 80099b8:	0799      	lsls	r1, r3, #30
 80099ba:	bf04      	itt	eq
 80099bc:	089b      	lsreq	r3, r3, #2
 80099be:	3002      	addeq	r0, #2
 80099c0:	07d9      	lsls	r1, r3, #31
 80099c2:	d403      	bmi.n	80099cc <__lo0bits+0x4e>
 80099c4:	085b      	lsrs	r3, r3, #1
 80099c6:	f100 0001 	add.w	r0, r0, #1
 80099ca:	d003      	beq.n	80099d4 <__lo0bits+0x56>
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	4770      	bx	lr
 80099d0:	2000      	movs	r0, #0
 80099d2:	4770      	bx	lr
 80099d4:	2020      	movs	r0, #32
 80099d6:	4770      	bx	lr

080099d8 <__i2b>:
 80099d8:	b510      	push	{r4, lr}
 80099da:	460c      	mov	r4, r1
 80099dc:	2101      	movs	r1, #1
 80099de:	f7ff febd 	bl	800975c <_Balloc>
 80099e2:	4602      	mov	r2, r0
 80099e4:	b928      	cbnz	r0, 80099f2 <__i2b+0x1a>
 80099e6:	4b05      	ldr	r3, [pc, #20]	@ (80099fc <__i2b+0x24>)
 80099e8:	4805      	ldr	r0, [pc, #20]	@ (8009a00 <__i2b+0x28>)
 80099ea:	f240 1145 	movw	r1, #325	@ 0x145
 80099ee:	f000 fd6f 	bl	800a4d0 <__assert_func>
 80099f2:	2301      	movs	r3, #1
 80099f4:	6144      	str	r4, [r0, #20]
 80099f6:	6103      	str	r3, [r0, #16]
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	bf00      	nop
 80099fc:	0800aa15 	.word	0x0800aa15
 8009a00:	0800aa97 	.word	0x0800aa97

08009a04 <__multiply>:
 8009a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	4614      	mov	r4, r2
 8009a0a:	690a      	ldr	r2, [r1, #16]
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	bfa8      	it	ge
 8009a12:	4623      	movge	r3, r4
 8009a14:	460f      	mov	r7, r1
 8009a16:	bfa4      	itt	ge
 8009a18:	460c      	movge	r4, r1
 8009a1a:	461f      	movge	r7, r3
 8009a1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a24:	68a3      	ldr	r3, [r4, #8]
 8009a26:	6861      	ldr	r1, [r4, #4]
 8009a28:	eb0a 0609 	add.w	r6, sl, r9
 8009a2c:	42b3      	cmp	r3, r6
 8009a2e:	b085      	sub	sp, #20
 8009a30:	bfb8      	it	lt
 8009a32:	3101      	addlt	r1, #1
 8009a34:	f7ff fe92 	bl	800975c <_Balloc>
 8009a38:	b930      	cbnz	r0, 8009a48 <__multiply+0x44>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	4b44      	ldr	r3, [pc, #272]	@ (8009b50 <__multiply+0x14c>)
 8009a3e:	4845      	ldr	r0, [pc, #276]	@ (8009b54 <__multiply+0x150>)
 8009a40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a44:	f000 fd44 	bl	800a4d0 <__assert_func>
 8009a48:	f100 0514 	add.w	r5, r0, #20
 8009a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a50:	462b      	mov	r3, r5
 8009a52:	2200      	movs	r2, #0
 8009a54:	4543      	cmp	r3, r8
 8009a56:	d321      	bcc.n	8009a9c <__multiply+0x98>
 8009a58:	f107 0114 	add.w	r1, r7, #20
 8009a5c:	f104 0214 	add.w	r2, r4, #20
 8009a60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009a64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009a68:	9302      	str	r3, [sp, #8]
 8009a6a:	1b13      	subs	r3, r2, r4
 8009a6c:	3b15      	subs	r3, #21
 8009a6e:	f023 0303 	bic.w	r3, r3, #3
 8009a72:	3304      	adds	r3, #4
 8009a74:	f104 0715 	add.w	r7, r4, #21
 8009a78:	42ba      	cmp	r2, r7
 8009a7a:	bf38      	it	cc
 8009a7c:	2304      	movcc	r3, #4
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	9b02      	ldr	r3, [sp, #8]
 8009a82:	9103      	str	r1, [sp, #12]
 8009a84:	428b      	cmp	r3, r1
 8009a86:	d80c      	bhi.n	8009aa2 <__multiply+0x9e>
 8009a88:	2e00      	cmp	r6, #0
 8009a8a:	dd03      	ble.n	8009a94 <__multiply+0x90>
 8009a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d05b      	beq.n	8009b4c <__multiply+0x148>
 8009a94:	6106      	str	r6, [r0, #16]
 8009a96:	b005      	add	sp, #20
 8009a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9c:	f843 2b04 	str.w	r2, [r3], #4
 8009aa0:	e7d8      	b.n	8009a54 <__multiply+0x50>
 8009aa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009aa6:	f1ba 0f00 	cmp.w	sl, #0
 8009aaa:	d024      	beq.n	8009af6 <__multiply+0xf2>
 8009aac:	f104 0e14 	add.w	lr, r4, #20
 8009ab0:	46a9      	mov	r9, r5
 8009ab2:	f04f 0c00 	mov.w	ip, #0
 8009ab6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009aba:	f8d9 3000 	ldr.w	r3, [r9]
 8009abe:	fa1f fb87 	uxth.w	fp, r7
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ac8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009acc:	f8d9 7000 	ldr.w	r7, [r9]
 8009ad0:	4463      	add	r3, ip
 8009ad2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ad6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009ada:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ae4:	4572      	cmp	r2, lr
 8009ae6:	f849 3b04 	str.w	r3, [r9], #4
 8009aea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009aee:	d8e2      	bhi.n	8009ab6 <__multiply+0xb2>
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	f845 c003 	str.w	ip, [r5, r3]
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009afc:	3104      	adds	r1, #4
 8009afe:	f1b9 0f00 	cmp.w	r9, #0
 8009b02:	d021      	beq.n	8009b48 <__multiply+0x144>
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	f104 0c14 	add.w	ip, r4, #20
 8009b0a:	46ae      	mov	lr, r5
 8009b0c:	f04f 0a00 	mov.w	sl, #0
 8009b10:	f8bc b000 	ldrh.w	fp, [ip]
 8009b14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b18:	fb09 770b 	mla	r7, r9, fp, r7
 8009b1c:	4457      	add	r7, sl
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b24:	f84e 3b04 	str.w	r3, [lr], #4
 8009b28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b30:	f8be 3000 	ldrh.w	r3, [lr]
 8009b34:	fb09 330a 	mla	r3, r9, sl, r3
 8009b38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b3c:	4562      	cmp	r2, ip
 8009b3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b42:	d8e5      	bhi.n	8009b10 <__multiply+0x10c>
 8009b44:	9f01      	ldr	r7, [sp, #4]
 8009b46:	51eb      	str	r3, [r5, r7]
 8009b48:	3504      	adds	r5, #4
 8009b4a:	e799      	b.n	8009a80 <__multiply+0x7c>
 8009b4c:	3e01      	subs	r6, #1
 8009b4e:	e79b      	b.n	8009a88 <__multiply+0x84>
 8009b50:	0800aa15 	.word	0x0800aa15
 8009b54:	0800aa97 	.word	0x0800aa97

08009b58 <__pow5mult>:
 8009b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	4615      	mov	r5, r2
 8009b5e:	f012 0203 	ands.w	r2, r2, #3
 8009b62:	4607      	mov	r7, r0
 8009b64:	460e      	mov	r6, r1
 8009b66:	d007      	beq.n	8009b78 <__pow5mult+0x20>
 8009b68:	4c25      	ldr	r4, [pc, #148]	@ (8009c00 <__pow5mult+0xa8>)
 8009b6a:	3a01      	subs	r2, #1
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b72:	f7ff fe55 	bl	8009820 <__multadd>
 8009b76:	4606      	mov	r6, r0
 8009b78:	10ad      	asrs	r5, r5, #2
 8009b7a:	d03d      	beq.n	8009bf8 <__pow5mult+0xa0>
 8009b7c:	69fc      	ldr	r4, [r7, #28]
 8009b7e:	b97c      	cbnz	r4, 8009ba0 <__pow5mult+0x48>
 8009b80:	2010      	movs	r0, #16
 8009b82:	f7ff fc77 	bl	8009474 <malloc>
 8009b86:	4602      	mov	r2, r0
 8009b88:	61f8      	str	r0, [r7, #28]
 8009b8a:	b928      	cbnz	r0, 8009b98 <__pow5mult+0x40>
 8009b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c04 <__pow5mult+0xac>)
 8009b8e:	481e      	ldr	r0, [pc, #120]	@ (8009c08 <__pow5mult+0xb0>)
 8009b90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b94:	f000 fc9c 	bl	800a4d0 <__assert_func>
 8009b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b9c:	6004      	str	r4, [r0, #0]
 8009b9e:	60c4      	str	r4, [r0, #12]
 8009ba0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ba8:	b94c      	cbnz	r4, 8009bbe <__pow5mult+0x66>
 8009baa:	f240 2171 	movw	r1, #625	@ 0x271
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f7ff ff12 	bl	80099d8 <__i2b>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bba:	4604      	mov	r4, r0
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	f04f 0900 	mov.w	r9, #0
 8009bc2:	07eb      	lsls	r3, r5, #31
 8009bc4:	d50a      	bpl.n	8009bdc <__pow5mult+0x84>
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4638      	mov	r0, r7
 8009bcc:	f7ff ff1a 	bl	8009a04 <__multiply>
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f7ff fe01 	bl	80097dc <_Bfree>
 8009bda:	4646      	mov	r6, r8
 8009bdc:	106d      	asrs	r5, r5, #1
 8009bde:	d00b      	beq.n	8009bf8 <__pow5mult+0xa0>
 8009be0:	6820      	ldr	r0, [r4, #0]
 8009be2:	b938      	cbnz	r0, 8009bf4 <__pow5mult+0x9c>
 8009be4:	4622      	mov	r2, r4
 8009be6:	4621      	mov	r1, r4
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff ff0b 	bl	8009a04 <__multiply>
 8009bee:	6020      	str	r0, [r4, #0]
 8009bf0:	f8c0 9000 	str.w	r9, [r0]
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	e7e4      	b.n	8009bc2 <__pow5mult+0x6a>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bfe:	bf00      	nop
 8009c00:	0800aaf0 	.word	0x0800aaf0
 8009c04:	0800a9a6 	.word	0x0800a9a6
 8009c08:	0800aa97 	.word	0x0800aa97

08009c0c <__lshift>:
 8009c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	460c      	mov	r4, r1
 8009c12:	6849      	ldr	r1, [r1, #4]
 8009c14:	6923      	ldr	r3, [r4, #16]
 8009c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	4691      	mov	r9, r2
 8009c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c24:	f108 0601 	add.w	r6, r8, #1
 8009c28:	42b3      	cmp	r3, r6
 8009c2a:	db0b      	blt.n	8009c44 <__lshift+0x38>
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	f7ff fd95 	bl	800975c <_Balloc>
 8009c32:	4605      	mov	r5, r0
 8009c34:	b948      	cbnz	r0, 8009c4a <__lshift+0x3e>
 8009c36:	4602      	mov	r2, r0
 8009c38:	4b28      	ldr	r3, [pc, #160]	@ (8009cdc <__lshift+0xd0>)
 8009c3a:	4829      	ldr	r0, [pc, #164]	@ (8009ce0 <__lshift+0xd4>)
 8009c3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c40:	f000 fc46 	bl	800a4d0 <__assert_func>
 8009c44:	3101      	adds	r1, #1
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	e7ee      	b.n	8009c28 <__lshift+0x1c>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f100 0114 	add.w	r1, r0, #20
 8009c50:	f100 0210 	add.w	r2, r0, #16
 8009c54:	4618      	mov	r0, r3
 8009c56:	4553      	cmp	r3, sl
 8009c58:	db33      	blt.n	8009cc2 <__lshift+0xb6>
 8009c5a:	6920      	ldr	r0, [r4, #16]
 8009c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c60:	f104 0314 	add.w	r3, r4, #20
 8009c64:	f019 091f 	ands.w	r9, r9, #31
 8009c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c70:	d02b      	beq.n	8009cca <__lshift+0xbe>
 8009c72:	f1c9 0e20 	rsb	lr, r9, #32
 8009c76:	468a      	mov	sl, r1
 8009c78:	2200      	movs	r2, #0
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009c80:	4310      	orrs	r0, r2
 8009c82:	f84a 0b04 	str.w	r0, [sl], #4
 8009c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c8a:	459c      	cmp	ip, r3
 8009c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c90:	d8f3      	bhi.n	8009c7a <__lshift+0x6e>
 8009c92:	ebac 0304 	sub.w	r3, ip, r4
 8009c96:	3b15      	subs	r3, #21
 8009c98:	f023 0303 	bic.w	r3, r3, #3
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	f104 0015 	add.w	r0, r4, #21
 8009ca2:	4584      	cmp	ip, r0
 8009ca4:	bf38      	it	cc
 8009ca6:	2304      	movcc	r3, #4
 8009ca8:	50ca      	str	r2, [r1, r3]
 8009caa:	b10a      	cbz	r2, 8009cb0 <__lshift+0xa4>
 8009cac:	f108 0602 	add.w	r6, r8, #2
 8009cb0:	3e01      	subs	r6, #1
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	612e      	str	r6, [r5, #16]
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	f7ff fd90 	bl	80097dc <_Bfree>
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	e7c5      	b.n	8009c56 <__lshift+0x4a>
 8009cca:	3904      	subs	r1, #4
 8009ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cd4:	459c      	cmp	ip, r3
 8009cd6:	d8f9      	bhi.n	8009ccc <__lshift+0xc0>
 8009cd8:	e7ea      	b.n	8009cb0 <__lshift+0xa4>
 8009cda:	bf00      	nop
 8009cdc:	0800aa15 	.word	0x0800aa15
 8009ce0:	0800aa97 	.word	0x0800aa97

08009ce4 <__mcmp>:
 8009ce4:	690a      	ldr	r2, [r1, #16]
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	6900      	ldr	r0, [r0, #16]
 8009cea:	1a80      	subs	r0, r0, r2
 8009cec:	b530      	push	{r4, r5, lr}
 8009cee:	d10e      	bne.n	8009d0e <__mcmp+0x2a>
 8009cf0:	3314      	adds	r3, #20
 8009cf2:	3114      	adds	r1, #20
 8009cf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009cfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d04:	4295      	cmp	r5, r2
 8009d06:	d003      	beq.n	8009d10 <__mcmp+0x2c>
 8009d08:	d205      	bcs.n	8009d16 <__mcmp+0x32>
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d0e:	bd30      	pop	{r4, r5, pc}
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	d3f3      	bcc.n	8009cfc <__mcmp+0x18>
 8009d14:	e7fb      	b.n	8009d0e <__mcmp+0x2a>
 8009d16:	2001      	movs	r0, #1
 8009d18:	e7f9      	b.n	8009d0e <__mcmp+0x2a>
	...

08009d1c <__mdiff>:
 8009d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d20:	4689      	mov	r9, r1
 8009d22:	4606      	mov	r6, r0
 8009d24:	4611      	mov	r1, r2
 8009d26:	4648      	mov	r0, r9
 8009d28:	4614      	mov	r4, r2
 8009d2a:	f7ff ffdb 	bl	8009ce4 <__mcmp>
 8009d2e:	1e05      	subs	r5, r0, #0
 8009d30:	d112      	bne.n	8009d58 <__mdiff+0x3c>
 8009d32:	4629      	mov	r1, r5
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff fd11 	bl	800975c <_Balloc>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	b928      	cbnz	r0, 8009d4a <__mdiff+0x2e>
 8009d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8009e3c <__mdiff+0x120>)
 8009d40:	f240 2137 	movw	r1, #567	@ 0x237
 8009d44:	483e      	ldr	r0, [pc, #248]	@ (8009e40 <__mdiff+0x124>)
 8009d46:	f000 fbc3 	bl	800a4d0 <__assert_func>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d50:	4610      	mov	r0, r2
 8009d52:	b003      	add	sp, #12
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	bfbc      	itt	lt
 8009d5a:	464b      	movlt	r3, r9
 8009d5c:	46a1      	movlt	r9, r4
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d64:	bfba      	itte	lt
 8009d66:	461c      	movlt	r4, r3
 8009d68:	2501      	movlt	r5, #1
 8009d6a:	2500      	movge	r5, #0
 8009d6c:	f7ff fcf6 	bl	800975c <_Balloc>
 8009d70:	4602      	mov	r2, r0
 8009d72:	b918      	cbnz	r0, 8009d7c <__mdiff+0x60>
 8009d74:	4b31      	ldr	r3, [pc, #196]	@ (8009e3c <__mdiff+0x120>)
 8009d76:	f240 2145 	movw	r1, #581	@ 0x245
 8009d7a:	e7e3      	b.n	8009d44 <__mdiff+0x28>
 8009d7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d80:	6926      	ldr	r6, [r4, #16]
 8009d82:	60c5      	str	r5, [r0, #12]
 8009d84:	f109 0310 	add.w	r3, r9, #16
 8009d88:	f109 0514 	add.w	r5, r9, #20
 8009d8c:	f104 0e14 	add.w	lr, r4, #20
 8009d90:	f100 0b14 	add.w	fp, r0, #20
 8009d94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	46d9      	mov	r9, fp
 8009da0:	f04f 0c00 	mov.w	ip, #0
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009daa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	fa1f f38a 	uxth.w	r3, sl
 8009db4:	4619      	mov	r1, r3
 8009db6:	b283      	uxth	r3, r0
 8009db8:	1acb      	subs	r3, r1, r3
 8009dba:	0c00      	lsrs	r0, r0, #16
 8009dbc:	4463      	add	r3, ip
 8009dbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009dc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009dcc:	4576      	cmp	r6, lr
 8009dce:	f849 3b04 	str.w	r3, [r9], #4
 8009dd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dd6:	d8e5      	bhi.n	8009da4 <__mdiff+0x88>
 8009dd8:	1b33      	subs	r3, r6, r4
 8009dda:	3b15      	subs	r3, #21
 8009ddc:	f023 0303 	bic.w	r3, r3, #3
 8009de0:	3415      	adds	r4, #21
 8009de2:	3304      	adds	r3, #4
 8009de4:	42a6      	cmp	r6, r4
 8009de6:	bf38      	it	cc
 8009de8:	2304      	movcc	r3, #4
 8009dea:	441d      	add	r5, r3
 8009dec:	445b      	add	r3, fp
 8009dee:	461e      	mov	r6, r3
 8009df0:	462c      	mov	r4, r5
 8009df2:	4544      	cmp	r4, r8
 8009df4:	d30e      	bcc.n	8009e14 <__mdiff+0xf8>
 8009df6:	f108 0103 	add.w	r1, r8, #3
 8009dfa:	1b49      	subs	r1, r1, r5
 8009dfc:	f021 0103 	bic.w	r1, r1, #3
 8009e00:	3d03      	subs	r5, #3
 8009e02:	45a8      	cmp	r8, r5
 8009e04:	bf38      	it	cc
 8009e06:	2100      	movcc	r1, #0
 8009e08:	440b      	add	r3, r1
 8009e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e0e:	b191      	cbz	r1, 8009e36 <__mdiff+0x11a>
 8009e10:	6117      	str	r7, [r2, #16]
 8009e12:	e79d      	b.n	8009d50 <__mdiff+0x34>
 8009e14:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e18:	46e6      	mov	lr, ip
 8009e1a:	0c08      	lsrs	r0, r1, #16
 8009e1c:	fa1c fc81 	uxtah	ip, ip, r1
 8009e20:	4471      	add	r1, lr
 8009e22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e26:	b289      	uxth	r1, r1
 8009e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e2c:	f846 1b04 	str.w	r1, [r6], #4
 8009e30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e34:	e7dd      	b.n	8009df2 <__mdiff+0xd6>
 8009e36:	3f01      	subs	r7, #1
 8009e38:	e7e7      	b.n	8009e0a <__mdiff+0xee>
 8009e3a:	bf00      	nop
 8009e3c:	0800aa15 	.word	0x0800aa15
 8009e40:	0800aa97 	.word	0x0800aa97

08009e44 <__ulp>:
 8009e44:	b082      	sub	sp, #8
 8009e46:	ed8d 0b00 	vstr	d0, [sp]
 8009e4a:	9a01      	ldr	r2, [sp, #4]
 8009e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e8c <__ulp+0x48>)
 8009e4e:	4013      	ands	r3, r2
 8009e50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dc08      	bgt.n	8009e6a <__ulp+0x26>
 8009e58:	425b      	negs	r3, r3
 8009e5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009e5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e62:	da04      	bge.n	8009e6e <__ulp+0x2a>
 8009e64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009e68:	4113      	asrs	r3, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	e008      	b.n	8009e80 <__ulp+0x3c>
 8009e6e:	f1a2 0314 	sub.w	r3, r2, #20
 8009e72:	2b1e      	cmp	r3, #30
 8009e74:	bfda      	itte	le
 8009e76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e7a:	40da      	lsrle	r2, r3
 8009e7c:	2201      	movgt	r2, #1
 8009e7e:	2300      	movs	r3, #0
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	ec41 0b10 	vmov	d0, r0, r1
 8009e88:	b002      	add	sp, #8
 8009e8a:	4770      	bx	lr
 8009e8c:	7ff00000 	.word	0x7ff00000

08009e90 <__b2d>:
 8009e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e94:	6906      	ldr	r6, [r0, #16]
 8009e96:	f100 0814 	add.w	r8, r0, #20
 8009e9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e9e:	1f37      	subs	r7, r6, #4
 8009ea0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	f7ff fd4b 	bl	8009940 <__hi0bits>
 8009eaa:	f1c0 0320 	rsb	r3, r0, #32
 8009eae:	280a      	cmp	r0, #10
 8009eb0:	600b      	str	r3, [r1, #0]
 8009eb2:	491b      	ldr	r1, [pc, #108]	@ (8009f20 <__b2d+0x90>)
 8009eb4:	dc15      	bgt.n	8009ee2 <__b2d+0x52>
 8009eb6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009eba:	fa22 f30c 	lsr.w	r3, r2, ip
 8009ebe:	45b8      	cmp	r8, r7
 8009ec0:	ea43 0501 	orr.w	r5, r3, r1
 8009ec4:	bf34      	ite	cc
 8009ec6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009eca:	2300      	movcs	r3, #0
 8009ecc:	3015      	adds	r0, #21
 8009ece:	fa02 f000 	lsl.w	r0, r2, r0
 8009ed2:	fa23 f30c 	lsr.w	r3, r3, ip
 8009ed6:	4303      	orrs	r3, r0
 8009ed8:	461c      	mov	r4, r3
 8009eda:	ec45 4b10 	vmov	d0, r4, r5
 8009ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee2:	45b8      	cmp	r8, r7
 8009ee4:	bf3a      	itte	cc
 8009ee6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009eea:	f1a6 0708 	subcc.w	r7, r6, #8
 8009eee:	2300      	movcs	r3, #0
 8009ef0:	380b      	subs	r0, #11
 8009ef2:	d012      	beq.n	8009f1a <__b2d+0x8a>
 8009ef4:	f1c0 0120 	rsb	r1, r0, #32
 8009ef8:	fa23 f401 	lsr.w	r4, r3, r1
 8009efc:	4082      	lsls	r2, r0
 8009efe:	4322      	orrs	r2, r4
 8009f00:	4547      	cmp	r7, r8
 8009f02:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009f06:	bf8c      	ite	hi
 8009f08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f0c:	2200      	movls	r2, #0
 8009f0e:	4083      	lsls	r3, r0
 8009f10:	40ca      	lsrs	r2, r1
 8009f12:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f16:	4313      	orrs	r3, r2
 8009f18:	e7de      	b.n	8009ed8 <__b2d+0x48>
 8009f1a:	ea42 0501 	orr.w	r5, r2, r1
 8009f1e:	e7db      	b.n	8009ed8 <__b2d+0x48>
 8009f20:	3ff00000 	.word	0x3ff00000

08009f24 <__d2b>:
 8009f24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f28:	460f      	mov	r7, r1
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	ec59 8b10 	vmov	r8, r9, d0
 8009f30:	4616      	mov	r6, r2
 8009f32:	f7ff fc13 	bl	800975c <_Balloc>
 8009f36:	4604      	mov	r4, r0
 8009f38:	b930      	cbnz	r0, 8009f48 <__d2b+0x24>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b23      	ldr	r3, [pc, #140]	@ (8009fcc <__d2b+0xa8>)
 8009f3e:	4824      	ldr	r0, [pc, #144]	@ (8009fd0 <__d2b+0xac>)
 8009f40:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f44:	f000 fac4 	bl	800a4d0 <__assert_func>
 8009f48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f50:	b10d      	cbz	r5, 8009f56 <__d2b+0x32>
 8009f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f56:	9301      	str	r3, [sp, #4]
 8009f58:	f1b8 0300 	subs.w	r3, r8, #0
 8009f5c:	d023      	beq.n	8009fa6 <__d2b+0x82>
 8009f5e:	4668      	mov	r0, sp
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	f7ff fd0c 	bl	800997e <__lo0bits>
 8009f66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f6a:	b1d0      	cbz	r0, 8009fa2 <__d2b+0x7e>
 8009f6c:	f1c0 0320 	rsb	r3, r0, #32
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	430b      	orrs	r3, r1
 8009f76:	40c2      	lsrs	r2, r0
 8009f78:	6163      	str	r3, [r4, #20]
 8009f7a:	9201      	str	r2, [sp, #4]
 8009f7c:	9b01      	ldr	r3, [sp, #4]
 8009f7e:	61a3      	str	r3, [r4, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bf0c      	ite	eq
 8009f84:	2201      	moveq	r2, #1
 8009f86:	2202      	movne	r2, #2
 8009f88:	6122      	str	r2, [r4, #16]
 8009f8a:	b1a5      	cbz	r5, 8009fb6 <__d2b+0x92>
 8009f8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f90:	4405      	add	r5, r0
 8009f92:	603d      	str	r5, [r7, #0]
 8009f94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f98:	6030      	str	r0, [r6, #0]
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	b003      	add	sp, #12
 8009f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fa2:	6161      	str	r1, [r4, #20]
 8009fa4:	e7ea      	b.n	8009f7c <__d2b+0x58>
 8009fa6:	a801      	add	r0, sp, #4
 8009fa8:	f7ff fce9 	bl	800997e <__lo0bits>
 8009fac:	9b01      	ldr	r3, [sp, #4]
 8009fae:	6163      	str	r3, [r4, #20]
 8009fb0:	3020      	adds	r0, #32
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	e7e8      	b.n	8009f88 <__d2b+0x64>
 8009fb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009fbe:	6038      	str	r0, [r7, #0]
 8009fc0:	6918      	ldr	r0, [r3, #16]
 8009fc2:	f7ff fcbd 	bl	8009940 <__hi0bits>
 8009fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fca:	e7e5      	b.n	8009f98 <__d2b+0x74>
 8009fcc:	0800aa15 	.word	0x0800aa15
 8009fd0:	0800aa97 	.word	0x0800aa97

08009fd4 <__ratio>:
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	e9cd 1000 	strd	r1, r0, [sp]
 8009fde:	a902      	add	r1, sp, #8
 8009fe0:	f7ff ff56 	bl	8009e90 <__b2d>
 8009fe4:	9800      	ldr	r0, [sp, #0]
 8009fe6:	a903      	add	r1, sp, #12
 8009fe8:	ec55 4b10 	vmov	r4, r5, d0
 8009fec:	f7ff ff50 	bl	8009e90 <__b2d>
 8009ff0:	9b01      	ldr	r3, [sp, #4]
 8009ff2:	6919      	ldr	r1, [r3, #16]
 8009ff4:	9b00      	ldr	r3, [sp, #0]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	1ac9      	subs	r1, r1, r3
 8009ffa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	ec5b ab10 	vmov	sl, fp, d0
 800a004:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bfce      	itee	gt
 800a00c:	462a      	movgt	r2, r5
 800a00e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a012:	465a      	movle	r2, fp
 800a014:	462f      	mov	r7, r5
 800a016:	46d9      	mov	r9, fp
 800a018:	bfcc      	ite	gt
 800a01a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a01e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a022:	464b      	mov	r3, r9
 800a024:	4652      	mov	r2, sl
 800a026:	4620      	mov	r0, r4
 800a028:	4639      	mov	r1, r7
 800a02a:	f7f6 fc37 	bl	800089c <__aeabi_ddiv>
 800a02e:	ec41 0b10 	vmov	d0, r0, r1
 800a032:	b005      	add	sp, #20
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a038 <__copybits>:
 800a038:	3901      	subs	r1, #1
 800a03a:	b570      	push	{r4, r5, r6, lr}
 800a03c:	1149      	asrs	r1, r1, #5
 800a03e:	6914      	ldr	r4, [r2, #16]
 800a040:	3101      	adds	r1, #1
 800a042:	f102 0314 	add.w	r3, r2, #20
 800a046:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a04a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a04e:	1f05      	subs	r5, r0, #4
 800a050:	42a3      	cmp	r3, r4
 800a052:	d30c      	bcc.n	800a06e <__copybits+0x36>
 800a054:	1aa3      	subs	r3, r4, r2
 800a056:	3b11      	subs	r3, #17
 800a058:	f023 0303 	bic.w	r3, r3, #3
 800a05c:	3211      	adds	r2, #17
 800a05e:	42a2      	cmp	r2, r4
 800a060:	bf88      	it	hi
 800a062:	2300      	movhi	r3, #0
 800a064:	4418      	add	r0, r3
 800a066:	2300      	movs	r3, #0
 800a068:	4288      	cmp	r0, r1
 800a06a:	d305      	bcc.n	800a078 <__copybits+0x40>
 800a06c:	bd70      	pop	{r4, r5, r6, pc}
 800a06e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a072:	f845 6f04 	str.w	r6, [r5, #4]!
 800a076:	e7eb      	b.n	800a050 <__copybits+0x18>
 800a078:	f840 3b04 	str.w	r3, [r0], #4
 800a07c:	e7f4      	b.n	800a068 <__copybits+0x30>

0800a07e <__any_on>:
 800a07e:	f100 0214 	add.w	r2, r0, #20
 800a082:	6900      	ldr	r0, [r0, #16]
 800a084:	114b      	asrs	r3, r1, #5
 800a086:	4298      	cmp	r0, r3
 800a088:	b510      	push	{r4, lr}
 800a08a:	db11      	blt.n	800a0b0 <__any_on+0x32>
 800a08c:	dd0a      	ble.n	800a0a4 <__any_on+0x26>
 800a08e:	f011 011f 	ands.w	r1, r1, #31
 800a092:	d007      	beq.n	800a0a4 <__any_on+0x26>
 800a094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a098:	fa24 f001 	lsr.w	r0, r4, r1
 800a09c:	fa00 f101 	lsl.w	r1, r0, r1
 800a0a0:	428c      	cmp	r4, r1
 800a0a2:	d10b      	bne.n	800a0bc <__any_on+0x3e>
 800a0a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d803      	bhi.n	800a0b4 <__any_on+0x36>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	bd10      	pop	{r4, pc}
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	e7f7      	b.n	800a0a4 <__any_on+0x26>
 800a0b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0b8:	2900      	cmp	r1, #0
 800a0ba:	d0f5      	beq.n	800a0a8 <__any_on+0x2a>
 800a0bc:	2001      	movs	r0, #1
 800a0be:	e7f6      	b.n	800a0ae <__any_on+0x30>

0800a0c0 <__sread>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c8:	f000 f9ce 	bl	800a468 <_read_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	bfab      	itete	ge
 800a0d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a0d4:	181b      	addge	r3, r3, r0
 800a0d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a0da:	bfac      	ite	ge
 800a0dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0de:	81a3      	strhlt	r3, [r4, #12]
 800a0e0:	bd10      	pop	{r4, pc}

0800a0e2 <__swrite>:
 800a0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e6:	461f      	mov	r7, r3
 800a0e8:	898b      	ldrh	r3, [r1, #12]
 800a0ea:	05db      	lsls	r3, r3, #23
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	4616      	mov	r6, r2
 800a0f2:	d505      	bpl.n	800a100 <__swrite+0x1e>
 800a0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f000 f9a2 	bl	800a444 <_lseek_r>
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a106:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a10a:	81a3      	strh	r3, [r4, #12]
 800a10c:	4632      	mov	r2, r6
 800a10e:	463b      	mov	r3, r7
 800a110:	4628      	mov	r0, r5
 800a112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a116:	f000 b9c9 	b.w	800a4ac <_write_r>

0800a11a <__sseek>:
 800a11a:	b510      	push	{r4, lr}
 800a11c:	460c      	mov	r4, r1
 800a11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a122:	f000 f98f 	bl	800a444 <_lseek_r>
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	bf15      	itete	ne
 800a12c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a12e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a132:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a136:	81a3      	strheq	r3, [r4, #12]
 800a138:	bf18      	it	ne
 800a13a:	81a3      	strhne	r3, [r4, #12]
 800a13c:	bd10      	pop	{r4, pc}

0800a13e <__sclose>:
 800a13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a142:	f000 b94d 	b.w	800a3e0 <_close_r>

0800a146 <_realloc_r>:
 800a146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14a:	4680      	mov	r8, r0
 800a14c:	4615      	mov	r5, r2
 800a14e:	460c      	mov	r4, r1
 800a150:	b921      	cbnz	r1, 800a15c <_realloc_r+0x16>
 800a152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a156:	4611      	mov	r1, r2
 800a158:	f7ff b9b6 	b.w	80094c8 <_malloc_r>
 800a15c:	b92a      	cbnz	r2, 800a16a <_realloc_r+0x24>
 800a15e:	f000 f9e9 	bl	800a534 <_free_r>
 800a162:	2400      	movs	r4, #0
 800a164:	4620      	mov	r0, r4
 800a166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16a:	f000 fa2d 	bl	800a5c8 <_malloc_usable_size_r>
 800a16e:	4285      	cmp	r5, r0
 800a170:	4606      	mov	r6, r0
 800a172:	d802      	bhi.n	800a17a <_realloc_r+0x34>
 800a174:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a178:	d8f4      	bhi.n	800a164 <_realloc_r+0x1e>
 800a17a:	4629      	mov	r1, r5
 800a17c:	4640      	mov	r0, r8
 800a17e:	f7ff f9a3 	bl	80094c8 <_malloc_r>
 800a182:	4607      	mov	r7, r0
 800a184:	2800      	cmp	r0, #0
 800a186:	d0ec      	beq.n	800a162 <_realloc_r+0x1c>
 800a188:	42b5      	cmp	r5, r6
 800a18a:	462a      	mov	r2, r5
 800a18c:	4621      	mov	r1, r4
 800a18e:	bf28      	it	cs
 800a190:	4632      	movcs	r2, r6
 800a192:	f7fd fd32 	bl	8007bfa <memcpy>
 800a196:	4621      	mov	r1, r4
 800a198:	4640      	mov	r0, r8
 800a19a:	f000 f9cb 	bl	800a534 <_free_r>
 800a19e:	463c      	mov	r4, r7
 800a1a0:	e7e0      	b.n	800a164 <_realloc_r+0x1e>

0800a1a2 <__swbuf_r>:
 800a1a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a4:	460e      	mov	r6, r1
 800a1a6:	4614      	mov	r4, r2
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	b118      	cbz	r0, 800a1b4 <__swbuf_r+0x12>
 800a1ac:	6a03      	ldr	r3, [r0, #32]
 800a1ae:	b90b      	cbnz	r3, 800a1b4 <__swbuf_r+0x12>
 800a1b0:	f7fc fd96 	bl	8006ce0 <__sinit>
 800a1b4:	69a3      	ldr	r3, [r4, #24]
 800a1b6:	60a3      	str	r3, [r4, #8]
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	071a      	lsls	r2, r3, #28
 800a1bc:	d501      	bpl.n	800a1c2 <__swbuf_r+0x20>
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	b943      	cbnz	r3, 800a1d4 <__swbuf_r+0x32>
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f000 f82b 	bl	800a220 <__swsetup_r>
 800a1ca:	b118      	cbz	r0, 800a1d4 <__swbuf_r+0x32>
 800a1cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	6922      	ldr	r2, [r4, #16]
 800a1d8:	1a98      	subs	r0, r3, r2
 800a1da:	6963      	ldr	r3, [r4, #20]
 800a1dc:	b2f6      	uxtb	r6, r6
 800a1de:	4283      	cmp	r3, r0
 800a1e0:	4637      	mov	r7, r6
 800a1e2:	dc05      	bgt.n	800a1f0 <__swbuf_r+0x4e>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f7ff fa84 	bl	80096f4 <_fflush_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d1ed      	bne.n	800a1cc <__swbuf_r+0x2a>
 800a1f0:	68a3      	ldr	r3, [r4, #8]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	6022      	str	r2, [r4, #0]
 800a1fc:	701e      	strb	r6, [r3, #0]
 800a1fe:	6962      	ldr	r2, [r4, #20]
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	429a      	cmp	r2, r3
 800a204:	d004      	beq.n	800a210 <__swbuf_r+0x6e>
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	07db      	lsls	r3, r3, #31
 800a20a:	d5e1      	bpl.n	800a1d0 <__swbuf_r+0x2e>
 800a20c:	2e0a      	cmp	r6, #10
 800a20e:	d1df      	bne.n	800a1d0 <__swbuf_r+0x2e>
 800a210:	4621      	mov	r1, r4
 800a212:	4628      	mov	r0, r5
 800a214:	f7ff fa6e 	bl	80096f4 <_fflush_r>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d0d9      	beq.n	800a1d0 <__swbuf_r+0x2e>
 800a21c:	e7d6      	b.n	800a1cc <__swbuf_r+0x2a>
	...

0800a220 <__swsetup_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4b29      	ldr	r3, [pc, #164]	@ (800a2c8 <__swsetup_r+0xa8>)
 800a224:	4605      	mov	r5, r0
 800a226:	6818      	ldr	r0, [r3, #0]
 800a228:	460c      	mov	r4, r1
 800a22a:	b118      	cbz	r0, 800a234 <__swsetup_r+0x14>
 800a22c:	6a03      	ldr	r3, [r0, #32]
 800a22e:	b90b      	cbnz	r3, 800a234 <__swsetup_r+0x14>
 800a230:	f7fc fd56 	bl	8006ce0 <__sinit>
 800a234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a238:	0719      	lsls	r1, r3, #28
 800a23a:	d422      	bmi.n	800a282 <__swsetup_r+0x62>
 800a23c:	06da      	lsls	r2, r3, #27
 800a23e:	d407      	bmi.n	800a250 <__swsetup_r+0x30>
 800a240:	2209      	movs	r2, #9
 800a242:	602a      	str	r2, [r5, #0]
 800a244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a24e:	e033      	b.n	800a2b8 <__swsetup_r+0x98>
 800a250:	0758      	lsls	r0, r3, #29
 800a252:	d512      	bpl.n	800a27a <__swsetup_r+0x5a>
 800a254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a256:	b141      	cbz	r1, 800a26a <__swsetup_r+0x4a>
 800a258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a25c:	4299      	cmp	r1, r3
 800a25e:	d002      	beq.n	800a266 <__swsetup_r+0x46>
 800a260:	4628      	mov	r0, r5
 800a262:	f000 f967 	bl	800a534 <_free_r>
 800a266:	2300      	movs	r3, #0
 800a268:	6363      	str	r3, [r4, #52]	@ 0x34
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	2300      	movs	r3, #0
 800a274:	6063      	str	r3, [r4, #4]
 800a276:	6923      	ldr	r3, [r4, #16]
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f043 0308 	orr.w	r3, r3, #8
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	b94b      	cbnz	r3, 800a29a <__swsetup_r+0x7a>
 800a286:	89a3      	ldrh	r3, [r4, #12]
 800a288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a28c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a290:	d003      	beq.n	800a29a <__swsetup_r+0x7a>
 800a292:	4621      	mov	r1, r4
 800a294:	4628      	mov	r0, r5
 800a296:	f000 f84c 	bl	800a332 <__smakebuf_r>
 800a29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a29e:	f013 0201 	ands.w	r2, r3, #1
 800a2a2:	d00a      	beq.n	800a2ba <__swsetup_r+0x9a>
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	60a2      	str	r2, [r4, #8]
 800a2a8:	6962      	ldr	r2, [r4, #20]
 800a2aa:	4252      	negs	r2, r2
 800a2ac:	61a2      	str	r2, [r4, #24]
 800a2ae:	6922      	ldr	r2, [r4, #16]
 800a2b0:	b942      	cbnz	r2, 800a2c4 <__swsetup_r+0xa4>
 800a2b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2b6:	d1c5      	bne.n	800a244 <__swsetup_r+0x24>
 800a2b8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ba:	0799      	lsls	r1, r3, #30
 800a2bc:	bf58      	it	pl
 800a2be:	6962      	ldrpl	r2, [r4, #20]
 800a2c0:	60a2      	str	r2, [r4, #8]
 800a2c2:	e7f4      	b.n	800a2ae <__swsetup_r+0x8e>
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	e7f7      	b.n	800a2b8 <__swsetup_r+0x98>
 800a2c8:	20000184 	.word	0x20000184

0800a2cc <__ascii_wctomb>:
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	4608      	mov	r0, r1
 800a2d0:	b141      	cbz	r1, 800a2e4 <__ascii_wctomb+0x18>
 800a2d2:	2aff      	cmp	r2, #255	@ 0xff
 800a2d4:	d904      	bls.n	800a2e0 <__ascii_wctomb+0x14>
 800a2d6:	228a      	movs	r2, #138	@ 0x8a
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2de:	4770      	bx	lr
 800a2e0:	700a      	strb	r2, [r1, #0]
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	4770      	bx	lr

0800a2e6 <__swhatbuf_r>:
 800a2e6:	b570      	push	{r4, r5, r6, lr}
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ee:	2900      	cmp	r1, #0
 800a2f0:	b096      	sub	sp, #88	@ 0x58
 800a2f2:	4615      	mov	r5, r2
 800a2f4:	461e      	mov	r6, r3
 800a2f6:	da0d      	bge.n	800a314 <__swhatbuf_r+0x2e>
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2fe:	f04f 0100 	mov.w	r1, #0
 800a302:	bf14      	ite	ne
 800a304:	2340      	movne	r3, #64	@ 0x40
 800a306:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a30a:	2000      	movs	r0, #0
 800a30c:	6031      	str	r1, [r6, #0]
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	b016      	add	sp, #88	@ 0x58
 800a312:	bd70      	pop	{r4, r5, r6, pc}
 800a314:	466a      	mov	r2, sp
 800a316:	f000 f873 	bl	800a400 <_fstat_r>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	dbec      	blt.n	800a2f8 <__swhatbuf_r+0x12>
 800a31e:	9901      	ldr	r1, [sp, #4]
 800a320:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a324:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a328:	4259      	negs	r1, r3
 800a32a:	4159      	adcs	r1, r3
 800a32c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a330:	e7eb      	b.n	800a30a <__swhatbuf_r+0x24>

0800a332 <__smakebuf_r>:
 800a332:	898b      	ldrh	r3, [r1, #12]
 800a334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a336:	079d      	lsls	r5, r3, #30
 800a338:	4606      	mov	r6, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	d507      	bpl.n	800a34e <__smakebuf_r+0x1c>
 800a33e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a342:	6023      	str	r3, [r4, #0]
 800a344:	6123      	str	r3, [r4, #16]
 800a346:	2301      	movs	r3, #1
 800a348:	6163      	str	r3, [r4, #20]
 800a34a:	b003      	add	sp, #12
 800a34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a34e:	ab01      	add	r3, sp, #4
 800a350:	466a      	mov	r2, sp
 800a352:	f7ff ffc8 	bl	800a2e6 <__swhatbuf_r>
 800a356:	9f00      	ldr	r7, [sp, #0]
 800a358:	4605      	mov	r5, r0
 800a35a:	4639      	mov	r1, r7
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7ff f8b3 	bl	80094c8 <_malloc_r>
 800a362:	b948      	cbnz	r0, 800a378 <__smakebuf_r+0x46>
 800a364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a368:	059a      	lsls	r2, r3, #22
 800a36a:	d4ee      	bmi.n	800a34a <__smakebuf_r+0x18>
 800a36c:	f023 0303 	bic.w	r3, r3, #3
 800a370:	f043 0302 	orr.w	r3, r3, #2
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	e7e2      	b.n	800a33e <__smakebuf_r+0xc>
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	6020      	str	r0, [r4, #0]
 800a37c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	9b01      	ldr	r3, [sp, #4]
 800a384:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a388:	b15b      	cbz	r3, 800a3a2 <__smakebuf_r+0x70>
 800a38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a38e:	4630      	mov	r0, r6
 800a390:	f000 f848 	bl	800a424 <_isatty_r>
 800a394:	b128      	cbz	r0, 800a3a2 <__smakebuf_r+0x70>
 800a396:	89a3      	ldrh	r3, [r4, #12]
 800a398:	f023 0303 	bic.w	r3, r3, #3
 800a39c:	f043 0301 	orr.w	r3, r3, #1
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	431d      	orrs	r5, r3
 800a3a6:	81a5      	strh	r5, [r4, #12]
 800a3a8:	e7cf      	b.n	800a34a <__smakebuf_r+0x18>

0800a3aa <memmove>:
 800a3aa:	4288      	cmp	r0, r1
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	eb01 0402 	add.w	r4, r1, r2
 800a3b2:	d902      	bls.n	800a3ba <memmove+0x10>
 800a3b4:	4284      	cmp	r4, r0
 800a3b6:	4623      	mov	r3, r4
 800a3b8:	d807      	bhi.n	800a3ca <memmove+0x20>
 800a3ba:	1e43      	subs	r3, r0, #1
 800a3bc:	42a1      	cmp	r1, r4
 800a3be:	d008      	beq.n	800a3d2 <memmove+0x28>
 800a3c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3c8:	e7f8      	b.n	800a3bc <memmove+0x12>
 800a3ca:	4402      	add	r2, r0
 800a3cc:	4601      	mov	r1, r0
 800a3ce:	428a      	cmp	r2, r1
 800a3d0:	d100      	bne.n	800a3d4 <memmove+0x2a>
 800a3d2:	bd10      	pop	{r4, pc}
 800a3d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3dc:	e7f7      	b.n	800a3ce <memmove+0x24>
	...

0800a3e0 <_close_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4d06      	ldr	r5, [pc, #24]	@ (800a3fc <_close_r+0x1c>)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	602b      	str	r3, [r5, #0]
 800a3ec:	f7f7 fb6e 	bl	8001acc <_close>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d102      	bne.n	800a3fa <_close_r+0x1a>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	b103      	cbz	r3, 800a3fa <_close_r+0x1a>
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
 800a3fc:	20000cd4 	.word	0x20000cd4

0800a400 <_fstat_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d07      	ldr	r5, [pc, #28]	@ (800a420 <_fstat_r+0x20>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	4611      	mov	r1, r2
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	f7f7 fb69 	bl	8001ae4 <_fstat>
 800a412:	1c43      	adds	r3, r0, #1
 800a414:	d102      	bne.n	800a41c <_fstat_r+0x1c>
 800a416:	682b      	ldr	r3, [r5, #0]
 800a418:	b103      	cbz	r3, 800a41c <_fstat_r+0x1c>
 800a41a:	6023      	str	r3, [r4, #0]
 800a41c:	bd38      	pop	{r3, r4, r5, pc}
 800a41e:	bf00      	nop
 800a420:	20000cd4 	.word	0x20000cd4

0800a424 <_isatty_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d06      	ldr	r5, [pc, #24]	@ (800a440 <_isatty_r+0x1c>)
 800a428:	2300      	movs	r3, #0
 800a42a:	4604      	mov	r4, r0
 800a42c:	4608      	mov	r0, r1
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	f7f7 fb68 	bl	8001b04 <_isatty>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_isatty_r+0x1a>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_isatty_r+0x1a>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20000cd4 	.word	0x20000cd4

0800a444 <_lseek_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4d07      	ldr	r5, [pc, #28]	@ (800a464 <_lseek_r+0x20>)
 800a448:	4604      	mov	r4, r0
 800a44a:	4608      	mov	r0, r1
 800a44c:	4611      	mov	r1, r2
 800a44e:	2200      	movs	r2, #0
 800a450:	602a      	str	r2, [r5, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	f7f7 fb61 	bl	8001b1a <_lseek>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_lseek_r+0x1e>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_lseek_r+0x1e>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	20000cd4 	.word	0x20000cd4

0800a468 <_read_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	@ (800a488 <_read_r+0x20>)
 800a46c:	4604      	mov	r4, r0
 800a46e:	4608      	mov	r0, r1
 800a470:	4611      	mov	r1, r2
 800a472:	2200      	movs	r2, #0
 800a474:	602a      	str	r2, [r5, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	f7f7 faef 	bl	8001a5a <_read>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_read_r+0x1e>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_read_r+0x1e>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	20000cd4 	.word	0x20000cd4

0800a48c <_sbrk_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d06      	ldr	r5, [pc, #24]	@ (800a4a8 <_sbrk_r+0x1c>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f7 fb4c 	bl	8001b34 <_sbrk>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_sbrk_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_sbrk_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	20000cd4 	.word	0x20000cd4

0800a4ac <_write_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	@ (800a4cc <_write_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7f7 faea 	bl	8001a94 <_write>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_write_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_write_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	20000cd4 	.word	0x20000cd4

0800a4d0 <__assert_func>:
 800a4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4d2:	4614      	mov	r4, r2
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4b09      	ldr	r3, [pc, #36]	@ (800a4fc <__assert_func+0x2c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4605      	mov	r5, r0
 800a4dc:	68d8      	ldr	r0, [r3, #12]
 800a4de:	b954      	cbnz	r4, 800a4f6 <__assert_func+0x26>
 800a4e0:	4b07      	ldr	r3, [pc, #28]	@ (800a500 <__assert_func+0x30>)
 800a4e2:	461c      	mov	r4, r3
 800a4e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4e8:	9100      	str	r1, [sp, #0]
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	4905      	ldr	r1, [pc, #20]	@ (800a504 <__assert_func+0x34>)
 800a4ee:	f000 f873 	bl	800a5d8 <fiprintf>
 800a4f2:	f000 f883 	bl	800a5fc <abort>
 800a4f6:	4b04      	ldr	r3, [pc, #16]	@ (800a508 <__assert_func+0x38>)
 800a4f8:	e7f4      	b.n	800a4e4 <__assert_func+0x14>
 800a4fa:	bf00      	nop
 800a4fc:	20000184 	.word	0x20000184
 800a500:	0800ac2b 	.word	0x0800ac2b
 800a504:	0800abfd 	.word	0x0800abfd
 800a508:	0800abf0 	.word	0x0800abf0

0800a50c <_calloc_r>:
 800a50c:	b570      	push	{r4, r5, r6, lr}
 800a50e:	fba1 5402 	umull	r5, r4, r1, r2
 800a512:	b93c      	cbnz	r4, 800a524 <_calloc_r+0x18>
 800a514:	4629      	mov	r1, r5
 800a516:	f7fe ffd7 	bl	80094c8 <_malloc_r>
 800a51a:	4606      	mov	r6, r0
 800a51c:	b928      	cbnz	r0, 800a52a <_calloc_r+0x1e>
 800a51e:	2600      	movs	r6, #0
 800a520:	4630      	mov	r0, r6
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	220c      	movs	r2, #12
 800a526:	6002      	str	r2, [r0, #0]
 800a528:	e7f9      	b.n	800a51e <_calloc_r+0x12>
 800a52a:	462a      	mov	r2, r5
 800a52c:	4621      	mov	r1, r4
 800a52e:	f7fd fb2b 	bl	8007b88 <memset>
 800a532:	e7f5      	b.n	800a520 <_calloc_r+0x14>

0800a534 <_free_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4605      	mov	r5, r0
 800a538:	2900      	cmp	r1, #0
 800a53a:	d041      	beq.n	800a5c0 <_free_r+0x8c>
 800a53c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a540:	1f0c      	subs	r4, r1, #4
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfb8      	it	lt
 800a546:	18e4      	addlt	r4, r4, r3
 800a548:	f7ff f8fc 	bl	8009744 <__malloc_lock>
 800a54c:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c4 <_free_r+0x90>)
 800a54e:	6813      	ldr	r3, [r2, #0]
 800a550:	b933      	cbnz	r3, 800a560 <_free_r+0x2c>
 800a552:	6063      	str	r3, [r4, #4]
 800a554:	6014      	str	r4, [r2, #0]
 800a556:	4628      	mov	r0, r5
 800a558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a55c:	f7ff b8f8 	b.w	8009750 <__malloc_unlock>
 800a560:	42a3      	cmp	r3, r4
 800a562:	d908      	bls.n	800a576 <_free_r+0x42>
 800a564:	6820      	ldr	r0, [r4, #0]
 800a566:	1821      	adds	r1, r4, r0
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf01      	itttt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	1809      	addeq	r1, r1, r0
 800a572:	6021      	streq	r1, [r4, #0]
 800a574:	e7ed      	b.n	800a552 <_free_r+0x1e>
 800a576:	461a      	mov	r2, r3
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	b10b      	cbz	r3, 800a580 <_free_r+0x4c>
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d9fa      	bls.n	800a576 <_free_r+0x42>
 800a580:	6811      	ldr	r1, [r2, #0]
 800a582:	1850      	adds	r0, r2, r1
 800a584:	42a0      	cmp	r0, r4
 800a586:	d10b      	bne.n	800a5a0 <_free_r+0x6c>
 800a588:	6820      	ldr	r0, [r4, #0]
 800a58a:	4401      	add	r1, r0
 800a58c:	1850      	adds	r0, r2, r1
 800a58e:	4283      	cmp	r3, r0
 800a590:	6011      	str	r1, [r2, #0]
 800a592:	d1e0      	bne.n	800a556 <_free_r+0x22>
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	6053      	str	r3, [r2, #4]
 800a59a:	4408      	add	r0, r1
 800a59c:	6010      	str	r0, [r2, #0]
 800a59e:	e7da      	b.n	800a556 <_free_r+0x22>
 800a5a0:	d902      	bls.n	800a5a8 <_free_r+0x74>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	e7d6      	b.n	800a556 <_free_r+0x22>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	1821      	adds	r1, r4, r0
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf04      	itt	eq
 800a5b0:	6819      	ldreq	r1, [r3, #0]
 800a5b2:	685b      	ldreq	r3, [r3, #4]
 800a5b4:	6063      	str	r3, [r4, #4]
 800a5b6:	bf04      	itt	eq
 800a5b8:	1809      	addeq	r1, r1, r0
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	6054      	str	r4, [r2, #4]
 800a5be:	e7ca      	b.n	800a556 <_free_r+0x22>
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20000cd0 	.word	0x20000cd0

0800a5c8 <_malloc_usable_size_r>:
 800a5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5cc:	1f18      	subs	r0, r3, #4
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bfbc      	itt	lt
 800a5d2:	580b      	ldrlt	r3, [r1, r0]
 800a5d4:	18c0      	addlt	r0, r0, r3
 800a5d6:	4770      	bx	lr

0800a5d8 <fiprintf>:
 800a5d8:	b40e      	push	{r1, r2, r3}
 800a5da:	b503      	push	{r0, r1, lr}
 800a5dc:	4601      	mov	r1, r0
 800a5de:	ab03      	add	r3, sp, #12
 800a5e0:	4805      	ldr	r0, [pc, #20]	@ (800a5f8 <fiprintf+0x20>)
 800a5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e6:	6800      	ldr	r0, [r0, #0]
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	f7fe fe2b 	bl	8009244 <_vfiprintf_r>
 800a5ee:	b002      	add	sp, #8
 800a5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f4:	b003      	add	sp, #12
 800a5f6:	4770      	bx	lr
 800a5f8:	20000184 	.word	0x20000184

0800a5fc <abort>:
 800a5fc:	b508      	push	{r3, lr}
 800a5fe:	2006      	movs	r0, #6
 800a600:	f000 f82c 	bl	800a65c <raise>
 800a604:	2001      	movs	r0, #1
 800a606:	f7f7 fa1d 	bl	8001a44 <_exit>

0800a60a <_raise_r>:
 800a60a:	291f      	cmp	r1, #31
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4605      	mov	r5, r0
 800a610:	460c      	mov	r4, r1
 800a612:	d904      	bls.n	800a61e <_raise_r+0x14>
 800a614:	2316      	movs	r3, #22
 800a616:	6003      	str	r3, [r0, #0]
 800a618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a61c:	bd38      	pop	{r3, r4, r5, pc}
 800a61e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a620:	b112      	cbz	r2, 800a628 <_raise_r+0x1e>
 800a622:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a626:	b94b      	cbnz	r3, 800a63c <_raise_r+0x32>
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 f831 	bl	800a690 <_getpid_r>
 800a62e:	4622      	mov	r2, r4
 800a630:	4601      	mov	r1, r0
 800a632:	4628      	mov	r0, r5
 800a634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a638:	f000 b818 	b.w	800a66c <_kill_r>
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d00a      	beq.n	800a656 <_raise_r+0x4c>
 800a640:	1c59      	adds	r1, r3, #1
 800a642:	d103      	bne.n	800a64c <_raise_r+0x42>
 800a644:	2316      	movs	r3, #22
 800a646:	6003      	str	r3, [r0, #0]
 800a648:	2001      	movs	r0, #1
 800a64a:	e7e7      	b.n	800a61c <_raise_r+0x12>
 800a64c:	2100      	movs	r1, #0
 800a64e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a652:	4620      	mov	r0, r4
 800a654:	4798      	blx	r3
 800a656:	2000      	movs	r0, #0
 800a658:	e7e0      	b.n	800a61c <_raise_r+0x12>
	...

0800a65c <raise>:
 800a65c:	4b02      	ldr	r3, [pc, #8]	@ (800a668 <raise+0xc>)
 800a65e:	4601      	mov	r1, r0
 800a660:	6818      	ldr	r0, [r3, #0]
 800a662:	f7ff bfd2 	b.w	800a60a <_raise_r>
 800a666:	bf00      	nop
 800a668:	20000184 	.word	0x20000184

0800a66c <_kill_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	@ (800a68c <_kill_r+0x20>)
 800a670:	2300      	movs	r3, #0
 800a672:	4604      	mov	r4, r0
 800a674:	4608      	mov	r0, r1
 800a676:	4611      	mov	r1, r2
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	f7f7 f9d3 	bl	8001a24 <_kill>
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	d102      	bne.n	800a688 <_kill_r+0x1c>
 800a682:	682b      	ldr	r3, [r5, #0]
 800a684:	b103      	cbz	r3, 800a688 <_kill_r+0x1c>
 800a686:	6023      	str	r3, [r4, #0]
 800a688:	bd38      	pop	{r3, r4, r5, pc}
 800a68a:	bf00      	nop
 800a68c:	20000cd4 	.word	0x20000cd4

0800a690 <_getpid_r>:
 800a690:	f7f7 b9c0 	b.w	8001a14 <_getpid>

0800a694 <_init>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	bf00      	nop
 800a698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69a:	bc08      	pop	{r3}
 800a69c:	469e      	mov	lr, r3
 800a69e:	4770      	bx	lr

0800a6a0 <_fini>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	bf00      	nop
 800a6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a6:	bc08      	pop	{r3}
 800a6a8:	469e      	mov	lr, r3
 800a6aa:	4770      	bx	lr
