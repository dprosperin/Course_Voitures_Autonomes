
lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a60c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800a7f0  0800a7f0  0000b7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adf4  0800adf4  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800adf4  0800adf4  0000bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adfc  0800adfc  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adfc  0800adfc  0000bdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae00  0800ae00  0000be00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ae04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200001d4  0800afd8  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  0800afd8  0000ccd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc9d  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f4  00000000  00000000  00019ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0001c098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000864  00000000  00000000  0001cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de1a  00000000  00000000  0001d414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd2b  00000000  00000000  0003b22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b88c5  00000000  00000000  00048f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010181e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004188  00000000  00000000  00101864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001059ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a7d4 	.word	0x0800a7d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a7d4 	.word	0x0800a7d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <automate_decode>:
 *      Author: davidprosperin
 */
#include <automate.h>

void automate_decode(void)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
    static state_automate_t next_state = FLAG_START1;
    static state_automate_t current_state;

    uint8_t quality = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
    uint8_t constant_bit = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	73bb      	strb	r3, [r7, #14]
    uint8_t s = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	737b      	strb	r3, [r7, #13]
    uint8_t not_s = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	733b      	strb	r3, [r7, #12]

    uint8_t distance_low_byte = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	72fb      	strb	r3, [r7, #11]
    uint8_t distance_high_byte = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	72bb      	strb	r3, [r7, #10]

    uint8_t angle_low_byte = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	727b      	strb	r3, [r7, #9]
    uint8_t angle_high_byte = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	723b      	strb	r3, [r7, #8]

    float distance;
    float angle;

    current_state = next_state;
 800105a:	4b93      	ldr	r3, [pc, #588]	@ (80012a8 <automate_decode+0x274>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	4b93      	ldr	r3, [pc, #588]	@ (80012ac <automate_decode+0x278>)
 8001060:	701a      	strb	r2, [r3, #0]

    switch (current_state)
 8001062:	4b92      	ldr	r3, [pc, #584]	@ (80012ac <automate_decode+0x278>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b0b      	cmp	r3, #11
 8001068:	f200 811a 	bhi.w	80012a0 <automate_decode+0x26c>
 800106c:	a201      	add	r2, pc, #4	@ (adr r2, 8001074 <automate_decode+0x40>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	080010a5 	.word	0x080010a5
 8001078:	080010bb 	.word	0x080010bb
 800107c:	080010d7 	.word	0x080010d7
 8001080:	080010ed 	.word	0x080010ed
 8001084:	08001103 	.word	0x08001103
 8001088:	08001119 	.word	0x08001119
 800108c:	0800112f 	.word	0x0800112f
 8001090:	0800114b 	.word	0x0800114b
 8001094:	0800119b 	.word	0x0800119b
 8001098:	080011c9 	.word	0x080011c9
 800109c:	08001203 	.word	0x08001203
 80010a0:	08001215 	.word	0x08001215
    {
    case FLAG_START1 :
    	//printf("Etat courant : FLAG_START1\n");
    	if (buffer[index_read] == 0xA5)
 80010a4:	4b82      	ldr	r3, [pc, #520]	@ (80012b0 <automate_decode+0x27c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a82      	ldr	r2, [pc, #520]	@ (80012b4 <automate_decode+0x280>)
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	2ba5      	cmp	r3, #165	@ 0xa5
 80010ae:	f040 80ec 	bne.w	800128a <automate_decode+0x256>
        {
             next_state = FLAG_START2;
 80010b2:	4b7d      	ldr	r3, [pc, #500]	@ (80012a8 <automate_decode+0x274>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
        }
    break;
 80010b8:	e0e7      	b.n	800128a <automate_decode+0x256>

    case FLAG_START2:
    	//printf("Etat courant : FLAG_START2\n");
        if (buffer[index_read] == 0x5A)
 80010ba:	4b7d      	ldr	r3, [pc, #500]	@ (80012b0 <automate_decode+0x27c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7d      	ldr	r2, [pc, #500]	@ (80012b4 <automate_decode+0x280>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	2b5a      	cmp	r3, #90	@ 0x5a
 80010c4:	d103      	bne.n	80010ce <automate_decode+0x9a>
        {
            next_state = RESPONSE_DESCRIPTOR1;
 80010c6:	4b78      	ldr	r3, [pc, #480]	@ (80012a8 <automate_decode+0x274>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
        } else {
        	next_state = FLAG_START1;
        }
    break;
 80010cc:	e0e8      	b.n	80012a0 <automate_decode+0x26c>
        	next_state = FLAG_START1;
 80010ce:	4b76      	ldr	r3, [pc, #472]	@ (80012a8 <automate_decode+0x274>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    break;
 80010d4:	e0e4      	b.n	80012a0 <automate_decode+0x26c>

    case RESPONSE_DESCRIPTOR1:
    	if (buffer[index_read] == 0x05)
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <automate_decode+0x27c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a76      	ldr	r2, [pc, #472]	@ (80012b4 <automate_decode+0x280>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	f040 80d5 	bne.w	800128e <automate_decode+0x25a>
    	{
    		next_state = RESPONSE_DESCRIPTOR2;
 80010e4:	4b70      	ldr	r3, [pc, #448]	@ (80012a8 <automate_decode+0x274>)
 80010e6:	2203      	movs	r2, #3
 80010e8:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 80010ea:	e0d0      	b.n	800128e <automate_decode+0x25a>
    case RESPONSE_DESCRIPTOR2:
    	if (buffer[index_read] == 0x00)
 80010ec:	4b70      	ldr	r3, [pc, #448]	@ (80012b0 <automate_decode+0x27c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a70      	ldr	r2, [pc, #448]	@ (80012b4 <automate_decode+0x280>)
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 80cc 	bne.w	8001292 <automate_decode+0x25e>
    	{
    		next_state = RESPONSE_DESCRIPTOR3;
 80010fa:	4b6b      	ldr	r3, [pc, #428]	@ (80012a8 <automate_decode+0x274>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 8001100:	e0c7      	b.n	8001292 <automate_decode+0x25e>

    case RESPONSE_DESCRIPTOR3:
        if (buffer[index_read] == 0x00)
 8001102:	4b6b      	ldr	r3, [pc, #428]	@ (80012b0 <automate_decode+0x27c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6b      	ldr	r2, [pc, #428]	@ (80012b4 <automate_decode+0x280>)
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 80c3 	bne.w	8001296 <automate_decode+0x262>
        {
        	next_state = RESPONSE_DESCRIPTOR4;
 8001110:	4b65      	ldr	r3, [pc, #404]	@ (80012a8 <automate_decode+0x274>)
 8001112:	2205      	movs	r2, #5
 8001114:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001116:	e0be      	b.n	8001296 <automate_decode+0x262>
    case RESPONSE_DESCRIPTOR4:
    	if (buffer[index_read] == 0x40)
 8001118:	4b65      	ldr	r3, [pc, #404]	@ (80012b0 <automate_decode+0x27c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a65      	ldr	r2, [pc, #404]	@ (80012b4 <automate_decode+0x280>)
 800111e:	5cd3      	ldrb	r3, [r2, r3]
 8001120:	2b40      	cmp	r3, #64	@ 0x40
 8001122:	f040 80ba 	bne.w	800129a <automate_decode+0x266>
    	{
    	    next_state = RESPONSE_DESCRIPTOR5;
 8001126:	4b60      	ldr	r3, [pc, #384]	@ (80012a8 <automate_decode+0x274>)
 8001128:	2206      	movs	r2, #6
 800112a:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 800112c:	e0b5      	b.n	800129a <automate_decode+0x266>

    case RESPONSE_DESCRIPTOR5:
        if (buffer[index_read] == 0x81)
 800112e:	4b60      	ldr	r3, [pc, #384]	@ (80012b0 <automate_decode+0x27c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a60      	ldr	r2, [pc, #384]	@ (80012b4 <automate_decode+0x280>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	2b81      	cmp	r3, #129	@ 0x81
 8001138:	f040 80b1 	bne.w	800129e <automate_decode+0x26a>
        {
        	printf("Response descriptor correctement lu\n");
 800113c:	485e      	ldr	r0, [pc, #376]	@ (80012b8 <automate_decode+0x284>)
 800113e:	f006 fd93 	bl	8007c68 <puts>
        	next_state = QUALITY;
 8001142:	4b59      	ldr	r3, [pc, #356]	@ (80012a8 <automate_decode+0x274>)
 8001144:	2207      	movs	r2, #7
 8001146:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001148:	e0a9      	b.n	800129e <automate_decode+0x26a>

    case QUALITY:
    		quality = buffer[index_read] >> 2;
 800114a:	4b59      	ldr	r3, [pc, #356]	@ (80012b0 <automate_decode+0x27c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a59      	ldr	r2, [pc, #356]	@ (80012b4 <automate_decode+0x280>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	73fb      	strb	r3, [r7, #15]
    		not_s = (buffer[index_read] >> 1) & 1;
 8001156:	4b56      	ldr	r3, [pc, #344]	@ (80012b0 <automate_decode+0x27c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a56      	ldr	r2, [pc, #344]	@ (80012b4 <automate_decode+0x280>)
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	085b      	lsrs	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	733b      	strb	r3, [r7, #12]
    		s = buffer[index_read] & 1;
 8001168:	4b51      	ldr	r3, [pc, #324]	@ (80012b0 <automate_decode+0x27c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a51      	ldr	r2, [pc, #324]	@ (80012b4 <automate_decode+0x280>)
 800116e:	5cd3      	ldrb	r3, [r2, r3]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	737b      	strb	r3, [r7, #13]

            if (!not_s == s)
 8001176:	7b3b      	ldrb	r3, [r7, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	bf0c      	ite	eq
 800117c:	2301      	moveq	r3, #1
 800117e:	2300      	movne	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	7b7b      	ldrb	r3, [r7, #13]
 8001186:	429a      	cmp	r2, r3
 8001188:	d103      	bne.n	8001192 <automate_decode+0x15e>
            {
            	//printf("Pass QUALITY : not S : %d S : %d, Quality : %d\n", not_s, s, quality);
            	next_state = ANGLE_FIRST_PART;
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <automate_decode+0x274>)
 800118c:	2208      	movs	r2, #8
 800118e:	701a      	strb	r2, [r3, #0]

            } else {
            	//printf("No pass QUALITY : not S : %d S : %d, Quality : %d\n", not_s, s, quality);
            	next_state = QUALITY;
            }
    break;
 8001190:	e086      	b.n	80012a0 <automate_decode+0x26c>
            	next_state = QUALITY;
 8001192:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <automate_decode+0x274>)
 8001194:	2207      	movs	r2, #7
 8001196:	701a      	strb	r2, [r3, #0]
    break;
 8001198:	e082      	b.n	80012a0 <automate_decode+0x26c>

    case ANGLE_FIRST_PART:
    	constant_bit = buffer[index_read] & 0b1;
 800119a:	4b45      	ldr	r3, [pc, #276]	@ (80012b0 <automate_decode+0x27c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a45      	ldr	r2, [pc, #276]	@ (80012b4 <automate_decode+0x280>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	73bb      	strb	r3, [r7, #14]
    	angle_low_byte = buffer[index_read];
 80011a8:	4b41      	ldr	r3, [pc, #260]	@ (80012b0 <automate_decode+0x27c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a41      	ldr	r2, [pc, #260]	@ (80012b4 <automate_decode+0x280>)
 80011ae:	5cd3      	ldrb	r3, [r2, r3]
 80011b0:	727b      	strb	r3, [r7, #9]

    	//printf("ANGLE_FIRST_PART\n");

        if (constant_bit)
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <automate_decode+0x18c>
        {
            next_state = ANGLE_SECOND_PART;
 80011b8:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <automate_decode+0x274>)
 80011ba:	2209      	movs	r2, #9
 80011bc:	701a      	strb	r2, [r3, #0]
        } else {
        	next_state = QUALITY;
        }
    break;
 80011be:	e06f      	b.n	80012a0 <automate_decode+0x26c>
        	next_state = QUALITY;
 80011c0:	4b39      	ldr	r3, [pc, #228]	@ (80012a8 <automate_decode+0x274>)
 80011c2:	2207      	movs	r2, #7
 80011c4:	701a      	strb	r2, [r3, #0]
    break;
 80011c6:	e06b      	b.n	80012a0 <automate_decode+0x26c>

    case ANGLE_SECOND_PART:
    	angle_high_byte = buffer[index_read];
 80011c8:	4b39      	ldr	r3, [pc, #228]	@ (80012b0 <automate_decode+0x27c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a39      	ldr	r2, [pc, #228]	@ (80012b4 <automate_decode+0x280>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	723b      	strb	r3, [r7, #8]

    	angle = (((uint16_t)(angle_high_byte) << 7) | ((uint16_t)(angle_low_byte) & 0x00FF)) / 64.0;
 80011d2:	7a3b      	ldrb	r3, [r7, #8]
 80011d4:	01da      	lsls	r2, r3, #7
 80011d6:	7a7b      	ldrb	r3, [r7, #9]
 80011d8:	4313      	orrs	r3, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9ca 	bl	8000574 <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <automate_decode+0x288>)
 80011e6:	f7ff fb59 	bl	800089c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fd21 	bl	8000c38 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	603b      	str	r3, [r7, #0]

    	//printf("angle_high_byte : 0x%x angle_low_byte : 0x%x Angle %f degree\n", angle_high_byte, angle_low_byte, angle);

    	next_state = DISTANCE_FIRST_PART;
 80011fa:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <automate_decode+0x274>)
 80011fc:	220a      	movs	r2, #10
 80011fe:	701a      	strb	r2, [r3, #0]
    break;
 8001200:	e04e      	b.n	80012a0 <automate_decode+0x26c>

    case DISTANCE_FIRST_PART:
    	distance_low_byte = buffer[index_read];
 8001202:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <automate_decode+0x27c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <automate_decode+0x280>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	72fb      	strb	r3, [r7, #11]

    	next_state = DISTANCE_SECOND_PART;
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <automate_decode+0x274>)
 800120e:	220b      	movs	r2, #11
 8001210:	701a      	strb	r2, [r3, #0]

    break;
 8001212:	e045      	b.n	80012a0 <automate_decode+0x26c>

    case DISTANCE_SECOND_PART:
    	distance_high_byte = buffer[index_read];
 8001214:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <automate_decode+0x27c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a26      	ldr	r2, [pc, #152]	@ (80012b4 <automate_decode+0x280>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	72bb      	strb	r3, [r7, #10]

    	distance = ((((uint16_t) distance_high_byte << 8) & 0xFF00 ) | ((uint16_t) distance_low_byte & 0x00FF)) / 4.0;
 800121e:	7abb      	ldrb	r3, [r7, #10]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29a      	uxth	r2, r3
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	4313      	orrs	r3, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f9a3 	bl	8000574 <__aeabi_i2d>
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <automate_decode+0x28c>)
 8001234:	f7ff fb32 	bl	800089c <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fcfa 	bl	8000c38 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	607b      	str	r3, [r7, #4]

    	printf("distance_high_byte : 0x%x distance_low_byte : 0x%x Distance %3.6f mm\n", distance_high_byte, distance_low_byte, distance);;
 8001248:	7abc      	ldrb	r4, [r7, #10]
 800124a:	7afd      	ldrb	r5, [r7, #11]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff f9a3 	bl	8000598 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	e9cd 2300 	strd	r2, r3, [sp]
 800125a:	462a      	mov	r2, r5
 800125c:	4621      	mov	r1, r4
 800125e:	4819      	ldr	r0, [pc, #100]	@ (80012c4 <automate_decode+0x290>)
 8001260:	f006 fc9a 	bl	8007b98 <iprintf>

    	printf("(%d, %d)\n", (int)angle, (int)distance);
 8001264:	edd7 7a00 	vldr	s15, [r7]
 8001268:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800126c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001274:	ee17 2a90 	vmov	r2, s15
 8001278:	ee17 1a10 	vmov	r1, s14
 800127c:	4812      	ldr	r0, [pc, #72]	@ (80012c8 <automate_decode+0x294>)
 800127e:	f006 fc8b 	bl	8007b98 <iprintf>
        next_state = QUALITY;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <automate_decode+0x274>)
 8001284:	2207      	movs	r2, #7
 8001286:	701a      	strb	r2, [r3, #0]
    break;
 8001288:	e00a      	b.n	80012a0 <automate_decode+0x26c>
    break;
 800128a:	bf00      	nop
 800128c:	e008      	b.n	80012a0 <automate_decode+0x26c>
    	break;
 800128e:	bf00      	nop
 8001290:	e006      	b.n	80012a0 <automate_decode+0x26c>
    	break;
 8001292:	bf00      	nop
 8001294:	e004      	b.n	80012a0 <automate_decode+0x26c>
        break;
 8001296:	bf00      	nop
 8001298:	e002      	b.n	80012a0 <automate_decode+0x26c>
    	break;
 800129a:	bf00      	nop
 800129c:	e000      	b.n	80012a0 <automate_decode+0x26c>
        break;
 800129e:	bf00      	nop
    }
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}
 80012a8:	200001f0 	.word	0x200001f0
 80012ac:	200001f1 	.word	0x200001f1
 80012b0:	200001f4 	.word	0x200001f4
 80012b4:	200001f8 	.word	0x200001f8
 80012b8:	0800a7f0 	.word	0x0800a7f0
 80012bc:	40500000 	.word	0x40500000
 80012c0:	40100000 	.word	0x40100000
 80012c4:	0800a814 	.word	0x0800a814
 80012c8:	0800a85c 	.word	0x0800a85c

080012cc <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80012d4:	1d39      	adds	r1, r7, #4
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012da:	2201      	movs	r2, #1
 80012dc:	4803      	ldr	r0, [pc, #12]	@ (80012ec <__io_putchar+0x20>)
 80012de:	f002 fbab 	bl	8003a38 <HAL_UART_Transmit>

	return ch;
 80012e2:	687b      	ldr	r3, [r7, #4]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000a8c 	.word	0x20000a8c

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f000 fd30 	bl	8001d5a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f963 	bl	80015c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 fa73 	bl	80017e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001302:	f000 fa47 	bl	8001794 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001306:	f000 f9f7 	bl	80016f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800130a:	f000 f9a7 	bl	800165c <MX_USART1_UART_Init>

  printf("Programme interface LIDAR\n");
 800130e:	4893      	ldr	r0, [pc, #588]	@ (800155c <main+0x26c>)
 8001310:	f006 fcaa 	bl	8007c68 <puts>
  printf("Compile le %s\n", __DATE__);
 8001314:	4992      	ldr	r1, [pc, #584]	@ (8001560 <main+0x270>)
 8001316:	4893      	ldr	r0, [pc, #588]	@ (8001564 <main+0x274>)
 8001318:	f006 fc3e 	bl	8007b98 <iprintf>
  /* USER CODE BEGIN 2 */
    int i = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char message[40] = "";
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2224      	movs	r2, #36	@ 0x24
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f006 fccc 	bl	8007cc8 <memset>

    HAL_UART_Receive_DMA(&LIDAR_HUART, buffer, sizeof(buffer));
 8001330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001334:	498c      	ldr	r1, [pc, #560]	@ (8001568 <main+0x278>)
 8001336:	488d      	ldr	r0, [pc, #564]	@ (800156c <main+0x27c>)
 8001338:	f002 fc58 	bl	8003bec <HAL_UART_Receive_DMA>
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1); // A laisser proche de la boucle while(1)
 800133c:	2201      	movs	r2, #1
 800133e:	498c      	ldr	r1, [pc, #560]	@ (8001570 <main+0x280>)
 8001340:	488c      	ldr	r0, [pc, #560]	@ (8001574 <main+0x284>)
 8001342:	f002 fc07 	bl	8003b54 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_reception_uart2 == 1) {
 8001346:	4b8c      	ldr	r3, [pc, #560]	@ (8001578 <main+0x288>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d169      	bne.n	8001422 <main+0x132>
	  		  if (caractere == '\n') {
 800134e:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <main+0x280>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b0a      	cmp	r3, #10
 8001354:	d154      	bne.n	8001400 <main+0x110>
	  			  if (strstr(message, "START_SCAN") != NULL)
 8001356:	463b      	mov	r3, r7
 8001358:	4988      	ldr	r1, [pc, #544]	@ (800157c <main+0x28c>)
 800135a:	4618      	mov	r0, r3
 800135c:	f006 fc9e 	bl	8007c9c <strstr>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00a      	beq.n	800137c <main+0x8c>
	  			  {
	  				printf("Demarrage du scan normal\n");
 8001366:	4886      	ldr	r0, [pc, #536]	@ (8001580 <main+0x290>)
 8001368:	f006 fc7e 	bl	8007c68 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_START_SCAN, strlen(LIDAR_COMMAND_START_SCAN), HAL_MAX_DELAY);
 800136c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001370:	2202      	movs	r2, #2
 8001372:	4984      	ldr	r1, [pc, #528]	@ (8001584 <main+0x294>)
 8001374:	487d      	ldr	r0, [pc, #500]	@ (800156c <main+0x27c>)
 8001376:	f002 fb5f 	bl	8003a38 <HAL_UART_Transmit>
 800137a:	e03d      	b.n	80013f8 <main+0x108>
	  			  } else if (strstr(message, "STOP") != NULL)
 800137c:	463b      	mov	r3, r7
 800137e:	4982      	ldr	r1, [pc, #520]	@ (8001588 <main+0x298>)
 8001380:	4618      	mov	r0, r3
 8001382:	f006 fc8b 	bl	8007c9c <strstr>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00a      	beq.n	80013a2 <main+0xb2>
	  			  {
	  				printf("Arret\n");
 800138c:	487f      	ldr	r0, [pc, #508]	@ (800158c <main+0x29c>)
 800138e:	f006 fc6b 	bl	8007c68 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_STOP, strlen(LIDAR_COMMAND_STOP), HAL_MAX_DELAY);
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001396:	2202      	movs	r2, #2
 8001398:	497d      	ldr	r1, [pc, #500]	@ (8001590 <main+0x2a0>)
 800139a:	4874      	ldr	r0, [pc, #464]	@ (800156c <main+0x27c>)
 800139c:	f002 fb4c 	bl	8003a38 <HAL_UART_Transmit>
 80013a0:	e02a      	b.n	80013f8 <main+0x108>
	  			  } else if (strstr(message, "RESET") != NULL)
 80013a2:	463b      	mov	r3, r7
 80013a4:	497b      	ldr	r1, [pc, #492]	@ (8001594 <main+0x2a4>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f006 fc78 	bl	8007c9c <strstr>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00a      	beq.n	80013c8 <main+0xd8>
	  			  {
	  				printf("Reset\n");
 80013b2:	4879      	ldr	r0, [pc, #484]	@ (8001598 <main+0x2a8>)
 80013b4:	f006 fc58 	bl	8007c68 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_RESET, strlen(LIDAR_COMMAND_RESET), HAL_MAX_DELAY);
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013bc:	2202      	movs	r2, #2
 80013be:	4977      	ldr	r1, [pc, #476]	@ (800159c <main+0x2ac>)
 80013c0:	486a      	ldr	r0, [pc, #424]	@ (800156c <main+0x27c>)
 80013c2:	f002 fb39 	bl	8003a38 <HAL_UART_Transmit>
 80013c6:	e017      	b.n	80013f8 <main+0x108>
	  			  } else if (strstr(message, "GET_INFO") != NULL)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4975      	ldr	r1, [pc, #468]	@ (80015a0 <main+0x2b0>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f006 fc65 	bl	8007c9c <strstr>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00a      	beq.n	80013ee <main+0xfe>
	  			  {
	  				printf("RTFM ! <*_*>\n");
 80013d8:	4872      	ldr	r0, [pc, #456]	@ (80015a4 <main+0x2b4>)
 80013da:	f006 fc45 	bl	8007c68 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_GET_INFO, strlen(LIDAR_COMMAND_GET_INFO), HAL_MAX_DELAY);
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e2:	2202      	movs	r2, #2
 80013e4:	4970      	ldr	r1, [pc, #448]	@ (80015a8 <main+0x2b8>)
 80013e6:	4861      	ldr	r0, [pc, #388]	@ (800156c <main+0x27c>)
 80013e8:	f002 fb26 	bl	8003a38 <HAL_UART_Transmit>
 80013ec:	e004      	b.n	80013f8 <main+0x108>
	  			  } else {
	  				  printf("Commande non reconnue : %s\n", message);
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	486e      	ldr	r0, [pc, #440]	@ (80015ac <main+0x2bc>)
 80013f4:	f006 fbd0 	bl	8007b98 <iprintf>
	  			  }

	  			  message[0] = '\0';
 80013f8:	2300      	movs	r3, #0
 80013fa:	703b      	strb	r3, [r7, #0]
	  			  i = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  		  }

	  		  message[i++] = caractere;
 8001400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001406:	4a5a      	ldr	r2, [pc, #360]	@ (8001570 <main+0x280>)
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	3330      	adds	r3, #48	@ 0x30
 800140c:	443b      	add	r3, r7
 800140e:	f803 2c30 	strb.w	r2, [r3, #-48]
	  		  flag_reception_uart2 = 0;
 8001412:	4b59      	ldr	r3, [pc, #356]	@ (8001578 <main+0x288>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]

	  		  HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 8001418:	2201      	movs	r2, #1
 800141a:	4955      	ldr	r1, [pc, #340]	@ (8001570 <main+0x280>)
 800141c:	4855      	ldr	r0, [pc, #340]	@ (8001574 <main+0x284>)
 800141e:	f002 fb99 	bl	8003b54 <HAL_UART_Receive_IT>
	  	  }

	  if (flag_reception_uart1 == 1)
 8001422:	4b63      	ldr	r3, [pc, #396]	@ (80015b0 <main+0x2c0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d18d      	bne.n	8001346 <main+0x56>

	  {
		  for (int i = 0; i < sizeof(buffer); i++)
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800142e:	e08b      	b.n	8001548 <main+0x258>
		  		{
		  			if (buffer[i] == 0xA5 &&
 8001430:	4a4d      	ldr	r2, [pc, #308]	@ (8001568 <main+0x278>)
 8001432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2ba5      	cmp	r3, #165	@ 0xa5
 800143a:	d173      	bne.n	8001524 <main+0x234>
 800143c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143e:	3301      	adds	r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
		  			    buffer[++i] == 0x5A &&
 8001442:	4a49      	ldr	r2, [pc, #292]	@ (8001568 <main+0x278>)
 8001444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
		  			if (buffer[i] == 0xA5 &&
 800144a:	2b5a      	cmp	r3, #90	@ 0x5a
 800144c:	d16a      	bne.n	8001524 <main+0x234>
		  			    buffer[++i] == 0x5A &&
 800144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001450:	3301      	adds	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x05 &&
 8001454:	4a44      	ldr	r2, [pc, #272]	@ (8001568 <main+0x278>)
 8001456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
		  			    buffer[++i] == 0x5A &&
 800145c:	2b05      	cmp	r3, #5
 800145e:	d161      	bne.n	8001524 <main+0x234>
		  				buffer[++i] == 0x05 &&
 8001460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001462:	3301      	adds	r3, #1
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x00 &&
 8001466:	4a40      	ldr	r2, [pc, #256]	@ (8001568 <main+0x278>)
 8001468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146a:	4413      	add	r3, r2
 800146c:	781b      	ldrb	r3, [r3, #0]
		  				buffer[++i] == 0x05 &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	d158      	bne.n	8001524 <main+0x234>
		  				buffer[++i] == 0x00 &&
 8001472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001474:	3301      	adds	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x00 &&
 8001478:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <main+0x278>)
 800147a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
		  				buffer[++i] == 0x00 &&
 8001480:	2b00      	cmp	r3, #0
 8001482:	d14f      	bne.n	8001524 <main+0x234>
		  				buffer[++i] == 0x00 &&
 8001484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001486:	3301      	adds	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x40 &&
 800148a:	4a37      	ldr	r2, [pc, #220]	@ (8001568 <main+0x278>)
 800148c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
		  				buffer[++i] == 0x00 &&
 8001492:	2b40      	cmp	r3, #64	@ 0x40
 8001494:	d146      	bne.n	8001524 <main+0x234>
		  				buffer[++i] == 0x40 &&
 8001496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001498:	3301      	adds	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
		  				buffer[++i] == 0x81)
 800149c:	4a32      	ldr	r2, [pc, #200]	@ (8001568 <main+0x278>)
 800149e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
		  				buffer[++i] == 0x40 &&
 80014a4:	2b81      	cmp	r3, #129	@ 0x81
 80014a6:	d13d      	bne.n	8001524 <main+0x234>
		  			{
		  				printf("\n------- Primere trame ------\n");
 80014a8:	4842      	ldr	r0, [pc, #264]	@ (80015b4 <main+0x2c4>)
 80014aa:	f006 fbdd 	bl	8007c68 <puts>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 80014ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b0:	3301      	adds	r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001568 <main+0x278>)
 80014b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	483e      	ldr	r0, [pc, #248]	@ (80015b8 <main+0x2c8>)
 80014c0:	f006 fb6a 	bl	8007b98 <iprintf>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 80014c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c6:	3301      	adds	r3, #1
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ca:	4a27      	ldr	r2, [pc, #156]	@ (8001568 <main+0x278>)
 80014cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4838      	ldr	r0, [pc, #224]	@ (80015b8 <main+0x2c8>)
 80014d6:	f006 fb5f 	bl	8007b98 <iprintf>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 80014da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014dc:	3301      	adds	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <main+0x278>)
 80014e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e4:	4413      	add	r3, r2
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4833      	ldr	r0, [pc, #204]	@ (80015b8 <main+0x2c8>)
 80014ec:	f006 fb54 	bl	8007b98 <iprintf>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 80014f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f2:	3301      	adds	r3, #1
 80014f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <main+0x278>)
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	482d      	ldr	r0, [pc, #180]	@ (80015b8 <main+0x2c8>)
 8001502:	f006 fb49 	bl	8007b98 <iprintf>
		  			    printf("Valeur trame : 0x%x\n", buffer[++i]);
 8001506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001508:	3301      	adds	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800150c:	4a16      	ldr	r2, [pc, #88]	@ (8001568 <main+0x278>)
 800150e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001510:	4413      	add	r3, r2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	4828      	ldr	r0, [pc, #160]	@ (80015b8 <main+0x2c8>)
 8001518:	f006 fb3e 	bl	8007b98 <iprintf>
		  			    printf("------- Fin primere trame ------\n");
 800151c:	4827      	ldr	r0, [pc, #156]	@ (80015bc <main+0x2cc>)
 800151e:	f006 fba3 	bl	8007c68 <puts>

		  				break;
 8001522:	e016      	b.n	8001552 <main+0x262>
		  			}


		  			automate_decode();
 8001524:	f7ff fd86 	bl	8001034 <automate_decode>


		  			index_read++;
 8001528:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <main+0x2d0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a24      	ldr	r2, [pc, #144]	@ (80015c0 <main+0x2d0>)
 8001530:	6013      	str	r3, [r2, #0]

		  			if (index_read >= sizeof(buffer))
 8001532:	4b23      	ldr	r3, [pc, #140]	@ (80015c0 <main+0x2d0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800153a:	d302      	bcc.n	8001542 <main+0x252>
		  			{
		  				index_read = 0;
 800153c:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <main+0x2d0>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < sizeof(buffer); i++)
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	3301      	adds	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800154e:	f4ff af6f 	bcc.w	8001430 <main+0x140>
		  			}
		  		}
		  flag_reception_uart1 = 0;
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <main+0x2c0>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
	  if (flag_reception_uart2 == 1) {
 8001558:	e6f5      	b.n	8001346 <main+0x56>
 800155a:	bf00      	nop
 800155c:	0800a868 	.word	0x0800a868
 8001560:	0800a884 	.word	0x0800a884
 8001564:	0800a890 	.word	0x0800a890
 8001568:	200001f8 	.word	0x200001f8
 800156c:	200009f8 	.word	0x200009f8
 8001570:	20000b82 	.word	0x20000b82
 8001574:	20000a8c 	.word	0x20000a8c
 8001578:	20000b80 	.word	0x20000b80
 800157c:	0800a8a0 	.word	0x0800a8a0
 8001580:	0800a8ac 	.word	0x0800a8ac
 8001584:	0800a8c8 	.word	0x0800a8c8
 8001588:	0800a8cc 	.word	0x0800a8cc
 800158c:	0800a8d4 	.word	0x0800a8d4
 8001590:	0800a8dc 	.word	0x0800a8dc
 8001594:	0800a8e0 	.word	0x0800a8e0
 8001598:	0800a8e8 	.word	0x0800a8e8
 800159c:	0800a8f0 	.word	0x0800a8f0
 80015a0:	0800a8f4 	.word	0x0800a8f4
 80015a4:	0800a900 	.word	0x0800a900
 80015a8:	0800a910 	.word	0x0800a910
 80015ac:	0800a914 	.word	0x0800a914
 80015b0:	20000b81 	.word	0x20000b81
 80015b4:	0800a930 	.word	0x0800a930
 80015b8:	0800a950 	.word	0x0800a950
 80015bc:	0800a968 	.word	0x0800a968
 80015c0:	200001f4 	.word	0x200001f4

080015c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b094      	sub	sp, #80	@ 0x50
 80015c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	2238      	movs	r2, #56	@ 0x38
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f006 fb78 	bl	8007cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f001 fa04 	bl	80029f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f6:	2340      	movs	r3, #64	@ 0x40
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fa:	2302      	movs	r3, #2
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015fe:	2302      	movs	r3, #2
 8001600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001602:	2304      	movs	r3, #4
 8001604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001606:	2355      	movs	r3, #85	@ 0x55
 8001608:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160a:	2302      	movs	r3, #2
 800160c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800160e:	2302      	movs	r3, #2
 8001610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001612:	2302      	movs	r3, #2
 8001614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fa9e 	bl	8002b5c <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001626:	f000 f949 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	2303      	movs	r3, #3
 8001630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2104      	movs	r1, #4
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fd9c 	bl	8003180 <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800164e:	f000 f935 	bl	80018bc <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3750      	adds	r7, #80	@ 0x50
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001662:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <MX_USART1_UART_Init+0x94>)
 8001664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001668:	4a22      	ldr	r2, [pc, #136]	@ (80016f4 <MX_USART1_UART_Init+0x98>)
 800166a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001678:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001680:	220c      	movs	r2, #12
 8001682:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001690:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a2:	4812      	ldr	r0, [pc, #72]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016a4:	f002 f978 	bl	8003998 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80016ae:	f000 f905 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b2:	2100      	movs	r1, #0
 80016b4:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016b6:	f004 fbd2 	bl	8005e5e <HAL_UARTEx_SetTxFifoThreshold>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80016c0:	f000 f8fc 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c4:	2100      	movs	r1, #0
 80016c6:	4809      	ldr	r0, [pc, #36]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016c8:	f004 fc07 	bl	8005eda <HAL_UARTEx_SetRxFifoThreshold>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80016d2:	f000 f8f3 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_USART1_UART_Init+0x90>)
 80016d8:	f004 fb88 	bl	8005dec <HAL_UARTEx_DisableFifoMode>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80016e2:	f000 f8eb 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200009f8 	.word	0x200009f8
 80016f0:	40013800 	.word	0x40013800
 80016f4:	000f4240 	.word	0x000f4240

080016f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016fc:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 80016fe:	4a23      	ldr	r2, [pc, #140]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001702:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001704:	4a22      	ldr	r2, [pc, #136]	@ (8001790 <MX_USART2_UART_Init+0x98>)
 8001706:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171a:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 800171c:	220c      	movs	r2, #12
 800171e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800173e:	4812      	ldr	r0, [pc, #72]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001740:	f002 f92a 	bl	8003998 <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800174a:	f000 f8b7 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	480d      	ldr	r0, [pc, #52]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001752:	f004 fb84 	bl	8005e5e <HAL_UARTEx_SetTxFifoThreshold>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 800175c:	f000 f8ae 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001764:	f004 fbb9 	bl	8005eda <HAL_UARTEx_SetRxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800176e:	f000 f8a5 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_USART2_UART_Init+0x90>)
 8001774:	f004 fb3a 	bl	8005dec <HAL_UARTEx_DisableFifoMode>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800177e:	f000 f89d 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000a8c 	.word	0x20000a8c
 800178c:	40004400 	.word	0x40004400
 8001790:	000f4240 	.word	0x000f4240

08001794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <MX_DMA_Init+0x50>)
 800179c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800179e:	4a11      	ldr	r2, [pc, #68]	@ (80017e4 <MX_DMA_Init+0x50>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_DMA_Init+0x50>)
 80017a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <MX_DMA_Init+0x50>)
 80017b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b6:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <MX_DMA_Init+0x50>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_DMA_Init+0x50>)
 80017c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	200b      	movs	r0, #11
 80017d0:	f000 fc0f 	bl	8001ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017d4:	200b      	movs	r0, #11
 80017d6:	f000 fc26 	bl	8002026 <HAL_NVIC_EnableIRQ>

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_GPIO_Init+0x78>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <MX_GPIO_Init+0x78>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_GPIO_Init+0x78>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_GPIO_Init+0x78>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	4a11      	ldr	r2, [pc, #68]	@ (8001860 <MX_GPIO_Init+0x78>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_GPIO_Init+0x78>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <MX_GPIO_Init+0x7c>)
 8001836:	f001 f8c5 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800183a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4804      	ldr	r0, [pc, #16]	@ (8001864 <MX_GPIO_Init+0x7c>)
 8001854:	f000 ff34 	bl	80026c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	48000400 	.word	0x48000400

08001868 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <HAL_UART_RxCpltCallback+0x3c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d107      	bne.n	800188a <HAL_UART_RxCpltCallback+0x22>
		flag_reception_uart2 = 1;
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_UART_RxCpltCallback+0x40>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
		/*
		 * Relancer la réception dans l'interruption
	     */
		HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	490a      	ldr	r1, [pc, #40]	@ (80018ac <HAL_UART_RxCpltCallback+0x44>)
 8001884:	480a      	ldr	r0, [pc, #40]	@ (80018b0 <HAL_UART_RxCpltCallback+0x48>)
 8001886:	f002 f965 	bl	8003b54 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART1) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <HAL_UART_RxCpltCallback+0x4c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d102      	bne.n	800189a <HAL_UART_RxCpltCallback+0x32>
		flag_reception_uart1 = 1;
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_UART_RxCpltCallback+0x50>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
	}
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40004400 	.word	0x40004400
 80018a8:	20000b80 	.word	0x20000b80
 80018ac:	20000b82 	.word	0x20000b82
 80018b0:	20000a8c 	.word	0x20000a8c
 80018b4:	40013800 	.word	0x40013800
 80018b8:	20000b81 	.word	0x20000b81

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <Error_Handler+0x8>

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <HAL_MspInit+0x44>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <HAL_MspInit+0x44>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <HAL_MspInit+0x44>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_MspInit+0x44>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	4a08      	ldr	r2, [pc, #32]	@ (800190c <HAL_MspInit+0x44>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_MspInit+0x44>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018fe:	f001 f91d 	bl	8002b3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09c      	sub	sp, #112	@ 0x70
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	2244      	movs	r2, #68	@ 0x44
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f006 f9c9 	bl	8007cc8 <memset>
  if(huart->Instance==USART1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5b      	ldr	r2, [pc, #364]	@ (8001aa8 <HAL_UART_MspInit+0x198>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d16b      	bne.n	8001a18 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001940:	2301      	movs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001948:	f107 0318 	add.w	r3, r7, #24
 800194c:	4618      	mov	r0, r3
 800194e:	f001 fe33 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001958:	f7ff ffb0 	bl	80018bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800195c:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001960:	4a52      	ldr	r2, [pc, #328]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001966:	6613      	str	r3, [r2, #96]	@ 0x60
 8001968:	4b50      	ldr	r3, [pc, #320]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 800196a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b4d      	ldr	r3, [pc, #308]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	4a4c      	ldr	r2, [pc, #304]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001980:	4b4a      	ldr	r3, [pc, #296]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800198c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001990:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199e:	2307      	movs	r3, #7
 80019a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ac:	f000 fe88 	bl	80026c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80019b0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019b2:	4a40      	ldr	r2, [pc, #256]	@ (8001ab4 <HAL_UART_MspInit+0x1a4>)
 80019b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80019b6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019b8:	2218      	movs	r2, #24
 80019ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019bc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019c8:	4b39      	ldr	r3, [pc, #228]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019ca:	2280      	movs	r2, #128	@ 0x80
 80019cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ce:	4b38      	ldr	r3, [pc, #224]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019d4:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019da:	4b35      	ldr	r3, [pc, #212]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019dc:	2220      	movs	r2, #32
 80019de:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019e0:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019e8:	4831      	ldr	r0, [pc, #196]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019ea:	f000 fb37 	bl	800205c <HAL_DMA_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80019f4:	f7ff ff62 	bl	80018bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 80019fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a00:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab0 <HAL_UART_MspInit+0x1a0>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2025      	movs	r0, #37	@ 0x25
 8001a0c:	f000 faf1 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a10:	2025      	movs	r0, #37	@ 0x25
 8001a12:	f000 fb08 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a16:	e043      	b.n	8001aa0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <HAL_UART_MspInit+0x1a8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d13e      	bne.n	8001aa0 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 fdc2 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8001a3a:	f7ff ff3f 	bl	80018bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	4a1a      	ldr	r2, [pc, #104]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5a:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_UART_MspInit+0x19c>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001a6e:	230c      	movs	r3, #12
 8001a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a8c:	f000 fe18 	bl	80026c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2026      	movs	r0, #38	@ 0x26
 8001a96:	f000 faac 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a9a:	2026      	movs	r0, #38	@ 0x26
 8001a9c:	f000 fac3 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 8001aa0:	bf00      	nop
 8001aa2:	3770      	adds	r7, #112	@ 0x70
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	20000b20 	.word	0x20000b20
 8001ab4:	40020008 	.word	0x40020008
 8001ab8:	40004400 	.word	0x40004400

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b12:	f000 f975 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <DMA1_Channel1_IRQHandler+0x10>)
 8001b22:	f000 fc7e 	bl	8002422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000b20 	.word	0x20000b20

08001b30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <USART1_IRQHandler+0x10>)
 8001b36:	f002 f8a5 	bl	8003c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200009f8 	.word	0x200009f8

08001b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <USART2_IRQHandler+0x10>)
 8001b4a:	f002 f89b 	bl	8003c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000a8c 	.word	0x20000a8c

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b72:	f006 f8b5 	bl	8007ce0 <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9a:	bf00      	nop
 8001b9c:	e7fd      	b.n	8001b9a <_exit+0x12>

08001b9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e00a      	b.n	8001bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb0:	f3af 8000 	nop.w
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf0      	blt.n	8001bb0 <_read+0x12>
  }

  return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e009      	b.n	8001bfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fb6a 	bl	80012cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbf1      	blt.n	8001bea <_write+0x12>
  }
  return len;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_close>:

int _close(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c38:	605a      	str	r2, [r3, #4]
  return 0;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_isatty>:

int _isatty(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f006 f81a 	bl	8007ce0 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20008000 	.word	0x20008000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	20000b84 	.word	0x20000b84
 8001ce0:	20000cd8 	.word	0x20000cd8

08001ce4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d08:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d0a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d0c:	f7ff ffea 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d12:	490d      	ldr	r1, [pc, #52]	@ (8001d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <LoopForever+0xe>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d28:	4c0a      	ldr	r4, [pc, #40]	@ (8001d54 <LoopForever+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f005 ffd9 	bl	8007cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3a:	f7ff fad9 	bl	80012f0 <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   r0, =_estack
 8001d40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d4c:	0800ae04 	.word	0x0800ae04
  ldr r2, =_sbss
 8001d50:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d54:	20000cd8 	.word	0x20000cd8

08001d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_2_IRQHandler>

08001d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f939 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f80e 	bl	8001d8c <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	e001      	b.n	8001d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7c:	f7ff fda4 	bl	80018c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d80:	79fb      	ldrb	r3, [r7, #7]

}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <HAL_InitTick+0x68>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d022      	beq.n	8001de6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_InitTick+0x6c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <HAL_InitTick+0x68>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f944 	bl	8002042 <HAL_SYSTICK_Config>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10f      	bne.n	8001de0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	d809      	bhi.n	8001dda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dce:	f000 f910 	bl	8001ff2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <HAL_InitTick+0x70>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e004      	b.n	8001dea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e001      	b.n	8001dea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_IncTick+0x1c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a03      	ldr	r2, [pc, #12]	@ (8001e1c <HAL_IncTick+0x1c>)
 8001e10:	6013      	str	r3, [r2, #0]
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20000b88 	.word	0x20000b88
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000b88 	.word	0x20000b88

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	@ (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	@ (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	@ (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	@ 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	@ 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa8:	d301      	bcc.n	8001fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <SysTick_Config+0x40>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fbc:	f7ff ff8e 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <SysTick_Config+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc6:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <SysTick_Config+0x40>)
 8001fc8:	2207      	movs	r2, #7
 8001fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000e010 	.word	0xe000e010

08001fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff29 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff40 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff90 	bl	8001f30 <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5f 	bl	8001edc <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff33 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa4 	bl	8001f98 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e08d      	b.n	800218a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	4b47      	ldr	r3, [pc, #284]	@ (8002194 <HAL_DMA_Init+0x138>)
 8002076:	429a      	cmp	r2, r3
 8002078:	d80f      	bhi.n	800209a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	4b45      	ldr	r3, [pc, #276]	@ (8002198 <HAL_DMA_Init+0x13c>)
 8002082:	4413      	add	r3, r2
 8002084:	4a45      	ldr	r2, [pc, #276]	@ (800219c <HAL_DMA_Init+0x140>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	009a      	lsls	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a42      	ldr	r2, [pc, #264]	@ (80021a0 <HAL_DMA_Init+0x144>)
 8002096:	641a      	str	r2, [r3, #64]	@ 0x40
 8002098:	e00e      	b.n	80020b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <HAL_DMA_Init+0x148>)
 80020a2:	4413      	add	r3, r2
 80020a4:	4a3d      	ldr	r2, [pc, #244]	@ (800219c <HAL_DMA_Init+0x140>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	009a      	lsls	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a3c      	ldr	r2, [pc, #240]	@ (80021a8 <HAL_DMA_Init+0x14c>)
 80020b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80020ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80020dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fa76 	bl	80025fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002118:	d102      	bne.n	8002120 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002134:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <HAL_DMA_Init+0x104>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b04      	cmp	r3, #4
 8002144:	d80c      	bhi.n	8002160 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fa96 	bl	8002678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	e008      	b.n	8002172 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020407 	.word	0x40020407
 8002198:	bffdfff8 	.word	0xbffdfff8
 800219c:	cccccccd 	.word	0xcccccccd
 80021a0:	40020000 	.word	0x40020000
 80021a4:	bffdfbf8 	.word	0xbffdfbf8
 80021a8:	40020400 	.word	0x40020400

080021ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_DMA_Start_IT+0x20>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e066      	b.n	800229a <HAL_DMA_Start_IT+0xee>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d155      	bne.n	800228c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f9bb 	bl	8002580 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 020e 	orr.w	r2, r2, #14
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e00f      	b.n	8002244 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 020a 	orr.w	r2, r2, #10
 8002242:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002260:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002278:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e005      	b.n	8002298 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002294:	2302      	movs	r3, #2
 8002296:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002298:	7dfb      	ldrb	r3, [r7, #23]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d005      	beq.n	80022c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2204      	movs	r2, #4
 80022be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e037      	b.n	8002336 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 020e 	bic.w	r2, r2, #14
 80022d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f003 021f 	and.w	r2, r3, #31
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002312:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800232a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002334:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d00d      	beq.n	8002388 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e047      	b.n	8002418 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020e 	bic.w	r2, r2, #14
 8002396:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
    }
  }
  return status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2204      	movs	r2, #4
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d026      	beq.n	800249c <HAL_DMA_IRQHandler+0x7a>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d021      	beq.n	800249c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d107      	bne.n	8002476 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0204 	bic.w	r2, r2, #4
 8002474:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	2104      	movs	r1, #4
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	2b00      	cmp	r3, #0
 8002490:	d071      	beq.n	8002576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800249a:	e06c      	b.n	8002576 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2202      	movs	r2, #2
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d02e      	beq.n	800250e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d029      	beq.n	800250e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 020a 	bic.w	r2, r2, #10
 80024d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	2102      	movs	r1, #2
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d038      	beq.n	8002576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800250c:	e033      	b.n	8002576 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2208      	movs	r2, #8
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d02a      	beq.n	8002578 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d025      	beq.n	8002578 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 020e 	bic.w	r2, r2, #14
 800253a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002576:	bf00      	nop
 8002578:	bf00      	nop
}
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002596:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f003 021f 	and.w	r2, r3, #31
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f202 	lsl.w	r2, r1, r2
 80025bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d108      	bne.n	80025e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025de:	e007      	b.n	80025f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800260c:	429a      	cmp	r2, r3
 800260e:	d802      	bhi.n	8002616 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002610:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e001      	b.n	800261a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002618:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3b08      	subs	r3, #8
 8002626:	4a12      	ldr	r2, [pc, #72]	@ (8002670 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	009a      	lsls	r2, r3, #2
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a0b      	ldr	r2, [pc, #44]	@ (8002674 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002646:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2201      	movs	r2, #1
 8002650:	409a      	lsls	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40020407 	.word	0x40020407
 8002668:	40020800 	.word	0x40020800
 800266c:	40020820 	.word	0x40020820
 8002670:	cccccccd 	.word	0xcccccccd
 8002674:	40020880 	.word	0x40020880

08002678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800269a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2201      	movs	r2, #1
 80026a6:	409a      	lsls	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	1000823f 	.word	0x1000823f
 80026bc:	40020940 	.word	0x40020940

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ce:	e15a      	b.n	8002986 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 814c 	beq.w	8002980 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d005      	beq.n	8002700 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d130      	bne.n	8002762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002736:	2201      	movs	r2, #1
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 0201 	and.w	r2, r3, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b03      	cmp	r3, #3
 800276c:	d017      	beq.n	800279e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d123      	bne.n	80027f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	6939      	ldr	r1, [r7, #16]
 80027ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80a6 	beq.w	8002980 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002834:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <HAL_GPIO_Init+0x2e4>)
 8002836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002838:	4a5a      	ldr	r2, [pc, #360]	@ (80029a4 <HAL_GPIO_Init+0x2e4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002840:	4b58      	ldr	r3, [pc, #352]	@ (80029a4 <HAL_GPIO_Init+0x2e4>)
 8002842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284c:	4a56      	ldr	r2, [pc, #344]	@ (80029a8 <HAL_GPIO_Init+0x2e8>)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002876:	d01f      	beq.n	80028b8 <HAL_GPIO_Init+0x1f8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a4c      	ldr	r2, [pc, #304]	@ (80029ac <HAL_GPIO_Init+0x2ec>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d019      	beq.n	80028b4 <HAL_GPIO_Init+0x1f4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a4b      	ldr	r2, [pc, #300]	@ (80029b0 <HAL_GPIO_Init+0x2f0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_GPIO_Init+0x1f0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a4a      	ldr	r2, [pc, #296]	@ (80029b4 <HAL_GPIO_Init+0x2f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00d      	beq.n	80028ac <HAL_GPIO_Init+0x1ec>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a49      	ldr	r2, [pc, #292]	@ (80029b8 <HAL_GPIO_Init+0x2f8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0x1e8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a48      	ldr	r2, [pc, #288]	@ (80029bc <HAL_GPIO_Init+0x2fc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_GPIO_Init+0x1e4>
 80028a0:	2305      	movs	r3, #5
 80028a2:	e00a      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028a4:	2306      	movs	r3, #6
 80028a6:	e008      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e006      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028ac:	2303      	movs	r3, #3
 80028ae:	e004      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e002      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028b8:	2300      	movs	r3, #0
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	f002 0203 	and.w	r2, r2, #3
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	4093      	lsls	r3, r2
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ca:	4937      	ldr	r1, [pc, #220]	@ (80029a8 <HAL_GPIO_Init+0x2e8>)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028d8:	4b39      	ldr	r3, [pc, #228]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028fc:	4a30      	ldr	r2, [pc, #192]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002902:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002926:	4a26      	ldr	r2, [pc, #152]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800292c:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002950:	4a1b      	ldr	r2, [pc, #108]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800297a:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3301      	adds	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	f47f ae9d 	bne.w	80026d0 <HAL_GPIO_Init+0x10>
  }
}
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010000 	.word	0x40010000
 80029ac:	48000400 	.word	0x48000400
 80029b0:	48000800 	.word	0x48000800
 80029b4:	48000c00 	.word	0x48000c00
 80029b8:	48001000 	.word	0x48001000
 80029bc:	48001400 	.word	0x48001400
 80029c0:	40010400 	.word	0x40010400

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d141      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a02:	4b4b      	ldr	r3, [pc, #300]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0e:	d131      	bne.n	8002a74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a10:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a16:	4a46      	ldr	r2, [pc, #280]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a20:	4b43      	ldr	r3, [pc, #268]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a28:	4a41      	ldr	r2, [pc, #260]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a30:	4b40      	ldr	r3, [pc, #256]	@ (8002b34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2232      	movs	r2, #50	@ 0x32
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	0c9b      	lsrs	r3, r3, #18
 8002a42:	3301      	adds	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a46:	e002      	b.n	8002a4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a4e:	4b38      	ldr	r3, [pc, #224]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5a:	d102      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f2      	bne.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a62:	4b33      	ldr	r3, [pc, #204]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6e:	d158      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e057      	b.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a84:	e04d      	b.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a8c:	d141      	bne.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a8e:	4b28      	ldr	r3, [pc, #160]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a9a:	d131      	bne.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a9c:	4b24      	ldr	r3, [pc, #144]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aa2:	4a23      	ldr	r2, [pc, #140]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aac:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2232      	movs	r2, #50	@ 0x32
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	0c9b      	lsrs	r3, r3, #18
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad2:	e002      	b.n	8002ada <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ada:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae6:	d102      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f2      	bne.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afa:	d112      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e011      	b.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b06:	4a0a      	ldr	r2, [pc, #40]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b10:	e007      	b.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b12:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b1a:	4a05      	ldr	r2, [pc, #20]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40007000 	.word	0x40007000
 8002b34:	20000000 	.word	0x20000000
 8002b38:	431bde83 	.word	0x431bde83

08002b3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b4a:	6093      	str	r3, [r2, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e2fe      	b.n	800316c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d075      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7a:	4b97      	ldr	r3, [pc, #604]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b84:	4b94      	ldr	r3, [pc, #592]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3e>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4b8d      	ldr	r3, [pc, #564]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d157      	bne.n	8002c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e2d9      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x74>
 8002bc2:	4b85      	ldr	r3, [pc, #532]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a84      	ldr	r2, [pc, #528]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b7c      	ldr	r3, [pc, #496]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7b      	ldr	r2, [pc, #492]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bf4:	4b78      	ldr	r3, [pc, #480]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a77      	ldr	r2, [pc, #476]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b75      	ldr	r3, [pc, #468]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a74      	ldr	r2, [pc, #464]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7ff f906 	bl	8001e24 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff f902 	bl	8001e24 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e29e      	b.n	800316c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f8f2 	bl	8001e24 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7ff f8ee 	bl	8001e24 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	@ 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e28a      	b.n	800316c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c56:	4b60      	ldr	r3, [pc, #384]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d075      	beq.n	8002d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c72:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7c:	4b56      	ldr	r3, [pc, #344]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_OscConfig+0x136>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_OscConfig+0x13c>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11f      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c98:	4b4f      	ldr	r3, [pc, #316]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x154>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e25d      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	4b49      	ldr	r3, [pc, #292]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	4946      	ldr	r1, [pc, #280]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cc4:	4b45      	ldr	r3, [pc, #276]	@ (8002ddc <HAL_RCC_OscConfig+0x280>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f85f 	bl	8001d8c <HAL_InitTick>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d043      	beq.n	8002d5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e249      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7ff f89a 	bl	8001e24 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7ff f896 	bl	8001e24 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e232      	b.n	800316c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d06:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	492d      	ldr	r1, [pc, #180]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
 8002d26:	e01a      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d28:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7ff f876 	bl	8001e24 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7ff f872 	bl	8001e24 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e20e      	b.n	800316c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1e0>
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d041      	beq.n	8002dee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01c      	beq.n	8002dac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d78:	4a17      	ldr	r2, [pc, #92]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7ff f84f 	bl	8001e24 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7ff f84b 	bl	8001e24 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e1e7      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ef      	beq.n	8002d8a <HAL_RCC_OscConfig+0x22e>
 8002daa:	e020      	b.n	8002dee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db2:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7ff f832 	bl	8001e24 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc2:	e00d      	b.n	8002de0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7ff f82e 	bl	8001e24 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d906      	bls.n	8002de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1ca      	b.n	800316c <HAL_RCC_OscConfig+0x610>
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de0:	4b8c      	ldr	r3, [pc, #560]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ea      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a6 	beq.w	8002f48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e00:	4b84      	ldr	r3, [pc, #528]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2b4>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x2b6>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4b7f      	ldr	r3, [pc, #508]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e22:	4b7c      	ldr	r3, [pc, #496]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e32:	4b79      	ldr	r3, [pc, #484]	@ (8003018 <HAL_RCC_OscConfig+0x4bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d118      	bne.n	8002e70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e3e:	4b76      	ldr	r3, [pc, #472]	@ (8003018 <HAL_RCC_OscConfig+0x4bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a75      	ldr	r2, [pc, #468]	@ (8003018 <HAL_RCC_OscConfig+0x4bc>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe ffeb 	bl	8001e24 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7fe ffe7 	bl	8001e24 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e183      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e64:	4b6c      	ldr	r3, [pc, #432]	@ (8003018 <HAL_RCC_OscConfig+0x4bc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d108      	bne.n	8002e8a <HAL_RCC_OscConfig+0x32e>
 8002e78:	4b66      	ldr	r3, [pc, #408]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7e:	4a65      	ldr	r2, [pc, #404]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e88:	e024      	b.n	8002ed4 <HAL_RCC_OscConfig+0x378>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d110      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x358>
 8002e92:	4b60      	ldr	r3, [pc, #384]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e98:	4a5e      	ldr	r2, [pc, #376]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eb2:	e00f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x378>
 8002eb4:	4b57      	ldr	r3, [pc, #348]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eba:	4a56      	ldr	r2, [pc, #344]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ec4:	4b53      	ldr	r3, [pc, #332]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eca:	4a52      	ldr	r2, [pc, #328]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d016      	beq.n	8002f0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe ffa2 	bl	8001e24 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe ff9e 	bl	8001e24 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e138      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ed      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x388>
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fe ff8b 	bl	8001e24 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe ff87 	bl	8001e24 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e121      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f28:	4b3a      	ldr	r3, [pc, #232]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ed      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4b35      	ldr	r3, [pc, #212]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	4a34      	ldr	r2, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d03c      	beq.n	8002fce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01c      	beq.n	8002f96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f62:	4a2c      	ldr	r2, [pc, #176]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe ff5a 	bl	8001e24 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f74:	f7fe ff56 	bl	8001e24 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0f2      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f86:	4b23      	ldr	r3, [pc, #140]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ef      	beq.n	8002f74 <HAL_RCC_OscConfig+0x418>
 8002f94:	e01b      	b.n	8002fce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f96:	4b1f      	ldr	r3, [pc, #124]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fe ff3d 	bl	8001e24 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fae:	f7fe ff39 	bl	8001e24 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0d5      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc0:	4b14      	ldr	r3, [pc, #80]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ef      	bne.n	8002fae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80c9 	beq.w	800316a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	f000 8083 	beq.w	80030ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d15e      	bne.n	80030ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a08      	ldr	r2, [pc, #32]	@ (8003014 <HAL_RCC_OscConfig+0x4b8>)
 8002ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe ff13 	bl	8001e24 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003000:	e00c      	b.n	800301c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe ff0f 	bl	8001e24 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d905      	bls.n	800301c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0ab      	b.n	800316c <HAL_RCC_OscConfig+0x610>
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301c:	4b55      	ldr	r3, [pc, #340]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ec      	bne.n	8003002 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003028:	4b52      	ldr	r3, [pc, #328]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	4b52      	ldr	r3, [pc, #328]	@ (8003178 <HAL_RCC_OscConfig+0x61c>)
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6a11      	ldr	r1, [r2, #32]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003038:	3a01      	subs	r2, #1
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	4311      	orrs	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003042:	0212      	lsls	r2, r2, #8
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800304a:	0852      	lsrs	r2, r2, #1
 800304c:	3a01      	subs	r2, #1
 800304e:	0552      	lsls	r2, r2, #21
 8003050:	4311      	orrs	r1, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003056:	0852      	lsrs	r2, r2, #1
 8003058:	3a01      	subs	r2, #1
 800305a:	0652      	lsls	r2, r2, #25
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003062:	06d2      	lsls	r2, r2, #27
 8003064:	430a      	orrs	r2, r1
 8003066:	4943      	ldr	r1, [pc, #268]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 8003068:	4313      	orrs	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306c:	4b41      	ldr	r3, [pc, #260]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a40      	ldr	r2, [pc, #256]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 8003072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003076:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003078:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a3d      	ldr	r2, [pc, #244]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 800307e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003082:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fece 	bl	8001e24 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe feca 	bl	8001e24 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e066      	b.n	800316c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309e:	4b35      	ldr	r3, [pc, #212]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x530>
 80030aa:	e05e      	b.n	800316a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b31      	ldr	r3, [pc, #196]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a30      	ldr	r2, [pc, #192]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 80030b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe feb4 	bl	8001e24 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe feb0 	bl	8001e24 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04c      	b.n	800316c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d2:	4b28      	ldr	r3, [pc, #160]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030de:	4b25      	ldr	r3, [pc, #148]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	4924      	ldr	r1, [pc, #144]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_RCC_OscConfig+0x620>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	60cb      	str	r3, [r1, #12]
 80030ea:	e03e      	b.n	800316a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e039      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_RCC_OscConfig+0x618>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	429a      	cmp	r2, r3
 800310a:	d12c      	bne.n	8003166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	3b01      	subs	r3, #1
 8003118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d123      	bne.n	8003166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d11b      	bne.n	8003166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d113      	bne.n	8003166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d109      	bne.n	8003166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	019f800c 	.word	0x019f800c
 800317c:	feeefffc 	.word	0xfeeefffc

08003180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e11e      	b.n	80033d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b91      	ldr	r3, [pc, #580]	@ (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b8e      	ldr	r3, [pc, #568]	@ (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 020f 	bic.w	r2, r3, #15
 80031ae:	498c      	ldr	r1, [pc, #560]	@ (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b8a      	ldr	r3, [pc, #552]	@ (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e106      	b.n	80033d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d073      	beq.n	80032bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d129      	bne.n	8003230 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031dc:	4b81      	ldr	r3, [pc, #516]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0f4      	b.n	80033d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031ec:	f000 f99e 	bl	800352c <RCC_GetSysClockFreqFromPLLSource>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4a7c      	ldr	r2, [pc, #496]	@ (80033e8 <HAL_RCC_ClockConfig+0x268>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d93f      	bls.n	800327a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031fa:	4b7a      	ldr	r3, [pc, #488]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800320e:	2b00      	cmp	r3, #0
 8003210:	d033      	beq.n	800327a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	d12f      	bne.n	800327a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800321a:	4b72      	ldr	r3, [pc, #456]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003222:	4a70      	ldr	r2, [pc, #448]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003228:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e024      	b.n	800327a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d107      	bne.n	8003248 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003238:	4b6a      	ldr	r3, [pc, #424]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0c6      	b.n	80033d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	4b66      	ldr	r3, [pc, #408]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0be      	b.n	80033d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003258:	f000 f8ce 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 800325c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4a61      	ldr	r2, [pc, #388]	@ (80033e8 <HAL_RCC_ClockConfig+0x268>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d909      	bls.n	800327a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003266:	4b5f      	ldr	r3, [pc, #380]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800326e:	4a5d      	ldr	r2, [pc, #372]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003274:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003276:	2380      	movs	r3, #128	@ 0x80
 8003278:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b5a      	ldr	r3, [pc, #360]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4957      	ldr	r1, [pc, #348]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328c:	f7fe fdca 	bl	8001e24 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7fe fdc6 	bl	8001e24 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e095      	b.n	80033d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b4e      	ldr	r3, [pc, #312]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b43      	ldr	r3, [pc, #268]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a42      	ldr	r2, [pc, #264]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80032da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032ec:	4b3d      	ldr	r3, [pc, #244]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032f4:	4a3b      	ldr	r2, [pc, #236]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80032f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b39      	ldr	r3, [pc, #228]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4936      	ldr	r1, [pc, #216]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
 800330e:	e008      	b.n	8003322 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b80      	cmp	r3, #128	@ 0x80
 8003314:	d105      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003316:	4b33      	ldr	r3, [pc, #204]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a32      	ldr	r2, [pc, #200]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 800331c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003320:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003322:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d21d      	bcs.n	800336c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003330:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 020f 	bic.w	r2, r3, #15
 8003338:	4929      	ldr	r1, [pc, #164]	@ (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003340:	f7fe fd70 	bl	8001e24 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe fd6c 	bl	8001e24 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e03b      	b.n	80033d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d1ed      	bne.n	8003348 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b1a      	ldr	r3, [pc, #104]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4917      	ldr	r1, [pc, #92]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003396:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490f      	ldr	r1, [pc, #60]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033aa:	f000 f825 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <HAL_RCC_ClockConfig+0x264>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	490c      	ldr	r1, [pc, #48]	@ (80033ec <HAL_RCC_ClockConfig+0x26c>)
 80033bc:	5ccb      	ldrb	r3, [r1, r3]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	4a0a      	ldr	r2, [pc, #40]	@ (80033f0 <HAL_RCC_ClockConfig+0x270>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_RCC_ClockConfig+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fcdc 	bl	8001d8c <HAL_InitTick>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40021000 	.word	0x40021000
 80033e8:	04c4b400 	.word	0x04c4b400
 80033ec:	0800a98c 	.word	0x0800a98c
 80033f0:	20000000 	.word	0x20000000
 80033f4:	20000004 	.word	0x20000004

080033f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033fe:	4b2c      	ldr	r3, [pc, #176]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b04      	cmp	r3, #4
 8003408:	d102      	bne.n	8003410 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800340a:	4b2a      	ldr	r3, [pc, #168]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	e047      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003410:	4b27      	ldr	r3, [pc, #156]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d102      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800341c:	4b26      	ldr	r3, [pc, #152]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	e03e      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003422:	4b23      	ldr	r3, [pc, #140]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d136      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800342e:	4b20      	ldr	r3, [pc, #128]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003438:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3301      	adds	r3, #1
 8003444:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800344c:	4a1a      	ldr	r2, [pc, #104]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	4a16      	ldr	r2, [pc, #88]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003456:	68d2      	ldr	r2, [r2, #12]
 8003458:	0a12      	lsrs	r2, r2, #8
 800345a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	617b      	str	r3, [r7, #20]
      break;
 8003464:	e00c      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003466:	4a13      	ldr	r2, [pc, #76]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003470:	68d2      	ldr	r2, [r2, #12]
 8003472:	0a12      	lsrs	r2, r2, #8
 8003474:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]
      break;
 800347e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0e5b      	lsrs	r3, r3, #25
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	3301      	adds	r3, #1
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e001      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034a0:	693b      	ldr	r3, [r7, #16]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	@ (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4904      	ldr	r1, [pc, #16]	@ (80034fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	0800a99c 	.word	0x0800a99c

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003504:	f7ff ffda 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4904      	ldr	r1, [pc, #16]	@ (8003528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	0800a99c 	.word	0x0800a99c

0800352c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003532:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3301      	adds	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d10c      	bne.n	800356a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003550:	4a17      	ldr	r2, [pc, #92]	@ (80035b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800355a:	68d2      	ldr	r2, [r2, #12]
 800355c:	0a12      	lsrs	r2, r2, #8
 800355e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
    break;
 8003568:	e00c      	b.n	8003584 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800356a:	4a12      	ldr	r2, [pc, #72]	@ (80035b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003574:	68d2      	ldr	r2, [r2, #12]
 8003576:	0a12      	lsrs	r2, r2, #8
 8003578:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]
    break;
 8003582:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003584:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	0e5b      	lsrs	r3, r3, #25
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	3301      	adds	r3, #1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800359e:	687b      	ldr	r3, [r7, #4]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40021000 	.word	0x40021000
 80035b0:	007a1200 	.word	0x007a1200
 80035b4:	00f42400 	.word	0x00f42400

080035b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c0:	2300      	movs	r3, #0
 80035c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c4:	2300      	movs	r3, #0
 80035c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8098 	beq.w	8003706 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b43      	ldr	r3, [pc, #268]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10d      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ea:	4a3f      	ldr	r2, [pc, #252]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f2:	4b3d      	ldr	r3, [pc, #244]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fe:	2301      	movs	r3, #1
 8003600:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003602:	4b3a      	ldr	r3, [pc, #232]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a39      	ldr	r2, [pc, #228]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800360e:	f7fe fc09 	bl	8001e24 <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003614:	e009      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fe fc05 	bl	8001e24 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d902      	bls.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	74fb      	strb	r3, [r7, #19]
        break;
 8003628:	e005      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800362a:	4b30      	ldr	r3, [pc, #192]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ef      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d159      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800363c:	4b2a      	ldr	r3, [pc, #168]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003646:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01e      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	d019      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003658:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003662:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003664:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	4a1f      	ldr	r2, [pc, #124]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003674:	4b1c      	ldr	r3, [pc, #112]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	4a1b      	ldr	r2, [pc, #108]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003684:	4a18      	ldr	r2, [pc, #96]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe fbc5 	bl	8001e24 <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369c:	e00b      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fe fbc1 	bl	8001e24 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d902      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	74fb      	strb	r3, [r7, #19]
            break;
 80036b4:	e006      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b6:	4b0c      	ldr	r3, [pc, #48]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ec      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	4903      	ldr	r1, [pc, #12]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036e0:	e008      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036e2:	7cfb      	ldrb	r3, [r7, #19]
 80036e4:	74bb      	strb	r3, [r7, #18]
 80036e6:	e005      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f4:	7c7b      	ldrb	r3, [r7, #17]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d105      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fa:	4ba6      	ldr	r3, [pc, #664]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	4aa5      	ldr	r2, [pc, #660]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003704:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003712:	4ba0      	ldr	r3, [pc, #640]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003718:	f023 0203 	bic.w	r2, r3, #3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	499c      	ldr	r1, [pc, #624]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003734:	4b97      	ldr	r3, [pc, #604]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373a:	f023 020c 	bic.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4994      	ldr	r1, [pc, #592]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003756:	4b8f      	ldr	r3, [pc, #572]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	498b      	ldr	r1, [pc, #556]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003778:	4b86      	ldr	r3, [pc, #536]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	4983      	ldr	r1, [pc, #524]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800379a:	4b7e      	ldr	r3, [pc, #504]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	497a      	ldr	r1, [pc, #488]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037bc:	4b75      	ldr	r3, [pc, #468]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	4972      	ldr	r1, [pc, #456]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037de:	4b6d      	ldr	r3, [pc, #436]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4969      	ldr	r1, [pc, #420]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003800:	4b64      	ldr	r3, [pc, #400]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003806:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4961      	ldr	r1, [pc, #388]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003822:	4b5c      	ldr	r3, [pc, #368]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003828:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	4958      	ldr	r1, [pc, #352]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003844:	4b53      	ldr	r3, [pc, #332]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	4950      	ldr	r1, [pc, #320]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003862:	d105      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003864:	4b4b      	ldr	r3, [pc, #300]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a4a      	ldr	r2, [pc, #296]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800386e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003878:	2b00      	cmp	r3, #0
 800387a:	d015      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800387c:	4b45      	ldr	r3, [pc, #276]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003882:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388a:	4942      	ldr	r1, [pc, #264]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800389a:	d105      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800389c:	4b3d      	ldr	r3, [pc, #244]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038b4:	4b37      	ldr	r3, [pc, #220]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	4934      	ldr	r1, [pc, #208]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d2:	d105      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ec:	4b29      	ldr	r3, [pc, #164]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fa:	4926      	ldr	r1, [pc, #152]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800390a:	d105      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800390c:	4b21      	ldr	r3, [pc, #132]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a20      	ldr	r2, [pc, #128]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003916:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003924:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	4918      	ldr	r1, [pc, #96]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003942:	d105      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003944:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a12      	ldr	r2, [pc, #72]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800394e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800395c:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003962:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	490a      	ldr	r1, [pc, #40]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800397a:	d105      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4a04      	ldr	r2, [pc, #16]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003986:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003988:	7cbb      	ldrb	r3, [r7, #18]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000

08003998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e042      	b.n	8003a30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fd ffa7 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2224      	movs	r2, #36	@ 0x24
 80039c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 ff68 	bl	80048b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fc99 	bl	8004320 <UART_SetConfig>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e01b      	b.n	8003a30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 ffe7 	bl	80049fc <UART_CheckIdleState>
 8003a2e:	4603      	mov	r3, r0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d17b      	bne.n	8003b4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_UART_Transmit+0x26>
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e074      	b.n	8003b4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2221      	movs	r2, #33	@ 0x21
 8003a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a72:	f7fe f9d7 	bl	8001e24 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	88fa      	ldrh	r2, [r7, #6]
 8003a84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a90:	d108      	bne.n	8003aa4 <HAL_UART_Transmit+0x6c>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d104      	bne.n	8003aa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e003      	b.n	8003aac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aac:	e030      	b.n	8003b10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2180      	movs	r1, #128	@ 0x80
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f001 f849 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e03d      	b.n	8003b4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e007      	b.n	8003afe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3301      	adds	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1c8      	bne.n	8003aae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2200      	movs	r2, #0
 8003b24:	2140      	movs	r1, #64	@ 0x40
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f001 f812 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e006      	b.n	8003b4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
  }
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d137      	bne.n	8003bdc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_UART_Receive_IT+0x24>
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e030      	b.n	8003bde <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <HAL_UART_Receive_IT+0x94>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01f      	beq.n	8003bcc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d018      	beq.n	8003bcc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e6      	bne.n	8003b9a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f001 f82a 	bl	8004c2c <UART_Start_Receive_IT>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	e000      	b.n	8003bde <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3728      	adds	r7, #40	@ 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40008000 	.word	0x40008000

08003bec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	@ 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d137      	bne.n	8003c74 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Receive_DMA+0x24>
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e030      	b.n	8003c76 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a18      	ldr	r2, [pc, #96]	@ (8003c80 <HAL_UART_Receive_DMA+0x94>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01f      	beq.n	8003c64 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d018      	beq.n	8003c64 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	69f9      	ldr	r1, [r7, #28]
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f001 f900 	bl	8004e70 <UART_Start_Receive_DMA>
 8003c70:	4603      	mov	r3, r0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3728      	adds	r7, #40	@ 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40008000 	.word	0x40008000

08003c84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b0ba      	sub	sp, #232	@ 0xe8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003caa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003cae:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003cb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 82e3 	beq.w	80042b4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
      }
      return;
 8003cf6:	e2dd      	b.n	80042b4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8123 	beq.w	8003f48 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d06:	4b8d      	ldr	r3, [pc, #564]	@ (8003f3c <HAL_UART_IRQHandler+0x2b8>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d12:	4b8b      	ldr	r3, [pc, #556]	@ (8003f40 <HAL_UART_IRQHandler+0x2bc>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8116 	beq.w	8003f48 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d011      	beq.n	8003d4c <HAL_UART_IRQHandler+0xc8>
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <HAL_UART_IRQHandler+0xf8>
 8003d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	f043 0204 	orr.w	r2, r3, #4
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d011      	beq.n	8003dac <HAL_UART_IRQHandler+0x128>
 8003d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2204      	movs	r2, #4
 8003d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	f043 0202 	orr.w	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d017      	beq.n	8003de8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003dc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8003f3c <HAL_UART_IRQHandler+0x2b8>)
 8003dca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dde:	f043 0208 	orr.w	r2, r3, #8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <HAL_UART_IRQHandler+0x196>
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8249 	beq.w	80042b8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d013      	beq.n	8003e5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6e:	2b40      	cmp	r3, #64	@ 0x40
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d054      	beq.n	8003f28 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f001 f8dd 	bl	800503e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d146      	bne.n	8003f20 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1d9      	bne.n	8003e92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d017      	beq.n	8003f18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eee:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <HAL_UART_IRQHandler+0x2c0>)
 8003ef0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fa2b 	bl	8002354 <HAL_DMA_Abort_IT>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d019      	beq.n	8003f38 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003f12:	4610      	mov	r0, r2
 8003f14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f16:	e00f      	b.n	8003f38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f9eb 	bl	80042f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1e:	e00b      	b.n	8003f38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f9e7 	bl	80042f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f26:	e007      	b.n	8003f38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f9e3 	bl	80042f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003f36:	e1bf      	b.n	80042b8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	bf00      	nop
    return;
 8003f3a:	e1bd      	b.n	80042b8 <HAL_UART_IRQHandler+0x634>
 8003f3c:	10000001 	.word	0x10000001
 8003f40:	04000120 	.word	0x04000120
 8003f44:	080052f5 	.word	0x080052f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	f040 8153 	bne.w	80041f8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 814c 	beq.w	80041f8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8145 	beq.w	80041f8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2210      	movs	r2, #16
 8003f74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f80:	2b40      	cmp	r3, #64	@ 0x40
 8003f82:	f040 80bb 	bne.w	80040fc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 818f 	beq.w	80042bc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	f080 8187 	bcs.w	80042bc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 8087 	bne.w	80040da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ff6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ffa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004002:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800400e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1da      	bne.n	8003fcc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3308      	adds	r3, #8
 800401c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004026:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800403a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800403e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004042:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800404c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e1      	bne.n	8004016 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004076:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004078:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800407c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e3      	bne.n	8004052 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040a8:	f023 0310 	bic.w	r3, r3, #16
 80040ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e4      	bne.n	8004098 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe f8e4 	bl	80022a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f907 	bl	8004308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040fa:	e0df      	b.n	80042bc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004108:	b29b      	uxth	r3, r3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80d1 	beq.w	80042c0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800411e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80cc 	beq.w	80042c0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800413c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800414a:	647b      	str	r3, [r7, #68]	@ 0x44
 800414c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e4      	bne.n	8004128 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	623b      	str	r3, [r7, #32]
   return(result);
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004186:	633a      	str	r2, [r7, #48]	@ 0x30
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800418c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e1      	bne.n	800415e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0310 	bic.w	r3, r3, #16
 80041c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	617b      	str	r3, [r7, #20]
   return(result);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e4      	bne.n	80041ae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f889 	bl	8004308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041f6:	e063      	b.n	80042c0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <HAL_UART_IRQHandler+0x59e>
 8004204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f001 fdc8 	bl	8005db0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004220:	e051      	b.n	80042c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d014      	beq.n	8004258 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800422e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03a      	beq.n	80042c4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
    }
    return;
 8004256:	e035      	b.n	80042c4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_UART_IRQHandler+0x5f4>
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 f855 	bl	8005320 <UART_EndTransmit_IT>
    return;
 8004276:	e026      	b.n	80042c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_UART_IRQHandler+0x614>
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004288:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 fda1 	bl	8005dd8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004296:	e016      	b.n	80042c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <HAL_UART_IRQHandler+0x642>
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	da0c      	bge.n	80042c6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f001 fd89 	bl	8005dc4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042b2:	e008      	b.n	80042c6 <HAL_UART_IRQHandler+0x642>
      return;
 80042b4:	bf00      	nop
 80042b6:	e006      	b.n	80042c6 <HAL_UART_IRQHandler+0x642>
    return;
 80042b8:	bf00      	nop
 80042ba:	e004      	b.n	80042c6 <HAL_UART_IRQHandler+0x642>
      return;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <HAL_UART_IRQHandler+0x642>
      return;
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <HAL_UART_IRQHandler+0x642>
    return;
 80042c4:	bf00      	nop
  }
}
 80042c6:	37e8      	adds	r7, #232	@ 0xe8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004324:	b08c      	sub	sp, #48	@ 0x30
 8004326:	af00      	add	r7, sp, #0
 8004328:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	431a      	orrs	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	431a      	orrs	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	4313      	orrs	r3, r2
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4bab      	ldr	r3, [pc, #684]	@ (80045fc <UART_SetConfig+0x2dc>)
 8004350:	4013      	ands	r3, r2
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004358:	430b      	orrs	r3, r1
 800435a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4aa0      	ldr	r2, [pc, #640]	@ (8004600 <UART_SetConfig+0x2e0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004388:	4313      	orrs	r3, r2
 800438a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004396:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	f023 010f 	bic.w	r1, r3, #15
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a91      	ldr	r2, [pc, #580]	@ (8004604 <UART_SetConfig+0x2e4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d125      	bne.n	8004410 <UART_SetConfig+0xf0>
 80043c4:	4b90      	ldr	r3, [pc, #576]	@ (8004608 <UART_SetConfig+0x2e8>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d81a      	bhi.n	8004408 <UART_SetConfig+0xe8>
 80043d2:	a201      	add	r2, pc, #4	@ (adr r2, 80043d8 <UART_SetConfig+0xb8>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043f9 	.word	0x080043f9
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	08004401 	.word	0x08004401
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ee:	e0d6      	b.n	800459e <UART_SetConfig+0x27e>
 80043f0:	2302      	movs	r3, #2
 80043f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043f6:	e0d2      	b.n	800459e <UART_SetConfig+0x27e>
 80043f8:	2304      	movs	r3, #4
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043fe:	e0ce      	b.n	800459e <UART_SetConfig+0x27e>
 8004400:	2308      	movs	r3, #8
 8004402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004406:	e0ca      	b.n	800459e <UART_SetConfig+0x27e>
 8004408:	2310      	movs	r3, #16
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440e:	e0c6      	b.n	800459e <UART_SetConfig+0x27e>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7d      	ldr	r2, [pc, #500]	@ (800460c <UART_SetConfig+0x2ec>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d138      	bne.n	800448c <UART_SetConfig+0x16c>
 800441a:	4b7b      	ldr	r3, [pc, #492]	@ (8004608 <UART_SetConfig+0x2e8>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d82d      	bhi.n	8004484 <UART_SetConfig+0x164>
 8004428:	a201      	add	r2, pc, #4	@ (adr r2, 8004430 <UART_SetConfig+0x110>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004465 	.word	0x08004465
 8004434:	08004485 	.word	0x08004485
 8004438:	08004485 	.word	0x08004485
 800443c:	08004485 	.word	0x08004485
 8004440:	08004475 	.word	0x08004475
 8004444:	08004485 	.word	0x08004485
 8004448:	08004485 	.word	0x08004485
 800444c:	08004485 	.word	0x08004485
 8004450:	0800446d 	.word	0x0800446d
 8004454:	08004485 	.word	0x08004485
 8004458:	08004485 	.word	0x08004485
 800445c:	08004485 	.word	0x08004485
 8004460:	0800447d 	.word	0x0800447d
 8004464:	2300      	movs	r3, #0
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800446a:	e098      	b.n	800459e <UART_SetConfig+0x27e>
 800446c:	2302      	movs	r3, #2
 800446e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004472:	e094      	b.n	800459e <UART_SetConfig+0x27e>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e090      	b.n	800459e <UART_SetConfig+0x27e>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e08c      	b.n	800459e <UART_SetConfig+0x27e>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e088      	b.n	800459e <UART_SetConfig+0x27e>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a5f      	ldr	r2, [pc, #380]	@ (8004610 <UART_SetConfig+0x2f0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d125      	bne.n	80044e2 <UART_SetConfig+0x1c2>
 8004496:	4b5c      	ldr	r3, [pc, #368]	@ (8004608 <UART_SetConfig+0x2e8>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044a0:	2b30      	cmp	r3, #48	@ 0x30
 80044a2:	d016      	beq.n	80044d2 <UART_SetConfig+0x1b2>
 80044a4:	2b30      	cmp	r3, #48	@ 0x30
 80044a6:	d818      	bhi.n	80044da <UART_SetConfig+0x1ba>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d00a      	beq.n	80044c2 <UART_SetConfig+0x1a2>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d814      	bhi.n	80044da <UART_SetConfig+0x1ba>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <UART_SetConfig+0x19a>
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d008      	beq.n	80044ca <UART_SetConfig+0x1aa>
 80044b8:	e00f      	b.n	80044da <UART_SetConfig+0x1ba>
 80044ba:	2300      	movs	r3, #0
 80044bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044c0:	e06d      	b.n	800459e <UART_SetConfig+0x27e>
 80044c2:	2302      	movs	r3, #2
 80044c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044c8:	e069      	b.n	800459e <UART_SetConfig+0x27e>
 80044ca:	2304      	movs	r3, #4
 80044cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d0:	e065      	b.n	800459e <UART_SetConfig+0x27e>
 80044d2:	2308      	movs	r3, #8
 80044d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d8:	e061      	b.n	800459e <UART_SetConfig+0x27e>
 80044da:	2310      	movs	r3, #16
 80044dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e0:	e05d      	b.n	800459e <UART_SetConfig+0x27e>
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004614 <UART_SetConfig+0x2f4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d125      	bne.n	8004538 <UART_SetConfig+0x218>
 80044ec:	4b46      	ldr	r3, [pc, #280]	@ (8004608 <UART_SetConfig+0x2e8>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044f8:	d016      	beq.n	8004528 <UART_SetConfig+0x208>
 80044fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80044fc:	d818      	bhi.n	8004530 <UART_SetConfig+0x210>
 80044fe:	2b80      	cmp	r3, #128	@ 0x80
 8004500:	d00a      	beq.n	8004518 <UART_SetConfig+0x1f8>
 8004502:	2b80      	cmp	r3, #128	@ 0x80
 8004504:	d814      	bhi.n	8004530 <UART_SetConfig+0x210>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <UART_SetConfig+0x1f0>
 800450a:	2b40      	cmp	r3, #64	@ 0x40
 800450c:	d008      	beq.n	8004520 <UART_SetConfig+0x200>
 800450e:	e00f      	b.n	8004530 <UART_SetConfig+0x210>
 8004510:	2300      	movs	r3, #0
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004516:	e042      	b.n	800459e <UART_SetConfig+0x27e>
 8004518:	2302      	movs	r3, #2
 800451a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800451e:	e03e      	b.n	800459e <UART_SetConfig+0x27e>
 8004520:	2304      	movs	r3, #4
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004526:	e03a      	b.n	800459e <UART_SetConfig+0x27e>
 8004528:	2308      	movs	r3, #8
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452e:	e036      	b.n	800459e <UART_SetConfig+0x27e>
 8004530:	2310      	movs	r3, #16
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004536:	e032      	b.n	800459e <UART_SetConfig+0x27e>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a30      	ldr	r2, [pc, #192]	@ (8004600 <UART_SetConfig+0x2e0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d12a      	bne.n	8004598 <UART_SetConfig+0x278>
 8004542:	4b31      	ldr	r3, [pc, #196]	@ (8004608 <UART_SetConfig+0x2e8>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800454c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004550:	d01a      	beq.n	8004588 <UART_SetConfig+0x268>
 8004552:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004556:	d81b      	bhi.n	8004590 <UART_SetConfig+0x270>
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455c:	d00c      	beq.n	8004578 <UART_SetConfig+0x258>
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004562:	d815      	bhi.n	8004590 <UART_SetConfig+0x270>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <UART_SetConfig+0x250>
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456c:	d008      	beq.n	8004580 <UART_SetConfig+0x260>
 800456e:	e00f      	b.n	8004590 <UART_SetConfig+0x270>
 8004570:	2300      	movs	r3, #0
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004576:	e012      	b.n	800459e <UART_SetConfig+0x27e>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457e:	e00e      	b.n	800459e <UART_SetConfig+0x27e>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e00a      	b.n	800459e <UART_SetConfig+0x27e>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e006      	b.n	800459e <UART_SetConfig+0x27e>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004596:	e002      	b.n	800459e <UART_SetConfig+0x27e>
 8004598:	2310      	movs	r3, #16
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <UART_SetConfig+0x2e0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	f040 80a8 	bne.w	80046fa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d834      	bhi.n	800461c <UART_SetConfig+0x2fc>
 80045b2:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <UART_SetConfig+0x298>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045dd 	.word	0x080045dd
 80045bc:	0800461d 	.word	0x0800461d
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	0800461d 	.word	0x0800461d
 80045c8:	080045eb 	.word	0x080045eb
 80045cc:	0800461d 	.word	0x0800461d
 80045d0:	0800461d 	.word	0x0800461d
 80045d4:	0800461d 	.word	0x0800461d
 80045d8:	080045f3 	.word	0x080045f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045dc:	f7fe ff7a 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80045e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045e2:	e021      	b.n	8004628 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004618 <UART_SetConfig+0x2f8>)
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045e8:	e01e      	b.n	8004628 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ea:	f7fe ff05 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80045ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045f0:	e01a      	b.n	8004628 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045f8:	e016      	b.n	8004628 <UART_SetConfig+0x308>
 80045fa:	bf00      	nop
 80045fc:	cfff69f3 	.word	0xcfff69f3
 8004600:	40008000 	.word	0x40008000
 8004604:	40013800 	.word	0x40013800
 8004608:	40021000 	.word	0x40021000
 800460c:	40004400 	.word	0x40004400
 8004610:	40004800 	.word	0x40004800
 8004614:	40004c00 	.word	0x40004c00
 8004618:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004626:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 812a 	beq.w	8004884 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	4a9e      	ldr	r2, [pc, #632]	@ (80048b0 <UART_SetConfig+0x590>)
 8004636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800463a:	461a      	mov	r2, r3
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004642:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4413      	add	r3, r2
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	429a      	cmp	r2, r3
 8004652:	d305      	bcc.n	8004660 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	429a      	cmp	r2, r3
 800465e:	d903      	bls.n	8004668 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004666:	e10d      	b.n	8004884 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	2200      	movs	r2, #0
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	60fa      	str	r2, [r7, #12]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	4a8e      	ldr	r2, [pc, #568]	@ (80048b0 <UART_SetConfig+0x590>)
 8004676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800467a:	b29b      	uxth	r3, r3
 800467c:	2200      	movs	r2, #0
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800468a:	f7fc fb25 	bl	8000cd8 <__aeabi_uldivmod>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4610      	mov	r0, r2
 8004694:	4619      	mov	r1, r3
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	020b      	lsls	r3, r1, #8
 80046a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046a4:	0202      	lsls	r2, r0, #8
 80046a6:	6979      	ldr	r1, [r7, #20]
 80046a8:	6849      	ldr	r1, [r1, #4]
 80046aa:	0849      	lsrs	r1, r1, #1
 80046ac:	2000      	movs	r0, #0
 80046ae:	460c      	mov	r4, r1
 80046b0:	4605      	mov	r5, r0
 80046b2:	eb12 0804 	adds.w	r8, r2, r4
 80046b6:	eb43 0905 	adc.w	r9, r3, r5
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	469a      	mov	sl, r3
 80046c2:	4693      	mov	fp, r2
 80046c4:	4652      	mov	r2, sl
 80046c6:	465b      	mov	r3, fp
 80046c8:	4640      	mov	r0, r8
 80046ca:	4649      	mov	r1, r9
 80046cc:	f7fc fb04 	bl	8000cd8 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4613      	mov	r3, r2
 80046d6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046de:	d308      	bcc.n	80046f2 <UART_SetConfig+0x3d2>
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046e6:	d204      	bcs.n	80046f2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a3a      	ldr	r2, [r7, #32]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	e0c8      	b.n	8004884 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046f8:	e0c4      	b.n	8004884 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004702:	d167      	bne.n	80047d4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004704:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004708:	2b08      	cmp	r3, #8
 800470a:	d828      	bhi.n	800475e <UART_SetConfig+0x43e>
 800470c:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <UART_SetConfig+0x3f4>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004739 	.word	0x08004739
 8004718:	08004741 	.word	0x08004741
 800471c:	08004749 	.word	0x08004749
 8004720:	0800475f 	.word	0x0800475f
 8004724:	0800474f 	.word	0x0800474f
 8004728:	0800475f 	.word	0x0800475f
 800472c:	0800475f 	.word	0x0800475f
 8004730:	0800475f 	.word	0x0800475f
 8004734:	08004757 	.word	0x08004757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004738:	f7fe fecc 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 800473c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800473e:	e014      	b.n	800476a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7fe fede 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004744:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004746:	e010      	b.n	800476a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004748:	4b5a      	ldr	r3, [pc, #360]	@ (80048b4 <UART_SetConfig+0x594>)
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800474c:	e00d      	b.n	800476a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474e:	f7fe fe53 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 8004752:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004754:	e009      	b.n	800476a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800475c:	e005      	b.n	800476a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8089 	beq.w	8004884 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	4a4e      	ldr	r2, [pc, #312]	@ (80048b0 <UART_SetConfig+0x590>)
 8004778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800477c:	461a      	mov	r2, r3
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	fbb3 f3f2 	udiv	r3, r3, r2
 8004784:	005a      	lsls	r2, r3, #1
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	441a      	add	r2, r3
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2b0f      	cmp	r3, #15
 800479c:	d916      	bls.n	80047cc <UART_SetConfig+0x4ac>
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a4:	d212      	bcs.n	80047cc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f023 030f 	bic.w	r3, r3, #15
 80047ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	8bfb      	ldrh	r3, [r7, #30]
 80047be:	4313      	orrs	r3, r2
 80047c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	8bfa      	ldrh	r2, [r7, #30]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	e05b      	b.n	8004884 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047d2:	e057      	b.n	8004884 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d828      	bhi.n	800482e <UART_SetConfig+0x50e>
 80047dc:	a201      	add	r2, pc, #4	@ (adr r2, 80047e4 <UART_SetConfig+0x4c4>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004811 	.word	0x08004811
 80047ec:	08004819 	.word	0x08004819
 80047f0:	0800482f 	.word	0x0800482f
 80047f4:	0800481f 	.word	0x0800481f
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	0800482f 	.word	0x0800482f
 8004804:	08004827 	.word	0x08004827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004808:	f7fe fe64 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 800480c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800480e:	e014      	b.n	800483a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004810:	f7fe fe76 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004814:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004816:	e010      	b.n	800483a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004818:	4b26      	ldr	r3, [pc, #152]	@ (80048b4 <UART_SetConfig+0x594>)
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800481c:	e00d      	b.n	800483a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481e:	f7fe fdeb 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 8004822:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004824:	e009      	b.n	800483a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800482c:	e005      	b.n	800483a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004838:	bf00      	nop
    }

    if (pclk != 0U)
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d021      	beq.n	8004884 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004844:	4a1a      	ldr	r2, [pc, #104]	@ (80048b0 <UART_SetConfig+0x590>)
 8004846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800484a:	461a      	mov	r2, r3
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	441a      	add	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	2b0f      	cmp	r3, #15
 8004868:	d909      	bls.n	800487e <UART_SetConfig+0x55e>
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004870:	d205      	bcs.n	800487e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	b29a      	uxth	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	e002      	b.n	8004884 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2201      	movs	r2, #1
 8004888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2201      	movs	r2, #1
 8004890:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2200      	movs	r2, #0
 8004898:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2200      	movs	r2, #0
 800489e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80048a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3730      	adds	r7, #48	@ 0x30
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ae:	bf00      	nop
 80048b0:	0800a9a4 	.word	0x0800a9a4
 80048b4:	00f42400 	.word	0x00f42400

080048b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01a      	beq.n	80049ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b6:	d10a      	bne.n	80049ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b098      	sub	sp, #96	@ 0x60
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a0c:	f7fd fa0a 	bl	8001e24 <HAL_GetTick>
 8004a10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d12f      	bne.n	8004a80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f88e 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d022      	beq.n	8004a80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e063      	b.n	8004b48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d149      	bne.n	8004b22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f857 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03c      	beq.n	8004b22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e6      	bne.n	8004aa8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3308      	adds	r3, #8
 8004af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004afa:	61fa      	str	r2, [r7, #28]
 8004afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	617b      	str	r3, [r7, #20]
   return(result);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e5      	bne.n	8004ada <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e012      	b.n	8004b48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3758      	adds	r7, #88	@ 0x58
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b60:	e04f      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b68:	d04b      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fd f95b 	bl	8001e24 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e04e      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d037      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b80      	cmp	r3, #128	@ 0x80
 8004b96:	d034      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b40      	cmp	r3, #64	@ 0x40
 8004b9c:	d031      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d110      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fa42 	bl	800503e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e029      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bdc:	d111      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fa28 	bl	800503e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e00f      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d0a0      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b0a3      	sub	sp, #140	@ 0x8c
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5e:	d10e      	bne.n	8004c7e <UART_Start_Receive_IT+0x52>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d105      	bne.n	8004c74 <UART_Start_Receive_IT+0x48>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c72:	e02d      	b.n	8004cd0 <UART_Start_Receive_IT+0xa4>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	22ff      	movs	r2, #255	@ 0xff
 8004c78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c7c:	e028      	b.n	8004cd0 <UART_Start_Receive_IT+0xa4>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <UART_Start_Receive_IT+0x76>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d104      	bne.n	8004c98 <UART_Start_Receive_IT+0x6c>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	22ff      	movs	r2, #255	@ 0xff
 8004c92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c96:	e01b      	b.n	8004cd0 <UART_Start_Receive_IT+0xa4>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	227f      	movs	r2, #127	@ 0x7f
 8004c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ca0:	e016      	b.n	8004cd0 <UART_Start_Receive_IT+0xa4>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004caa:	d10d      	bne.n	8004cc8 <UART_Start_Receive_IT+0x9c>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <UART_Start_Receive_IT+0x92>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	227f      	movs	r2, #127	@ 0x7f
 8004cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cbc:	e008      	b.n	8004cd0 <UART_Start_Receive_IT+0xa4>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	223f      	movs	r2, #63	@ 0x3f
 8004cc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cc6:	e003      	b.n	8004cd0 <UART_Start_Receive_IT+0xa4>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2222      	movs	r2, #34	@ 0x22
 8004cdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004cf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d04:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004d0a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004d12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e3      	bne.n	8004ce0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d20:	d14f      	bne.n	8004dc2 <UART_Start_Receive_IT+0x196>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d28:	88fa      	ldrh	r2, [r7, #6]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d349      	bcc.n	8004dc2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d36:	d107      	bne.n	8004d48 <UART_Start_Receive_IT+0x11c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a47      	ldr	r2, [pc, #284]	@ (8004e60 <UART_Start_Receive_IT+0x234>)
 8004d44:	675a      	str	r2, [r3, #116]	@ 0x74
 8004d46:	e002      	b.n	8004d4e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a46      	ldr	r2, [pc, #280]	@ (8004e64 <UART_Start_Receive_IT+0x238>)
 8004d4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01a      	beq.n	8004d8c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d7a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e4      	bne.n	8004d56 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004dac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004dae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_Start_Receive_IT+0x160>
 8004dc0:	e046      	b.n	8004e50 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dca:	d107      	bne.n	8004ddc <UART_Start_Receive_IT+0x1b0>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a24      	ldr	r2, [pc, #144]	@ (8004e68 <UART_Start_Receive_IT+0x23c>)
 8004dd8:	675a      	str	r2, [r3, #116]	@ 0x74
 8004dda:	e002      	b.n	8004de2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a23      	ldr	r2, [pc, #140]	@ (8004e6c <UART_Start_Receive_IT+0x240>)
 8004de0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d019      	beq.n	8004e1e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004dfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e0a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_Start_Receive_IT+0x1be>
 8004e1c:	e018      	b.n	8004e50 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f043 0320 	orr.w	r3, r3, #32
 8004e32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	69f9      	ldr	r1, [r7, #28]
 8004e42:	6a3a      	ldr	r2, [r7, #32]
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	378c      	adds	r7, #140	@ 0x8c
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	08005a49 	.word	0x08005a49
 8004e64:	080056e9 	.word	0x080056e9
 8004e68:	08005531 	.word	0x08005531
 8004e6c:	08005379 	.word	0x08005379

08004e70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b096      	sub	sp, #88	@ 0x58
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2222      	movs	r2, #34	@ 0x22
 8004e98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d02d      	beq.n	8004f02 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eac:	4a40      	ldr	r2, [pc, #256]	@ (8004fb0 <UART_Start_Receive_DMA+0x140>)
 8004eae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8004fb4 <UART_Start_Receive_DMA+0x144>)
 8004eb8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ec0:	4a3d      	ldr	r2, [pc, #244]	@ (8004fb8 <UART_Start_Receive_DMA+0x148>)
 8004ec2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eca:	2200      	movs	r2, #0
 8004ecc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3324      	adds	r3, #36	@ 0x24
 8004eda:	4619      	mov	r1, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	f7fd f962 	bl	80021ac <HAL_DMA_Start_IT>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e051      	b.n	8004fa6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d018      	beq.n	8004f3c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f2a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e6      	bne.n	8004f0a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3308      	adds	r3, #8
 8004f5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f5c:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e5      	bne.n	8004f3c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f90:	623a      	str	r2, [r7, #32]
 8004f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	69f9      	ldr	r1, [r7, #28]
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3758      	adds	r7, #88	@ 0x58
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	0800510b 	.word	0x0800510b
 8004fb4:	08005237 	.word	0x08005237
 8004fb8:	08005275 	.word	0x08005275

08004fbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b08f      	sub	sp, #60	@ 0x3c
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e6      	bne.n	8004fc4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	60bb      	str	r3, [r7, #8]
   return(result);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800500c:	633b      	str	r3, [r7, #48]	@ 0x30
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3308      	adds	r3, #8
 8005014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005016:	61ba      	str	r2, [r7, #24]
 8005018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6979      	ldr	r1, [r7, #20]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	613b      	str	r3, [r7, #16]
   return(result);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e5      	bne.n	8004ff6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005032:	bf00      	nop
 8005034:	373c      	adds	r7, #60	@ 0x3c
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800503e:	b480      	push	{r7}
 8005040:	b095      	sub	sp, #84	@ 0x54
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005064:	643b      	str	r3, [r7, #64]	@ 0x40
 8005066:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800506a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	61fb      	str	r3, [r7, #28]
   return(result);
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800509c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800509e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e3      	bne.n	8005078 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d118      	bne.n	80050ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f023 0310 	bic.w	r3, r3, #16
 80050cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6979      	ldr	r1, [r7, #20]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	613b      	str	r3, [r7, #16]
   return(result);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e6      	bne.n	80050b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050fe:	bf00      	nop
 8005100:	3754      	adds	r7, #84	@ 0x54
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b09c      	sub	sp, #112	@ 0x70
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d171      	bne.n	800520a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005128:	2200      	movs	r2, #0
 800512a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800512e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800513c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800513e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005142:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800514c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800514e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800515a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	667b      	str	r3, [r7, #100]	@ 0x64
 8005178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005180:	647a      	str	r2, [r7, #68]	@ 0x44
 8005182:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800518e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e5      	bne.n	8005160 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	623b      	str	r3, [r7, #32]
   return(result);
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80051b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80051b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e5      	bne.n	8005194 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d118      	bne.n	800520a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0310 	bic.w	r3, r3, #16
 80051ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	69b9      	ldr	r1, [r7, #24]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	617b      	str	r3, [r7, #20]
   return(result);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e6      	bne.n	80051d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800520c:	2200      	movs	r2, #0
 800520e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800521a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800521e:	4619      	mov	r1, r3
 8005220:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005222:	f7ff f871 	bl	8004308 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005226:	e002      	b.n	800522e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005228:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800522a:	f7fc fb1d 	bl	8001868 <HAL_UART_RxCpltCallback>
}
 800522e:	bf00      	nop
 8005230:	3770      	adds	r7, #112	@ 0x70
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800524e:	2b01      	cmp	r3, #1
 8005250:	d109      	bne.n	8005266 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	b29b      	uxth	r3, r3
 800525c:	4619      	mov	r1, r3
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff f852 	bl	8004308 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005264:	e002      	b.n	800526c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff f83a 	bl	80042e0 <HAL_UART_RxHalfCpltCallback>
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005280:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005288:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005290:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529c:	2b80      	cmp	r3, #128	@ 0x80
 800529e:	d109      	bne.n	80052b4 <UART_DMAError+0x40>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b21      	cmp	r3, #33	@ 0x21
 80052a4:	d106      	bne.n	80052b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	f7ff fe84 	bl	8004fbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b40      	cmp	r3, #64	@ 0x40
 80052c0:	d109      	bne.n	80052d6 <UART_DMAError+0x62>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b22      	cmp	r3, #34	@ 0x22
 80052c6:	d106      	bne.n	80052d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80052d0:	6978      	ldr	r0, [r7, #20]
 80052d2:	f7ff feb4 	bl	800503e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052dc:	f043 0210 	orr.w	r2, r3, #16
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052e6:	6978      	ldr	r0, [r7, #20]
 80052e8:	f7ff f804 	bl	80042f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ec:	bf00      	nop
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7fe ffee 	bl	80042f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	60bb      	str	r3, [r7, #8]
   return(result);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6979      	ldr	r1, [r7, #20]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	613b      	str	r3, [r7, #16]
   return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fe ffaf 	bl	80042cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800536e:	bf00      	nop
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b09c      	sub	sp, #112	@ 0x70
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005386:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005390:	2b22      	cmp	r3, #34	@ 0x22
 8005392:	f040 80be 	bne.w	8005512 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053a4:	b2d9      	uxtb	r1, r3
 80053a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b0:	400a      	ands	r2, r1
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 80a1 	bne.w	8005522 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005400:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005404:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800540c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e6      	bne.n	80053e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3308      	adds	r3, #8
 8005418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	667b      	str	r3, [r7, #100]	@ 0x64
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005432:	647a      	str	r2, [r7, #68]	@ 0x44
 8005434:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005438:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a33      	ldr	r2, [pc, #204]	@ (800552c <UART_RxISR_8BIT+0x1b4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d01f      	beq.n	80054a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	e853 3f00 	ldrex	r3, [r3]
 800547e:	623b      	str	r3, [r7, #32]
   return(result);
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005486:	663b      	str	r3, [r7, #96]	@ 0x60
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005490:	633b      	str	r3, [r7, #48]	@ 0x30
 8005492:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e6      	bne.n	8005472 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d12e      	bne.n	800550a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0310 	bic.w	r3, r3, #16
 80054c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	69b9      	ldr	r1, [r7, #24]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	617b      	str	r3, [r7, #20]
   return(result);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e6      	bne.n	80054b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b10      	cmp	r3, #16
 80054f0:	d103      	bne.n	80054fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2210      	movs	r2, #16
 80054f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fe ff00 	bl	8004308 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005508:	e00b      	b.n	8005522 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fc f9ac 	bl	8001868 <HAL_UART_RxCpltCallback>
}
 8005510:	e007      	b.n	8005522 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0208 	orr.w	r2, r2, #8
 8005520:	619a      	str	r2, [r3, #24]
}
 8005522:	bf00      	nop
 8005524:	3770      	adds	r7, #112	@ 0x70
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40008000 	.word	0x40008000

08005530 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b09c      	sub	sp, #112	@ 0x70
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800553e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005548:	2b22      	cmp	r3, #34	@ 0x22
 800554a:	f040 80be 	bne.w	80056ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800555e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005566:	4013      	ands	r3, r2
 8005568:	b29a      	uxth	r2, r3
 800556a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800556c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005572:	1c9a      	adds	r2, r3, #2
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 80a1 	bne.w	80056da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80055b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80055c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e6      	bne.n	8005598 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80055ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a33      	ldr	r2, [pc, #204]	@ (80056e4 <UART_RxISR_16BIT+0x1b4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d01f      	beq.n	800565c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	61fb      	str	r3, [r7, #28]
   return(result);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800563e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800564a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800564e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d12e      	bne.n	80056c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	60bb      	str	r3, [r7, #8]
   return(result);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f023 0310 	bic.w	r3, r3, #16
 800567e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	613b      	str	r3, [r7, #16]
   return(result);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e6      	bne.n	800566a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	2b10      	cmp	r3, #16
 80056a8:	d103      	bne.n	80056b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2210      	movs	r2, #16
 80056b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fe fe24 	bl	8004308 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056c0:	e00b      	b.n	80056da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fc f8d0 	bl	8001868 <HAL_UART_RxCpltCallback>
}
 80056c8:	e007      	b.n	80056da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0208 	orr.w	r2, r2, #8
 80056d8:	619a      	str	r2, [r3, #24]
}
 80056da:	bf00      	nop
 80056dc:	3770      	adds	r7, #112	@ 0x70
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40008000 	.word	0x40008000

080056e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b0ac      	sub	sp, #176	@ 0xb0
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80056f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800571e:	2b22      	cmp	r3, #34	@ 0x22
 8005720:	f040 8182 	bne.w	8005a28 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800572a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800572e:	e125      	b.n	800597c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800573a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800573e:	b2d9      	uxtb	r1, r3
 8005740:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005744:	b2da      	uxtb	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	400a      	ands	r2, r1
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	2b00      	cmp	r3, #0
 8005780:	d053      	beq.n	800582a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d011      	beq.n	80057b2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800578e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a8:	f043 0201 	orr.w	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d011      	beq.n	80057e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80057be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2202      	movs	r2, #2
 80057d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d8:	f043 0204 	orr.w	r2, r3, #4
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d011      	beq.n	8005812 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80057ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2204      	movs	r2, #4
 8005800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005808:	f043 0202 	orr.w	r2, r3, #2
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fe fd69 	bl	80042f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 80a2 	bne.w	800597c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800584c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800585a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800585c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005860:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e4      	bne.n	8005838 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800587e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005896:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005898:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800589c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80058a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e1      	bne.n	800586e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a5f      	ldr	r2, [pc, #380]	@ (8005a40 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d021      	beq.n	800590c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01a      	beq.n	800590c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80058e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80058fa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e4      	bne.n	80058d6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d130      	bne.n	8005976 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800593c:	643b      	str	r3, [r7, #64]	@ 0x40
 800593e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005942:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e4      	bne.n	800591a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b10      	cmp	r3, #16
 800595c:	d103      	bne.n	8005966 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2210      	movs	r2, #16
 8005964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fe fcca 	bl	8004308 <HAL_UARTEx_RxEventCallback>
 8005974:	e002      	b.n	800597c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fb ff76 	bl	8001868 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800597c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	f47f aecf 	bne.w	8005730 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005998:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800599c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d049      	beq.n	8005a38 <UART_RxISR_8BIT_FIFOEN+0x350>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80059aa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d242      	bcs.n	8005a38 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80059d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e3      	bne.n	80059b2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a15      	ldr	r2, [pc, #84]	@ (8005a44 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80059ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f043 0320 	orr.w	r3, r3, #32
 8005a04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6979      	ldr	r1, [r7, #20]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e4      	bne.n	80059f0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a26:	e007      	b.n	8005a38 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0208 	orr.w	r2, r2, #8
 8005a36:	619a      	str	r2, [r3, #24]
}
 8005a38:	bf00      	nop
 8005a3a:	37b0      	adds	r7, #176	@ 0xb0
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40008000 	.word	0x40008000
 8005a44:	08005379 	.word	0x08005379

08005a48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b0ae      	sub	sp, #184	@ 0xb8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a56:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a7e:	2b22      	cmp	r3, #34	@ 0x22
 8005a80:	f040 8186 	bne.w	8005d90 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005a8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a8e:	e129      	b.n	8005ce4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005aa2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005aa6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005aaa:	4013      	ands	r3, r2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ab2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d053      	beq.n	8005b8e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d011      	beq.n	8005b16 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0c:	f043 0201 	orr.w	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d011      	beq.n	8005b46 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2202      	movs	r2, #2
 8005b34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3c:	f043 0204 	orr.w	r2, r3, #4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2204      	movs	r2, #4
 8005b64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6c:	f043 0202 	orr.w	r2, r3, #2
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d006      	beq.n	8005b8e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fe fbb7 	bl	80042f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 80a4 	bne.w	8005ce4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005baa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e2      	bne.n	8005b9c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005bfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e1      	bne.n	8005bd6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8005da8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d021      	beq.n	8005c74 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01a      	beq.n	8005c74 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c62:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e4      	bne.n	8005c3e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d130      	bne.n	8005cde <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c92:	f023 0310 	bic.w	r3, r3, #16
 8005c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e4      	bne.n	8005c82 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d103      	bne.n	8005cce <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2210      	movs	r2, #16
 8005ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fe fb16 	bl	8004308 <HAL_UARTEx_RxEventCallback>
 8005cdc:	e002      	b.n	8005ce4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fb fdc2 	bl	8001868 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ce4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005cec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f47f aecb 	bne.w	8005a90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d00:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d04:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d049      	beq.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005d12:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d242      	bcs.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005d3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e3      	bne.n	8005d1a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a15      	ldr	r2, [pc, #84]	@ (8005dac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005d56:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f043 0320 	orr.w	r3, r3, #32
 8005d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	69b9      	ldr	r1, [r7, #24]
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	617b      	str	r3, [r7, #20]
   return(result);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e4      	bne.n	8005d58 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d8e:	e007      	b.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0208 	orr.w	r2, r2, #8
 8005d9e:	619a      	str	r2, [r3, #24]
}
 8005da0:	bf00      	nop
 8005da2:	37b8      	adds	r7, #184	@ 0xb8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40008000 	.word	0x40008000
 8005dac:	08005531 	.word	0x08005531

08005db0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e027      	b.n	8005e52 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2224      	movs	r2, #36	@ 0x24
 8005e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0201 	bic.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e02d      	b.n	8005ed2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2224      	movs	r2, #36	@ 0x24
 8005e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f850 	bl	8005f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e02d      	b.n	8005f4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2224      	movs	r2, #36	@ 0x24
 8005efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f812 	bl	8005f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d108      	bne.n	8005f7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f78:	e031      	b.n	8005fde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f7e:	2308      	movs	r3, #8
 8005f80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	0e5b      	lsrs	r3, r3, #25
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	0f5b      	lsrs	r3, r3, #29
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	7b3a      	ldrb	r2, [r7, #12]
 8005fa6:	4911      	ldr	r1, [pc, #68]	@ (8005fec <UARTEx_SetNbDataToProcess+0x94>)
 8005fa8:	5c8a      	ldrb	r2, [r1, r2]
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fae:	7b3a      	ldrb	r2, [r7, #12]
 8005fb0:	490f      	ldr	r1, [pc, #60]	@ (8005ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8005fb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	7b7a      	ldrb	r2, [r7, #13]
 8005fc4:	4909      	ldr	r1, [pc, #36]	@ (8005fec <UARTEx_SetNbDataToProcess+0x94>)
 8005fc6:	5c8a      	ldrb	r2, [r1, r2]
 8005fc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fcc:	7b7a      	ldrb	r2, [r7, #13]
 8005fce:	4908      	ldr	r1, [pc, #32]	@ (8005ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8005fd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	0800a9bc 	.word	0x0800a9bc
 8005ff0:	0800a9c4 	.word	0x0800a9c4

08005ff4 <__cvt>:
 8005ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	ec57 6b10 	vmov	r6, r7, d0
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	460c      	mov	r4, r1
 8006000:	4619      	mov	r1, r3
 8006002:	463b      	mov	r3, r7
 8006004:	bfbb      	ittet	lt
 8006006:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800600a:	461f      	movlt	r7, r3
 800600c:	2300      	movge	r3, #0
 800600e:	232d      	movlt	r3, #45	@ 0x2d
 8006010:	700b      	strb	r3, [r1, #0]
 8006012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006014:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006018:	4691      	mov	r9, r2
 800601a:	f023 0820 	bic.w	r8, r3, #32
 800601e:	bfbc      	itt	lt
 8006020:	4632      	movlt	r2, r6
 8006022:	4616      	movlt	r6, r2
 8006024:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006028:	d005      	beq.n	8006036 <__cvt+0x42>
 800602a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800602e:	d100      	bne.n	8006032 <__cvt+0x3e>
 8006030:	3401      	adds	r4, #1
 8006032:	2102      	movs	r1, #2
 8006034:	e000      	b.n	8006038 <__cvt+0x44>
 8006036:	2103      	movs	r1, #3
 8006038:	ab03      	add	r3, sp, #12
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	ab02      	add	r3, sp, #8
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	ec47 6b10 	vmov	d0, r6, r7
 8006044:	4653      	mov	r3, sl
 8006046:	4622      	mov	r2, r4
 8006048:	f001 ff1e 	bl	8007e88 <_dtoa_r>
 800604c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006050:	4605      	mov	r5, r0
 8006052:	d119      	bne.n	8006088 <__cvt+0x94>
 8006054:	f019 0f01 	tst.w	r9, #1
 8006058:	d00e      	beq.n	8006078 <__cvt+0x84>
 800605a:	eb00 0904 	add.w	r9, r0, r4
 800605e:	2200      	movs	r2, #0
 8006060:	2300      	movs	r3, #0
 8006062:	4630      	mov	r0, r6
 8006064:	4639      	mov	r1, r7
 8006066:	f7fa fd57 	bl	8000b18 <__aeabi_dcmpeq>
 800606a:	b108      	cbz	r0, 8006070 <__cvt+0x7c>
 800606c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006070:	2230      	movs	r2, #48	@ 0x30
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	454b      	cmp	r3, r9
 8006076:	d31e      	bcc.n	80060b6 <__cvt+0xc2>
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800607c:	1b5b      	subs	r3, r3, r5
 800607e:	4628      	mov	r0, r5
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	b004      	add	sp, #16
 8006084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006088:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800608c:	eb00 0904 	add.w	r9, r0, r4
 8006090:	d1e5      	bne.n	800605e <__cvt+0x6a>
 8006092:	7803      	ldrb	r3, [r0, #0]
 8006094:	2b30      	cmp	r3, #48	@ 0x30
 8006096:	d10a      	bne.n	80060ae <__cvt+0xba>
 8006098:	2200      	movs	r2, #0
 800609a:	2300      	movs	r3, #0
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa fd3a 	bl	8000b18 <__aeabi_dcmpeq>
 80060a4:	b918      	cbnz	r0, 80060ae <__cvt+0xba>
 80060a6:	f1c4 0401 	rsb	r4, r4, #1
 80060aa:	f8ca 4000 	str.w	r4, [sl]
 80060ae:	f8da 3000 	ldr.w	r3, [sl]
 80060b2:	4499      	add	r9, r3
 80060b4:	e7d3      	b.n	800605e <__cvt+0x6a>
 80060b6:	1c59      	adds	r1, r3, #1
 80060b8:	9103      	str	r1, [sp, #12]
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e7d9      	b.n	8006072 <__cvt+0x7e>

080060be <__exponent>:
 80060be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060c0:	2900      	cmp	r1, #0
 80060c2:	bfba      	itte	lt
 80060c4:	4249      	neglt	r1, r1
 80060c6:	232d      	movlt	r3, #45	@ 0x2d
 80060c8:	232b      	movge	r3, #43	@ 0x2b
 80060ca:	2909      	cmp	r1, #9
 80060cc:	7002      	strb	r2, [r0, #0]
 80060ce:	7043      	strb	r3, [r0, #1]
 80060d0:	dd29      	ble.n	8006126 <__exponent+0x68>
 80060d2:	f10d 0307 	add.w	r3, sp, #7
 80060d6:	461d      	mov	r5, r3
 80060d8:	270a      	movs	r7, #10
 80060da:	461a      	mov	r2, r3
 80060dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80060e0:	fb07 1416 	mls	r4, r7, r6, r1
 80060e4:	3430      	adds	r4, #48	@ 0x30
 80060e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060ea:	460c      	mov	r4, r1
 80060ec:	2c63      	cmp	r4, #99	@ 0x63
 80060ee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80060f2:	4631      	mov	r1, r6
 80060f4:	dcf1      	bgt.n	80060da <__exponent+0x1c>
 80060f6:	3130      	adds	r1, #48	@ 0x30
 80060f8:	1e94      	subs	r4, r2, #2
 80060fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060fe:	1c41      	adds	r1, r0, #1
 8006100:	4623      	mov	r3, r4
 8006102:	42ab      	cmp	r3, r5
 8006104:	d30a      	bcc.n	800611c <__exponent+0x5e>
 8006106:	f10d 0309 	add.w	r3, sp, #9
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	42ac      	cmp	r4, r5
 800610e:	bf88      	it	hi
 8006110:	2300      	movhi	r3, #0
 8006112:	3302      	adds	r3, #2
 8006114:	4403      	add	r3, r0
 8006116:	1a18      	subs	r0, r3, r0
 8006118:	b003      	add	sp, #12
 800611a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006120:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006124:	e7ed      	b.n	8006102 <__exponent+0x44>
 8006126:	2330      	movs	r3, #48	@ 0x30
 8006128:	3130      	adds	r1, #48	@ 0x30
 800612a:	7083      	strb	r3, [r0, #2]
 800612c:	70c1      	strb	r1, [r0, #3]
 800612e:	1d03      	adds	r3, r0, #4
 8006130:	e7f1      	b.n	8006116 <__exponent+0x58>
	...

08006134 <_printf_float>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	b08d      	sub	sp, #52	@ 0x34
 800613a:	460c      	mov	r4, r1
 800613c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006140:	4616      	mov	r6, r2
 8006142:	461f      	mov	r7, r3
 8006144:	4605      	mov	r5, r0
 8006146:	f001 fdc7 	bl	8007cd8 <_localeconv_r>
 800614a:	6803      	ldr	r3, [r0, #0]
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fa f8b6 	bl	80002c0 <strlen>
 8006154:	2300      	movs	r3, #0
 8006156:	930a      	str	r3, [sp, #40]	@ 0x28
 8006158:	f8d8 3000 	ldr.w	r3, [r8]
 800615c:	9005      	str	r0, [sp, #20]
 800615e:	3307      	adds	r3, #7
 8006160:	f023 0307 	bic.w	r3, r3, #7
 8006164:	f103 0208 	add.w	r2, r3, #8
 8006168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800616c:	f8d4 b000 	ldr.w	fp, [r4]
 8006170:	f8c8 2000 	str.w	r2, [r8]
 8006174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006178:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800617c:	9307      	str	r3, [sp, #28]
 800617e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006182:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800618a:	4b9c      	ldr	r3, [pc, #624]	@ (80063fc <_printf_float+0x2c8>)
 800618c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006190:	f7fa fcf4 	bl	8000b7c <__aeabi_dcmpun>
 8006194:	bb70      	cbnz	r0, 80061f4 <_printf_float+0xc0>
 8006196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800619a:	4b98      	ldr	r3, [pc, #608]	@ (80063fc <_printf_float+0x2c8>)
 800619c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061a0:	f7fa fcce 	bl	8000b40 <__aeabi_dcmple>
 80061a4:	bb30      	cbnz	r0, 80061f4 <_printf_float+0xc0>
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	4640      	mov	r0, r8
 80061ac:	4649      	mov	r1, r9
 80061ae:	f7fa fcbd 	bl	8000b2c <__aeabi_dcmplt>
 80061b2:	b110      	cbz	r0, 80061ba <_printf_float+0x86>
 80061b4:	232d      	movs	r3, #45	@ 0x2d
 80061b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ba:	4a91      	ldr	r2, [pc, #580]	@ (8006400 <_printf_float+0x2cc>)
 80061bc:	4b91      	ldr	r3, [pc, #580]	@ (8006404 <_printf_float+0x2d0>)
 80061be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061c2:	bf94      	ite	ls
 80061c4:	4690      	movls	r8, r2
 80061c6:	4698      	movhi	r8, r3
 80061c8:	2303      	movs	r3, #3
 80061ca:	6123      	str	r3, [r4, #16]
 80061cc:	f02b 0304 	bic.w	r3, fp, #4
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	f04f 0900 	mov.w	r9, #0
 80061d6:	9700      	str	r7, [sp, #0]
 80061d8:	4633      	mov	r3, r6
 80061da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80061dc:	4621      	mov	r1, r4
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 f9d2 	bl	8006588 <_printf_common>
 80061e4:	3001      	adds	r0, #1
 80061e6:	f040 808d 	bne.w	8006304 <_printf_float+0x1d0>
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061ee:	b00d      	add	sp, #52	@ 0x34
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	4649      	mov	r1, r9
 80061fc:	f7fa fcbe 	bl	8000b7c <__aeabi_dcmpun>
 8006200:	b140      	cbz	r0, 8006214 <_printf_float+0xe0>
 8006202:	464b      	mov	r3, r9
 8006204:	2b00      	cmp	r3, #0
 8006206:	bfbc      	itt	lt
 8006208:	232d      	movlt	r3, #45	@ 0x2d
 800620a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800620e:	4a7e      	ldr	r2, [pc, #504]	@ (8006408 <_printf_float+0x2d4>)
 8006210:	4b7e      	ldr	r3, [pc, #504]	@ (800640c <_printf_float+0x2d8>)
 8006212:	e7d4      	b.n	80061be <_printf_float+0x8a>
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800621a:	9206      	str	r2, [sp, #24]
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	d13b      	bne.n	8006298 <_printf_float+0x164>
 8006220:	2306      	movs	r3, #6
 8006222:	6063      	str	r3, [r4, #4]
 8006224:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006228:	2300      	movs	r3, #0
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	9303      	str	r3, [sp, #12]
 800622e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006230:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006234:	ab09      	add	r3, sp, #36	@ 0x24
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	6861      	ldr	r1, [r4, #4]
 800623a:	ec49 8b10 	vmov	d0, r8, r9
 800623e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006242:	4628      	mov	r0, r5
 8006244:	f7ff fed6 	bl	8005ff4 <__cvt>
 8006248:	9b06      	ldr	r3, [sp, #24]
 800624a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800624c:	2b47      	cmp	r3, #71	@ 0x47
 800624e:	4680      	mov	r8, r0
 8006250:	d129      	bne.n	80062a6 <_printf_float+0x172>
 8006252:	1cc8      	adds	r0, r1, #3
 8006254:	db02      	blt.n	800625c <_printf_float+0x128>
 8006256:	6863      	ldr	r3, [r4, #4]
 8006258:	4299      	cmp	r1, r3
 800625a:	dd41      	ble.n	80062e0 <_printf_float+0x1ac>
 800625c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006260:	fa5f fa8a 	uxtb.w	sl, sl
 8006264:	3901      	subs	r1, #1
 8006266:	4652      	mov	r2, sl
 8006268:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800626c:	9109      	str	r1, [sp, #36]	@ 0x24
 800626e:	f7ff ff26 	bl	80060be <__exponent>
 8006272:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006274:	1813      	adds	r3, r2, r0
 8006276:	2a01      	cmp	r2, #1
 8006278:	4681      	mov	r9, r0
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	dc02      	bgt.n	8006284 <_printf_float+0x150>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	07d2      	lsls	r2, r2, #31
 8006282:	d501      	bpl.n	8006288 <_printf_float+0x154>
 8006284:	3301      	adds	r3, #1
 8006286:	6123      	str	r3, [r4, #16]
 8006288:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0a2      	beq.n	80061d6 <_printf_float+0xa2>
 8006290:	232d      	movs	r3, #45	@ 0x2d
 8006292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006296:	e79e      	b.n	80061d6 <_printf_float+0xa2>
 8006298:	9a06      	ldr	r2, [sp, #24]
 800629a:	2a47      	cmp	r2, #71	@ 0x47
 800629c:	d1c2      	bne.n	8006224 <_printf_float+0xf0>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1c0      	bne.n	8006224 <_printf_float+0xf0>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e7bd      	b.n	8006222 <_printf_float+0xee>
 80062a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062aa:	d9db      	bls.n	8006264 <_printf_float+0x130>
 80062ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80062b0:	d118      	bne.n	80062e4 <_printf_float+0x1b0>
 80062b2:	2900      	cmp	r1, #0
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	dd0b      	ble.n	80062d0 <_printf_float+0x19c>
 80062b8:	6121      	str	r1, [r4, #16]
 80062ba:	b913      	cbnz	r3, 80062c2 <_printf_float+0x18e>
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	07d0      	lsls	r0, r2, #31
 80062c0:	d502      	bpl.n	80062c8 <_printf_float+0x194>
 80062c2:	3301      	adds	r3, #1
 80062c4:	440b      	add	r3, r1
 80062c6:	6123      	str	r3, [r4, #16]
 80062c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	e7db      	b.n	8006288 <_printf_float+0x154>
 80062d0:	b913      	cbnz	r3, 80062d8 <_printf_float+0x1a4>
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	07d2      	lsls	r2, r2, #31
 80062d6:	d501      	bpl.n	80062dc <_printf_float+0x1a8>
 80062d8:	3302      	adds	r3, #2
 80062da:	e7f4      	b.n	80062c6 <_printf_float+0x192>
 80062dc:	2301      	movs	r3, #1
 80062de:	e7f2      	b.n	80062c6 <_printf_float+0x192>
 80062e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062e6:	4299      	cmp	r1, r3
 80062e8:	db05      	blt.n	80062f6 <_printf_float+0x1c2>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	6121      	str	r1, [r4, #16]
 80062ee:	07d8      	lsls	r0, r3, #31
 80062f0:	d5ea      	bpl.n	80062c8 <_printf_float+0x194>
 80062f2:	1c4b      	adds	r3, r1, #1
 80062f4:	e7e7      	b.n	80062c6 <_printf_float+0x192>
 80062f6:	2900      	cmp	r1, #0
 80062f8:	bfd4      	ite	le
 80062fa:	f1c1 0202 	rsble	r2, r1, #2
 80062fe:	2201      	movgt	r2, #1
 8006300:	4413      	add	r3, r2
 8006302:	e7e0      	b.n	80062c6 <_printf_float+0x192>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	055a      	lsls	r2, r3, #21
 8006308:	d407      	bmi.n	800631a <_printf_float+0x1e6>
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	4642      	mov	r2, r8
 800630e:	4631      	mov	r1, r6
 8006310:	4628      	mov	r0, r5
 8006312:	47b8      	blx	r7
 8006314:	3001      	adds	r0, #1
 8006316:	d12b      	bne.n	8006370 <_printf_float+0x23c>
 8006318:	e767      	b.n	80061ea <_printf_float+0xb6>
 800631a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800631e:	f240 80dd 	bls.w	80064dc <_printf_float+0x3a8>
 8006322:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006326:	2200      	movs	r2, #0
 8006328:	2300      	movs	r3, #0
 800632a:	f7fa fbf5 	bl	8000b18 <__aeabi_dcmpeq>
 800632e:	2800      	cmp	r0, #0
 8006330:	d033      	beq.n	800639a <_printf_float+0x266>
 8006332:	4a37      	ldr	r2, [pc, #220]	@ (8006410 <_printf_float+0x2dc>)
 8006334:	2301      	movs	r3, #1
 8006336:	4631      	mov	r1, r6
 8006338:	4628      	mov	r0, r5
 800633a:	47b8      	blx	r7
 800633c:	3001      	adds	r0, #1
 800633e:	f43f af54 	beq.w	80061ea <_printf_float+0xb6>
 8006342:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006346:	4543      	cmp	r3, r8
 8006348:	db02      	blt.n	8006350 <_printf_float+0x21c>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	07d8      	lsls	r0, r3, #31
 800634e:	d50f      	bpl.n	8006370 <_printf_float+0x23c>
 8006350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006354:	4631      	mov	r1, r6
 8006356:	4628      	mov	r0, r5
 8006358:	47b8      	blx	r7
 800635a:	3001      	adds	r0, #1
 800635c:	f43f af45 	beq.w	80061ea <_printf_float+0xb6>
 8006360:	f04f 0900 	mov.w	r9, #0
 8006364:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006368:	f104 0a1a 	add.w	sl, r4, #26
 800636c:	45c8      	cmp	r8, r9
 800636e:	dc09      	bgt.n	8006384 <_printf_float+0x250>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	079b      	lsls	r3, r3, #30
 8006374:	f100 8103 	bmi.w	800657e <_printf_float+0x44a>
 8006378:	68e0      	ldr	r0, [r4, #12]
 800637a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800637c:	4298      	cmp	r0, r3
 800637e:	bfb8      	it	lt
 8006380:	4618      	movlt	r0, r3
 8006382:	e734      	b.n	80061ee <_printf_float+0xba>
 8006384:	2301      	movs	r3, #1
 8006386:	4652      	mov	r2, sl
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f af2b 	beq.w	80061ea <_printf_float+0xb6>
 8006394:	f109 0901 	add.w	r9, r9, #1
 8006398:	e7e8      	b.n	800636c <_printf_float+0x238>
 800639a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	dc39      	bgt.n	8006414 <_printf_float+0x2e0>
 80063a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006410 <_printf_float+0x2dc>)
 80063a2:	2301      	movs	r3, #1
 80063a4:	4631      	mov	r1, r6
 80063a6:	4628      	mov	r0, r5
 80063a8:	47b8      	blx	r7
 80063aa:	3001      	adds	r0, #1
 80063ac:	f43f af1d 	beq.w	80061ea <_printf_float+0xb6>
 80063b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80063b4:	ea59 0303 	orrs.w	r3, r9, r3
 80063b8:	d102      	bne.n	80063c0 <_printf_float+0x28c>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	07d9      	lsls	r1, r3, #31
 80063be:	d5d7      	bpl.n	8006370 <_printf_float+0x23c>
 80063c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c4:	4631      	mov	r1, r6
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b8      	blx	r7
 80063ca:	3001      	adds	r0, #1
 80063cc:	f43f af0d 	beq.w	80061ea <_printf_float+0xb6>
 80063d0:	f04f 0a00 	mov.w	sl, #0
 80063d4:	f104 0b1a 	add.w	fp, r4, #26
 80063d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063da:	425b      	negs	r3, r3
 80063dc:	4553      	cmp	r3, sl
 80063de:	dc01      	bgt.n	80063e4 <_printf_float+0x2b0>
 80063e0:	464b      	mov	r3, r9
 80063e2:	e793      	b.n	800630c <_printf_float+0x1d8>
 80063e4:	2301      	movs	r3, #1
 80063e6:	465a      	mov	r2, fp
 80063e8:	4631      	mov	r1, r6
 80063ea:	4628      	mov	r0, r5
 80063ec:	47b8      	blx	r7
 80063ee:	3001      	adds	r0, #1
 80063f0:	f43f aefb 	beq.w	80061ea <_printf_float+0xb6>
 80063f4:	f10a 0a01 	add.w	sl, sl, #1
 80063f8:	e7ee      	b.n	80063d8 <_printf_float+0x2a4>
 80063fa:	bf00      	nop
 80063fc:	7fefffff 	.word	0x7fefffff
 8006400:	0800a9cc 	.word	0x0800a9cc
 8006404:	0800a9d0 	.word	0x0800a9d0
 8006408:	0800a9d4 	.word	0x0800a9d4
 800640c:	0800a9d8 	.word	0x0800a9d8
 8006410:	0800a9dc 	.word	0x0800a9dc
 8006414:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006416:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800641a:	4553      	cmp	r3, sl
 800641c:	bfa8      	it	ge
 800641e:	4653      	movge	r3, sl
 8006420:	2b00      	cmp	r3, #0
 8006422:	4699      	mov	r9, r3
 8006424:	dc36      	bgt.n	8006494 <_printf_float+0x360>
 8006426:	f04f 0b00 	mov.w	fp, #0
 800642a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800642e:	f104 021a 	add.w	r2, r4, #26
 8006432:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006434:	9306      	str	r3, [sp, #24]
 8006436:	eba3 0309 	sub.w	r3, r3, r9
 800643a:	455b      	cmp	r3, fp
 800643c:	dc31      	bgt.n	80064a2 <_printf_float+0x36e>
 800643e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006440:	459a      	cmp	sl, r3
 8006442:	dc3a      	bgt.n	80064ba <_printf_float+0x386>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	07da      	lsls	r2, r3, #31
 8006448:	d437      	bmi.n	80064ba <_printf_float+0x386>
 800644a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644c:	ebaa 0903 	sub.w	r9, sl, r3
 8006450:	9b06      	ldr	r3, [sp, #24]
 8006452:	ebaa 0303 	sub.w	r3, sl, r3
 8006456:	4599      	cmp	r9, r3
 8006458:	bfa8      	it	ge
 800645a:	4699      	movge	r9, r3
 800645c:	f1b9 0f00 	cmp.w	r9, #0
 8006460:	dc33      	bgt.n	80064ca <_printf_float+0x396>
 8006462:	f04f 0800 	mov.w	r8, #0
 8006466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800646a:	f104 0b1a 	add.w	fp, r4, #26
 800646e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006470:	ebaa 0303 	sub.w	r3, sl, r3
 8006474:	eba3 0309 	sub.w	r3, r3, r9
 8006478:	4543      	cmp	r3, r8
 800647a:	f77f af79 	ble.w	8006370 <_printf_float+0x23c>
 800647e:	2301      	movs	r3, #1
 8006480:	465a      	mov	r2, fp
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	47b8      	blx	r7
 8006488:	3001      	adds	r0, #1
 800648a:	f43f aeae 	beq.w	80061ea <_printf_float+0xb6>
 800648e:	f108 0801 	add.w	r8, r8, #1
 8006492:	e7ec      	b.n	800646e <_printf_float+0x33a>
 8006494:	4642      	mov	r2, r8
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d1c2      	bne.n	8006426 <_printf_float+0x2f2>
 80064a0:	e6a3      	b.n	80061ea <_printf_float+0xb6>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	9206      	str	r2, [sp, #24]
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f ae9c 	beq.w	80061ea <_printf_float+0xb6>
 80064b2:	9a06      	ldr	r2, [sp, #24]
 80064b4:	f10b 0b01 	add.w	fp, fp, #1
 80064b8:	e7bb      	b.n	8006432 <_printf_float+0x2fe>
 80064ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	d1c0      	bne.n	800644a <_printf_float+0x316>
 80064c8:	e68f      	b.n	80061ea <_printf_float+0xb6>
 80064ca:	9a06      	ldr	r2, [sp, #24]
 80064cc:	464b      	mov	r3, r9
 80064ce:	4442      	add	r2, r8
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	d1c3      	bne.n	8006462 <_printf_float+0x32e>
 80064da:	e686      	b.n	80061ea <_printf_float+0xb6>
 80064dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064e0:	f1ba 0f01 	cmp.w	sl, #1
 80064e4:	dc01      	bgt.n	80064ea <_printf_float+0x3b6>
 80064e6:	07db      	lsls	r3, r3, #31
 80064e8:	d536      	bpl.n	8006558 <_printf_float+0x424>
 80064ea:	2301      	movs	r3, #1
 80064ec:	4642      	mov	r2, r8
 80064ee:	4631      	mov	r1, r6
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b8      	blx	r7
 80064f4:	3001      	adds	r0, #1
 80064f6:	f43f ae78 	beq.w	80061ea <_printf_float+0xb6>
 80064fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064fe:	4631      	mov	r1, r6
 8006500:	4628      	mov	r0, r5
 8006502:	47b8      	blx	r7
 8006504:	3001      	adds	r0, #1
 8006506:	f43f ae70 	beq.w	80061ea <_printf_float+0xb6>
 800650a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800650e:	2200      	movs	r2, #0
 8006510:	2300      	movs	r3, #0
 8006512:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006516:	f7fa faff 	bl	8000b18 <__aeabi_dcmpeq>
 800651a:	b9c0      	cbnz	r0, 800654e <_printf_float+0x41a>
 800651c:	4653      	mov	r3, sl
 800651e:	f108 0201 	add.w	r2, r8, #1
 8006522:	4631      	mov	r1, r6
 8006524:	4628      	mov	r0, r5
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	d10c      	bne.n	8006546 <_printf_float+0x412>
 800652c:	e65d      	b.n	80061ea <_printf_float+0xb6>
 800652e:	2301      	movs	r3, #1
 8006530:	465a      	mov	r2, fp
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f ae56 	beq.w	80061ea <_printf_float+0xb6>
 800653e:	f108 0801 	add.w	r8, r8, #1
 8006542:	45d0      	cmp	r8, sl
 8006544:	dbf3      	blt.n	800652e <_printf_float+0x3fa>
 8006546:	464b      	mov	r3, r9
 8006548:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800654c:	e6df      	b.n	800630e <_printf_float+0x1da>
 800654e:	f04f 0800 	mov.w	r8, #0
 8006552:	f104 0b1a 	add.w	fp, r4, #26
 8006556:	e7f4      	b.n	8006542 <_printf_float+0x40e>
 8006558:	2301      	movs	r3, #1
 800655a:	4642      	mov	r2, r8
 800655c:	e7e1      	b.n	8006522 <_printf_float+0x3ee>
 800655e:	2301      	movs	r3, #1
 8006560:	464a      	mov	r2, r9
 8006562:	4631      	mov	r1, r6
 8006564:	4628      	mov	r0, r5
 8006566:	47b8      	blx	r7
 8006568:	3001      	adds	r0, #1
 800656a:	f43f ae3e 	beq.w	80061ea <_printf_float+0xb6>
 800656e:	f108 0801 	add.w	r8, r8, #1
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006576:	1a5b      	subs	r3, r3, r1
 8006578:	4543      	cmp	r3, r8
 800657a:	dcf0      	bgt.n	800655e <_printf_float+0x42a>
 800657c:	e6fc      	b.n	8006378 <_printf_float+0x244>
 800657e:	f04f 0800 	mov.w	r8, #0
 8006582:	f104 0919 	add.w	r9, r4, #25
 8006586:	e7f4      	b.n	8006572 <_printf_float+0x43e>

08006588 <_printf_common>:
 8006588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800658c:	4616      	mov	r6, r2
 800658e:	4698      	mov	r8, r3
 8006590:	688a      	ldr	r2, [r1, #8]
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006598:	4293      	cmp	r3, r2
 800659a:	bfb8      	it	lt
 800659c:	4613      	movlt	r3, r2
 800659e:	6033      	str	r3, [r6, #0]
 80065a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065a4:	4607      	mov	r7, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	b10a      	cbz	r2, 80065ae <_printf_common+0x26>
 80065aa:	3301      	adds	r3, #1
 80065ac:	6033      	str	r3, [r6, #0]
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	0699      	lsls	r1, r3, #26
 80065b2:	bf42      	ittt	mi
 80065b4:	6833      	ldrmi	r3, [r6, #0]
 80065b6:	3302      	addmi	r3, #2
 80065b8:	6033      	strmi	r3, [r6, #0]
 80065ba:	6825      	ldr	r5, [r4, #0]
 80065bc:	f015 0506 	ands.w	r5, r5, #6
 80065c0:	d106      	bne.n	80065d0 <_printf_common+0x48>
 80065c2:	f104 0a19 	add.w	sl, r4, #25
 80065c6:	68e3      	ldr	r3, [r4, #12]
 80065c8:	6832      	ldr	r2, [r6, #0]
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	42ab      	cmp	r3, r5
 80065ce:	dc26      	bgt.n	800661e <_printf_common+0x96>
 80065d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	3b00      	subs	r3, #0
 80065d8:	bf18      	it	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	0692      	lsls	r2, r2, #26
 80065de:	d42b      	bmi.n	8006638 <_printf_common+0xb0>
 80065e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065e4:	4641      	mov	r1, r8
 80065e6:	4638      	mov	r0, r7
 80065e8:	47c8      	blx	r9
 80065ea:	3001      	adds	r0, #1
 80065ec:	d01e      	beq.n	800662c <_printf_common+0xa4>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	6922      	ldr	r2, [r4, #16]
 80065f2:	f003 0306 	and.w	r3, r3, #6
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	bf02      	ittt	eq
 80065fa:	68e5      	ldreq	r5, [r4, #12]
 80065fc:	6833      	ldreq	r3, [r6, #0]
 80065fe:	1aed      	subeq	r5, r5, r3
 8006600:	68a3      	ldr	r3, [r4, #8]
 8006602:	bf0c      	ite	eq
 8006604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006608:	2500      	movne	r5, #0
 800660a:	4293      	cmp	r3, r2
 800660c:	bfc4      	itt	gt
 800660e:	1a9b      	subgt	r3, r3, r2
 8006610:	18ed      	addgt	r5, r5, r3
 8006612:	2600      	movs	r6, #0
 8006614:	341a      	adds	r4, #26
 8006616:	42b5      	cmp	r5, r6
 8006618:	d11a      	bne.n	8006650 <_printf_common+0xc8>
 800661a:	2000      	movs	r0, #0
 800661c:	e008      	b.n	8006630 <_printf_common+0xa8>
 800661e:	2301      	movs	r3, #1
 8006620:	4652      	mov	r2, sl
 8006622:	4641      	mov	r1, r8
 8006624:	4638      	mov	r0, r7
 8006626:	47c8      	blx	r9
 8006628:	3001      	adds	r0, #1
 800662a:	d103      	bne.n	8006634 <_printf_common+0xac>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006634:	3501      	adds	r5, #1
 8006636:	e7c6      	b.n	80065c6 <_printf_common+0x3e>
 8006638:	18e1      	adds	r1, r4, r3
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	2030      	movs	r0, #48	@ 0x30
 800663e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006642:	4422      	add	r2, r4
 8006644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800664c:	3302      	adds	r3, #2
 800664e:	e7c7      	b.n	80065e0 <_printf_common+0x58>
 8006650:	2301      	movs	r3, #1
 8006652:	4622      	mov	r2, r4
 8006654:	4641      	mov	r1, r8
 8006656:	4638      	mov	r0, r7
 8006658:	47c8      	blx	r9
 800665a:	3001      	adds	r0, #1
 800665c:	d0e6      	beq.n	800662c <_printf_common+0xa4>
 800665e:	3601      	adds	r6, #1
 8006660:	e7d9      	b.n	8006616 <_printf_common+0x8e>
	...

08006664 <_printf_i>:
 8006664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	7e0f      	ldrb	r7, [r1, #24]
 800666a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800666c:	2f78      	cmp	r7, #120	@ 0x78
 800666e:	4691      	mov	r9, r2
 8006670:	4680      	mov	r8, r0
 8006672:	460c      	mov	r4, r1
 8006674:	469a      	mov	sl, r3
 8006676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800667a:	d807      	bhi.n	800668c <_printf_i+0x28>
 800667c:	2f62      	cmp	r7, #98	@ 0x62
 800667e:	d80a      	bhi.n	8006696 <_printf_i+0x32>
 8006680:	2f00      	cmp	r7, #0
 8006682:	f000 80d2 	beq.w	800682a <_printf_i+0x1c6>
 8006686:	2f58      	cmp	r7, #88	@ 0x58
 8006688:	f000 80b9 	beq.w	80067fe <_printf_i+0x19a>
 800668c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006694:	e03a      	b.n	800670c <_printf_i+0xa8>
 8006696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800669a:	2b15      	cmp	r3, #21
 800669c:	d8f6      	bhi.n	800668c <_printf_i+0x28>
 800669e:	a101      	add	r1, pc, #4	@ (adr r1, 80066a4 <_printf_i+0x40>)
 80066a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a4:	080066fd 	.word	0x080066fd
 80066a8:	08006711 	.word	0x08006711
 80066ac:	0800668d 	.word	0x0800668d
 80066b0:	0800668d 	.word	0x0800668d
 80066b4:	0800668d 	.word	0x0800668d
 80066b8:	0800668d 	.word	0x0800668d
 80066bc:	08006711 	.word	0x08006711
 80066c0:	0800668d 	.word	0x0800668d
 80066c4:	0800668d 	.word	0x0800668d
 80066c8:	0800668d 	.word	0x0800668d
 80066cc:	0800668d 	.word	0x0800668d
 80066d0:	08006811 	.word	0x08006811
 80066d4:	0800673b 	.word	0x0800673b
 80066d8:	080067cb 	.word	0x080067cb
 80066dc:	0800668d 	.word	0x0800668d
 80066e0:	0800668d 	.word	0x0800668d
 80066e4:	08006833 	.word	0x08006833
 80066e8:	0800668d 	.word	0x0800668d
 80066ec:	0800673b 	.word	0x0800673b
 80066f0:	0800668d 	.word	0x0800668d
 80066f4:	0800668d 	.word	0x0800668d
 80066f8:	080067d3 	.word	0x080067d3
 80066fc:	6833      	ldr	r3, [r6, #0]
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6032      	str	r2, [r6, #0]
 8006704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800670c:	2301      	movs	r3, #1
 800670e:	e09d      	b.n	800684c <_printf_i+0x1e8>
 8006710:	6833      	ldr	r3, [r6, #0]
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	1d19      	adds	r1, r3, #4
 8006716:	6031      	str	r1, [r6, #0]
 8006718:	0606      	lsls	r6, r0, #24
 800671a:	d501      	bpl.n	8006720 <_printf_i+0xbc>
 800671c:	681d      	ldr	r5, [r3, #0]
 800671e:	e003      	b.n	8006728 <_printf_i+0xc4>
 8006720:	0645      	lsls	r5, r0, #25
 8006722:	d5fb      	bpl.n	800671c <_printf_i+0xb8>
 8006724:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006728:	2d00      	cmp	r5, #0
 800672a:	da03      	bge.n	8006734 <_printf_i+0xd0>
 800672c:	232d      	movs	r3, #45	@ 0x2d
 800672e:	426d      	negs	r5, r5
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006734:	4859      	ldr	r0, [pc, #356]	@ (800689c <_printf_i+0x238>)
 8006736:	230a      	movs	r3, #10
 8006738:	e011      	b.n	800675e <_printf_i+0xfa>
 800673a:	6821      	ldr	r1, [r4, #0]
 800673c:	6833      	ldr	r3, [r6, #0]
 800673e:	0608      	lsls	r0, r1, #24
 8006740:	f853 5b04 	ldr.w	r5, [r3], #4
 8006744:	d402      	bmi.n	800674c <_printf_i+0xe8>
 8006746:	0649      	lsls	r1, r1, #25
 8006748:	bf48      	it	mi
 800674a:	b2ad      	uxthmi	r5, r5
 800674c:	2f6f      	cmp	r7, #111	@ 0x6f
 800674e:	4853      	ldr	r0, [pc, #332]	@ (800689c <_printf_i+0x238>)
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	bf14      	ite	ne
 8006754:	230a      	movne	r3, #10
 8006756:	2308      	moveq	r3, #8
 8006758:	2100      	movs	r1, #0
 800675a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800675e:	6866      	ldr	r6, [r4, #4]
 8006760:	60a6      	str	r6, [r4, #8]
 8006762:	2e00      	cmp	r6, #0
 8006764:	bfa2      	ittt	ge
 8006766:	6821      	ldrge	r1, [r4, #0]
 8006768:	f021 0104 	bicge.w	r1, r1, #4
 800676c:	6021      	strge	r1, [r4, #0]
 800676e:	b90d      	cbnz	r5, 8006774 <_printf_i+0x110>
 8006770:	2e00      	cmp	r6, #0
 8006772:	d04b      	beq.n	800680c <_printf_i+0x1a8>
 8006774:	4616      	mov	r6, r2
 8006776:	fbb5 f1f3 	udiv	r1, r5, r3
 800677a:	fb03 5711 	mls	r7, r3, r1, r5
 800677e:	5dc7      	ldrb	r7, [r0, r7]
 8006780:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006784:	462f      	mov	r7, r5
 8006786:	42bb      	cmp	r3, r7
 8006788:	460d      	mov	r5, r1
 800678a:	d9f4      	bls.n	8006776 <_printf_i+0x112>
 800678c:	2b08      	cmp	r3, #8
 800678e:	d10b      	bne.n	80067a8 <_printf_i+0x144>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	07df      	lsls	r7, r3, #31
 8006794:	d508      	bpl.n	80067a8 <_printf_i+0x144>
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	6861      	ldr	r1, [r4, #4]
 800679a:	4299      	cmp	r1, r3
 800679c:	bfde      	ittt	le
 800679e:	2330      	movle	r3, #48	@ 0x30
 80067a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067a4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80067a8:	1b92      	subs	r2, r2, r6
 80067aa:	6122      	str	r2, [r4, #16]
 80067ac:	f8cd a000 	str.w	sl, [sp]
 80067b0:	464b      	mov	r3, r9
 80067b2:	aa03      	add	r2, sp, #12
 80067b4:	4621      	mov	r1, r4
 80067b6:	4640      	mov	r0, r8
 80067b8:	f7ff fee6 	bl	8006588 <_printf_common>
 80067bc:	3001      	adds	r0, #1
 80067be:	d14a      	bne.n	8006856 <_printf_i+0x1f2>
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067c4:	b004      	add	sp, #16
 80067c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f043 0320 	orr.w	r3, r3, #32
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	4833      	ldr	r0, [pc, #204]	@ (80068a0 <_printf_i+0x23c>)
 80067d4:	2778      	movs	r7, #120	@ 0x78
 80067d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	6831      	ldr	r1, [r6, #0]
 80067de:	061f      	lsls	r7, r3, #24
 80067e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80067e4:	d402      	bmi.n	80067ec <_printf_i+0x188>
 80067e6:	065f      	lsls	r7, r3, #25
 80067e8:	bf48      	it	mi
 80067ea:	b2ad      	uxthmi	r5, r5
 80067ec:	6031      	str	r1, [r6, #0]
 80067ee:	07d9      	lsls	r1, r3, #31
 80067f0:	bf44      	itt	mi
 80067f2:	f043 0320 	orrmi.w	r3, r3, #32
 80067f6:	6023      	strmi	r3, [r4, #0]
 80067f8:	b11d      	cbz	r5, 8006802 <_printf_i+0x19e>
 80067fa:	2310      	movs	r3, #16
 80067fc:	e7ac      	b.n	8006758 <_printf_i+0xf4>
 80067fe:	4827      	ldr	r0, [pc, #156]	@ (800689c <_printf_i+0x238>)
 8006800:	e7e9      	b.n	80067d6 <_printf_i+0x172>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	f023 0320 	bic.w	r3, r3, #32
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	e7f6      	b.n	80067fa <_printf_i+0x196>
 800680c:	4616      	mov	r6, r2
 800680e:	e7bd      	b.n	800678c <_printf_i+0x128>
 8006810:	6833      	ldr	r3, [r6, #0]
 8006812:	6825      	ldr	r5, [r4, #0]
 8006814:	6961      	ldr	r1, [r4, #20]
 8006816:	1d18      	adds	r0, r3, #4
 8006818:	6030      	str	r0, [r6, #0]
 800681a:	062e      	lsls	r6, r5, #24
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	d501      	bpl.n	8006824 <_printf_i+0x1c0>
 8006820:	6019      	str	r1, [r3, #0]
 8006822:	e002      	b.n	800682a <_printf_i+0x1c6>
 8006824:	0668      	lsls	r0, r5, #25
 8006826:	d5fb      	bpl.n	8006820 <_printf_i+0x1bc>
 8006828:	8019      	strh	r1, [r3, #0]
 800682a:	2300      	movs	r3, #0
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	4616      	mov	r6, r2
 8006830:	e7bc      	b.n	80067ac <_printf_i+0x148>
 8006832:	6833      	ldr	r3, [r6, #0]
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	6032      	str	r2, [r6, #0]
 8006838:	681e      	ldr	r6, [r3, #0]
 800683a:	6862      	ldr	r2, [r4, #4]
 800683c:	2100      	movs	r1, #0
 800683e:	4630      	mov	r0, r6
 8006840:	f7f9 fcee 	bl	8000220 <memchr>
 8006844:	b108      	cbz	r0, 800684a <_printf_i+0x1e6>
 8006846:	1b80      	subs	r0, r0, r6
 8006848:	6060      	str	r0, [r4, #4]
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	6123      	str	r3, [r4, #16]
 800684e:	2300      	movs	r3, #0
 8006850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006854:	e7aa      	b.n	80067ac <_printf_i+0x148>
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	4632      	mov	r2, r6
 800685a:	4649      	mov	r1, r9
 800685c:	4640      	mov	r0, r8
 800685e:	47d0      	blx	sl
 8006860:	3001      	adds	r0, #1
 8006862:	d0ad      	beq.n	80067c0 <_printf_i+0x15c>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	079b      	lsls	r3, r3, #30
 8006868:	d413      	bmi.n	8006892 <_printf_i+0x22e>
 800686a:	68e0      	ldr	r0, [r4, #12]
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	4298      	cmp	r0, r3
 8006870:	bfb8      	it	lt
 8006872:	4618      	movlt	r0, r3
 8006874:	e7a6      	b.n	80067c4 <_printf_i+0x160>
 8006876:	2301      	movs	r3, #1
 8006878:	4632      	mov	r2, r6
 800687a:	4649      	mov	r1, r9
 800687c:	4640      	mov	r0, r8
 800687e:	47d0      	blx	sl
 8006880:	3001      	adds	r0, #1
 8006882:	d09d      	beq.n	80067c0 <_printf_i+0x15c>
 8006884:	3501      	adds	r5, #1
 8006886:	68e3      	ldr	r3, [r4, #12]
 8006888:	9903      	ldr	r1, [sp, #12]
 800688a:	1a5b      	subs	r3, r3, r1
 800688c:	42ab      	cmp	r3, r5
 800688e:	dcf2      	bgt.n	8006876 <_printf_i+0x212>
 8006890:	e7eb      	b.n	800686a <_printf_i+0x206>
 8006892:	2500      	movs	r5, #0
 8006894:	f104 0619 	add.w	r6, r4, #25
 8006898:	e7f5      	b.n	8006886 <_printf_i+0x222>
 800689a:	bf00      	nop
 800689c:	0800a9de 	.word	0x0800a9de
 80068a0:	0800a9ef 	.word	0x0800a9ef

080068a4 <_scanf_float>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	b087      	sub	sp, #28
 80068aa:	4617      	mov	r7, r2
 80068ac:	9303      	str	r3, [sp, #12]
 80068ae:	688b      	ldr	r3, [r1, #8]
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80068b6:	bf81      	itttt	hi
 80068b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80068bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80068c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80068c4:	608b      	strhi	r3, [r1, #8]
 80068c6:	680b      	ldr	r3, [r1, #0]
 80068c8:	460a      	mov	r2, r1
 80068ca:	f04f 0500 	mov.w	r5, #0
 80068ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80068d2:	f842 3b1c 	str.w	r3, [r2], #28
 80068d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068da:	4680      	mov	r8, r0
 80068dc:	460c      	mov	r4, r1
 80068de:	bf98      	it	ls
 80068e0:	f04f 0b00 	movls.w	fp, #0
 80068e4:	9201      	str	r2, [sp, #4]
 80068e6:	4616      	mov	r6, r2
 80068e8:	46aa      	mov	sl, r5
 80068ea:	46a9      	mov	r9, r5
 80068ec:	9502      	str	r5, [sp, #8]
 80068ee:	68a2      	ldr	r2, [r4, #8]
 80068f0:	b152      	cbz	r2, 8006908 <_scanf_float+0x64>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80068f8:	d864      	bhi.n	80069c4 <_scanf_float+0x120>
 80068fa:	2b40      	cmp	r3, #64	@ 0x40
 80068fc:	d83c      	bhi.n	8006978 <_scanf_float+0xd4>
 80068fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006902:	b2c8      	uxtb	r0, r1
 8006904:	280e      	cmp	r0, #14
 8006906:	d93a      	bls.n	800697e <_scanf_float+0xda>
 8006908:	f1b9 0f00 	cmp.w	r9, #0
 800690c:	d003      	beq.n	8006916 <_scanf_float+0x72>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800691a:	f1ba 0f01 	cmp.w	sl, #1
 800691e:	f200 8117 	bhi.w	8006b50 <_scanf_float+0x2ac>
 8006922:	9b01      	ldr	r3, [sp, #4]
 8006924:	429e      	cmp	r6, r3
 8006926:	f200 8108 	bhi.w	8006b3a <_scanf_float+0x296>
 800692a:	2001      	movs	r0, #1
 800692c:	b007      	add	sp, #28
 800692e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006932:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006936:	2a0d      	cmp	r2, #13
 8006938:	d8e6      	bhi.n	8006908 <_scanf_float+0x64>
 800693a:	a101      	add	r1, pc, #4	@ (adr r1, 8006940 <_scanf_float+0x9c>)
 800693c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006940:	08006a87 	.word	0x08006a87
 8006944:	08006909 	.word	0x08006909
 8006948:	08006909 	.word	0x08006909
 800694c:	08006909 	.word	0x08006909
 8006950:	08006ae7 	.word	0x08006ae7
 8006954:	08006abf 	.word	0x08006abf
 8006958:	08006909 	.word	0x08006909
 800695c:	08006909 	.word	0x08006909
 8006960:	08006a95 	.word	0x08006a95
 8006964:	08006909 	.word	0x08006909
 8006968:	08006909 	.word	0x08006909
 800696c:	08006909 	.word	0x08006909
 8006970:	08006909 	.word	0x08006909
 8006974:	08006a4d 	.word	0x08006a4d
 8006978:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800697c:	e7db      	b.n	8006936 <_scanf_float+0x92>
 800697e:	290e      	cmp	r1, #14
 8006980:	d8c2      	bhi.n	8006908 <_scanf_float+0x64>
 8006982:	a001      	add	r0, pc, #4	@ (adr r0, 8006988 <_scanf_float+0xe4>)
 8006984:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006988:	08006a3d 	.word	0x08006a3d
 800698c:	08006909 	.word	0x08006909
 8006990:	08006a3d 	.word	0x08006a3d
 8006994:	08006ad3 	.word	0x08006ad3
 8006998:	08006909 	.word	0x08006909
 800699c:	080069e5 	.word	0x080069e5
 80069a0:	08006a23 	.word	0x08006a23
 80069a4:	08006a23 	.word	0x08006a23
 80069a8:	08006a23 	.word	0x08006a23
 80069ac:	08006a23 	.word	0x08006a23
 80069b0:	08006a23 	.word	0x08006a23
 80069b4:	08006a23 	.word	0x08006a23
 80069b8:	08006a23 	.word	0x08006a23
 80069bc:	08006a23 	.word	0x08006a23
 80069c0:	08006a23 	.word	0x08006a23
 80069c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80069c6:	d809      	bhi.n	80069dc <_scanf_float+0x138>
 80069c8:	2b60      	cmp	r3, #96	@ 0x60
 80069ca:	d8b2      	bhi.n	8006932 <_scanf_float+0x8e>
 80069cc:	2b54      	cmp	r3, #84	@ 0x54
 80069ce:	d07b      	beq.n	8006ac8 <_scanf_float+0x224>
 80069d0:	2b59      	cmp	r3, #89	@ 0x59
 80069d2:	d199      	bne.n	8006908 <_scanf_float+0x64>
 80069d4:	2d07      	cmp	r5, #7
 80069d6:	d197      	bne.n	8006908 <_scanf_float+0x64>
 80069d8:	2508      	movs	r5, #8
 80069da:	e02c      	b.n	8006a36 <_scanf_float+0x192>
 80069dc:	2b74      	cmp	r3, #116	@ 0x74
 80069de:	d073      	beq.n	8006ac8 <_scanf_float+0x224>
 80069e0:	2b79      	cmp	r3, #121	@ 0x79
 80069e2:	e7f6      	b.n	80069d2 <_scanf_float+0x12e>
 80069e4:	6821      	ldr	r1, [r4, #0]
 80069e6:	05c8      	lsls	r0, r1, #23
 80069e8:	d51b      	bpl.n	8006a22 <_scanf_float+0x17e>
 80069ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80069ee:	6021      	str	r1, [r4, #0]
 80069f0:	f109 0901 	add.w	r9, r9, #1
 80069f4:	f1bb 0f00 	cmp.w	fp, #0
 80069f8:	d003      	beq.n	8006a02 <_scanf_float+0x15e>
 80069fa:	3201      	adds	r2, #1
 80069fc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006a00:	60a2      	str	r2, [r4, #8]
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	60a3      	str	r3, [r4, #8]
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	607b      	str	r3, [r7, #4]
 8006a16:	f340 8087 	ble.w	8006b28 <_scanf_float+0x284>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	e765      	b.n	80068ee <_scanf_float+0x4a>
 8006a22:	eb1a 0105 	adds.w	r1, sl, r5
 8006a26:	f47f af6f 	bne.w	8006908 <_scanf_float+0x64>
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006a30:	6022      	str	r2, [r4, #0]
 8006a32:	460d      	mov	r5, r1
 8006a34:	468a      	mov	sl, r1
 8006a36:	f806 3b01 	strb.w	r3, [r6], #1
 8006a3a:	e7e2      	b.n	8006a02 <_scanf_float+0x15e>
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	0610      	lsls	r0, r2, #24
 8006a40:	f57f af62 	bpl.w	8006908 <_scanf_float+0x64>
 8006a44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	e7f4      	b.n	8006a36 <_scanf_float+0x192>
 8006a4c:	f1ba 0f00 	cmp.w	sl, #0
 8006a50:	d10e      	bne.n	8006a70 <_scanf_float+0x1cc>
 8006a52:	f1b9 0f00 	cmp.w	r9, #0
 8006a56:	d10e      	bne.n	8006a76 <_scanf_float+0x1d2>
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a5e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a62:	d108      	bne.n	8006a76 <_scanf_float+0x1d2>
 8006a64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a68:	6022      	str	r2, [r4, #0]
 8006a6a:	f04f 0a01 	mov.w	sl, #1
 8006a6e:	e7e2      	b.n	8006a36 <_scanf_float+0x192>
 8006a70:	f1ba 0f02 	cmp.w	sl, #2
 8006a74:	d055      	beq.n	8006b22 <_scanf_float+0x27e>
 8006a76:	2d01      	cmp	r5, #1
 8006a78:	d002      	beq.n	8006a80 <_scanf_float+0x1dc>
 8006a7a:	2d04      	cmp	r5, #4
 8006a7c:	f47f af44 	bne.w	8006908 <_scanf_float+0x64>
 8006a80:	3501      	adds	r5, #1
 8006a82:	b2ed      	uxtb	r5, r5
 8006a84:	e7d7      	b.n	8006a36 <_scanf_float+0x192>
 8006a86:	f1ba 0f01 	cmp.w	sl, #1
 8006a8a:	f47f af3d 	bne.w	8006908 <_scanf_float+0x64>
 8006a8e:	f04f 0a02 	mov.w	sl, #2
 8006a92:	e7d0      	b.n	8006a36 <_scanf_float+0x192>
 8006a94:	b97d      	cbnz	r5, 8006ab6 <_scanf_float+0x212>
 8006a96:	f1b9 0f00 	cmp.w	r9, #0
 8006a9a:	f47f af38 	bne.w	800690e <_scanf_float+0x6a>
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006aa4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006aa8:	f040 8108 	bne.w	8006cbc <_scanf_float+0x418>
 8006aac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ab0:	6022      	str	r2, [r4, #0]
 8006ab2:	2501      	movs	r5, #1
 8006ab4:	e7bf      	b.n	8006a36 <_scanf_float+0x192>
 8006ab6:	2d03      	cmp	r5, #3
 8006ab8:	d0e2      	beq.n	8006a80 <_scanf_float+0x1dc>
 8006aba:	2d05      	cmp	r5, #5
 8006abc:	e7de      	b.n	8006a7c <_scanf_float+0x1d8>
 8006abe:	2d02      	cmp	r5, #2
 8006ac0:	f47f af22 	bne.w	8006908 <_scanf_float+0x64>
 8006ac4:	2503      	movs	r5, #3
 8006ac6:	e7b6      	b.n	8006a36 <_scanf_float+0x192>
 8006ac8:	2d06      	cmp	r5, #6
 8006aca:	f47f af1d 	bne.w	8006908 <_scanf_float+0x64>
 8006ace:	2507      	movs	r5, #7
 8006ad0:	e7b1      	b.n	8006a36 <_scanf_float+0x192>
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	0591      	lsls	r1, r2, #22
 8006ad6:	f57f af17 	bpl.w	8006908 <_scanf_float+0x64>
 8006ada:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006ade:	6022      	str	r2, [r4, #0]
 8006ae0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ae4:	e7a7      	b.n	8006a36 <_scanf_float+0x192>
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006aec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006af0:	d006      	beq.n	8006b00 <_scanf_float+0x25c>
 8006af2:	0550      	lsls	r0, r2, #21
 8006af4:	f57f af08 	bpl.w	8006908 <_scanf_float+0x64>
 8006af8:	f1b9 0f00 	cmp.w	r9, #0
 8006afc:	f000 80de 	beq.w	8006cbc <_scanf_float+0x418>
 8006b00:	0591      	lsls	r1, r2, #22
 8006b02:	bf58      	it	pl
 8006b04:	9902      	ldrpl	r1, [sp, #8]
 8006b06:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b0a:	bf58      	it	pl
 8006b0c:	eba9 0101 	subpl.w	r1, r9, r1
 8006b10:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006b14:	bf58      	it	pl
 8006b16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b1a:	6022      	str	r2, [r4, #0]
 8006b1c:	f04f 0900 	mov.w	r9, #0
 8006b20:	e789      	b.n	8006a36 <_scanf_float+0x192>
 8006b22:	f04f 0a03 	mov.w	sl, #3
 8006b26:	e786      	b.n	8006a36 <_scanf_float+0x192>
 8006b28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	4640      	mov	r0, r8
 8006b30:	4798      	blx	r3
 8006b32:	2800      	cmp	r0, #0
 8006b34:	f43f aedb 	beq.w	80068ee <_scanf_float+0x4a>
 8006b38:	e6e6      	b.n	8006908 <_scanf_float+0x64>
 8006b3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b42:	463a      	mov	r2, r7
 8006b44:	4640      	mov	r0, r8
 8006b46:	4798      	blx	r3
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	e6e8      	b.n	8006922 <_scanf_float+0x7e>
 8006b50:	1e6b      	subs	r3, r5, #1
 8006b52:	2b06      	cmp	r3, #6
 8006b54:	d824      	bhi.n	8006ba0 <_scanf_float+0x2fc>
 8006b56:	2d02      	cmp	r5, #2
 8006b58:	d836      	bhi.n	8006bc8 <_scanf_float+0x324>
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	429e      	cmp	r6, r3
 8006b5e:	f67f aee4 	bls.w	800692a <_scanf_float+0x86>
 8006b62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b6a:	463a      	mov	r2, r7
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	4798      	blx	r3
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	e7f0      	b.n	8006b5a <_scanf_float+0x2b6>
 8006b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b80:	463a      	mov	r2, r7
 8006b82:	4640      	mov	r0, r8
 8006b84:	4798      	blx	r3
 8006b86:	6923      	ldr	r3, [r4, #16]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006b90:	fa5f fa8a 	uxtb.w	sl, sl
 8006b94:	f1ba 0f02 	cmp.w	sl, #2
 8006b98:	d1ee      	bne.n	8006b78 <_scanf_float+0x2d4>
 8006b9a:	3d03      	subs	r5, #3
 8006b9c:	b2ed      	uxtb	r5, r5
 8006b9e:	1b76      	subs	r6, r6, r5
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	05da      	lsls	r2, r3, #23
 8006ba4:	d530      	bpl.n	8006c08 <_scanf_float+0x364>
 8006ba6:	055b      	lsls	r3, r3, #21
 8006ba8:	d511      	bpl.n	8006bce <_scanf_float+0x32a>
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	429e      	cmp	r6, r3
 8006bae:	f67f aebc 	bls.w	800692a <_scanf_float+0x86>
 8006bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bba:	463a      	mov	r2, r7
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	4798      	blx	r3
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	e7f0      	b.n	8006baa <_scanf_float+0x306>
 8006bc8:	46aa      	mov	sl, r5
 8006bca:	46b3      	mov	fp, r6
 8006bcc:	e7de      	b.n	8006b8c <_scanf_float+0x2e8>
 8006bce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	2965      	cmp	r1, #101	@ 0x65
 8006bd6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006bda:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006bde:	6123      	str	r3, [r4, #16]
 8006be0:	d00c      	beq.n	8006bfc <_scanf_float+0x358>
 8006be2:	2945      	cmp	r1, #69	@ 0x45
 8006be4:	d00a      	beq.n	8006bfc <_scanf_float+0x358>
 8006be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bea:	463a      	mov	r2, r7
 8006bec:	4640      	mov	r0, r8
 8006bee:	4798      	blx	r3
 8006bf0:	6923      	ldr	r3, [r4, #16]
 8006bf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	1eb5      	subs	r5, r6, #2
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c00:	463a      	mov	r2, r7
 8006c02:	4640      	mov	r0, r8
 8006c04:	4798      	blx	r3
 8006c06:	462e      	mov	r6, r5
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	f012 0210 	ands.w	r2, r2, #16
 8006c0e:	d001      	beq.n	8006c14 <_scanf_float+0x370>
 8006c10:	2000      	movs	r0, #0
 8006c12:	e68b      	b.n	800692c <_scanf_float+0x88>
 8006c14:	7032      	strb	r2, [r6, #0]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c20:	d11c      	bne.n	8006c5c <_scanf_float+0x3b8>
 8006c22:	9b02      	ldr	r3, [sp, #8]
 8006c24:	454b      	cmp	r3, r9
 8006c26:	eba3 0209 	sub.w	r2, r3, r9
 8006c2a:	d123      	bne.n	8006c74 <_scanf_float+0x3d0>
 8006c2c:	9901      	ldr	r1, [sp, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4640      	mov	r0, r8
 8006c32:	f000 ff11 	bl	8007a58 <_strtod_r>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	6821      	ldr	r1, [r4, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f011 0f02 	tst.w	r1, #2
 8006c40:	ec57 6b10 	vmov	r6, r7, d0
 8006c44:	f103 0204 	add.w	r2, r3, #4
 8006c48:	d01f      	beq.n	8006c8a <_scanf_float+0x3e6>
 8006c4a:	9903      	ldr	r1, [sp, #12]
 8006c4c:	600a      	str	r2, [r1, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	e9c3 6700 	strd	r6, r7, [r3]
 8006c54:	68e3      	ldr	r3, [r4, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60e3      	str	r3, [r4, #12]
 8006c5a:	e7d9      	b.n	8006c10 <_scanf_float+0x36c>
 8006c5c:	9b04      	ldr	r3, [sp, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0e4      	beq.n	8006c2c <_scanf_float+0x388>
 8006c62:	9905      	ldr	r1, [sp, #20]
 8006c64:	230a      	movs	r3, #10
 8006c66:	3101      	adds	r1, #1
 8006c68:	4640      	mov	r0, r8
 8006c6a:	f000 ff75 	bl	8007b58 <_strtol_r>
 8006c6e:	9b04      	ldr	r3, [sp, #16]
 8006c70:	9e05      	ldr	r6, [sp, #20]
 8006c72:	1ac2      	subs	r2, r0, r3
 8006c74:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c78:	429e      	cmp	r6, r3
 8006c7a:	bf28      	it	cs
 8006c7c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c80:	4910      	ldr	r1, [pc, #64]	@ (8006cc4 <_scanf_float+0x420>)
 8006c82:	4630      	mov	r0, r6
 8006c84:	f000 f822 	bl	8006ccc <siprintf>
 8006c88:	e7d0      	b.n	8006c2c <_scanf_float+0x388>
 8006c8a:	f011 0f04 	tst.w	r1, #4
 8006c8e:	9903      	ldr	r1, [sp, #12]
 8006c90:	600a      	str	r2, [r1, #0]
 8006c92:	d1dc      	bne.n	8006c4e <_scanf_float+0x3aa>
 8006c94:	681d      	ldr	r5, [r3, #0]
 8006c96:	4632      	mov	r2, r6
 8006c98:	463b      	mov	r3, r7
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 ff6d 	bl	8000b7c <__aeabi_dcmpun>
 8006ca2:	b128      	cbz	r0, 8006cb0 <_scanf_float+0x40c>
 8006ca4:	4808      	ldr	r0, [pc, #32]	@ (8006cc8 <_scanf_float+0x424>)
 8006ca6:	f001 f85f 	bl	8007d68 <nanf>
 8006caa:	ed85 0a00 	vstr	s0, [r5]
 8006cae:	e7d1      	b.n	8006c54 <_scanf_float+0x3b0>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	f7f9 ffc0 	bl	8000c38 <__aeabi_d2f>
 8006cb8:	6028      	str	r0, [r5, #0]
 8006cba:	e7cb      	b.n	8006c54 <_scanf_float+0x3b0>
 8006cbc:	f04f 0900 	mov.w	r9, #0
 8006cc0:	e629      	b.n	8006916 <_scanf_float+0x72>
 8006cc2:	bf00      	nop
 8006cc4:	0800aa00 	.word	0x0800aa00
 8006cc8:	0800adf3 	.word	0x0800adf3

08006ccc <siprintf>:
 8006ccc:	b40e      	push	{r1, r2, r3}
 8006cce:	b500      	push	{lr}
 8006cd0:	b09c      	sub	sp, #112	@ 0x70
 8006cd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006cd4:	9002      	str	r0, [sp, #8]
 8006cd6:	9006      	str	r0, [sp, #24]
 8006cd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006cdc:	4809      	ldr	r0, [pc, #36]	@ (8006d04 <siprintf+0x38>)
 8006cde:	9107      	str	r1, [sp, #28]
 8006ce0:	9104      	str	r1, [sp, #16]
 8006ce2:	4909      	ldr	r1, [pc, #36]	@ (8006d08 <siprintf+0x3c>)
 8006ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce8:	9105      	str	r1, [sp, #20]
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	a902      	add	r1, sp, #8
 8006cf0:	f002 fa22 	bl	8009138 <_svfiprintf_r>
 8006cf4:	9b02      	ldr	r3, [sp, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	b01c      	add	sp, #112	@ 0x70
 8006cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d00:	b003      	add	sp, #12
 8006d02:	4770      	bx	lr
 8006d04:	20000184 	.word	0x20000184
 8006d08:	ffff0208 	.word	0xffff0208

08006d0c <std>:
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	4604      	mov	r4, r0
 8006d12:	e9c0 3300 	strd	r3, r3, [r0]
 8006d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d1a:	6083      	str	r3, [r0, #8]
 8006d1c:	8181      	strh	r1, [r0, #12]
 8006d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d20:	81c2      	strh	r2, [r0, #14]
 8006d22:	6183      	str	r3, [r0, #24]
 8006d24:	4619      	mov	r1, r3
 8006d26:	2208      	movs	r2, #8
 8006d28:	305c      	adds	r0, #92	@ 0x5c
 8006d2a:	f000 ffcd 	bl	8007cc8 <memset>
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <std+0x58>)
 8006d30:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <std+0x5c>)
 8006d34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <std+0x60>)
 8006d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <std+0x64>)
 8006d3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <std+0x68>)
 8006d40:	6224      	str	r4, [r4, #32]
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d006      	beq.n	8006d54 <std+0x48>
 8006d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d4a:	4294      	cmp	r4, r2
 8006d4c:	d002      	beq.n	8006d54 <std+0x48>
 8006d4e:	33d0      	adds	r3, #208	@ 0xd0
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d105      	bne.n	8006d60 <std+0x54>
 8006d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f000 bfea 	b.w	8007d34 <__retarget_lock_init_recursive>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	0800a201 	.word	0x0800a201
 8006d68:	0800a223 	.word	0x0800a223
 8006d6c:	0800a25b 	.word	0x0800a25b
 8006d70:	0800a27f 	.word	0x0800a27f
 8006d74:	20000b8c 	.word	0x20000b8c

08006d78 <stdio_exit_handler>:
 8006d78:	4a02      	ldr	r2, [pc, #8]	@ (8006d84 <stdio_exit_handler+0xc>)
 8006d7a:	4903      	ldr	r1, [pc, #12]	@ (8006d88 <stdio_exit_handler+0x10>)
 8006d7c:	4803      	ldr	r0, [pc, #12]	@ (8006d8c <stdio_exit_handler+0x14>)
 8006d7e:	f000 beed 	b.w	8007b5c <_fwalk_sglue>
 8006d82:	bf00      	nop
 8006d84:	2000000c 	.word	0x2000000c
 8006d88:	08009835 	.word	0x08009835
 8006d8c:	20000188 	.word	0x20000188

08006d90 <cleanup_stdio>:
 8006d90:	6841      	ldr	r1, [r0, #4]
 8006d92:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc4 <cleanup_stdio+0x34>)
 8006d94:	4299      	cmp	r1, r3
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	d001      	beq.n	8006da0 <cleanup_stdio+0x10>
 8006d9c:	f002 fd4a 	bl	8009834 <_fflush_r>
 8006da0:	68a1      	ldr	r1, [r4, #8]
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <cleanup_stdio+0x38>)
 8006da4:	4299      	cmp	r1, r3
 8006da6:	d002      	beq.n	8006dae <cleanup_stdio+0x1e>
 8006da8:	4620      	mov	r0, r4
 8006daa:	f002 fd43 	bl	8009834 <_fflush_r>
 8006dae:	68e1      	ldr	r1, [r4, #12]
 8006db0:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <cleanup_stdio+0x3c>)
 8006db2:	4299      	cmp	r1, r3
 8006db4:	d004      	beq.n	8006dc0 <cleanup_stdio+0x30>
 8006db6:	4620      	mov	r0, r4
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f002 bd3a 	b.w	8009834 <_fflush_r>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000b8c 	.word	0x20000b8c
 8006dc8:	20000bf4 	.word	0x20000bf4
 8006dcc:	20000c5c 	.word	0x20000c5c

08006dd0 <global_stdio_init.part.0>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <global_stdio_init.part.0+0x30>)
 8006dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8006e04 <global_stdio_init.part.0+0x34>)
 8006dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e08 <global_stdio_init.part.0+0x38>)
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2104      	movs	r1, #4
 8006de0:	f7ff ff94 	bl	8006d0c <std>
 8006de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006de8:	2201      	movs	r2, #1
 8006dea:	2109      	movs	r1, #9
 8006dec:	f7ff ff8e 	bl	8006d0c <std>
 8006df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006df4:	2202      	movs	r2, #2
 8006df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfa:	2112      	movs	r1, #18
 8006dfc:	f7ff bf86 	b.w	8006d0c <std>
 8006e00:	20000cc4 	.word	0x20000cc4
 8006e04:	20000b8c 	.word	0x20000b8c
 8006e08:	08006d79 	.word	0x08006d79

08006e0c <__sfp_lock_acquire>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	@ (8006e14 <__sfp_lock_acquire+0x8>)
 8006e0e:	f000 bf92 	b.w	8007d36 <__retarget_lock_acquire_recursive>
 8006e12:	bf00      	nop
 8006e14:	20000cc9 	.word	0x20000cc9

08006e18 <__sfp_lock_release>:
 8006e18:	4801      	ldr	r0, [pc, #4]	@ (8006e20 <__sfp_lock_release+0x8>)
 8006e1a:	f000 bf8d 	b.w	8007d38 <__retarget_lock_release_recursive>
 8006e1e:	bf00      	nop
 8006e20:	20000cc9 	.word	0x20000cc9

08006e24 <__sinit>:
 8006e24:	b510      	push	{r4, lr}
 8006e26:	4604      	mov	r4, r0
 8006e28:	f7ff fff0 	bl	8006e0c <__sfp_lock_acquire>
 8006e2c:	6a23      	ldr	r3, [r4, #32]
 8006e2e:	b11b      	cbz	r3, 8006e38 <__sinit+0x14>
 8006e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e34:	f7ff bff0 	b.w	8006e18 <__sfp_lock_release>
 8006e38:	4b04      	ldr	r3, [pc, #16]	@ (8006e4c <__sinit+0x28>)
 8006e3a:	6223      	str	r3, [r4, #32]
 8006e3c:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <__sinit+0x2c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f5      	bne.n	8006e30 <__sinit+0xc>
 8006e44:	f7ff ffc4 	bl	8006dd0 <global_stdio_init.part.0>
 8006e48:	e7f2      	b.n	8006e30 <__sinit+0xc>
 8006e4a:	bf00      	nop
 8006e4c:	08006d91 	.word	0x08006d91
 8006e50:	20000cc4 	.word	0x20000cc4

08006e54 <sulp>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	4604      	mov	r4, r0
 8006e58:	460d      	mov	r5, r1
 8006e5a:	ec45 4b10 	vmov	d0, r4, r5
 8006e5e:	4616      	mov	r6, r2
 8006e60:	f003 f890 	bl	8009f84 <__ulp>
 8006e64:	ec51 0b10 	vmov	r0, r1, d0
 8006e68:	b17e      	cbz	r6, 8006e8a <sulp+0x36>
 8006e6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	dd09      	ble.n	8006e8a <sulp+0x36>
 8006e76:	051b      	lsls	r3, r3, #20
 8006e78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006e7c:	2400      	movs	r4, #0
 8006e7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006e82:	4622      	mov	r2, r4
 8006e84:	462b      	mov	r3, r5
 8006e86:	f7f9 fbdf 	bl	8000648 <__aeabi_dmul>
 8006e8a:	ec41 0b10 	vmov	d0, r0, r1
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}

08006e90 <_strtod_l>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	b09f      	sub	sp, #124	@ 0x7c
 8006e96:	460c      	mov	r4, r1
 8006e98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006e9e:	9005      	str	r0, [sp, #20]
 8006ea0:	f04f 0a00 	mov.w	sl, #0
 8006ea4:	f04f 0b00 	mov.w	fp, #0
 8006ea8:	460a      	mov	r2, r1
 8006eaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8006eac:	7811      	ldrb	r1, [r2, #0]
 8006eae:	292b      	cmp	r1, #43	@ 0x2b
 8006eb0:	d04a      	beq.n	8006f48 <_strtod_l+0xb8>
 8006eb2:	d838      	bhi.n	8006f26 <_strtod_l+0x96>
 8006eb4:	290d      	cmp	r1, #13
 8006eb6:	d832      	bhi.n	8006f1e <_strtod_l+0x8e>
 8006eb8:	2908      	cmp	r1, #8
 8006eba:	d832      	bhi.n	8006f22 <_strtod_l+0x92>
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d03b      	beq.n	8006f38 <_strtod_l+0xa8>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006ec4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006ec6:	782a      	ldrb	r2, [r5, #0]
 8006ec8:	2a30      	cmp	r2, #48	@ 0x30
 8006eca:	f040 80b3 	bne.w	8007034 <_strtod_l+0x1a4>
 8006ece:	786a      	ldrb	r2, [r5, #1]
 8006ed0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ed4:	2a58      	cmp	r2, #88	@ 0x58
 8006ed6:	d16e      	bne.n	8006fb6 <_strtod_l+0x126>
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	ab1a      	add	r3, sp, #104	@ 0x68
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	4a8e      	ldr	r2, [pc, #568]	@ (800711c <_strtod_l+0x28c>)
 8006ee4:	9805      	ldr	r0, [sp, #20]
 8006ee6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006ee8:	a919      	add	r1, sp, #100	@ 0x64
 8006eea:	f001 fdf9 	bl	8008ae0 <__gethex>
 8006eee:	f010 060f 	ands.w	r6, r0, #15
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	d005      	beq.n	8006f02 <_strtod_l+0x72>
 8006ef6:	2e06      	cmp	r6, #6
 8006ef8:	d128      	bne.n	8006f4c <_strtod_l+0xbc>
 8006efa:	3501      	adds	r5, #1
 8006efc:	2300      	movs	r3, #0
 8006efe:	9519      	str	r5, [sp, #100]	@ 0x64
 8006f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 858e 	bne.w	8007a26 <_strtod_l+0xb96>
 8006f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f0c:	b1cb      	cbz	r3, 8006f42 <_strtod_l+0xb2>
 8006f0e:	4652      	mov	r2, sl
 8006f10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006f14:	ec43 2b10 	vmov	d0, r2, r3
 8006f18:	b01f      	add	sp, #124	@ 0x7c
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	2920      	cmp	r1, #32
 8006f20:	d1ce      	bne.n	8006ec0 <_strtod_l+0x30>
 8006f22:	3201      	adds	r2, #1
 8006f24:	e7c1      	b.n	8006eaa <_strtod_l+0x1a>
 8006f26:	292d      	cmp	r1, #45	@ 0x2d
 8006f28:	d1ca      	bne.n	8006ec0 <_strtod_l+0x30>
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f2e:	1c51      	adds	r1, r2, #1
 8006f30:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f32:	7852      	ldrb	r2, [r2, #1]
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	d1c5      	bne.n	8006ec4 <_strtod_l+0x34>
 8006f38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f040 8570 	bne.w	8007a22 <_strtod_l+0xb92>
 8006f42:	4652      	mov	r2, sl
 8006f44:	465b      	mov	r3, fp
 8006f46:	e7e5      	b.n	8006f14 <_strtod_l+0x84>
 8006f48:	2100      	movs	r1, #0
 8006f4a:	e7ef      	b.n	8006f2c <_strtod_l+0x9c>
 8006f4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f4e:	b13a      	cbz	r2, 8006f60 <_strtod_l+0xd0>
 8006f50:	2135      	movs	r1, #53	@ 0x35
 8006f52:	a81c      	add	r0, sp, #112	@ 0x70
 8006f54:	f003 f910 	bl	800a178 <__copybits>
 8006f58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f5a:	9805      	ldr	r0, [sp, #20]
 8006f5c:	f002 fcde 	bl	800991c <_Bfree>
 8006f60:	3e01      	subs	r6, #1
 8006f62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006f64:	2e04      	cmp	r6, #4
 8006f66:	d806      	bhi.n	8006f76 <_strtod_l+0xe6>
 8006f68:	e8df f006 	tbb	[pc, r6]
 8006f6c:	201d0314 	.word	0x201d0314
 8006f70:	14          	.byte	0x14
 8006f71:	00          	.byte	0x00
 8006f72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006f76:	05e1      	lsls	r1, r4, #23
 8006f78:	bf48      	it	mi
 8006f7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006f7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f82:	0d1b      	lsrs	r3, r3, #20
 8006f84:	051b      	lsls	r3, r3, #20
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1bb      	bne.n	8006f02 <_strtod_l+0x72>
 8006f8a:	f000 fea9 	bl	8007ce0 <__errno>
 8006f8e:	2322      	movs	r3, #34	@ 0x22
 8006f90:	6003      	str	r3, [r0, #0]
 8006f92:	e7b6      	b.n	8006f02 <_strtod_l+0x72>
 8006f94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006f98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006f9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fa0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006fa4:	e7e7      	b.n	8006f76 <_strtod_l+0xe6>
 8006fa6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007124 <_strtod_l+0x294>
 8006faa:	e7e4      	b.n	8006f76 <_strtod_l+0xe6>
 8006fac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006fb0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006fb4:	e7df      	b.n	8006f76 <_strtod_l+0xe6>
 8006fb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b30      	cmp	r3, #48	@ 0x30
 8006fc0:	d0f9      	beq.n	8006fb6 <_strtod_l+0x126>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d09d      	beq.n	8006f02 <_strtod_l+0x72>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fce:	2300      	movs	r3, #0
 8006fd0:	9308      	str	r3, [sp, #32]
 8006fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fd4:	461f      	mov	r7, r3
 8006fd6:	220a      	movs	r2, #10
 8006fd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006fda:	7805      	ldrb	r5, [r0, #0]
 8006fdc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006fe0:	b2d9      	uxtb	r1, r3
 8006fe2:	2909      	cmp	r1, #9
 8006fe4:	d928      	bls.n	8007038 <_strtod_l+0x1a8>
 8006fe6:	494e      	ldr	r1, [pc, #312]	@ (8007120 <_strtod_l+0x290>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f000 fe45 	bl	8007c78 <strncmp>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d032      	beq.n	8007058 <_strtod_l+0x1c8>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4681      	mov	r9, r0
 8006ff8:	463d      	mov	r5, r7
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2a65      	cmp	r2, #101	@ 0x65
 8006ffe:	d001      	beq.n	8007004 <_strtod_l+0x174>
 8007000:	2a45      	cmp	r2, #69	@ 0x45
 8007002:	d114      	bne.n	800702e <_strtod_l+0x19e>
 8007004:	b91d      	cbnz	r5, 800700e <_strtod_l+0x17e>
 8007006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007008:	4302      	orrs	r2, r0
 800700a:	d095      	beq.n	8006f38 <_strtod_l+0xa8>
 800700c:	2500      	movs	r5, #0
 800700e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007010:	1c62      	adds	r2, r4, #1
 8007012:	9219      	str	r2, [sp, #100]	@ 0x64
 8007014:	7862      	ldrb	r2, [r4, #1]
 8007016:	2a2b      	cmp	r2, #43	@ 0x2b
 8007018:	d077      	beq.n	800710a <_strtod_l+0x27a>
 800701a:	2a2d      	cmp	r2, #45	@ 0x2d
 800701c:	d07b      	beq.n	8007116 <_strtod_l+0x286>
 800701e:	f04f 0c00 	mov.w	ip, #0
 8007022:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007026:	2909      	cmp	r1, #9
 8007028:	f240 8082 	bls.w	8007130 <_strtod_l+0x2a0>
 800702c:	9419      	str	r4, [sp, #100]	@ 0x64
 800702e:	f04f 0800 	mov.w	r8, #0
 8007032:	e0a2      	b.n	800717a <_strtod_l+0x2ea>
 8007034:	2300      	movs	r3, #0
 8007036:	e7c7      	b.n	8006fc8 <_strtod_l+0x138>
 8007038:	2f08      	cmp	r7, #8
 800703a:	bfd5      	itete	le
 800703c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800703e:	9908      	ldrgt	r1, [sp, #32]
 8007040:	fb02 3301 	mlale	r3, r2, r1, r3
 8007044:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007048:	f100 0001 	add.w	r0, r0, #1
 800704c:	bfd4      	ite	le
 800704e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007050:	9308      	strgt	r3, [sp, #32]
 8007052:	3701      	adds	r7, #1
 8007054:	9019      	str	r0, [sp, #100]	@ 0x64
 8007056:	e7bf      	b.n	8006fd8 <_strtod_l+0x148>
 8007058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	9219      	str	r2, [sp, #100]	@ 0x64
 800705e:	785a      	ldrb	r2, [r3, #1]
 8007060:	b37f      	cbz	r7, 80070c2 <_strtod_l+0x232>
 8007062:	4681      	mov	r9, r0
 8007064:	463d      	mov	r5, r7
 8007066:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800706a:	2b09      	cmp	r3, #9
 800706c:	d912      	bls.n	8007094 <_strtod_l+0x204>
 800706e:	2301      	movs	r3, #1
 8007070:	e7c4      	b.n	8006ffc <_strtod_l+0x16c>
 8007072:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	9219      	str	r2, [sp, #100]	@ 0x64
 8007078:	785a      	ldrb	r2, [r3, #1]
 800707a:	3001      	adds	r0, #1
 800707c:	2a30      	cmp	r2, #48	@ 0x30
 800707e:	d0f8      	beq.n	8007072 <_strtod_l+0x1e2>
 8007080:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007084:	2b08      	cmp	r3, #8
 8007086:	f200 84d3 	bhi.w	8007a30 <_strtod_l+0xba0>
 800708a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800708c:	930c      	str	r3, [sp, #48]	@ 0x30
 800708e:	4681      	mov	r9, r0
 8007090:	2000      	movs	r0, #0
 8007092:	4605      	mov	r5, r0
 8007094:	3a30      	subs	r2, #48	@ 0x30
 8007096:	f100 0301 	add.w	r3, r0, #1
 800709a:	d02a      	beq.n	80070f2 <_strtod_l+0x262>
 800709c:	4499      	add	r9, r3
 800709e:	eb00 0c05 	add.w	ip, r0, r5
 80070a2:	462b      	mov	r3, r5
 80070a4:	210a      	movs	r1, #10
 80070a6:	4563      	cmp	r3, ip
 80070a8:	d10d      	bne.n	80070c6 <_strtod_l+0x236>
 80070aa:	1c69      	adds	r1, r5, #1
 80070ac:	4401      	add	r1, r0
 80070ae:	4428      	add	r0, r5
 80070b0:	2808      	cmp	r0, #8
 80070b2:	dc16      	bgt.n	80070e2 <_strtod_l+0x252>
 80070b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070b6:	230a      	movs	r3, #10
 80070b8:	fb03 2300 	mla	r3, r3, r0, r2
 80070bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80070be:	2300      	movs	r3, #0
 80070c0:	e018      	b.n	80070f4 <_strtod_l+0x264>
 80070c2:	4638      	mov	r0, r7
 80070c4:	e7da      	b.n	800707c <_strtod_l+0x1ec>
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	f103 0301 	add.w	r3, r3, #1
 80070cc:	dc03      	bgt.n	80070d6 <_strtod_l+0x246>
 80070ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80070d0:	434e      	muls	r6, r1
 80070d2:	960a      	str	r6, [sp, #40]	@ 0x28
 80070d4:	e7e7      	b.n	80070a6 <_strtod_l+0x216>
 80070d6:	2b10      	cmp	r3, #16
 80070d8:	bfde      	ittt	le
 80070da:	9e08      	ldrle	r6, [sp, #32]
 80070dc:	434e      	mulle	r6, r1
 80070de:	9608      	strle	r6, [sp, #32]
 80070e0:	e7e1      	b.n	80070a6 <_strtod_l+0x216>
 80070e2:	280f      	cmp	r0, #15
 80070e4:	dceb      	bgt.n	80070be <_strtod_l+0x22e>
 80070e6:	9808      	ldr	r0, [sp, #32]
 80070e8:	230a      	movs	r3, #10
 80070ea:	fb03 2300 	mla	r3, r3, r0, r2
 80070ee:	9308      	str	r3, [sp, #32]
 80070f0:	e7e5      	b.n	80070be <_strtod_l+0x22e>
 80070f2:	4629      	mov	r1, r5
 80070f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070f6:	1c50      	adds	r0, r2, #1
 80070f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80070fa:	7852      	ldrb	r2, [r2, #1]
 80070fc:	4618      	mov	r0, r3
 80070fe:	460d      	mov	r5, r1
 8007100:	e7b1      	b.n	8007066 <_strtod_l+0x1d6>
 8007102:	f04f 0900 	mov.w	r9, #0
 8007106:	2301      	movs	r3, #1
 8007108:	e77d      	b.n	8007006 <_strtod_l+0x176>
 800710a:	f04f 0c00 	mov.w	ip, #0
 800710e:	1ca2      	adds	r2, r4, #2
 8007110:	9219      	str	r2, [sp, #100]	@ 0x64
 8007112:	78a2      	ldrb	r2, [r4, #2]
 8007114:	e785      	b.n	8007022 <_strtod_l+0x192>
 8007116:	f04f 0c01 	mov.w	ip, #1
 800711a:	e7f8      	b.n	800710e <_strtod_l+0x27e>
 800711c:	0800aa1c 	.word	0x0800aa1c
 8007120:	0800aa05 	.word	0x0800aa05
 8007124:	7ff00000 	.word	0x7ff00000
 8007128:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800712a:	1c51      	adds	r1, r2, #1
 800712c:	9119      	str	r1, [sp, #100]	@ 0x64
 800712e:	7852      	ldrb	r2, [r2, #1]
 8007130:	2a30      	cmp	r2, #48	@ 0x30
 8007132:	d0f9      	beq.n	8007128 <_strtod_l+0x298>
 8007134:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007138:	2908      	cmp	r1, #8
 800713a:	f63f af78 	bhi.w	800702e <_strtod_l+0x19e>
 800713e:	3a30      	subs	r2, #48	@ 0x30
 8007140:	920e      	str	r2, [sp, #56]	@ 0x38
 8007142:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007144:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007146:	f04f 080a 	mov.w	r8, #10
 800714a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800714c:	1c56      	adds	r6, r2, #1
 800714e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007150:	7852      	ldrb	r2, [r2, #1]
 8007152:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007156:	f1be 0f09 	cmp.w	lr, #9
 800715a:	d939      	bls.n	80071d0 <_strtod_l+0x340>
 800715c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800715e:	1a76      	subs	r6, r6, r1
 8007160:	2e08      	cmp	r6, #8
 8007162:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007166:	dc03      	bgt.n	8007170 <_strtod_l+0x2e0>
 8007168:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800716a:	4588      	cmp	r8, r1
 800716c:	bfa8      	it	ge
 800716e:	4688      	movge	r8, r1
 8007170:	f1bc 0f00 	cmp.w	ip, #0
 8007174:	d001      	beq.n	800717a <_strtod_l+0x2ea>
 8007176:	f1c8 0800 	rsb	r8, r8, #0
 800717a:	2d00      	cmp	r5, #0
 800717c:	d14e      	bne.n	800721c <_strtod_l+0x38c>
 800717e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007180:	4308      	orrs	r0, r1
 8007182:	f47f aebe 	bne.w	8006f02 <_strtod_l+0x72>
 8007186:	2b00      	cmp	r3, #0
 8007188:	f47f aed6 	bne.w	8006f38 <_strtod_l+0xa8>
 800718c:	2a69      	cmp	r2, #105	@ 0x69
 800718e:	d028      	beq.n	80071e2 <_strtod_l+0x352>
 8007190:	dc25      	bgt.n	80071de <_strtod_l+0x34e>
 8007192:	2a49      	cmp	r2, #73	@ 0x49
 8007194:	d025      	beq.n	80071e2 <_strtod_l+0x352>
 8007196:	2a4e      	cmp	r2, #78	@ 0x4e
 8007198:	f47f aece 	bne.w	8006f38 <_strtod_l+0xa8>
 800719c:	499b      	ldr	r1, [pc, #620]	@ (800740c <_strtod_l+0x57c>)
 800719e:	a819      	add	r0, sp, #100	@ 0x64
 80071a0:	f001 fec0 	bl	8008f24 <__match>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f43f aec7 	beq.w	8006f38 <_strtod_l+0xa8>
 80071aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b28      	cmp	r3, #40	@ 0x28
 80071b0:	d12e      	bne.n	8007210 <_strtod_l+0x380>
 80071b2:	4997      	ldr	r1, [pc, #604]	@ (8007410 <_strtod_l+0x580>)
 80071b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80071b6:	a819      	add	r0, sp, #100	@ 0x64
 80071b8:	f001 fec8 	bl	8008f4c <__hexnan>
 80071bc:	2805      	cmp	r0, #5
 80071be:	d127      	bne.n	8007210 <_strtod_l+0x380>
 80071c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80071c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80071c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80071ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80071ce:	e698      	b.n	8006f02 <_strtod_l+0x72>
 80071d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80071d2:	fb08 2101 	mla	r1, r8, r1, r2
 80071d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80071da:	920e      	str	r2, [sp, #56]	@ 0x38
 80071dc:	e7b5      	b.n	800714a <_strtod_l+0x2ba>
 80071de:	2a6e      	cmp	r2, #110	@ 0x6e
 80071e0:	e7da      	b.n	8007198 <_strtod_l+0x308>
 80071e2:	498c      	ldr	r1, [pc, #560]	@ (8007414 <_strtod_l+0x584>)
 80071e4:	a819      	add	r0, sp, #100	@ 0x64
 80071e6:	f001 fe9d 	bl	8008f24 <__match>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f43f aea4 	beq.w	8006f38 <_strtod_l+0xa8>
 80071f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071f2:	4989      	ldr	r1, [pc, #548]	@ (8007418 <_strtod_l+0x588>)
 80071f4:	3b01      	subs	r3, #1
 80071f6:	a819      	add	r0, sp, #100	@ 0x64
 80071f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80071fa:	f001 fe93 	bl	8008f24 <__match>
 80071fe:	b910      	cbnz	r0, 8007206 <_strtod_l+0x376>
 8007200:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007202:	3301      	adds	r3, #1
 8007204:	9319      	str	r3, [sp, #100]	@ 0x64
 8007206:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007428 <_strtod_l+0x598>
 800720a:	f04f 0a00 	mov.w	sl, #0
 800720e:	e678      	b.n	8006f02 <_strtod_l+0x72>
 8007210:	4882      	ldr	r0, [pc, #520]	@ (800741c <_strtod_l+0x58c>)
 8007212:	f000 fda1 	bl	8007d58 <nan>
 8007216:	ec5b ab10 	vmov	sl, fp, d0
 800721a:	e672      	b.n	8006f02 <_strtod_l+0x72>
 800721c:	eba8 0309 	sub.w	r3, r8, r9
 8007220:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007222:	9309      	str	r3, [sp, #36]	@ 0x24
 8007224:	2f00      	cmp	r7, #0
 8007226:	bf08      	it	eq
 8007228:	462f      	moveq	r7, r5
 800722a:	2d10      	cmp	r5, #16
 800722c:	462c      	mov	r4, r5
 800722e:	bfa8      	it	ge
 8007230:	2410      	movge	r4, #16
 8007232:	f7f9 f98f 	bl	8000554 <__aeabi_ui2d>
 8007236:	2d09      	cmp	r5, #9
 8007238:	4682      	mov	sl, r0
 800723a:	468b      	mov	fp, r1
 800723c:	dc13      	bgt.n	8007266 <_strtod_l+0x3d6>
 800723e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007240:	2b00      	cmp	r3, #0
 8007242:	f43f ae5e 	beq.w	8006f02 <_strtod_l+0x72>
 8007246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007248:	dd78      	ble.n	800733c <_strtod_l+0x4ac>
 800724a:	2b16      	cmp	r3, #22
 800724c:	dc5f      	bgt.n	800730e <_strtod_l+0x47e>
 800724e:	4974      	ldr	r1, [pc, #464]	@ (8007420 <_strtod_l+0x590>)
 8007250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007258:	4652      	mov	r2, sl
 800725a:	465b      	mov	r3, fp
 800725c:	f7f9 f9f4 	bl	8000648 <__aeabi_dmul>
 8007260:	4682      	mov	sl, r0
 8007262:	468b      	mov	fp, r1
 8007264:	e64d      	b.n	8006f02 <_strtod_l+0x72>
 8007266:	4b6e      	ldr	r3, [pc, #440]	@ (8007420 <_strtod_l+0x590>)
 8007268:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800726c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007270:	f7f9 f9ea 	bl	8000648 <__aeabi_dmul>
 8007274:	4682      	mov	sl, r0
 8007276:	9808      	ldr	r0, [sp, #32]
 8007278:	468b      	mov	fp, r1
 800727a:	f7f9 f96b 	bl	8000554 <__aeabi_ui2d>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4650      	mov	r0, sl
 8007284:	4659      	mov	r1, fp
 8007286:	f7f9 f829 	bl	80002dc <__adddf3>
 800728a:	2d0f      	cmp	r5, #15
 800728c:	4682      	mov	sl, r0
 800728e:	468b      	mov	fp, r1
 8007290:	ddd5      	ble.n	800723e <_strtod_l+0x3ae>
 8007292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007294:	1b2c      	subs	r4, r5, r4
 8007296:	441c      	add	r4, r3
 8007298:	2c00      	cmp	r4, #0
 800729a:	f340 8096 	ble.w	80073ca <_strtod_l+0x53a>
 800729e:	f014 030f 	ands.w	r3, r4, #15
 80072a2:	d00a      	beq.n	80072ba <_strtod_l+0x42a>
 80072a4:	495e      	ldr	r1, [pc, #376]	@ (8007420 <_strtod_l+0x590>)
 80072a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072aa:	4652      	mov	r2, sl
 80072ac:	465b      	mov	r3, fp
 80072ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072b2:	f7f9 f9c9 	bl	8000648 <__aeabi_dmul>
 80072b6:	4682      	mov	sl, r0
 80072b8:	468b      	mov	fp, r1
 80072ba:	f034 040f 	bics.w	r4, r4, #15
 80072be:	d073      	beq.n	80073a8 <_strtod_l+0x518>
 80072c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80072c4:	dd48      	ble.n	8007358 <_strtod_l+0x4c8>
 80072c6:	2400      	movs	r4, #0
 80072c8:	46a0      	mov	r8, r4
 80072ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80072cc:	46a1      	mov	r9, r4
 80072ce:	9a05      	ldr	r2, [sp, #20]
 80072d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007428 <_strtod_l+0x598>
 80072d4:	2322      	movs	r3, #34	@ 0x22
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	f04f 0a00 	mov.w	sl, #0
 80072dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f43f ae0f 	beq.w	8006f02 <_strtod_l+0x72>
 80072e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072e6:	9805      	ldr	r0, [sp, #20]
 80072e8:	f002 fb18 	bl	800991c <_Bfree>
 80072ec:	9805      	ldr	r0, [sp, #20]
 80072ee:	4649      	mov	r1, r9
 80072f0:	f002 fb14 	bl	800991c <_Bfree>
 80072f4:	9805      	ldr	r0, [sp, #20]
 80072f6:	4641      	mov	r1, r8
 80072f8:	f002 fb10 	bl	800991c <_Bfree>
 80072fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072fe:	9805      	ldr	r0, [sp, #20]
 8007300:	f002 fb0c 	bl	800991c <_Bfree>
 8007304:	9805      	ldr	r0, [sp, #20]
 8007306:	4621      	mov	r1, r4
 8007308:	f002 fb08 	bl	800991c <_Bfree>
 800730c:	e5f9      	b.n	8006f02 <_strtod_l+0x72>
 800730e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007310:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007314:	4293      	cmp	r3, r2
 8007316:	dbbc      	blt.n	8007292 <_strtod_l+0x402>
 8007318:	4c41      	ldr	r4, [pc, #260]	@ (8007420 <_strtod_l+0x590>)
 800731a:	f1c5 050f 	rsb	r5, r5, #15
 800731e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007322:	4652      	mov	r2, sl
 8007324:	465b      	mov	r3, fp
 8007326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800732a:	f7f9 f98d 	bl	8000648 <__aeabi_dmul>
 800732e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007330:	1b5d      	subs	r5, r3, r5
 8007332:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007336:	e9d4 2300 	ldrd	r2, r3, [r4]
 800733a:	e78f      	b.n	800725c <_strtod_l+0x3cc>
 800733c:	3316      	adds	r3, #22
 800733e:	dba8      	blt.n	8007292 <_strtod_l+0x402>
 8007340:	4b37      	ldr	r3, [pc, #220]	@ (8007420 <_strtod_l+0x590>)
 8007342:	eba9 0808 	sub.w	r8, r9, r8
 8007346:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800734a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800734e:	4650      	mov	r0, sl
 8007350:	4659      	mov	r1, fp
 8007352:	f7f9 faa3 	bl	800089c <__aeabi_ddiv>
 8007356:	e783      	b.n	8007260 <_strtod_l+0x3d0>
 8007358:	4b32      	ldr	r3, [pc, #200]	@ (8007424 <_strtod_l+0x594>)
 800735a:	9308      	str	r3, [sp, #32]
 800735c:	2300      	movs	r3, #0
 800735e:	1124      	asrs	r4, r4, #4
 8007360:	4650      	mov	r0, sl
 8007362:	4659      	mov	r1, fp
 8007364:	461e      	mov	r6, r3
 8007366:	2c01      	cmp	r4, #1
 8007368:	dc21      	bgt.n	80073ae <_strtod_l+0x51e>
 800736a:	b10b      	cbz	r3, 8007370 <_strtod_l+0x4e0>
 800736c:	4682      	mov	sl, r0
 800736e:	468b      	mov	fp, r1
 8007370:	492c      	ldr	r1, [pc, #176]	@ (8007424 <_strtod_l+0x594>)
 8007372:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007376:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800737a:	4652      	mov	r2, sl
 800737c:	465b      	mov	r3, fp
 800737e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007382:	f7f9 f961 	bl	8000648 <__aeabi_dmul>
 8007386:	4b28      	ldr	r3, [pc, #160]	@ (8007428 <_strtod_l+0x598>)
 8007388:	460a      	mov	r2, r1
 800738a:	400b      	ands	r3, r1
 800738c:	4927      	ldr	r1, [pc, #156]	@ (800742c <_strtod_l+0x59c>)
 800738e:	428b      	cmp	r3, r1
 8007390:	4682      	mov	sl, r0
 8007392:	d898      	bhi.n	80072c6 <_strtod_l+0x436>
 8007394:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007398:	428b      	cmp	r3, r1
 800739a:	bf86      	itte	hi
 800739c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007430 <_strtod_l+0x5a0>
 80073a0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80073a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80073a8:	2300      	movs	r3, #0
 80073aa:	9308      	str	r3, [sp, #32]
 80073ac:	e07a      	b.n	80074a4 <_strtod_l+0x614>
 80073ae:	07e2      	lsls	r2, r4, #31
 80073b0:	d505      	bpl.n	80073be <_strtod_l+0x52e>
 80073b2:	9b08      	ldr	r3, [sp, #32]
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	f7f9 f946 	bl	8000648 <__aeabi_dmul>
 80073bc:	2301      	movs	r3, #1
 80073be:	9a08      	ldr	r2, [sp, #32]
 80073c0:	3208      	adds	r2, #8
 80073c2:	3601      	adds	r6, #1
 80073c4:	1064      	asrs	r4, r4, #1
 80073c6:	9208      	str	r2, [sp, #32]
 80073c8:	e7cd      	b.n	8007366 <_strtod_l+0x4d6>
 80073ca:	d0ed      	beq.n	80073a8 <_strtod_l+0x518>
 80073cc:	4264      	negs	r4, r4
 80073ce:	f014 020f 	ands.w	r2, r4, #15
 80073d2:	d00a      	beq.n	80073ea <_strtod_l+0x55a>
 80073d4:	4b12      	ldr	r3, [pc, #72]	@ (8007420 <_strtod_l+0x590>)
 80073d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073da:	4650      	mov	r0, sl
 80073dc:	4659      	mov	r1, fp
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f7f9 fa5b 	bl	800089c <__aeabi_ddiv>
 80073e6:	4682      	mov	sl, r0
 80073e8:	468b      	mov	fp, r1
 80073ea:	1124      	asrs	r4, r4, #4
 80073ec:	d0dc      	beq.n	80073a8 <_strtod_l+0x518>
 80073ee:	2c1f      	cmp	r4, #31
 80073f0:	dd20      	ble.n	8007434 <_strtod_l+0x5a4>
 80073f2:	2400      	movs	r4, #0
 80073f4:	46a0      	mov	r8, r4
 80073f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80073f8:	46a1      	mov	r9, r4
 80073fa:	9a05      	ldr	r2, [sp, #20]
 80073fc:	2322      	movs	r3, #34	@ 0x22
 80073fe:	f04f 0a00 	mov.w	sl, #0
 8007402:	f04f 0b00 	mov.w	fp, #0
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	e768      	b.n	80072dc <_strtod_l+0x44c>
 800740a:	bf00      	nop
 800740c:	0800a9d9 	.word	0x0800a9d9
 8007410:	0800aa08 	.word	0x0800aa08
 8007414:	0800a9d1 	.word	0x0800a9d1
 8007418:	0800ab64 	.word	0x0800ab64
 800741c:	0800adf3 	.word	0x0800adf3
 8007420:	0800acf0 	.word	0x0800acf0
 8007424:	0800acc8 	.word	0x0800acc8
 8007428:	7ff00000 	.word	0x7ff00000
 800742c:	7ca00000 	.word	0x7ca00000
 8007430:	7fefffff 	.word	0x7fefffff
 8007434:	f014 0310 	ands.w	r3, r4, #16
 8007438:	bf18      	it	ne
 800743a:	236a      	movne	r3, #106	@ 0x6a
 800743c:	4ea9      	ldr	r6, [pc, #676]	@ (80076e4 <_strtod_l+0x854>)
 800743e:	9308      	str	r3, [sp, #32]
 8007440:	4650      	mov	r0, sl
 8007442:	4659      	mov	r1, fp
 8007444:	2300      	movs	r3, #0
 8007446:	07e2      	lsls	r2, r4, #31
 8007448:	d504      	bpl.n	8007454 <_strtod_l+0x5c4>
 800744a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800744e:	f7f9 f8fb 	bl	8000648 <__aeabi_dmul>
 8007452:	2301      	movs	r3, #1
 8007454:	1064      	asrs	r4, r4, #1
 8007456:	f106 0608 	add.w	r6, r6, #8
 800745a:	d1f4      	bne.n	8007446 <_strtod_l+0x5b6>
 800745c:	b10b      	cbz	r3, 8007462 <_strtod_l+0x5d2>
 800745e:	4682      	mov	sl, r0
 8007460:	468b      	mov	fp, r1
 8007462:	9b08      	ldr	r3, [sp, #32]
 8007464:	b1b3      	cbz	r3, 8007494 <_strtod_l+0x604>
 8007466:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800746a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800746e:	2b00      	cmp	r3, #0
 8007470:	4659      	mov	r1, fp
 8007472:	dd0f      	ble.n	8007494 <_strtod_l+0x604>
 8007474:	2b1f      	cmp	r3, #31
 8007476:	dd55      	ble.n	8007524 <_strtod_l+0x694>
 8007478:	2b34      	cmp	r3, #52	@ 0x34
 800747a:	bfde      	ittt	le
 800747c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007480:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007484:	4093      	lslle	r3, r2
 8007486:	f04f 0a00 	mov.w	sl, #0
 800748a:	bfcc      	ite	gt
 800748c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007490:	ea03 0b01 	andle.w	fp, r3, r1
 8007494:	2200      	movs	r2, #0
 8007496:	2300      	movs	r3, #0
 8007498:	4650      	mov	r0, sl
 800749a:	4659      	mov	r1, fp
 800749c:	f7f9 fb3c 	bl	8000b18 <__aeabi_dcmpeq>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d1a6      	bne.n	80073f2 <_strtod_l+0x562>
 80074a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80074aa:	9805      	ldr	r0, [sp, #20]
 80074ac:	462b      	mov	r3, r5
 80074ae:	463a      	mov	r2, r7
 80074b0:	f002 fa9c 	bl	80099ec <__s2b>
 80074b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f43f af05 	beq.w	80072c6 <_strtod_l+0x436>
 80074bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074be:	2a00      	cmp	r2, #0
 80074c0:	eba9 0308 	sub.w	r3, r9, r8
 80074c4:	bfa8      	it	ge
 80074c6:	2300      	movge	r3, #0
 80074c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80074ca:	2400      	movs	r4, #0
 80074cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80074d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80074d2:	46a0      	mov	r8, r4
 80074d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d6:	9805      	ldr	r0, [sp, #20]
 80074d8:	6859      	ldr	r1, [r3, #4]
 80074da:	f002 f9df 	bl	800989c <_Balloc>
 80074de:	4681      	mov	r9, r0
 80074e0:	2800      	cmp	r0, #0
 80074e2:	f43f aef4 	beq.w	80072ce <_strtod_l+0x43e>
 80074e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	3202      	adds	r2, #2
 80074ec:	f103 010c 	add.w	r1, r3, #12
 80074f0:	0092      	lsls	r2, r2, #2
 80074f2:	300c      	adds	r0, #12
 80074f4:	f000 fc21 	bl	8007d3a <memcpy>
 80074f8:	ec4b ab10 	vmov	d0, sl, fp
 80074fc:	9805      	ldr	r0, [sp, #20]
 80074fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8007500:	a91b      	add	r1, sp, #108	@ 0x6c
 8007502:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007506:	f002 fdad 	bl	800a064 <__d2b>
 800750a:	901a      	str	r0, [sp, #104]	@ 0x68
 800750c:	2800      	cmp	r0, #0
 800750e:	f43f aede 	beq.w	80072ce <_strtod_l+0x43e>
 8007512:	9805      	ldr	r0, [sp, #20]
 8007514:	2101      	movs	r1, #1
 8007516:	f002 faff 	bl	8009b18 <__i2b>
 800751a:	4680      	mov	r8, r0
 800751c:	b948      	cbnz	r0, 8007532 <_strtod_l+0x6a2>
 800751e:	f04f 0800 	mov.w	r8, #0
 8007522:	e6d4      	b.n	80072ce <_strtod_l+0x43e>
 8007524:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	ea03 0a0a 	and.w	sl, r3, sl
 8007530:	e7b0      	b.n	8007494 <_strtod_l+0x604>
 8007532:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007534:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007536:	2d00      	cmp	r5, #0
 8007538:	bfab      	itete	ge
 800753a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800753c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800753e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007540:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007542:	bfac      	ite	ge
 8007544:	18ef      	addge	r7, r5, r3
 8007546:	1b5e      	sublt	r6, r3, r5
 8007548:	9b08      	ldr	r3, [sp, #32]
 800754a:	1aed      	subs	r5, r5, r3
 800754c:	4415      	add	r5, r2
 800754e:	4b66      	ldr	r3, [pc, #408]	@ (80076e8 <_strtod_l+0x858>)
 8007550:	3d01      	subs	r5, #1
 8007552:	429d      	cmp	r5, r3
 8007554:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007558:	da50      	bge.n	80075fc <_strtod_l+0x76c>
 800755a:	1b5b      	subs	r3, r3, r5
 800755c:	2b1f      	cmp	r3, #31
 800755e:	eba2 0203 	sub.w	r2, r2, r3
 8007562:	f04f 0101 	mov.w	r1, #1
 8007566:	dc3d      	bgt.n	80075e4 <_strtod_l+0x754>
 8007568:	fa01 f303 	lsl.w	r3, r1, r3
 800756c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800756e:	2300      	movs	r3, #0
 8007570:	9310      	str	r3, [sp, #64]	@ 0x40
 8007572:	18bd      	adds	r5, r7, r2
 8007574:	9b08      	ldr	r3, [sp, #32]
 8007576:	42af      	cmp	r7, r5
 8007578:	4416      	add	r6, r2
 800757a:	441e      	add	r6, r3
 800757c:	463b      	mov	r3, r7
 800757e:	bfa8      	it	ge
 8007580:	462b      	movge	r3, r5
 8007582:	42b3      	cmp	r3, r6
 8007584:	bfa8      	it	ge
 8007586:	4633      	movge	r3, r6
 8007588:	2b00      	cmp	r3, #0
 800758a:	bfc2      	ittt	gt
 800758c:	1aed      	subgt	r5, r5, r3
 800758e:	1af6      	subgt	r6, r6, r3
 8007590:	1aff      	subgt	r7, r7, r3
 8007592:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007594:	2b00      	cmp	r3, #0
 8007596:	dd16      	ble.n	80075c6 <_strtod_l+0x736>
 8007598:	4641      	mov	r1, r8
 800759a:	9805      	ldr	r0, [sp, #20]
 800759c:	461a      	mov	r2, r3
 800759e:	f002 fb7b 	bl	8009c98 <__pow5mult>
 80075a2:	4680      	mov	r8, r0
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d0ba      	beq.n	800751e <_strtod_l+0x68e>
 80075a8:	4601      	mov	r1, r0
 80075aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075ac:	9805      	ldr	r0, [sp, #20]
 80075ae:	f002 fac9 	bl	8009b44 <__multiply>
 80075b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80075b4:	2800      	cmp	r0, #0
 80075b6:	f43f ae8a 	beq.w	80072ce <_strtod_l+0x43e>
 80075ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075bc:	9805      	ldr	r0, [sp, #20]
 80075be:	f002 f9ad 	bl	800991c <_Bfree>
 80075c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	dc1d      	bgt.n	8007606 <_strtod_l+0x776>
 80075ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dd23      	ble.n	8007618 <_strtod_l+0x788>
 80075d0:	4649      	mov	r1, r9
 80075d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80075d4:	9805      	ldr	r0, [sp, #20]
 80075d6:	f002 fb5f 	bl	8009c98 <__pow5mult>
 80075da:	4681      	mov	r9, r0
 80075dc:	b9e0      	cbnz	r0, 8007618 <_strtod_l+0x788>
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	e674      	b.n	80072ce <_strtod_l+0x43e>
 80075e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80075e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80075ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80075f0:	35e2      	adds	r5, #226	@ 0xe2
 80075f2:	fa01 f305 	lsl.w	r3, r1, r5
 80075f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80075f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80075fa:	e7ba      	b.n	8007572 <_strtod_l+0x6e2>
 80075fc:	2300      	movs	r3, #0
 80075fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007600:	2301      	movs	r3, #1
 8007602:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007604:	e7b5      	b.n	8007572 <_strtod_l+0x6e2>
 8007606:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007608:	9805      	ldr	r0, [sp, #20]
 800760a:	462a      	mov	r2, r5
 800760c:	f002 fb9e 	bl	8009d4c <__lshift>
 8007610:	901a      	str	r0, [sp, #104]	@ 0x68
 8007612:	2800      	cmp	r0, #0
 8007614:	d1d9      	bne.n	80075ca <_strtod_l+0x73a>
 8007616:	e65a      	b.n	80072ce <_strtod_l+0x43e>
 8007618:	2e00      	cmp	r6, #0
 800761a:	dd07      	ble.n	800762c <_strtod_l+0x79c>
 800761c:	4649      	mov	r1, r9
 800761e:	9805      	ldr	r0, [sp, #20]
 8007620:	4632      	mov	r2, r6
 8007622:	f002 fb93 	bl	8009d4c <__lshift>
 8007626:	4681      	mov	r9, r0
 8007628:	2800      	cmp	r0, #0
 800762a:	d0d8      	beq.n	80075de <_strtod_l+0x74e>
 800762c:	2f00      	cmp	r7, #0
 800762e:	dd08      	ble.n	8007642 <_strtod_l+0x7b2>
 8007630:	4641      	mov	r1, r8
 8007632:	9805      	ldr	r0, [sp, #20]
 8007634:	463a      	mov	r2, r7
 8007636:	f002 fb89 	bl	8009d4c <__lshift>
 800763a:	4680      	mov	r8, r0
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f ae46 	beq.w	80072ce <_strtod_l+0x43e>
 8007642:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007644:	9805      	ldr	r0, [sp, #20]
 8007646:	464a      	mov	r2, r9
 8007648:	f002 fc08 	bl	8009e5c <__mdiff>
 800764c:	4604      	mov	r4, r0
 800764e:	2800      	cmp	r0, #0
 8007650:	f43f ae3d 	beq.w	80072ce <_strtod_l+0x43e>
 8007654:	68c3      	ldr	r3, [r0, #12]
 8007656:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007658:	2300      	movs	r3, #0
 800765a:	60c3      	str	r3, [r0, #12]
 800765c:	4641      	mov	r1, r8
 800765e:	f002 fbe1 	bl	8009e24 <__mcmp>
 8007662:	2800      	cmp	r0, #0
 8007664:	da46      	bge.n	80076f4 <_strtod_l+0x864>
 8007666:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007668:	ea53 030a 	orrs.w	r3, r3, sl
 800766c:	d16c      	bne.n	8007748 <_strtod_l+0x8b8>
 800766e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007672:	2b00      	cmp	r3, #0
 8007674:	d168      	bne.n	8007748 <_strtod_l+0x8b8>
 8007676:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800767a:	0d1b      	lsrs	r3, r3, #20
 800767c:	051b      	lsls	r3, r3, #20
 800767e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007682:	d961      	bls.n	8007748 <_strtod_l+0x8b8>
 8007684:	6963      	ldr	r3, [r4, #20]
 8007686:	b913      	cbnz	r3, 800768e <_strtod_l+0x7fe>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	2b01      	cmp	r3, #1
 800768c:	dd5c      	ble.n	8007748 <_strtod_l+0x8b8>
 800768e:	4621      	mov	r1, r4
 8007690:	2201      	movs	r2, #1
 8007692:	9805      	ldr	r0, [sp, #20]
 8007694:	f002 fb5a 	bl	8009d4c <__lshift>
 8007698:	4641      	mov	r1, r8
 800769a:	4604      	mov	r4, r0
 800769c:	f002 fbc2 	bl	8009e24 <__mcmp>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	dd51      	ble.n	8007748 <_strtod_l+0x8b8>
 80076a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076a8:	9a08      	ldr	r2, [sp, #32]
 80076aa:	0d1b      	lsrs	r3, r3, #20
 80076ac:	051b      	lsls	r3, r3, #20
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	d06b      	beq.n	800778a <_strtod_l+0x8fa>
 80076b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076b6:	d868      	bhi.n	800778a <_strtod_l+0x8fa>
 80076b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80076bc:	f67f ae9d 	bls.w	80073fa <_strtod_l+0x56a>
 80076c0:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <_strtod_l+0x85c>)
 80076c2:	4650      	mov	r0, sl
 80076c4:	4659      	mov	r1, fp
 80076c6:	2200      	movs	r2, #0
 80076c8:	f7f8 ffbe 	bl	8000648 <__aeabi_dmul>
 80076cc:	4b08      	ldr	r3, [pc, #32]	@ (80076f0 <_strtod_l+0x860>)
 80076ce:	400b      	ands	r3, r1
 80076d0:	4682      	mov	sl, r0
 80076d2:	468b      	mov	fp, r1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f47f ae05 	bne.w	80072e4 <_strtod_l+0x454>
 80076da:	9a05      	ldr	r2, [sp, #20]
 80076dc:	2322      	movs	r3, #34	@ 0x22
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	e600      	b.n	80072e4 <_strtod_l+0x454>
 80076e2:	bf00      	nop
 80076e4:	0800aa30 	.word	0x0800aa30
 80076e8:	fffffc02 	.word	0xfffffc02
 80076ec:	39500000 	.word	0x39500000
 80076f0:	7ff00000 	.word	0x7ff00000
 80076f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80076f8:	d165      	bne.n	80077c6 <_strtod_l+0x936>
 80076fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80076fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007700:	b35a      	cbz	r2, 800775a <_strtod_l+0x8ca>
 8007702:	4a9f      	ldr	r2, [pc, #636]	@ (8007980 <_strtod_l+0xaf0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d12b      	bne.n	8007760 <_strtod_l+0x8d0>
 8007708:	9b08      	ldr	r3, [sp, #32]
 800770a:	4651      	mov	r1, sl
 800770c:	b303      	cbz	r3, 8007750 <_strtod_l+0x8c0>
 800770e:	4b9d      	ldr	r3, [pc, #628]	@ (8007984 <_strtod_l+0xaf4>)
 8007710:	465a      	mov	r2, fp
 8007712:	4013      	ands	r3, r2
 8007714:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800771c:	d81b      	bhi.n	8007756 <_strtod_l+0x8c6>
 800771e:	0d1b      	lsrs	r3, r3, #20
 8007720:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	4299      	cmp	r1, r3
 800772a:	d119      	bne.n	8007760 <_strtod_l+0x8d0>
 800772c:	4b96      	ldr	r3, [pc, #600]	@ (8007988 <_strtod_l+0xaf8>)
 800772e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007730:	429a      	cmp	r2, r3
 8007732:	d102      	bne.n	800773a <_strtod_l+0x8aa>
 8007734:	3101      	adds	r1, #1
 8007736:	f43f adca 	beq.w	80072ce <_strtod_l+0x43e>
 800773a:	4b92      	ldr	r3, [pc, #584]	@ (8007984 <_strtod_l+0xaf4>)
 800773c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800773e:	401a      	ands	r2, r3
 8007740:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007744:	f04f 0a00 	mov.w	sl, #0
 8007748:	9b08      	ldr	r3, [sp, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1b8      	bne.n	80076c0 <_strtod_l+0x830>
 800774e:	e5c9      	b.n	80072e4 <_strtod_l+0x454>
 8007750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007754:	e7e8      	b.n	8007728 <_strtod_l+0x898>
 8007756:	4613      	mov	r3, r2
 8007758:	e7e6      	b.n	8007728 <_strtod_l+0x898>
 800775a:	ea53 030a 	orrs.w	r3, r3, sl
 800775e:	d0a1      	beq.n	80076a4 <_strtod_l+0x814>
 8007760:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007762:	b1db      	cbz	r3, 800779c <_strtod_l+0x90c>
 8007764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007766:	4213      	tst	r3, r2
 8007768:	d0ee      	beq.n	8007748 <_strtod_l+0x8b8>
 800776a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800776c:	9a08      	ldr	r2, [sp, #32]
 800776e:	4650      	mov	r0, sl
 8007770:	4659      	mov	r1, fp
 8007772:	b1bb      	cbz	r3, 80077a4 <_strtod_l+0x914>
 8007774:	f7ff fb6e 	bl	8006e54 <sulp>
 8007778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800777c:	ec53 2b10 	vmov	r2, r3, d0
 8007780:	f7f8 fdac 	bl	80002dc <__adddf3>
 8007784:	4682      	mov	sl, r0
 8007786:	468b      	mov	fp, r1
 8007788:	e7de      	b.n	8007748 <_strtod_l+0x8b8>
 800778a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800778e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007792:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007796:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800779a:	e7d5      	b.n	8007748 <_strtod_l+0x8b8>
 800779c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800779e:	ea13 0f0a 	tst.w	r3, sl
 80077a2:	e7e1      	b.n	8007768 <_strtod_l+0x8d8>
 80077a4:	f7ff fb56 	bl	8006e54 <sulp>
 80077a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ac:	ec53 2b10 	vmov	r2, r3, d0
 80077b0:	f7f8 fd92 	bl	80002d8 <__aeabi_dsub>
 80077b4:	2200      	movs	r2, #0
 80077b6:	2300      	movs	r3, #0
 80077b8:	4682      	mov	sl, r0
 80077ba:	468b      	mov	fp, r1
 80077bc:	f7f9 f9ac 	bl	8000b18 <__aeabi_dcmpeq>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d0c1      	beq.n	8007748 <_strtod_l+0x8b8>
 80077c4:	e619      	b.n	80073fa <_strtod_l+0x56a>
 80077c6:	4641      	mov	r1, r8
 80077c8:	4620      	mov	r0, r4
 80077ca:	f002 fca3 	bl	800a114 <__ratio>
 80077ce:	ec57 6b10 	vmov	r6, r7, d0
 80077d2:	2200      	movs	r2, #0
 80077d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f9 f9b0 	bl	8000b40 <__aeabi_dcmple>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d06f      	beq.n	80078c4 <_strtod_l+0xa34>
 80077e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d17a      	bne.n	80078e0 <_strtod_l+0xa50>
 80077ea:	f1ba 0f00 	cmp.w	sl, #0
 80077ee:	d158      	bne.n	80078a2 <_strtod_l+0xa12>
 80077f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d15a      	bne.n	80078b0 <_strtod_l+0xa20>
 80077fa:	4b64      	ldr	r3, [pc, #400]	@ (800798c <_strtod_l+0xafc>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	4630      	mov	r0, r6
 8007800:	4639      	mov	r1, r7
 8007802:	f7f9 f993 	bl	8000b2c <__aeabi_dcmplt>
 8007806:	2800      	cmp	r0, #0
 8007808:	d159      	bne.n	80078be <_strtod_l+0xa2e>
 800780a:	4630      	mov	r0, r6
 800780c:	4639      	mov	r1, r7
 800780e:	4b60      	ldr	r3, [pc, #384]	@ (8007990 <_strtod_l+0xb00>)
 8007810:	2200      	movs	r2, #0
 8007812:	f7f8 ff19 	bl	8000648 <__aeabi_dmul>
 8007816:	4606      	mov	r6, r0
 8007818:	460f      	mov	r7, r1
 800781a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800781e:	9606      	str	r6, [sp, #24]
 8007820:	9307      	str	r3, [sp, #28]
 8007822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007826:	4d57      	ldr	r5, [pc, #348]	@ (8007984 <_strtod_l+0xaf4>)
 8007828:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800782c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800782e:	401d      	ands	r5, r3
 8007830:	4b58      	ldr	r3, [pc, #352]	@ (8007994 <_strtod_l+0xb04>)
 8007832:	429d      	cmp	r5, r3
 8007834:	f040 80b2 	bne.w	800799c <_strtod_l+0xb0c>
 8007838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800783e:	ec4b ab10 	vmov	d0, sl, fp
 8007842:	f002 fb9f 	bl	8009f84 <__ulp>
 8007846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800784a:	ec51 0b10 	vmov	r0, r1, d0
 800784e:	f7f8 fefb 	bl	8000648 <__aeabi_dmul>
 8007852:	4652      	mov	r2, sl
 8007854:	465b      	mov	r3, fp
 8007856:	f7f8 fd41 	bl	80002dc <__adddf3>
 800785a:	460b      	mov	r3, r1
 800785c:	4949      	ldr	r1, [pc, #292]	@ (8007984 <_strtod_l+0xaf4>)
 800785e:	4a4e      	ldr	r2, [pc, #312]	@ (8007998 <_strtod_l+0xb08>)
 8007860:	4019      	ands	r1, r3
 8007862:	4291      	cmp	r1, r2
 8007864:	4682      	mov	sl, r0
 8007866:	d942      	bls.n	80078ee <_strtod_l+0xa5e>
 8007868:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800786a:	4b47      	ldr	r3, [pc, #284]	@ (8007988 <_strtod_l+0xaf8>)
 800786c:	429a      	cmp	r2, r3
 800786e:	d103      	bne.n	8007878 <_strtod_l+0x9e8>
 8007870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007872:	3301      	adds	r3, #1
 8007874:	f43f ad2b 	beq.w	80072ce <_strtod_l+0x43e>
 8007878:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007988 <_strtod_l+0xaf8>
 800787c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007880:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007882:	9805      	ldr	r0, [sp, #20]
 8007884:	f002 f84a 	bl	800991c <_Bfree>
 8007888:	9805      	ldr	r0, [sp, #20]
 800788a:	4649      	mov	r1, r9
 800788c:	f002 f846 	bl	800991c <_Bfree>
 8007890:	9805      	ldr	r0, [sp, #20]
 8007892:	4641      	mov	r1, r8
 8007894:	f002 f842 	bl	800991c <_Bfree>
 8007898:	9805      	ldr	r0, [sp, #20]
 800789a:	4621      	mov	r1, r4
 800789c:	f002 f83e 	bl	800991c <_Bfree>
 80078a0:	e618      	b.n	80074d4 <_strtod_l+0x644>
 80078a2:	f1ba 0f01 	cmp.w	sl, #1
 80078a6:	d103      	bne.n	80078b0 <_strtod_l+0xa20>
 80078a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f43f ada5 	beq.w	80073fa <_strtod_l+0x56a>
 80078b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007960 <_strtod_l+0xad0>
 80078b4:	4f35      	ldr	r7, [pc, #212]	@ (800798c <_strtod_l+0xafc>)
 80078b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078ba:	2600      	movs	r6, #0
 80078bc:	e7b1      	b.n	8007822 <_strtod_l+0x992>
 80078be:	4f34      	ldr	r7, [pc, #208]	@ (8007990 <_strtod_l+0xb00>)
 80078c0:	2600      	movs	r6, #0
 80078c2:	e7aa      	b.n	800781a <_strtod_l+0x98a>
 80078c4:	4b32      	ldr	r3, [pc, #200]	@ (8007990 <_strtod_l+0xb00>)
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	2200      	movs	r2, #0
 80078cc:	f7f8 febc 	bl	8000648 <__aeabi_dmul>
 80078d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d2:	4606      	mov	r6, r0
 80078d4:	460f      	mov	r7, r1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d09f      	beq.n	800781a <_strtod_l+0x98a>
 80078da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80078de:	e7a0      	b.n	8007822 <_strtod_l+0x992>
 80078e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007968 <_strtod_l+0xad8>
 80078e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078e8:	ec57 6b17 	vmov	r6, r7, d7
 80078ec:	e799      	b.n	8007822 <_strtod_l+0x992>
 80078ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80078f2:	9b08      	ldr	r3, [sp, #32]
 80078f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1c1      	bne.n	8007880 <_strtod_l+0x9f0>
 80078fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007900:	0d1b      	lsrs	r3, r3, #20
 8007902:	051b      	lsls	r3, r3, #20
 8007904:	429d      	cmp	r5, r3
 8007906:	d1bb      	bne.n	8007880 <_strtod_l+0x9f0>
 8007908:	4630      	mov	r0, r6
 800790a:	4639      	mov	r1, r7
 800790c:	f7f9 f9fc 	bl	8000d08 <__aeabi_d2lz>
 8007910:	f7f8 fe6c 	bl	80005ec <__aeabi_l2d>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4630      	mov	r0, r6
 800791a:	4639      	mov	r1, r7
 800791c:	f7f8 fcdc 	bl	80002d8 <__aeabi_dsub>
 8007920:	460b      	mov	r3, r1
 8007922:	4602      	mov	r2, r0
 8007924:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007928:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800792c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800792e:	ea46 060a 	orr.w	r6, r6, sl
 8007932:	431e      	orrs	r6, r3
 8007934:	d06f      	beq.n	8007a16 <_strtod_l+0xb86>
 8007936:	a30e      	add	r3, pc, #56	@ (adr r3, 8007970 <_strtod_l+0xae0>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f7f9 f8f6 	bl	8000b2c <__aeabi_dcmplt>
 8007940:	2800      	cmp	r0, #0
 8007942:	f47f accf 	bne.w	80072e4 <_strtod_l+0x454>
 8007946:	a30c      	add	r3, pc, #48	@ (adr r3, 8007978 <_strtod_l+0xae8>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007950:	f7f9 f90a 	bl	8000b68 <__aeabi_dcmpgt>
 8007954:	2800      	cmp	r0, #0
 8007956:	d093      	beq.n	8007880 <_strtod_l+0x9f0>
 8007958:	e4c4      	b.n	80072e4 <_strtod_l+0x454>
 800795a:	bf00      	nop
 800795c:	f3af 8000 	nop.w
 8007960:	00000000 	.word	0x00000000
 8007964:	bff00000 	.word	0xbff00000
 8007968:	00000000 	.word	0x00000000
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	94a03595 	.word	0x94a03595
 8007974:	3fdfffff 	.word	0x3fdfffff
 8007978:	35afe535 	.word	0x35afe535
 800797c:	3fe00000 	.word	0x3fe00000
 8007980:	000fffff 	.word	0x000fffff
 8007984:	7ff00000 	.word	0x7ff00000
 8007988:	7fefffff 	.word	0x7fefffff
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	3fe00000 	.word	0x3fe00000
 8007994:	7fe00000 	.word	0x7fe00000
 8007998:	7c9fffff 	.word	0x7c9fffff
 800799c:	9b08      	ldr	r3, [sp, #32]
 800799e:	b323      	cbz	r3, 80079ea <_strtod_l+0xb5a>
 80079a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80079a4:	d821      	bhi.n	80079ea <_strtod_l+0xb5a>
 80079a6:	a328      	add	r3, pc, #160	@ (adr r3, 8007a48 <_strtod_l+0xbb8>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	4630      	mov	r0, r6
 80079ae:	4639      	mov	r1, r7
 80079b0:	f7f9 f8c6 	bl	8000b40 <__aeabi_dcmple>
 80079b4:	b1a0      	cbz	r0, 80079e0 <_strtod_l+0xb50>
 80079b6:	4639      	mov	r1, r7
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7f9 f91d 	bl	8000bf8 <__aeabi_d2uiz>
 80079be:	2801      	cmp	r0, #1
 80079c0:	bf38      	it	cc
 80079c2:	2001      	movcc	r0, #1
 80079c4:	f7f8 fdc6 	bl	8000554 <__aeabi_ui2d>
 80079c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ca:	4606      	mov	r6, r0
 80079cc:	460f      	mov	r7, r1
 80079ce:	b9fb      	cbnz	r3, 8007a10 <_strtod_l+0xb80>
 80079d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80079d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80079d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80079d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80079dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80079e6:	1b5b      	subs	r3, r3, r5
 80079e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80079ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80079ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80079f2:	f002 fac7 	bl	8009f84 <__ulp>
 80079f6:	4650      	mov	r0, sl
 80079f8:	ec53 2b10 	vmov	r2, r3, d0
 80079fc:	4659      	mov	r1, fp
 80079fe:	f7f8 fe23 	bl	8000648 <__aeabi_dmul>
 8007a02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a06:	f7f8 fc69 	bl	80002dc <__adddf3>
 8007a0a:	4682      	mov	sl, r0
 8007a0c:	468b      	mov	fp, r1
 8007a0e:	e770      	b.n	80078f2 <_strtod_l+0xa62>
 8007a10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007a14:	e7e0      	b.n	80079d8 <_strtod_l+0xb48>
 8007a16:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a50 <_strtod_l+0xbc0>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f7f9 f886 	bl	8000b2c <__aeabi_dcmplt>
 8007a20:	e798      	b.n	8007954 <_strtod_l+0xac4>
 8007a22:	2300      	movs	r3, #0
 8007a24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007a28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	f7ff ba6d 	b.w	8006f0a <_strtod_l+0x7a>
 8007a30:	2a65      	cmp	r2, #101	@ 0x65
 8007a32:	f43f ab66 	beq.w	8007102 <_strtod_l+0x272>
 8007a36:	2a45      	cmp	r2, #69	@ 0x45
 8007a38:	f43f ab63 	beq.w	8007102 <_strtod_l+0x272>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f7ff bb9e 	b.w	800717e <_strtod_l+0x2ee>
 8007a42:	bf00      	nop
 8007a44:	f3af 8000 	nop.w
 8007a48:	ffc00000 	.word	0xffc00000
 8007a4c:	41dfffff 	.word	0x41dfffff
 8007a50:	94a03595 	.word	0x94a03595
 8007a54:	3fcfffff 	.word	0x3fcfffff

08007a58 <_strtod_r>:
 8007a58:	4b01      	ldr	r3, [pc, #4]	@ (8007a60 <_strtod_r+0x8>)
 8007a5a:	f7ff ba19 	b.w	8006e90 <_strtod_l>
 8007a5e:	bf00      	nop
 8007a60:	20000018 	.word	0x20000018

08007a64 <_strtol_l.constprop.0>:
 8007a64:	2b24      	cmp	r3, #36	@ 0x24
 8007a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a6a:	4686      	mov	lr, r0
 8007a6c:	4690      	mov	r8, r2
 8007a6e:	d801      	bhi.n	8007a74 <_strtol_l.constprop.0+0x10>
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d106      	bne.n	8007a82 <_strtol_l.constprop.0+0x1e>
 8007a74:	f000 f934 	bl	8007ce0 <__errno>
 8007a78:	2316      	movs	r3, #22
 8007a7a:	6003      	str	r3, [r0, #0]
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a82:	4834      	ldr	r0, [pc, #208]	@ (8007b54 <_strtol_l.constprop.0+0xf0>)
 8007a84:	460d      	mov	r5, r1
 8007a86:	462a      	mov	r2, r5
 8007a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a8c:	5d06      	ldrb	r6, [r0, r4]
 8007a8e:	f016 0608 	ands.w	r6, r6, #8
 8007a92:	d1f8      	bne.n	8007a86 <_strtol_l.constprop.0+0x22>
 8007a94:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a96:	d12d      	bne.n	8007af4 <_strtol_l.constprop.0+0x90>
 8007a98:	782c      	ldrb	r4, [r5, #0]
 8007a9a:	2601      	movs	r6, #1
 8007a9c:	1c95      	adds	r5, r2, #2
 8007a9e:	f033 0210 	bics.w	r2, r3, #16
 8007aa2:	d109      	bne.n	8007ab8 <_strtol_l.constprop.0+0x54>
 8007aa4:	2c30      	cmp	r4, #48	@ 0x30
 8007aa6:	d12a      	bne.n	8007afe <_strtol_l.constprop.0+0x9a>
 8007aa8:	782a      	ldrb	r2, [r5, #0]
 8007aaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007aae:	2a58      	cmp	r2, #88	@ 0x58
 8007ab0:	d125      	bne.n	8007afe <_strtol_l.constprop.0+0x9a>
 8007ab2:	786c      	ldrb	r4, [r5, #1]
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	3502      	adds	r5, #2
 8007ab8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007abc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	fbbc f9f3 	udiv	r9, ip, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007acc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007ad0:	2f09      	cmp	r7, #9
 8007ad2:	d81b      	bhi.n	8007b0c <_strtol_l.constprop.0+0xa8>
 8007ad4:	463c      	mov	r4, r7
 8007ad6:	42a3      	cmp	r3, r4
 8007ad8:	dd27      	ble.n	8007b2a <_strtol_l.constprop.0+0xc6>
 8007ada:	1c57      	adds	r7, r2, #1
 8007adc:	d007      	beq.n	8007aee <_strtol_l.constprop.0+0x8a>
 8007ade:	4581      	cmp	r9, r0
 8007ae0:	d320      	bcc.n	8007b24 <_strtol_l.constprop.0+0xc0>
 8007ae2:	d101      	bne.n	8007ae8 <_strtol_l.constprop.0+0x84>
 8007ae4:	45a2      	cmp	sl, r4
 8007ae6:	db1d      	blt.n	8007b24 <_strtol_l.constprop.0+0xc0>
 8007ae8:	fb00 4003 	mla	r0, r0, r3, r4
 8007aec:	2201      	movs	r2, #1
 8007aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007af2:	e7eb      	b.n	8007acc <_strtol_l.constprop.0+0x68>
 8007af4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007af6:	bf04      	itt	eq
 8007af8:	782c      	ldrbeq	r4, [r5, #0]
 8007afa:	1c95      	addeq	r5, r2, #2
 8007afc:	e7cf      	b.n	8007a9e <_strtol_l.constprop.0+0x3a>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1da      	bne.n	8007ab8 <_strtol_l.constprop.0+0x54>
 8007b02:	2c30      	cmp	r4, #48	@ 0x30
 8007b04:	bf0c      	ite	eq
 8007b06:	2308      	moveq	r3, #8
 8007b08:	230a      	movne	r3, #10
 8007b0a:	e7d5      	b.n	8007ab8 <_strtol_l.constprop.0+0x54>
 8007b0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b10:	2f19      	cmp	r7, #25
 8007b12:	d801      	bhi.n	8007b18 <_strtol_l.constprop.0+0xb4>
 8007b14:	3c37      	subs	r4, #55	@ 0x37
 8007b16:	e7de      	b.n	8007ad6 <_strtol_l.constprop.0+0x72>
 8007b18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b1c:	2f19      	cmp	r7, #25
 8007b1e:	d804      	bhi.n	8007b2a <_strtol_l.constprop.0+0xc6>
 8007b20:	3c57      	subs	r4, #87	@ 0x57
 8007b22:	e7d8      	b.n	8007ad6 <_strtol_l.constprop.0+0x72>
 8007b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b28:	e7e1      	b.n	8007aee <_strtol_l.constprop.0+0x8a>
 8007b2a:	1c53      	adds	r3, r2, #1
 8007b2c:	d108      	bne.n	8007b40 <_strtol_l.constprop.0+0xdc>
 8007b2e:	2322      	movs	r3, #34	@ 0x22
 8007b30:	f8ce 3000 	str.w	r3, [lr]
 8007b34:	4660      	mov	r0, ip
 8007b36:	f1b8 0f00 	cmp.w	r8, #0
 8007b3a:	d0a0      	beq.n	8007a7e <_strtol_l.constprop.0+0x1a>
 8007b3c:	1e69      	subs	r1, r5, #1
 8007b3e:	e006      	b.n	8007b4e <_strtol_l.constprop.0+0xea>
 8007b40:	b106      	cbz	r6, 8007b44 <_strtol_l.constprop.0+0xe0>
 8007b42:	4240      	negs	r0, r0
 8007b44:	f1b8 0f00 	cmp.w	r8, #0
 8007b48:	d099      	beq.n	8007a7e <_strtol_l.constprop.0+0x1a>
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	d1f6      	bne.n	8007b3c <_strtol_l.constprop.0+0xd8>
 8007b4e:	f8c8 1000 	str.w	r1, [r8]
 8007b52:	e794      	b.n	8007a7e <_strtol_l.constprop.0+0x1a>
 8007b54:	0800aa61 	.word	0x0800aa61

08007b58 <_strtol_r>:
 8007b58:	f7ff bf84 	b.w	8007a64 <_strtol_l.constprop.0>

08007b5c <_fwalk_sglue>:
 8007b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b60:	4607      	mov	r7, r0
 8007b62:	4688      	mov	r8, r1
 8007b64:	4614      	mov	r4, r2
 8007b66:	2600      	movs	r6, #0
 8007b68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b6c:	f1b9 0901 	subs.w	r9, r9, #1
 8007b70:	d505      	bpl.n	8007b7e <_fwalk_sglue+0x22>
 8007b72:	6824      	ldr	r4, [r4, #0]
 8007b74:	2c00      	cmp	r4, #0
 8007b76:	d1f7      	bne.n	8007b68 <_fwalk_sglue+0xc>
 8007b78:	4630      	mov	r0, r6
 8007b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7e:	89ab      	ldrh	r3, [r5, #12]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d907      	bls.n	8007b94 <_fwalk_sglue+0x38>
 8007b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	d003      	beq.n	8007b94 <_fwalk_sglue+0x38>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4638      	mov	r0, r7
 8007b90:	47c0      	blx	r8
 8007b92:	4306      	orrs	r6, r0
 8007b94:	3568      	adds	r5, #104	@ 0x68
 8007b96:	e7e9      	b.n	8007b6c <_fwalk_sglue+0x10>

08007b98 <iprintf>:
 8007b98:	b40f      	push	{r0, r1, r2, r3}
 8007b9a:	b507      	push	{r0, r1, r2, lr}
 8007b9c:	4906      	ldr	r1, [pc, #24]	@ (8007bb8 <iprintf+0x20>)
 8007b9e:	ab04      	add	r3, sp, #16
 8007ba0:	6808      	ldr	r0, [r1, #0]
 8007ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba6:	6881      	ldr	r1, [r0, #8]
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	f001 fbeb 	bl	8009384 <_vfiprintf_r>
 8007bae:	b003      	add	sp, #12
 8007bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bb4:	b004      	add	sp, #16
 8007bb6:	4770      	bx	lr
 8007bb8:	20000184 	.word	0x20000184

08007bbc <_puts_r>:
 8007bbc:	6a03      	ldr	r3, [r0, #32]
 8007bbe:	b570      	push	{r4, r5, r6, lr}
 8007bc0:	6884      	ldr	r4, [r0, #8]
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	460e      	mov	r6, r1
 8007bc6:	b90b      	cbnz	r3, 8007bcc <_puts_r+0x10>
 8007bc8:	f7ff f92c 	bl	8006e24 <__sinit>
 8007bcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bce:	07db      	lsls	r3, r3, #31
 8007bd0:	d405      	bmi.n	8007bde <_puts_r+0x22>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	0598      	lsls	r0, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_puts_r+0x22>
 8007bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bda:	f000 f8ac 	bl	8007d36 <__retarget_lock_acquire_recursive>
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	0719      	lsls	r1, r3, #28
 8007be2:	d502      	bpl.n	8007bea <_puts_r+0x2e>
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d135      	bne.n	8007c56 <_puts_r+0x9a>
 8007bea:	4621      	mov	r1, r4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f002 fbb7 	bl	800a360 <__swsetup_r>
 8007bf2:	b380      	cbz	r0, 8007c56 <_puts_r+0x9a>
 8007bf4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007bf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bfa:	07da      	lsls	r2, r3, #31
 8007bfc:	d405      	bmi.n	8007c0a <_puts_r+0x4e>
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	059b      	lsls	r3, r3, #22
 8007c02:	d402      	bmi.n	8007c0a <_puts_r+0x4e>
 8007c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c06:	f000 f897 	bl	8007d38 <__retarget_lock_release_recursive>
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	bd70      	pop	{r4, r5, r6, pc}
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da04      	bge.n	8007c1c <_puts_r+0x60>
 8007c12:	69a2      	ldr	r2, [r4, #24]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	dc17      	bgt.n	8007c48 <_puts_r+0x8c>
 8007c18:	290a      	cmp	r1, #10
 8007c1a:	d015      	beq.n	8007c48 <_puts_r+0x8c>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	6022      	str	r2, [r4, #0]
 8007c22:	7019      	strb	r1, [r3, #0]
 8007c24:	68a3      	ldr	r3, [r4, #8]
 8007c26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	60a3      	str	r3, [r4, #8]
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	d1ed      	bne.n	8007c0e <_puts_r+0x52>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da11      	bge.n	8007c5a <_puts_r+0x9e>
 8007c36:	4622      	mov	r2, r4
 8007c38:	210a      	movs	r1, #10
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f002 fb51 	bl	800a2e2 <__swbuf_r>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d0d7      	beq.n	8007bf4 <_puts_r+0x38>
 8007c44:	250a      	movs	r5, #10
 8007c46:	e7d7      	b.n	8007bf8 <_puts_r+0x3c>
 8007c48:	4622      	mov	r2, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f002 fb49 	bl	800a2e2 <__swbuf_r>
 8007c50:	3001      	adds	r0, #1
 8007c52:	d1e7      	bne.n	8007c24 <_puts_r+0x68>
 8007c54:	e7ce      	b.n	8007bf4 <_puts_r+0x38>
 8007c56:	3e01      	subs	r6, #1
 8007c58:	e7e4      	b.n	8007c24 <_puts_r+0x68>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	6022      	str	r2, [r4, #0]
 8007c60:	220a      	movs	r2, #10
 8007c62:	701a      	strb	r2, [r3, #0]
 8007c64:	e7ee      	b.n	8007c44 <_puts_r+0x88>
	...

08007c68 <puts>:
 8007c68:	4b02      	ldr	r3, [pc, #8]	@ (8007c74 <puts+0xc>)
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f7ff bfa5 	b.w	8007bbc <_puts_r>
 8007c72:	bf00      	nop
 8007c74:	20000184 	.word	0x20000184

08007c78 <strncmp>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	b16a      	cbz	r2, 8007c98 <strncmp+0x20>
 8007c7c:	3901      	subs	r1, #1
 8007c7e:	1884      	adds	r4, r0, r2
 8007c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d103      	bne.n	8007c94 <strncmp+0x1c>
 8007c8c:	42a0      	cmp	r0, r4
 8007c8e:	d001      	beq.n	8007c94 <strncmp+0x1c>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d1f5      	bne.n	8007c80 <strncmp+0x8>
 8007c94:	1ad0      	subs	r0, r2, r3
 8007c96:	bd10      	pop	{r4, pc}
 8007c98:	4610      	mov	r0, r2
 8007c9a:	e7fc      	b.n	8007c96 <strncmp+0x1e>

08007c9c <strstr>:
 8007c9c:	780a      	ldrb	r2, [r1, #0]
 8007c9e:	b570      	push	{r4, r5, r6, lr}
 8007ca0:	b96a      	cbnz	r2, 8007cbe <strstr+0x22>
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d109      	bne.n	8007cbc <strstr+0x20>
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4605      	mov	r5, r0
 8007cac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0f6      	beq.n	8007ca2 <strstr+0x6>
 8007cb4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007cb8:	429e      	cmp	r6, r3
 8007cba:	d0f7      	beq.n	8007cac <strstr+0x10>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	7803      	ldrb	r3, [r0, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1ef      	bne.n	8007ca4 <strstr+0x8>
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	e7ec      	b.n	8007ca2 <strstr+0x6>

08007cc8 <memset>:
 8007cc8:	4402      	add	r2, r0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d100      	bne.n	8007cd2 <memset+0xa>
 8007cd0:	4770      	bx	lr
 8007cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd6:	e7f9      	b.n	8007ccc <memset+0x4>

08007cd8 <_localeconv_r>:
 8007cd8:	4800      	ldr	r0, [pc, #0]	@ (8007cdc <_localeconv_r+0x4>)
 8007cda:	4770      	bx	lr
 8007cdc:	20000108 	.word	0x20000108

08007ce0 <__errno>:
 8007ce0:	4b01      	ldr	r3, [pc, #4]	@ (8007ce8 <__errno+0x8>)
 8007ce2:	6818      	ldr	r0, [r3, #0]
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	20000184 	.word	0x20000184

08007cec <__libc_init_array>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	4d0d      	ldr	r5, [pc, #52]	@ (8007d24 <__libc_init_array+0x38>)
 8007cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8007d28 <__libc_init_array+0x3c>)
 8007cf2:	1b64      	subs	r4, r4, r5
 8007cf4:	10a4      	asrs	r4, r4, #2
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	42a6      	cmp	r6, r4
 8007cfa:	d109      	bne.n	8007d10 <__libc_init_array+0x24>
 8007cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8007d2c <__libc_init_array+0x40>)
 8007cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8007d30 <__libc_init_array+0x44>)
 8007d00:	f002 fd68 	bl	800a7d4 <_init>
 8007d04:	1b64      	subs	r4, r4, r5
 8007d06:	10a4      	asrs	r4, r4, #2
 8007d08:	2600      	movs	r6, #0
 8007d0a:	42a6      	cmp	r6, r4
 8007d0c:	d105      	bne.n	8007d1a <__libc_init_array+0x2e>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d14:	4798      	blx	r3
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7ee      	b.n	8007cf8 <__libc_init_array+0xc>
 8007d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1e:	4798      	blx	r3
 8007d20:	3601      	adds	r6, #1
 8007d22:	e7f2      	b.n	8007d0a <__libc_init_array+0x1e>
 8007d24:	0800adfc 	.word	0x0800adfc
 8007d28:	0800adfc 	.word	0x0800adfc
 8007d2c:	0800adfc 	.word	0x0800adfc
 8007d30:	0800ae00 	.word	0x0800ae00

08007d34 <__retarget_lock_init_recursive>:
 8007d34:	4770      	bx	lr

08007d36 <__retarget_lock_acquire_recursive>:
 8007d36:	4770      	bx	lr

08007d38 <__retarget_lock_release_recursive>:
 8007d38:	4770      	bx	lr

08007d3a <memcpy>:
 8007d3a:	440a      	add	r2, r1
 8007d3c:	4291      	cmp	r1, r2
 8007d3e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d42:	d100      	bne.n	8007d46 <memcpy+0xc>
 8007d44:	4770      	bx	lr
 8007d46:	b510      	push	{r4, lr}
 8007d48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d50:	4291      	cmp	r1, r2
 8007d52:	d1f9      	bne.n	8007d48 <memcpy+0xe>
 8007d54:	bd10      	pop	{r4, pc}
	...

08007d58 <nan>:
 8007d58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007d60 <nan+0x8>
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	00000000 	.word	0x00000000
 8007d64:	7ff80000 	.word	0x7ff80000

08007d68 <nanf>:
 8007d68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007d70 <nanf+0x8>
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	7fc00000 	.word	0x7fc00000

08007d74 <quorem>:
 8007d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	6903      	ldr	r3, [r0, #16]
 8007d7a:	690c      	ldr	r4, [r1, #16]
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	4607      	mov	r7, r0
 8007d80:	db7e      	blt.n	8007e80 <quorem+0x10c>
 8007d82:	3c01      	subs	r4, #1
 8007d84:	f101 0814 	add.w	r8, r1, #20
 8007d88:	00a3      	lsls	r3, r4, #2
 8007d8a:	f100 0514 	add.w	r5, r0, #20
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	429a      	cmp	r2, r3
 8007da2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007da6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007daa:	d32e      	bcc.n	8007e0a <quorem+0x96>
 8007dac:	f04f 0a00 	mov.w	sl, #0
 8007db0:	46c4      	mov	ip, r8
 8007db2:	46ae      	mov	lr, r5
 8007db4:	46d3      	mov	fp, sl
 8007db6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dba:	b298      	uxth	r0, r3
 8007dbc:	fb06 a000 	mla	r0, r6, r0, sl
 8007dc0:	0c02      	lsrs	r2, r0, #16
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	fb06 2303 	mla	r3, r6, r3, r2
 8007dc8:	f8de 2000 	ldr.w	r2, [lr]
 8007dcc:	b280      	uxth	r0, r0
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	1a12      	subs	r2, r2, r0
 8007dd2:	445a      	add	r2, fp
 8007dd4:	f8de 0000 	ldr.w	r0, [lr]
 8007dd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007de2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007de6:	b292      	uxth	r2, r2
 8007de8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007dec:	45e1      	cmp	r9, ip
 8007dee:	f84e 2b04 	str.w	r2, [lr], #4
 8007df2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007df6:	d2de      	bcs.n	8007db6 <quorem+0x42>
 8007df8:	9b00      	ldr	r3, [sp, #0]
 8007dfa:	58eb      	ldr	r3, [r5, r3]
 8007dfc:	b92b      	cbnz	r3, 8007e0a <quorem+0x96>
 8007dfe:	9b01      	ldr	r3, [sp, #4]
 8007e00:	3b04      	subs	r3, #4
 8007e02:	429d      	cmp	r5, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	d32f      	bcc.n	8007e68 <quorem+0xf4>
 8007e08:	613c      	str	r4, [r7, #16]
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	f002 f80a 	bl	8009e24 <__mcmp>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	db25      	blt.n	8007e60 <quorem+0xec>
 8007e14:	4629      	mov	r1, r5
 8007e16:	2000      	movs	r0, #0
 8007e18:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e1c:	f8d1 c000 	ldr.w	ip, [r1]
 8007e20:	fa1f fe82 	uxth.w	lr, r2
 8007e24:	fa1f f38c 	uxth.w	r3, ip
 8007e28:	eba3 030e 	sub.w	r3, r3, lr
 8007e2c:	4403      	add	r3, r0
 8007e2e:	0c12      	lsrs	r2, r2, #16
 8007e30:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e34:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e3e:	45c1      	cmp	r9, r8
 8007e40:	f841 3b04 	str.w	r3, [r1], #4
 8007e44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e48:	d2e6      	bcs.n	8007e18 <quorem+0xa4>
 8007e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e52:	b922      	cbnz	r2, 8007e5e <quorem+0xea>
 8007e54:	3b04      	subs	r3, #4
 8007e56:	429d      	cmp	r5, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	d30b      	bcc.n	8007e74 <quorem+0x100>
 8007e5c:	613c      	str	r4, [r7, #16]
 8007e5e:	3601      	adds	r6, #1
 8007e60:	4630      	mov	r0, r6
 8007e62:	b003      	add	sp, #12
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	3b04      	subs	r3, #4
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	d1cb      	bne.n	8007e08 <quorem+0x94>
 8007e70:	3c01      	subs	r4, #1
 8007e72:	e7c6      	b.n	8007e02 <quorem+0x8e>
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	3b04      	subs	r3, #4
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	d1ef      	bne.n	8007e5c <quorem+0xe8>
 8007e7c:	3c01      	subs	r4, #1
 8007e7e:	e7ea      	b.n	8007e56 <quorem+0xe2>
 8007e80:	2000      	movs	r0, #0
 8007e82:	e7ee      	b.n	8007e62 <quorem+0xee>
 8007e84:	0000      	movs	r0, r0
	...

08007e88 <_dtoa_r>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	69c7      	ldr	r7, [r0, #28]
 8007e8e:	b099      	sub	sp, #100	@ 0x64
 8007e90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e94:	ec55 4b10 	vmov	r4, r5, d0
 8007e98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e9c:	4683      	mov	fp, r0
 8007e9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ea2:	b97f      	cbnz	r7, 8007ec4 <_dtoa_r+0x3c>
 8007ea4:	2010      	movs	r0, #16
 8007ea6:	f001 fb85 	bl	80095b4 <malloc>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	f8cb 001c 	str.w	r0, [fp, #28]
 8007eb0:	b920      	cbnz	r0, 8007ebc <_dtoa_r+0x34>
 8007eb2:	4ba7      	ldr	r3, [pc, #668]	@ (8008150 <_dtoa_r+0x2c8>)
 8007eb4:	21ef      	movs	r1, #239	@ 0xef
 8007eb6:	48a7      	ldr	r0, [pc, #668]	@ (8008154 <_dtoa_r+0x2cc>)
 8007eb8:	f002 fbaa 	bl	800a610 <__assert_func>
 8007ebc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ec0:	6007      	str	r7, [r0, #0]
 8007ec2:	60c7      	str	r7, [r0, #12]
 8007ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ec8:	6819      	ldr	r1, [r3, #0]
 8007eca:	b159      	cbz	r1, 8007ee4 <_dtoa_r+0x5c>
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	604a      	str	r2, [r1, #4]
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	4093      	lsls	r3, r2
 8007ed4:	608b      	str	r3, [r1, #8]
 8007ed6:	4658      	mov	r0, fp
 8007ed8:	f001 fd20 	bl	800991c <_Bfree>
 8007edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	1e2b      	subs	r3, r5, #0
 8007ee6:	bfb9      	ittee	lt
 8007ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007eec:	9303      	strlt	r3, [sp, #12]
 8007eee:	2300      	movge	r3, #0
 8007ef0:	6033      	strge	r3, [r6, #0]
 8007ef2:	9f03      	ldr	r7, [sp, #12]
 8007ef4:	4b98      	ldr	r3, [pc, #608]	@ (8008158 <_dtoa_r+0x2d0>)
 8007ef6:	bfbc      	itt	lt
 8007ef8:	2201      	movlt	r2, #1
 8007efa:	6032      	strlt	r2, [r6, #0]
 8007efc:	43bb      	bics	r3, r7
 8007efe:	d112      	bne.n	8007f26 <_dtoa_r+0x9e>
 8007f00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f0c:	4323      	orrs	r3, r4
 8007f0e:	f000 854d 	beq.w	80089ac <_dtoa_r+0xb24>
 8007f12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800816c <_dtoa_r+0x2e4>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 854f 	beq.w	80089bc <_dtoa_r+0xb34>
 8007f1e:	f10a 0303 	add.w	r3, sl, #3
 8007f22:	f000 bd49 	b.w	80089b8 <_dtoa_r+0xb30>
 8007f26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	ec51 0b17 	vmov	r0, r1, d7
 8007f30:	2300      	movs	r3, #0
 8007f32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007f36:	f7f8 fdef 	bl	8000b18 <__aeabi_dcmpeq>
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	b158      	cbz	r0, 8007f56 <_dtoa_r+0xce>
 8007f3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f40:	2301      	movs	r3, #1
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f46:	b113      	cbz	r3, 8007f4e <_dtoa_r+0xc6>
 8007f48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f4a:	4b84      	ldr	r3, [pc, #528]	@ (800815c <_dtoa_r+0x2d4>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008170 <_dtoa_r+0x2e8>
 8007f52:	f000 bd33 	b.w	80089bc <_dtoa_r+0xb34>
 8007f56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f5a:	aa16      	add	r2, sp, #88	@ 0x58
 8007f5c:	a917      	add	r1, sp, #92	@ 0x5c
 8007f5e:	4658      	mov	r0, fp
 8007f60:	f002 f880 	bl	800a064 <__d2b>
 8007f64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f68:	4681      	mov	r9, r0
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	d077      	beq.n	800805e <_dtoa_r+0x1d6>
 8007f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f88:	4619      	mov	r1, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4b74      	ldr	r3, [pc, #464]	@ (8008160 <_dtoa_r+0x2d8>)
 8007f8e:	f7f8 f9a3 	bl	80002d8 <__aeabi_dsub>
 8007f92:	a369      	add	r3, pc, #420	@ (adr r3, 8008138 <_dtoa_r+0x2b0>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 fb56 	bl	8000648 <__aeabi_dmul>
 8007f9c:	a368      	add	r3, pc, #416	@ (adr r3, 8008140 <_dtoa_r+0x2b8>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 f99b 	bl	80002dc <__adddf3>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4630      	mov	r0, r6
 8007faa:	460d      	mov	r5, r1
 8007fac:	f7f8 fae2 	bl	8000574 <__aeabi_i2d>
 8007fb0:	a365      	add	r3, pc, #404	@ (adr r3, 8008148 <_dtoa_r+0x2c0>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f7f8 fb47 	bl	8000648 <__aeabi_dmul>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f7f8 f98b 	bl	80002dc <__adddf3>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460d      	mov	r5, r1
 8007fca:	f7f8 fded 	bl	8000ba8 <__aeabi_d2iz>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 fda8 	bl	8000b2c <__aeabi_dcmplt>
 8007fdc:	b140      	cbz	r0, 8007ff0 <_dtoa_r+0x168>
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7f8 fac8 	bl	8000574 <__aeabi_i2d>
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	f7f8 fd96 	bl	8000b18 <__aeabi_dcmpeq>
 8007fec:	b900      	cbnz	r0, 8007ff0 <_dtoa_r+0x168>
 8007fee:	3f01      	subs	r7, #1
 8007ff0:	2f16      	cmp	r7, #22
 8007ff2:	d851      	bhi.n	8008098 <_dtoa_r+0x210>
 8007ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8008164 <_dtoa_r+0x2dc>)
 8007ff6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008002:	f7f8 fd93 	bl	8000b2c <__aeabi_dcmplt>
 8008006:	2800      	cmp	r0, #0
 8008008:	d048      	beq.n	800809c <_dtoa_r+0x214>
 800800a:	3f01      	subs	r7, #1
 800800c:	2300      	movs	r3, #0
 800800e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008010:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008012:	1b9b      	subs	r3, r3, r6
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	bf44      	itt	mi
 8008018:	f1c3 0801 	rsbmi	r8, r3, #1
 800801c:	2300      	movmi	r3, #0
 800801e:	9208      	str	r2, [sp, #32]
 8008020:	bf54      	ite	pl
 8008022:	f04f 0800 	movpl.w	r8, #0
 8008026:	9308      	strmi	r3, [sp, #32]
 8008028:	2f00      	cmp	r7, #0
 800802a:	db39      	blt.n	80080a0 <_dtoa_r+0x218>
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008030:	443b      	add	r3, r7
 8008032:	9308      	str	r3, [sp, #32]
 8008034:	2300      	movs	r3, #0
 8008036:	930a      	str	r3, [sp, #40]	@ 0x28
 8008038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803a:	2b09      	cmp	r3, #9
 800803c:	d864      	bhi.n	8008108 <_dtoa_r+0x280>
 800803e:	2b05      	cmp	r3, #5
 8008040:	bfc4      	itt	gt
 8008042:	3b04      	subgt	r3, #4
 8008044:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008048:	f1a3 0302 	sub.w	r3, r3, #2
 800804c:	bfcc      	ite	gt
 800804e:	2400      	movgt	r4, #0
 8008050:	2401      	movle	r4, #1
 8008052:	2b03      	cmp	r3, #3
 8008054:	d863      	bhi.n	800811e <_dtoa_r+0x296>
 8008056:	e8df f003 	tbb	[pc, r3]
 800805a:	372a      	.short	0x372a
 800805c:	5535      	.short	0x5535
 800805e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008062:	441e      	add	r6, r3
 8008064:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008068:	2b20      	cmp	r3, #32
 800806a:	bfc1      	itttt	gt
 800806c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008070:	409f      	lslgt	r7, r3
 8008072:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008076:	fa24 f303 	lsrgt.w	r3, r4, r3
 800807a:	bfd6      	itet	le
 800807c:	f1c3 0320 	rsble	r3, r3, #32
 8008080:	ea47 0003 	orrgt.w	r0, r7, r3
 8008084:	fa04 f003 	lslle.w	r0, r4, r3
 8008088:	f7f8 fa64 	bl	8000554 <__aeabi_ui2d>
 800808c:	2201      	movs	r2, #1
 800808e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008092:	3e01      	subs	r6, #1
 8008094:	9214      	str	r2, [sp, #80]	@ 0x50
 8008096:	e777      	b.n	8007f88 <_dtoa_r+0x100>
 8008098:	2301      	movs	r3, #1
 800809a:	e7b8      	b.n	800800e <_dtoa_r+0x186>
 800809c:	9012      	str	r0, [sp, #72]	@ 0x48
 800809e:	e7b7      	b.n	8008010 <_dtoa_r+0x188>
 80080a0:	427b      	negs	r3, r7
 80080a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80080a4:	2300      	movs	r3, #0
 80080a6:	eba8 0807 	sub.w	r8, r8, r7
 80080aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080ac:	e7c4      	b.n	8008038 <_dtoa_r+0x1b0>
 80080ae:	2300      	movs	r3, #0
 80080b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dc35      	bgt.n	8008124 <_dtoa_r+0x29c>
 80080b8:	2301      	movs	r3, #1
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	9307      	str	r3, [sp, #28]
 80080be:	461a      	mov	r2, r3
 80080c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80080c2:	e00b      	b.n	80080dc <_dtoa_r+0x254>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e7f3      	b.n	80080b0 <_dtoa_r+0x228>
 80080c8:	2300      	movs	r3, #0
 80080ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080ce:	18fb      	adds	r3, r7, r3
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	bfb8      	it	lt
 80080da:	2301      	movlt	r3, #1
 80080dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080e0:	2100      	movs	r1, #0
 80080e2:	2204      	movs	r2, #4
 80080e4:	f102 0514 	add.w	r5, r2, #20
 80080e8:	429d      	cmp	r5, r3
 80080ea:	d91f      	bls.n	800812c <_dtoa_r+0x2a4>
 80080ec:	6041      	str	r1, [r0, #4]
 80080ee:	4658      	mov	r0, fp
 80080f0:	f001 fbd4 	bl	800989c <_Balloc>
 80080f4:	4682      	mov	sl, r0
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d13c      	bne.n	8008174 <_dtoa_r+0x2ec>
 80080fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008168 <_dtoa_r+0x2e0>)
 80080fc:	4602      	mov	r2, r0
 80080fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008102:	e6d8      	b.n	8007eb6 <_dtoa_r+0x2e>
 8008104:	2301      	movs	r3, #1
 8008106:	e7e0      	b.n	80080ca <_dtoa_r+0x242>
 8008108:	2401      	movs	r4, #1
 800810a:	2300      	movs	r3, #0
 800810c:	9309      	str	r3, [sp, #36]	@ 0x24
 800810e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	2200      	movs	r2, #0
 800811a:	2312      	movs	r3, #18
 800811c:	e7d0      	b.n	80080c0 <_dtoa_r+0x238>
 800811e:	2301      	movs	r3, #1
 8008120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008122:	e7f5      	b.n	8008110 <_dtoa_r+0x288>
 8008124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	9307      	str	r3, [sp, #28]
 800812a:	e7d7      	b.n	80080dc <_dtoa_r+0x254>
 800812c:	3101      	adds	r1, #1
 800812e:	0052      	lsls	r2, r2, #1
 8008130:	e7d8      	b.n	80080e4 <_dtoa_r+0x25c>
 8008132:	bf00      	nop
 8008134:	f3af 8000 	nop.w
 8008138:	636f4361 	.word	0x636f4361
 800813c:	3fd287a7 	.word	0x3fd287a7
 8008140:	8b60c8b3 	.word	0x8b60c8b3
 8008144:	3fc68a28 	.word	0x3fc68a28
 8008148:	509f79fb 	.word	0x509f79fb
 800814c:	3fd34413 	.word	0x3fd34413
 8008150:	0800ab6e 	.word	0x0800ab6e
 8008154:	0800ab85 	.word	0x0800ab85
 8008158:	7ff00000 	.word	0x7ff00000
 800815c:	0800a9dd 	.word	0x0800a9dd
 8008160:	3ff80000 	.word	0x3ff80000
 8008164:	0800acf0 	.word	0x0800acf0
 8008168:	0800abdd 	.word	0x0800abdd
 800816c:	0800ab6a 	.word	0x0800ab6a
 8008170:	0800a9dc 	.word	0x0800a9dc
 8008174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008178:	6018      	str	r0, [r3, #0]
 800817a:	9b07      	ldr	r3, [sp, #28]
 800817c:	2b0e      	cmp	r3, #14
 800817e:	f200 80a4 	bhi.w	80082ca <_dtoa_r+0x442>
 8008182:	2c00      	cmp	r4, #0
 8008184:	f000 80a1 	beq.w	80082ca <_dtoa_r+0x442>
 8008188:	2f00      	cmp	r7, #0
 800818a:	dd33      	ble.n	80081f4 <_dtoa_r+0x36c>
 800818c:	4bad      	ldr	r3, [pc, #692]	@ (8008444 <_dtoa_r+0x5bc>)
 800818e:	f007 020f 	and.w	r2, r7, #15
 8008192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008196:	ed93 7b00 	vldr	d7, [r3]
 800819a:	05f8      	lsls	r0, r7, #23
 800819c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80081a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081a4:	d516      	bpl.n	80081d4 <_dtoa_r+0x34c>
 80081a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008448 <_dtoa_r+0x5c0>)
 80081a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081b0:	f7f8 fb74 	bl	800089c <__aeabi_ddiv>
 80081b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b8:	f004 040f 	and.w	r4, r4, #15
 80081bc:	2603      	movs	r6, #3
 80081be:	4da2      	ldr	r5, [pc, #648]	@ (8008448 <_dtoa_r+0x5c0>)
 80081c0:	b954      	cbnz	r4, 80081d8 <_dtoa_r+0x350>
 80081c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ca:	f7f8 fb67 	bl	800089c <__aeabi_ddiv>
 80081ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081d2:	e028      	b.n	8008226 <_dtoa_r+0x39e>
 80081d4:	2602      	movs	r6, #2
 80081d6:	e7f2      	b.n	80081be <_dtoa_r+0x336>
 80081d8:	07e1      	lsls	r1, r4, #31
 80081da:	d508      	bpl.n	80081ee <_dtoa_r+0x366>
 80081dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081e4:	f7f8 fa30 	bl	8000648 <__aeabi_dmul>
 80081e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ec:	3601      	adds	r6, #1
 80081ee:	1064      	asrs	r4, r4, #1
 80081f0:	3508      	adds	r5, #8
 80081f2:	e7e5      	b.n	80081c0 <_dtoa_r+0x338>
 80081f4:	f000 80d2 	beq.w	800839c <_dtoa_r+0x514>
 80081f8:	427c      	negs	r4, r7
 80081fa:	4b92      	ldr	r3, [pc, #584]	@ (8008444 <_dtoa_r+0x5bc>)
 80081fc:	4d92      	ldr	r5, [pc, #584]	@ (8008448 <_dtoa_r+0x5c0>)
 80081fe:	f004 020f 	and.w	r2, r4, #15
 8008202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800820e:	f7f8 fa1b 	bl	8000648 <__aeabi_dmul>
 8008212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008216:	1124      	asrs	r4, r4, #4
 8008218:	2300      	movs	r3, #0
 800821a:	2602      	movs	r6, #2
 800821c:	2c00      	cmp	r4, #0
 800821e:	f040 80b2 	bne.w	8008386 <_dtoa_r+0x4fe>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1d3      	bne.n	80081ce <_dtoa_r+0x346>
 8008226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008228:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 80b7 	beq.w	80083a0 <_dtoa_r+0x518>
 8008232:	4b86      	ldr	r3, [pc, #536]	@ (800844c <_dtoa_r+0x5c4>)
 8008234:	2200      	movs	r2, #0
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	f7f8 fc77 	bl	8000b2c <__aeabi_dcmplt>
 800823e:	2800      	cmp	r0, #0
 8008240:	f000 80ae 	beq.w	80083a0 <_dtoa_r+0x518>
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80aa 	beq.w	80083a0 <_dtoa_r+0x518>
 800824c:	9b00      	ldr	r3, [sp, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dd37      	ble.n	80082c2 <_dtoa_r+0x43a>
 8008252:	1e7b      	subs	r3, r7, #1
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	4620      	mov	r0, r4
 8008258:	4b7d      	ldr	r3, [pc, #500]	@ (8008450 <_dtoa_r+0x5c8>)
 800825a:	2200      	movs	r2, #0
 800825c:	4629      	mov	r1, r5
 800825e:	f7f8 f9f3 	bl	8000648 <__aeabi_dmul>
 8008262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008266:	9c00      	ldr	r4, [sp, #0]
 8008268:	3601      	adds	r6, #1
 800826a:	4630      	mov	r0, r6
 800826c:	f7f8 f982 	bl	8000574 <__aeabi_i2d>
 8008270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008274:	f7f8 f9e8 	bl	8000648 <__aeabi_dmul>
 8008278:	4b76      	ldr	r3, [pc, #472]	@ (8008454 <_dtoa_r+0x5cc>)
 800827a:	2200      	movs	r2, #0
 800827c:	f7f8 f82e 	bl	80002dc <__adddf3>
 8008280:	4605      	mov	r5, r0
 8008282:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008286:	2c00      	cmp	r4, #0
 8008288:	f040 808d 	bne.w	80083a6 <_dtoa_r+0x51e>
 800828c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008290:	4b71      	ldr	r3, [pc, #452]	@ (8008458 <_dtoa_r+0x5d0>)
 8008292:	2200      	movs	r2, #0
 8008294:	f7f8 f820 	bl	80002d8 <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082a0:	462a      	mov	r2, r5
 80082a2:	4633      	mov	r3, r6
 80082a4:	f7f8 fc60 	bl	8000b68 <__aeabi_dcmpgt>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	f040 828b 	bne.w	80087c4 <_dtoa_r+0x93c>
 80082ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082b2:	462a      	mov	r2, r5
 80082b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082b8:	f7f8 fc38 	bl	8000b2c <__aeabi_dcmplt>
 80082bc:	2800      	cmp	r0, #0
 80082be:	f040 8128 	bne.w	8008512 <_dtoa_r+0x68a>
 80082c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80082c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f2c0 815a 	blt.w	8008586 <_dtoa_r+0x6fe>
 80082d2:	2f0e      	cmp	r7, #14
 80082d4:	f300 8157 	bgt.w	8008586 <_dtoa_r+0x6fe>
 80082d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008444 <_dtoa_r+0x5bc>)
 80082da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082de:	ed93 7b00 	vldr	d7, [r3]
 80082e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	ed8d 7b00 	vstr	d7, [sp]
 80082ea:	da03      	bge.n	80082f4 <_dtoa_r+0x46c>
 80082ec:	9b07      	ldr	r3, [sp, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f340 8101 	ble.w	80084f6 <_dtoa_r+0x66e>
 80082f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082f8:	4656      	mov	r6, sl
 80082fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f8 facb 	bl	800089c <__aeabi_ddiv>
 8008306:	f7f8 fc4f 	bl	8000ba8 <__aeabi_d2iz>
 800830a:	4680      	mov	r8, r0
 800830c:	f7f8 f932 	bl	8000574 <__aeabi_i2d>
 8008310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008314:	f7f8 f998 	bl	8000648 <__aeabi_dmul>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4620      	mov	r0, r4
 800831e:	4629      	mov	r1, r5
 8008320:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008324:	f7f7 ffd8 	bl	80002d8 <__aeabi_dsub>
 8008328:	f806 4b01 	strb.w	r4, [r6], #1
 800832c:	9d07      	ldr	r5, [sp, #28]
 800832e:	eba6 040a 	sub.w	r4, r6, sl
 8008332:	42a5      	cmp	r5, r4
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	f040 8117 	bne.w	800856a <_dtoa_r+0x6e2>
 800833c:	f7f7 ffce 	bl	80002dc <__adddf3>
 8008340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008344:	4604      	mov	r4, r0
 8008346:	460d      	mov	r5, r1
 8008348:	f7f8 fc0e 	bl	8000b68 <__aeabi_dcmpgt>
 800834c:	2800      	cmp	r0, #0
 800834e:	f040 80f9 	bne.w	8008544 <_dtoa_r+0x6bc>
 8008352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f8 fbdd 	bl	8000b18 <__aeabi_dcmpeq>
 800835e:	b118      	cbz	r0, 8008368 <_dtoa_r+0x4e0>
 8008360:	f018 0f01 	tst.w	r8, #1
 8008364:	f040 80ee 	bne.w	8008544 <_dtoa_r+0x6bc>
 8008368:	4649      	mov	r1, r9
 800836a:	4658      	mov	r0, fp
 800836c:	f001 fad6 	bl	800991c <_Bfree>
 8008370:	2300      	movs	r3, #0
 8008372:	7033      	strb	r3, [r6, #0]
 8008374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008376:	3701      	adds	r7, #1
 8008378:	601f      	str	r7, [r3, #0]
 800837a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 831d 	beq.w	80089bc <_dtoa_r+0xb34>
 8008382:	601e      	str	r6, [r3, #0]
 8008384:	e31a      	b.n	80089bc <_dtoa_r+0xb34>
 8008386:	07e2      	lsls	r2, r4, #31
 8008388:	d505      	bpl.n	8008396 <_dtoa_r+0x50e>
 800838a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800838e:	f7f8 f95b 	bl	8000648 <__aeabi_dmul>
 8008392:	3601      	adds	r6, #1
 8008394:	2301      	movs	r3, #1
 8008396:	1064      	asrs	r4, r4, #1
 8008398:	3508      	adds	r5, #8
 800839a:	e73f      	b.n	800821c <_dtoa_r+0x394>
 800839c:	2602      	movs	r6, #2
 800839e:	e742      	b.n	8008226 <_dtoa_r+0x39e>
 80083a0:	9c07      	ldr	r4, [sp, #28]
 80083a2:	9704      	str	r7, [sp, #16]
 80083a4:	e761      	b.n	800826a <_dtoa_r+0x3e2>
 80083a6:	4b27      	ldr	r3, [pc, #156]	@ (8008444 <_dtoa_r+0x5bc>)
 80083a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083b2:	4454      	add	r4, sl
 80083b4:	2900      	cmp	r1, #0
 80083b6:	d053      	beq.n	8008460 <_dtoa_r+0x5d8>
 80083b8:	4928      	ldr	r1, [pc, #160]	@ (800845c <_dtoa_r+0x5d4>)
 80083ba:	2000      	movs	r0, #0
 80083bc:	f7f8 fa6e 	bl	800089c <__aeabi_ddiv>
 80083c0:	4633      	mov	r3, r6
 80083c2:	462a      	mov	r2, r5
 80083c4:	f7f7 ff88 	bl	80002d8 <__aeabi_dsub>
 80083c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083cc:	4656      	mov	r6, sl
 80083ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083d2:	f7f8 fbe9 	bl	8000ba8 <__aeabi_d2iz>
 80083d6:	4605      	mov	r5, r0
 80083d8:	f7f8 f8cc 	bl	8000574 <__aeabi_i2d>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083e4:	f7f7 ff78 	bl	80002d8 <__aeabi_dsub>
 80083e8:	3530      	adds	r5, #48	@ 0x30
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083f2:	f806 5b01 	strb.w	r5, [r6], #1
 80083f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083fa:	f7f8 fb97 	bl	8000b2c <__aeabi_dcmplt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d171      	bne.n	80084e6 <_dtoa_r+0x65e>
 8008402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008406:	4911      	ldr	r1, [pc, #68]	@ (800844c <_dtoa_r+0x5c4>)
 8008408:	2000      	movs	r0, #0
 800840a:	f7f7 ff65 	bl	80002d8 <__aeabi_dsub>
 800840e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008412:	f7f8 fb8b 	bl	8000b2c <__aeabi_dcmplt>
 8008416:	2800      	cmp	r0, #0
 8008418:	f040 8095 	bne.w	8008546 <_dtoa_r+0x6be>
 800841c:	42a6      	cmp	r6, r4
 800841e:	f43f af50 	beq.w	80082c2 <_dtoa_r+0x43a>
 8008422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008426:	4b0a      	ldr	r3, [pc, #40]	@ (8008450 <_dtoa_r+0x5c8>)
 8008428:	2200      	movs	r2, #0
 800842a:	f7f8 f90d 	bl	8000648 <__aeabi_dmul>
 800842e:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <_dtoa_r+0x5c8>)
 8008430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008434:	2200      	movs	r2, #0
 8008436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800843a:	f7f8 f905 	bl	8000648 <__aeabi_dmul>
 800843e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008442:	e7c4      	b.n	80083ce <_dtoa_r+0x546>
 8008444:	0800acf0 	.word	0x0800acf0
 8008448:	0800acc8 	.word	0x0800acc8
 800844c:	3ff00000 	.word	0x3ff00000
 8008450:	40240000 	.word	0x40240000
 8008454:	401c0000 	.word	0x401c0000
 8008458:	40140000 	.word	0x40140000
 800845c:	3fe00000 	.word	0x3fe00000
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	f7f8 f8f0 	bl	8000648 <__aeabi_dmul>
 8008468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800846c:	9415      	str	r4, [sp, #84]	@ 0x54
 800846e:	4656      	mov	r6, sl
 8008470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008474:	f7f8 fb98 	bl	8000ba8 <__aeabi_d2iz>
 8008478:	4605      	mov	r5, r0
 800847a:	f7f8 f87b 	bl	8000574 <__aeabi_i2d>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008486:	f7f7 ff27 	bl	80002d8 <__aeabi_dsub>
 800848a:	3530      	adds	r5, #48	@ 0x30
 800848c:	f806 5b01 	strb.w	r5, [r6], #1
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	42a6      	cmp	r6, r4
 8008496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800849a:	f04f 0200 	mov.w	r2, #0
 800849e:	d124      	bne.n	80084ea <_dtoa_r+0x662>
 80084a0:	4bac      	ldr	r3, [pc, #688]	@ (8008754 <_dtoa_r+0x8cc>)
 80084a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084a6:	f7f7 ff19 	bl	80002dc <__adddf3>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084b2:	f7f8 fb59 	bl	8000b68 <__aeabi_dcmpgt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d145      	bne.n	8008546 <_dtoa_r+0x6be>
 80084ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084be:	49a5      	ldr	r1, [pc, #660]	@ (8008754 <_dtoa_r+0x8cc>)
 80084c0:	2000      	movs	r0, #0
 80084c2:	f7f7 ff09 	bl	80002d8 <__aeabi_dsub>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ce:	f7f8 fb2d 	bl	8000b2c <__aeabi_dcmplt>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f43f aef5 	beq.w	80082c2 <_dtoa_r+0x43a>
 80084d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80084da:	1e73      	subs	r3, r6, #1
 80084dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80084de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084e2:	2b30      	cmp	r3, #48	@ 0x30
 80084e4:	d0f8      	beq.n	80084d8 <_dtoa_r+0x650>
 80084e6:	9f04      	ldr	r7, [sp, #16]
 80084e8:	e73e      	b.n	8008368 <_dtoa_r+0x4e0>
 80084ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008758 <_dtoa_r+0x8d0>)
 80084ec:	f7f8 f8ac 	bl	8000648 <__aeabi_dmul>
 80084f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f4:	e7bc      	b.n	8008470 <_dtoa_r+0x5e8>
 80084f6:	d10c      	bne.n	8008512 <_dtoa_r+0x68a>
 80084f8:	4b98      	ldr	r3, [pc, #608]	@ (800875c <_dtoa_r+0x8d4>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008500:	f7f8 f8a2 	bl	8000648 <__aeabi_dmul>
 8008504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008508:	f7f8 fb24 	bl	8000b54 <__aeabi_dcmpge>
 800850c:	2800      	cmp	r0, #0
 800850e:	f000 8157 	beq.w	80087c0 <_dtoa_r+0x938>
 8008512:	2400      	movs	r4, #0
 8008514:	4625      	mov	r5, r4
 8008516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008518:	43db      	mvns	r3, r3
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	4656      	mov	r6, sl
 800851e:	2700      	movs	r7, #0
 8008520:	4621      	mov	r1, r4
 8008522:	4658      	mov	r0, fp
 8008524:	f001 f9fa 	bl	800991c <_Bfree>
 8008528:	2d00      	cmp	r5, #0
 800852a:	d0dc      	beq.n	80084e6 <_dtoa_r+0x65e>
 800852c:	b12f      	cbz	r7, 800853a <_dtoa_r+0x6b2>
 800852e:	42af      	cmp	r7, r5
 8008530:	d003      	beq.n	800853a <_dtoa_r+0x6b2>
 8008532:	4639      	mov	r1, r7
 8008534:	4658      	mov	r0, fp
 8008536:	f001 f9f1 	bl	800991c <_Bfree>
 800853a:	4629      	mov	r1, r5
 800853c:	4658      	mov	r0, fp
 800853e:	f001 f9ed 	bl	800991c <_Bfree>
 8008542:	e7d0      	b.n	80084e6 <_dtoa_r+0x65e>
 8008544:	9704      	str	r7, [sp, #16]
 8008546:	4633      	mov	r3, r6
 8008548:	461e      	mov	r6, r3
 800854a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800854e:	2a39      	cmp	r2, #57	@ 0x39
 8008550:	d107      	bne.n	8008562 <_dtoa_r+0x6da>
 8008552:	459a      	cmp	sl, r3
 8008554:	d1f8      	bne.n	8008548 <_dtoa_r+0x6c0>
 8008556:	9a04      	ldr	r2, [sp, #16]
 8008558:	3201      	adds	r2, #1
 800855a:	9204      	str	r2, [sp, #16]
 800855c:	2230      	movs	r2, #48	@ 0x30
 800855e:	f88a 2000 	strb.w	r2, [sl]
 8008562:	781a      	ldrb	r2, [r3, #0]
 8008564:	3201      	adds	r2, #1
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	e7bd      	b.n	80084e6 <_dtoa_r+0x65e>
 800856a:	4b7b      	ldr	r3, [pc, #492]	@ (8008758 <_dtoa_r+0x8d0>)
 800856c:	2200      	movs	r2, #0
 800856e:	f7f8 f86b 	bl	8000648 <__aeabi_dmul>
 8008572:	2200      	movs	r2, #0
 8008574:	2300      	movs	r3, #0
 8008576:	4604      	mov	r4, r0
 8008578:	460d      	mov	r5, r1
 800857a:	f7f8 facd 	bl	8000b18 <__aeabi_dcmpeq>
 800857e:	2800      	cmp	r0, #0
 8008580:	f43f aebb 	beq.w	80082fa <_dtoa_r+0x472>
 8008584:	e6f0      	b.n	8008368 <_dtoa_r+0x4e0>
 8008586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008588:	2a00      	cmp	r2, #0
 800858a:	f000 80db 	beq.w	8008744 <_dtoa_r+0x8bc>
 800858e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008590:	2a01      	cmp	r2, #1
 8008592:	f300 80bf 	bgt.w	8008714 <_dtoa_r+0x88c>
 8008596:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008598:	2a00      	cmp	r2, #0
 800859a:	f000 80b7 	beq.w	800870c <_dtoa_r+0x884>
 800859e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085a4:	4646      	mov	r6, r8
 80085a6:	9a08      	ldr	r2, [sp, #32]
 80085a8:	2101      	movs	r1, #1
 80085aa:	441a      	add	r2, r3
 80085ac:	4658      	mov	r0, fp
 80085ae:	4498      	add	r8, r3
 80085b0:	9208      	str	r2, [sp, #32]
 80085b2:	f001 fab1 	bl	8009b18 <__i2b>
 80085b6:	4605      	mov	r5, r0
 80085b8:	b15e      	cbz	r6, 80085d2 <_dtoa_r+0x74a>
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd08      	ble.n	80085d2 <_dtoa_r+0x74a>
 80085c0:	42b3      	cmp	r3, r6
 80085c2:	9a08      	ldr	r2, [sp, #32]
 80085c4:	bfa8      	it	ge
 80085c6:	4633      	movge	r3, r6
 80085c8:	eba8 0803 	sub.w	r8, r8, r3
 80085cc:	1af6      	subs	r6, r6, r3
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	9308      	str	r3, [sp, #32]
 80085d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085d4:	b1f3      	cbz	r3, 8008614 <_dtoa_r+0x78c>
 80085d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 80b7 	beq.w	800874c <_dtoa_r+0x8c4>
 80085de:	b18c      	cbz	r4, 8008604 <_dtoa_r+0x77c>
 80085e0:	4629      	mov	r1, r5
 80085e2:	4622      	mov	r2, r4
 80085e4:	4658      	mov	r0, fp
 80085e6:	f001 fb57 	bl	8009c98 <__pow5mult>
 80085ea:	464a      	mov	r2, r9
 80085ec:	4601      	mov	r1, r0
 80085ee:	4605      	mov	r5, r0
 80085f0:	4658      	mov	r0, fp
 80085f2:	f001 faa7 	bl	8009b44 <__multiply>
 80085f6:	4649      	mov	r1, r9
 80085f8:	9004      	str	r0, [sp, #16]
 80085fa:	4658      	mov	r0, fp
 80085fc:	f001 f98e 	bl	800991c <_Bfree>
 8008600:	9b04      	ldr	r3, [sp, #16]
 8008602:	4699      	mov	r9, r3
 8008604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008606:	1b1a      	subs	r2, r3, r4
 8008608:	d004      	beq.n	8008614 <_dtoa_r+0x78c>
 800860a:	4649      	mov	r1, r9
 800860c:	4658      	mov	r0, fp
 800860e:	f001 fb43 	bl	8009c98 <__pow5mult>
 8008612:	4681      	mov	r9, r0
 8008614:	2101      	movs	r1, #1
 8008616:	4658      	mov	r0, fp
 8008618:	f001 fa7e 	bl	8009b18 <__i2b>
 800861c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800861e:	4604      	mov	r4, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 81cf 	beq.w	80089c4 <_dtoa_r+0xb3c>
 8008626:	461a      	mov	r2, r3
 8008628:	4601      	mov	r1, r0
 800862a:	4658      	mov	r0, fp
 800862c:	f001 fb34 	bl	8009c98 <__pow5mult>
 8008630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008632:	2b01      	cmp	r3, #1
 8008634:	4604      	mov	r4, r0
 8008636:	f300 8095 	bgt.w	8008764 <_dtoa_r+0x8dc>
 800863a:	9b02      	ldr	r3, [sp, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f040 8087 	bne.w	8008750 <_dtoa_r+0x8c8>
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008648:	2b00      	cmp	r3, #0
 800864a:	f040 8089 	bne.w	8008760 <_dtoa_r+0x8d8>
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008654:	0d1b      	lsrs	r3, r3, #20
 8008656:	051b      	lsls	r3, r3, #20
 8008658:	b12b      	cbz	r3, 8008666 <_dtoa_r+0x7de>
 800865a:	9b08      	ldr	r3, [sp, #32]
 800865c:	3301      	adds	r3, #1
 800865e:	9308      	str	r3, [sp, #32]
 8008660:	f108 0801 	add.w	r8, r8, #1
 8008664:	2301      	movs	r3, #1
 8008666:	930a      	str	r3, [sp, #40]	@ 0x28
 8008668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 81b0 	beq.w	80089d0 <_dtoa_r+0xb48>
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008676:	6918      	ldr	r0, [r3, #16]
 8008678:	f001 fa02 	bl	8009a80 <__hi0bits>
 800867c:	f1c0 0020 	rsb	r0, r0, #32
 8008680:	9b08      	ldr	r3, [sp, #32]
 8008682:	4418      	add	r0, r3
 8008684:	f010 001f 	ands.w	r0, r0, #31
 8008688:	d077      	beq.n	800877a <_dtoa_r+0x8f2>
 800868a:	f1c0 0320 	rsb	r3, r0, #32
 800868e:	2b04      	cmp	r3, #4
 8008690:	dd6b      	ble.n	800876a <_dtoa_r+0x8e2>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	f1c0 001c 	rsb	r0, r0, #28
 8008698:	4403      	add	r3, r0
 800869a:	4480      	add	r8, r0
 800869c:	4406      	add	r6, r0
 800869e:	9308      	str	r3, [sp, #32]
 80086a0:	f1b8 0f00 	cmp.w	r8, #0
 80086a4:	dd05      	ble.n	80086b2 <_dtoa_r+0x82a>
 80086a6:	4649      	mov	r1, r9
 80086a8:	4642      	mov	r2, r8
 80086aa:	4658      	mov	r0, fp
 80086ac:	f001 fb4e 	bl	8009d4c <__lshift>
 80086b0:	4681      	mov	r9, r0
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd05      	ble.n	80086c4 <_dtoa_r+0x83c>
 80086b8:	4621      	mov	r1, r4
 80086ba:	461a      	mov	r2, r3
 80086bc:	4658      	mov	r0, fp
 80086be:	f001 fb45 	bl	8009d4c <__lshift>
 80086c2:	4604      	mov	r4, r0
 80086c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d059      	beq.n	800877e <_dtoa_r+0x8f6>
 80086ca:	4621      	mov	r1, r4
 80086cc:	4648      	mov	r0, r9
 80086ce:	f001 fba9 	bl	8009e24 <__mcmp>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	da53      	bge.n	800877e <_dtoa_r+0x8f6>
 80086d6:	1e7b      	subs	r3, r7, #1
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	4649      	mov	r1, r9
 80086dc:	2300      	movs	r3, #0
 80086de:	220a      	movs	r2, #10
 80086e0:	4658      	mov	r0, fp
 80086e2:	f001 f93d 	bl	8009960 <__multadd>
 80086e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086e8:	4681      	mov	r9, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8172 	beq.w	80089d4 <_dtoa_r+0xb4c>
 80086f0:	2300      	movs	r3, #0
 80086f2:	4629      	mov	r1, r5
 80086f4:	220a      	movs	r2, #10
 80086f6:	4658      	mov	r0, fp
 80086f8:	f001 f932 	bl	8009960 <__multadd>
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	4605      	mov	r5, r0
 8008702:	dc67      	bgt.n	80087d4 <_dtoa_r+0x94c>
 8008704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008706:	2b02      	cmp	r3, #2
 8008708:	dc41      	bgt.n	800878e <_dtoa_r+0x906>
 800870a:	e063      	b.n	80087d4 <_dtoa_r+0x94c>
 800870c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800870e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008712:	e746      	b.n	80085a2 <_dtoa_r+0x71a>
 8008714:	9b07      	ldr	r3, [sp, #28]
 8008716:	1e5c      	subs	r4, r3, #1
 8008718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800871a:	42a3      	cmp	r3, r4
 800871c:	bfbf      	itttt	lt
 800871e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008720:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008722:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008724:	1ae3      	sublt	r3, r4, r3
 8008726:	bfb4      	ite	lt
 8008728:	18d2      	addlt	r2, r2, r3
 800872a:	1b1c      	subge	r4, r3, r4
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	bfbc      	itt	lt
 8008730:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008732:	2400      	movlt	r4, #0
 8008734:	2b00      	cmp	r3, #0
 8008736:	bfb5      	itete	lt
 8008738:	eba8 0603 	sublt.w	r6, r8, r3
 800873c:	9b07      	ldrge	r3, [sp, #28]
 800873e:	2300      	movlt	r3, #0
 8008740:	4646      	movge	r6, r8
 8008742:	e730      	b.n	80085a6 <_dtoa_r+0x71e>
 8008744:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008746:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008748:	4646      	mov	r6, r8
 800874a:	e735      	b.n	80085b8 <_dtoa_r+0x730>
 800874c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800874e:	e75c      	b.n	800860a <_dtoa_r+0x782>
 8008750:	2300      	movs	r3, #0
 8008752:	e788      	b.n	8008666 <_dtoa_r+0x7de>
 8008754:	3fe00000 	.word	0x3fe00000
 8008758:	40240000 	.word	0x40240000
 800875c:	40140000 	.word	0x40140000
 8008760:	9b02      	ldr	r3, [sp, #8]
 8008762:	e780      	b.n	8008666 <_dtoa_r+0x7de>
 8008764:	2300      	movs	r3, #0
 8008766:	930a      	str	r3, [sp, #40]	@ 0x28
 8008768:	e782      	b.n	8008670 <_dtoa_r+0x7e8>
 800876a:	d099      	beq.n	80086a0 <_dtoa_r+0x818>
 800876c:	9a08      	ldr	r2, [sp, #32]
 800876e:	331c      	adds	r3, #28
 8008770:	441a      	add	r2, r3
 8008772:	4498      	add	r8, r3
 8008774:	441e      	add	r6, r3
 8008776:	9208      	str	r2, [sp, #32]
 8008778:	e792      	b.n	80086a0 <_dtoa_r+0x818>
 800877a:	4603      	mov	r3, r0
 800877c:	e7f6      	b.n	800876c <_dtoa_r+0x8e4>
 800877e:	9b07      	ldr	r3, [sp, #28]
 8008780:	9704      	str	r7, [sp, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	dc20      	bgt.n	80087c8 <_dtoa_r+0x940>
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800878a:	2b02      	cmp	r3, #2
 800878c:	dd1e      	ble.n	80087cc <_dtoa_r+0x944>
 800878e:	9b00      	ldr	r3, [sp, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f47f aec0 	bne.w	8008516 <_dtoa_r+0x68e>
 8008796:	4621      	mov	r1, r4
 8008798:	2205      	movs	r2, #5
 800879a:	4658      	mov	r0, fp
 800879c:	f001 f8e0 	bl	8009960 <__multadd>
 80087a0:	4601      	mov	r1, r0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4648      	mov	r0, r9
 80087a6:	f001 fb3d 	bl	8009e24 <__mcmp>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f77f aeb3 	ble.w	8008516 <_dtoa_r+0x68e>
 80087b0:	4656      	mov	r6, sl
 80087b2:	2331      	movs	r3, #49	@ 0x31
 80087b4:	f806 3b01 	strb.w	r3, [r6], #1
 80087b8:	9b04      	ldr	r3, [sp, #16]
 80087ba:	3301      	adds	r3, #1
 80087bc:	9304      	str	r3, [sp, #16]
 80087be:	e6ae      	b.n	800851e <_dtoa_r+0x696>
 80087c0:	9c07      	ldr	r4, [sp, #28]
 80087c2:	9704      	str	r7, [sp, #16]
 80087c4:	4625      	mov	r5, r4
 80087c6:	e7f3      	b.n	80087b0 <_dtoa_r+0x928>
 80087c8:	9b07      	ldr	r3, [sp, #28]
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8104 	beq.w	80089dc <_dtoa_r+0xb54>
 80087d4:	2e00      	cmp	r6, #0
 80087d6:	dd05      	ble.n	80087e4 <_dtoa_r+0x95c>
 80087d8:	4629      	mov	r1, r5
 80087da:	4632      	mov	r2, r6
 80087dc:	4658      	mov	r0, fp
 80087de:	f001 fab5 	bl	8009d4c <__lshift>
 80087e2:	4605      	mov	r5, r0
 80087e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d05a      	beq.n	80088a0 <_dtoa_r+0xa18>
 80087ea:	6869      	ldr	r1, [r5, #4]
 80087ec:	4658      	mov	r0, fp
 80087ee:	f001 f855 	bl	800989c <_Balloc>
 80087f2:	4606      	mov	r6, r0
 80087f4:	b928      	cbnz	r0, 8008802 <_dtoa_r+0x97a>
 80087f6:	4b84      	ldr	r3, [pc, #528]	@ (8008a08 <_dtoa_r+0xb80>)
 80087f8:	4602      	mov	r2, r0
 80087fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087fe:	f7ff bb5a 	b.w	8007eb6 <_dtoa_r+0x2e>
 8008802:	692a      	ldr	r2, [r5, #16]
 8008804:	3202      	adds	r2, #2
 8008806:	0092      	lsls	r2, r2, #2
 8008808:	f105 010c 	add.w	r1, r5, #12
 800880c:	300c      	adds	r0, #12
 800880e:	f7ff fa94 	bl	8007d3a <memcpy>
 8008812:	2201      	movs	r2, #1
 8008814:	4631      	mov	r1, r6
 8008816:	4658      	mov	r0, fp
 8008818:	f001 fa98 	bl	8009d4c <__lshift>
 800881c:	f10a 0301 	add.w	r3, sl, #1
 8008820:	9307      	str	r3, [sp, #28]
 8008822:	9b00      	ldr	r3, [sp, #0]
 8008824:	4453      	add	r3, sl
 8008826:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	462f      	mov	r7, r5
 8008830:	930a      	str	r3, [sp, #40]	@ 0x28
 8008832:	4605      	mov	r5, r0
 8008834:	9b07      	ldr	r3, [sp, #28]
 8008836:	4621      	mov	r1, r4
 8008838:	3b01      	subs	r3, #1
 800883a:	4648      	mov	r0, r9
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	f7ff fa99 	bl	8007d74 <quorem>
 8008842:	4639      	mov	r1, r7
 8008844:	9002      	str	r0, [sp, #8]
 8008846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800884a:	4648      	mov	r0, r9
 800884c:	f001 faea 	bl	8009e24 <__mcmp>
 8008850:	462a      	mov	r2, r5
 8008852:	9008      	str	r0, [sp, #32]
 8008854:	4621      	mov	r1, r4
 8008856:	4658      	mov	r0, fp
 8008858:	f001 fb00 	bl	8009e5c <__mdiff>
 800885c:	68c2      	ldr	r2, [r0, #12]
 800885e:	4606      	mov	r6, r0
 8008860:	bb02      	cbnz	r2, 80088a4 <_dtoa_r+0xa1c>
 8008862:	4601      	mov	r1, r0
 8008864:	4648      	mov	r0, r9
 8008866:	f001 fadd 	bl	8009e24 <__mcmp>
 800886a:	4602      	mov	r2, r0
 800886c:	4631      	mov	r1, r6
 800886e:	4658      	mov	r0, fp
 8008870:	920e      	str	r2, [sp, #56]	@ 0x38
 8008872:	f001 f853 	bl	800991c <_Bfree>
 8008876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008878:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800887a:	9e07      	ldr	r6, [sp, #28]
 800887c:	ea43 0102 	orr.w	r1, r3, r2
 8008880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008882:	4319      	orrs	r1, r3
 8008884:	d110      	bne.n	80088a8 <_dtoa_r+0xa20>
 8008886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800888a:	d029      	beq.n	80088e0 <_dtoa_r+0xa58>
 800888c:	9b08      	ldr	r3, [sp, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd02      	ble.n	8008898 <_dtoa_r+0xa10>
 8008892:	9b02      	ldr	r3, [sp, #8]
 8008894:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008898:	9b00      	ldr	r3, [sp, #0]
 800889a:	f883 8000 	strb.w	r8, [r3]
 800889e:	e63f      	b.n	8008520 <_dtoa_r+0x698>
 80088a0:	4628      	mov	r0, r5
 80088a2:	e7bb      	b.n	800881c <_dtoa_r+0x994>
 80088a4:	2201      	movs	r2, #1
 80088a6:	e7e1      	b.n	800886c <_dtoa_r+0x9e4>
 80088a8:	9b08      	ldr	r3, [sp, #32]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	db04      	blt.n	80088b8 <_dtoa_r+0xa30>
 80088ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088b0:	430b      	orrs	r3, r1
 80088b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088b4:	430b      	orrs	r3, r1
 80088b6:	d120      	bne.n	80088fa <_dtoa_r+0xa72>
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	dded      	ble.n	8008898 <_dtoa_r+0xa10>
 80088bc:	4649      	mov	r1, r9
 80088be:	2201      	movs	r2, #1
 80088c0:	4658      	mov	r0, fp
 80088c2:	f001 fa43 	bl	8009d4c <__lshift>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4681      	mov	r9, r0
 80088ca:	f001 faab 	bl	8009e24 <__mcmp>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	dc03      	bgt.n	80088da <_dtoa_r+0xa52>
 80088d2:	d1e1      	bne.n	8008898 <_dtoa_r+0xa10>
 80088d4:	f018 0f01 	tst.w	r8, #1
 80088d8:	d0de      	beq.n	8008898 <_dtoa_r+0xa10>
 80088da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088de:	d1d8      	bne.n	8008892 <_dtoa_r+0xa0a>
 80088e0:	9a00      	ldr	r2, [sp, #0]
 80088e2:	2339      	movs	r3, #57	@ 0x39
 80088e4:	7013      	strb	r3, [r2, #0]
 80088e6:	4633      	mov	r3, r6
 80088e8:	461e      	mov	r6, r3
 80088ea:	3b01      	subs	r3, #1
 80088ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088f0:	2a39      	cmp	r2, #57	@ 0x39
 80088f2:	d052      	beq.n	800899a <_dtoa_r+0xb12>
 80088f4:	3201      	adds	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]
 80088f8:	e612      	b.n	8008520 <_dtoa_r+0x698>
 80088fa:	2a00      	cmp	r2, #0
 80088fc:	dd07      	ble.n	800890e <_dtoa_r+0xa86>
 80088fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008902:	d0ed      	beq.n	80088e0 <_dtoa_r+0xa58>
 8008904:	9a00      	ldr	r2, [sp, #0]
 8008906:	f108 0301 	add.w	r3, r8, #1
 800890a:	7013      	strb	r3, [r2, #0]
 800890c:	e608      	b.n	8008520 <_dtoa_r+0x698>
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	9a07      	ldr	r2, [sp, #28]
 8008912:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008918:	4293      	cmp	r3, r2
 800891a:	d028      	beq.n	800896e <_dtoa_r+0xae6>
 800891c:	4649      	mov	r1, r9
 800891e:	2300      	movs	r3, #0
 8008920:	220a      	movs	r2, #10
 8008922:	4658      	mov	r0, fp
 8008924:	f001 f81c 	bl	8009960 <__multadd>
 8008928:	42af      	cmp	r7, r5
 800892a:	4681      	mov	r9, r0
 800892c:	f04f 0300 	mov.w	r3, #0
 8008930:	f04f 020a 	mov.w	r2, #10
 8008934:	4639      	mov	r1, r7
 8008936:	4658      	mov	r0, fp
 8008938:	d107      	bne.n	800894a <_dtoa_r+0xac2>
 800893a:	f001 f811 	bl	8009960 <__multadd>
 800893e:	4607      	mov	r7, r0
 8008940:	4605      	mov	r5, r0
 8008942:	9b07      	ldr	r3, [sp, #28]
 8008944:	3301      	adds	r3, #1
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	e774      	b.n	8008834 <_dtoa_r+0x9ac>
 800894a:	f001 f809 	bl	8009960 <__multadd>
 800894e:	4629      	mov	r1, r5
 8008950:	4607      	mov	r7, r0
 8008952:	2300      	movs	r3, #0
 8008954:	220a      	movs	r2, #10
 8008956:	4658      	mov	r0, fp
 8008958:	f001 f802 	bl	8009960 <__multadd>
 800895c:	4605      	mov	r5, r0
 800895e:	e7f0      	b.n	8008942 <_dtoa_r+0xaba>
 8008960:	9b00      	ldr	r3, [sp, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfcc      	ite	gt
 8008966:	461e      	movgt	r6, r3
 8008968:	2601      	movle	r6, #1
 800896a:	4456      	add	r6, sl
 800896c:	2700      	movs	r7, #0
 800896e:	4649      	mov	r1, r9
 8008970:	2201      	movs	r2, #1
 8008972:	4658      	mov	r0, fp
 8008974:	f001 f9ea 	bl	8009d4c <__lshift>
 8008978:	4621      	mov	r1, r4
 800897a:	4681      	mov	r9, r0
 800897c:	f001 fa52 	bl	8009e24 <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	dcb0      	bgt.n	80088e6 <_dtoa_r+0xa5e>
 8008984:	d102      	bne.n	800898c <_dtoa_r+0xb04>
 8008986:	f018 0f01 	tst.w	r8, #1
 800898a:	d1ac      	bne.n	80088e6 <_dtoa_r+0xa5e>
 800898c:	4633      	mov	r3, r6
 800898e:	461e      	mov	r6, r3
 8008990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008994:	2a30      	cmp	r2, #48	@ 0x30
 8008996:	d0fa      	beq.n	800898e <_dtoa_r+0xb06>
 8008998:	e5c2      	b.n	8008520 <_dtoa_r+0x698>
 800899a:	459a      	cmp	sl, r3
 800899c:	d1a4      	bne.n	80088e8 <_dtoa_r+0xa60>
 800899e:	9b04      	ldr	r3, [sp, #16]
 80089a0:	3301      	adds	r3, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	2331      	movs	r3, #49	@ 0x31
 80089a6:	f88a 3000 	strb.w	r3, [sl]
 80089aa:	e5b9      	b.n	8008520 <_dtoa_r+0x698>
 80089ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a0c <_dtoa_r+0xb84>
 80089b2:	b11b      	cbz	r3, 80089bc <_dtoa_r+0xb34>
 80089b4:	f10a 0308 	add.w	r3, sl, #8
 80089b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	4650      	mov	r0, sl
 80089be:	b019      	add	sp, #100	@ 0x64
 80089c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	f77f ae37 	ble.w	800863a <_dtoa_r+0x7b2>
 80089cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80089d0:	2001      	movs	r0, #1
 80089d2:	e655      	b.n	8008680 <_dtoa_r+0x7f8>
 80089d4:	9b00      	ldr	r3, [sp, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f77f aed6 	ble.w	8008788 <_dtoa_r+0x900>
 80089dc:	4656      	mov	r6, sl
 80089de:	4621      	mov	r1, r4
 80089e0:	4648      	mov	r0, r9
 80089e2:	f7ff f9c7 	bl	8007d74 <quorem>
 80089e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089ea:	f806 8b01 	strb.w	r8, [r6], #1
 80089ee:	9b00      	ldr	r3, [sp, #0]
 80089f0:	eba6 020a 	sub.w	r2, r6, sl
 80089f4:	4293      	cmp	r3, r2
 80089f6:	ddb3      	ble.n	8008960 <_dtoa_r+0xad8>
 80089f8:	4649      	mov	r1, r9
 80089fa:	2300      	movs	r3, #0
 80089fc:	220a      	movs	r2, #10
 80089fe:	4658      	mov	r0, fp
 8008a00:	f000 ffae 	bl	8009960 <__multadd>
 8008a04:	4681      	mov	r9, r0
 8008a06:	e7ea      	b.n	80089de <_dtoa_r+0xb56>
 8008a08:	0800abdd 	.word	0x0800abdd
 8008a0c:	0800ab61 	.word	0x0800ab61

08008a10 <rshift>:
 8008a10:	6903      	ldr	r3, [r0, #16]
 8008a12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a1e:	f100 0414 	add.w	r4, r0, #20
 8008a22:	dd45      	ble.n	8008ab0 <rshift+0xa0>
 8008a24:	f011 011f 	ands.w	r1, r1, #31
 8008a28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a30:	d10c      	bne.n	8008a4c <rshift+0x3c>
 8008a32:	f100 0710 	add.w	r7, r0, #16
 8008a36:	4629      	mov	r1, r5
 8008a38:	42b1      	cmp	r1, r6
 8008a3a:	d334      	bcc.n	8008aa6 <rshift+0x96>
 8008a3c:	1a9b      	subs	r3, r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	1eea      	subs	r2, r5, #3
 8008a42:	4296      	cmp	r6, r2
 8008a44:	bf38      	it	cc
 8008a46:	2300      	movcc	r3, #0
 8008a48:	4423      	add	r3, r4
 8008a4a:	e015      	b.n	8008a78 <rshift+0x68>
 8008a4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a50:	f1c1 0820 	rsb	r8, r1, #32
 8008a54:	40cf      	lsrs	r7, r1
 8008a56:	f105 0e04 	add.w	lr, r5, #4
 8008a5a:	46a1      	mov	r9, r4
 8008a5c:	4576      	cmp	r6, lr
 8008a5e:	46f4      	mov	ip, lr
 8008a60:	d815      	bhi.n	8008a8e <rshift+0x7e>
 8008a62:	1a9a      	subs	r2, r3, r2
 8008a64:	0092      	lsls	r2, r2, #2
 8008a66:	3a04      	subs	r2, #4
 8008a68:	3501      	adds	r5, #1
 8008a6a:	42ae      	cmp	r6, r5
 8008a6c:	bf38      	it	cc
 8008a6e:	2200      	movcc	r2, #0
 8008a70:	18a3      	adds	r3, r4, r2
 8008a72:	50a7      	str	r7, [r4, r2]
 8008a74:	b107      	cbz	r7, 8008a78 <rshift+0x68>
 8008a76:	3304      	adds	r3, #4
 8008a78:	1b1a      	subs	r2, r3, r4
 8008a7a:	42a3      	cmp	r3, r4
 8008a7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a80:	bf08      	it	eq
 8008a82:	2300      	moveq	r3, #0
 8008a84:	6102      	str	r2, [r0, #16]
 8008a86:	bf08      	it	eq
 8008a88:	6143      	streq	r3, [r0, #20]
 8008a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	f8dc c000 	ldr.w	ip, [ip]
 8008a92:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a96:	ea4c 0707 	orr.w	r7, ip, r7
 8008a9a:	f849 7b04 	str.w	r7, [r9], #4
 8008a9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008aa2:	40cf      	lsrs	r7, r1
 8008aa4:	e7da      	b.n	8008a5c <rshift+0x4c>
 8008aa6:	f851 cb04 	ldr.w	ip, [r1], #4
 8008aaa:	f847 cf04 	str.w	ip, [r7, #4]!
 8008aae:	e7c3      	b.n	8008a38 <rshift+0x28>
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	e7e1      	b.n	8008a78 <rshift+0x68>

08008ab4 <__hexdig_fun>:
 8008ab4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008ab8:	2b09      	cmp	r3, #9
 8008aba:	d802      	bhi.n	8008ac2 <__hexdig_fun+0xe>
 8008abc:	3820      	subs	r0, #32
 8008abe:	b2c0      	uxtb	r0, r0
 8008ac0:	4770      	bx	lr
 8008ac2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008ac6:	2b05      	cmp	r3, #5
 8008ac8:	d801      	bhi.n	8008ace <__hexdig_fun+0x1a>
 8008aca:	3847      	subs	r0, #71	@ 0x47
 8008acc:	e7f7      	b.n	8008abe <__hexdig_fun+0xa>
 8008ace:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d801      	bhi.n	8008ada <__hexdig_fun+0x26>
 8008ad6:	3827      	subs	r0, #39	@ 0x27
 8008ad8:	e7f1      	b.n	8008abe <__hexdig_fun+0xa>
 8008ada:	2000      	movs	r0, #0
 8008adc:	4770      	bx	lr
	...

08008ae0 <__gethex>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	468a      	mov	sl, r1
 8008ae8:	9302      	str	r3, [sp, #8]
 8008aea:	680b      	ldr	r3, [r1, #0]
 8008aec:	9001      	str	r0, [sp, #4]
 8008aee:	4690      	mov	r8, r2
 8008af0:	1c9c      	adds	r4, r3, #2
 8008af2:	46a1      	mov	r9, r4
 8008af4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008af8:	2830      	cmp	r0, #48	@ 0x30
 8008afa:	d0fa      	beq.n	8008af2 <__gethex+0x12>
 8008afc:	eba9 0303 	sub.w	r3, r9, r3
 8008b00:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b04:	f7ff ffd6 	bl	8008ab4 <__hexdig_fun>
 8008b08:	4605      	mov	r5, r0
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d168      	bne.n	8008be0 <__gethex+0x100>
 8008b0e:	49a0      	ldr	r1, [pc, #640]	@ (8008d90 <__gethex+0x2b0>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	4648      	mov	r0, r9
 8008b14:	f7ff f8b0 	bl	8007c78 <strncmp>
 8008b18:	4607      	mov	r7, r0
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d167      	bne.n	8008bee <__gethex+0x10e>
 8008b1e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008b22:	4626      	mov	r6, r4
 8008b24:	f7ff ffc6 	bl	8008ab4 <__hexdig_fun>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d062      	beq.n	8008bf2 <__gethex+0x112>
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	7818      	ldrb	r0, [r3, #0]
 8008b30:	2830      	cmp	r0, #48	@ 0x30
 8008b32:	4699      	mov	r9, r3
 8008b34:	f103 0301 	add.w	r3, r3, #1
 8008b38:	d0f9      	beq.n	8008b2e <__gethex+0x4e>
 8008b3a:	f7ff ffbb 	bl	8008ab4 <__hexdig_fun>
 8008b3e:	fab0 f580 	clz	r5, r0
 8008b42:	096d      	lsrs	r5, r5, #5
 8008b44:	f04f 0b01 	mov.w	fp, #1
 8008b48:	464a      	mov	r2, r9
 8008b4a:	4616      	mov	r6, r2
 8008b4c:	3201      	adds	r2, #1
 8008b4e:	7830      	ldrb	r0, [r6, #0]
 8008b50:	f7ff ffb0 	bl	8008ab4 <__hexdig_fun>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d1f8      	bne.n	8008b4a <__gethex+0x6a>
 8008b58:	498d      	ldr	r1, [pc, #564]	@ (8008d90 <__gethex+0x2b0>)
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff f88b 	bl	8007c78 <strncmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d13f      	bne.n	8008be6 <__gethex+0x106>
 8008b66:	b944      	cbnz	r4, 8008b7a <__gethex+0x9a>
 8008b68:	1c74      	adds	r4, r6, #1
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	3201      	adds	r2, #1
 8008b70:	7830      	ldrb	r0, [r6, #0]
 8008b72:	f7ff ff9f 	bl	8008ab4 <__hexdig_fun>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d1f8      	bne.n	8008b6c <__gethex+0x8c>
 8008b7a:	1ba4      	subs	r4, r4, r6
 8008b7c:	00a7      	lsls	r7, r4, #2
 8008b7e:	7833      	ldrb	r3, [r6, #0]
 8008b80:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008b84:	2b50      	cmp	r3, #80	@ 0x50
 8008b86:	d13e      	bne.n	8008c06 <__gethex+0x126>
 8008b88:	7873      	ldrb	r3, [r6, #1]
 8008b8a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b8c:	d033      	beq.n	8008bf6 <__gethex+0x116>
 8008b8e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b90:	d034      	beq.n	8008bfc <__gethex+0x11c>
 8008b92:	1c71      	adds	r1, r6, #1
 8008b94:	2400      	movs	r4, #0
 8008b96:	7808      	ldrb	r0, [r1, #0]
 8008b98:	f7ff ff8c 	bl	8008ab4 <__hexdig_fun>
 8008b9c:	1e43      	subs	r3, r0, #1
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b18      	cmp	r3, #24
 8008ba2:	d830      	bhi.n	8008c06 <__gethex+0x126>
 8008ba4:	f1a0 0210 	sub.w	r2, r0, #16
 8008ba8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008bac:	f7ff ff82 	bl	8008ab4 <__hexdig_fun>
 8008bb0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008bb4:	fa5f fc8c 	uxtb.w	ip, ip
 8008bb8:	f1bc 0f18 	cmp.w	ip, #24
 8008bbc:	f04f 030a 	mov.w	r3, #10
 8008bc0:	d91e      	bls.n	8008c00 <__gethex+0x120>
 8008bc2:	b104      	cbz	r4, 8008bc6 <__gethex+0xe6>
 8008bc4:	4252      	negs	r2, r2
 8008bc6:	4417      	add	r7, r2
 8008bc8:	f8ca 1000 	str.w	r1, [sl]
 8008bcc:	b1ed      	cbz	r5, 8008c0a <__gethex+0x12a>
 8008bce:	f1bb 0f00 	cmp.w	fp, #0
 8008bd2:	bf0c      	ite	eq
 8008bd4:	2506      	moveq	r5, #6
 8008bd6:	2500      	movne	r5, #0
 8008bd8:	4628      	mov	r0, r5
 8008bda:	b005      	add	sp, #20
 8008bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be0:	2500      	movs	r5, #0
 8008be2:	462c      	mov	r4, r5
 8008be4:	e7b0      	b.n	8008b48 <__gethex+0x68>
 8008be6:	2c00      	cmp	r4, #0
 8008be8:	d1c7      	bne.n	8008b7a <__gethex+0x9a>
 8008bea:	4627      	mov	r7, r4
 8008bec:	e7c7      	b.n	8008b7e <__gethex+0x9e>
 8008bee:	464e      	mov	r6, r9
 8008bf0:	462f      	mov	r7, r5
 8008bf2:	2501      	movs	r5, #1
 8008bf4:	e7c3      	b.n	8008b7e <__gethex+0x9e>
 8008bf6:	2400      	movs	r4, #0
 8008bf8:	1cb1      	adds	r1, r6, #2
 8008bfa:	e7cc      	b.n	8008b96 <__gethex+0xb6>
 8008bfc:	2401      	movs	r4, #1
 8008bfe:	e7fb      	b.n	8008bf8 <__gethex+0x118>
 8008c00:	fb03 0002 	mla	r0, r3, r2, r0
 8008c04:	e7ce      	b.n	8008ba4 <__gethex+0xc4>
 8008c06:	4631      	mov	r1, r6
 8008c08:	e7de      	b.n	8008bc8 <__gethex+0xe8>
 8008c0a:	eba6 0309 	sub.w	r3, r6, r9
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	4629      	mov	r1, r5
 8008c12:	2b07      	cmp	r3, #7
 8008c14:	dc0a      	bgt.n	8008c2c <__gethex+0x14c>
 8008c16:	9801      	ldr	r0, [sp, #4]
 8008c18:	f000 fe40 	bl	800989c <_Balloc>
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	b940      	cbnz	r0, 8008c32 <__gethex+0x152>
 8008c20:	4b5c      	ldr	r3, [pc, #368]	@ (8008d94 <__gethex+0x2b4>)
 8008c22:	4602      	mov	r2, r0
 8008c24:	21e4      	movs	r1, #228	@ 0xe4
 8008c26:	485c      	ldr	r0, [pc, #368]	@ (8008d98 <__gethex+0x2b8>)
 8008c28:	f001 fcf2 	bl	800a610 <__assert_func>
 8008c2c:	3101      	adds	r1, #1
 8008c2e:	105b      	asrs	r3, r3, #1
 8008c30:	e7ef      	b.n	8008c12 <__gethex+0x132>
 8008c32:	f100 0a14 	add.w	sl, r0, #20
 8008c36:	2300      	movs	r3, #0
 8008c38:	4655      	mov	r5, sl
 8008c3a:	469b      	mov	fp, r3
 8008c3c:	45b1      	cmp	r9, r6
 8008c3e:	d337      	bcc.n	8008cb0 <__gethex+0x1d0>
 8008c40:	f845 bb04 	str.w	fp, [r5], #4
 8008c44:	eba5 050a 	sub.w	r5, r5, sl
 8008c48:	10ad      	asrs	r5, r5, #2
 8008c4a:	6125      	str	r5, [r4, #16]
 8008c4c:	4658      	mov	r0, fp
 8008c4e:	f000 ff17 	bl	8009a80 <__hi0bits>
 8008c52:	016d      	lsls	r5, r5, #5
 8008c54:	f8d8 6000 	ldr.w	r6, [r8]
 8008c58:	1a2d      	subs	r5, r5, r0
 8008c5a:	42b5      	cmp	r5, r6
 8008c5c:	dd54      	ble.n	8008d08 <__gethex+0x228>
 8008c5e:	1bad      	subs	r5, r5, r6
 8008c60:	4629      	mov	r1, r5
 8008c62:	4620      	mov	r0, r4
 8008c64:	f001 faab 	bl	800a1be <__any_on>
 8008c68:	4681      	mov	r9, r0
 8008c6a:	b178      	cbz	r0, 8008c8c <__gethex+0x1ac>
 8008c6c:	1e6b      	subs	r3, r5, #1
 8008c6e:	1159      	asrs	r1, r3, #5
 8008c70:	f003 021f 	and.w	r2, r3, #31
 8008c74:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008c78:	f04f 0901 	mov.w	r9, #1
 8008c7c:	fa09 f202 	lsl.w	r2, r9, r2
 8008c80:	420a      	tst	r2, r1
 8008c82:	d003      	beq.n	8008c8c <__gethex+0x1ac>
 8008c84:	454b      	cmp	r3, r9
 8008c86:	dc36      	bgt.n	8008cf6 <__gethex+0x216>
 8008c88:	f04f 0902 	mov.w	r9, #2
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f7ff febe 	bl	8008a10 <rshift>
 8008c94:	442f      	add	r7, r5
 8008c96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c9a:	42bb      	cmp	r3, r7
 8008c9c:	da42      	bge.n	8008d24 <__gethex+0x244>
 8008c9e:	9801      	ldr	r0, [sp, #4]
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	f000 fe3b 	bl	800991c <_Bfree>
 8008ca6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ca8:	2300      	movs	r3, #0
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	25a3      	movs	r5, #163	@ 0xa3
 8008cae:	e793      	b.n	8008bd8 <__gethex+0xf8>
 8008cb0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008cb4:	2a2e      	cmp	r2, #46	@ 0x2e
 8008cb6:	d012      	beq.n	8008cde <__gethex+0x1fe>
 8008cb8:	2b20      	cmp	r3, #32
 8008cba:	d104      	bne.n	8008cc6 <__gethex+0x1e6>
 8008cbc:	f845 bb04 	str.w	fp, [r5], #4
 8008cc0:	f04f 0b00 	mov.w	fp, #0
 8008cc4:	465b      	mov	r3, fp
 8008cc6:	7830      	ldrb	r0, [r6, #0]
 8008cc8:	9303      	str	r3, [sp, #12]
 8008cca:	f7ff fef3 	bl	8008ab4 <__hexdig_fun>
 8008cce:	9b03      	ldr	r3, [sp, #12]
 8008cd0:	f000 000f 	and.w	r0, r0, #15
 8008cd4:	4098      	lsls	r0, r3
 8008cd6:	ea4b 0b00 	orr.w	fp, fp, r0
 8008cda:	3304      	adds	r3, #4
 8008cdc:	e7ae      	b.n	8008c3c <__gethex+0x15c>
 8008cde:	45b1      	cmp	r9, r6
 8008ce0:	d8ea      	bhi.n	8008cb8 <__gethex+0x1d8>
 8008ce2:	492b      	ldr	r1, [pc, #172]	@ (8008d90 <__gethex+0x2b0>)
 8008ce4:	9303      	str	r3, [sp, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7fe ffc5 	bl	8007c78 <strncmp>
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d1e1      	bne.n	8008cb8 <__gethex+0x1d8>
 8008cf4:	e7a2      	b.n	8008c3c <__gethex+0x15c>
 8008cf6:	1ea9      	subs	r1, r5, #2
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f001 fa60 	bl	800a1be <__any_on>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d0c2      	beq.n	8008c88 <__gethex+0x1a8>
 8008d02:	f04f 0903 	mov.w	r9, #3
 8008d06:	e7c1      	b.n	8008c8c <__gethex+0x1ac>
 8008d08:	da09      	bge.n	8008d1e <__gethex+0x23e>
 8008d0a:	1b75      	subs	r5, r6, r5
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	9801      	ldr	r0, [sp, #4]
 8008d10:	462a      	mov	r2, r5
 8008d12:	f001 f81b 	bl	8009d4c <__lshift>
 8008d16:	1b7f      	subs	r7, r7, r5
 8008d18:	4604      	mov	r4, r0
 8008d1a:	f100 0a14 	add.w	sl, r0, #20
 8008d1e:	f04f 0900 	mov.w	r9, #0
 8008d22:	e7b8      	b.n	8008c96 <__gethex+0x1b6>
 8008d24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d28:	42bd      	cmp	r5, r7
 8008d2a:	dd6f      	ble.n	8008e0c <__gethex+0x32c>
 8008d2c:	1bed      	subs	r5, r5, r7
 8008d2e:	42ae      	cmp	r6, r5
 8008d30:	dc34      	bgt.n	8008d9c <__gethex+0x2bc>
 8008d32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d022      	beq.n	8008d80 <__gethex+0x2a0>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d024      	beq.n	8008d88 <__gethex+0x2a8>
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d115      	bne.n	8008d6e <__gethex+0x28e>
 8008d42:	42ae      	cmp	r6, r5
 8008d44:	d113      	bne.n	8008d6e <__gethex+0x28e>
 8008d46:	2e01      	cmp	r6, #1
 8008d48:	d10b      	bne.n	8008d62 <__gethex+0x282>
 8008d4a:	9a02      	ldr	r2, [sp, #8]
 8008d4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	2301      	movs	r3, #1
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	f8ca 3000 	str.w	r3, [sl]
 8008d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d5c:	2562      	movs	r5, #98	@ 0x62
 8008d5e:	601c      	str	r4, [r3, #0]
 8008d60:	e73a      	b.n	8008bd8 <__gethex+0xf8>
 8008d62:	1e71      	subs	r1, r6, #1
 8008d64:	4620      	mov	r0, r4
 8008d66:	f001 fa2a 	bl	800a1be <__any_on>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d1ed      	bne.n	8008d4a <__gethex+0x26a>
 8008d6e:	9801      	ldr	r0, [sp, #4]
 8008d70:	4621      	mov	r1, r4
 8008d72:	f000 fdd3 	bl	800991c <_Bfree>
 8008d76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	2550      	movs	r5, #80	@ 0x50
 8008d7e:	e72b      	b.n	8008bd8 <__gethex+0xf8>
 8008d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1f3      	bne.n	8008d6e <__gethex+0x28e>
 8008d86:	e7e0      	b.n	8008d4a <__gethex+0x26a>
 8008d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1dd      	bne.n	8008d4a <__gethex+0x26a>
 8008d8e:	e7ee      	b.n	8008d6e <__gethex+0x28e>
 8008d90:	0800aa05 	.word	0x0800aa05
 8008d94:	0800abdd 	.word	0x0800abdd
 8008d98:	0800abee 	.word	0x0800abee
 8008d9c:	1e6f      	subs	r7, r5, #1
 8008d9e:	f1b9 0f00 	cmp.w	r9, #0
 8008da2:	d130      	bne.n	8008e06 <__gethex+0x326>
 8008da4:	b127      	cbz	r7, 8008db0 <__gethex+0x2d0>
 8008da6:	4639      	mov	r1, r7
 8008da8:	4620      	mov	r0, r4
 8008daa:	f001 fa08 	bl	800a1be <__any_on>
 8008dae:	4681      	mov	r9, r0
 8008db0:	117a      	asrs	r2, r7, #5
 8008db2:	2301      	movs	r3, #1
 8008db4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008db8:	f007 071f 	and.w	r7, r7, #31
 8008dbc:	40bb      	lsls	r3, r7
 8008dbe:	4213      	tst	r3, r2
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	bf18      	it	ne
 8008dc6:	f049 0902 	orrne.w	r9, r9, #2
 8008dca:	f7ff fe21 	bl	8008a10 <rshift>
 8008dce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008dd2:	1b76      	subs	r6, r6, r5
 8008dd4:	2502      	movs	r5, #2
 8008dd6:	f1b9 0f00 	cmp.w	r9, #0
 8008dda:	d047      	beq.n	8008e6c <__gethex+0x38c>
 8008ddc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d015      	beq.n	8008e10 <__gethex+0x330>
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d017      	beq.n	8008e18 <__gethex+0x338>
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d109      	bne.n	8008e00 <__gethex+0x320>
 8008dec:	f019 0f02 	tst.w	r9, #2
 8008df0:	d006      	beq.n	8008e00 <__gethex+0x320>
 8008df2:	f8da 3000 	ldr.w	r3, [sl]
 8008df6:	ea49 0903 	orr.w	r9, r9, r3
 8008dfa:	f019 0f01 	tst.w	r9, #1
 8008dfe:	d10e      	bne.n	8008e1e <__gethex+0x33e>
 8008e00:	f045 0510 	orr.w	r5, r5, #16
 8008e04:	e032      	b.n	8008e6c <__gethex+0x38c>
 8008e06:	f04f 0901 	mov.w	r9, #1
 8008e0a:	e7d1      	b.n	8008db0 <__gethex+0x2d0>
 8008e0c:	2501      	movs	r5, #1
 8008e0e:	e7e2      	b.n	8008dd6 <__gethex+0x2f6>
 8008e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e12:	f1c3 0301 	rsb	r3, r3, #1
 8008e16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f0      	beq.n	8008e00 <__gethex+0x320>
 8008e1e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e22:	f104 0314 	add.w	r3, r4, #20
 8008e26:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e2a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e2e:	f04f 0c00 	mov.w	ip, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e38:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008e3c:	d01b      	beq.n	8008e76 <__gethex+0x396>
 8008e3e:	3201      	adds	r2, #1
 8008e40:	6002      	str	r2, [r0, #0]
 8008e42:	2d02      	cmp	r5, #2
 8008e44:	f104 0314 	add.w	r3, r4, #20
 8008e48:	d13c      	bne.n	8008ec4 <__gethex+0x3e4>
 8008e4a:	f8d8 2000 	ldr.w	r2, [r8]
 8008e4e:	3a01      	subs	r2, #1
 8008e50:	42b2      	cmp	r2, r6
 8008e52:	d109      	bne.n	8008e68 <__gethex+0x388>
 8008e54:	1171      	asrs	r1, r6, #5
 8008e56:	2201      	movs	r2, #1
 8008e58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e5c:	f006 061f 	and.w	r6, r6, #31
 8008e60:	fa02 f606 	lsl.w	r6, r2, r6
 8008e64:	421e      	tst	r6, r3
 8008e66:	d13a      	bne.n	8008ede <__gethex+0x3fe>
 8008e68:	f045 0520 	orr.w	r5, r5, #32
 8008e6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e6e:	601c      	str	r4, [r3, #0]
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	601f      	str	r7, [r3, #0]
 8008e74:	e6b0      	b.n	8008bd8 <__gethex+0xf8>
 8008e76:	4299      	cmp	r1, r3
 8008e78:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e7c:	d8d9      	bhi.n	8008e32 <__gethex+0x352>
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	459b      	cmp	fp, r3
 8008e82:	db17      	blt.n	8008eb4 <__gethex+0x3d4>
 8008e84:	6861      	ldr	r1, [r4, #4]
 8008e86:	9801      	ldr	r0, [sp, #4]
 8008e88:	3101      	adds	r1, #1
 8008e8a:	f000 fd07 	bl	800989c <_Balloc>
 8008e8e:	4681      	mov	r9, r0
 8008e90:	b918      	cbnz	r0, 8008e9a <__gethex+0x3ba>
 8008e92:	4b1a      	ldr	r3, [pc, #104]	@ (8008efc <__gethex+0x41c>)
 8008e94:	4602      	mov	r2, r0
 8008e96:	2184      	movs	r1, #132	@ 0x84
 8008e98:	e6c5      	b.n	8008c26 <__gethex+0x146>
 8008e9a:	6922      	ldr	r2, [r4, #16]
 8008e9c:	3202      	adds	r2, #2
 8008e9e:	f104 010c 	add.w	r1, r4, #12
 8008ea2:	0092      	lsls	r2, r2, #2
 8008ea4:	300c      	adds	r0, #12
 8008ea6:	f7fe ff48 	bl	8007d3a <memcpy>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	9801      	ldr	r0, [sp, #4]
 8008eae:	f000 fd35 	bl	800991c <_Bfree>
 8008eb2:	464c      	mov	r4, r9
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ebc:	6122      	str	r2, [r4, #16]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	615a      	str	r2, [r3, #20]
 8008ec2:	e7be      	b.n	8008e42 <__gethex+0x362>
 8008ec4:	6922      	ldr	r2, [r4, #16]
 8008ec6:	455a      	cmp	r2, fp
 8008ec8:	dd0b      	ble.n	8008ee2 <__gethex+0x402>
 8008eca:	2101      	movs	r1, #1
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7ff fd9f 	bl	8008a10 <rshift>
 8008ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ed6:	3701      	adds	r7, #1
 8008ed8:	42bb      	cmp	r3, r7
 8008eda:	f6ff aee0 	blt.w	8008c9e <__gethex+0x1be>
 8008ede:	2501      	movs	r5, #1
 8008ee0:	e7c2      	b.n	8008e68 <__gethex+0x388>
 8008ee2:	f016 061f 	ands.w	r6, r6, #31
 8008ee6:	d0fa      	beq.n	8008ede <__gethex+0x3fe>
 8008ee8:	4453      	add	r3, sl
 8008eea:	f1c6 0620 	rsb	r6, r6, #32
 8008eee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008ef2:	f000 fdc5 	bl	8009a80 <__hi0bits>
 8008ef6:	42b0      	cmp	r0, r6
 8008ef8:	dbe7      	blt.n	8008eca <__gethex+0x3ea>
 8008efa:	e7f0      	b.n	8008ede <__gethex+0x3fe>
 8008efc:	0800abdd 	.word	0x0800abdd

08008f00 <L_shift>:
 8008f00:	f1c2 0208 	rsb	r2, r2, #8
 8008f04:	0092      	lsls	r2, r2, #2
 8008f06:	b570      	push	{r4, r5, r6, lr}
 8008f08:	f1c2 0620 	rsb	r6, r2, #32
 8008f0c:	6843      	ldr	r3, [r0, #4]
 8008f0e:	6804      	ldr	r4, [r0, #0]
 8008f10:	fa03 f506 	lsl.w	r5, r3, r6
 8008f14:	432c      	orrs	r4, r5
 8008f16:	40d3      	lsrs	r3, r2
 8008f18:	6004      	str	r4, [r0, #0]
 8008f1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f1e:	4288      	cmp	r0, r1
 8008f20:	d3f4      	bcc.n	8008f0c <L_shift+0xc>
 8008f22:	bd70      	pop	{r4, r5, r6, pc}

08008f24 <__match>:
 8008f24:	b530      	push	{r4, r5, lr}
 8008f26:	6803      	ldr	r3, [r0, #0]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f2e:	b914      	cbnz	r4, 8008f36 <__match+0x12>
 8008f30:	6003      	str	r3, [r0, #0]
 8008f32:	2001      	movs	r0, #1
 8008f34:	bd30      	pop	{r4, r5, pc}
 8008f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f3a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008f3e:	2d19      	cmp	r5, #25
 8008f40:	bf98      	it	ls
 8008f42:	3220      	addls	r2, #32
 8008f44:	42a2      	cmp	r2, r4
 8008f46:	d0f0      	beq.n	8008f2a <__match+0x6>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e7f3      	b.n	8008f34 <__match+0x10>

08008f4c <__hexnan>:
 8008f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	680b      	ldr	r3, [r1, #0]
 8008f52:	6801      	ldr	r1, [r0, #0]
 8008f54:	115e      	asrs	r6, r3, #5
 8008f56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f5a:	f013 031f 	ands.w	r3, r3, #31
 8008f5e:	b087      	sub	sp, #28
 8008f60:	bf18      	it	ne
 8008f62:	3604      	addne	r6, #4
 8008f64:	2500      	movs	r5, #0
 8008f66:	1f37      	subs	r7, r6, #4
 8008f68:	4682      	mov	sl, r0
 8008f6a:	4690      	mov	r8, r2
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f72:	46b9      	mov	r9, r7
 8008f74:	463c      	mov	r4, r7
 8008f76:	9502      	str	r5, [sp, #8]
 8008f78:	46ab      	mov	fp, r5
 8008f7a:	784a      	ldrb	r2, [r1, #1]
 8008f7c:	1c4b      	adds	r3, r1, #1
 8008f7e:	9303      	str	r3, [sp, #12]
 8008f80:	b342      	cbz	r2, 8008fd4 <__hexnan+0x88>
 8008f82:	4610      	mov	r0, r2
 8008f84:	9105      	str	r1, [sp, #20]
 8008f86:	9204      	str	r2, [sp, #16]
 8008f88:	f7ff fd94 	bl	8008ab4 <__hexdig_fun>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d151      	bne.n	8009034 <__hexnan+0xe8>
 8008f90:	9a04      	ldr	r2, [sp, #16]
 8008f92:	9905      	ldr	r1, [sp, #20]
 8008f94:	2a20      	cmp	r2, #32
 8008f96:	d818      	bhi.n	8008fca <__hexnan+0x7e>
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	459b      	cmp	fp, r3
 8008f9c:	dd13      	ble.n	8008fc6 <__hexnan+0x7a>
 8008f9e:	454c      	cmp	r4, r9
 8008fa0:	d206      	bcs.n	8008fb0 <__hexnan+0x64>
 8008fa2:	2d07      	cmp	r5, #7
 8008fa4:	dc04      	bgt.n	8008fb0 <__hexnan+0x64>
 8008fa6:	462a      	mov	r2, r5
 8008fa8:	4649      	mov	r1, r9
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7ff ffa8 	bl	8008f00 <L_shift>
 8008fb0:	4544      	cmp	r4, r8
 8008fb2:	d952      	bls.n	800905a <__hexnan+0x10e>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f1a4 0904 	sub.w	r9, r4, #4
 8008fba:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fbe:	f8cd b008 	str.w	fp, [sp, #8]
 8008fc2:	464c      	mov	r4, r9
 8008fc4:	461d      	mov	r5, r3
 8008fc6:	9903      	ldr	r1, [sp, #12]
 8008fc8:	e7d7      	b.n	8008f7a <__hexnan+0x2e>
 8008fca:	2a29      	cmp	r2, #41	@ 0x29
 8008fcc:	d157      	bne.n	800907e <__hexnan+0x132>
 8008fce:	3102      	adds	r1, #2
 8008fd0:	f8ca 1000 	str.w	r1, [sl]
 8008fd4:	f1bb 0f00 	cmp.w	fp, #0
 8008fd8:	d051      	beq.n	800907e <__hexnan+0x132>
 8008fda:	454c      	cmp	r4, r9
 8008fdc:	d206      	bcs.n	8008fec <__hexnan+0xa0>
 8008fde:	2d07      	cmp	r5, #7
 8008fe0:	dc04      	bgt.n	8008fec <__hexnan+0xa0>
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	4649      	mov	r1, r9
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7ff ff8a 	bl	8008f00 <L_shift>
 8008fec:	4544      	cmp	r4, r8
 8008fee:	d936      	bls.n	800905e <__hexnan+0x112>
 8008ff0:	f1a8 0204 	sub.w	r2, r8, #4
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ffa:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ffe:	429f      	cmp	r7, r3
 8009000:	d2f9      	bcs.n	8008ff6 <__hexnan+0xaa>
 8009002:	1b3b      	subs	r3, r7, r4
 8009004:	f023 0303 	bic.w	r3, r3, #3
 8009008:	3304      	adds	r3, #4
 800900a:	3401      	adds	r4, #1
 800900c:	3e03      	subs	r6, #3
 800900e:	42b4      	cmp	r4, r6
 8009010:	bf88      	it	hi
 8009012:	2304      	movhi	r3, #4
 8009014:	4443      	add	r3, r8
 8009016:	2200      	movs	r2, #0
 8009018:	f843 2b04 	str.w	r2, [r3], #4
 800901c:	429f      	cmp	r7, r3
 800901e:	d2fb      	bcs.n	8009018 <__hexnan+0xcc>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	b91b      	cbnz	r3, 800902c <__hexnan+0xe0>
 8009024:	4547      	cmp	r7, r8
 8009026:	d128      	bne.n	800907a <__hexnan+0x12e>
 8009028:	2301      	movs	r3, #1
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	2005      	movs	r0, #5
 800902e:	b007      	add	sp, #28
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	3501      	adds	r5, #1
 8009036:	2d08      	cmp	r5, #8
 8009038:	f10b 0b01 	add.w	fp, fp, #1
 800903c:	dd06      	ble.n	800904c <__hexnan+0x100>
 800903e:	4544      	cmp	r4, r8
 8009040:	d9c1      	bls.n	8008fc6 <__hexnan+0x7a>
 8009042:	2300      	movs	r3, #0
 8009044:	f844 3c04 	str.w	r3, [r4, #-4]
 8009048:	2501      	movs	r5, #1
 800904a:	3c04      	subs	r4, #4
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	f000 000f 	and.w	r0, r0, #15
 8009052:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009056:	6020      	str	r0, [r4, #0]
 8009058:	e7b5      	b.n	8008fc6 <__hexnan+0x7a>
 800905a:	2508      	movs	r5, #8
 800905c:	e7b3      	b.n	8008fc6 <__hexnan+0x7a>
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0dd      	beq.n	8009020 <__hexnan+0xd4>
 8009064:	f1c3 0320 	rsb	r3, r3, #32
 8009068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800906c:	40da      	lsrs	r2, r3
 800906e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009072:	4013      	ands	r3, r2
 8009074:	f846 3c04 	str.w	r3, [r6, #-4]
 8009078:	e7d2      	b.n	8009020 <__hexnan+0xd4>
 800907a:	3f04      	subs	r7, #4
 800907c:	e7d0      	b.n	8009020 <__hexnan+0xd4>
 800907e:	2004      	movs	r0, #4
 8009080:	e7d5      	b.n	800902e <__hexnan+0xe2>

08009082 <__ssputs_r>:
 8009082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009086:	688e      	ldr	r6, [r1, #8]
 8009088:	461f      	mov	r7, r3
 800908a:	42be      	cmp	r6, r7
 800908c:	680b      	ldr	r3, [r1, #0]
 800908e:	4682      	mov	sl, r0
 8009090:	460c      	mov	r4, r1
 8009092:	4690      	mov	r8, r2
 8009094:	d82d      	bhi.n	80090f2 <__ssputs_r+0x70>
 8009096:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800909a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800909e:	d026      	beq.n	80090ee <__ssputs_r+0x6c>
 80090a0:	6965      	ldr	r5, [r4, #20]
 80090a2:	6909      	ldr	r1, [r1, #16]
 80090a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090a8:	eba3 0901 	sub.w	r9, r3, r1
 80090ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090b0:	1c7b      	adds	r3, r7, #1
 80090b2:	444b      	add	r3, r9
 80090b4:	106d      	asrs	r5, r5, #1
 80090b6:	429d      	cmp	r5, r3
 80090b8:	bf38      	it	cc
 80090ba:	461d      	movcc	r5, r3
 80090bc:	0553      	lsls	r3, r2, #21
 80090be:	d527      	bpl.n	8009110 <__ssputs_r+0x8e>
 80090c0:	4629      	mov	r1, r5
 80090c2:	f000 faa1 	bl	8009608 <_malloc_r>
 80090c6:	4606      	mov	r6, r0
 80090c8:	b360      	cbz	r0, 8009124 <__ssputs_r+0xa2>
 80090ca:	6921      	ldr	r1, [r4, #16]
 80090cc:	464a      	mov	r2, r9
 80090ce:	f7fe fe34 	bl	8007d3a <memcpy>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	6126      	str	r6, [r4, #16]
 80090e0:	6165      	str	r5, [r4, #20]
 80090e2:	444e      	add	r6, r9
 80090e4:	eba5 0509 	sub.w	r5, r5, r9
 80090e8:	6026      	str	r6, [r4, #0]
 80090ea:	60a5      	str	r5, [r4, #8]
 80090ec:	463e      	mov	r6, r7
 80090ee:	42be      	cmp	r6, r7
 80090f0:	d900      	bls.n	80090f4 <__ssputs_r+0x72>
 80090f2:	463e      	mov	r6, r7
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	4632      	mov	r2, r6
 80090f8:	4641      	mov	r1, r8
 80090fa:	f001 f9f6 	bl	800a4ea <memmove>
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	1b9b      	subs	r3, r3, r6
 8009102:	60a3      	str	r3, [r4, #8]
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	4433      	add	r3, r6
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	2000      	movs	r0, #0
 800910c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009110:	462a      	mov	r2, r5
 8009112:	f001 f8b8 	bl	800a286 <_realloc_r>
 8009116:	4606      	mov	r6, r0
 8009118:	2800      	cmp	r0, #0
 800911a:	d1e0      	bne.n	80090de <__ssputs_r+0x5c>
 800911c:	6921      	ldr	r1, [r4, #16]
 800911e:	4650      	mov	r0, sl
 8009120:	f001 faa8 	bl	800a674 <_free_r>
 8009124:	230c      	movs	r3, #12
 8009126:	f8ca 3000 	str.w	r3, [sl]
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009136:	e7e9      	b.n	800910c <__ssputs_r+0x8a>

08009138 <_svfiprintf_r>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	4698      	mov	r8, r3
 800913e:	898b      	ldrh	r3, [r1, #12]
 8009140:	061b      	lsls	r3, r3, #24
 8009142:	b09d      	sub	sp, #116	@ 0x74
 8009144:	4607      	mov	r7, r0
 8009146:	460d      	mov	r5, r1
 8009148:	4614      	mov	r4, r2
 800914a:	d510      	bpl.n	800916e <_svfiprintf_r+0x36>
 800914c:	690b      	ldr	r3, [r1, #16]
 800914e:	b973      	cbnz	r3, 800916e <_svfiprintf_r+0x36>
 8009150:	2140      	movs	r1, #64	@ 0x40
 8009152:	f000 fa59 	bl	8009608 <_malloc_r>
 8009156:	6028      	str	r0, [r5, #0]
 8009158:	6128      	str	r0, [r5, #16]
 800915a:	b930      	cbnz	r0, 800916a <_svfiprintf_r+0x32>
 800915c:	230c      	movs	r3, #12
 800915e:	603b      	str	r3, [r7, #0]
 8009160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009164:	b01d      	add	sp, #116	@ 0x74
 8009166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916a:	2340      	movs	r3, #64	@ 0x40
 800916c:	616b      	str	r3, [r5, #20]
 800916e:	2300      	movs	r3, #0
 8009170:	9309      	str	r3, [sp, #36]	@ 0x24
 8009172:	2320      	movs	r3, #32
 8009174:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009178:	f8cd 800c 	str.w	r8, [sp, #12]
 800917c:	2330      	movs	r3, #48	@ 0x30
 800917e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800931c <_svfiprintf_r+0x1e4>
 8009182:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009186:	f04f 0901 	mov.w	r9, #1
 800918a:	4623      	mov	r3, r4
 800918c:	469a      	mov	sl, r3
 800918e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009192:	b10a      	cbz	r2, 8009198 <_svfiprintf_r+0x60>
 8009194:	2a25      	cmp	r2, #37	@ 0x25
 8009196:	d1f9      	bne.n	800918c <_svfiprintf_r+0x54>
 8009198:	ebba 0b04 	subs.w	fp, sl, r4
 800919c:	d00b      	beq.n	80091b6 <_svfiprintf_r+0x7e>
 800919e:	465b      	mov	r3, fp
 80091a0:	4622      	mov	r2, r4
 80091a2:	4629      	mov	r1, r5
 80091a4:	4638      	mov	r0, r7
 80091a6:	f7ff ff6c 	bl	8009082 <__ssputs_r>
 80091aa:	3001      	adds	r0, #1
 80091ac:	f000 80a7 	beq.w	80092fe <_svfiprintf_r+0x1c6>
 80091b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091b2:	445a      	add	r2, fp
 80091b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80091b6:	f89a 3000 	ldrb.w	r3, [sl]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 809f 	beq.w	80092fe <_svfiprintf_r+0x1c6>
 80091c0:	2300      	movs	r3, #0
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ca:	f10a 0a01 	add.w	sl, sl, #1
 80091ce:	9304      	str	r3, [sp, #16]
 80091d0:	9307      	str	r3, [sp, #28]
 80091d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80091d8:	4654      	mov	r4, sl
 80091da:	2205      	movs	r2, #5
 80091dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e0:	484e      	ldr	r0, [pc, #312]	@ (800931c <_svfiprintf_r+0x1e4>)
 80091e2:	f7f7 f81d 	bl	8000220 <memchr>
 80091e6:	9a04      	ldr	r2, [sp, #16]
 80091e8:	b9d8      	cbnz	r0, 8009222 <_svfiprintf_r+0xea>
 80091ea:	06d0      	lsls	r0, r2, #27
 80091ec:	bf44      	itt	mi
 80091ee:	2320      	movmi	r3, #32
 80091f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f4:	0711      	lsls	r1, r2, #28
 80091f6:	bf44      	itt	mi
 80091f8:	232b      	movmi	r3, #43	@ 0x2b
 80091fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009202:	2b2a      	cmp	r3, #42	@ 0x2a
 8009204:	d015      	beq.n	8009232 <_svfiprintf_r+0xfa>
 8009206:	9a07      	ldr	r2, [sp, #28]
 8009208:	4654      	mov	r4, sl
 800920a:	2000      	movs	r0, #0
 800920c:	f04f 0c0a 	mov.w	ip, #10
 8009210:	4621      	mov	r1, r4
 8009212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009216:	3b30      	subs	r3, #48	@ 0x30
 8009218:	2b09      	cmp	r3, #9
 800921a:	d94b      	bls.n	80092b4 <_svfiprintf_r+0x17c>
 800921c:	b1b0      	cbz	r0, 800924c <_svfiprintf_r+0x114>
 800921e:	9207      	str	r2, [sp, #28]
 8009220:	e014      	b.n	800924c <_svfiprintf_r+0x114>
 8009222:	eba0 0308 	sub.w	r3, r0, r8
 8009226:	fa09 f303 	lsl.w	r3, r9, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	9304      	str	r3, [sp, #16]
 800922e:	46a2      	mov	sl, r4
 8009230:	e7d2      	b.n	80091d8 <_svfiprintf_r+0xa0>
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	1d19      	adds	r1, r3, #4
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	9103      	str	r1, [sp, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	bfbb      	ittet	lt
 800923e:	425b      	neglt	r3, r3
 8009240:	f042 0202 	orrlt.w	r2, r2, #2
 8009244:	9307      	strge	r3, [sp, #28]
 8009246:	9307      	strlt	r3, [sp, #28]
 8009248:	bfb8      	it	lt
 800924a:	9204      	strlt	r2, [sp, #16]
 800924c:	7823      	ldrb	r3, [r4, #0]
 800924e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009250:	d10a      	bne.n	8009268 <_svfiprintf_r+0x130>
 8009252:	7863      	ldrb	r3, [r4, #1]
 8009254:	2b2a      	cmp	r3, #42	@ 0x2a
 8009256:	d132      	bne.n	80092be <_svfiprintf_r+0x186>
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	1d1a      	adds	r2, r3, #4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	9203      	str	r2, [sp, #12]
 8009260:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009264:	3402      	adds	r4, #2
 8009266:	9305      	str	r3, [sp, #20]
 8009268:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800932c <_svfiprintf_r+0x1f4>
 800926c:	7821      	ldrb	r1, [r4, #0]
 800926e:	2203      	movs	r2, #3
 8009270:	4650      	mov	r0, sl
 8009272:	f7f6 ffd5 	bl	8000220 <memchr>
 8009276:	b138      	cbz	r0, 8009288 <_svfiprintf_r+0x150>
 8009278:	9b04      	ldr	r3, [sp, #16]
 800927a:	eba0 000a 	sub.w	r0, r0, sl
 800927e:	2240      	movs	r2, #64	@ 0x40
 8009280:	4082      	lsls	r2, r0
 8009282:	4313      	orrs	r3, r2
 8009284:	3401      	adds	r4, #1
 8009286:	9304      	str	r3, [sp, #16]
 8009288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928c:	4824      	ldr	r0, [pc, #144]	@ (8009320 <_svfiprintf_r+0x1e8>)
 800928e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009292:	2206      	movs	r2, #6
 8009294:	f7f6 ffc4 	bl	8000220 <memchr>
 8009298:	2800      	cmp	r0, #0
 800929a:	d036      	beq.n	800930a <_svfiprintf_r+0x1d2>
 800929c:	4b21      	ldr	r3, [pc, #132]	@ (8009324 <_svfiprintf_r+0x1ec>)
 800929e:	bb1b      	cbnz	r3, 80092e8 <_svfiprintf_r+0x1b0>
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	3307      	adds	r3, #7
 80092a4:	f023 0307 	bic.w	r3, r3, #7
 80092a8:	3308      	adds	r3, #8
 80092aa:	9303      	str	r3, [sp, #12]
 80092ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ae:	4433      	add	r3, r6
 80092b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b2:	e76a      	b.n	800918a <_svfiprintf_r+0x52>
 80092b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092b8:	460c      	mov	r4, r1
 80092ba:	2001      	movs	r0, #1
 80092bc:	e7a8      	b.n	8009210 <_svfiprintf_r+0xd8>
 80092be:	2300      	movs	r3, #0
 80092c0:	3401      	adds	r4, #1
 80092c2:	9305      	str	r3, [sp, #20]
 80092c4:	4619      	mov	r1, r3
 80092c6:	f04f 0c0a 	mov.w	ip, #10
 80092ca:	4620      	mov	r0, r4
 80092cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092d0:	3a30      	subs	r2, #48	@ 0x30
 80092d2:	2a09      	cmp	r2, #9
 80092d4:	d903      	bls.n	80092de <_svfiprintf_r+0x1a6>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0c6      	beq.n	8009268 <_svfiprintf_r+0x130>
 80092da:	9105      	str	r1, [sp, #20]
 80092dc:	e7c4      	b.n	8009268 <_svfiprintf_r+0x130>
 80092de:	fb0c 2101 	mla	r1, ip, r1, r2
 80092e2:	4604      	mov	r4, r0
 80092e4:	2301      	movs	r3, #1
 80092e6:	e7f0      	b.n	80092ca <_svfiprintf_r+0x192>
 80092e8:	ab03      	add	r3, sp, #12
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	462a      	mov	r2, r5
 80092ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009328 <_svfiprintf_r+0x1f0>)
 80092f0:	a904      	add	r1, sp, #16
 80092f2:	4638      	mov	r0, r7
 80092f4:	f7fc ff1e 	bl	8006134 <_printf_float>
 80092f8:	1c42      	adds	r2, r0, #1
 80092fa:	4606      	mov	r6, r0
 80092fc:	d1d6      	bne.n	80092ac <_svfiprintf_r+0x174>
 80092fe:	89ab      	ldrh	r3, [r5, #12]
 8009300:	065b      	lsls	r3, r3, #25
 8009302:	f53f af2d 	bmi.w	8009160 <_svfiprintf_r+0x28>
 8009306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009308:	e72c      	b.n	8009164 <_svfiprintf_r+0x2c>
 800930a:	ab03      	add	r3, sp, #12
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	462a      	mov	r2, r5
 8009310:	4b05      	ldr	r3, [pc, #20]	@ (8009328 <_svfiprintf_r+0x1f0>)
 8009312:	a904      	add	r1, sp, #16
 8009314:	4638      	mov	r0, r7
 8009316:	f7fd f9a5 	bl	8006664 <_printf_i>
 800931a:	e7ed      	b.n	80092f8 <_svfiprintf_r+0x1c0>
 800931c:	0800ac4e 	.word	0x0800ac4e
 8009320:	0800ac58 	.word	0x0800ac58
 8009324:	08006135 	.word	0x08006135
 8009328:	08009083 	.word	0x08009083
 800932c:	0800ac54 	.word	0x0800ac54

08009330 <__sfputc_r>:
 8009330:	6893      	ldr	r3, [r2, #8]
 8009332:	3b01      	subs	r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	b410      	push	{r4}
 8009338:	6093      	str	r3, [r2, #8]
 800933a:	da08      	bge.n	800934e <__sfputc_r+0x1e>
 800933c:	6994      	ldr	r4, [r2, #24]
 800933e:	42a3      	cmp	r3, r4
 8009340:	db01      	blt.n	8009346 <__sfputc_r+0x16>
 8009342:	290a      	cmp	r1, #10
 8009344:	d103      	bne.n	800934e <__sfputc_r+0x1e>
 8009346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800934a:	f000 bfca 	b.w	800a2e2 <__swbuf_r>
 800934e:	6813      	ldr	r3, [r2, #0]
 8009350:	1c58      	adds	r0, r3, #1
 8009352:	6010      	str	r0, [r2, #0]
 8009354:	7019      	strb	r1, [r3, #0]
 8009356:	4608      	mov	r0, r1
 8009358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800935c:	4770      	bx	lr

0800935e <__sfputs_r>:
 800935e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009360:	4606      	mov	r6, r0
 8009362:	460f      	mov	r7, r1
 8009364:	4614      	mov	r4, r2
 8009366:	18d5      	adds	r5, r2, r3
 8009368:	42ac      	cmp	r4, r5
 800936a:	d101      	bne.n	8009370 <__sfputs_r+0x12>
 800936c:	2000      	movs	r0, #0
 800936e:	e007      	b.n	8009380 <__sfputs_r+0x22>
 8009370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009374:	463a      	mov	r2, r7
 8009376:	4630      	mov	r0, r6
 8009378:	f7ff ffda 	bl	8009330 <__sfputc_r>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d1f3      	bne.n	8009368 <__sfputs_r+0xa>
 8009380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009384 <_vfiprintf_r>:
 8009384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	460d      	mov	r5, r1
 800938a:	b09d      	sub	sp, #116	@ 0x74
 800938c:	4614      	mov	r4, r2
 800938e:	4698      	mov	r8, r3
 8009390:	4606      	mov	r6, r0
 8009392:	b118      	cbz	r0, 800939c <_vfiprintf_r+0x18>
 8009394:	6a03      	ldr	r3, [r0, #32]
 8009396:	b90b      	cbnz	r3, 800939c <_vfiprintf_r+0x18>
 8009398:	f7fd fd44 	bl	8006e24 <__sinit>
 800939c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800939e:	07d9      	lsls	r1, r3, #31
 80093a0:	d405      	bmi.n	80093ae <_vfiprintf_r+0x2a>
 80093a2:	89ab      	ldrh	r3, [r5, #12]
 80093a4:	059a      	lsls	r2, r3, #22
 80093a6:	d402      	bmi.n	80093ae <_vfiprintf_r+0x2a>
 80093a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093aa:	f7fe fcc4 	bl	8007d36 <__retarget_lock_acquire_recursive>
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	071b      	lsls	r3, r3, #28
 80093b2:	d501      	bpl.n	80093b8 <_vfiprintf_r+0x34>
 80093b4:	692b      	ldr	r3, [r5, #16]
 80093b6:	b99b      	cbnz	r3, 80093e0 <_vfiprintf_r+0x5c>
 80093b8:	4629      	mov	r1, r5
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 ffd0 	bl	800a360 <__swsetup_r>
 80093c0:	b170      	cbz	r0, 80093e0 <_vfiprintf_r+0x5c>
 80093c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093c4:	07dc      	lsls	r4, r3, #31
 80093c6:	d504      	bpl.n	80093d2 <_vfiprintf_r+0x4e>
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093cc:	b01d      	add	sp, #116	@ 0x74
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	0598      	lsls	r0, r3, #22
 80093d6:	d4f7      	bmi.n	80093c8 <_vfiprintf_r+0x44>
 80093d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093da:	f7fe fcad 	bl	8007d38 <__retarget_lock_release_recursive>
 80093de:	e7f3      	b.n	80093c8 <_vfiprintf_r+0x44>
 80093e0:	2300      	movs	r3, #0
 80093e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e4:	2320      	movs	r3, #32
 80093e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80093ee:	2330      	movs	r3, #48	@ 0x30
 80093f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80095a0 <_vfiprintf_r+0x21c>
 80093f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093f8:	f04f 0901 	mov.w	r9, #1
 80093fc:	4623      	mov	r3, r4
 80093fe:	469a      	mov	sl, r3
 8009400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009404:	b10a      	cbz	r2, 800940a <_vfiprintf_r+0x86>
 8009406:	2a25      	cmp	r2, #37	@ 0x25
 8009408:	d1f9      	bne.n	80093fe <_vfiprintf_r+0x7a>
 800940a:	ebba 0b04 	subs.w	fp, sl, r4
 800940e:	d00b      	beq.n	8009428 <_vfiprintf_r+0xa4>
 8009410:	465b      	mov	r3, fp
 8009412:	4622      	mov	r2, r4
 8009414:	4629      	mov	r1, r5
 8009416:	4630      	mov	r0, r6
 8009418:	f7ff ffa1 	bl	800935e <__sfputs_r>
 800941c:	3001      	adds	r0, #1
 800941e:	f000 80a7 	beq.w	8009570 <_vfiprintf_r+0x1ec>
 8009422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009424:	445a      	add	r2, fp
 8009426:	9209      	str	r2, [sp, #36]	@ 0x24
 8009428:	f89a 3000 	ldrb.w	r3, [sl]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 809f 	beq.w	8009570 <_vfiprintf_r+0x1ec>
 8009432:	2300      	movs	r3, #0
 8009434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800943c:	f10a 0a01 	add.w	sl, sl, #1
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	9307      	str	r3, [sp, #28]
 8009444:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009448:	931a      	str	r3, [sp, #104]	@ 0x68
 800944a:	4654      	mov	r4, sl
 800944c:	2205      	movs	r2, #5
 800944e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009452:	4853      	ldr	r0, [pc, #332]	@ (80095a0 <_vfiprintf_r+0x21c>)
 8009454:	f7f6 fee4 	bl	8000220 <memchr>
 8009458:	9a04      	ldr	r2, [sp, #16]
 800945a:	b9d8      	cbnz	r0, 8009494 <_vfiprintf_r+0x110>
 800945c:	06d1      	lsls	r1, r2, #27
 800945e:	bf44      	itt	mi
 8009460:	2320      	movmi	r3, #32
 8009462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009466:	0713      	lsls	r3, r2, #28
 8009468:	bf44      	itt	mi
 800946a:	232b      	movmi	r3, #43	@ 0x2b
 800946c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009470:	f89a 3000 	ldrb.w	r3, [sl]
 8009474:	2b2a      	cmp	r3, #42	@ 0x2a
 8009476:	d015      	beq.n	80094a4 <_vfiprintf_r+0x120>
 8009478:	9a07      	ldr	r2, [sp, #28]
 800947a:	4654      	mov	r4, sl
 800947c:	2000      	movs	r0, #0
 800947e:	f04f 0c0a 	mov.w	ip, #10
 8009482:	4621      	mov	r1, r4
 8009484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009488:	3b30      	subs	r3, #48	@ 0x30
 800948a:	2b09      	cmp	r3, #9
 800948c:	d94b      	bls.n	8009526 <_vfiprintf_r+0x1a2>
 800948e:	b1b0      	cbz	r0, 80094be <_vfiprintf_r+0x13a>
 8009490:	9207      	str	r2, [sp, #28]
 8009492:	e014      	b.n	80094be <_vfiprintf_r+0x13a>
 8009494:	eba0 0308 	sub.w	r3, r0, r8
 8009498:	fa09 f303 	lsl.w	r3, r9, r3
 800949c:	4313      	orrs	r3, r2
 800949e:	9304      	str	r3, [sp, #16]
 80094a0:	46a2      	mov	sl, r4
 80094a2:	e7d2      	b.n	800944a <_vfiprintf_r+0xc6>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	1d19      	adds	r1, r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	9103      	str	r1, [sp, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bfbb      	ittet	lt
 80094b0:	425b      	neglt	r3, r3
 80094b2:	f042 0202 	orrlt.w	r2, r2, #2
 80094b6:	9307      	strge	r3, [sp, #28]
 80094b8:	9307      	strlt	r3, [sp, #28]
 80094ba:	bfb8      	it	lt
 80094bc:	9204      	strlt	r2, [sp, #16]
 80094be:	7823      	ldrb	r3, [r4, #0]
 80094c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80094c2:	d10a      	bne.n	80094da <_vfiprintf_r+0x156>
 80094c4:	7863      	ldrb	r3, [r4, #1]
 80094c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80094c8:	d132      	bne.n	8009530 <_vfiprintf_r+0x1ac>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	1d1a      	adds	r2, r3, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	9203      	str	r2, [sp, #12]
 80094d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094d6:	3402      	adds	r4, #2
 80094d8:	9305      	str	r3, [sp, #20]
 80094da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095b0 <_vfiprintf_r+0x22c>
 80094de:	7821      	ldrb	r1, [r4, #0]
 80094e0:	2203      	movs	r2, #3
 80094e2:	4650      	mov	r0, sl
 80094e4:	f7f6 fe9c 	bl	8000220 <memchr>
 80094e8:	b138      	cbz	r0, 80094fa <_vfiprintf_r+0x176>
 80094ea:	9b04      	ldr	r3, [sp, #16]
 80094ec:	eba0 000a 	sub.w	r0, r0, sl
 80094f0:	2240      	movs	r2, #64	@ 0x40
 80094f2:	4082      	lsls	r2, r0
 80094f4:	4313      	orrs	r3, r2
 80094f6:	3401      	adds	r4, #1
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fe:	4829      	ldr	r0, [pc, #164]	@ (80095a4 <_vfiprintf_r+0x220>)
 8009500:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009504:	2206      	movs	r2, #6
 8009506:	f7f6 fe8b 	bl	8000220 <memchr>
 800950a:	2800      	cmp	r0, #0
 800950c:	d03f      	beq.n	800958e <_vfiprintf_r+0x20a>
 800950e:	4b26      	ldr	r3, [pc, #152]	@ (80095a8 <_vfiprintf_r+0x224>)
 8009510:	bb1b      	cbnz	r3, 800955a <_vfiprintf_r+0x1d6>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	3307      	adds	r3, #7
 8009516:	f023 0307 	bic.w	r3, r3, #7
 800951a:	3308      	adds	r3, #8
 800951c:	9303      	str	r3, [sp, #12]
 800951e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009520:	443b      	add	r3, r7
 8009522:	9309      	str	r3, [sp, #36]	@ 0x24
 8009524:	e76a      	b.n	80093fc <_vfiprintf_r+0x78>
 8009526:	fb0c 3202 	mla	r2, ip, r2, r3
 800952a:	460c      	mov	r4, r1
 800952c:	2001      	movs	r0, #1
 800952e:	e7a8      	b.n	8009482 <_vfiprintf_r+0xfe>
 8009530:	2300      	movs	r3, #0
 8009532:	3401      	adds	r4, #1
 8009534:	9305      	str	r3, [sp, #20]
 8009536:	4619      	mov	r1, r3
 8009538:	f04f 0c0a 	mov.w	ip, #10
 800953c:	4620      	mov	r0, r4
 800953e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009542:	3a30      	subs	r2, #48	@ 0x30
 8009544:	2a09      	cmp	r2, #9
 8009546:	d903      	bls.n	8009550 <_vfiprintf_r+0x1cc>
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0c6      	beq.n	80094da <_vfiprintf_r+0x156>
 800954c:	9105      	str	r1, [sp, #20]
 800954e:	e7c4      	b.n	80094da <_vfiprintf_r+0x156>
 8009550:	fb0c 2101 	mla	r1, ip, r1, r2
 8009554:	4604      	mov	r4, r0
 8009556:	2301      	movs	r3, #1
 8009558:	e7f0      	b.n	800953c <_vfiprintf_r+0x1b8>
 800955a:	ab03      	add	r3, sp, #12
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	462a      	mov	r2, r5
 8009560:	4b12      	ldr	r3, [pc, #72]	@ (80095ac <_vfiprintf_r+0x228>)
 8009562:	a904      	add	r1, sp, #16
 8009564:	4630      	mov	r0, r6
 8009566:	f7fc fde5 	bl	8006134 <_printf_float>
 800956a:	4607      	mov	r7, r0
 800956c:	1c78      	adds	r0, r7, #1
 800956e:	d1d6      	bne.n	800951e <_vfiprintf_r+0x19a>
 8009570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009572:	07d9      	lsls	r1, r3, #31
 8009574:	d405      	bmi.n	8009582 <_vfiprintf_r+0x1fe>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	059a      	lsls	r2, r3, #22
 800957a:	d402      	bmi.n	8009582 <_vfiprintf_r+0x1fe>
 800957c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800957e:	f7fe fbdb 	bl	8007d38 <__retarget_lock_release_recursive>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	065b      	lsls	r3, r3, #25
 8009586:	f53f af1f 	bmi.w	80093c8 <_vfiprintf_r+0x44>
 800958a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800958c:	e71e      	b.n	80093cc <_vfiprintf_r+0x48>
 800958e:	ab03      	add	r3, sp, #12
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	462a      	mov	r2, r5
 8009594:	4b05      	ldr	r3, [pc, #20]	@ (80095ac <_vfiprintf_r+0x228>)
 8009596:	a904      	add	r1, sp, #16
 8009598:	4630      	mov	r0, r6
 800959a:	f7fd f863 	bl	8006664 <_printf_i>
 800959e:	e7e4      	b.n	800956a <_vfiprintf_r+0x1e6>
 80095a0:	0800ac4e 	.word	0x0800ac4e
 80095a4:	0800ac58 	.word	0x0800ac58
 80095a8:	08006135 	.word	0x08006135
 80095ac:	0800935f 	.word	0x0800935f
 80095b0:	0800ac54 	.word	0x0800ac54

080095b4 <malloc>:
 80095b4:	4b02      	ldr	r3, [pc, #8]	@ (80095c0 <malloc+0xc>)
 80095b6:	4601      	mov	r1, r0
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	f000 b825 	b.w	8009608 <_malloc_r>
 80095be:	bf00      	nop
 80095c0:	20000184 	.word	0x20000184

080095c4 <sbrk_aligned>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	4e0f      	ldr	r6, [pc, #60]	@ (8009604 <sbrk_aligned+0x40>)
 80095c8:	460c      	mov	r4, r1
 80095ca:	6831      	ldr	r1, [r6, #0]
 80095cc:	4605      	mov	r5, r0
 80095ce:	b911      	cbnz	r1, 80095d6 <sbrk_aligned+0x12>
 80095d0:	f000 fffc 	bl	800a5cc <_sbrk_r>
 80095d4:	6030      	str	r0, [r6, #0]
 80095d6:	4621      	mov	r1, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f000 fff7 	bl	800a5cc <_sbrk_r>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d103      	bne.n	80095ea <sbrk_aligned+0x26>
 80095e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80095e6:	4620      	mov	r0, r4
 80095e8:	bd70      	pop	{r4, r5, r6, pc}
 80095ea:	1cc4      	adds	r4, r0, #3
 80095ec:	f024 0403 	bic.w	r4, r4, #3
 80095f0:	42a0      	cmp	r0, r4
 80095f2:	d0f8      	beq.n	80095e6 <sbrk_aligned+0x22>
 80095f4:	1a21      	subs	r1, r4, r0
 80095f6:	4628      	mov	r0, r5
 80095f8:	f000 ffe8 	bl	800a5cc <_sbrk_r>
 80095fc:	3001      	adds	r0, #1
 80095fe:	d1f2      	bne.n	80095e6 <sbrk_aligned+0x22>
 8009600:	e7ef      	b.n	80095e2 <sbrk_aligned+0x1e>
 8009602:	bf00      	nop
 8009604:	20000ccc 	.word	0x20000ccc

08009608 <_malloc_r>:
 8009608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800960c:	1ccd      	adds	r5, r1, #3
 800960e:	f025 0503 	bic.w	r5, r5, #3
 8009612:	3508      	adds	r5, #8
 8009614:	2d0c      	cmp	r5, #12
 8009616:	bf38      	it	cc
 8009618:	250c      	movcc	r5, #12
 800961a:	2d00      	cmp	r5, #0
 800961c:	4606      	mov	r6, r0
 800961e:	db01      	blt.n	8009624 <_malloc_r+0x1c>
 8009620:	42a9      	cmp	r1, r5
 8009622:	d904      	bls.n	800962e <_malloc_r+0x26>
 8009624:	230c      	movs	r3, #12
 8009626:	6033      	str	r3, [r6, #0]
 8009628:	2000      	movs	r0, #0
 800962a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009704 <_malloc_r+0xfc>
 8009632:	f000 f927 	bl	8009884 <__malloc_lock>
 8009636:	f8d8 3000 	ldr.w	r3, [r8]
 800963a:	461c      	mov	r4, r3
 800963c:	bb44      	cbnz	r4, 8009690 <_malloc_r+0x88>
 800963e:	4629      	mov	r1, r5
 8009640:	4630      	mov	r0, r6
 8009642:	f7ff ffbf 	bl	80095c4 <sbrk_aligned>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	4604      	mov	r4, r0
 800964a:	d158      	bne.n	80096fe <_malloc_r+0xf6>
 800964c:	f8d8 4000 	ldr.w	r4, [r8]
 8009650:	4627      	mov	r7, r4
 8009652:	2f00      	cmp	r7, #0
 8009654:	d143      	bne.n	80096de <_malloc_r+0xd6>
 8009656:	2c00      	cmp	r4, #0
 8009658:	d04b      	beq.n	80096f2 <_malloc_r+0xea>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	4639      	mov	r1, r7
 800965e:	4630      	mov	r0, r6
 8009660:	eb04 0903 	add.w	r9, r4, r3
 8009664:	f000 ffb2 	bl	800a5cc <_sbrk_r>
 8009668:	4581      	cmp	r9, r0
 800966a:	d142      	bne.n	80096f2 <_malloc_r+0xea>
 800966c:	6821      	ldr	r1, [r4, #0]
 800966e:	1a6d      	subs	r5, r5, r1
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ffa6 	bl	80095c4 <sbrk_aligned>
 8009678:	3001      	adds	r0, #1
 800967a:	d03a      	beq.n	80096f2 <_malloc_r+0xea>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	442b      	add	r3, r5
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	f8d8 3000 	ldr.w	r3, [r8]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	bb62      	cbnz	r2, 80096e4 <_malloc_r+0xdc>
 800968a:	f8c8 7000 	str.w	r7, [r8]
 800968e:	e00f      	b.n	80096b0 <_malloc_r+0xa8>
 8009690:	6822      	ldr	r2, [r4, #0]
 8009692:	1b52      	subs	r2, r2, r5
 8009694:	d420      	bmi.n	80096d8 <_malloc_r+0xd0>
 8009696:	2a0b      	cmp	r2, #11
 8009698:	d917      	bls.n	80096ca <_malloc_r+0xc2>
 800969a:	1961      	adds	r1, r4, r5
 800969c:	42a3      	cmp	r3, r4
 800969e:	6025      	str	r5, [r4, #0]
 80096a0:	bf18      	it	ne
 80096a2:	6059      	strne	r1, [r3, #4]
 80096a4:	6863      	ldr	r3, [r4, #4]
 80096a6:	bf08      	it	eq
 80096a8:	f8c8 1000 	streq.w	r1, [r8]
 80096ac:	5162      	str	r2, [r4, r5]
 80096ae:	604b      	str	r3, [r1, #4]
 80096b0:	4630      	mov	r0, r6
 80096b2:	f000 f8ed 	bl	8009890 <__malloc_unlock>
 80096b6:	f104 000b 	add.w	r0, r4, #11
 80096ba:	1d23      	adds	r3, r4, #4
 80096bc:	f020 0007 	bic.w	r0, r0, #7
 80096c0:	1ac2      	subs	r2, r0, r3
 80096c2:	bf1c      	itt	ne
 80096c4:	1a1b      	subne	r3, r3, r0
 80096c6:	50a3      	strne	r3, [r4, r2]
 80096c8:	e7af      	b.n	800962a <_malloc_r+0x22>
 80096ca:	6862      	ldr	r2, [r4, #4]
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	bf0c      	ite	eq
 80096d0:	f8c8 2000 	streq.w	r2, [r8]
 80096d4:	605a      	strne	r2, [r3, #4]
 80096d6:	e7eb      	b.n	80096b0 <_malloc_r+0xa8>
 80096d8:	4623      	mov	r3, r4
 80096da:	6864      	ldr	r4, [r4, #4]
 80096dc:	e7ae      	b.n	800963c <_malloc_r+0x34>
 80096de:	463c      	mov	r4, r7
 80096e0:	687f      	ldr	r7, [r7, #4]
 80096e2:	e7b6      	b.n	8009652 <_malloc_r+0x4a>
 80096e4:	461a      	mov	r2, r3
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d1fb      	bne.n	80096e4 <_malloc_r+0xdc>
 80096ec:	2300      	movs	r3, #0
 80096ee:	6053      	str	r3, [r2, #4]
 80096f0:	e7de      	b.n	80096b0 <_malloc_r+0xa8>
 80096f2:	230c      	movs	r3, #12
 80096f4:	6033      	str	r3, [r6, #0]
 80096f6:	4630      	mov	r0, r6
 80096f8:	f000 f8ca 	bl	8009890 <__malloc_unlock>
 80096fc:	e794      	b.n	8009628 <_malloc_r+0x20>
 80096fe:	6005      	str	r5, [r0, #0]
 8009700:	e7d6      	b.n	80096b0 <_malloc_r+0xa8>
 8009702:	bf00      	nop
 8009704:	20000cd0 	.word	0x20000cd0

08009708 <__ascii_mbtowc>:
 8009708:	b082      	sub	sp, #8
 800970a:	b901      	cbnz	r1, 800970e <__ascii_mbtowc+0x6>
 800970c:	a901      	add	r1, sp, #4
 800970e:	b142      	cbz	r2, 8009722 <__ascii_mbtowc+0x1a>
 8009710:	b14b      	cbz	r3, 8009726 <__ascii_mbtowc+0x1e>
 8009712:	7813      	ldrb	r3, [r2, #0]
 8009714:	600b      	str	r3, [r1, #0]
 8009716:	7812      	ldrb	r2, [r2, #0]
 8009718:	1e10      	subs	r0, r2, #0
 800971a:	bf18      	it	ne
 800971c:	2001      	movne	r0, #1
 800971e:	b002      	add	sp, #8
 8009720:	4770      	bx	lr
 8009722:	4610      	mov	r0, r2
 8009724:	e7fb      	b.n	800971e <__ascii_mbtowc+0x16>
 8009726:	f06f 0001 	mvn.w	r0, #1
 800972a:	e7f8      	b.n	800971e <__ascii_mbtowc+0x16>

0800972c <__sflush_r>:
 800972c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	0716      	lsls	r6, r2, #28
 8009736:	4605      	mov	r5, r0
 8009738:	460c      	mov	r4, r1
 800973a:	d454      	bmi.n	80097e6 <__sflush_r+0xba>
 800973c:	684b      	ldr	r3, [r1, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	dc02      	bgt.n	8009748 <__sflush_r+0x1c>
 8009742:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd48      	ble.n	80097da <__sflush_r+0xae>
 8009748:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800974a:	2e00      	cmp	r6, #0
 800974c:	d045      	beq.n	80097da <__sflush_r+0xae>
 800974e:	2300      	movs	r3, #0
 8009750:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009754:	682f      	ldr	r7, [r5, #0]
 8009756:	6a21      	ldr	r1, [r4, #32]
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	d030      	beq.n	80097be <__sflush_r+0x92>
 800975c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	0759      	lsls	r1, r3, #29
 8009762:	d505      	bpl.n	8009770 <__sflush_r+0x44>
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800976a:	b10b      	cbz	r3, 8009770 <__sflush_r+0x44>
 800976c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	2300      	movs	r3, #0
 8009772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009774:	6a21      	ldr	r1, [r4, #32]
 8009776:	4628      	mov	r0, r5
 8009778:	47b0      	blx	r6
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	d106      	bne.n	800978e <__sflush_r+0x62>
 8009780:	6829      	ldr	r1, [r5, #0]
 8009782:	291d      	cmp	r1, #29
 8009784:	d82b      	bhi.n	80097de <__sflush_r+0xb2>
 8009786:	4a2a      	ldr	r2, [pc, #168]	@ (8009830 <__sflush_r+0x104>)
 8009788:	410a      	asrs	r2, r1
 800978a:	07d6      	lsls	r6, r2, #31
 800978c:	d427      	bmi.n	80097de <__sflush_r+0xb2>
 800978e:	2200      	movs	r2, #0
 8009790:	6062      	str	r2, [r4, #4]
 8009792:	04d9      	lsls	r1, r3, #19
 8009794:	6922      	ldr	r2, [r4, #16]
 8009796:	6022      	str	r2, [r4, #0]
 8009798:	d504      	bpl.n	80097a4 <__sflush_r+0x78>
 800979a:	1c42      	adds	r2, r0, #1
 800979c:	d101      	bne.n	80097a2 <__sflush_r+0x76>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	b903      	cbnz	r3, 80097a4 <__sflush_r+0x78>
 80097a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80097a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097a6:	602f      	str	r7, [r5, #0]
 80097a8:	b1b9      	cbz	r1, 80097da <__sflush_r+0xae>
 80097aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097ae:	4299      	cmp	r1, r3
 80097b0:	d002      	beq.n	80097b8 <__sflush_r+0x8c>
 80097b2:	4628      	mov	r0, r5
 80097b4:	f000 ff5e 	bl	800a674 <_free_r>
 80097b8:	2300      	movs	r3, #0
 80097ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80097bc:	e00d      	b.n	80097da <__sflush_r+0xae>
 80097be:	2301      	movs	r3, #1
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b0      	blx	r6
 80097c4:	4602      	mov	r2, r0
 80097c6:	1c50      	adds	r0, r2, #1
 80097c8:	d1c9      	bne.n	800975e <__sflush_r+0x32>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0c6      	beq.n	800975e <__sflush_r+0x32>
 80097d0:	2b1d      	cmp	r3, #29
 80097d2:	d001      	beq.n	80097d8 <__sflush_r+0xac>
 80097d4:	2b16      	cmp	r3, #22
 80097d6:	d11e      	bne.n	8009816 <__sflush_r+0xea>
 80097d8:	602f      	str	r7, [r5, #0]
 80097da:	2000      	movs	r0, #0
 80097dc:	e022      	b.n	8009824 <__sflush_r+0xf8>
 80097de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e2:	b21b      	sxth	r3, r3
 80097e4:	e01b      	b.n	800981e <__sflush_r+0xf2>
 80097e6:	690f      	ldr	r7, [r1, #16]
 80097e8:	2f00      	cmp	r7, #0
 80097ea:	d0f6      	beq.n	80097da <__sflush_r+0xae>
 80097ec:	0793      	lsls	r3, r2, #30
 80097ee:	680e      	ldr	r6, [r1, #0]
 80097f0:	bf08      	it	eq
 80097f2:	694b      	ldreq	r3, [r1, #20]
 80097f4:	600f      	str	r7, [r1, #0]
 80097f6:	bf18      	it	ne
 80097f8:	2300      	movne	r3, #0
 80097fa:	eba6 0807 	sub.w	r8, r6, r7
 80097fe:	608b      	str	r3, [r1, #8]
 8009800:	f1b8 0f00 	cmp.w	r8, #0
 8009804:	dde9      	ble.n	80097da <__sflush_r+0xae>
 8009806:	6a21      	ldr	r1, [r4, #32]
 8009808:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800980a:	4643      	mov	r3, r8
 800980c:	463a      	mov	r2, r7
 800980e:	4628      	mov	r0, r5
 8009810:	47b0      	blx	r6
 8009812:	2800      	cmp	r0, #0
 8009814:	dc08      	bgt.n	8009828 <__sflush_r+0xfc>
 8009816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	4407      	add	r7, r0
 800982a:	eba8 0800 	sub.w	r8, r8, r0
 800982e:	e7e7      	b.n	8009800 <__sflush_r+0xd4>
 8009830:	dfbffffe 	.word	0xdfbffffe

08009834 <_fflush_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	690b      	ldr	r3, [r1, #16]
 8009838:	4605      	mov	r5, r0
 800983a:	460c      	mov	r4, r1
 800983c:	b913      	cbnz	r3, 8009844 <_fflush_r+0x10>
 800983e:	2500      	movs	r5, #0
 8009840:	4628      	mov	r0, r5
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	b118      	cbz	r0, 800984e <_fflush_r+0x1a>
 8009846:	6a03      	ldr	r3, [r0, #32]
 8009848:	b90b      	cbnz	r3, 800984e <_fflush_r+0x1a>
 800984a:	f7fd faeb 	bl	8006e24 <__sinit>
 800984e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0f3      	beq.n	800983e <_fflush_r+0xa>
 8009856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009858:	07d0      	lsls	r0, r2, #31
 800985a:	d404      	bmi.n	8009866 <_fflush_r+0x32>
 800985c:	0599      	lsls	r1, r3, #22
 800985e:	d402      	bmi.n	8009866 <_fflush_r+0x32>
 8009860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009862:	f7fe fa68 	bl	8007d36 <__retarget_lock_acquire_recursive>
 8009866:	4628      	mov	r0, r5
 8009868:	4621      	mov	r1, r4
 800986a:	f7ff ff5f 	bl	800972c <__sflush_r>
 800986e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009870:	07da      	lsls	r2, r3, #31
 8009872:	4605      	mov	r5, r0
 8009874:	d4e4      	bmi.n	8009840 <_fflush_r+0xc>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	059b      	lsls	r3, r3, #22
 800987a:	d4e1      	bmi.n	8009840 <_fflush_r+0xc>
 800987c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800987e:	f7fe fa5b 	bl	8007d38 <__retarget_lock_release_recursive>
 8009882:	e7dd      	b.n	8009840 <_fflush_r+0xc>

08009884 <__malloc_lock>:
 8009884:	4801      	ldr	r0, [pc, #4]	@ (800988c <__malloc_lock+0x8>)
 8009886:	f7fe ba56 	b.w	8007d36 <__retarget_lock_acquire_recursive>
 800988a:	bf00      	nop
 800988c:	20000cc8 	.word	0x20000cc8

08009890 <__malloc_unlock>:
 8009890:	4801      	ldr	r0, [pc, #4]	@ (8009898 <__malloc_unlock+0x8>)
 8009892:	f7fe ba51 	b.w	8007d38 <__retarget_lock_release_recursive>
 8009896:	bf00      	nop
 8009898:	20000cc8 	.word	0x20000cc8

0800989c <_Balloc>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	69c6      	ldr	r6, [r0, #28]
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	b976      	cbnz	r6, 80098c4 <_Balloc+0x28>
 80098a6:	2010      	movs	r0, #16
 80098a8:	f7ff fe84 	bl	80095b4 <malloc>
 80098ac:	4602      	mov	r2, r0
 80098ae:	61e0      	str	r0, [r4, #28]
 80098b0:	b920      	cbnz	r0, 80098bc <_Balloc+0x20>
 80098b2:	4b18      	ldr	r3, [pc, #96]	@ (8009914 <_Balloc+0x78>)
 80098b4:	4818      	ldr	r0, [pc, #96]	@ (8009918 <_Balloc+0x7c>)
 80098b6:	216b      	movs	r1, #107	@ 0x6b
 80098b8:	f000 feaa 	bl	800a610 <__assert_func>
 80098bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098c0:	6006      	str	r6, [r0, #0]
 80098c2:	60c6      	str	r6, [r0, #12]
 80098c4:	69e6      	ldr	r6, [r4, #28]
 80098c6:	68f3      	ldr	r3, [r6, #12]
 80098c8:	b183      	cbz	r3, 80098ec <_Balloc+0x50>
 80098ca:	69e3      	ldr	r3, [r4, #28]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098d2:	b9b8      	cbnz	r0, 8009904 <_Balloc+0x68>
 80098d4:	2101      	movs	r1, #1
 80098d6:	fa01 f605 	lsl.w	r6, r1, r5
 80098da:	1d72      	adds	r2, r6, #5
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 feb4 	bl	800a64c <_calloc_r>
 80098e4:	b160      	cbz	r0, 8009900 <_Balloc+0x64>
 80098e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098ea:	e00e      	b.n	800990a <_Balloc+0x6e>
 80098ec:	2221      	movs	r2, #33	@ 0x21
 80098ee:	2104      	movs	r1, #4
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 feab 	bl	800a64c <_calloc_r>
 80098f6:	69e3      	ldr	r3, [r4, #28]
 80098f8:	60f0      	str	r0, [r6, #12]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e4      	bne.n	80098ca <_Balloc+0x2e>
 8009900:	2000      	movs	r0, #0
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	6802      	ldr	r2, [r0, #0]
 8009906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800990a:	2300      	movs	r3, #0
 800990c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009910:	e7f7      	b.n	8009902 <_Balloc+0x66>
 8009912:	bf00      	nop
 8009914:	0800ab6e 	.word	0x0800ab6e
 8009918:	0800ac5f 	.word	0x0800ac5f

0800991c <_Bfree>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	69c6      	ldr	r6, [r0, #28]
 8009920:	4605      	mov	r5, r0
 8009922:	460c      	mov	r4, r1
 8009924:	b976      	cbnz	r6, 8009944 <_Bfree+0x28>
 8009926:	2010      	movs	r0, #16
 8009928:	f7ff fe44 	bl	80095b4 <malloc>
 800992c:	4602      	mov	r2, r0
 800992e:	61e8      	str	r0, [r5, #28]
 8009930:	b920      	cbnz	r0, 800993c <_Bfree+0x20>
 8009932:	4b09      	ldr	r3, [pc, #36]	@ (8009958 <_Bfree+0x3c>)
 8009934:	4809      	ldr	r0, [pc, #36]	@ (800995c <_Bfree+0x40>)
 8009936:	218f      	movs	r1, #143	@ 0x8f
 8009938:	f000 fe6a 	bl	800a610 <__assert_func>
 800993c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009940:	6006      	str	r6, [r0, #0]
 8009942:	60c6      	str	r6, [r0, #12]
 8009944:	b13c      	cbz	r4, 8009956 <_Bfree+0x3a>
 8009946:	69eb      	ldr	r3, [r5, #28]
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009950:	6021      	str	r1, [r4, #0]
 8009952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	0800ab6e 	.word	0x0800ab6e
 800995c:	0800ac5f 	.word	0x0800ac5f

08009960 <__multadd>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	690d      	ldr	r5, [r1, #16]
 8009966:	4607      	mov	r7, r0
 8009968:	460c      	mov	r4, r1
 800996a:	461e      	mov	r6, r3
 800996c:	f101 0c14 	add.w	ip, r1, #20
 8009970:	2000      	movs	r0, #0
 8009972:	f8dc 3000 	ldr.w	r3, [ip]
 8009976:	b299      	uxth	r1, r3
 8009978:	fb02 6101 	mla	r1, r2, r1, r6
 800997c:	0c1e      	lsrs	r6, r3, #16
 800997e:	0c0b      	lsrs	r3, r1, #16
 8009980:	fb02 3306 	mla	r3, r2, r6, r3
 8009984:	b289      	uxth	r1, r1
 8009986:	3001      	adds	r0, #1
 8009988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800998c:	4285      	cmp	r5, r0
 800998e:	f84c 1b04 	str.w	r1, [ip], #4
 8009992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009996:	dcec      	bgt.n	8009972 <__multadd+0x12>
 8009998:	b30e      	cbz	r6, 80099de <__multadd+0x7e>
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	42ab      	cmp	r3, r5
 800999e:	dc19      	bgt.n	80099d4 <__multadd+0x74>
 80099a0:	6861      	ldr	r1, [r4, #4]
 80099a2:	4638      	mov	r0, r7
 80099a4:	3101      	adds	r1, #1
 80099a6:	f7ff ff79 	bl	800989c <_Balloc>
 80099aa:	4680      	mov	r8, r0
 80099ac:	b928      	cbnz	r0, 80099ba <__multadd+0x5a>
 80099ae:	4602      	mov	r2, r0
 80099b0:	4b0c      	ldr	r3, [pc, #48]	@ (80099e4 <__multadd+0x84>)
 80099b2:	480d      	ldr	r0, [pc, #52]	@ (80099e8 <__multadd+0x88>)
 80099b4:	21ba      	movs	r1, #186	@ 0xba
 80099b6:	f000 fe2b 	bl	800a610 <__assert_func>
 80099ba:	6922      	ldr	r2, [r4, #16]
 80099bc:	3202      	adds	r2, #2
 80099be:	f104 010c 	add.w	r1, r4, #12
 80099c2:	0092      	lsls	r2, r2, #2
 80099c4:	300c      	adds	r0, #12
 80099c6:	f7fe f9b8 	bl	8007d3a <memcpy>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff ffa5 	bl	800991c <_Bfree>
 80099d2:	4644      	mov	r4, r8
 80099d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099d8:	3501      	adds	r5, #1
 80099da:	615e      	str	r6, [r3, #20]
 80099dc:	6125      	str	r5, [r4, #16]
 80099de:	4620      	mov	r0, r4
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	0800abdd 	.word	0x0800abdd
 80099e8:	0800ac5f 	.word	0x0800ac5f

080099ec <__s2b>:
 80099ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f0:	460c      	mov	r4, r1
 80099f2:	4615      	mov	r5, r2
 80099f4:	461f      	mov	r7, r3
 80099f6:	2209      	movs	r2, #9
 80099f8:	3308      	adds	r3, #8
 80099fa:	4606      	mov	r6, r0
 80099fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a00:	2100      	movs	r1, #0
 8009a02:	2201      	movs	r2, #1
 8009a04:	429a      	cmp	r2, r3
 8009a06:	db09      	blt.n	8009a1c <__s2b+0x30>
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff ff47 	bl	800989c <_Balloc>
 8009a0e:	b940      	cbnz	r0, 8009a22 <__s2b+0x36>
 8009a10:	4602      	mov	r2, r0
 8009a12:	4b19      	ldr	r3, [pc, #100]	@ (8009a78 <__s2b+0x8c>)
 8009a14:	4819      	ldr	r0, [pc, #100]	@ (8009a7c <__s2b+0x90>)
 8009a16:	21d3      	movs	r1, #211	@ 0xd3
 8009a18:	f000 fdfa 	bl	800a610 <__assert_func>
 8009a1c:	0052      	lsls	r2, r2, #1
 8009a1e:	3101      	adds	r1, #1
 8009a20:	e7f0      	b.n	8009a04 <__s2b+0x18>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	6143      	str	r3, [r0, #20]
 8009a26:	2d09      	cmp	r5, #9
 8009a28:	f04f 0301 	mov.w	r3, #1
 8009a2c:	6103      	str	r3, [r0, #16]
 8009a2e:	dd16      	ble.n	8009a5e <__s2b+0x72>
 8009a30:	f104 0909 	add.w	r9, r4, #9
 8009a34:	46c8      	mov	r8, r9
 8009a36:	442c      	add	r4, r5
 8009a38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	3b30      	subs	r3, #48	@ 0x30
 8009a40:	220a      	movs	r2, #10
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ff8c 	bl	8009960 <__multadd>
 8009a48:	45a0      	cmp	r8, r4
 8009a4a:	d1f5      	bne.n	8009a38 <__s2b+0x4c>
 8009a4c:	f1a5 0408 	sub.w	r4, r5, #8
 8009a50:	444c      	add	r4, r9
 8009a52:	1b2d      	subs	r5, r5, r4
 8009a54:	1963      	adds	r3, r4, r5
 8009a56:	42bb      	cmp	r3, r7
 8009a58:	db04      	blt.n	8009a64 <__s2b+0x78>
 8009a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5e:	340a      	adds	r4, #10
 8009a60:	2509      	movs	r5, #9
 8009a62:	e7f6      	b.n	8009a52 <__s2b+0x66>
 8009a64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a68:	4601      	mov	r1, r0
 8009a6a:	3b30      	subs	r3, #48	@ 0x30
 8009a6c:	220a      	movs	r2, #10
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ff76 	bl	8009960 <__multadd>
 8009a74:	e7ee      	b.n	8009a54 <__s2b+0x68>
 8009a76:	bf00      	nop
 8009a78:	0800abdd 	.word	0x0800abdd
 8009a7c:	0800ac5f 	.word	0x0800ac5f

08009a80 <__hi0bits>:
 8009a80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a84:	4603      	mov	r3, r0
 8009a86:	bf36      	itet	cc
 8009a88:	0403      	lslcc	r3, r0, #16
 8009a8a:	2000      	movcs	r0, #0
 8009a8c:	2010      	movcc	r0, #16
 8009a8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a92:	bf3c      	itt	cc
 8009a94:	021b      	lslcc	r3, r3, #8
 8009a96:	3008      	addcc	r0, #8
 8009a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a9c:	bf3c      	itt	cc
 8009a9e:	011b      	lslcc	r3, r3, #4
 8009aa0:	3004      	addcc	r0, #4
 8009aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aa6:	bf3c      	itt	cc
 8009aa8:	009b      	lslcc	r3, r3, #2
 8009aaa:	3002      	addcc	r0, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	db05      	blt.n	8009abc <__hi0bits+0x3c>
 8009ab0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ab4:	f100 0001 	add.w	r0, r0, #1
 8009ab8:	bf08      	it	eq
 8009aba:	2020      	moveq	r0, #32
 8009abc:	4770      	bx	lr

08009abe <__lo0bits>:
 8009abe:	6803      	ldr	r3, [r0, #0]
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	f013 0007 	ands.w	r0, r3, #7
 8009ac6:	d00b      	beq.n	8009ae0 <__lo0bits+0x22>
 8009ac8:	07d9      	lsls	r1, r3, #31
 8009aca:	d421      	bmi.n	8009b10 <__lo0bits+0x52>
 8009acc:	0798      	lsls	r0, r3, #30
 8009ace:	bf49      	itett	mi
 8009ad0:	085b      	lsrmi	r3, r3, #1
 8009ad2:	089b      	lsrpl	r3, r3, #2
 8009ad4:	2001      	movmi	r0, #1
 8009ad6:	6013      	strmi	r3, [r2, #0]
 8009ad8:	bf5c      	itt	pl
 8009ada:	6013      	strpl	r3, [r2, #0]
 8009adc:	2002      	movpl	r0, #2
 8009ade:	4770      	bx	lr
 8009ae0:	b299      	uxth	r1, r3
 8009ae2:	b909      	cbnz	r1, 8009ae8 <__lo0bits+0x2a>
 8009ae4:	0c1b      	lsrs	r3, r3, #16
 8009ae6:	2010      	movs	r0, #16
 8009ae8:	b2d9      	uxtb	r1, r3
 8009aea:	b909      	cbnz	r1, 8009af0 <__lo0bits+0x32>
 8009aec:	3008      	adds	r0, #8
 8009aee:	0a1b      	lsrs	r3, r3, #8
 8009af0:	0719      	lsls	r1, r3, #28
 8009af2:	bf04      	itt	eq
 8009af4:	091b      	lsreq	r3, r3, #4
 8009af6:	3004      	addeq	r0, #4
 8009af8:	0799      	lsls	r1, r3, #30
 8009afa:	bf04      	itt	eq
 8009afc:	089b      	lsreq	r3, r3, #2
 8009afe:	3002      	addeq	r0, #2
 8009b00:	07d9      	lsls	r1, r3, #31
 8009b02:	d403      	bmi.n	8009b0c <__lo0bits+0x4e>
 8009b04:	085b      	lsrs	r3, r3, #1
 8009b06:	f100 0001 	add.w	r0, r0, #1
 8009b0a:	d003      	beq.n	8009b14 <__lo0bits+0x56>
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	4770      	bx	lr
 8009b10:	2000      	movs	r0, #0
 8009b12:	4770      	bx	lr
 8009b14:	2020      	movs	r0, #32
 8009b16:	4770      	bx	lr

08009b18 <__i2b>:
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	f7ff febd 	bl	800989c <_Balloc>
 8009b22:	4602      	mov	r2, r0
 8009b24:	b928      	cbnz	r0, 8009b32 <__i2b+0x1a>
 8009b26:	4b05      	ldr	r3, [pc, #20]	@ (8009b3c <__i2b+0x24>)
 8009b28:	4805      	ldr	r0, [pc, #20]	@ (8009b40 <__i2b+0x28>)
 8009b2a:	f240 1145 	movw	r1, #325	@ 0x145
 8009b2e:	f000 fd6f 	bl	800a610 <__assert_func>
 8009b32:	2301      	movs	r3, #1
 8009b34:	6144      	str	r4, [r0, #20]
 8009b36:	6103      	str	r3, [r0, #16]
 8009b38:	bd10      	pop	{r4, pc}
 8009b3a:	bf00      	nop
 8009b3c:	0800abdd 	.word	0x0800abdd
 8009b40:	0800ac5f 	.word	0x0800ac5f

08009b44 <__multiply>:
 8009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b48:	4614      	mov	r4, r2
 8009b4a:	690a      	ldr	r2, [r1, #16]
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	bfa8      	it	ge
 8009b52:	4623      	movge	r3, r4
 8009b54:	460f      	mov	r7, r1
 8009b56:	bfa4      	itt	ge
 8009b58:	460c      	movge	r4, r1
 8009b5a:	461f      	movge	r7, r3
 8009b5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009b64:	68a3      	ldr	r3, [r4, #8]
 8009b66:	6861      	ldr	r1, [r4, #4]
 8009b68:	eb0a 0609 	add.w	r6, sl, r9
 8009b6c:	42b3      	cmp	r3, r6
 8009b6e:	b085      	sub	sp, #20
 8009b70:	bfb8      	it	lt
 8009b72:	3101      	addlt	r1, #1
 8009b74:	f7ff fe92 	bl	800989c <_Balloc>
 8009b78:	b930      	cbnz	r0, 8009b88 <__multiply+0x44>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	4b44      	ldr	r3, [pc, #272]	@ (8009c90 <__multiply+0x14c>)
 8009b7e:	4845      	ldr	r0, [pc, #276]	@ (8009c94 <__multiply+0x150>)
 8009b80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b84:	f000 fd44 	bl	800a610 <__assert_func>
 8009b88:	f100 0514 	add.w	r5, r0, #20
 8009b8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b90:	462b      	mov	r3, r5
 8009b92:	2200      	movs	r2, #0
 8009b94:	4543      	cmp	r3, r8
 8009b96:	d321      	bcc.n	8009bdc <__multiply+0x98>
 8009b98:	f107 0114 	add.w	r1, r7, #20
 8009b9c:	f104 0214 	add.w	r2, r4, #20
 8009ba0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009ba4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ba8:	9302      	str	r3, [sp, #8]
 8009baa:	1b13      	subs	r3, r2, r4
 8009bac:	3b15      	subs	r3, #21
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	f104 0715 	add.w	r7, r4, #21
 8009bb8:	42ba      	cmp	r2, r7
 8009bba:	bf38      	it	cc
 8009bbc:	2304      	movcc	r3, #4
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	9b02      	ldr	r3, [sp, #8]
 8009bc2:	9103      	str	r1, [sp, #12]
 8009bc4:	428b      	cmp	r3, r1
 8009bc6:	d80c      	bhi.n	8009be2 <__multiply+0x9e>
 8009bc8:	2e00      	cmp	r6, #0
 8009bca:	dd03      	ble.n	8009bd4 <__multiply+0x90>
 8009bcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d05b      	beq.n	8009c8c <__multiply+0x148>
 8009bd4:	6106      	str	r6, [r0, #16]
 8009bd6:	b005      	add	sp, #20
 8009bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bdc:	f843 2b04 	str.w	r2, [r3], #4
 8009be0:	e7d8      	b.n	8009b94 <__multiply+0x50>
 8009be2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009be6:	f1ba 0f00 	cmp.w	sl, #0
 8009bea:	d024      	beq.n	8009c36 <__multiply+0xf2>
 8009bec:	f104 0e14 	add.w	lr, r4, #20
 8009bf0:	46a9      	mov	r9, r5
 8009bf2:	f04f 0c00 	mov.w	ip, #0
 8009bf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bfa:	f8d9 3000 	ldr.w	r3, [r9]
 8009bfe:	fa1f fb87 	uxth.w	fp, r7
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	fb0a 330b 	mla	r3, sl, fp, r3
 8009c08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009c0c:	f8d9 7000 	ldr.w	r7, [r9]
 8009c10:	4463      	add	r3, ip
 8009c12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c16:	fb0a c70b 	mla	r7, sl, fp, ip
 8009c1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c24:	4572      	cmp	r2, lr
 8009c26:	f849 3b04 	str.w	r3, [r9], #4
 8009c2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c2e:	d8e2      	bhi.n	8009bf6 <__multiply+0xb2>
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	f845 c003 	str.w	ip, [r5, r3]
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c3c:	3104      	adds	r1, #4
 8009c3e:	f1b9 0f00 	cmp.w	r9, #0
 8009c42:	d021      	beq.n	8009c88 <__multiply+0x144>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	f104 0c14 	add.w	ip, r4, #20
 8009c4a:	46ae      	mov	lr, r5
 8009c4c:	f04f 0a00 	mov.w	sl, #0
 8009c50:	f8bc b000 	ldrh.w	fp, [ip]
 8009c54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009c58:	fb09 770b 	mla	r7, r9, fp, r7
 8009c5c:	4457      	add	r7, sl
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c64:	f84e 3b04 	str.w	r3, [lr], #4
 8009c68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c70:	f8be 3000 	ldrh.w	r3, [lr]
 8009c74:	fb09 330a 	mla	r3, r9, sl, r3
 8009c78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c7c:	4562      	cmp	r2, ip
 8009c7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c82:	d8e5      	bhi.n	8009c50 <__multiply+0x10c>
 8009c84:	9f01      	ldr	r7, [sp, #4]
 8009c86:	51eb      	str	r3, [r5, r7]
 8009c88:	3504      	adds	r5, #4
 8009c8a:	e799      	b.n	8009bc0 <__multiply+0x7c>
 8009c8c:	3e01      	subs	r6, #1
 8009c8e:	e79b      	b.n	8009bc8 <__multiply+0x84>
 8009c90:	0800abdd 	.word	0x0800abdd
 8009c94:	0800ac5f 	.word	0x0800ac5f

08009c98 <__pow5mult>:
 8009c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c9c:	4615      	mov	r5, r2
 8009c9e:	f012 0203 	ands.w	r2, r2, #3
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	460e      	mov	r6, r1
 8009ca6:	d007      	beq.n	8009cb8 <__pow5mult+0x20>
 8009ca8:	4c25      	ldr	r4, [pc, #148]	@ (8009d40 <__pow5mult+0xa8>)
 8009caa:	3a01      	subs	r2, #1
 8009cac:	2300      	movs	r3, #0
 8009cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cb2:	f7ff fe55 	bl	8009960 <__multadd>
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	10ad      	asrs	r5, r5, #2
 8009cba:	d03d      	beq.n	8009d38 <__pow5mult+0xa0>
 8009cbc:	69fc      	ldr	r4, [r7, #28]
 8009cbe:	b97c      	cbnz	r4, 8009ce0 <__pow5mult+0x48>
 8009cc0:	2010      	movs	r0, #16
 8009cc2:	f7ff fc77 	bl	80095b4 <malloc>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	61f8      	str	r0, [r7, #28]
 8009cca:	b928      	cbnz	r0, 8009cd8 <__pow5mult+0x40>
 8009ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8009d44 <__pow5mult+0xac>)
 8009cce:	481e      	ldr	r0, [pc, #120]	@ (8009d48 <__pow5mult+0xb0>)
 8009cd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009cd4:	f000 fc9c 	bl	800a610 <__assert_func>
 8009cd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cdc:	6004      	str	r4, [r0, #0]
 8009cde:	60c4      	str	r4, [r0, #12]
 8009ce0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ce8:	b94c      	cbnz	r4, 8009cfe <__pow5mult+0x66>
 8009cea:	f240 2171 	movw	r1, #625	@ 0x271
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f7ff ff12 	bl	8009b18 <__i2b>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	f04f 0900 	mov.w	r9, #0
 8009d02:	07eb      	lsls	r3, r5, #31
 8009d04:	d50a      	bpl.n	8009d1c <__pow5mult+0x84>
 8009d06:	4631      	mov	r1, r6
 8009d08:	4622      	mov	r2, r4
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	f7ff ff1a 	bl	8009b44 <__multiply>
 8009d10:	4631      	mov	r1, r6
 8009d12:	4680      	mov	r8, r0
 8009d14:	4638      	mov	r0, r7
 8009d16:	f7ff fe01 	bl	800991c <_Bfree>
 8009d1a:	4646      	mov	r6, r8
 8009d1c:	106d      	asrs	r5, r5, #1
 8009d1e:	d00b      	beq.n	8009d38 <__pow5mult+0xa0>
 8009d20:	6820      	ldr	r0, [r4, #0]
 8009d22:	b938      	cbnz	r0, 8009d34 <__pow5mult+0x9c>
 8009d24:	4622      	mov	r2, r4
 8009d26:	4621      	mov	r1, r4
 8009d28:	4638      	mov	r0, r7
 8009d2a:	f7ff ff0b 	bl	8009b44 <__multiply>
 8009d2e:	6020      	str	r0, [r4, #0]
 8009d30:	f8c0 9000 	str.w	r9, [r0]
 8009d34:	4604      	mov	r4, r0
 8009d36:	e7e4      	b.n	8009d02 <__pow5mult+0x6a>
 8009d38:	4630      	mov	r0, r6
 8009d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d3e:	bf00      	nop
 8009d40:	0800acb8 	.word	0x0800acb8
 8009d44:	0800ab6e 	.word	0x0800ab6e
 8009d48:	0800ac5f 	.word	0x0800ac5f

08009d4c <__lshift>:
 8009d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d50:	460c      	mov	r4, r1
 8009d52:	6849      	ldr	r1, [r1, #4]
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d5a:	68a3      	ldr	r3, [r4, #8]
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	4691      	mov	r9, r2
 8009d60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d64:	f108 0601 	add.w	r6, r8, #1
 8009d68:	42b3      	cmp	r3, r6
 8009d6a:	db0b      	blt.n	8009d84 <__lshift+0x38>
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	f7ff fd95 	bl	800989c <_Balloc>
 8009d72:	4605      	mov	r5, r0
 8009d74:	b948      	cbnz	r0, 8009d8a <__lshift+0x3e>
 8009d76:	4602      	mov	r2, r0
 8009d78:	4b28      	ldr	r3, [pc, #160]	@ (8009e1c <__lshift+0xd0>)
 8009d7a:	4829      	ldr	r0, [pc, #164]	@ (8009e20 <__lshift+0xd4>)
 8009d7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d80:	f000 fc46 	bl	800a610 <__assert_func>
 8009d84:	3101      	adds	r1, #1
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	e7ee      	b.n	8009d68 <__lshift+0x1c>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f100 0114 	add.w	r1, r0, #20
 8009d90:	f100 0210 	add.w	r2, r0, #16
 8009d94:	4618      	mov	r0, r3
 8009d96:	4553      	cmp	r3, sl
 8009d98:	db33      	blt.n	8009e02 <__lshift+0xb6>
 8009d9a:	6920      	ldr	r0, [r4, #16]
 8009d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009da0:	f104 0314 	add.w	r3, r4, #20
 8009da4:	f019 091f 	ands.w	r9, r9, #31
 8009da8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009db0:	d02b      	beq.n	8009e0a <__lshift+0xbe>
 8009db2:	f1c9 0e20 	rsb	lr, r9, #32
 8009db6:	468a      	mov	sl, r1
 8009db8:	2200      	movs	r2, #0
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	fa00 f009 	lsl.w	r0, r0, r9
 8009dc0:	4310      	orrs	r0, r2
 8009dc2:	f84a 0b04 	str.w	r0, [sl], #4
 8009dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dca:	459c      	cmp	ip, r3
 8009dcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dd0:	d8f3      	bhi.n	8009dba <__lshift+0x6e>
 8009dd2:	ebac 0304 	sub.w	r3, ip, r4
 8009dd6:	3b15      	subs	r3, #21
 8009dd8:	f023 0303 	bic.w	r3, r3, #3
 8009ddc:	3304      	adds	r3, #4
 8009dde:	f104 0015 	add.w	r0, r4, #21
 8009de2:	4584      	cmp	ip, r0
 8009de4:	bf38      	it	cc
 8009de6:	2304      	movcc	r3, #4
 8009de8:	50ca      	str	r2, [r1, r3]
 8009dea:	b10a      	cbz	r2, 8009df0 <__lshift+0xa4>
 8009dec:	f108 0602 	add.w	r6, r8, #2
 8009df0:	3e01      	subs	r6, #1
 8009df2:	4638      	mov	r0, r7
 8009df4:	612e      	str	r6, [r5, #16]
 8009df6:	4621      	mov	r1, r4
 8009df8:	f7ff fd90 	bl	800991c <_Bfree>
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e06:	3301      	adds	r3, #1
 8009e08:	e7c5      	b.n	8009d96 <__lshift+0x4a>
 8009e0a:	3904      	subs	r1, #4
 8009e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e14:	459c      	cmp	ip, r3
 8009e16:	d8f9      	bhi.n	8009e0c <__lshift+0xc0>
 8009e18:	e7ea      	b.n	8009df0 <__lshift+0xa4>
 8009e1a:	bf00      	nop
 8009e1c:	0800abdd 	.word	0x0800abdd
 8009e20:	0800ac5f 	.word	0x0800ac5f

08009e24 <__mcmp>:
 8009e24:	690a      	ldr	r2, [r1, #16]
 8009e26:	4603      	mov	r3, r0
 8009e28:	6900      	ldr	r0, [r0, #16]
 8009e2a:	1a80      	subs	r0, r0, r2
 8009e2c:	b530      	push	{r4, r5, lr}
 8009e2e:	d10e      	bne.n	8009e4e <__mcmp+0x2a>
 8009e30:	3314      	adds	r3, #20
 8009e32:	3114      	adds	r1, #20
 8009e34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e44:	4295      	cmp	r5, r2
 8009e46:	d003      	beq.n	8009e50 <__mcmp+0x2c>
 8009e48:	d205      	bcs.n	8009e56 <__mcmp+0x32>
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e4e:	bd30      	pop	{r4, r5, pc}
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	d3f3      	bcc.n	8009e3c <__mcmp+0x18>
 8009e54:	e7fb      	b.n	8009e4e <__mcmp+0x2a>
 8009e56:	2001      	movs	r0, #1
 8009e58:	e7f9      	b.n	8009e4e <__mcmp+0x2a>
	...

08009e5c <__mdiff>:
 8009e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	4689      	mov	r9, r1
 8009e62:	4606      	mov	r6, r0
 8009e64:	4611      	mov	r1, r2
 8009e66:	4648      	mov	r0, r9
 8009e68:	4614      	mov	r4, r2
 8009e6a:	f7ff ffdb 	bl	8009e24 <__mcmp>
 8009e6e:	1e05      	subs	r5, r0, #0
 8009e70:	d112      	bne.n	8009e98 <__mdiff+0x3c>
 8009e72:	4629      	mov	r1, r5
 8009e74:	4630      	mov	r0, r6
 8009e76:	f7ff fd11 	bl	800989c <_Balloc>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	b928      	cbnz	r0, 8009e8a <__mdiff+0x2e>
 8009e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8009f7c <__mdiff+0x120>)
 8009e80:	f240 2137 	movw	r1, #567	@ 0x237
 8009e84:	483e      	ldr	r0, [pc, #248]	@ (8009f80 <__mdiff+0x124>)
 8009e86:	f000 fbc3 	bl	800a610 <__assert_func>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e90:	4610      	mov	r0, r2
 8009e92:	b003      	add	sp, #12
 8009e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e98:	bfbc      	itt	lt
 8009e9a:	464b      	movlt	r3, r9
 8009e9c:	46a1      	movlt	r9, r4
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ea4:	bfba      	itte	lt
 8009ea6:	461c      	movlt	r4, r3
 8009ea8:	2501      	movlt	r5, #1
 8009eaa:	2500      	movge	r5, #0
 8009eac:	f7ff fcf6 	bl	800989c <_Balloc>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	b918      	cbnz	r0, 8009ebc <__mdiff+0x60>
 8009eb4:	4b31      	ldr	r3, [pc, #196]	@ (8009f7c <__mdiff+0x120>)
 8009eb6:	f240 2145 	movw	r1, #581	@ 0x245
 8009eba:	e7e3      	b.n	8009e84 <__mdiff+0x28>
 8009ebc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ec0:	6926      	ldr	r6, [r4, #16]
 8009ec2:	60c5      	str	r5, [r0, #12]
 8009ec4:	f109 0310 	add.w	r3, r9, #16
 8009ec8:	f109 0514 	add.w	r5, r9, #20
 8009ecc:	f104 0e14 	add.w	lr, r4, #20
 8009ed0:	f100 0b14 	add.w	fp, r0, #20
 8009ed4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ed8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	46d9      	mov	r9, fp
 8009ee0:	f04f 0c00 	mov.w	ip, #0
 8009ee4:	9b01      	ldr	r3, [sp, #4]
 8009ee6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009eea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	fa1f f38a 	uxth.w	r3, sl
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	b283      	uxth	r3, r0
 8009ef8:	1acb      	subs	r3, r1, r3
 8009efa:	0c00      	lsrs	r0, r0, #16
 8009efc:	4463      	add	r3, ip
 8009efe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f0c:	4576      	cmp	r6, lr
 8009f0e:	f849 3b04 	str.w	r3, [r9], #4
 8009f12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f16:	d8e5      	bhi.n	8009ee4 <__mdiff+0x88>
 8009f18:	1b33      	subs	r3, r6, r4
 8009f1a:	3b15      	subs	r3, #21
 8009f1c:	f023 0303 	bic.w	r3, r3, #3
 8009f20:	3415      	adds	r4, #21
 8009f22:	3304      	adds	r3, #4
 8009f24:	42a6      	cmp	r6, r4
 8009f26:	bf38      	it	cc
 8009f28:	2304      	movcc	r3, #4
 8009f2a:	441d      	add	r5, r3
 8009f2c:	445b      	add	r3, fp
 8009f2e:	461e      	mov	r6, r3
 8009f30:	462c      	mov	r4, r5
 8009f32:	4544      	cmp	r4, r8
 8009f34:	d30e      	bcc.n	8009f54 <__mdiff+0xf8>
 8009f36:	f108 0103 	add.w	r1, r8, #3
 8009f3a:	1b49      	subs	r1, r1, r5
 8009f3c:	f021 0103 	bic.w	r1, r1, #3
 8009f40:	3d03      	subs	r5, #3
 8009f42:	45a8      	cmp	r8, r5
 8009f44:	bf38      	it	cc
 8009f46:	2100      	movcc	r1, #0
 8009f48:	440b      	add	r3, r1
 8009f4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f4e:	b191      	cbz	r1, 8009f76 <__mdiff+0x11a>
 8009f50:	6117      	str	r7, [r2, #16]
 8009f52:	e79d      	b.n	8009e90 <__mdiff+0x34>
 8009f54:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f58:	46e6      	mov	lr, ip
 8009f5a:	0c08      	lsrs	r0, r1, #16
 8009f5c:	fa1c fc81 	uxtah	ip, ip, r1
 8009f60:	4471      	add	r1, lr
 8009f62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f66:	b289      	uxth	r1, r1
 8009f68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f6c:	f846 1b04 	str.w	r1, [r6], #4
 8009f70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f74:	e7dd      	b.n	8009f32 <__mdiff+0xd6>
 8009f76:	3f01      	subs	r7, #1
 8009f78:	e7e7      	b.n	8009f4a <__mdiff+0xee>
 8009f7a:	bf00      	nop
 8009f7c:	0800abdd 	.word	0x0800abdd
 8009f80:	0800ac5f 	.word	0x0800ac5f

08009f84 <__ulp>:
 8009f84:	b082      	sub	sp, #8
 8009f86:	ed8d 0b00 	vstr	d0, [sp]
 8009f8a:	9a01      	ldr	r2, [sp, #4]
 8009f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009fcc <__ulp+0x48>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dc08      	bgt.n	8009faa <__ulp+0x26>
 8009f98:	425b      	negs	r3, r3
 8009f9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009fa2:	da04      	bge.n	8009fae <__ulp+0x2a>
 8009fa4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009fa8:	4113      	asrs	r3, r2
 8009faa:	2200      	movs	r2, #0
 8009fac:	e008      	b.n	8009fc0 <__ulp+0x3c>
 8009fae:	f1a2 0314 	sub.w	r3, r2, #20
 8009fb2:	2b1e      	cmp	r3, #30
 8009fb4:	bfda      	itte	le
 8009fb6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009fba:	40da      	lsrle	r2, r3
 8009fbc:	2201      	movgt	r2, #1
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	ec41 0b10 	vmov	d0, r0, r1
 8009fc8:	b002      	add	sp, #8
 8009fca:	4770      	bx	lr
 8009fcc:	7ff00000 	.word	0x7ff00000

08009fd0 <__b2d>:
 8009fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd4:	6906      	ldr	r6, [r0, #16]
 8009fd6:	f100 0814 	add.w	r8, r0, #20
 8009fda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009fde:	1f37      	subs	r7, r6, #4
 8009fe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	f7ff fd4b 	bl	8009a80 <__hi0bits>
 8009fea:	f1c0 0320 	rsb	r3, r0, #32
 8009fee:	280a      	cmp	r0, #10
 8009ff0:	600b      	str	r3, [r1, #0]
 8009ff2:	491b      	ldr	r1, [pc, #108]	@ (800a060 <__b2d+0x90>)
 8009ff4:	dc15      	bgt.n	800a022 <__b2d+0x52>
 8009ff6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ffa:	fa22 f30c 	lsr.w	r3, r2, ip
 8009ffe:	45b8      	cmp	r8, r7
 800a000:	ea43 0501 	orr.w	r5, r3, r1
 800a004:	bf34      	ite	cc
 800a006:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a00a:	2300      	movcs	r3, #0
 800a00c:	3015      	adds	r0, #21
 800a00e:	fa02 f000 	lsl.w	r0, r2, r0
 800a012:	fa23 f30c 	lsr.w	r3, r3, ip
 800a016:	4303      	orrs	r3, r0
 800a018:	461c      	mov	r4, r3
 800a01a:	ec45 4b10 	vmov	d0, r4, r5
 800a01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a022:	45b8      	cmp	r8, r7
 800a024:	bf3a      	itte	cc
 800a026:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a02a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a02e:	2300      	movcs	r3, #0
 800a030:	380b      	subs	r0, #11
 800a032:	d012      	beq.n	800a05a <__b2d+0x8a>
 800a034:	f1c0 0120 	rsb	r1, r0, #32
 800a038:	fa23 f401 	lsr.w	r4, r3, r1
 800a03c:	4082      	lsls	r2, r0
 800a03e:	4322      	orrs	r2, r4
 800a040:	4547      	cmp	r7, r8
 800a042:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a046:	bf8c      	ite	hi
 800a048:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a04c:	2200      	movls	r2, #0
 800a04e:	4083      	lsls	r3, r0
 800a050:	40ca      	lsrs	r2, r1
 800a052:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a056:	4313      	orrs	r3, r2
 800a058:	e7de      	b.n	800a018 <__b2d+0x48>
 800a05a:	ea42 0501 	orr.w	r5, r2, r1
 800a05e:	e7db      	b.n	800a018 <__b2d+0x48>
 800a060:	3ff00000 	.word	0x3ff00000

0800a064 <__d2b>:
 800a064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a068:	460f      	mov	r7, r1
 800a06a:	2101      	movs	r1, #1
 800a06c:	ec59 8b10 	vmov	r8, r9, d0
 800a070:	4616      	mov	r6, r2
 800a072:	f7ff fc13 	bl	800989c <_Balloc>
 800a076:	4604      	mov	r4, r0
 800a078:	b930      	cbnz	r0, 800a088 <__d2b+0x24>
 800a07a:	4602      	mov	r2, r0
 800a07c:	4b23      	ldr	r3, [pc, #140]	@ (800a10c <__d2b+0xa8>)
 800a07e:	4824      	ldr	r0, [pc, #144]	@ (800a110 <__d2b+0xac>)
 800a080:	f240 310f 	movw	r1, #783	@ 0x30f
 800a084:	f000 fac4 	bl	800a610 <__assert_func>
 800a088:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a08c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a090:	b10d      	cbz	r5, 800a096 <__d2b+0x32>
 800a092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	f1b8 0300 	subs.w	r3, r8, #0
 800a09c:	d023      	beq.n	800a0e6 <__d2b+0x82>
 800a09e:	4668      	mov	r0, sp
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	f7ff fd0c 	bl	8009abe <__lo0bits>
 800a0a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0aa:	b1d0      	cbz	r0, 800a0e2 <__d2b+0x7e>
 800a0ac:	f1c0 0320 	rsb	r3, r0, #32
 800a0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b4:	430b      	orrs	r3, r1
 800a0b6:	40c2      	lsrs	r2, r0
 800a0b8:	6163      	str	r3, [r4, #20]
 800a0ba:	9201      	str	r2, [sp, #4]
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	61a3      	str	r3, [r4, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bf0c      	ite	eq
 800a0c4:	2201      	moveq	r2, #1
 800a0c6:	2202      	movne	r2, #2
 800a0c8:	6122      	str	r2, [r4, #16]
 800a0ca:	b1a5      	cbz	r5, 800a0f6 <__d2b+0x92>
 800a0cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0d0:	4405      	add	r5, r0
 800a0d2:	603d      	str	r5, [r7, #0]
 800a0d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0d8:	6030      	str	r0, [r6, #0]
 800a0da:	4620      	mov	r0, r4
 800a0dc:	b003      	add	sp, #12
 800a0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0e2:	6161      	str	r1, [r4, #20]
 800a0e4:	e7ea      	b.n	800a0bc <__d2b+0x58>
 800a0e6:	a801      	add	r0, sp, #4
 800a0e8:	f7ff fce9 	bl	8009abe <__lo0bits>
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	6163      	str	r3, [r4, #20]
 800a0f0:	3020      	adds	r0, #32
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	e7e8      	b.n	800a0c8 <__d2b+0x64>
 800a0f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0fe:	6038      	str	r0, [r7, #0]
 800a100:	6918      	ldr	r0, [r3, #16]
 800a102:	f7ff fcbd 	bl	8009a80 <__hi0bits>
 800a106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a10a:	e7e5      	b.n	800a0d8 <__d2b+0x74>
 800a10c:	0800abdd 	.word	0x0800abdd
 800a110:	0800ac5f 	.word	0x0800ac5f

0800a114 <__ratio>:
 800a114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	b085      	sub	sp, #20
 800a11a:	e9cd 1000 	strd	r1, r0, [sp]
 800a11e:	a902      	add	r1, sp, #8
 800a120:	f7ff ff56 	bl	8009fd0 <__b2d>
 800a124:	9800      	ldr	r0, [sp, #0]
 800a126:	a903      	add	r1, sp, #12
 800a128:	ec55 4b10 	vmov	r4, r5, d0
 800a12c:	f7ff ff50 	bl	8009fd0 <__b2d>
 800a130:	9b01      	ldr	r3, [sp, #4]
 800a132:	6919      	ldr	r1, [r3, #16]
 800a134:	9b00      	ldr	r3, [sp, #0]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	1ac9      	subs	r1, r1, r3
 800a13a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	ec5b ab10 	vmov	sl, fp, d0
 800a144:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a148:	2b00      	cmp	r3, #0
 800a14a:	bfce      	itee	gt
 800a14c:	462a      	movgt	r2, r5
 800a14e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a152:	465a      	movle	r2, fp
 800a154:	462f      	mov	r7, r5
 800a156:	46d9      	mov	r9, fp
 800a158:	bfcc      	ite	gt
 800a15a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a15e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a162:	464b      	mov	r3, r9
 800a164:	4652      	mov	r2, sl
 800a166:	4620      	mov	r0, r4
 800a168:	4639      	mov	r1, r7
 800a16a:	f7f6 fb97 	bl	800089c <__aeabi_ddiv>
 800a16e:	ec41 0b10 	vmov	d0, r0, r1
 800a172:	b005      	add	sp, #20
 800a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a178 <__copybits>:
 800a178:	3901      	subs	r1, #1
 800a17a:	b570      	push	{r4, r5, r6, lr}
 800a17c:	1149      	asrs	r1, r1, #5
 800a17e:	6914      	ldr	r4, [r2, #16]
 800a180:	3101      	adds	r1, #1
 800a182:	f102 0314 	add.w	r3, r2, #20
 800a186:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a18a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a18e:	1f05      	subs	r5, r0, #4
 800a190:	42a3      	cmp	r3, r4
 800a192:	d30c      	bcc.n	800a1ae <__copybits+0x36>
 800a194:	1aa3      	subs	r3, r4, r2
 800a196:	3b11      	subs	r3, #17
 800a198:	f023 0303 	bic.w	r3, r3, #3
 800a19c:	3211      	adds	r2, #17
 800a19e:	42a2      	cmp	r2, r4
 800a1a0:	bf88      	it	hi
 800a1a2:	2300      	movhi	r3, #0
 800a1a4:	4418      	add	r0, r3
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	4288      	cmp	r0, r1
 800a1aa:	d305      	bcc.n	800a1b8 <__copybits+0x40>
 800a1ac:	bd70      	pop	{r4, r5, r6, pc}
 800a1ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1b6:	e7eb      	b.n	800a190 <__copybits+0x18>
 800a1b8:	f840 3b04 	str.w	r3, [r0], #4
 800a1bc:	e7f4      	b.n	800a1a8 <__copybits+0x30>

0800a1be <__any_on>:
 800a1be:	f100 0214 	add.w	r2, r0, #20
 800a1c2:	6900      	ldr	r0, [r0, #16]
 800a1c4:	114b      	asrs	r3, r1, #5
 800a1c6:	4298      	cmp	r0, r3
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	db11      	blt.n	800a1f0 <__any_on+0x32>
 800a1cc:	dd0a      	ble.n	800a1e4 <__any_on+0x26>
 800a1ce:	f011 011f 	ands.w	r1, r1, #31
 800a1d2:	d007      	beq.n	800a1e4 <__any_on+0x26>
 800a1d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1d8:	fa24 f001 	lsr.w	r0, r4, r1
 800a1dc:	fa00 f101 	lsl.w	r1, r0, r1
 800a1e0:	428c      	cmp	r4, r1
 800a1e2:	d10b      	bne.n	800a1fc <__any_on+0x3e>
 800a1e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d803      	bhi.n	800a1f4 <__any_on+0x36>
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	bd10      	pop	{r4, pc}
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	e7f7      	b.n	800a1e4 <__any_on+0x26>
 800a1f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1f8:	2900      	cmp	r1, #0
 800a1fa:	d0f5      	beq.n	800a1e8 <__any_on+0x2a>
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	e7f6      	b.n	800a1ee <__any_on+0x30>

0800a200 <__sread>:
 800a200:	b510      	push	{r4, lr}
 800a202:	460c      	mov	r4, r1
 800a204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a208:	f000 f9ce 	bl	800a5a8 <_read_r>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	bfab      	itete	ge
 800a210:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a212:	89a3      	ldrhlt	r3, [r4, #12]
 800a214:	181b      	addge	r3, r3, r0
 800a216:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a21a:	bfac      	ite	ge
 800a21c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a21e:	81a3      	strhlt	r3, [r4, #12]
 800a220:	bd10      	pop	{r4, pc}

0800a222 <__swrite>:
 800a222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	461f      	mov	r7, r3
 800a228:	898b      	ldrh	r3, [r1, #12]
 800a22a:	05db      	lsls	r3, r3, #23
 800a22c:	4605      	mov	r5, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	4616      	mov	r6, r2
 800a232:	d505      	bpl.n	800a240 <__swrite+0x1e>
 800a234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a238:	2302      	movs	r3, #2
 800a23a:	2200      	movs	r2, #0
 800a23c:	f000 f9a2 	bl	800a584 <_lseek_r>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a246:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	4628      	mov	r0, r5
 800a252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a256:	f000 b9c9 	b.w	800a5ec <_write_r>

0800a25a <__sseek>:
 800a25a:	b510      	push	{r4, lr}
 800a25c:	460c      	mov	r4, r1
 800a25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a262:	f000 f98f 	bl	800a584 <_lseek_r>
 800a266:	1c43      	adds	r3, r0, #1
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	bf15      	itete	ne
 800a26c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a26e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a272:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a276:	81a3      	strheq	r3, [r4, #12]
 800a278:	bf18      	it	ne
 800a27a:	81a3      	strhne	r3, [r4, #12]
 800a27c:	bd10      	pop	{r4, pc}

0800a27e <__sclose>:
 800a27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a282:	f000 b94d 	b.w	800a520 <_close_r>

0800a286 <_realloc_r>:
 800a286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28a:	4680      	mov	r8, r0
 800a28c:	4615      	mov	r5, r2
 800a28e:	460c      	mov	r4, r1
 800a290:	b921      	cbnz	r1, 800a29c <_realloc_r+0x16>
 800a292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a296:	4611      	mov	r1, r2
 800a298:	f7ff b9b6 	b.w	8009608 <_malloc_r>
 800a29c:	b92a      	cbnz	r2, 800a2aa <_realloc_r+0x24>
 800a29e:	f000 f9e9 	bl	800a674 <_free_r>
 800a2a2:	2400      	movs	r4, #0
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2aa:	f000 fa2d 	bl	800a708 <_malloc_usable_size_r>
 800a2ae:	4285      	cmp	r5, r0
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	d802      	bhi.n	800a2ba <_realloc_r+0x34>
 800a2b4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2b8:	d8f4      	bhi.n	800a2a4 <_realloc_r+0x1e>
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	4640      	mov	r0, r8
 800a2be:	f7ff f9a3 	bl	8009608 <_malloc_r>
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d0ec      	beq.n	800a2a2 <_realloc_r+0x1c>
 800a2c8:	42b5      	cmp	r5, r6
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	bf28      	it	cs
 800a2d0:	4632      	movcs	r2, r6
 800a2d2:	f7fd fd32 	bl	8007d3a <memcpy>
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	4640      	mov	r0, r8
 800a2da:	f000 f9cb 	bl	800a674 <_free_r>
 800a2de:	463c      	mov	r4, r7
 800a2e0:	e7e0      	b.n	800a2a4 <_realloc_r+0x1e>

0800a2e2 <__swbuf_r>:
 800a2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e4:	460e      	mov	r6, r1
 800a2e6:	4614      	mov	r4, r2
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	b118      	cbz	r0, 800a2f4 <__swbuf_r+0x12>
 800a2ec:	6a03      	ldr	r3, [r0, #32]
 800a2ee:	b90b      	cbnz	r3, 800a2f4 <__swbuf_r+0x12>
 800a2f0:	f7fc fd98 	bl	8006e24 <__sinit>
 800a2f4:	69a3      	ldr	r3, [r4, #24]
 800a2f6:	60a3      	str	r3, [r4, #8]
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	071a      	lsls	r2, r3, #28
 800a2fc:	d501      	bpl.n	800a302 <__swbuf_r+0x20>
 800a2fe:	6923      	ldr	r3, [r4, #16]
 800a300:	b943      	cbnz	r3, 800a314 <__swbuf_r+0x32>
 800a302:	4621      	mov	r1, r4
 800a304:	4628      	mov	r0, r5
 800a306:	f000 f82b 	bl	800a360 <__swsetup_r>
 800a30a:	b118      	cbz	r0, 800a314 <__swbuf_r+0x32>
 800a30c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a310:	4638      	mov	r0, r7
 800a312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	6922      	ldr	r2, [r4, #16]
 800a318:	1a98      	subs	r0, r3, r2
 800a31a:	6963      	ldr	r3, [r4, #20]
 800a31c:	b2f6      	uxtb	r6, r6
 800a31e:	4283      	cmp	r3, r0
 800a320:	4637      	mov	r7, r6
 800a322:	dc05      	bgt.n	800a330 <__swbuf_r+0x4e>
 800a324:	4621      	mov	r1, r4
 800a326:	4628      	mov	r0, r5
 800a328:	f7ff fa84 	bl	8009834 <_fflush_r>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d1ed      	bne.n	800a30c <__swbuf_r+0x2a>
 800a330:	68a3      	ldr	r3, [r4, #8]
 800a332:	3b01      	subs	r3, #1
 800a334:	60a3      	str	r3, [r4, #8]
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	6022      	str	r2, [r4, #0]
 800a33c:	701e      	strb	r6, [r3, #0]
 800a33e:	6962      	ldr	r2, [r4, #20]
 800a340:	1c43      	adds	r3, r0, #1
 800a342:	429a      	cmp	r2, r3
 800a344:	d004      	beq.n	800a350 <__swbuf_r+0x6e>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	07db      	lsls	r3, r3, #31
 800a34a:	d5e1      	bpl.n	800a310 <__swbuf_r+0x2e>
 800a34c:	2e0a      	cmp	r6, #10
 800a34e:	d1df      	bne.n	800a310 <__swbuf_r+0x2e>
 800a350:	4621      	mov	r1, r4
 800a352:	4628      	mov	r0, r5
 800a354:	f7ff fa6e 	bl	8009834 <_fflush_r>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d0d9      	beq.n	800a310 <__swbuf_r+0x2e>
 800a35c:	e7d6      	b.n	800a30c <__swbuf_r+0x2a>
	...

0800a360 <__swsetup_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4b29      	ldr	r3, [pc, #164]	@ (800a408 <__swsetup_r+0xa8>)
 800a364:	4605      	mov	r5, r0
 800a366:	6818      	ldr	r0, [r3, #0]
 800a368:	460c      	mov	r4, r1
 800a36a:	b118      	cbz	r0, 800a374 <__swsetup_r+0x14>
 800a36c:	6a03      	ldr	r3, [r0, #32]
 800a36e:	b90b      	cbnz	r3, 800a374 <__swsetup_r+0x14>
 800a370:	f7fc fd58 	bl	8006e24 <__sinit>
 800a374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a378:	0719      	lsls	r1, r3, #28
 800a37a:	d422      	bmi.n	800a3c2 <__swsetup_r+0x62>
 800a37c:	06da      	lsls	r2, r3, #27
 800a37e:	d407      	bmi.n	800a390 <__swsetup_r+0x30>
 800a380:	2209      	movs	r2, #9
 800a382:	602a      	str	r2, [r5, #0]
 800a384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a38e:	e033      	b.n	800a3f8 <__swsetup_r+0x98>
 800a390:	0758      	lsls	r0, r3, #29
 800a392:	d512      	bpl.n	800a3ba <__swsetup_r+0x5a>
 800a394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a396:	b141      	cbz	r1, 800a3aa <__swsetup_r+0x4a>
 800a398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a39c:	4299      	cmp	r1, r3
 800a39e:	d002      	beq.n	800a3a6 <__swsetup_r+0x46>
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	f000 f967 	bl	800a674 <_free_r>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6063      	str	r3, [r4, #4]
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f043 0308 	orr.w	r3, r3, #8
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	6923      	ldr	r3, [r4, #16]
 800a3c4:	b94b      	cbnz	r3, 800a3da <__swsetup_r+0x7a>
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d0:	d003      	beq.n	800a3da <__swsetup_r+0x7a>
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f000 f84c 	bl	800a472 <__smakebuf_r>
 800a3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3de:	f013 0201 	ands.w	r2, r3, #1
 800a3e2:	d00a      	beq.n	800a3fa <__swsetup_r+0x9a>
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	60a2      	str	r2, [r4, #8]
 800a3e8:	6962      	ldr	r2, [r4, #20]
 800a3ea:	4252      	negs	r2, r2
 800a3ec:	61a2      	str	r2, [r4, #24]
 800a3ee:	6922      	ldr	r2, [r4, #16]
 800a3f0:	b942      	cbnz	r2, 800a404 <__swsetup_r+0xa4>
 800a3f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a3f6:	d1c5      	bne.n	800a384 <__swsetup_r+0x24>
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	0799      	lsls	r1, r3, #30
 800a3fc:	bf58      	it	pl
 800a3fe:	6962      	ldrpl	r2, [r4, #20]
 800a400:	60a2      	str	r2, [r4, #8]
 800a402:	e7f4      	b.n	800a3ee <__swsetup_r+0x8e>
 800a404:	2000      	movs	r0, #0
 800a406:	e7f7      	b.n	800a3f8 <__swsetup_r+0x98>
 800a408:	20000184 	.word	0x20000184

0800a40c <__ascii_wctomb>:
 800a40c:	4603      	mov	r3, r0
 800a40e:	4608      	mov	r0, r1
 800a410:	b141      	cbz	r1, 800a424 <__ascii_wctomb+0x18>
 800a412:	2aff      	cmp	r2, #255	@ 0xff
 800a414:	d904      	bls.n	800a420 <__ascii_wctomb+0x14>
 800a416:	228a      	movs	r2, #138	@ 0x8a
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a41e:	4770      	bx	lr
 800a420:	700a      	strb	r2, [r1, #0]
 800a422:	2001      	movs	r0, #1
 800a424:	4770      	bx	lr

0800a426 <__swhatbuf_r>:
 800a426:	b570      	push	{r4, r5, r6, lr}
 800a428:	460c      	mov	r4, r1
 800a42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a42e:	2900      	cmp	r1, #0
 800a430:	b096      	sub	sp, #88	@ 0x58
 800a432:	4615      	mov	r5, r2
 800a434:	461e      	mov	r6, r3
 800a436:	da0d      	bge.n	800a454 <__swhatbuf_r+0x2e>
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a43e:	f04f 0100 	mov.w	r1, #0
 800a442:	bf14      	ite	ne
 800a444:	2340      	movne	r3, #64	@ 0x40
 800a446:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a44a:	2000      	movs	r0, #0
 800a44c:	6031      	str	r1, [r6, #0]
 800a44e:	602b      	str	r3, [r5, #0]
 800a450:	b016      	add	sp, #88	@ 0x58
 800a452:	bd70      	pop	{r4, r5, r6, pc}
 800a454:	466a      	mov	r2, sp
 800a456:	f000 f873 	bl	800a540 <_fstat_r>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	dbec      	blt.n	800a438 <__swhatbuf_r+0x12>
 800a45e:	9901      	ldr	r1, [sp, #4]
 800a460:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a464:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a468:	4259      	negs	r1, r3
 800a46a:	4159      	adcs	r1, r3
 800a46c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a470:	e7eb      	b.n	800a44a <__swhatbuf_r+0x24>

0800a472 <__smakebuf_r>:
 800a472:	898b      	ldrh	r3, [r1, #12]
 800a474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a476:	079d      	lsls	r5, r3, #30
 800a478:	4606      	mov	r6, r0
 800a47a:	460c      	mov	r4, r1
 800a47c:	d507      	bpl.n	800a48e <__smakebuf_r+0x1c>
 800a47e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	6123      	str	r3, [r4, #16]
 800a486:	2301      	movs	r3, #1
 800a488:	6163      	str	r3, [r4, #20]
 800a48a:	b003      	add	sp, #12
 800a48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a48e:	ab01      	add	r3, sp, #4
 800a490:	466a      	mov	r2, sp
 800a492:	f7ff ffc8 	bl	800a426 <__swhatbuf_r>
 800a496:	9f00      	ldr	r7, [sp, #0]
 800a498:	4605      	mov	r5, r0
 800a49a:	4639      	mov	r1, r7
 800a49c:	4630      	mov	r0, r6
 800a49e:	f7ff f8b3 	bl	8009608 <_malloc_r>
 800a4a2:	b948      	cbnz	r0, 800a4b8 <__smakebuf_r+0x46>
 800a4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a8:	059a      	lsls	r2, r3, #22
 800a4aa:	d4ee      	bmi.n	800a48a <__smakebuf_r+0x18>
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	f043 0302 	orr.w	r3, r3, #2
 800a4b4:	81a3      	strh	r3, [r4, #12]
 800a4b6:	e7e2      	b.n	800a47e <__smakebuf_r+0xc>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	6020      	str	r0, [r4, #0]
 800a4bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	9b01      	ldr	r3, [sp, #4]
 800a4c4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a4c8:	b15b      	cbz	r3, 800a4e2 <__smakebuf_r+0x70>
 800a4ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f000 f848 	bl	800a564 <_isatty_r>
 800a4d4:	b128      	cbz	r0, 800a4e2 <__smakebuf_r+0x70>
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	f023 0303 	bic.w	r3, r3, #3
 800a4dc:	f043 0301 	orr.w	r3, r3, #1
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	431d      	orrs	r5, r3
 800a4e6:	81a5      	strh	r5, [r4, #12]
 800a4e8:	e7cf      	b.n	800a48a <__smakebuf_r+0x18>

0800a4ea <memmove>:
 800a4ea:	4288      	cmp	r0, r1
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	eb01 0402 	add.w	r4, r1, r2
 800a4f2:	d902      	bls.n	800a4fa <memmove+0x10>
 800a4f4:	4284      	cmp	r4, r0
 800a4f6:	4623      	mov	r3, r4
 800a4f8:	d807      	bhi.n	800a50a <memmove+0x20>
 800a4fa:	1e43      	subs	r3, r0, #1
 800a4fc:	42a1      	cmp	r1, r4
 800a4fe:	d008      	beq.n	800a512 <memmove+0x28>
 800a500:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a504:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a508:	e7f8      	b.n	800a4fc <memmove+0x12>
 800a50a:	4402      	add	r2, r0
 800a50c:	4601      	mov	r1, r0
 800a50e:	428a      	cmp	r2, r1
 800a510:	d100      	bne.n	800a514 <memmove+0x2a>
 800a512:	bd10      	pop	{r4, pc}
 800a514:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a518:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a51c:	e7f7      	b.n	800a50e <memmove+0x24>
	...

0800a520 <_close_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d06      	ldr	r5, [pc, #24]	@ (800a53c <_close_r+0x1c>)
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	602b      	str	r3, [r5, #0]
 800a52c:	f7f7 fb70 	bl	8001c10 <_close>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_close_r+0x1a>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	b103      	cbz	r3, 800a53a <_close_r+0x1a>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	20000cd4 	.word	0x20000cd4

0800a540 <_fstat_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	@ (800a560 <_fstat_r+0x20>)
 800a544:	2300      	movs	r3, #0
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	4611      	mov	r1, r2
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	f7f7 fb6b 	bl	8001c28 <_fstat>
 800a552:	1c43      	adds	r3, r0, #1
 800a554:	d102      	bne.n	800a55c <_fstat_r+0x1c>
 800a556:	682b      	ldr	r3, [r5, #0]
 800a558:	b103      	cbz	r3, 800a55c <_fstat_r+0x1c>
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	bd38      	pop	{r3, r4, r5, pc}
 800a55e:	bf00      	nop
 800a560:	20000cd4 	.word	0x20000cd4

0800a564 <_isatty_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	@ (800a580 <_isatty_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7f7 fb6a 	bl	8001c48 <_isatty>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_isatty_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_isatty_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20000cd4 	.word	0x20000cd4

0800a584 <_lseek_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	@ (800a5a4 <_lseek_r+0x20>)
 800a588:	4604      	mov	r4, r0
 800a58a:	4608      	mov	r0, r1
 800a58c:	4611      	mov	r1, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	f7f7 fb63 	bl	8001c5e <_lseek>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_lseek_r+0x1e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_lseek_r+0x1e>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20000cd4 	.word	0x20000cd4

0800a5a8 <_read_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	@ (800a5c8 <_read_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f7 faf1 	bl	8001b9e <_read>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_read_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_read_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	20000cd4 	.word	0x20000cd4

0800a5cc <_sbrk_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d06      	ldr	r5, [pc, #24]	@ (800a5e8 <_sbrk_r+0x1c>)
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	4608      	mov	r0, r1
 800a5d6:	602b      	str	r3, [r5, #0]
 800a5d8:	f7f7 fb4e 	bl	8001c78 <_sbrk>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_sbrk_r+0x1a>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_sbrk_r+0x1a>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	20000cd4 	.word	0x20000cd4

0800a5ec <_write_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d07      	ldr	r5, [pc, #28]	@ (800a60c <_write_r+0x20>)
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	4608      	mov	r0, r1
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	602a      	str	r2, [r5, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f7f7 faec 	bl	8001bd8 <_write>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_write_r+0x1e>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_write_r+0x1e>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20000cd4 	.word	0x20000cd4

0800a610 <__assert_func>:
 800a610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a612:	4614      	mov	r4, r2
 800a614:	461a      	mov	r2, r3
 800a616:	4b09      	ldr	r3, [pc, #36]	@ (800a63c <__assert_func+0x2c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4605      	mov	r5, r0
 800a61c:	68d8      	ldr	r0, [r3, #12]
 800a61e:	b954      	cbnz	r4, 800a636 <__assert_func+0x26>
 800a620:	4b07      	ldr	r3, [pc, #28]	@ (800a640 <__assert_func+0x30>)
 800a622:	461c      	mov	r4, r3
 800a624:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a628:	9100      	str	r1, [sp, #0]
 800a62a:	462b      	mov	r3, r5
 800a62c:	4905      	ldr	r1, [pc, #20]	@ (800a644 <__assert_func+0x34>)
 800a62e:	f000 f873 	bl	800a718 <fiprintf>
 800a632:	f000 f883 	bl	800a73c <abort>
 800a636:	4b04      	ldr	r3, [pc, #16]	@ (800a648 <__assert_func+0x38>)
 800a638:	e7f4      	b.n	800a624 <__assert_func+0x14>
 800a63a:	bf00      	nop
 800a63c:	20000184 	.word	0x20000184
 800a640:	0800adf3 	.word	0x0800adf3
 800a644:	0800adc5 	.word	0x0800adc5
 800a648:	0800adb8 	.word	0x0800adb8

0800a64c <_calloc_r>:
 800a64c:	b570      	push	{r4, r5, r6, lr}
 800a64e:	fba1 5402 	umull	r5, r4, r1, r2
 800a652:	b93c      	cbnz	r4, 800a664 <_calloc_r+0x18>
 800a654:	4629      	mov	r1, r5
 800a656:	f7fe ffd7 	bl	8009608 <_malloc_r>
 800a65a:	4606      	mov	r6, r0
 800a65c:	b928      	cbnz	r0, 800a66a <_calloc_r+0x1e>
 800a65e:	2600      	movs	r6, #0
 800a660:	4630      	mov	r0, r6
 800a662:	bd70      	pop	{r4, r5, r6, pc}
 800a664:	220c      	movs	r2, #12
 800a666:	6002      	str	r2, [r0, #0]
 800a668:	e7f9      	b.n	800a65e <_calloc_r+0x12>
 800a66a:	462a      	mov	r2, r5
 800a66c:	4621      	mov	r1, r4
 800a66e:	f7fd fb2b 	bl	8007cc8 <memset>
 800a672:	e7f5      	b.n	800a660 <_calloc_r+0x14>

0800a674 <_free_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4605      	mov	r5, r0
 800a678:	2900      	cmp	r1, #0
 800a67a:	d041      	beq.n	800a700 <_free_r+0x8c>
 800a67c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a680:	1f0c      	subs	r4, r1, #4
 800a682:	2b00      	cmp	r3, #0
 800a684:	bfb8      	it	lt
 800a686:	18e4      	addlt	r4, r4, r3
 800a688:	f7ff f8fc 	bl	8009884 <__malloc_lock>
 800a68c:	4a1d      	ldr	r2, [pc, #116]	@ (800a704 <_free_r+0x90>)
 800a68e:	6813      	ldr	r3, [r2, #0]
 800a690:	b933      	cbnz	r3, 800a6a0 <_free_r+0x2c>
 800a692:	6063      	str	r3, [r4, #4]
 800a694:	6014      	str	r4, [r2, #0]
 800a696:	4628      	mov	r0, r5
 800a698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a69c:	f7ff b8f8 	b.w	8009890 <__malloc_unlock>
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	d908      	bls.n	800a6b6 <_free_r+0x42>
 800a6a4:	6820      	ldr	r0, [r4, #0]
 800a6a6:	1821      	adds	r1, r4, r0
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	bf01      	itttt	eq
 800a6ac:	6819      	ldreq	r1, [r3, #0]
 800a6ae:	685b      	ldreq	r3, [r3, #4]
 800a6b0:	1809      	addeq	r1, r1, r0
 800a6b2:	6021      	streq	r1, [r4, #0]
 800a6b4:	e7ed      	b.n	800a692 <_free_r+0x1e>
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	b10b      	cbz	r3, 800a6c0 <_free_r+0x4c>
 800a6bc:	42a3      	cmp	r3, r4
 800a6be:	d9fa      	bls.n	800a6b6 <_free_r+0x42>
 800a6c0:	6811      	ldr	r1, [r2, #0]
 800a6c2:	1850      	adds	r0, r2, r1
 800a6c4:	42a0      	cmp	r0, r4
 800a6c6:	d10b      	bne.n	800a6e0 <_free_r+0x6c>
 800a6c8:	6820      	ldr	r0, [r4, #0]
 800a6ca:	4401      	add	r1, r0
 800a6cc:	1850      	adds	r0, r2, r1
 800a6ce:	4283      	cmp	r3, r0
 800a6d0:	6011      	str	r1, [r2, #0]
 800a6d2:	d1e0      	bne.n	800a696 <_free_r+0x22>
 800a6d4:	6818      	ldr	r0, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	6053      	str	r3, [r2, #4]
 800a6da:	4408      	add	r0, r1
 800a6dc:	6010      	str	r0, [r2, #0]
 800a6de:	e7da      	b.n	800a696 <_free_r+0x22>
 800a6e0:	d902      	bls.n	800a6e8 <_free_r+0x74>
 800a6e2:	230c      	movs	r3, #12
 800a6e4:	602b      	str	r3, [r5, #0]
 800a6e6:	e7d6      	b.n	800a696 <_free_r+0x22>
 800a6e8:	6820      	ldr	r0, [r4, #0]
 800a6ea:	1821      	adds	r1, r4, r0
 800a6ec:	428b      	cmp	r3, r1
 800a6ee:	bf04      	itt	eq
 800a6f0:	6819      	ldreq	r1, [r3, #0]
 800a6f2:	685b      	ldreq	r3, [r3, #4]
 800a6f4:	6063      	str	r3, [r4, #4]
 800a6f6:	bf04      	itt	eq
 800a6f8:	1809      	addeq	r1, r1, r0
 800a6fa:	6021      	streq	r1, [r4, #0]
 800a6fc:	6054      	str	r4, [r2, #4]
 800a6fe:	e7ca      	b.n	800a696 <_free_r+0x22>
 800a700:	bd38      	pop	{r3, r4, r5, pc}
 800a702:	bf00      	nop
 800a704:	20000cd0 	.word	0x20000cd0

0800a708 <_malloc_usable_size_r>:
 800a708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a70c:	1f18      	subs	r0, r3, #4
 800a70e:	2b00      	cmp	r3, #0
 800a710:	bfbc      	itt	lt
 800a712:	580b      	ldrlt	r3, [r1, r0]
 800a714:	18c0      	addlt	r0, r0, r3
 800a716:	4770      	bx	lr

0800a718 <fiprintf>:
 800a718:	b40e      	push	{r1, r2, r3}
 800a71a:	b503      	push	{r0, r1, lr}
 800a71c:	4601      	mov	r1, r0
 800a71e:	ab03      	add	r3, sp, #12
 800a720:	4805      	ldr	r0, [pc, #20]	@ (800a738 <fiprintf+0x20>)
 800a722:	f853 2b04 	ldr.w	r2, [r3], #4
 800a726:	6800      	ldr	r0, [r0, #0]
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	f7fe fe2b 	bl	8009384 <_vfiprintf_r>
 800a72e:	b002      	add	sp, #8
 800a730:	f85d eb04 	ldr.w	lr, [sp], #4
 800a734:	b003      	add	sp, #12
 800a736:	4770      	bx	lr
 800a738:	20000184 	.word	0x20000184

0800a73c <abort>:
 800a73c:	b508      	push	{r3, lr}
 800a73e:	2006      	movs	r0, #6
 800a740:	f000 f82c 	bl	800a79c <raise>
 800a744:	2001      	movs	r0, #1
 800a746:	f7f7 fa1f 	bl	8001b88 <_exit>

0800a74a <_raise_r>:
 800a74a:	291f      	cmp	r1, #31
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4605      	mov	r5, r0
 800a750:	460c      	mov	r4, r1
 800a752:	d904      	bls.n	800a75e <_raise_r+0x14>
 800a754:	2316      	movs	r3, #22
 800a756:	6003      	str	r3, [r0, #0]
 800a758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a75c:	bd38      	pop	{r3, r4, r5, pc}
 800a75e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a760:	b112      	cbz	r2, 800a768 <_raise_r+0x1e>
 800a762:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a766:	b94b      	cbnz	r3, 800a77c <_raise_r+0x32>
 800a768:	4628      	mov	r0, r5
 800a76a:	f000 f831 	bl	800a7d0 <_getpid_r>
 800a76e:	4622      	mov	r2, r4
 800a770:	4601      	mov	r1, r0
 800a772:	4628      	mov	r0, r5
 800a774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a778:	f000 b818 	b.w	800a7ac <_kill_r>
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d00a      	beq.n	800a796 <_raise_r+0x4c>
 800a780:	1c59      	adds	r1, r3, #1
 800a782:	d103      	bne.n	800a78c <_raise_r+0x42>
 800a784:	2316      	movs	r3, #22
 800a786:	6003      	str	r3, [r0, #0]
 800a788:	2001      	movs	r0, #1
 800a78a:	e7e7      	b.n	800a75c <_raise_r+0x12>
 800a78c:	2100      	movs	r1, #0
 800a78e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a792:	4620      	mov	r0, r4
 800a794:	4798      	blx	r3
 800a796:	2000      	movs	r0, #0
 800a798:	e7e0      	b.n	800a75c <_raise_r+0x12>
	...

0800a79c <raise>:
 800a79c:	4b02      	ldr	r3, [pc, #8]	@ (800a7a8 <raise+0xc>)
 800a79e:	4601      	mov	r1, r0
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	f7ff bfd2 	b.w	800a74a <_raise_r>
 800a7a6:	bf00      	nop
 800a7a8:	20000184 	.word	0x20000184

0800a7ac <_kill_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d07      	ldr	r5, [pc, #28]	@ (800a7cc <_kill_r+0x20>)
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	602b      	str	r3, [r5, #0]
 800a7ba:	f7f7 f9d5 	bl	8001b68 <_kill>
 800a7be:	1c43      	adds	r3, r0, #1
 800a7c0:	d102      	bne.n	800a7c8 <_kill_r+0x1c>
 800a7c2:	682b      	ldr	r3, [r5, #0]
 800a7c4:	b103      	cbz	r3, 800a7c8 <_kill_r+0x1c>
 800a7c6:	6023      	str	r3, [r4, #0]
 800a7c8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000cd4 	.word	0x20000cd4

0800a7d0 <_getpid_r>:
 800a7d0:	f7f7 b9c2 	b.w	8001b58 <_getpid>

0800a7d4 <_init>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	bf00      	nop
 800a7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7da:	bc08      	pop	{r3}
 800a7dc:	469e      	mov	lr, r3
 800a7de:	4770      	bx	lr

0800a7e0 <_fini>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	bf00      	nop
 800a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e6:	bc08      	pop	{r3}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	4770      	bx	lr
