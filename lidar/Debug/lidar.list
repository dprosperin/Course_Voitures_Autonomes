
lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a514  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800a6f8  0800a6f8  0000b6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac6c  0800ac6c  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac6c  0800ac6c  0000bc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac74  0800ac74  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac74  0800ac74  0000bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac78  0800ac78  0000bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ac7c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b10  200001d4  0800ae50  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ce4  0800ae50  0000cce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e403  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  0001a607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0001c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000883  00000000  00000000  0001d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e31a  00000000  00000000  0001dcb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e588  00000000  00000000  0003bfcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b89a8  00000000  00000000  0004a555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102efd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  00102f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00107140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a6dc 	.word	0x0800a6dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a6dc 	.word	0x0800a6dc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <automate_decode>:
#include "stm32g4xx_hal.h"

extern UART_HandleTypeDef huart1;

void automate_decode(uint8_t receivedByte)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    static state_automate_t next_state = FLAG_START1;
    static state_automate_t current_state;

    uint8_t quality = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
    uint8_t constant_bit = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	73bb      	strb	r3, [r7, #14]
    uint8_t s = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	737b      	strb	r3, [r7, #13]
    uint8_t not_s = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	733b      	strb	r3, [r7, #12]
    static uint8_t angle_high_byte = 0;

    static float distance = 0;
    static float angle = 0;

    current_state = next_state;
 800104e:	4b83      	ldr	r3, [pc, #524]	@ (800125c <automate_decode+0x228>)
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	4b83      	ldr	r3, [pc, #524]	@ (8001260 <automate_decode+0x22c>)
 8001054:	701a      	strb	r2, [r3, #0]

    switch (current_state)
 8001056:	4b82      	ldr	r3, [pc, #520]	@ (8001260 <automate_decode+0x22c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b0b      	cmp	r3, #11
 800105c:	f200 80fa 	bhi.w	8001254 <automate_decode+0x220>
 8001060:	a201      	add	r2, pc, #4	@ (adr r2, 8001068 <automate_decode+0x34>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	08001099 	.word	0x08001099
 800106c:	080010a9 	.word	0x080010a9
 8001070:	080010bf 	.word	0x080010bf
 8001074:	080010cf 	.word	0x080010cf
 8001078:	080010df 	.word	0x080010df
 800107c:	080010ef 	.word	0x080010ef
 8001080:	080010ff 	.word	0x080010ff
 8001084:	0800111b 	.word	0x0800111b
 8001088:	08001159 	.word	0x08001159
 800108c:	0800117d 	.word	0x0800117d
 8001090:	080011b9 	.word	0x080011b9
 8001094:	080011c7 	.word	0x080011c7
    {
    case FLAG_START1 :
    	if (receivedByte == 0xA5)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2ba5      	cmp	r3, #165	@ 0xa5
 800109c:	f040 80cf 	bne.w	800123e <automate_decode+0x20a>
        {
             next_state = FLAG_START2;
 80010a0:	4b6e      	ldr	r3, [pc, #440]	@ (800125c <automate_decode+0x228>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
        }
    break;
 80010a6:	e0ca      	b.n	800123e <automate_decode+0x20a>

    case FLAG_START2:
        if (receivedByte == 0x5A)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b5a      	cmp	r3, #90	@ 0x5a
 80010ac:	d103      	bne.n	80010b6 <automate_decode+0x82>
        {
            next_state = RESPONSE_DESCRIPTOR1;
 80010ae:	4b6b      	ldr	r3, [pc, #428]	@ (800125c <automate_decode+0x228>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	701a      	strb	r2, [r3, #0]
        } else {
        	next_state = FLAG_START1;
        }
    break;
 80010b4:	e0ce      	b.n	8001254 <automate_decode+0x220>
        	next_state = FLAG_START1;
 80010b6:	4b69      	ldr	r3, [pc, #420]	@ (800125c <automate_decode+0x228>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
    break;
 80010bc:	e0ca      	b.n	8001254 <automate_decode+0x220>

    case RESPONSE_DESCRIPTOR1:
    	if (receivedByte == 0x05)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	f040 80be 	bne.w	8001242 <automate_decode+0x20e>
    	{
    		next_state = RESPONSE_DESCRIPTOR2;
 80010c6:	4b65      	ldr	r3, [pc, #404]	@ (800125c <automate_decode+0x228>)
 80010c8:	2203      	movs	r2, #3
 80010ca:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 80010cc:	e0b9      	b.n	8001242 <automate_decode+0x20e>
    case RESPONSE_DESCRIPTOR2:
    	if (receivedByte == 0x00)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 80b8 	bne.w	8001246 <automate_decode+0x212>
    	{
    		next_state = RESPONSE_DESCRIPTOR3;
 80010d6:	4b61      	ldr	r3, [pc, #388]	@ (800125c <automate_decode+0x228>)
 80010d8:	2204      	movs	r2, #4
 80010da:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 80010dc:	e0b3      	b.n	8001246 <automate_decode+0x212>

    case RESPONSE_DESCRIPTOR3:
        if (receivedByte == 0x00)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f040 80b2 	bne.w	800124a <automate_decode+0x216>
        {
        	next_state = RESPONSE_DESCRIPTOR4;
 80010e6:	4b5d      	ldr	r3, [pc, #372]	@ (800125c <automate_decode+0x228>)
 80010e8:	2205      	movs	r2, #5
 80010ea:	701a      	strb	r2, [r3, #0]
        }
        break;
 80010ec:	e0ad      	b.n	800124a <automate_decode+0x216>
    case RESPONSE_DESCRIPTOR4:
    	if (receivedByte == 0x40)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b40      	cmp	r3, #64	@ 0x40
 80010f2:	f040 80ac 	bne.w	800124e <automate_decode+0x21a>
    	{
    	    next_state = RESPONSE_DESCRIPTOR5;
 80010f6:	4b59      	ldr	r3, [pc, #356]	@ (800125c <automate_decode+0x228>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 80010fc:	e0a7      	b.n	800124e <automate_decode+0x21a>

    case RESPONSE_DESCRIPTOR5:
        if (receivedByte == 0x81)
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b81      	cmp	r3, #129	@ 0x81
 8001102:	f040 80a6 	bne.w	8001252 <automate_decode+0x21e>
        {
        	printf("Response descriptor correctement lu debut a %d\n", index_read);
 8001106:	4b57      	ldr	r3, [pc, #348]	@ (8001264 <automate_decode+0x230>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	4856      	ldr	r0, [pc, #344]	@ (8001268 <automate_decode+0x234>)
 800110e:	f006 fcc7 	bl	8007aa0 <iprintf>
        	next_state = QUALITY;
 8001112:	4b52      	ldr	r3, [pc, #328]	@ (800125c <automate_decode+0x228>)
 8001114:	2207      	movs	r2, #7
 8001116:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001118:	e09b      	b.n	8001252 <automate_decode+0x21e>

    case QUALITY:
    		quality = receivedByte >> 2;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	73fb      	strb	r3, [r7, #15]
    		not_s = (receivedByte >> 1) & 1;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	733b      	strb	r3, [r7, #12]
    		s = receivedByte & 1;
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	737b      	strb	r3, [r7, #13]

            if ((!not_s) == s)
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf0c      	ite	eq
 800113a:	2301      	moveq	r3, #1
 800113c:	2300      	movne	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <automate_decode+0x11c>
            	/*
            	if (s == 1 && not_s == 0)
            	{
            	  printf("New SCAN\n");
            	}*/
            	next_state = ANGLE_FIRST_PART;
 8001148:	4b44      	ldr	r3, [pc, #272]	@ (800125c <automate_decode+0x228>)
 800114a:	2208      	movs	r2, #8
 800114c:	701a      	strb	r2, [r3, #0]

            } else {
            	next_state = QUALITY;
            }
    break;
 800114e:	e081      	b.n	8001254 <automate_decode+0x220>
            	next_state = QUALITY;
 8001150:	4b42      	ldr	r3, [pc, #264]	@ (800125c <automate_decode+0x228>)
 8001152:	2207      	movs	r2, #7
 8001154:	701a      	strb	r2, [r3, #0]
    break;
 8001156:	e07d      	b.n	8001254 <automate_decode+0x220>

    case ANGLE_FIRST_PART:
    	constant_bit = receivedByte & 0b1;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	73bb      	strb	r3, [r7, #14]
    	angle_low_byte = receivedByte;
 8001160:	4a42      	ldr	r2, [pc, #264]	@ (800126c <automate_decode+0x238>)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	7013      	strb	r3, [r2, #0]

        if (constant_bit)
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <automate_decode+0x140>
        {
            next_state = ANGLE_SECOND_PART;
 800116c:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <automate_decode+0x228>)
 800116e:	2209      	movs	r2, #9
 8001170:	701a      	strb	r2, [r3, #0]
        } else {
        	next_state = QUALITY;
        }
    break;
 8001172:	e06f      	b.n	8001254 <automate_decode+0x220>
        	next_state = QUALITY;
 8001174:	4b39      	ldr	r3, [pc, #228]	@ (800125c <automate_decode+0x228>)
 8001176:	2207      	movs	r2, #7
 8001178:	701a      	strb	r2, [r3, #0]
    break;
 800117a:	e06b      	b.n	8001254 <automate_decode+0x220>

    case ANGLE_SECOND_PART:
    	angle_high_byte = receivedByte;
 800117c:	4a3c      	ldr	r2, [pc, #240]	@ (8001270 <automate_decode+0x23c>)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	7013      	strb	r3, [r2, #0]

    	angle = (((uint16_t)(angle_high_byte) << 7) | ((uint16_t)(angle_low_byte) & 0x00FF)) / 64.0;
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <automate_decode+0x23c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	01db      	lsls	r3, r3, #7
 8001188:	4a38      	ldr	r2, [pc, #224]	@ (800126c <automate_decode+0x238>)
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4313      	orrs	r3, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9f0 	bl	8000574 <__aeabi_i2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b36      	ldr	r3, [pc, #216]	@ (8001274 <automate_decode+0x240>)
 800119a:	f7ff fb7f 	bl	800089c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fd47 	bl	8000c38 <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a32      	ldr	r2, [pc, #200]	@ (8001278 <automate_decode+0x244>)
 80011ae:	6013      	str	r3, [r2, #0]

    	next_state = DISTANCE_FIRST_PART;
 80011b0:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <automate_decode+0x228>)
 80011b2:	220a      	movs	r2, #10
 80011b4:	701a      	strb	r2, [r3, #0]
    break;
 80011b6:	e04d      	b.n	8001254 <automate_decode+0x220>

    case DISTANCE_FIRST_PART:
    	distance_low_byte = receivedByte;
 80011b8:	4a30      	ldr	r2, [pc, #192]	@ (800127c <automate_decode+0x248>)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	7013      	strb	r3, [r2, #0]

    	next_state = DISTANCE_SECOND_PART;
 80011be:	4b27      	ldr	r3, [pc, #156]	@ (800125c <automate_decode+0x228>)
 80011c0:	220b      	movs	r2, #11
 80011c2:	701a      	strb	r2, [r3, #0]

    break;
 80011c4:	e046      	b.n	8001254 <automate_decode+0x220>

    case DISTANCE_SECOND_PART:
    	distance_high_byte = receivedByte;
 80011c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001280 <automate_decode+0x24c>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	7013      	strb	r3, [r2, #0]

    	distance = ((((uint16_t) distance_high_byte << 8) & 0xFF00 ) | ((uint16_t) distance_low_byte & 0x00FF)) / 4.0;
 80011cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <automate_decode+0x24c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4a29      	ldr	r2, [pc, #164]	@ (800127c <automate_decode+0x248>)
 80011d6:	7812      	ldrb	r2, [r2, #0]
 80011d8:	4313      	orrs	r3, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9ca 	bl	8000574 <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <automate_decode+0x250>)
 80011e6:	f7ff fb59 	bl	800089c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fd21 	bl	8000c38 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <automate_decode+0x254>)
 80011fa:	6013      	str	r3, [r2, #0]

    	if (distance > 0)
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <automate_decode+0x254>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	dd14      	ble.n	8001236 <automate_decode+0x202>
    	{
    		//printf("(%4.3f, %4.3f) remainingByte : %ld index_read : %d\n", angle, distance, 2048 - __HAL_DMA_GET_COUNTER(huart1.hdmarx), index_read);

    		printf("(%4.3f, %4.3f)\n", angle, distance);
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <automate_decode+0x244>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9c1 	bl	8000598 <__aeabi_f2d>
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <automate_decode+0x254>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9ba 	bl	8000598 <__aeabi_f2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9cd 2300 	strd	r2, r3, [sp]
 800122c:	4622      	mov	r2, r4
 800122e:	462b      	mov	r3, r5
 8001230:	4816      	ldr	r0, [pc, #88]	@ (800128c <automate_decode+0x258>)
 8001232:	f006 fc35 	bl	8007aa0 <iprintf>
    	}
        next_state = QUALITY;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <automate_decode+0x228>)
 8001238:	2207      	movs	r2, #7
 800123a:	701a      	strb	r2, [r3, #0]
    break;
 800123c:	e00a      	b.n	8001254 <automate_decode+0x220>
    break;
 800123e:	bf00      	nop
 8001240:	e008      	b.n	8001254 <automate_decode+0x220>
    	break;
 8001242:	bf00      	nop
 8001244:	e006      	b.n	8001254 <automate_decode+0x220>
    	break;
 8001246:	bf00      	nop
 8001248:	e004      	b.n	8001254 <automate_decode+0x220>
        break;
 800124a:	bf00      	nop
 800124c:	e002      	b.n	8001254 <automate_decode+0x220>
    	break;
 800124e:	bf00      	nop
 8001250:	e000      	b.n	8001254 <automate_decode+0x220>
        break;
 8001252:	bf00      	nop
    }
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	200001f0 	.word	0x200001f0
 8001260:	200001f1 	.word	0x200001f1
 8001264:	20000200 	.word	0x20000200
 8001268:	0800a6f8 	.word	0x0800a6f8
 800126c:	200001f2 	.word	0x200001f2
 8001270:	200001f3 	.word	0x200001f3
 8001274:	40500000 	.word	0x40500000
 8001278:	200001f4 	.word	0x200001f4
 800127c:	200001f8 	.word	0x200001f8
 8001280:	200001f9 	.word	0x200001f9
 8001284:	40100000 	.word	0x40100000
 8001288:	200001fc 	.word	0x200001fc
 800128c:	0800a728 	.word	0x0800a728

08001290 <dequeue>:
 *
 * @param Variable
 * @retval Retourne True si élément est bien retiré du buffer False sinon
 */

bool dequeue(uint8_t *value) {
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    uint32_t remainingByte = 2048 - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <dequeue+0x50>)
 800129a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80012a6:	60fb      	str	r3, [r7, #12]

    if (remainingByte > index_read)
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <dequeue+0x54>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d90e      	bls.n	80012d0 <dequeue+0x40>
    {
    	*value = buffer[index_read];
 80012b2:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <dequeue+0x54>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <dequeue+0x58>)
 80012b8:	5cd2      	ldrb	r2, [r2, r3]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	701a      	strb	r2, [r3, #0]

    	index_read = (index_read + 1) % 2048;  // Boucle autour
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <dequeue+0x54>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c8:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <dequeue+0x54>)
 80012ca:	6013      	str	r3, [r2, #0]

    	return true;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <dequeue+0x42>
    } else {
    	return false;
 80012d0:	2300      	movs	r3, #0
    }

}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000a04 	.word	0x20000a04
 80012e4:	20000200 	.word	0x20000200
 80012e8:	20000204 	.word	0x20000204

080012ec <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80012f4:	1d39      	adds	r1, r7, #4
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012fa:	2201      	movs	r2, #1
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <__io_putchar+0x20>)
 80012fe:	f002 fb1d 	bl	800393c <HAL_UART_Transmit>

	return ch;
 8001302:	687b      	ldr	r3, [r7, #4]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000a98 	.word	0x20000a98

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	@ 0x30
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 fca2 	bl	8001c5e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f8cb 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 f9db 	bl	80016d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f000 f9af 	bl	8001684 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001326:	f000 f95f 	bl	80015e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800132a:	f000 f90f 	bl	800154c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Programme interface LIDAR\n");
 800132e:	484c      	ldr	r0, [pc, #304]	@ (8001460 <main+0x150>)
 8001330:	f006 fc1e 	bl	8007b70 <puts>
  printf("Compile le %s\n", __DATE__);
 8001334:	494b      	ldr	r1, [pc, #300]	@ (8001464 <main+0x154>)
 8001336:	484c      	ldr	r0, [pc, #304]	@ (8001468 <main+0x158>)
 8001338:	f006 fbb2 	bl	8007aa0 <iprintf>

    int i = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char message[40] = "";
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2224      	movs	r2, #36	@ 0x24
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f006 fc3f 	bl	8007bd0 <memset>

    HAL_UART_Receive_DMA(&LIDAR_HUART, buffer, sizeof(buffer));
 8001352:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001356:	4945      	ldr	r1, [pc, #276]	@ (800146c <main+0x15c>)
 8001358:	4845      	ldr	r0, [pc, #276]	@ (8001470 <main+0x160>)
 800135a:	f002 fbc9 	bl	8003af0 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1); // A laisser proche de la boucle while(1)
 800135e:	2201      	movs	r2, #1
 8001360:	4944      	ldr	r1, [pc, #272]	@ (8001474 <main+0x164>)
 8001362:	4845      	ldr	r0, [pc, #276]	@ (8001478 <main+0x168>)
 8001364:	f002 fb78 	bl	8003a58 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_reception_uart2 == 1) {
 8001368:	4b44      	ldr	r3, [pc, #272]	@ (800147c <main+0x16c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d169      	bne.n	8001444 <main+0x134>
	  		  if (caractere == '\n') {
 8001370:	4b40      	ldr	r3, [pc, #256]	@ (8001474 <main+0x164>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b0a      	cmp	r3, #10
 8001376:	d154      	bne.n	8001422 <main+0x112>
	  			  if (strstr(message, "START_SCAN") != NULL)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4941      	ldr	r1, [pc, #260]	@ (8001480 <main+0x170>)
 800137c:	4618      	mov	r0, r3
 800137e:	f006 fc11 	bl	8007ba4 <strstr>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00a      	beq.n	800139e <main+0x8e>
	  			  {
	  				printf("Demarrage du scan normal\n");
 8001388:	483e      	ldr	r0, [pc, #248]	@ (8001484 <main+0x174>)
 800138a:	f006 fbf1 	bl	8007b70 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_START_SCAN, LIDAR_COMMAND_START_SCAN_LEN, HAL_MAX_DELAY);
 800138e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001392:	2202      	movs	r2, #2
 8001394:	493c      	ldr	r1, [pc, #240]	@ (8001488 <main+0x178>)
 8001396:	4836      	ldr	r0, [pc, #216]	@ (8001470 <main+0x160>)
 8001398:	f002 fad0 	bl	800393c <HAL_UART_Transmit>
 800139c:	e03d      	b.n	800141a <main+0x10a>
	  			  } else if (strstr(message, "STOP") != NULL)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	493a      	ldr	r1, [pc, #232]	@ (800148c <main+0x17c>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fbfe 	bl	8007ba4 <strstr>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <main+0xb4>
	  			  {
	  				printf("Arret\n");
 80013ae:	4838      	ldr	r0, [pc, #224]	@ (8001490 <main+0x180>)
 80013b0:	f006 fbde 	bl	8007b70 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_STOP, LIDAR_COMMAND_STOP_LEN, HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b8:	2202      	movs	r2, #2
 80013ba:	4936      	ldr	r1, [pc, #216]	@ (8001494 <main+0x184>)
 80013bc:	482c      	ldr	r0, [pc, #176]	@ (8001470 <main+0x160>)
 80013be:	f002 fabd 	bl	800393c <HAL_UART_Transmit>
 80013c2:	e02a      	b.n	800141a <main+0x10a>
	  			  } else if (strstr(message, "RESET") != NULL)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4934      	ldr	r1, [pc, #208]	@ (8001498 <main+0x188>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 fbeb 	bl	8007ba4 <strstr>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00a      	beq.n	80013ea <main+0xda>
	  			  {
	  				printf("Reset\n");
 80013d4:	4831      	ldr	r0, [pc, #196]	@ (800149c <main+0x18c>)
 80013d6:	f006 fbcb 	bl	8007b70 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_RESET, LIDAR_COMMAND_RESET_LEN, HAL_MAX_DELAY);
 80013da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013de:	2202      	movs	r2, #2
 80013e0:	492f      	ldr	r1, [pc, #188]	@ (80014a0 <main+0x190>)
 80013e2:	4823      	ldr	r0, [pc, #140]	@ (8001470 <main+0x160>)
 80013e4:	f002 faaa 	bl	800393c <HAL_UART_Transmit>
 80013e8:	e017      	b.n	800141a <main+0x10a>
	  			  } else if (strstr(message, "GET_INFO") != NULL)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	492d      	ldr	r1, [pc, #180]	@ (80014a4 <main+0x194>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f006 fbd8 	bl	8007ba4 <strstr>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <main+0x100>
	  			  {
	  				printf("RTFM ! <*_*>\n");
 80013fa:	482b      	ldr	r0, [pc, #172]	@ (80014a8 <main+0x198>)
 80013fc:	f006 fbb8 	bl	8007b70 <puts>
	  				HAL_UART_Transmit(&LIDAR_HUART, LIDAR_COMMAND_GET_INFO, LIDAR_COMMAND_GET_INFO_LEN, HAL_MAX_DELAY);
 8001400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001404:	2202      	movs	r2, #2
 8001406:	4929      	ldr	r1, [pc, #164]	@ (80014ac <main+0x19c>)
 8001408:	4819      	ldr	r0, [pc, #100]	@ (8001470 <main+0x160>)
 800140a:	f002 fa97 	bl	800393c <HAL_UART_Transmit>
 800140e:	e004      	b.n	800141a <main+0x10a>
	  			  } else {
	  				  printf("Commande non reconnue : %s\n", message);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4826      	ldr	r0, [pc, #152]	@ (80014b0 <main+0x1a0>)
 8001416:	f006 fb43 	bl	8007aa0 <iprintf>
	  			  }

	  			  message[0] = '\0';
 800141a:	2300      	movs	r3, #0
 800141c:	713b      	strb	r3, [r7, #4]
	  			  i = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  		  }

	  		  message[i++] = caractere;
 8001422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001428:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <main+0x164>)
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	3330      	adds	r3, #48	@ 0x30
 800142e:	443b      	add	r3, r7
 8001430:	f803 2c2c 	strb.w	r2, [r3, #-44]
	  		  flag_reception_uart2 = 0;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <main+0x16c>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]

	  		  HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 800143a:	2201      	movs	r2, #1
 800143c:	490d      	ldr	r1, [pc, #52]	@ (8001474 <main+0x164>)
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <main+0x168>)
 8001440:	f002 fb0a 	bl	8003a58 <HAL_UART_Receive_IT>

	  //{
	  	  //printf("Data remaining : %ld \n",  2048 - __HAL_DMA_GET_COUNTER(huart1.hdmarx));
		  //printf("(0,%ld)\n",  2048 - __HAL_DMA_GET_COUNTER(huart1.hdmarx));

		  uint8_t receivedByte = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	70fb      	strb	r3, [r7, #3]

		  if (dequeue(&receivedByte))
 8001448:	1cfb      	adds	r3, r7, #3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff20 	bl	8001290 <dequeue>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d088      	beq.n	8001368 <main+0x58>
		  {
			  //printf("Ox%x\n", receivedByte);

			  automate_decode(receivedByte);
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fdeb 	bl	8001034 <automate_decode>
  {
 800145e:	e783      	b.n	8001368 <main+0x58>
 8001460:	0800a738 	.word	0x0800a738
 8001464:	0800a754 	.word	0x0800a754
 8001468:	0800a760 	.word	0x0800a760
 800146c:	20000204 	.word	0x20000204
 8001470:	20000a04 	.word	0x20000a04
 8001474:	20000b8e 	.word	0x20000b8e
 8001478:	20000a98 	.word	0x20000a98
 800147c:	20000b8c 	.word	0x20000b8c
 8001480:	0800a770 	.word	0x0800a770
 8001484:	0800a77c 	.word	0x0800a77c
 8001488:	0800a798 	.word	0x0800a798
 800148c:	0800a79c 	.word	0x0800a79c
 8001490:	0800a7a4 	.word	0x0800a7a4
 8001494:	0800a7ac 	.word	0x0800a7ac
 8001498:	0800a7b0 	.word	0x0800a7b0
 800149c:	0800a7b8 	.word	0x0800a7b8
 80014a0:	0800a7c0 	.word	0x0800a7c0
 80014a4:	0800a7c4 	.word	0x0800a7c4
 80014a8:	0800a7d0 	.word	0x0800a7d0
 80014ac:	0800a7e0 	.word	0x0800a7e0
 80014b0:	0800a7e4 	.word	0x0800a7e4

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	@ 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2238      	movs	r2, #56	@ 0x38
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 fb84 	bl	8007bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f001 fa0e 	bl	80028f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e6:	2340      	movs	r3, #64	@ 0x40
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ea:	2302      	movs	r3, #2
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014f2:	2304      	movs	r3, #4
 80014f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014f6:	2355      	movs	r3, #85	@ 0x55
 80014f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014fe:	2302      	movs	r3, #2
 8001500:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001502:	2302      	movs	r3, #2
 8001504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	4618      	mov	r0, r3
 800150c:	f001 faa8 	bl	8002a60 <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001516:	f000 f953 	bl	80017c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2303      	movs	r3, #3
 8001520:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2104      	movs	r1, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fda6 	bl	8003084 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800153e:	f000 f93f 	bl	80017c0 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	@ 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001552:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <MX_USART1_UART_Init+0x94>)
 8001554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001558:	4a22      	ldr	r2, [pc, #136]	@ (80015e4 <MX_USART1_UART_Init+0x98>)
 800155a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001570:	220c      	movs	r2, #12
 8001572:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001592:	4812      	ldr	r0, [pc, #72]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 8001594:	f002 f982 	bl	800389c <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800159e:	f000 f90f 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	480d      	ldr	r0, [pc, #52]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 80015a6:	f004 fbdc 	bl	8005d62 <HAL_UARTEx_SetTxFifoThreshold>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80015b0:	f000 f906 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b4:	2100      	movs	r1, #0
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 80015b8:	f004 fc11 	bl	8005dde <HAL_UARTEx_SetRxFifoThreshold>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80015c2:	f000 f8fd 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_USART1_UART_Init+0x90>)
 80015c8:	f004 fb92 	bl	8005cf0 <HAL_UARTEx_DisableFifoMode>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80015d2:	f000 f8f5 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000a04 	.word	0x20000a04
 80015e0:	40013800 	.word	0x40013800
 80015e4:	000f4240 	.word	0x000f4240

080015e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	@ (800167c <MX_USART2_UART_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 80015f4:	4a22      	ldr	r2, [pc, #136]	@ (8001680 <MX_USART2_UART_Init+0x98>)
 80015f6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001604:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 800160c:	220c      	movs	r2, #12
 800160e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162e:	4812      	ldr	r0, [pc, #72]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001630:	f002 f934 	bl	800389c <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800163a:	f000 f8c1 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001642:	f004 fb8e 	bl	8005d62 <HAL_UARTEx_SetTxFifoThreshold>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 800164c:	f000 f8b8 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	4809      	ldr	r0, [pc, #36]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001654:	f004 fbc3 	bl	8005dde <HAL_UARTEx_SetRxFifoThreshold>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800165e:	f000 f8af 	bl	80017c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001664:	f004 fb44 	bl	8005cf0 <HAL_UARTEx_DisableFifoMode>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800166e:	f000 f8a7 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000a98 	.word	0x20000a98
 800167c:	40004400 	.word	0x40004400
 8001680:	000f4240 	.word	0x000f4240

08001684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <MX_DMA_Init+0x50>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168e:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <MX_DMA_Init+0x50>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6493      	str	r3, [r2, #72]	@ 0x48
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <MX_DMA_Init+0x50>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_DMA_Init+0x50>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a6:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <MX_DMA_Init+0x50>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_DMA_Init+0x50>)
 80016b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	200b      	movs	r0, #11
 80016c0:	f000 fc19 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016c4:	200b      	movs	r0, #11
 80016c6:	f000 fc30 	bl	8001f2a <HAL_NVIC_EnableIRQ>

}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <MX_GPIO_Init+0x78>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <MX_GPIO_Init+0x78>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <MX_GPIO_Init+0x78>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <MX_GPIO_Init+0x78>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	4a11      	ldr	r2, [pc, #68]	@ (8001750 <MX_GPIO_Init+0x78>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <MX_GPIO_Init+0x78>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001724:	480b      	ldr	r0, [pc, #44]	@ (8001754 <MX_GPIO_Init+0x7c>)
 8001726:	f001 f8cf 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800172a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4619      	mov	r1, r3
 8001742:	4804      	ldr	r0, [pc, #16]	@ (8001754 <MX_GPIO_Init+0x7c>)
 8001744:	f000 ff3e 	bl	80025c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	48000400 	.word	0x48000400

08001758 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0e      	ldr	r2, [pc, #56]	@ (80017a0 <HAL_UART_RxCpltCallback+0x48>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d107      	bne.n	800177a <HAL_UART_RxCpltCallback+0x22>
		flag_reception_uart2 = 1;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_UART_RxCpltCallback+0x4c>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
		/*
		 * Relancer la réception dans l'interruption
	     */
		HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <HAL_UART_RxCpltCallback+0x50>)
 8001774:	480d      	ldr	r0, [pc, #52]	@ (80017ac <HAL_UART_RxCpltCallback+0x54>)
 8001776:	f002 f96f 	bl	8003a58 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART1) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a0c      	ldr	r2, [pc, #48]	@ (80017b0 <HAL_UART_RxCpltCallback+0x58>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d108      	bne.n	8001796 <HAL_UART_RxCpltCallback+0x3e>
		flag_reception_uart1 = 1;
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_UART_RxCpltCallback+0x5c>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&LIDAR_HUART, buffer, sizeof(buffer));
 800178a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800178e:	490a      	ldr	r1, [pc, #40]	@ (80017b8 <HAL_UART_RxCpltCallback+0x60>)
 8001790:	480a      	ldr	r0, [pc, #40]	@ (80017bc <HAL_UART_RxCpltCallback+0x64>)
 8001792:	f002 f9ad 	bl	8003af0 <HAL_UART_Receive_DMA>
	}
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40004400 	.word	0x40004400
 80017a4:	20000b8c 	.word	0x20000b8c
 80017a8:	20000b8e 	.word	0x20000b8e
 80017ac:	20000a98 	.word	0x20000a98
 80017b0:	40013800 	.word	0x40013800
 80017b4:	20000b8d 	.word	0x20000b8d
 80017b8:	20000204 	.word	0x20000204
 80017bc:	20000a04 	.word	0x20000a04

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <Error_Handler+0x8>

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <HAL_MspInit+0x44>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <HAL_MspInit+0x44>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <HAL_MspInit+0x44>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001802:	f001 f91d 	bl	8002a40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b09c      	sub	sp, #112	@ 0x70
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	2244      	movs	r2, #68	@ 0x44
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f006 f9cb 	bl	8007bd0 <memset>
  if(huart->Instance==USART1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a5b      	ldr	r2, [pc, #364]	@ (80019ac <HAL_UART_MspInit+0x198>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d16b      	bne.n	800191c <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001844:	2301      	movs	r3, #1
 8001846:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4618      	mov	r0, r3
 8001852:	f001 fe33 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800185c:	f7ff ffb0 	bl	80017c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001860:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001864:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 8001866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800186a:	6613      	str	r3, [r2, #96]	@ 0x60
 800186c:	4b50      	ldr	r3, [pc, #320]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 800186e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b4d      	ldr	r3, [pc, #308]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187c:	4a4c      	ldr	r2, [pc, #304]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001884:	4b4a      	ldr	r3, [pc, #296]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001890:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001894:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a2:	2307      	movs	r3, #7
 80018a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b0:	f000 fe88 	bl	80025c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80018b4:	4b3f      	ldr	r3, [pc, #252]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018b6:	4a40      	ldr	r2, [pc, #256]	@ (80019b8 <HAL_UART_MspInit+0x1a4>)
 80018b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80018ba:	4b3e      	ldr	r3, [pc, #248]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018bc:	2218      	movs	r2, #24
 80018be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c0:	4b3c      	ldr	r3, [pc, #240]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c6:	4b3b      	ldr	r3, [pc, #236]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018cc:	4b39      	ldr	r3, [pc, #228]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018ce:	2280      	movs	r2, #128	@ 0x80
 80018d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d2:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018de:	4b35      	ldr	r3, [pc, #212]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018e4:	4b33      	ldr	r3, [pc, #204]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018ec:	4831      	ldr	r0, [pc, #196]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 80018ee:	f000 fb37 	bl	8001f60 <HAL_DMA_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80018f8:	f7ff ff62 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a2d      	ldr	r2, [pc, #180]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 8001900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001904:	4a2b      	ldr	r2, [pc, #172]	@ (80019b4 <HAL_UART_MspInit+0x1a0>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2025      	movs	r0, #37	@ 0x25
 8001910:	f000 faf1 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001914:	2025      	movs	r0, #37	@ 0x25
 8001916:	f000 fb08 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191a:	e043      	b.n	80019a4 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a26      	ldr	r2, [pc, #152]	@ (80019bc <HAL_UART_MspInit+0x1a8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d13e      	bne.n	80019a4 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	4618      	mov	r0, r3
 8001934:	f001 fdc2 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 800193e:	f7ff ff3f 	bl	80017c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	6593      	str	r3, [r2, #88]	@ 0x58
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_UART_MspInit+0x19c>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001972:	230c      	movs	r3, #12
 8001974:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001982:	2307      	movs	r3, #7
 8001984:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001990:	f000 fe18 	bl	80025c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	2026      	movs	r0, #38	@ 0x26
 800199a:	f000 faac 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800199e:	2026      	movs	r0, #38	@ 0x26
 80019a0:	f000 fac3 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3770      	adds	r7, #112	@ 0x70
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	20000b2c 	.word	0x20000b2c
 80019b8:	40020008 	.word	0x40020008
 80019bc:	40004400 	.word	0x40004400

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <NMI_Handler+0x4>

080019c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <MemManage_Handler+0x4>

080019d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a16:	f000 f975 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <DMA1_Channel1_IRQHandler+0x10>)
 8001a26:	f000 fc7e 	bl	8002326 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000b2c 	.word	0x20000b2c

08001a34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <USART1_IRQHandler+0x10>)
 8001a3a:	f002 f8a5 	bl	8003b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000a04 	.word	0x20000a04

08001a48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <USART2_IRQHandler+0x10>)
 8001a4e:	f002 f89b 	bl	8003b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000a98 	.word	0x20000a98

08001a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_kill>:

int _kill(int pid, int sig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a76:	f006 f8b7 	bl	8007be8 <__errno>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2216      	movs	r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffe7 	bl	8001a6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a9e:	bf00      	nop
 8001aa0:	e7fd      	b.n	8001a9e <_exit+0x12>

08001aa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e00a      	b.n	8001aca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	4601      	mov	r1, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	60ba      	str	r2, [r7, #8]
 8001ac0:	b2ca      	uxtb	r2, r1
 8001ac2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbf0      	blt.n	8001ab4 <_read+0x12>
  }

  return len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e009      	b.n	8001b02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	60ba      	str	r2, [r7, #8]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fbf8 	bl	80012ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbf1      	blt.n	8001aee <_write+0x12>
  }
  return len;
 8001b0a:	687b      	ldr	r3, [r7, #4]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_close>:

int _close(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_isatty>:

int _isatty(int file)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f006 f81c 	bl	8007be8 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20008000 	.word	0x20008000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	20000b90 	.word	0x20000b90
 8001be4:	20000ce8 	.word	0x20000ce8

08001be8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c0c:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c10:	f7ff ffea 	bl	8001be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c14:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c16:	490d      	ldr	r1, [pc, #52]	@ (8001c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c18:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <LoopForever+0xe>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c58 <LoopForever+0x16>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f005 ffdb 	bl	8007bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3e:	f7ff fb67 	bl	8001310 <main>

08001c42 <LoopForever>:

LoopForever:
    b LoopForever
 8001c42:	e7fe      	b.n	8001c42 <LoopForever>
  ldr   r0, =_estack
 8001c44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c50:	0800ac7c 	.word	0x0800ac7c
  ldr r2, =_sbss
 8001c54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c58:	20000ce4 	.word	0x20000ce4

08001c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_2_IRQHandler>

08001c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f939 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 f80e 	bl	8001c90 <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	e001      	b.n	8001c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c80:	f7ff fda4 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c84:	79fb      	ldrb	r3, [r7, #7]

}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <HAL_InitTick+0x68>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d022      	beq.n	8001cea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ca4:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <HAL_InitTick+0x6c>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_InitTick+0x68>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f944 	bl	8001f46 <HAL_SYSTICK_Config>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	d809      	bhi.n	8001cde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cd2:	f000 f910 	bl	8001ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_InitTick+0x70>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e007      	b.n	8001cee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e004      	b.n	8001cee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e001      	b.n	8001cee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_IncTick+0x1c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_IncTick+0x20>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a03      	ldr	r2, [pc, #12]	@ (8001d20 <HAL_IncTick+0x1c>)
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	20000b94 	.word	0x20000b94
 8001d24:	20000008 	.word	0x20000008

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000b94 	.word	0x20000b94

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	@ (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	@ (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff40 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff90 	bl	8001e34 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5f 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa4 	bl	8001e9c <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e08d      	b.n	800208e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <HAL_DMA_Init+0x138>)
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d80f      	bhi.n	8001f9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b45      	ldr	r3, [pc, #276]	@ (800209c <HAL_DMA_Init+0x13c>)
 8001f86:	4413      	add	r3, r2
 8001f88:	4a45      	ldr	r2, [pc, #276]	@ (80020a0 <HAL_DMA_Init+0x140>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	009a      	lsls	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a42      	ldr	r2, [pc, #264]	@ (80020a4 <HAL_DMA_Init+0x144>)
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f9c:	e00e      	b.n	8001fbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b40      	ldr	r3, [pc, #256]	@ (80020a8 <HAL_DMA_Init+0x148>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80020a0 <HAL_DMA_Init+0x140>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80020ac <HAL_DMA_Init+0x14c>)
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fa76 	bl	8002500 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800201c:	d102      	bne.n	8002024 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002038:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <HAL_DMA_Init+0x104>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d80c      	bhi.n	8002064 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa96 	bl	800257c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e008      	b.n	8002076 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40020407 	.word	0x40020407
 800209c:	bffdfff8 	.word	0xbffdfff8
 80020a0:	cccccccd 	.word	0xcccccccd
 80020a4:	40020000 	.word	0x40020000
 80020a8:	bffdfbf8 	.word	0xbffdfbf8
 80020ac:	40020400 	.word	0x40020400

080020b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_DMA_Start_IT+0x20>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e066      	b.n	800219e <HAL_DMA_Start_IT+0xee>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d155      	bne.n	8002190 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f9bb 	bl	8002484 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 020e 	orr.w	r2, r2, #14
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00f      	b.n	8002148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0204 	bic.w	r2, r2, #4
 8002136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 020a 	orr.w	r2, r2, #10
 8002146:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002164:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800217c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e005      	b.n	800219c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002198:	2302      	movs	r3, #2
 800219a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d005      	beq.n	80021ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2204      	movs	r2, #4
 80021c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e037      	b.n	800223a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 020e 	bic.w	r2, r2, #14
 80021d8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002216:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800222e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002238:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d00d      	beq.n	800228c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2204      	movs	r2, #4
 8002274:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	e047      	b.n	800231c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020e 	bic.w	r2, r2, #14
 800229a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
    }
  }
  return status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2204      	movs	r2, #4
 8002348:	409a      	lsls	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d026      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x7a>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d021      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0204 	bic.w	r2, r2, #4
 8002378:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f003 021f 	and.w	r2, r3, #31
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	2104      	movs	r1, #4
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	2b00      	cmp	r3, #0
 8002394:	d071      	beq.n	800247a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800239e:	e06c      	b.n	800247a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2202      	movs	r2, #2
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02e      	beq.n	8002412 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d029      	beq.n	8002412 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 020a 	bic.w	r2, r2, #10
 80023da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	2102      	movs	r1, #2
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d038      	beq.n	800247a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002410:	e033      	b.n	800247a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2208      	movs	r2, #8
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d02a      	beq.n	800247c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d025      	beq.n	800247c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 020e 	bic.w	r2, r2, #14
 800243e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246e:	2b00      	cmp	r3, #0
 8002470:	d004      	beq.n	800247c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800247a:	bf00      	nop
 800247c:	bf00      	nop
}
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800249a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	f003 021f 	and.w	r2, r3, #31
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	2101      	movs	r1, #1
 80024bc:	fa01 f202 	lsl.w	r2, r1, r2
 80024c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d108      	bne.n	80024e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024e2:	e007      	b.n	80024f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002510:	429a      	cmp	r2, r3
 8002512:	d802      	bhi.n	800251a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002514:	4b15      	ldr	r3, [pc, #84]	@ (800256c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e001      	b.n	800251e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800251c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3b08      	subs	r3, #8
 800252a:	4a12      	ldr	r2, [pc, #72]	@ (8002574 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	461a      	mov	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a0b      	ldr	r2, [pc, #44]	@ (8002578 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800254a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2201      	movs	r2, #1
 8002554:	409a      	lsls	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40020407 	.word	0x40020407
 800256c:	40020800 	.word	0x40020800
 8002570:	40020820 	.word	0x40020820
 8002574:	cccccccd 	.word	0xcccccccd
 8002578:	40020880 	.word	0x40020880

0800257c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	461a      	mov	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800259e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2201      	movs	r2, #1
 80025aa:	409a      	lsls	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	1000823f 	.word	0x1000823f
 80025c0:	40020940 	.word	0x40020940

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025d2:	e15a      	b.n	800288a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2101      	movs	r1, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 814c 	beq.w	8002884 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d005      	beq.n	8002604 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002600:	2b02      	cmp	r3, #2
 8002602:	d130      	bne.n	8002666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800263a:	2201      	movs	r2, #1
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0201 	and.w	r2, r3, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b03      	cmp	r3, #3
 8002670:	d017      	beq.n	80026a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d123      	bne.n	80026f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	08da      	lsrs	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3208      	adds	r2, #8
 80026f0:	6939      	ldr	r1, [r7, #16]
 80026f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0203 	and.w	r2, r3, #3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80a6 	beq.w	8002884 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002738:	4b5b      	ldr	r3, [pc, #364]	@ (80028a8 <HAL_GPIO_Init+0x2e4>)
 800273a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273c:	4a5a      	ldr	r2, [pc, #360]	@ (80028a8 <HAL_GPIO_Init+0x2e4>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6613      	str	r3, [r2, #96]	@ 0x60
 8002744:	4b58      	ldr	r3, [pc, #352]	@ (80028a8 <HAL_GPIO_Init+0x2e4>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002750:	4a56      	ldr	r2, [pc, #344]	@ (80028ac <HAL_GPIO_Init+0x2e8>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800277a:	d01f      	beq.n	80027bc <HAL_GPIO_Init+0x1f8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a4c      	ldr	r2, [pc, #304]	@ (80028b0 <HAL_GPIO_Init+0x2ec>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d019      	beq.n	80027b8 <HAL_GPIO_Init+0x1f4>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4b      	ldr	r2, [pc, #300]	@ (80028b4 <HAL_GPIO_Init+0x2f0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <HAL_GPIO_Init+0x1f0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a4a      	ldr	r2, [pc, #296]	@ (80028b8 <HAL_GPIO_Init+0x2f4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00d      	beq.n	80027b0 <HAL_GPIO_Init+0x1ec>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a49      	ldr	r2, [pc, #292]	@ (80028bc <HAL_GPIO_Init+0x2f8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d007      	beq.n	80027ac <HAL_GPIO_Init+0x1e8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a48      	ldr	r2, [pc, #288]	@ (80028c0 <HAL_GPIO_Init+0x2fc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_GPIO_Init+0x1e4>
 80027a4:	2305      	movs	r3, #5
 80027a6:	e00a      	b.n	80027be <HAL_GPIO_Init+0x1fa>
 80027a8:	2306      	movs	r3, #6
 80027aa:	e008      	b.n	80027be <HAL_GPIO_Init+0x1fa>
 80027ac:	2304      	movs	r3, #4
 80027ae:	e006      	b.n	80027be <HAL_GPIO_Init+0x1fa>
 80027b0:	2303      	movs	r3, #3
 80027b2:	e004      	b.n	80027be <HAL_GPIO_Init+0x1fa>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e002      	b.n	80027be <HAL_GPIO_Init+0x1fa>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_GPIO_Init+0x1fa>
 80027bc:	2300      	movs	r3, #0
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	f002 0203 	and.w	r2, r2, #3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4093      	lsls	r3, r2
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ce:	4937      	ldr	r1, [pc, #220]	@ (80028ac <HAL_GPIO_Init+0x2e8>)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027dc:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002800:	4a30      	ldr	r2, [pc, #192]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800282a:	4a26      	ldr	r2, [pc, #152]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002854:	4a1b      	ldr	r2, [pc, #108]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800285a:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800287e:	4a11      	ldr	r2, [pc, #68]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	f47f ae9d 	bne.w	80025d4 <HAL_GPIO_Init+0x10>
  }
}
 800289a:	bf00      	nop
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010000 	.word	0x40010000
 80028b0:	48000400 	.word	0x48000400
 80028b4:	48000800 	.word	0x48000800
 80028b8:	48000c00 	.word	0x48000c00
 80028bc:	48001000 	.word	0x48001000
 80028c0:	48001400 	.word	0x48001400
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028e4:	e002      	b.n	80028ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d141      	bne.n	800298a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002906:	4b4b      	ldr	r3, [pc, #300]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002912:	d131      	bne.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002914:	4b47      	ldr	r3, [pc, #284]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800291a:	4a46      	ldr	r2, [pc, #280]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002920:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002924:	4b43      	ldr	r3, [pc, #268]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800292c:	4a41      	ldr	r2, [pc, #260]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002932:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002934:	4b40      	ldr	r3, [pc, #256]	@ (8002a38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2232      	movs	r2, #50	@ 0x32
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	0c9b      	lsrs	r3, r3, #18
 8002946:	3301      	adds	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294a:	e002      	b.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3b01      	subs	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002952:	4b38      	ldr	r3, [pc, #224]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295e:	d102      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f2      	bne.n	800294c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002966:	4b33      	ldr	r3, [pc, #204]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002972:	d158      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e057      	b.n	8002a28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002978:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800297e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002988:	e04d      	b.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002990:	d141      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002992:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299e:	d131      	bne.n	8002a04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029a0:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a6:	4a23      	ldr	r2, [pc, #140]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b0:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2232      	movs	r2, #50	@ 0x32
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	4a1c      	ldr	r2, [pc, #112]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	0c9b      	lsrs	r3, r3, #18
 80029d2:	3301      	adds	r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d6:	e002      	b.n	80029de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3b01      	subs	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ea:	d102      	bne.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f2      	bne.n	80029d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029f2:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fe:	d112      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e011      	b.n	8002a28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a14:	e007      	b.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a1e:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40007000 	.word	0x40007000
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	431bde83 	.word	0x431bde83

08002a40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4e:	6093      	str	r3, [r2, #8]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e2fe      	b.n	8003070 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d075      	beq.n	8002b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7e:	4b97      	ldr	r3, [pc, #604]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a88:	4b94      	ldr	r3, [pc, #592]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3e>
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x44>
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d10b      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	4b8d      	ldr	r3, [pc, #564]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05b      	beq.n	8002b68 <HAL_RCC_OscConfig+0x108>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d157      	bne.n	8002b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e2d9      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac4:	d106      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x74>
 8002ac6:	4b85      	ldr	r3, [pc, #532]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a84      	ldr	r2, [pc, #528]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xb0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x98>
 8002ade:	4b7f      	ldr	r3, [pc, #508]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b7c      	ldr	r3, [pc, #496]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7b      	ldr	r2, [pc, #492]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xb0>
 8002af8:	4b78      	ldr	r3, [pc, #480]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a77      	ldr	r2, [pc, #476]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b75      	ldr	r3, [pc, #468]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a74      	ldr	r2, [pc, #464]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff f906 	bl	8001d28 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7ff f902 	bl	8001d28 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e29e      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xc0>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7ff f8f2 	bl	8001d28 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7ff f8ee 	bl	8001d28 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e28a      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5a:	4b60      	ldr	r3, [pc, #384]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0xe8>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d075      	beq.n	8002c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b76:	4b59      	ldr	r3, [pc, #356]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b80:	4b56      	ldr	r3, [pc, #344]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	d102      	bne.n	8002b96 <HAL_RCC_OscConfig+0x136>
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d002      	beq.n	8002b9c <HAL_RCC_OscConfig+0x13c>
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d11f      	bne.n	8002bdc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x154>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e25d      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b49      	ldr	r3, [pc, #292]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	4946      	ldr	r1, [pc, #280]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bc8:	4b45      	ldr	r3, [pc, #276]	@ (8002ce0 <HAL_RCC_OscConfig+0x280>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff f85f 	bl	8001c90 <HAL_InitTick>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d043      	beq.n	8002c60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e249      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d023      	beq.n	8002c2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a3c      	ldr	r2, [pc, #240]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f89a 	bl	8001d28 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7ff f896 	bl	8001d28 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e232      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0a:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b31      	ldr	r3, [pc, #196]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	492d      	ldr	r1, [pc, #180]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
 8002c2a:	e01a      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a2a      	ldr	r2, [pc, #168]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002c32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7ff f876 	bl	8001d28 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c40:	f7ff f872 	bl	8001d28 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e20e      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1e0>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d041      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7c:	4a17      	ldr	r2, [pc, #92]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7ff f84f 	bl	8001d28 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8e:	f7ff f84b 	bl	8001d28 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e1e7      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ef      	beq.n	8002c8e <HAL_RCC_OscConfig+0x22e>
 8002cae:	e020      	b.n	8002cf2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb6:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7ff f832 	bl	8001d28 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc6:	e00d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7ff f82e 	bl	8001d28 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d906      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1ca      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ea      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80a6 	beq.w	8002e4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d04:	4b84      	ldr	r3, [pc, #528]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_OscConfig+0x2b4>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x2b6>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d26:	4b7c      	ldr	r3, [pc, #496]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d36:	4b79      	ldr	r3, [pc, #484]	@ (8002f1c <HAL_RCC_OscConfig+0x4bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d42:	4b76      	ldr	r3, [pc, #472]	@ (8002f1c <HAL_RCC_OscConfig+0x4bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a75      	ldr	r2, [pc, #468]	@ (8002f1c <HAL_RCC_OscConfig+0x4bc>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ffeb 	bl	8001d28 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe ffe7 	bl	8001d28 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e183      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d68:	4b6c      	ldr	r3, [pc, #432]	@ (8002f1c <HAL_RCC_OscConfig+0x4bc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d108      	bne.n	8002d8e <HAL_RCC_OscConfig+0x32e>
 8002d7c:	4b66      	ldr	r3, [pc, #408]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d82:	4a65      	ldr	r2, [pc, #404]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d8c:	e024      	b.n	8002dd8 <HAL_RCC_OscConfig+0x378>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	d110      	bne.n	8002db8 <HAL_RCC_OscConfig+0x358>
 8002d96:	4b60      	ldr	r3, [pc, #384]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9c:	4a5e      	ldr	r2, [pc, #376]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dac:	4a5a      	ldr	r2, [pc, #360]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db6:	e00f      	b.n	8002dd8 <HAL_RCC_OscConfig+0x378>
 8002db8:	4b57      	ldr	r3, [pc, #348]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	4a56      	ldr	r2, [pc, #344]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc8:	4b53      	ldr	r3, [pc, #332]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	4a52      	ldr	r2, [pc, #328]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d016      	beq.n	8002e0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe ffa2 	bl	8001d28 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe ff9e 	bl	8001d28 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e138      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfe:	4b46      	ldr	r3, [pc, #280]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ed      	beq.n	8002de8 <HAL_RCC_OscConfig+0x388>
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe ff8b 	bl	8001d28 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe ff87 	bl	8001d28 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e121      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ed      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e3a:	7ffb      	ldrb	r3, [r7, #31]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e40:	4b35      	ldr	r3, [pc, #212]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	4a34      	ldr	r2, [pc, #208]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d03c      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01c      	beq.n	8002e9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e60:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e66:	4a2c      	ldr	r2, [pc, #176]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe ff5a 	bl	8001d28 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e78:	f7fe ff56 	bl	8001d28 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0f2      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e8a:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ef      	beq.n	8002e78 <HAL_RCC_OscConfig+0x418>
 8002e98:	e01b      	b.n	8002ed2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe ff3d 	bl	8001d28 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb2:	f7fe ff39 	bl	8001d28 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0d5      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1ef      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80c9 	beq.w	800306e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002edc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	f000 8083 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d15e      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a08      	ldr	r2, [pc, #32]	@ (8002f18 <HAL_RCC_OscConfig+0x4b8>)
 8002ef8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7fe ff13 	bl	8001d28 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f04:	e00c      	b.n	8002f20 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fe ff0f 	bl	8001d28 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d905      	bls.n	8002f20 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0ab      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f20:	4b55      	ldr	r3, [pc, #340]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ec      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2c:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	4b52      	ldr	r3, [pc, #328]	@ (800307c <HAL_RCC_OscConfig+0x61c>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6a11      	ldr	r1, [r2, #32]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f3c:	3a01      	subs	r2, #1
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	4311      	orrs	r1, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f46:	0212      	lsls	r2, r2, #8
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f4e:	0852      	lsrs	r2, r2, #1
 8002f50:	3a01      	subs	r2, #1
 8002f52:	0552      	lsls	r2, r2, #21
 8002f54:	4311      	orrs	r1, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f5a:	0852      	lsrs	r2, r2, #1
 8002f5c:	3a01      	subs	r2, #1
 8002f5e:	0652      	lsls	r2, r2, #25
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f66:	06d2      	lsls	r2, r2, #27
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	4943      	ldr	r1, [pc, #268]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f70:	4b41      	ldr	r3, [pc, #260]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a40      	ldr	r2, [pc, #256]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a3d      	ldr	r2, [pc, #244]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fece 	bl	8001d28 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe feca 	bl	8001d28 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e066      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa2:	4b35      	ldr	r3, [pc, #212]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x530>
 8002fae:	e05e      	b.n	800306e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b31      	ldr	r3, [pc, #196]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a30      	ldr	r2, [pc, #192]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe feb4 	bl	8001d28 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe feb0 	bl	8001d28 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e04c      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd6:	4b28      	ldr	r3, [pc, #160]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002fe2:	4b25      	ldr	r3, [pc, #148]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	4924      	ldr	r1, [pc, #144]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002fe8:	4b25      	ldr	r3, [pc, #148]	@ (8003080 <HAL_RCC_OscConfig+0x620>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	60cb      	str	r3, [r1, #12]
 8002fee:	e03e      	b.n	800306e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e039      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8003078 <HAL_RCC_OscConfig+0x618>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0203 	and.w	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d12c      	bne.n	800306a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	3b01      	subs	r3, #1
 800301c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d123      	bne.n	800306a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d11b      	bne.n	800306a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d113      	bne.n	800306a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	3b01      	subs	r3, #1
 8003050:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d109      	bne.n	800306a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	3b01      	subs	r3, #1
 8003064:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3720      	adds	r7, #32
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	019f800c 	.word	0x019f800c
 8003080:	feeefffc 	.word	0xfeeefffc

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e11e      	b.n	80032da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b91      	ldr	r3, [pc, #580]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b8e      	ldr	r3, [pc, #568]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	498c      	ldr	r1, [pc, #560]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b8a      	ldr	r3, [pc, #552]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e106      	b.n	80032da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d073      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d129      	bne.n	8003134 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e0:	4b81      	ldr	r3, [pc, #516]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0f4      	b.n	80032da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030f0:	f000 f99e 	bl	8003430 <RCC_GetSysClockFreqFromPLLSource>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <HAL_RCC_ClockConfig+0x268>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d93f      	bls.n	800317e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030fe:	4b7a      	ldr	r3, [pc, #488]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003112:	2b00      	cmp	r3, #0
 8003114:	d033      	beq.n	800317e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800311a:	2b00      	cmp	r3, #0
 800311c:	d12f      	bne.n	800317e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800311e:	4b72      	ldr	r3, [pc, #456]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003126:	4a70      	ldr	r2, [pc, #448]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800312c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e024      	b.n	800317e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d107      	bne.n	800314c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313c:	4b6a      	ldr	r3, [pc, #424]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0c6      	b.n	80032da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800314c:	4b66      	ldr	r3, [pc, #408]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0be      	b.n	80032da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800315c:	f000 f8ce 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8003160:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4a61      	ldr	r2, [pc, #388]	@ (80032ec <HAL_RCC_ClockConfig+0x268>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d909      	bls.n	800317e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800316a:	4b5f      	ldr	r3, [pc, #380]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003172:	4a5d      	ldr	r2, [pc, #372]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003178:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b5a      	ldr	r3, [pc, #360]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4957      	ldr	r1, [pc, #348]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003190:	f7fe fdca 	bl	8001d28 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fe fdc6 	bl	8001d28 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e095      	b.n	80032da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b4e      	ldr	r3, [pc, #312]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d023      	beq.n	8003214 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d8:	4b43      	ldr	r3, [pc, #268]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a42      	ldr	r2, [pc, #264]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 80031de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031f0:	4b3d      	ldr	r3, [pc, #244]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031f8:	4a3b      	ldr	r2, [pc, #236]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 80031fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4936      	ldr	r1, [pc, #216]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
 8003212:	e008      	b.n	8003226 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b80      	cmp	r3, #128	@ 0x80
 8003218:	d105      	bne.n	8003226 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800321a:	4b33      	ldr	r3, [pc, #204]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	4a32      	ldr	r2, [pc, #200]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003220:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003224:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003226:	4b2f      	ldr	r3, [pc, #188]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d21d      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003234:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 020f 	bic.w	r2, r3, #15
 800323c:	4929      	ldr	r1, [pc, #164]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003244:	f7fe fd70 	bl	8001d28 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fe fd6c 	bl	8001d28 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e03b      	b.n	80032da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d1ed      	bne.n	800324c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b1a      	ldr	r3, [pc, #104]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4917      	ldr	r1, [pc, #92]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329a:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	490f      	ldr	r1, [pc, #60]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ae:	f000 f825 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	490c      	ldr	r1, [pc, #48]	@ (80032f0 <HAL_RCC_ClockConfig+0x26c>)
 80032c0:	5ccb      	ldrb	r3, [r1, r3]
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a0a      	ldr	r2, [pc, #40]	@ (80032f4 <HAL_RCC_ClockConfig+0x270>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032ce:	4b0a      	ldr	r3, [pc, #40]	@ (80032f8 <HAL_RCC_ClockConfig+0x274>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fcdc 	bl	8001c90 <HAL_InitTick>
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	04c4b400 	.word	0x04c4b400
 80032f0:	0800a800 	.word	0x0800a800
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003302:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d102      	bne.n	8003314 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800330e:	4b2a      	ldr	r3, [pc, #168]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	e047      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003314:	4b27      	ldr	r3, [pc, #156]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d102      	bne.n	8003326 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003320:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	e03e      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003326:	4b23      	ldr	r3, [pc, #140]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d136      	bne.n	80033a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003332:	4b20      	ldr	r3, [pc, #128]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800333c:	4b1d      	ldr	r3, [pc, #116]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	3301      	adds	r3, #1
 8003348:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d10c      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003350:	4a1a      	ldr	r2, [pc, #104]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800335a:	68d2      	ldr	r2, [r2, #12]
 800335c:	0a12      	lsrs	r2, r2, #8
 800335e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	617b      	str	r3, [r7, #20]
      break;
 8003368:	e00c      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800336a:	4a13      	ldr	r2, [pc, #76]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	4a10      	ldr	r2, [pc, #64]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003374:	68d2      	ldr	r2, [r2, #12]
 8003376:	0a12      	lsrs	r2, r2, #8
 8003378:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]
      break;
 8003382:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0e5b      	lsrs	r3, r3, #25
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	e001      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033a4:	693b      	ldr	r3, [r7, #16]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	00f42400 	.word	0x00f42400
 80033bc:	007a1200 	.word	0x007a1200

080033c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c4:	4b03      	ldr	r3, [pc, #12]	@ (80033d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000000 	.word	0x20000000

080033d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033dc:	f7ff fff0 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4904      	ldr	r1, [pc, #16]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	0800a810 	.word	0x0800a810

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003408:	f7ff ffda 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0adb      	lsrs	r3, r3, #11
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4904      	ldr	r1, [pc, #16]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x28>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	0800a810 	.word	0x0800a810

08003430 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003436:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003440:	4b1b      	ldr	r3, [pc, #108]	@ (80034b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d10c      	bne.n	800346e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003454:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	4a14      	ldr	r2, [pc, #80]	@ (80034b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800345e:	68d2      	ldr	r2, [r2, #12]
 8003460:	0a12      	lsrs	r2, r2, #8
 8003462:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	617b      	str	r3, [r7, #20]
    break;
 800346c:	e00c      	b.n	8003488 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800346e:	4a12      	ldr	r2, [pc, #72]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	4a0e      	ldr	r2, [pc, #56]	@ (80034b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003478:	68d2      	ldr	r2, [r2, #12]
 800347a:	0a12      	lsrs	r2, r2, #8
 800347c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
    break;
 8003486:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003488:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	0e5b      	lsrs	r3, r3, #25
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034a2:	687b      	ldr	r3, [r7, #4]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40021000 	.word	0x40021000
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	00f42400 	.word	0x00f42400

080034bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c8:	2300      	movs	r3, #0
 80034ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8098 	beq.w	800360a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034de:	4b43      	ldr	r3, [pc, #268]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10d      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ee:	4a3f      	ldr	r2, [pc, #252]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f6:	4b3d      	ldr	r3, [pc, #244]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003502:	2301      	movs	r3, #1
 8003504:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003506:	4b3a      	ldr	r3, [pc, #232]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a39      	ldr	r2, [pc, #228]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003510:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003512:	f7fe fc09 	bl	8001d28 <HAL_GetTick>
 8003516:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003518:	e009      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351a:	f7fe fc05 	bl	8001d28 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d902      	bls.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	74fb      	strb	r3, [r7, #19]
        break;
 800352c:	e005      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800352e:	4b30      	ldr	r3, [pc, #192]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0ef      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d159      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003540:	4b2a      	ldr	r3, [pc, #168]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01e      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	d019      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800355c:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003566:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003568:	4b20      	ldr	r3, [pc, #128]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003578:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	4a1b      	ldr	r2, [pc, #108]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003588:	4a18      	ldr	r2, [pc, #96]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fe fbc5 	bl	8001d28 <HAL_GetTick>
 800359e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a0:	e00b      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe fbc1 	bl	8001d28 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d902      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	74fb      	strb	r3, [r7, #19]
            break;
 80035b8:	e006      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ec      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ce:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	4903      	ldr	r1, [pc, #12]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035e4:	e008      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035e6:	7cfb      	ldrb	r3, [r7, #19]
 80035e8:	74bb      	strb	r3, [r7, #18]
 80035ea:	e005      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f8:	7c7b      	ldrb	r3, [r7, #17]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d105      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fe:	4ba6      	ldr	r3, [pc, #664]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	4aa5      	ldr	r2, [pc, #660]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003616:	4ba0      	ldr	r3, [pc, #640]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361c:	f023 0203 	bic.w	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	499c      	ldr	r1, [pc, #624]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003638:	4b97      	ldr	r3, [pc, #604]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363e:	f023 020c 	bic.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4994      	ldr	r1, [pc, #592]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800365a:	4b8f      	ldr	r3, [pc, #572]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	498b      	ldr	r1, [pc, #556]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800367c:	4b86      	ldr	r3, [pc, #536]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	4983      	ldr	r1, [pc, #524]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800369e:	4b7e      	ldr	r3, [pc, #504]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	497a      	ldr	r1, [pc, #488]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c0:	4b75      	ldr	r3, [pc, #468]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	4972      	ldr	r1, [pc, #456]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4969      	ldr	r1, [pc, #420]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003704:	4b64      	ldr	r3, [pc, #400]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4961      	ldr	r1, [pc, #388]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003726:	4b5c      	ldr	r3, [pc, #368]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	4958      	ldr	r1, [pc, #352]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d015      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003748:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003756:	4950      	ldr	r1, [pc, #320]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003766:	d105      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003768:	4b4b      	ldr	r3, [pc, #300]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a4a      	ldr	r2, [pc, #296]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003772:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003780:	4b45      	ldr	r3, [pc, #276]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	4942      	ldr	r1, [pc, #264]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800379e:	d105      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d015      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037b8:	4b37      	ldr	r3, [pc, #220]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	4934      	ldr	r1, [pc, #208]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037d6:	d105      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d015      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f0:	4b29      	ldr	r3, [pc, #164]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fe:	4926      	ldr	r1, [pc, #152]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800380e:	d105      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003810:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a20      	ldr	r2, [pc, #128]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800381a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d015      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003828:	4b1b      	ldr	r3, [pc, #108]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003836:	4918      	ldr	r1, [pc, #96]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003846:	d105      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003848:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a12      	ldr	r2, [pc, #72]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003852:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003860:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386e:	490a      	ldr	r1, [pc, #40]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800387e:	d105      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003880:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800388c:	7cbb      	ldrb	r3, [r7, #18]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000

0800389c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e042      	b.n	8003934 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fd ffa7 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2224      	movs	r2, #36	@ 0x24
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 ff68 	bl	80047bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fc99 	bl	8004224 <UART_SetConfig>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e01b      	b.n	8003934 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800390a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800391a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 ffe7 	bl	8004900 <UART_CheckIdleState>
 8003932:	4603      	mov	r3, r0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	@ 0x28
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003952:	2b20      	cmp	r3, #32
 8003954:	d17b      	bne.n	8003a4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_UART_Transmit+0x26>
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e074      	b.n	8003a50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2221      	movs	r2, #33	@ 0x21
 8003972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003976:	f7fe f9d7 	bl	8001d28 <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003994:	d108      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e003      	b.n	80039b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b0:	e030      	b.n	8003a14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2180      	movs	r1, #128	@ 0x80
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f001 f849 	bl	8004a54 <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e03d      	b.n	8003a50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3302      	adds	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e007      	b.n	8003a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3301      	adds	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1c8      	bne.n	80039b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2140      	movs	r1, #64	@ 0x40
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f001 f812 	bl	8004a54 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e006      	b.n	8003a50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	@ 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d137      	bne.n	8003ae0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_UART_Receive_IT+0x24>
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e030      	b.n	8003ae2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a18      	ldr	r2, [pc, #96]	@ (8003aec <HAL_UART_Receive_IT+0x94>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01f      	beq.n	8003ad0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d018      	beq.n	8003ad0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	6a3a      	ldr	r2, [r7, #32]
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e6      	bne.n	8003a9e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f001 f82a 	bl	8004b30 <UART_Start_Receive_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3728      	adds	r7, #40	@ 0x28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40008000 	.word	0x40008000

08003af0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	@ 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d137      	bne.n	8003b78 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_UART_Receive_DMA+0x24>
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e030      	b.n	8003b7a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a18      	ldr	r2, [pc, #96]	@ (8003b84 <HAL_UART_Receive_DMA+0x94>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d01f      	beq.n	8003b68 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d018      	beq.n	8003b68 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	613b      	str	r3, [r7, #16]
   return(result);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	623b      	str	r3, [r7, #32]
 8003b56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	69f9      	ldr	r1, [r7, #28]
 8003b5a:	6a3a      	ldr	r2, [r7, #32]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f001 f900 	bl	8004d74 <UART_Start_Receive_DMA>
 8003b74:	4603      	mov	r3, r0
 8003b76:	e000      	b.n	8003b7a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3728      	adds	r7, #40	@ 0x28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40008000 	.word	0x40008000

08003b88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b0ba      	sub	sp, #232	@ 0xe8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003bb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003bbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11b      	bne.n	8003bfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d015      	beq.n	8003bfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 82e3 	beq.w	80041b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      }
      return;
 8003bfa:	e2dd      	b.n	80041b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8123 	beq.w	8003e4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003e40 <HAL_UART_IRQHandler+0x2b8>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c16:	4b8b      	ldr	r3, [pc, #556]	@ (8003e44 <HAL_UART_IRQHandler+0x2bc>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8116 	beq.w	8003e4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d011      	beq.n	8003c50 <HAL_UART_IRQHandler+0xc8>
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d011      	beq.n	8003c80 <HAL_UART_IRQHandler+0xf8>
 8003c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	f043 0204 	orr.w	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d011      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x128>
 8003c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d017      	beq.n	8003cec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003cc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8003e40 <HAL_UART_IRQHandler+0x2b8>)
 8003cce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce2:	f043 0208 	orr.w	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <HAL_UART_IRQHandler+0x196>
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8249 	beq.w	80041bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d013      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d72:	2b40      	cmp	r3, #64	@ 0x40
 8003d74:	d005      	beq.n	8003d82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d054      	beq.n	8003e2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f001 f8dd 	bl	8004f42 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d146      	bne.n	8003e24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1d9      	bne.n	8003d96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d017      	beq.n	8003e1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df2:	4a15      	ldr	r2, [pc, #84]	@ (8003e48 <HAL_UART_IRQHandler+0x2c0>)
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fa2b 	bl	8002258 <HAL_DMA_Abort_IT>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d019      	beq.n	8003e3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003e16:	4610      	mov	r0, r2
 8003e18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1a:	e00f      	b.n	8003e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f9eb 	bl	80041f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e22:	e00b      	b.n	8003e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f9e7 	bl	80041f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2a:	e007      	b.n	8003e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f9e3 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003e3a:	e1bf      	b.n	80041bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	bf00      	nop
    return;
 8003e3e:	e1bd      	b.n	80041bc <HAL_UART_IRQHandler+0x634>
 8003e40:	10000001 	.word	0x10000001
 8003e44:	04000120 	.word	0x04000120
 8003e48:	080051f9 	.word	0x080051f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 8153 	bne.w	80040fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 814c 	beq.w	80040fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8145 	beq.w	80040fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2210      	movs	r2, #16
 8003e78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e84:	2b40      	cmp	r3, #64	@ 0x40
 8003e86:	f040 80bb 	bne.w	8004000 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 818f 	beq.w	80041c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eac:	429a      	cmp	r2, r3
 8003eae:	f080 8187 	bcs.w	80041c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 8087 	bne.w	8003fde <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003efe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1da      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e1      	bne.n	8003f1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e3      	bne.n	8003f56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fac:	f023 0310 	bic.w	r3, r3, #16
 8003fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e4      	bne.n	8003f9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe f8e4 	bl	80021a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f907 	bl	800420c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ffe:	e0df      	b.n	80041c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800400c:	b29b      	uxth	r3, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80d1 	beq.w	80041c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80cc 	beq.w	80041c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800403a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800404e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004050:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800405c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e4      	bne.n	800402c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	623b      	str	r3, [r7, #32]
   return(result);
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3308      	adds	r3, #8
 8004086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800408a:	633a      	str	r2, [r7, #48]	@ 0x30
 800408c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e1      	bne.n	8004062 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0310 	bic.w	r3, r3, #16
 80040c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	617b      	str	r3, [r7, #20]
   return(result);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e4      	bne.n	80040b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f889 	bl	800420c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040fa:	e063      	b.n	80041c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <HAL_UART_IRQHandler+0x59e>
 8004108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800410c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800411c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f001 fdc8 	bl	8005cb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004124:	e051      	b.n	80041ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412e:	2b00      	cmp	r3, #0
 8004130:	d014      	beq.n	800415c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800413e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800414e:	2b00      	cmp	r3, #0
 8004150:	d03a      	beq.n	80041c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
    }
    return;
 800415a:	e035      	b.n	80041c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800415c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <HAL_UART_IRQHandler+0x5f4>
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f001 f855 	bl	8005224 <UART_EndTransmit_IT>
    return;
 800417a:	e026      	b.n	80041ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_UART_IRQHandler+0x614>
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f001 fda1 	bl	8005cdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800419a:	e016      	b.n	80041ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_UART_IRQHandler+0x642>
 80041a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	da0c      	bge.n	80041ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f001 fd89 	bl	8005cc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041b6:	e008      	b.n	80041ca <HAL_UART_IRQHandler+0x642>
      return;
 80041b8:	bf00      	nop
 80041ba:	e006      	b.n	80041ca <HAL_UART_IRQHandler+0x642>
    return;
 80041bc:	bf00      	nop
 80041be:	e004      	b.n	80041ca <HAL_UART_IRQHandler+0x642>
      return;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <HAL_UART_IRQHandler+0x642>
      return;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_UART_IRQHandler+0x642>
    return;
 80041c8:	bf00      	nop
  }
}
 80041ca:	37e8      	adds	r7, #232	@ 0xe8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004228:	b08c      	sub	sp, #48	@ 0x30
 800422a:	af00      	add	r7, sp, #0
 800422c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	431a      	orrs	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	431a      	orrs	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	4313      	orrs	r3, r2
 800424a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4bab      	ldr	r3, [pc, #684]	@ (8004500 <UART_SetConfig+0x2dc>)
 8004254:	4013      	ands	r3, r2
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800425c:	430b      	orrs	r3, r1
 800425e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4aa0      	ldr	r2, [pc, #640]	@ (8004504 <UART_SetConfig+0x2e0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800428c:	4313      	orrs	r3, r2
 800428e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800429a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	f023 010f 	bic.w	r1, r3, #15
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a91      	ldr	r2, [pc, #580]	@ (8004508 <UART_SetConfig+0x2e4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d125      	bne.n	8004314 <UART_SetConfig+0xf0>
 80042c8:	4b90      	ldr	r3, [pc, #576]	@ (800450c <UART_SetConfig+0x2e8>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d81a      	bhi.n	800430c <UART_SetConfig+0xe8>
 80042d6:	a201      	add	r2, pc, #4	@ (adr r2, 80042dc <UART_SetConfig+0xb8>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042fd 	.word	0x080042fd
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	08004305 	.word	0x08004305
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f2:	e0d6      	b.n	80044a2 <UART_SetConfig+0x27e>
 80042f4:	2302      	movs	r3, #2
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fa:	e0d2      	b.n	80044a2 <UART_SetConfig+0x27e>
 80042fc:	2304      	movs	r3, #4
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004302:	e0ce      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004304:	2308      	movs	r3, #8
 8004306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800430a:	e0ca      	b.n	80044a2 <UART_SetConfig+0x27e>
 800430c:	2310      	movs	r3, #16
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004312:	e0c6      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7d      	ldr	r2, [pc, #500]	@ (8004510 <UART_SetConfig+0x2ec>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d138      	bne.n	8004390 <UART_SetConfig+0x16c>
 800431e:	4b7b      	ldr	r3, [pc, #492]	@ (800450c <UART_SetConfig+0x2e8>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b0c      	cmp	r3, #12
 800432a:	d82d      	bhi.n	8004388 <UART_SetConfig+0x164>
 800432c:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <UART_SetConfig+0x110>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004369 	.word	0x08004369
 8004338:	08004389 	.word	0x08004389
 800433c:	08004389 	.word	0x08004389
 8004340:	08004389 	.word	0x08004389
 8004344:	08004379 	.word	0x08004379
 8004348:	08004389 	.word	0x08004389
 800434c:	08004389 	.word	0x08004389
 8004350:	08004389 	.word	0x08004389
 8004354:	08004371 	.word	0x08004371
 8004358:	08004389 	.word	0x08004389
 800435c:	08004389 	.word	0x08004389
 8004360:	08004389 	.word	0x08004389
 8004364:	08004381 	.word	0x08004381
 8004368:	2300      	movs	r3, #0
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436e:	e098      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004370:	2302      	movs	r3, #2
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004376:	e094      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004378:	2304      	movs	r3, #4
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437e:	e090      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004380:	2308      	movs	r3, #8
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004386:	e08c      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004388:	2310      	movs	r3, #16
 800438a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800438e:	e088      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a5f      	ldr	r2, [pc, #380]	@ (8004514 <UART_SetConfig+0x2f0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d125      	bne.n	80043e6 <UART_SetConfig+0x1c2>
 800439a:	4b5c      	ldr	r3, [pc, #368]	@ (800450c <UART_SetConfig+0x2e8>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043a4:	2b30      	cmp	r3, #48	@ 0x30
 80043a6:	d016      	beq.n	80043d6 <UART_SetConfig+0x1b2>
 80043a8:	2b30      	cmp	r3, #48	@ 0x30
 80043aa:	d818      	bhi.n	80043de <UART_SetConfig+0x1ba>
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d00a      	beq.n	80043c6 <UART_SetConfig+0x1a2>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d814      	bhi.n	80043de <UART_SetConfig+0x1ba>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <UART_SetConfig+0x19a>
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d008      	beq.n	80043ce <UART_SetConfig+0x1aa>
 80043bc:	e00f      	b.n	80043de <UART_SetConfig+0x1ba>
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c4:	e06d      	b.n	80044a2 <UART_SetConfig+0x27e>
 80043c6:	2302      	movs	r3, #2
 80043c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043cc:	e069      	b.n	80044a2 <UART_SetConfig+0x27e>
 80043ce:	2304      	movs	r3, #4
 80043d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d4:	e065      	b.n	80044a2 <UART_SetConfig+0x27e>
 80043d6:	2308      	movs	r3, #8
 80043d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043dc:	e061      	b.n	80044a2 <UART_SetConfig+0x27e>
 80043de:	2310      	movs	r3, #16
 80043e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e4:	e05d      	b.n	80044a2 <UART_SetConfig+0x27e>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004518 <UART_SetConfig+0x2f4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d125      	bne.n	800443c <UART_SetConfig+0x218>
 80043f0:	4b46      	ldr	r3, [pc, #280]	@ (800450c <UART_SetConfig+0x2e8>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80043fc:	d016      	beq.n	800442c <UART_SetConfig+0x208>
 80043fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004400:	d818      	bhi.n	8004434 <UART_SetConfig+0x210>
 8004402:	2b80      	cmp	r3, #128	@ 0x80
 8004404:	d00a      	beq.n	800441c <UART_SetConfig+0x1f8>
 8004406:	2b80      	cmp	r3, #128	@ 0x80
 8004408:	d814      	bhi.n	8004434 <UART_SetConfig+0x210>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <UART_SetConfig+0x1f0>
 800440e:	2b40      	cmp	r3, #64	@ 0x40
 8004410:	d008      	beq.n	8004424 <UART_SetConfig+0x200>
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x210>
 8004414:	2300      	movs	r3, #0
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e042      	b.n	80044a2 <UART_SetConfig+0x27e>
 800441c:	2302      	movs	r3, #2
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004422:	e03e      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004424:	2304      	movs	r3, #4
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442a:	e03a      	b.n	80044a2 <UART_SetConfig+0x27e>
 800442c:	2308      	movs	r3, #8
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004432:	e036      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004434:	2310      	movs	r3, #16
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443a:	e032      	b.n	80044a2 <UART_SetConfig+0x27e>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a30      	ldr	r2, [pc, #192]	@ (8004504 <UART_SetConfig+0x2e0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d12a      	bne.n	800449c <UART_SetConfig+0x278>
 8004446:	4b31      	ldr	r3, [pc, #196]	@ (800450c <UART_SetConfig+0x2e8>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004450:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004454:	d01a      	beq.n	800448c <UART_SetConfig+0x268>
 8004456:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800445a:	d81b      	bhi.n	8004494 <UART_SetConfig+0x270>
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004460:	d00c      	beq.n	800447c <UART_SetConfig+0x258>
 8004462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004466:	d815      	bhi.n	8004494 <UART_SetConfig+0x270>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <UART_SetConfig+0x250>
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004470:	d008      	beq.n	8004484 <UART_SetConfig+0x260>
 8004472:	e00f      	b.n	8004494 <UART_SetConfig+0x270>
 8004474:	2300      	movs	r3, #0
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e012      	b.n	80044a2 <UART_SetConfig+0x27e>
 800447c:	2302      	movs	r3, #2
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e00e      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004484:	2304      	movs	r3, #4
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e00a      	b.n	80044a2 <UART_SetConfig+0x27e>
 800448c:	2308      	movs	r3, #8
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e006      	b.n	80044a2 <UART_SetConfig+0x27e>
 8004494:	2310      	movs	r3, #16
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e002      	b.n	80044a2 <UART_SetConfig+0x27e>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a17      	ldr	r2, [pc, #92]	@ (8004504 <UART_SetConfig+0x2e0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f040 80a8 	bne.w	80045fe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d834      	bhi.n	8004520 <UART_SetConfig+0x2fc>
 80044b6:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <UART_SetConfig+0x298>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	08004521 	.word	0x08004521
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	08004521 	.word	0x08004521
 80044cc:	080044ef 	.word	0x080044ef
 80044d0:	08004521 	.word	0x08004521
 80044d4:	08004521 	.word	0x08004521
 80044d8:	08004521 	.word	0x08004521
 80044dc:	080044f7 	.word	0x080044f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e0:	f7fe ff7a 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 80044e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044e6:	e021      	b.n	800452c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e8:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <UART_SetConfig+0x2f8>)
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044ec:	e01e      	b.n	800452c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ee:	f7fe ff05 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80044f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044f4:	e01a      	b.n	800452c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044fc:	e016      	b.n	800452c <UART_SetConfig+0x308>
 80044fe:	bf00      	nop
 8004500:	cfff69f3 	.word	0xcfff69f3
 8004504:	40008000 	.word	0x40008000
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	40004800 	.word	0x40004800
 8004518:	40004c00 	.word	0x40004c00
 800451c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800452a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 812a 	beq.w	8004788 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	4a9e      	ldr	r2, [pc, #632]	@ (80047b4 <UART_SetConfig+0x590>)
 800453a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800453e:	461a      	mov	r2, r3
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	fbb3 f3f2 	udiv	r3, r3, r2
 8004546:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	429a      	cmp	r2, r3
 8004556:	d305      	bcc.n	8004564 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800456a:	e10d      	b.n	8004788 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	2200      	movs	r2, #0
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	60fa      	str	r2, [r7, #12]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	4a8e      	ldr	r2, [pc, #568]	@ (80047b4 <UART_SetConfig+0x590>)
 800457a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800457e:	b29b      	uxth	r3, r3
 8004580:	2200      	movs	r2, #0
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800458a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800458e:	f7fc fba3 	bl	8000cd8 <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	020b      	lsls	r3, r1, #8
 80045a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045a8:	0202      	lsls	r2, r0, #8
 80045aa:	6979      	ldr	r1, [r7, #20]
 80045ac:	6849      	ldr	r1, [r1, #4]
 80045ae:	0849      	lsrs	r1, r1, #1
 80045b0:	2000      	movs	r0, #0
 80045b2:	460c      	mov	r4, r1
 80045b4:	4605      	mov	r5, r0
 80045b6:	eb12 0804 	adds.w	r8, r2, r4
 80045ba:	eb43 0905 	adc.w	r9, r3, r5
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	469a      	mov	sl, r3
 80045c6:	4693      	mov	fp, r2
 80045c8:	4652      	mov	r2, sl
 80045ca:	465b      	mov	r3, fp
 80045cc:	4640      	mov	r0, r8
 80045ce:	4649      	mov	r1, r9
 80045d0:	f7fc fb82 	bl	8000cd8 <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4613      	mov	r3, r2
 80045da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045e2:	d308      	bcc.n	80045f6 <UART_SetConfig+0x3d2>
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ea:	d204      	bcs.n	80045f6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e0c8      	b.n	8004788 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045fc:	e0c4      	b.n	8004788 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004606:	d167      	bne.n	80046d8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004608:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800460c:	2b08      	cmp	r3, #8
 800460e:	d828      	bhi.n	8004662 <UART_SetConfig+0x43e>
 8004610:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <UART_SetConfig+0x3f4>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800463d 	.word	0x0800463d
 800461c:	08004645 	.word	0x08004645
 8004620:	0800464d 	.word	0x0800464d
 8004624:	08004663 	.word	0x08004663
 8004628:	08004653 	.word	0x08004653
 800462c:	08004663 	.word	0x08004663
 8004630:	08004663 	.word	0x08004663
 8004634:	08004663 	.word	0x08004663
 8004638:	0800465b 	.word	0x0800465b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe fecc 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004642:	e014      	b.n	800466e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7fe fede 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 8004648:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800464a:	e010      	b.n	800466e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800464c:	4b5a      	ldr	r3, [pc, #360]	@ (80047b8 <UART_SetConfig+0x594>)
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004650:	e00d      	b.n	800466e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004652:	f7fe fe53 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8004656:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004658:	e009      	b.n	800466e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004660:	e005      	b.n	800466e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800466c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8089 	beq.w	8004788 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	4a4e      	ldr	r2, [pc, #312]	@ (80047b4 <UART_SetConfig+0x590>)
 800467c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004680:	461a      	mov	r2, r3
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	fbb3 f3f2 	udiv	r3, r3, r2
 8004688:	005a      	lsls	r2, r3, #1
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	441a      	add	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d916      	bls.n	80046d0 <UART_SetConfig+0x4ac>
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a8:	d212      	bcs.n	80046d0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	b29a      	uxth	r2, r3
 80046c0:	8bfb      	ldrh	r3, [r7, #30]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	8bfa      	ldrh	r2, [r7, #30]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e05b      	b.n	8004788 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046d6:	e057      	b.n	8004788 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d828      	bhi.n	8004732 <UART_SetConfig+0x50e>
 80046e0:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <UART_SetConfig+0x4c4>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	08004733 	.word	0x08004733
 80046f8:	08004723 	.word	0x08004723
 80046fc:	08004733 	.word	0x08004733
 8004700:	08004733 	.word	0x08004733
 8004704:	08004733 	.word	0x08004733
 8004708:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7fe fe64 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 8004710:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004712:	e014      	b.n	800473e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7fe fe76 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 8004718:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800471a:	e010      	b.n	800473e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b26      	ldr	r3, [pc, #152]	@ (80047b8 <UART_SetConfig+0x594>)
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004720:	e00d      	b.n	800473e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7fe fdeb 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8004726:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004728:	e009      	b.n	800473e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004730:	e005      	b.n	800473e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800473c:	bf00      	nop
    }

    if (pclk != 0U)
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	2b00      	cmp	r3, #0
 8004742:	d021      	beq.n	8004788 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	4a1a      	ldr	r2, [pc, #104]	@ (80047b4 <UART_SetConfig+0x590>)
 800474a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800474e:	461a      	mov	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	fbb3 f2f2 	udiv	r2, r3, r2
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	441a      	add	r2, r3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	d909      	bls.n	8004782 <UART_SetConfig+0x55e>
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004774:	d205      	bcs.n	8004782 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	b29a      	uxth	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e002      	b.n	8004788 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2201      	movs	r2, #1
 800478c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2201      	movs	r2, #1
 8004794:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2200      	movs	r2, #0
 800479c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80047a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3730      	adds	r7, #48	@ 0x30
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b2:	bf00      	nop
 80047b4:	0800a818 	.word	0x0800a818
 80047b8:	00f42400 	.word	0x00f42400

080047bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01a      	beq.n	80048d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ba:	d10a      	bne.n	80048d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b098      	sub	sp, #96	@ 0x60
 8004904:	af02      	add	r7, sp, #8
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004910:	f7fd fa0a 	bl	8001d28 <HAL_GetTick>
 8004914:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d12f      	bne.n	8004984 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004924:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492c:	2200      	movs	r2, #0
 800492e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f88e 	bl	8004a54 <UART_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d022      	beq.n	8004984 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004952:	653b      	str	r3, [r7, #80]	@ 0x50
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800495c:	647b      	str	r3, [r7, #68]	@ 0x44
 800495e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800496a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e063      	b.n	8004a4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d149      	bne.n	8004a26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004992:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499a:	2200      	movs	r2, #0
 800499c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f857 	bl	8004a54 <UART_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d03c      	beq.n	8004a26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80049cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049fe:	61fa      	str	r2, [r7, #28]
 8004a00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	69b9      	ldr	r1, [r7, #24]
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e012      	b.n	8004a4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3758      	adds	r7, #88	@ 0x58
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a64:	e04f      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a6c:	d04b      	beq.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	f7fd f95b 	bl	8001d28 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e04e      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d037      	beq.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b80      	cmp	r3, #128	@ 0x80
 8004a9a:	d034      	beq.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b40      	cmp	r3, #64	@ 0x40
 8004aa0:	d031      	beq.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d110      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fa42 	bl	8004f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e029      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae0:	d111      	bne.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fa28 	bl	8004f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e00f      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	bf0c      	ite	eq
 8004b16:	2301      	moveq	r3, #1
 8004b18:	2300      	movne	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d0a0      	beq.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b0a3      	sub	sp, #140	@ 0x8c
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b62:	d10e      	bne.n	8004b82 <UART_Start_Receive_IT+0x52>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <UART_Start_Receive_IT+0x48>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004b72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b76:	e02d      	b.n	8004bd4 <UART_Start_Receive_IT+0xa4>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	22ff      	movs	r2, #255	@ 0xff
 8004b7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b80:	e028      	b.n	8004bd4 <UART_Start_Receive_IT+0xa4>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <UART_Start_Receive_IT+0x76>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <UART_Start_Receive_IT+0x6c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	22ff      	movs	r2, #255	@ 0xff
 8004b96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b9a:	e01b      	b.n	8004bd4 <UART_Start_Receive_IT+0xa4>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	227f      	movs	r2, #127	@ 0x7f
 8004ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ba4:	e016      	b.n	8004bd4 <UART_Start_Receive_IT+0xa4>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bae:	d10d      	bne.n	8004bcc <UART_Start_Receive_IT+0x9c>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <UART_Start_Receive_IT+0x92>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	227f      	movs	r2, #127	@ 0x7f
 8004bbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004bc0:	e008      	b.n	8004bd4 <UART_Start_Receive_IT+0xa4>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	223f      	movs	r2, #63	@ 0x3f
 8004bc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004bca:	e003      	b.n	8004bd4 <UART_Start_Receive_IT+0xa4>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2222      	movs	r2, #34	@ 0x22
 8004be0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3308      	adds	r3, #8
 8004bea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004bf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004c08:	673a      	str	r2, [r7, #112]	@ 0x70
 8004c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004c0e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e3      	bne.n	8004be4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c24:	d14f      	bne.n	8004cc6 <UART_Start_Receive_IT+0x196>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d349      	bcc.n	8004cc6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3a:	d107      	bne.n	8004c4c <UART_Start_Receive_IT+0x11c>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a47      	ldr	r2, [pc, #284]	@ (8004d64 <UART_Start_Receive_IT+0x234>)
 8004c48:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c4a:	e002      	b.n	8004c52 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a46      	ldr	r2, [pc, #280]	@ (8004d68 <UART_Start_Receive_IT+0x238>)
 8004c50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01a      	beq.n	8004c90 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c7e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e4      	bne.n	8004c5a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004cb0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004cb2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004cb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e5      	bne.n	8004c90 <UART_Start_Receive_IT+0x160>
 8004cc4:	e046      	b.n	8004d54 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cce:	d107      	bne.n	8004ce0 <UART_Start_Receive_IT+0x1b0>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a24      	ldr	r2, [pc, #144]	@ (8004d6c <UART_Start_Receive_IT+0x23c>)
 8004cdc:	675a      	str	r2, [r3, #116]	@ 0x74
 8004cde:	e002      	b.n	8004ce6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a23      	ldr	r2, [pc, #140]	@ (8004d70 <UART_Start_Receive_IT+0x240>)
 8004ce4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d019      	beq.n	8004d22 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004d02:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d0e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e6      	bne.n	8004cee <UART_Start_Receive_IT+0x1be>
 8004d20:	e018      	b.n	8004d54 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f043 0320 	orr.w	r3, r3, #32
 8004d36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	69f9      	ldr	r1, [r7, #28]
 8004d46:	6a3a      	ldr	r2, [r7, #32]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e6      	bne.n	8004d22 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	378c      	adds	r7, #140	@ 0x8c
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	0800594d 	.word	0x0800594d
 8004d68:	080055ed 	.word	0x080055ed
 8004d6c:	08005435 	.word	0x08005435
 8004d70:	0800527d 	.word	0x0800527d

08004d74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b096      	sub	sp, #88	@ 0x58
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2222      	movs	r2, #34	@ 0x22
 8004d9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d02d      	beq.n	8004e06 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004db0:	4a40      	ldr	r2, [pc, #256]	@ (8004eb4 <UART_Start_Receive_DMA+0x140>)
 8004db2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dba:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb8 <UART_Start_Receive_DMA+0x144>)
 8004dbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8004ebc <UART_Start_Receive_DMA+0x148>)
 8004dc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dce:	2200      	movs	r2, #0
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3324      	adds	r3, #36	@ 0x24
 8004dde:	4619      	mov	r1, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de4:	461a      	mov	r2, r3
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	f7fd f962 	bl	80020b0 <HAL_DMA_Start_IT>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2210      	movs	r2, #16
 8004df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e051      	b.n	8004eaa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d018      	beq.n	8004e40 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e2e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e6      	bne.n	8004e0e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e60:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	613b      	str	r3, [r7, #16]
   return(result);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e94:	623a      	str	r2, [r7, #32]
 8004e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3758      	adds	r7, #88	@ 0x58
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	0800500f 	.word	0x0800500f
 8004eb8:	0800513b 	.word	0x0800513b
 8004ebc:	08005179 	.word	0x08005179

08004ec0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b08f      	sub	sp, #60	@ 0x3c
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e6      	bne.n	8004ec8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3308      	adds	r3, #8
 8004f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3308      	adds	r3, #8
 8004f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1a:	61ba      	str	r2, [r7, #24]
 8004f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6979      	ldr	r1, [r7, #20]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	613b      	str	r3, [r7, #16]
   return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e5      	bne.n	8004efa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004f36:	bf00      	nop
 8004f38:	373c      	adds	r7, #60	@ 0x3c
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b095      	sub	sp, #84	@ 0x54
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e6      	bne.n	8004f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e3      	bne.n	8004f7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d118      	bne.n	8004fee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f023 0310 	bic.w	r3, r3, #16
 8004fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6979      	ldr	r1, [r7, #20]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e6      	bne.n	8004fbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005002:	bf00      	nop
 8005004:	3754      	adds	r7, #84	@ 0x54
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b09c      	sub	sp, #112	@ 0x70
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d171      	bne.n	800510e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800502a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800502c:	2200      	movs	r2, #0
 800502e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005042:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005046:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005050:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005052:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005056:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800505e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e6      	bne.n	8005032 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3308      	adds	r3, #8
 800506a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	667b      	str	r3, [r7, #100]	@ 0x64
 800507c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3308      	adds	r3, #8
 8005082:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005084:	647a      	str	r2, [r7, #68]	@ 0x44
 8005086:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800508a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e5      	bne.n	8005064 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3308      	adds	r3, #8
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	623b      	str	r3, [r7, #32]
   return(result);
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80050b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3308      	adds	r3, #8
 80050b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80050ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e5      	bne.n	8005098 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ce:	2220      	movs	r2, #32
 80050d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d118      	bne.n	800510e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f023 0310 	bic.w	r3, r3, #16
 80050f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	69b9      	ldr	r1, [r7, #24]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	617b      	str	r3, [r7, #20]
   return(result);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e6      	bne.n	80050dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005110:	2200      	movs	r2, #0
 8005112:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d107      	bne.n	800512c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800511e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005122:	4619      	mov	r1, r3
 8005124:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005126:	f7ff f871 	bl	800420c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800512a:	e002      	b.n	8005132 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800512c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800512e:	f7fc fb13 	bl	8001758 <HAL_UART_RxCpltCallback>
}
 8005132:	bf00      	nop
 8005134:	3770      	adds	r7, #112	@ 0x70
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d109      	bne.n	800516a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	4619      	mov	r1, r3
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff f852 	bl	800420c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005168:	e002      	b.n	8005170 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff f83a 	bl	80041e4 <HAL_UART_RxHalfCpltCallback>
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005194:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a0:	2b80      	cmp	r3, #128	@ 0x80
 80051a2:	d109      	bne.n	80051b8 <UART_DMAError+0x40>
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b21      	cmp	r3, #33	@ 0x21
 80051a8:	d106      	bne.n	80051b8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80051b2:	6978      	ldr	r0, [r7, #20]
 80051b4:	f7ff fe84 	bl	8004ec0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	d109      	bne.n	80051da <UART_DMAError+0x62>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b22      	cmp	r3, #34	@ 0x22
 80051ca:	d106      	bne.n	80051da <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80051d4:	6978      	ldr	r0, [r7, #20]
 80051d6:	f7ff feb4 	bl	8004f42 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e0:	f043 0210 	orr.w	r2, r3, #16
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ea:	6978      	ldr	r0, [r7, #20]
 80051ec:	f7ff f804 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7fe ffee 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	60bb      	str	r3, [r7, #8]
   return(result);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6979      	ldr	r1, [r7, #20]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	613b      	str	r3, [r7, #16]
   return(result);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e6      	bne.n	800522c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fe ffaf 	bl	80041d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005272:	bf00      	nop
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b09c      	sub	sp, #112	@ 0x70
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800528a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005294:	2b22      	cmp	r3, #34	@ 0x22
 8005296:	f040 80be 	bne.w	8005416 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80052a8:	b2d9      	uxtb	r1, r3
 80052aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b4:	400a      	ands	r2, r1
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 80a1 	bne.w	8005426 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005302:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005304:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e6      	bne.n	80052e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3308      	adds	r3, #8
 800531c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	667b      	str	r3, [r7, #100]	@ 0x64
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005336:	647a      	str	r2, [r7, #68]	@ 0x44
 8005338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800533c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a33      	ldr	r2, [pc, #204]	@ (8005430 <UART_RxISR_8BIT+0x1b4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d01f      	beq.n	80053a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	623b      	str	r3, [r7, #32]
   return(result);
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800538a:	663b      	str	r3, [r7, #96]	@ 0x60
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005394:	633b      	str	r3, [r7, #48]	@ 0x30
 8005396:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800539a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d12e      	bne.n	800540e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	617b      	str	r3, [r7, #20]
   return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e6      	bne.n	80053b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d103      	bne.n	80053fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2210      	movs	r2, #16
 80053fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fe ff00 	bl	800420c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800540c:	e00b      	b.n	8005426 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc f9a2 	bl	8001758 <HAL_UART_RxCpltCallback>
}
 8005414:	e007      	b.n	8005426 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0208 	orr.w	r2, r2, #8
 8005424:	619a      	str	r2, [r3, #24]
}
 8005426:	bf00      	nop
 8005428:	3770      	adds	r7, #112	@ 0x70
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40008000 	.word	0x40008000

08005434 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b09c      	sub	sp, #112	@ 0x70
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005442:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800544c:	2b22      	cmp	r3, #34	@ 0x22
 800544e:	f040 80be 	bne.w	80055ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005462:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005466:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800546a:	4013      	ands	r3, r2
 800546c:	b29a      	uxth	r2, r3
 800546e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005470:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005476:	1c9a      	adds	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 80a1 	bne.w	80055de <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80054aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80054bc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80054c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80054c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80054f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a33      	ldr	r2, [pc, #204]	@ (80055e8 <UART_RxISR_16BIT+0x1b4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d01f      	beq.n	8005560 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d018      	beq.n	8005560 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	61fb      	str	r3, [r7, #28]
   return(result);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800554c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800554e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e6      	bne.n	800552e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d12e      	bne.n	80055c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	60bb      	str	r3, [r7, #8]
   return(result);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f023 0310 	bic.w	r3, r3, #16
 8005582:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	613b      	str	r3, [r7, #16]
   return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d103      	bne.n	80055b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2210      	movs	r2, #16
 80055b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fe fe24 	bl	800420c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055c4:	e00b      	b.n	80055de <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc f8c6 	bl	8001758 <HAL_UART_RxCpltCallback>
}
 80055cc:	e007      	b.n	80055de <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0208 	orr.w	r2, r2, #8
 80055dc:	619a      	str	r2, [r3, #24]
}
 80055de:	bf00      	nop
 80055e0:	3770      	adds	r7, #112	@ 0x70
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40008000 	.word	0x40008000

080055ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b0ac      	sub	sp, #176	@ 0xb0
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80055fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005622:	2b22      	cmp	r3, #34	@ 0x22
 8005624:	f040 8182 	bne.w	800592c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800562e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005632:	e125      	b.n	8005880 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800563e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005642:	b2d9      	uxtb	r1, r3
 8005644:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005648:	b2da      	uxtb	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564e:	400a      	ands	r2, r1
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800567a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	2b00      	cmp	r3, #0
 8005684:	d053      	beq.n	800572e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ac:	f043 0201 	orr.w	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80056c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00b      	beq.n	80056e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2202      	movs	r2, #2
 80056d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056dc:	f043 0204 	orr.w	r2, r3, #4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d011      	beq.n	8005716 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80056f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2204      	movs	r2, #4
 8005704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570c:	f043 0202 	orr.w	r2, r3, #2
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571c:	2b00      	cmp	r3, #0
 800571e:	d006      	beq.n	800572e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7fe fd69 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 80a2 	bne.w	8005880 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800574a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800574c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800575e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005760:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005764:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800576c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e4      	bne.n	800573c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800579a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800579c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80057a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80057a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e1      	bne.n	8005772 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a5f      	ldr	r2, [pc, #380]	@ (8005944 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d021      	beq.n	8005810 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01a      	beq.n	8005810 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80057fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80057fe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005802:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800580a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e4      	bne.n	80057da <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d130      	bne.n	800587a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005840:	643b      	str	r3, [r7, #64]	@ 0x40
 8005842:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800584e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e4      	bne.n	800581e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b10      	cmp	r3, #16
 8005860:	d103      	bne.n	800586a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2210      	movs	r2, #16
 8005868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fe fcca 	bl	800420c <HAL_UARTEx_RxEventCallback>
 8005878:	e002      	b.n	8005880 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fb ff6c 	bl	8001758 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005880:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005884:	2b00      	cmp	r3, #0
 8005886:	d006      	beq.n	8005896 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	f47f aecf 	bne.w	8005634 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800589c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d049      	beq.n	800593c <UART_RxISR_8BIT_FIFOEN+0x350>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80058ae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d242      	bcs.n	800593c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80058da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e3      	bne.n	80058b6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80058f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	60bb      	str	r3, [r7, #8]
   return(result);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f043 0320 	orr.w	r3, r3, #32
 8005908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6979      	ldr	r1, [r7, #20]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	613b      	str	r3, [r7, #16]
   return(result);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e4      	bne.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800592a:	e007      	b.n	800593c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0208 	orr.w	r2, r2, #8
 800593a:	619a      	str	r2, [r3, #24]
}
 800593c:	bf00      	nop
 800593e:	37b0      	adds	r7, #176	@ 0xb0
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40008000 	.word	0x40008000
 8005948:	0800527d 	.word	0x0800527d

0800594c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b0ae      	sub	sp, #184	@ 0xb8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800595a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005982:	2b22      	cmp	r3, #34	@ 0x22
 8005984:	f040 8186 	bne.w	8005c94 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800598e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005992:	e129      	b.n	8005be8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80059a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80059aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80059ae:	4013      	ands	r3, r2
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d053      	beq.n	8005a92 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d011      	beq.n	8005a1a <UART_RxISR_16BIT_FIFOEN+0xce>
 80059f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2201      	movs	r2, #1
 8005a08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a10:	f043 0201 	orr.w	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d011      	beq.n	8005a4a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2202      	movs	r2, #2
 8005a38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a40:	f043 0204 	orr.w	r2, r3, #4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d011      	beq.n	8005a7a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2204      	movs	r2, #4
 8005a68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a70:	f043 0202 	orr.w	r2, r3, #2
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d006      	beq.n	8005a92 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7fe fbb7 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f040 80a4 	bne.w	8005be8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005aae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ac6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005aca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e2      	bne.n	8005aa0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005aea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005b02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e1      	bne.n	8005ada <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8005cac <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d021      	beq.n	8005b78 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01a      	beq.n	8005b78 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e4      	bne.n	8005b42 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d130      	bne.n	8005be2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	f023 0310 	bic.w	r3, r3, #16
 8005b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005baa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e4      	bne.n	8005b86 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2b10      	cmp	r3, #16
 8005bc8:	d103      	bne.n	8005bd2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2210      	movs	r2, #16
 8005bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fe fb16 	bl	800420c <HAL_UARTEx_RxEventCallback>
 8005be0:	e002      	b.n	8005be8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fb fdb8 	bl	8001758 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005be8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d006      	beq.n	8005bfe <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005bf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f47f aecb 	bne.w	8005994 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c04:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d049      	beq.n	8005ca4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005c16:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d242      	bcs.n	8005ca4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005c42:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e3      	bne.n	8005c1e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005c5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f043 0320 	orr.w	r3, r3, #32
 8005c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	69b9      	ldr	r1, [r7, #24]
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e4      	bne.n	8005c5c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c92:	e007      	b.n	8005ca4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0208 	orr.w	r2, r2, #8
 8005ca2:	619a      	str	r2, [r3, #24]
}
 8005ca4:	bf00      	nop
 8005ca6:	37b8      	adds	r7, #184	@ 0xb8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40008000 	.word	0x40008000
 8005cb0:	08005435 	.word	0x08005435

08005cb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e027      	b.n	8005d56 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2224      	movs	r2, #36	@ 0x24
 8005d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e02d      	b.n	8005dd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2224      	movs	r2, #36	@ 0x24
 8005d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f850 	bl	8005e5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e02d      	b.n	8005e52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2224      	movs	r2, #36	@ 0x24
 8005e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f812 	bl	8005e5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d108      	bne.n	8005e7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e7c:	e031      	b.n	8005ee2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e7e:	2308      	movs	r3, #8
 8005e80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e82:	2308      	movs	r3, #8
 8005e84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	0e5b      	lsrs	r3, r3, #25
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	0f5b      	lsrs	r3, r3, #29
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	7b3a      	ldrb	r2, [r7, #12]
 8005eaa:	4911      	ldr	r1, [pc, #68]	@ (8005ef0 <UARTEx_SetNbDataToProcess+0x94>)
 8005eac:	5c8a      	ldrb	r2, [r1, r2]
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005eb2:	7b3a      	ldrb	r2, [r7, #12]
 8005eb4:	490f      	ldr	r1, [pc, #60]	@ (8005ef4 <UARTEx_SetNbDataToProcess+0x98>)
 8005eb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	7b7a      	ldrb	r2, [r7, #13]
 8005ec8:	4909      	ldr	r1, [pc, #36]	@ (8005ef0 <UARTEx_SetNbDataToProcess+0x94>)
 8005eca:	5c8a      	ldrb	r2, [r1, r2]
 8005ecc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ed0:	7b7a      	ldrb	r2, [r7, #13]
 8005ed2:	4908      	ldr	r1, [pc, #32]	@ (8005ef4 <UARTEx_SetNbDataToProcess+0x98>)
 8005ed4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ed6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ee2:	bf00      	nop
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	0800a830 	.word	0x0800a830
 8005ef4:	0800a838 	.word	0x0800a838

08005ef8 <__cvt>:
 8005ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	ec57 6b10 	vmov	r6, r7, d0
 8005f00:	2f00      	cmp	r7, #0
 8005f02:	460c      	mov	r4, r1
 8005f04:	4619      	mov	r1, r3
 8005f06:	463b      	mov	r3, r7
 8005f08:	bfbb      	ittet	lt
 8005f0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f0e:	461f      	movlt	r7, r3
 8005f10:	2300      	movge	r3, #0
 8005f12:	232d      	movlt	r3, #45	@ 0x2d
 8005f14:	700b      	strb	r3, [r1, #0]
 8005f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f1c:	4691      	mov	r9, r2
 8005f1e:	f023 0820 	bic.w	r8, r3, #32
 8005f22:	bfbc      	itt	lt
 8005f24:	4632      	movlt	r2, r6
 8005f26:	4616      	movlt	r6, r2
 8005f28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f2c:	d005      	beq.n	8005f3a <__cvt+0x42>
 8005f2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f32:	d100      	bne.n	8005f36 <__cvt+0x3e>
 8005f34:	3401      	adds	r4, #1
 8005f36:	2102      	movs	r1, #2
 8005f38:	e000      	b.n	8005f3c <__cvt+0x44>
 8005f3a:	2103      	movs	r1, #3
 8005f3c:	ab03      	add	r3, sp, #12
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	ab02      	add	r3, sp, #8
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	ec47 6b10 	vmov	d0, r6, r7
 8005f48:	4653      	mov	r3, sl
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	f001 ff20 	bl	8007d90 <_dtoa_r>
 8005f50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f54:	4605      	mov	r5, r0
 8005f56:	d119      	bne.n	8005f8c <__cvt+0x94>
 8005f58:	f019 0f01 	tst.w	r9, #1
 8005f5c:	d00e      	beq.n	8005f7c <__cvt+0x84>
 8005f5e:	eb00 0904 	add.w	r9, r0, r4
 8005f62:	2200      	movs	r2, #0
 8005f64:	2300      	movs	r3, #0
 8005f66:	4630      	mov	r0, r6
 8005f68:	4639      	mov	r1, r7
 8005f6a:	f7fa fdd5 	bl	8000b18 <__aeabi_dcmpeq>
 8005f6e:	b108      	cbz	r0, 8005f74 <__cvt+0x7c>
 8005f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f74:	2230      	movs	r2, #48	@ 0x30
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	454b      	cmp	r3, r9
 8005f7a:	d31e      	bcc.n	8005fba <__cvt+0xc2>
 8005f7c:	9b03      	ldr	r3, [sp, #12]
 8005f7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f80:	1b5b      	subs	r3, r3, r5
 8005f82:	4628      	mov	r0, r5
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	b004      	add	sp, #16
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f90:	eb00 0904 	add.w	r9, r0, r4
 8005f94:	d1e5      	bne.n	8005f62 <__cvt+0x6a>
 8005f96:	7803      	ldrb	r3, [r0, #0]
 8005f98:	2b30      	cmp	r3, #48	@ 0x30
 8005f9a:	d10a      	bne.n	8005fb2 <__cvt+0xba>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa fdb8 	bl	8000b18 <__aeabi_dcmpeq>
 8005fa8:	b918      	cbnz	r0, 8005fb2 <__cvt+0xba>
 8005faa:	f1c4 0401 	rsb	r4, r4, #1
 8005fae:	f8ca 4000 	str.w	r4, [sl]
 8005fb2:	f8da 3000 	ldr.w	r3, [sl]
 8005fb6:	4499      	add	r9, r3
 8005fb8:	e7d3      	b.n	8005f62 <__cvt+0x6a>
 8005fba:	1c59      	adds	r1, r3, #1
 8005fbc:	9103      	str	r1, [sp, #12]
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	e7d9      	b.n	8005f76 <__cvt+0x7e>

08005fc2 <__exponent>:
 8005fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	bfba      	itte	lt
 8005fc8:	4249      	neglt	r1, r1
 8005fca:	232d      	movlt	r3, #45	@ 0x2d
 8005fcc:	232b      	movge	r3, #43	@ 0x2b
 8005fce:	2909      	cmp	r1, #9
 8005fd0:	7002      	strb	r2, [r0, #0]
 8005fd2:	7043      	strb	r3, [r0, #1]
 8005fd4:	dd29      	ble.n	800602a <__exponent+0x68>
 8005fd6:	f10d 0307 	add.w	r3, sp, #7
 8005fda:	461d      	mov	r5, r3
 8005fdc:	270a      	movs	r7, #10
 8005fde:	461a      	mov	r2, r3
 8005fe0:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fe4:	fb07 1416 	mls	r4, r7, r6, r1
 8005fe8:	3430      	adds	r4, #48	@ 0x30
 8005fea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fee:	460c      	mov	r4, r1
 8005ff0:	2c63      	cmp	r4, #99	@ 0x63
 8005ff2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	dcf1      	bgt.n	8005fde <__exponent+0x1c>
 8005ffa:	3130      	adds	r1, #48	@ 0x30
 8005ffc:	1e94      	subs	r4, r2, #2
 8005ffe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006002:	1c41      	adds	r1, r0, #1
 8006004:	4623      	mov	r3, r4
 8006006:	42ab      	cmp	r3, r5
 8006008:	d30a      	bcc.n	8006020 <__exponent+0x5e>
 800600a:	f10d 0309 	add.w	r3, sp, #9
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	42ac      	cmp	r4, r5
 8006012:	bf88      	it	hi
 8006014:	2300      	movhi	r3, #0
 8006016:	3302      	adds	r3, #2
 8006018:	4403      	add	r3, r0
 800601a:	1a18      	subs	r0, r3, r0
 800601c:	b003      	add	sp, #12
 800601e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006020:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006024:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006028:	e7ed      	b.n	8006006 <__exponent+0x44>
 800602a:	2330      	movs	r3, #48	@ 0x30
 800602c:	3130      	adds	r1, #48	@ 0x30
 800602e:	7083      	strb	r3, [r0, #2]
 8006030:	70c1      	strb	r1, [r0, #3]
 8006032:	1d03      	adds	r3, r0, #4
 8006034:	e7f1      	b.n	800601a <__exponent+0x58>
	...

08006038 <_printf_float>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	b08d      	sub	sp, #52	@ 0x34
 800603e:	460c      	mov	r4, r1
 8006040:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006044:	4616      	mov	r6, r2
 8006046:	461f      	mov	r7, r3
 8006048:	4605      	mov	r5, r0
 800604a:	f001 fdc9 	bl	8007be0 <_localeconv_r>
 800604e:	6803      	ldr	r3, [r0, #0]
 8006050:	9304      	str	r3, [sp, #16]
 8006052:	4618      	mov	r0, r3
 8006054:	f7fa f934 	bl	80002c0 <strlen>
 8006058:	2300      	movs	r3, #0
 800605a:	930a      	str	r3, [sp, #40]	@ 0x28
 800605c:	f8d8 3000 	ldr.w	r3, [r8]
 8006060:	9005      	str	r0, [sp, #20]
 8006062:	3307      	adds	r3, #7
 8006064:	f023 0307 	bic.w	r3, r3, #7
 8006068:	f103 0208 	add.w	r2, r3, #8
 800606c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006070:	f8d4 b000 	ldr.w	fp, [r4]
 8006074:	f8c8 2000 	str.w	r2, [r8]
 8006078:	e9d3 8900 	ldrd	r8, r9, [r3]
 800607c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006080:	9307      	str	r3, [sp, #28]
 8006082:	f8cd 8018 	str.w	r8, [sp, #24]
 8006086:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800608a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800608e:	4b9c      	ldr	r3, [pc, #624]	@ (8006300 <_printf_float+0x2c8>)
 8006090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006094:	f7fa fd72 	bl	8000b7c <__aeabi_dcmpun>
 8006098:	bb70      	cbnz	r0, 80060f8 <_printf_float+0xc0>
 800609a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800609e:	4b98      	ldr	r3, [pc, #608]	@ (8006300 <_printf_float+0x2c8>)
 80060a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060a4:	f7fa fd4c 	bl	8000b40 <__aeabi_dcmple>
 80060a8:	bb30      	cbnz	r0, 80060f8 <_printf_float+0xc0>
 80060aa:	2200      	movs	r2, #0
 80060ac:	2300      	movs	r3, #0
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa fd3b 	bl	8000b2c <__aeabi_dcmplt>
 80060b6:	b110      	cbz	r0, 80060be <_printf_float+0x86>
 80060b8:	232d      	movs	r3, #45	@ 0x2d
 80060ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060be:	4a91      	ldr	r2, [pc, #580]	@ (8006304 <_printf_float+0x2cc>)
 80060c0:	4b91      	ldr	r3, [pc, #580]	@ (8006308 <_printf_float+0x2d0>)
 80060c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060c6:	bf94      	ite	ls
 80060c8:	4690      	movls	r8, r2
 80060ca:	4698      	movhi	r8, r3
 80060cc:	2303      	movs	r3, #3
 80060ce:	6123      	str	r3, [r4, #16]
 80060d0:	f02b 0304 	bic.w	r3, fp, #4
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	f04f 0900 	mov.w	r9, #0
 80060da:	9700      	str	r7, [sp, #0]
 80060dc:	4633      	mov	r3, r6
 80060de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060e0:	4621      	mov	r1, r4
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 f9d2 	bl	800648c <_printf_common>
 80060e8:	3001      	adds	r0, #1
 80060ea:	f040 808d 	bne.w	8006208 <_printf_float+0x1d0>
 80060ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060f2:	b00d      	add	sp, #52	@ 0x34
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	4640      	mov	r0, r8
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa fd3c 	bl	8000b7c <__aeabi_dcmpun>
 8006104:	b140      	cbz	r0, 8006118 <_printf_float+0xe0>
 8006106:	464b      	mov	r3, r9
 8006108:	2b00      	cmp	r3, #0
 800610a:	bfbc      	itt	lt
 800610c:	232d      	movlt	r3, #45	@ 0x2d
 800610e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006112:	4a7e      	ldr	r2, [pc, #504]	@ (800630c <_printf_float+0x2d4>)
 8006114:	4b7e      	ldr	r3, [pc, #504]	@ (8006310 <_printf_float+0x2d8>)
 8006116:	e7d4      	b.n	80060c2 <_printf_float+0x8a>
 8006118:	6863      	ldr	r3, [r4, #4]
 800611a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800611e:	9206      	str	r2, [sp, #24]
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	d13b      	bne.n	800619c <_printf_float+0x164>
 8006124:	2306      	movs	r3, #6
 8006126:	6063      	str	r3, [r4, #4]
 8006128:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800612c:	2300      	movs	r3, #0
 800612e:	6022      	str	r2, [r4, #0]
 8006130:	9303      	str	r3, [sp, #12]
 8006132:	ab0a      	add	r3, sp, #40	@ 0x28
 8006134:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006138:	ab09      	add	r3, sp, #36	@ 0x24
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	6861      	ldr	r1, [r4, #4]
 800613e:	ec49 8b10 	vmov	d0, r8, r9
 8006142:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006146:	4628      	mov	r0, r5
 8006148:	f7ff fed6 	bl	8005ef8 <__cvt>
 800614c:	9b06      	ldr	r3, [sp, #24]
 800614e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006150:	2b47      	cmp	r3, #71	@ 0x47
 8006152:	4680      	mov	r8, r0
 8006154:	d129      	bne.n	80061aa <_printf_float+0x172>
 8006156:	1cc8      	adds	r0, r1, #3
 8006158:	db02      	blt.n	8006160 <_printf_float+0x128>
 800615a:	6863      	ldr	r3, [r4, #4]
 800615c:	4299      	cmp	r1, r3
 800615e:	dd41      	ble.n	80061e4 <_printf_float+0x1ac>
 8006160:	f1aa 0a02 	sub.w	sl, sl, #2
 8006164:	fa5f fa8a 	uxtb.w	sl, sl
 8006168:	3901      	subs	r1, #1
 800616a:	4652      	mov	r2, sl
 800616c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006170:	9109      	str	r1, [sp, #36]	@ 0x24
 8006172:	f7ff ff26 	bl	8005fc2 <__exponent>
 8006176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006178:	1813      	adds	r3, r2, r0
 800617a:	2a01      	cmp	r2, #1
 800617c:	4681      	mov	r9, r0
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	dc02      	bgt.n	8006188 <_printf_float+0x150>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	07d2      	lsls	r2, r2, #31
 8006186:	d501      	bpl.n	800618c <_printf_float+0x154>
 8006188:	3301      	adds	r3, #1
 800618a:	6123      	str	r3, [r4, #16]
 800618c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0a2      	beq.n	80060da <_printf_float+0xa2>
 8006194:	232d      	movs	r3, #45	@ 0x2d
 8006196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800619a:	e79e      	b.n	80060da <_printf_float+0xa2>
 800619c:	9a06      	ldr	r2, [sp, #24]
 800619e:	2a47      	cmp	r2, #71	@ 0x47
 80061a0:	d1c2      	bne.n	8006128 <_printf_float+0xf0>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1c0      	bne.n	8006128 <_printf_float+0xf0>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7bd      	b.n	8006126 <_printf_float+0xee>
 80061aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061ae:	d9db      	bls.n	8006168 <_printf_float+0x130>
 80061b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061b4:	d118      	bne.n	80061e8 <_printf_float+0x1b0>
 80061b6:	2900      	cmp	r1, #0
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	dd0b      	ble.n	80061d4 <_printf_float+0x19c>
 80061bc:	6121      	str	r1, [r4, #16]
 80061be:	b913      	cbnz	r3, 80061c6 <_printf_float+0x18e>
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	07d0      	lsls	r0, r2, #31
 80061c4:	d502      	bpl.n	80061cc <_printf_float+0x194>
 80061c6:	3301      	adds	r3, #1
 80061c8:	440b      	add	r3, r1
 80061ca:	6123      	str	r3, [r4, #16]
 80061cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061ce:	f04f 0900 	mov.w	r9, #0
 80061d2:	e7db      	b.n	800618c <_printf_float+0x154>
 80061d4:	b913      	cbnz	r3, 80061dc <_printf_float+0x1a4>
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	07d2      	lsls	r2, r2, #31
 80061da:	d501      	bpl.n	80061e0 <_printf_float+0x1a8>
 80061dc:	3302      	adds	r3, #2
 80061de:	e7f4      	b.n	80061ca <_printf_float+0x192>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e7f2      	b.n	80061ca <_printf_float+0x192>
 80061e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ea:	4299      	cmp	r1, r3
 80061ec:	db05      	blt.n	80061fa <_printf_float+0x1c2>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	6121      	str	r1, [r4, #16]
 80061f2:	07d8      	lsls	r0, r3, #31
 80061f4:	d5ea      	bpl.n	80061cc <_printf_float+0x194>
 80061f6:	1c4b      	adds	r3, r1, #1
 80061f8:	e7e7      	b.n	80061ca <_printf_float+0x192>
 80061fa:	2900      	cmp	r1, #0
 80061fc:	bfd4      	ite	le
 80061fe:	f1c1 0202 	rsble	r2, r1, #2
 8006202:	2201      	movgt	r2, #1
 8006204:	4413      	add	r3, r2
 8006206:	e7e0      	b.n	80061ca <_printf_float+0x192>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	055a      	lsls	r2, r3, #21
 800620c:	d407      	bmi.n	800621e <_printf_float+0x1e6>
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	4642      	mov	r2, r8
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	d12b      	bne.n	8006274 <_printf_float+0x23c>
 800621c:	e767      	b.n	80060ee <_printf_float+0xb6>
 800621e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006222:	f240 80dd 	bls.w	80063e0 <_printf_float+0x3a8>
 8006226:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800622a:	2200      	movs	r2, #0
 800622c:	2300      	movs	r3, #0
 800622e:	f7fa fc73 	bl	8000b18 <__aeabi_dcmpeq>
 8006232:	2800      	cmp	r0, #0
 8006234:	d033      	beq.n	800629e <_printf_float+0x266>
 8006236:	4a37      	ldr	r2, [pc, #220]	@ (8006314 <_printf_float+0x2dc>)
 8006238:	2301      	movs	r3, #1
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f af54 	beq.w	80060ee <_printf_float+0xb6>
 8006246:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800624a:	4543      	cmp	r3, r8
 800624c:	db02      	blt.n	8006254 <_printf_float+0x21c>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	07d8      	lsls	r0, r3, #31
 8006252:	d50f      	bpl.n	8006274 <_printf_float+0x23c>
 8006254:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006258:	4631      	mov	r1, r6
 800625a:	4628      	mov	r0, r5
 800625c:	47b8      	blx	r7
 800625e:	3001      	adds	r0, #1
 8006260:	f43f af45 	beq.w	80060ee <_printf_float+0xb6>
 8006264:	f04f 0900 	mov.w	r9, #0
 8006268:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800626c:	f104 0a1a 	add.w	sl, r4, #26
 8006270:	45c8      	cmp	r8, r9
 8006272:	dc09      	bgt.n	8006288 <_printf_float+0x250>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	f100 8103 	bmi.w	8006482 <_printf_float+0x44a>
 800627c:	68e0      	ldr	r0, [r4, #12]
 800627e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006280:	4298      	cmp	r0, r3
 8006282:	bfb8      	it	lt
 8006284:	4618      	movlt	r0, r3
 8006286:	e734      	b.n	80060f2 <_printf_float+0xba>
 8006288:	2301      	movs	r3, #1
 800628a:	4652      	mov	r2, sl
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f43f af2b 	beq.w	80060ee <_printf_float+0xb6>
 8006298:	f109 0901 	add.w	r9, r9, #1
 800629c:	e7e8      	b.n	8006270 <_printf_float+0x238>
 800629e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	dc39      	bgt.n	8006318 <_printf_float+0x2e0>
 80062a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006314 <_printf_float+0x2dc>)
 80062a6:	2301      	movs	r3, #1
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f af1d 	beq.w	80060ee <_printf_float+0xb6>
 80062b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062b8:	ea59 0303 	orrs.w	r3, r9, r3
 80062bc:	d102      	bne.n	80062c4 <_printf_float+0x28c>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	07d9      	lsls	r1, r3, #31
 80062c2:	d5d7      	bpl.n	8006274 <_printf_float+0x23c>
 80062c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	f43f af0d 	beq.w	80060ee <_printf_float+0xb6>
 80062d4:	f04f 0a00 	mov.w	sl, #0
 80062d8:	f104 0b1a 	add.w	fp, r4, #26
 80062dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062de:	425b      	negs	r3, r3
 80062e0:	4553      	cmp	r3, sl
 80062e2:	dc01      	bgt.n	80062e8 <_printf_float+0x2b0>
 80062e4:	464b      	mov	r3, r9
 80062e6:	e793      	b.n	8006210 <_printf_float+0x1d8>
 80062e8:	2301      	movs	r3, #1
 80062ea:	465a      	mov	r2, fp
 80062ec:	4631      	mov	r1, r6
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	f43f aefb 	beq.w	80060ee <_printf_float+0xb6>
 80062f8:	f10a 0a01 	add.w	sl, sl, #1
 80062fc:	e7ee      	b.n	80062dc <_printf_float+0x2a4>
 80062fe:	bf00      	nop
 8006300:	7fefffff 	.word	0x7fefffff
 8006304:	0800a840 	.word	0x0800a840
 8006308:	0800a844 	.word	0x0800a844
 800630c:	0800a848 	.word	0x0800a848
 8006310:	0800a84c 	.word	0x0800a84c
 8006314:	0800a850 	.word	0x0800a850
 8006318:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800631a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800631e:	4553      	cmp	r3, sl
 8006320:	bfa8      	it	ge
 8006322:	4653      	movge	r3, sl
 8006324:	2b00      	cmp	r3, #0
 8006326:	4699      	mov	r9, r3
 8006328:	dc36      	bgt.n	8006398 <_printf_float+0x360>
 800632a:	f04f 0b00 	mov.w	fp, #0
 800632e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006332:	f104 021a 	add.w	r2, r4, #26
 8006336:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006338:	9306      	str	r3, [sp, #24]
 800633a:	eba3 0309 	sub.w	r3, r3, r9
 800633e:	455b      	cmp	r3, fp
 8006340:	dc31      	bgt.n	80063a6 <_printf_float+0x36e>
 8006342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006344:	459a      	cmp	sl, r3
 8006346:	dc3a      	bgt.n	80063be <_printf_float+0x386>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	07da      	lsls	r2, r3, #31
 800634c:	d437      	bmi.n	80063be <_printf_float+0x386>
 800634e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006350:	ebaa 0903 	sub.w	r9, sl, r3
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	ebaa 0303 	sub.w	r3, sl, r3
 800635a:	4599      	cmp	r9, r3
 800635c:	bfa8      	it	ge
 800635e:	4699      	movge	r9, r3
 8006360:	f1b9 0f00 	cmp.w	r9, #0
 8006364:	dc33      	bgt.n	80063ce <_printf_float+0x396>
 8006366:	f04f 0800 	mov.w	r8, #0
 800636a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800636e:	f104 0b1a 	add.w	fp, r4, #26
 8006372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006374:	ebaa 0303 	sub.w	r3, sl, r3
 8006378:	eba3 0309 	sub.w	r3, r3, r9
 800637c:	4543      	cmp	r3, r8
 800637e:	f77f af79 	ble.w	8006274 <_printf_float+0x23c>
 8006382:	2301      	movs	r3, #1
 8006384:	465a      	mov	r2, fp
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f aeae 	beq.w	80060ee <_printf_float+0xb6>
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	e7ec      	b.n	8006372 <_printf_float+0x33a>
 8006398:	4642      	mov	r2, r8
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47b8      	blx	r7
 80063a0:	3001      	adds	r0, #1
 80063a2:	d1c2      	bne.n	800632a <_printf_float+0x2f2>
 80063a4:	e6a3      	b.n	80060ee <_printf_float+0xb6>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	9206      	str	r2, [sp, #24]
 80063ae:	47b8      	blx	r7
 80063b0:	3001      	adds	r0, #1
 80063b2:	f43f ae9c 	beq.w	80060ee <_printf_float+0xb6>
 80063b6:	9a06      	ldr	r2, [sp, #24]
 80063b8:	f10b 0b01 	add.w	fp, fp, #1
 80063bc:	e7bb      	b.n	8006336 <_printf_float+0x2fe>
 80063be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	d1c0      	bne.n	800634e <_printf_float+0x316>
 80063cc:	e68f      	b.n	80060ee <_printf_float+0xb6>
 80063ce:	9a06      	ldr	r2, [sp, #24]
 80063d0:	464b      	mov	r3, r9
 80063d2:	4442      	add	r2, r8
 80063d4:	4631      	mov	r1, r6
 80063d6:	4628      	mov	r0, r5
 80063d8:	47b8      	blx	r7
 80063da:	3001      	adds	r0, #1
 80063dc:	d1c3      	bne.n	8006366 <_printf_float+0x32e>
 80063de:	e686      	b.n	80060ee <_printf_float+0xb6>
 80063e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063e4:	f1ba 0f01 	cmp.w	sl, #1
 80063e8:	dc01      	bgt.n	80063ee <_printf_float+0x3b6>
 80063ea:	07db      	lsls	r3, r3, #31
 80063ec:	d536      	bpl.n	800645c <_printf_float+0x424>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4642      	mov	r2, r8
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	f43f ae78 	beq.w	80060ee <_printf_float+0xb6>
 80063fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f ae70 	beq.w	80060ee <_printf_float+0xb6>
 800640e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800641a:	f7fa fb7d 	bl	8000b18 <__aeabi_dcmpeq>
 800641e:	b9c0      	cbnz	r0, 8006452 <_printf_float+0x41a>
 8006420:	4653      	mov	r3, sl
 8006422:	f108 0201 	add.w	r2, r8, #1
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	d10c      	bne.n	800644a <_printf_float+0x412>
 8006430:	e65d      	b.n	80060ee <_printf_float+0xb6>
 8006432:	2301      	movs	r3, #1
 8006434:	465a      	mov	r2, fp
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f ae56 	beq.w	80060ee <_printf_float+0xb6>
 8006442:	f108 0801 	add.w	r8, r8, #1
 8006446:	45d0      	cmp	r8, sl
 8006448:	dbf3      	blt.n	8006432 <_printf_float+0x3fa>
 800644a:	464b      	mov	r3, r9
 800644c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006450:	e6df      	b.n	8006212 <_printf_float+0x1da>
 8006452:	f04f 0800 	mov.w	r8, #0
 8006456:	f104 0b1a 	add.w	fp, r4, #26
 800645a:	e7f4      	b.n	8006446 <_printf_float+0x40e>
 800645c:	2301      	movs	r3, #1
 800645e:	4642      	mov	r2, r8
 8006460:	e7e1      	b.n	8006426 <_printf_float+0x3ee>
 8006462:	2301      	movs	r3, #1
 8006464:	464a      	mov	r2, r9
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f ae3e 	beq.w	80060ee <_printf_float+0xb6>
 8006472:	f108 0801 	add.w	r8, r8, #1
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800647a:	1a5b      	subs	r3, r3, r1
 800647c:	4543      	cmp	r3, r8
 800647e:	dcf0      	bgt.n	8006462 <_printf_float+0x42a>
 8006480:	e6fc      	b.n	800627c <_printf_float+0x244>
 8006482:	f04f 0800 	mov.w	r8, #0
 8006486:	f104 0919 	add.w	r9, r4, #25
 800648a:	e7f4      	b.n	8006476 <_printf_float+0x43e>

0800648c <_printf_common>:
 800648c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006490:	4616      	mov	r6, r2
 8006492:	4698      	mov	r8, r3
 8006494:	688a      	ldr	r2, [r1, #8]
 8006496:	690b      	ldr	r3, [r1, #16]
 8006498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800649c:	4293      	cmp	r3, r2
 800649e:	bfb8      	it	lt
 80064a0:	4613      	movlt	r3, r2
 80064a2:	6033      	str	r3, [r6, #0]
 80064a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064a8:	4607      	mov	r7, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	b10a      	cbz	r2, 80064b2 <_printf_common+0x26>
 80064ae:	3301      	adds	r3, #1
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	0699      	lsls	r1, r3, #26
 80064b6:	bf42      	ittt	mi
 80064b8:	6833      	ldrmi	r3, [r6, #0]
 80064ba:	3302      	addmi	r3, #2
 80064bc:	6033      	strmi	r3, [r6, #0]
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	f015 0506 	ands.w	r5, r5, #6
 80064c4:	d106      	bne.n	80064d4 <_printf_common+0x48>
 80064c6:	f104 0a19 	add.w	sl, r4, #25
 80064ca:	68e3      	ldr	r3, [r4, #12]
 80064cc:	6832      	ldr	r2, [r6, #0]
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	42ab      	cmp	r3, r5
 80064d2:	dc26      	bgt.n	8006522 <_printf_common+0x96>
 80064d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	3b00      	subs	r3, #0
 80064dc:	bf18      	it	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	0692      	lsls	r2, r2, #26
 80064e2:	d42b      	bmi.n	800653c <_printf_common+0xb0>
 80064e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064e8:	4641      	mov	r1, r8
 80064ea:	4638      	mov	r0, r7
 80064ec:	47c8      	blx	r9
 80064ee:	3001      	adds	r0, #1
 80064f0:	d01e      	beq.n	8006530 <_printf_common+0xa4>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	6922      	ldr	r2, [r4, #16]
 80064f6:	f003 0306 	and.w	r3, r3, #6
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	bf02      	ittt	eq
 80064fe:	68e5      	ldreq	r5, [r4, #12]
 8006500:	6833      	ldreq	r3, [r6, #0]
 8006502:	1aed      	subeq	r5, r5, r3
 8006504:	68a3      	ldr	r3, [r4, #8]
 8006506:	bf0c      	ite	eq
 8006508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800650c:	2500      	movne	r5, #0
 800650e:	4293      	cmp	r3, r2
 8006510:	bfc4      	itt	gt
 8006512:	1a9b      	subgt	r3, r3, r2
 8006514:	18ed      	addgt	r5, r5, r3
 8006516:	2600      	movs	r6, #0
 8006518:	341a      	adds	r4, #26
 800651a:	42b5      	cmp	r5, r6
 800651c:	d11a      	bne.n	8006554 <_printf_common+0xc8>
 800651e:	2000      	movs	r0, #0
 8006520:	e008      	b.n	8006534 <_printf_common+0xa8>
 8006522:	2301      	movs	r3, #1
 8006524:	4652      	mov	r2, sl
 8006526:	4641      	mov	r1, r8
 8006528:	4638      	mov	r0, r7
 800652a:	47c8      	blx	r9
 800652c:	3001      	adds	r0, #1
 800652e:	d103      	bne.n	8006538 <_printf_common+0xac>
 8006530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	3501      	adds	r5, #1
 800653a:	e7c6      	b.n	80064ca <_printf_common+0x3e>
 800653c:	18e1      	adds	r1, r4, r3
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	2030      	movs	r0, #48	@ 0x30
 8006542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006546:	4422      	add	r2, r4
 8006548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800654c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006550:	3302      	adds	r3, #2
 8006552:	e7c7      	b.n	80064e4 <_printf_common+0x58>
 8006554:	2301      	movs	r3, #1
 8006556:	4622      	mov	r2, r4
 8006558:	4641      	mov	r1, r8
 800655a:	4638      	mov	r0, r7
 800655c:	47c8      	blx	r9
 800655e:	3001      	adds	r0, #1
 8006560:	d0e6      	beq.n	8006530 <_printf_common+0xa4>
 8006562:	3601      	adds	r6, #1
 8006564:	e7d9      	b.n	800651a <_printf_common+0x8e>
	...

08006568 <_printf_i>:
 8006568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800656c:	7e0f      	ldrb	r7, [r1, #24]
 800656e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006570:	2f78      	cmp	r7, #120	@ 0x78
 8006572:	4691      	mov	r9, r2
 8006574:	4680      	mov	r8, r0
 8006576:	460c      	mov	r4, r1
 8006578:	469a      	mov	sl, r3
 800657a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800657e:	d807      	bhi.n	8006590 <_printf_i+0x28>
 8006580:	2f62      	cmp	r7, #98	@ 0x62
 8006582:	d80a      	bhi.n	800659a <_printf_i+0x32>
 8006584:	2f00      	cmp	r7, #0
 8006586:	f000 80d2 	beq.w	800672e <_printf_i+0x1c6>
 800658a:	2f58      	cmp	r7, #88	@ 0x58
 800658c:	f000 80b9 	beq.w	8006702 <_printf_i+0x19a>
 8006590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006598:	e03a      	b.n	8006610 <_printf_i+0xa8>
 800659a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800659e:	2b15      	cmp	r3, #21
 80065a0:	d8f6      	bhi.n	8006590 <_printf_i+0x28>
 80065a2:	a101      	add	r1, pc, #4	@ (adr r1, 80065a8 <_printf_i+0x40>)
 80065a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065a8:	08006601 	.word	0x08006601
 80065ac:	08006615 	.word	0x08006615
 80065b0:	08006591 	.word	0x08006591
 80065b4:	08006591 	.word	0x08006591
 80065b8:	08006591 	.word	0x08006591
 80065bc:	08006591 	.word	0x08006591
 80065c0:	08006615 	.word	0x08006615
 80065c4:	08006591 	.word	0x08006591
 80065c8:	08006591 	.word	0x08006591
 80065cc:	08006591 	.word	0x08006591
 80065d0:	08006591 	.word	0x08006591
 80065d4:	08006715 	.word	0x08006715
 80065d8:	0800663f 	.word	0x0800663f
 80065dc:	080066cf 	.word	0x080066cf
 80065e0:	08006591 	.word	0x08006591
 80065e4:	08006591 	.word	0x08006591
 80065e8:	08006737 	.word	0x08006737
 80065ec:	08006591 	.word	0x08006591
 80065f0:	0800663f 	.word	0x0800663f
 80065f4:	08006591 	.word	0x08006591
 80065f8:	08006591 	.word	0x08006591
 80065fc:	080066d7 	.word	0x080066d7
 8006600:	6833      	ldr	r3, [r6, #0]
 8006602:	1d1a      	adds	r2, r3, #4
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6032      	str	r2, [r6, #0]
 8006608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800660c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006610:	2301      	movs	r3, #1
 8006612:	e09d      	b.n	8006750 <_printf_i+0x1e8>
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	6820      	ldr	r0, [r4, #0]
 8006618:	1d19      	adds	r1, r3, #4
 800661a:	6031      	str	r1, [r6, #0]
 800661c:	0606      	lsls	r6, r0, #24
 800661e:	d501      	bpl.n	8006624 <_printf_i+0xbc>
 8006620:	681d      	ldr	r5, [r3, #0]
 8006622:	e003      	b.n	800662c <_printf_i+0xc4>
 8006624:	0645      	lsls	r5, r0, #25
 8006626:	d5fb      	bpl.n	8006620 <_printf_i+0xb8>
 8006628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800662c:	2d00      	cmp	r5, #0
 800662e:	da03      	bge.n	8006638 <_printf_i+0xd0>
 8006630:	232d      	movs	r3, #45	@ 0x2d
 8006632:	426d      	negs	r5, r5
 8006634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006638:	4859      	ldr	r0, [pc, #356]	@ (80067a0 <_printf_i+0x238>)
 800663a:	230a      	movs	r3, #10
 800663c:	e011      	b.n	8006662 <_printf_i+0xfa>
 800663e:	6821      	ldr	r1, [r4, #0]
 8006640:	6833      	ldr	r3, [r6, #0]
 8006642:	0608      	lsls	r0, r1, #24
 8006644:	f853 5b04 	ldr.w	r5, [r3], #4
 8006648:	d402      	bmi.n	8006650 <_printf_i+0xe8>
 800664a:	0649      	lsls	r1, r1, #25
 800664c:	bf48      	it	mi
 800664e:	b2ad      	uxthmi	r5, r5
 8006650:	2f6f      	cmp	r7, #111	@ 0x6f
 8006652:	4853      	ldr	r0, [pc, #332]	@ (80067a0 <_printf_i+0x238>)
 8006654:	6033      	str	r3, [r6, #0]
 8006656:	bf14      	ite	ne
 8006658:	230a      	movne	r3, #10
 800665a:	2308      	moveq	r3, #8
 800665c:	2100      	movs	r1, #0
 800665e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006662:	6866      	ldr	r6, [r4, #4]
 8006664:	60a6      	str	r6, [r4, #8]
 8006666:	2e00      	cmp	r6, #0
 8006668:	bfa2      	ittt	ge
 800666a:	6821      	ldrge	r1, [r4, #0]
 800666c:	f021 0104 	bicge.w	r1, r1, #4
 8006670:	6021      	strge	r1, [r4, #0]
 8006672:	b90d      	cbnz	r5, 8006678 <_printf_i+0x110>
 8006674:	2e00      	cmp	r6, #0
 8006676:	d04b      	beq.n	8006710 <_printf_i+0x1a8>
 8006678:	4616      	mov	r6, r2
 800667a:	fbb5 f1f3 	udiv	r1, r5, r3
 800667e:	fb03 5711 	mls	r7, r3, r1, r5
 8006682:	5dc7      	ldrb	r7, [r0, r7]
 8006684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006688:	462f      	mov	r7, r5
 800668a:	42bb      	cmp	r3, r7
 800668c:	460d      	mov	r5, r1
 800668e:	d9f4      	bls.n	800667a <_printf_i+0x112>
 8006690:	2b08      	cmp	r3, #8
 8006692:	d10b      	bne.n	80066ac <_printf_i+0x144>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	07df      	lsls	r7, r3, #31
 8006698:	d508      	bpl.n	80066ac <_printf_i+0x144>
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	6861      	ldr	r1, [r4, #4]
 800669e:	4299      	cmp	r1, r3
 80066a0:	bfde      	ittt	le
 80066a2:	2330      	movle	r3, #48	@ 0x30
 80066a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80066ac:	1b92      	subs	r2, r2, r6
 80066ae:	6122      	str	r2, [r4, #16]
 80066b0:	f8cd a000 	str.w	sl, [sp]
 80066b4:	464b      	mov	r3, r9
 80066b6:	aa03      	add	r2, sp, #12
 80066b8:	4621      	mov	r1, r4
 80066ba:	4640      	mov	r0, r8
 80066bc:	f7ff fee6 	bl	800648c <_printf_common>
 80066c0:	3001      	adds	r0, #1
 80066c2:	d14a      	bne.n	800675a <_printf_i+0x1f2>
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066c8:	b004      	add	sp, #16
 80066ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	f043 0320 	orr.w	r3, r3, #32
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	4833      	ldr	r0, [pc, #204]	@ (80067a4 <_printf_i+0x23c>)
 80066d8:	2778      	movs	r7, #120	@ 0x78
 80066da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	6831      	ldr	r1, [r6, #0]
 80066e2:	061f      	lsls	r7, r3, #24
 80066e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80066e8:	d402      	bmi.n	80066f0 <_printf_i+0x188>
 80066ea:	065f      	lsls	r7, r3, #25
 80066ec:	bf48      	it	mi
 80066ee:	b2ad      	uxthmi	r5, r5
 80066f0:	6031      	str	r1, [r6, #0]
 80066f2:	07d9      	lsls	r1, r3, #31
 80066f4:	bf44      	itt	mi
 80066f6:	f043 0320 	orrmi.w	r3, r3, #32
 80066fa:	6023      	strmi	r3, [r4, #0]
 80066fc:	b11d      	cbz	r5, 8006706 <_printf_i+0x19e>
 80066fe:	2310      	movs	r3, #16
 8006700:	e7ac      	b.n	800665c <_printf_i+0xf4>
 8006702:	4827      	ldr	r0, [pc, #156]	@ (80067a0 <_printf_i+0x238>)
 8006704:	e7e9      	b.n	80066da <_printf_i+0x172>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f023 0320 	bic.w	r3, r3, #32
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	e7f6      	b.n	80066fe <_printf_i+0x196>
 8006710:	4616      	mov	r6, r2
 8006712:	e7bd      	b.n	8006690 <_printf_i+0x128>
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	6825      	ldr	r5, [r4, #0]
 8006718:	6961      	ldr	r1, [r4, #20]
 800671a:	1d18      	adds	r0, r3, #4
 800671c:	6030      	str	r0, [r6, #0]
 800671e:	062e      	lsls	r6, r5, #24
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	d501      	bpl.n	8006728 <_printf_i+0x1c0>
 8006724:	6019      	str	r1, [r3, #0]
 8006726:	e002      	b.n	800672e <_printf_i+0x1c6>
 8006728:	0668      	lsls	r0, r5, #25
 800672a:	d5fb      	bpl.n	8006724 <_printf_i+0x1bc>
 800672c:	8019      	strh	r1, [r3, #0]
 800672e:	2300      	movs	r3, #0
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	4616      	mov	r6, r2
 8006734:	e7bc      	b.n	80066b0 <_printf_i+0x148>
 8006736:	6833      	ldr	r3, [r6, #0]
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	6032      	str	r2, [r6, #0]
 800673c:	681e      	ldr	r6, [r3, #0]
 800673e:	6862      	ldr	r2, [r4, #4]
 8006740:	2100      	movs	r1, #0
 8006742:	4630      	mov	r0, r6
 8006744:	f7f9 fd6c 	bl	8000220 <memchr>
 8006748:	b108      	cbz	r0, 800674e <_printf_i+0x1e6>
 800674a:	1b80      	subs	r0, r0, r6
 800674c:	6060      	str	r0, [r4, #4]
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	2300      	movs	r3, #0
 8006754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006758:	e7aa      	b.n	80066b0 <_printf_i+0x148>
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	4632      	mov	r2, r6
 800675e:	4649      	mov	r1, r9
 8006760:	4640      	mov	r0, r8
 8006762:	47d0      	blx	sl
 8006764:	3001      	adds	r0, #1
 8006766:	d0ad      	beq.n	80066c4 <_printf_i+0x15c>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	079b      	lsls	r3, r3, #30
 800676c:	d413      	bmi.n	8006796 <_printf_i+0x22e>
 800676e:	68e0      	ldr	r0, [r4, #12]
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	4298      	cmp	r0, r3
 8006774:	bfb8      	it	lt
 8006776:	4618      	movlt	r0, r3
 8006778:	e7a6      	b.n	80066c8 <_printf_i+0x160>
 800677a:	2301      	movs	r3, #1
 800677c:	4632      	mov	r2, r6
 800677e:	4649      	mov	r1, r9
 8006780:	4640      	mov	r0, r8
 8006782:	47d0      	blx	sl
 8006784:	3001      	adds	r0, #1
 8006786:	d09d      	beq.n	80066c4 <_printf_i+0x15c>
 8006788:	3501      	adds	r5, #1
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	9903      	ldr	r1, [sp, #12]
 800678e:	1a5b      	subs	r3, r3, r1
 8006790:	42ab      	cmp	r3, r5
 8006792:	dcf2      	bgt.n	800677a <_printf_i+0x212>
 8006794:	e7eb      	b.n	800676e <_printf_i+0x206>
 8006796:	2500      	movs	r5, #0
 8006798:	f104 0619 	add.w	r6, r4, #25
 800679c:	e7f5      	b.n	800678a <_printf_i+0x222>
 800679e:	bf00      	nop
 80067a0:	0800a852 	.word	0x0800a852
 80067a4:	0800a863 	.word	0x0800a863

080067a8 <_scanf_float>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	b087      	sub	sp, #28
 80067ae:	4617      	mov	r7, r2
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	688b      	ldr	r3, [r1, #8]
 80067b4:	1e5a      	subs	r2, r3, #1
 80067b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80067ba:	bf81      	itttt	hi
 80067bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80067c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80067c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80067c8:	608b      	strhi	r3, [r1, #8]
 80067ca:	680b      	ldr	r3, [r1, #0]
 80067cc:	460a      	mov	r2, r1
 80067ce:	f04f 0500 	mov.w	r5, #0
 80067d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80067d6:	f842 3b1c 	str.w	r3, [r2], #28
 80067da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067de:	4680      	mov	r8, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	bf98      	it	ls
 80067e4:	f04f 0b00 	movls.w	fp, #0
 80067e8:	9201      	str	r2, [sp, #4]
 80067ea:	4616      	mov	r6, r2
 80067ec:	46aa      	mov	sl, r5
 80067ee:	46a9      	mov	r9, r5
 80067f0:	9502      	str	r5, [sp, #8]
 80067f2:	68a2      	ldr	r2, [r4, #8]
 80067f4:	b152      	cbz	r2, 800680c <_scanf_float+0x64>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80067fc:	d864      	bhi.n	80068c8 <_scanf_float+0x120>
 80067fe:	2b40      	cmp	r3, #64	@ 0x40
 8006800:	d83c      	bhi.n	800687c <_scanf_float+0xd4>
 8006802:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006806:	b2c8      	uxtb	r0, r1
 8006808:	280e      	cmp	r0, #14
 800680a:	d93a      	bls.n	8006882 <_scanf_float+0xda>
 800680c:	f1b9 0f00 	cmp.w	r9, #0
 8006810:	d003      	beq.n	800681a <_scanf_float+0x72>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800681e:	f1ba 0f01 	cmp.w	sl, #1
 8006822:	f200 8117 	bhi.w	8006a54 <_scanf_float+0x2ac>
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	429e      	cmp	r6, r3
 800682a:	f200 8108 	bhi.w	8006a3e <_scanf_float+0x296>
 800682e:	2001      	movs	r0, #1
 8006830:	b007      	add	sp, #28
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800683a:	2a0d      	cmp	r2, #13
 800683c:	d8e6      	bhi.n	800680c <_scanf_float+0x64>
 800683e:	a101      	add	r1, pc, #4	@ (adr r1, 8006844 <_scanf_float+0x9c>)
 8006840:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006844:	0800698b 	.word	0x0800698b
 8006848:	0800680d 	.word	0x0800680d
 800684c:	0800680d 	.word	0x0800680d
 8006850:	0800680d 	.word	0x0800680d
 8006854:	080069eb 	.word	0x080069eb
 8006858:	080069c3 	.word	0x080069c3
 800685c:	0800680d 	.word	0x0800680d
 8006860:	0800680d 	.word	0x0800680d
 8006864:	08006999 	.word	0x08006999
 8006868:	0800680d 	.word	0x0800680d
 800686c:	0800680d 	.word	0x0800680d
 8006870:	0800680d 	.word	0x0800680d
 8006874:	0800680d 	.word	0x0800680d
 8006878:	08006951 	.word	0x08006951
 800687c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006880:	e7db      	b.n	800683a <_scanf_float+0x92>
 8006882:	290e      	cmp	r1, #14
 8006884:	d8c2      	bhi.n	800680c <_scanf_float+0x64>
 8006886:	a001      	add	r0, pc, #4	@ (adr r0, 800688c <_scanf_float+0xe4>)
 8006888:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800688c:	08006941 	.word	0x08006941
 8006890:	0800680d 	.word	0x0800680d
 8006894:	08006941 	.word	0x08006941
 8006898:	080069d7 	.word	0x080069d7
 800689c:	0800680d 	.word	0x0800680d
 80068a0:	080068e9 	.word	0x080068e9
 80068a4:	08006927 	.word	0x08006927
 80068a8:	08006927 	.word	0x08006927
 80068ac:	08006927 	.word	0x08006927
 80068b0:	08006927 	.word	0x08006927
 80068b4:	08006927 	.word	0x08006927
 80068b8:	08006927 	.word	0x08006927
 80068bc:	08006927 	.word	0x08006927
 80068c0:	08006927 	.word	0x08006927
 80068c4:	08006927 	.word	0x08006927
 80068c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80068ca:	d809      	bhi.n	80068e0 <_scanf_float+0x138>
 80068cc:	2b60      	cmp	r3, #96	@ 0x60
 80068ce:	d8b2      	bhi.n	8006836 <_scanf_float+0x8e>
 80068d0:	2b54      	cmp	r3, #84	@ 0x54
 80068d2:	d07b      	beq.n	80069cc <_scanf_float+0x224>
 80068d4:	2b59      	cmp	r3, #89	@ 0x59
 80068d6:	d199      	bne.n	800680c <_scanf_float+0x64>
 80068d8:	2d07      	cmp	r5, #7
 80068da:	d197      	bne.n	800680c <_scanf_float+0x64>
 80068dc:	2508      	movs	r5, #8
 80068de:	e02c      	b.n	800693a <_scanf_float+0x192>
 80068e0:	2b74      	cmp	r3, #116	@ 0x74
 80068e2:	d073      	beq.n	80069cc <_scanf_float+0x224>
 80068e4:	2b79      	cmp	r3, #121	@ 0x79
 80068e6:	e7f6      	b.n	80068d6 <_scanf_float+0x12e>
 80068e8:	6821      	ldr	r1, [r4, #0]
 80068ea:	05c8      	lsls	r0, r1, #23
 80068ec:	d51b      	bpl.n	8006926 <_scanf_float+0x17e>
 80068ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80068f2:	6021      	str	r1, [r4, #0]
 80068f4:	f109 0901 	add.w	r9, r9, #1
 80068f8:	f1bb 0f00 	cmp.w	fp, #0
 80068fc:	d003      	beq.n	8006906 <_scanf_float+0x15e>
 80068fe:	3201      	adds	r2, #1
 8006900:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006904:	60a2      	str	r2, [r4, #8]
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	3b01      	subs	r3, #1
 800690a:	60a3      	str	r3, [r4, #8]
 800690c:	6923      	ldr	r3, [r4, #16]
 800690e:	3301      	adds	r3, #1
 8006910:	6123      	str	r3, [r4, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3b01      	subs	r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	607b      	str	r3, [r7, #4]
 800691a:	f340 8087 	ble.w	8006a2c <_scanf_float+0x284>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	e765      	b.n	80067f2 <_scanf_float+0x4a>
 8006926:	eb1a 0105 	adds.w	r1, sl, r5
 800692a:	f47f af6f 	bne.w	800680c <_scanf_float+0x64>
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006934:	6022      	str	r2, [r4, #0]
 8006936:	460d      	mov	r5, r1
 8006938:	468a      	mov	sl, r1
 800693a:	f806 3b01 	strb.w	r3, [r6], #1
 800693e:	e7e2      	b.n	8006906 <_scanf_float+0x15e>
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	0610      	lsls	r0, r2, #24
 8006944:	f57f af62 	bpl.w	800680c <_scanf_float+0x64>
 8006948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	e7f4      	b.n	800693a <_scanf_float+0x192>
 8006950:	f1ba 0f00 	cmp.w	sl, #0
 8006954:	d10e      	bne.n	8006974 <_scanf_float+0x1cc>
 8006956:	f1b9 0f00 	cmp.w	r9, #0
 800695a:	d10e      	bne.n	800697a <_scanf_float+0x1d2>
 800695c:	6822      	ldr	r2, [r4, #0]
 800695e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006962:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006966:	d108      	bne.n	800697a <_scanf_float+0x1d2>
 8006968:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800696c:	6022      	str	r2, [r4, #0]
 800696e:	f04f 0a01 	mov.w	sl, #1
 8006972:	e7e2      	b.n	800693a <_scanf_float+0x192>
 8006974:	f1ba 0f02 	cmp.w	sl, #2
 8006978:	d055      	beq.n	8006a26 <_scanf_float+0x27e>
 800697a:	2d01      	cmp	r5, #1
 800697c:	d002      	beq.n	8006984 <_scanf_float+0x1dc>
 800697e:	2d04      	cmp	r5, #4
 8006980:	f47f af44 	bne.w	800680c <_scanf_float+0x64>
 8006984:	3501      	adds	r5, #1
 8006986:	b2ed      	uxtb	r5, r5
 8006988:	e7d7      	b.n	800693a <_scanf_float+0x192>
 800698a:	f1ba 0f01 	cmp.w	sl, #1
 800698e:	f47f af3d 	bne.w	800680c <_scanf_float+0x64>
 8006992:	f04f 0a02 	mov.w	sl, #2
 8006996:	e7d0      	b.n	800693a <_scanf_float+0x192>
 8006998:	b97d      	cbnz	r5, 80069ba <_scanf_float+0x212>
 800699a:	f1b9 0f00 	cmp.w	r9, #0
 800699e:	f47f af38 	bne.w	8006812 <_scanf_float+0x6a>
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069ac:	f040 8108 	bne.w	8006bc0 <_scanf_float+0x418>
 80069b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069b4:	6022      	str	r2, [r4, #0]
 80069b6:	2501      	movs	r5, #1
 80069b8:	e7bf      	b.n	800693a <_scanf_float+0x192>
 80069ba:	2d03      	cmp	r5, #3
 80069bc:	d0e2      	beq.n	8006984 <_scanf_float+0x1dc>
 80069be:	2d05      	cmp	r5, #5
 80069c0:	e7de      	b.n	8006980 <_scanf_float+0x1d8>
 80069c2:	2d02      	cmp	r5, #2
 80069c4:	f47f af22 	bne.w	800680c <_scanf_float+0x64>
 80069c8:	2503      	movs	r5, #3
 80069ca:	e7b6      	b.n	800693a <_scanf_float+0x192>
 80069cc:	2d06      	cmp	r5, #6
 80069ce:	f47f af1d 	bne.w	800680c <_scanf_float+0x64>
 80069d2:	2507      	movs	r5, #7
 80069d4:	e7b1      	b.n	800693a <_scanf_float+0x192>
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	0591      	lsls	r1, r2, #22
 80069da:	f57f af17 	bpl.w	800680c <_scanf_float+0x64>
 80069de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80069e2:	6022      	str	r2, [r4, #0]
 80069e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80069e8:	e7a7      	b.n	800693a <_scanf_float+0x192>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80069f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80069f4:	d006      	beq.n	8006a04 <_scanf_float+0x25c>
 80069f6:	0550      	lsls	r0, r2, #21
 80069f8:	f57f af08 	bpl.w	800680c <_scanf_float+0x64>
 80069fc:	f1b9 0f00 	cmp.w	r9, #0
 8006a00:	f000 80de 	beq.w	8006bc0 <_scanf_float+0x418>
 8006a04:	0591      	lsls	r1, r2, #22
 8006a06:	bf58      	it	pl
 8006a08:	9902      	ldrpl	r1, [sp, #8]
 8006a0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a0e:	bf58      	it	pl
 8006a10:	eba9 0101 	subpl.w	r1, r9, r1
 8006a14:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006a18:	bf58      	it	pl
 8006a1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a1e:	6022      	str	r2, [r4, #0]
 8006a20:	f04f 0900 	mov.w	r9, #0
 8006a24:	e789      	b.n	800693a <_scanf_float+0x192>
 8006a26:	f04f 0a03 	mov.w	sl, #3
 8006a2a:	e786      	b.n	800693a <_scanf_float+0x192>
 8006a2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a30:	4639      	mov	r1, r7
 8006a32:	4640      	mov	r0, r8
 8006a34:	4798      	blx	r3
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f43f aedb 	beq.w	80067f2 <_scanf_float+0x4a>
 8006a3c:	e6e6      	b.n	800680c <_scanf_float+0x64>
 8006a3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a46:	463a      	mov	r2, r7
 8006a48:	4640      	mov	r0, r8
 8006a4a:	4798      	blx	r3
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	6123      	str	r3, [r4, #16]
 8006a52:	e6e8      	b.n	8006826 <_scanf_float+0x7e>
 8006a54:	1e6b      	subs	r3, r5, #1
 8006a56:	2b06      	cmp	r3, #6
 8006a58:	d824      	bhi.n	8006aa4 <_scanf_float+0x2fc>
 8006a5a:	2d02      	cmp	r5, #2
 8006a5c:	d836      	bhi.n	8006acc <_scanf_float+0x324>
 8006a5e:	9b01      	ldr	r3, [sp, #4]
 8006a60:	429e      	cmp	r6, r3
 8006a62:	f67f aee4 	bls.w	800682e <_scanf_float+0x86>
 8006a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a6e:	463a      	mov	r2, r7
 8006a70:	4640      	mov	r0, r8
 8006a72:	4798      	blx	r3
 8006a74:	6923      	ldr	r3, [r4, #16]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	6123      	str	r3, [r4, #16]
 8006a7a:	e7f0      	b.n	8006a5e <_scanf_float+0x2b6>
 8006a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a80:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006a84:	463a      	mov	r2, r7
 8006a86:	4640      	mov	r0, r8
 8006a88:	4798      	blx	r3
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	6123      	str	r3, [r4, #16]
 8006a90:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006a94:	fa5f fa8a 	uxtb.w	sl, sl
 8006a98:	f1ba 0f02 	cmp.w	sl, #2
 8006a9c:	d1ee      	bne.n	8006a7c <_scanf_float+0x2d4>
 8006a9e:	3d03      	subs	r5, #3
 8006aa0:	b2ed      	uxtb	r5, r5
 8006aa2:	1b76      	subs	r6, r6, r5
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	05da      	lsls	r2, r3, #23
 8006aa8:	d530      	bpl.n	8006b0c <_scanf_float+0x364>
 8006aaa:	055b      	lsls	r3, r3, #21
 8006aac:	d511      	bpl.n	8006ad2 <_scanf_float+0x32a>
 8006aae:	9b01      	ldr	r3, [sp, #4]
 8006ab0:	429e      	cmp	r6, r3
 8006ab2:	f67f aebc 	bls.w	800682e <_scanf_float+0x86>
 8006ab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006aba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006abe:	463a      	mov	r2, r7
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	4798      	blx	r3
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	e7f0      	b.n	8006aae <_scanf_float+0x306>
 8006acc:	46aa      	mov	sl, r5
 8006ace:	46b3      	mov	fp, r6
 8006ad0:	e7de      	b.n	8006a90 <_scanf_float+0x2e8>
 8006ad2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	2965      	cmp	r1, #101	@ 0x65
 8006ada:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006ade:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006ae2:	6123      	str	r3, [r4, #16]
 8006ae4:	d00c      	beq.n	8006b00 <_scanf_float+0x358>
 8006ae6:	2945      	cmp	r1, #69	@ 0x45
 8006ae8:	d00a      	beq.n	8006b00 <_scanf_float+0x358>
 8006aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006aee:	463a      	mov	r2, r7
 8006af0:	4640      	mov	r0, r8
 8006af2:	4798      	blx	r3
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	1eb5      	subs	r5, r6, #2
 8006afe:	6123      	str	r3, [r4, #16]
 8006b00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b04:	463a      	mov	r2, r7
 8006b06:	4640      	mov	r0, r8
 8006b08:	4798      	blx	r3
 8006b0a:	462e      	mov	r6, r5
 8006b0c:	6822      	ldr	r2, [r4, #0]
 8006b0e:	f012 0210 	ands.w	r2, r2, #16
 8006b12:	d001      	beq.n	8006b18 <_scanf_float+0x370>
 8006b14:	2000      	movs	r0, #0
 8006b16:	e68b      	b.n	8006830 <_scanf_float+0x88>
 8006b18:	7032      	strb	r2, [r6, #0]
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b24:	d11c      	bne.n	8006b60 <_scanf_float+0x3b8>
 8006b26:	9b02      	ldr	r3, [sp, #8]
 8006b28:	454b      	cmp	r3, r9
 8006b2a:	eba3 0209 	sub.w	r2, r3, r9
 8006b2e:	d123      	bne.n	8006b78 <_scanf_float+0x3d0>
 8006b30:	9901      	ldr	r1, [sp, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	4640      	mov	r0, r8
 8006b36:	f000 ff13 	bl	8007960 <_strtod_r>
 8006b3a:	9b03      	ldr	r3, [sp, #12]
 8006b3c:	6821      	ldr	r1, [r4, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f011 0f02 	tst.w	r1, #2
 8006b44:	ec57 6b10 	vmov	r6, r7, d0
 8006b48:	f103 0204 	add.w	r2, r3, #4
 8006b4c:	d01f      	beq.n	8006b8e <_scanf_float+0x3e6>
 8006b4e:	9903      	ldr	r1, [sp, #12]
 8006b50:	600a      	str	r2, [r1, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	e9c3 6700 	strd	r6, r7, [r3]
 8006b58:	68e3      	ldr	r3, [r4, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60e3      	str	r3, [r4, #12]
 8006b5e:	e7d9      	b.n	8006b14 <_scanf_float+0x36c>
 8006b60:	9b04      	ldr	r3, [sp, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0e4      	beq.n	8006b30 <_scanf_float+0x388>
 8006b66:	9905      	ldr	r1, [sp, #20]
 8006b68:	230a      	movs	r3, #10
 8006b6a:	3101      	adds	r1, #1
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	f000 ff77 	bl	8007a60 <_strtol_r>
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	9e05      	ldr	r6, [sp, #20]
 8006b76:	1ac2      	subs	r2, r0, r3
 8006b78:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006b7c:	429e      	cmp	r6, r3
 8006b7e:	bf28      	it	cs
 8006b80:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006b84:	4910      	ldr	r1, [pc, #64]	@ (8006bc8 <_scanf_float+0x420>)
 8006b86:	4630      	mov	r0, r6
 8006b88:	f000 f822 	bl	8006bd0 <siprintf>
 8006b8c:	e7d0      	b.n	8006b30 <_scanf_float+0x388>
 8006b8e:	f011 0f04 	tst.w	r1, #4
 8006b92:	9903      	ldr	r1, [sp, #12]
 8006b94:	600a      	str	r2, [r1, #0]
 8006b96:	d1dc      	bne.n	8006b52 <_scanf_float+0x3aa>
 8006b98:	681d      	ldr	r5, [r3, #0]
 8006b9a:	4632      	mov	r2, r6
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	f7f9 ffeb 	bl	8000b7c <__aeabi_dcmpun>
 8006ba6:	b128      	cbz	r0, 8006bb4 <_scanf_float+0x40c>
 8006ba8:	4808      	ldr	r0, [pc, #32]	@ (8006bcc <_scanf_float+0x424>)
 8006baa:	f001 f861 	bl	8007c70 <nanf>
 8006bae:	ed85 0a00 	vstr	s0, [r5]
 8006bb2:	e7d1      	b.n	8006b58 <_scanf_float+0x3b0>
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7fa f83e 	bl	8000c38 <__aeabi_d2f>
 8006bbc:	6028      	str	r0, [r5, #0]
 8006bbe:	e7cb      	b.n	8006b58 <_scanf_float+0x3b0>
 8006bc0:	f04f 0900 	mov.w	r9, #0
 8006bc4:	e629      	b.n	800681a <_scanf_float+0x72>
 8006bc6:	bf00      	nop
 8006bc8:	0800a874 	.word	0x0800a874
 8006bcc:	0800ac6b 	.word	0x0800ac6b

08006bd0 <siprintf>:
 8006bd0:	b40e      	push	{r1, r2, r3}
 8006bd2:	b500      	push	{lr}
 8006bd4:	b09c      	sub	sp, #112	@ 0x70
 8006bd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8006bd8:	9002      	str	r0, [sp, #8]
 8006bda:	9006      	str	r0, [sp, #24]
 8006bdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006be0:	4809      	ldr	r0, [pc, #36]	@ (8006c08 <siprintf+0x38>)
 8006be2:	9107      	str	r1, [sp, #28]
 8006be4:	9104      	str	r1, [sp, #16]
 8006be6:	4909      	ldr	r1, [pc, #36]	@ (8006c0c <siprintf+0x3c>)
 8006be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bec:	9105      	str	r1, [sp, #20]
 8006bee:	6800      	ldr	r0, [r0, #0]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	a902      	add	r1, sp, #8
 8006bf4:	f002 fa24 	bl	8009040 <_svfiprintf_r>
 8006bf8:	9b02      	ldr	r3, [sp, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	b01c      	add	sp, #112	@ 0x70
 8006c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c04:	b003      	add	sp, #12
 8006c06:	4770      	bx	lr
 8006c08:	20000184 	.word	0x20000184
 8006c0c:	ffff0208 	.word	0xffff0208

08006c10 <std>:
 8006c10:	2300      	movs	r3, #0
 8006c12:	b510      	push	{r4, lr}
 8006c14:	4604      	mov	r4, r0
 8006c16:	e9c0 3300 	strd	r3, r3, [r0]
 8006c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c1e:	6083      	str	r3, [r0, #8]
 8006c20:	8181      	strh	r1, [r0, #12]
 8006c22:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c24:	81c2      	strh	r2, [r0, #14]
 8006c26:	6183      	str	r3, [r0, #24]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	305c      	adds	r0, #92	@ 0x5c
 8006c2e:	f000 ffcf 	bl	8007bd0 <memset>
 8006c32:	4b0d      	ldr	r3, [pc, #52]	@ (8006c68 <std+0x58>)
 8006c34:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c36:	4b0d      	ldr	r3, [pc, #52]	@ (8006c6c <std+0x5c>)
 8006c38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <std+0x60>)
 8006c3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c74 <std+0x64>)
 8006c40:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c42:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <std+0x68>)
 8006c44:	6224      	str	r4, [r4, #32]
 8006c46:	429c      	cmp	r4, r3
 8006c48:	d006      	beq.n	8006c58 <std+0x48>
 8006c4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c4e:	4294      	cmp	r4, r2
 8006c50:	d002      	beq.n	8006c58 <std+0x48>
 8006c52:	33d0      	adds	r3, #208	@ 0xd0
 8006c54:	429c      	cmp	r4, r3
 8006c56:	d105      	bne.n	8006c64 <std+0x54>
 8006c58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c60:	f000 bfec 	b.w	8007c3c <__retarget_lock_init_recursive>
 8006c64:	bd10      	pop	{r4, pc}
 8006c66:	bf00      	nop
 8006c68:	0800a109 	.word	0x0800a109
 8006c6c:	0800a12b 	.word	0x0800a12b
 8006c70:	0800a163 	.word	0x0800a163
 8006c74:	0800a187 	.word	0x0800a187
 8006c78:	20000b98 	.word	0x20000b98

08006c7c <stdio_exit_handler>:
 8006c7c:	4a02      	ldr	r2, [pc, #8]	@ (8006c88 <stdio_exit_handler+0xc>)
 8006c7e:	4903      	ldr	r1, [pc, #12]	@ (8006c8c <stdio_exit_handler+0x10>)
 8006c80:	4803      	ldr	r0, [pc, #12]	@ (8006c90 <stdio_exit_handler+0x14>)
 8006c82:	f000 beef 	b.w	8007a64 <_fwalk_sglue>
 8006c86:	bf00      	nop
 8006c88:	2000000c 	.word	0x2000000c
 8006c8c:	0800973d 	.word	0x0800973d
 8006c90:	20000188 	.word	0x20000188

08006c94 <cleanup_stdio>:
 8006c94:	6841      	ldr	r1, [r0, #4]
 8006c96:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc8 <cleanup_stdio+0x34>)
 8006c98:	4299      	cmp	r1, r3
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	d001      	beq.n	8006ca4 <cleanup_stdio+0x10>
 8006ca0:	f002 fd4c 	bl	800973c <_fflush_r>
 8006ca4:	68a1      	ldr	r1, [r4, #8]
 8006ca6:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <cleanup_stdio+0x38>)
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	d002      	beq.n	8006cb2 <cleanup_stdio+0x1e>
 8006cac:	4620      	mov	r0, r4
 8006cae:	f002 fd45 	bl	800973c <_fflush_r>
 8006cb2:	68e1      	ldr	r1, [r4, #12]
 8006cb4:	4b06      	ldr	r3, [pc, #24]	@ (8006cd0 <cleanup_stdio+0x3c>)
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	d004      	beq.n	8006cc4 <cleanup_stdio+0x30>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc0:	f002 bd3c 	b.w	800973c <_fflush_r>
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000b98 	.word	0x20000b98
 8006ccc:	20000c00 	.word	0x20000c00
 8006cd0:	20000c68 	.word	0x20000c68

08006cd4 <global_stdio_init.part.0>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <global_stdio_init.part.0+0x30>)
 8006cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8006d08 <global_stdio_init.part.0+0x34>)
 8006cda:	4a0c      	ldr	r2, [pc, #48]	@ (8006d0c <global_stdio_init.part.0+0x38>)
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	4620      	mov	r0, r4
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	f7ff ff94 	bl	8006c10 <std>
 8006ce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cec:	2201      	movs	r2, #1
 8006cee:	2109      	movs	r1, #9
 8006cf0:	f7ff ff8e 	bl	8006c10 <std>
 8006cf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfe:	2112      	movs	r1, #18
 8006d00:	f7ff bf86 	b.w	8006c10 <std>
 8006d04:	20000cd0 	.word	0x20000cd0
 8006d08:	20000b98 	.word	0x20000b98
 8006d0c:	08006c7d 	.word	0x08006c7d

08006d10 <__sfp_lock_acquire>:
 8006d10:	4801      	ldr	r0, [pc, #4]	@ (8006d18 <__sfp_lock_acquire+0x8>)
 8006d12:	f000 bf94 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 8006d16:	bf00      	nop
 8006d18:	20000cd5 	.word	0x20000cd5

08006d1c <__sfp_lock_release>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	@ (8006d24 <__sfp_lock_release+0x8>)
 8006d1e:	f000 bf8f 	b.w	8007c40 <__retarget_lock_release_recursive>
 8006d22:	bf00      	nop
 8006d24:	20000cd5 	.word	0x20000cd5

08006d28 <__sinit>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	f7ff fff0 	bl	8006d10 <__sfp_lock_acquire>
 8006d30:	6a23      	ldr	r3, [r4, #32]
 8006d32:	b11b      	cbz	r3, 8006d3c <__sinit+0x14>
 8006d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d38:	f7ff bff0 	b.w	8006d1c <__sfp_lock_release>
 8006d3c:	4b04      	ldr	r3, [pc, #16]	@ (8006d50 <__sinit+0x28>)
 8006d3e:	6223      	str	r3, [r4, #32]
 8006d40:	4b04      	ldr	r3, [pc, #16]	@ (8006d54 <__sinit+0x2c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f5      	bne.n	8006d34 <__sinit+0xc>
 8006d48:	f7ff ffc4 	bl	8006cd4 <global_stdio_init.part.0>
 8006d4c:	e7f2      	b.n	8006d34 <__sinit+0xc>
 8006d4e:	bf00      	nop
 8006d50:	08006c95 	.word	0x08006c95
 8006d54:	20000cd0 	.word	0x20000cd0

08006d58 <sulp>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	ec45 4b10 	vmov	d0, r4, r5
 8006d62:	4616      	mov	r6, r2
 8006d64:	f003 f892 	bl	8009e8c <__ulp>
 8006d68:	ec51 0b10 	vmov	r0, r1, d0
 8006d6c:	b17e      	cbz	r6, 8006d8e <sulp+0x36>
 8006d6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dd09      	ble.n	8006d8e <sulp+0x36>
 8006d7a:	051b      	lsls	r3, r3, #20
 8006d7c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006d80:	2400      	movs	r4, #0
 8006d82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006d86:	4622      	mov	r2, r4
 8006d88:	462b      	mov	r3, r5
 8006d8a:	f7f9 fc5d 	bl	8000648 <__aeabi_dmul>
 8006d8e:	ec41 0b10 	vmov	d0, r0, r1
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	0000      	movs	r0, r0
	...

08006d98 <_strtod_l>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	b09f      	sub	sp, #124	@ 0x7c
 8006d9e:	460c      	mov	r4, r1
 8006da0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006da2:	2200      	movs	r2, #0
 8006da4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006da6:	9005      	str	r0, [sp, #20]
 8006da8:	f04f 0a00 	mov.w	sl, #0
 8006dac:	f04f 0b00 	mov.w	fp, #0
 8006db0:	460a      	mov	r2, r1
 8006db2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006db4:	7811      	ldrb	r1, [r2, #0]
 8006db6:	292b      	cmp	r1, #43	@ 0x2b
 8006db8:	d04a      	beq.n	8006e50 <_strtod_l+0xb8>
 8006dba:	d838      	bhi.n	8006e2e <_strtod_l+0x96>
 8006dbc:	290d      	cmp	r1, #13
 8006dbe:	d832      	bhi.n	8006e26 <_strtod_l+0x8e>
 8006dc0:	2908      	cmp	r1, #8
 8006dc2:	d832      	bhi.n	8006e2a <_strtod_l+0x92>
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	d03b      	beq.n	8006e40 <_strtod_l+0xa8>
 8006dc8:	2200      	movs	r2, #0
 8006dca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006dcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006dce:	782a      	ldrb	r2, [r5, #0]
 8006dd0:	2a30      	cmp	r2, #48	@ 0x30
 8006dd2:	f040 80b3 	bne.w	8006f3c <_strtod_l+0x1a4>
 8006dd6:	786a      	ldrb	r2, [r5, #1]
 8006dd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ddc:	2a58      	cmp	r2, #88	@ 0x58
 8006dde:	d16e      	bne.n	8006ebe <_strtod_l+0x126>
 8006de0:	9302      	str	r3, [sp, #8]
 8006de2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	ab1a      	add	r3, sp, #104	@ 0x68
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	4a8e      	ldr	r2, [pc, #568]	@ (8007024 <_strtod_l+0x28c>)
 8006dec:	9805      	ldr	r0, [sp, #20]
 8006dee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006df0:	a919      	add	r1, sp, #100	@ 0x64
 8006df2:	f001 fdf9 	bl	80089e8 <__gethex>
 8006df6:	f010 060f 	ands.w	r6, r0, #15
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	d005      	beq.n	8006e0a <_strtod_l+0x72>
 8006dfe:	2e06      	cmp	r6, #6
 8006e00:	d128      	bne.n	8006e54 <_strtod_l+0xbc>
 8006e02:	3501      	adds	r5, #1
 8006e04:	2300      	movs	r3, #0
 8006e06:	9519      	str	r5, [sp, #100]	@ 0x64
 8006e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f040 858e 	bne.w	800792e <_strtod_l+0xb96>
 8006e12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e14:	b1cb      	cbz	r3, 8006e4a <_strtod_l+0xb2>
 8006e16:	4652      	mov	r2, sl
 8006e18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006e1c:	ec43 2b10 	vmov	d0, r2, r3
 8006e20:	b01f      	add	sp, #124	@ 0x7c
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	2920      	cmp	r1, #32
 8006e28:	d1ce      	bne.n	8006dc8 <_strtod_l+0x30>
 8006e2a:	3201      	adds	r2, #1
 8006e2c:	e7c1      	b.n	8006db2 <_strtod_l+0x1a>
 8006e2e:	292d      	cmp	r1, #45	@ 0x2d
 8006e30:	d1ca      	bne.n	8006dc8 <_strtod_l+0x30>
 8006e32:	2101      	movs	r1, #1
 8006e34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e36:	1c51      	adds	r1, r2, #1
 8006e38:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e3a:	7852      	ldrb	r2, [r2, #1]
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	d1c5      	bne.n	8006dcc <_strtod_l+0x34>
 8006e40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e42:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 8570 	bne.w	800792a <_strtod_l+0xb92>
 8006e4a:	4652      	mov	r2, sl
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	e7e5      	b.n	8006e1c <_strtod_l+0x84>
 8006e50:	2100      	movs	r1, #0
 8006e52:	e7ef      	b.n	8006e34 <_strtod_l+0x9c>
 8006e54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e56:	b13a      	cbz	r2, 8006e68 <_strtod_l+0xd0>
 8006e58:	2135      	movs	r1, #53	@ 0x35
 8006e5a:	a81c      	add	r0, sp, #112	@ 0x70
 8006e5c:	f003 f910 	bl	800a080 <__copybits>
 8006e60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e62:	9805      	ldr	r0, [sp, #20]
 8006e64:	f002 fcde 	bl	8009824 <_Bfree>
 8006e68:	3e01      	subs	r6, #1
 8006e6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e6c:	2e04      	cmp	r6, #4
 8006e6e:	d806      	bhi.n	8006e7e <_strtod_l+0xe6>
 8006e70:	e8df f006 	tbb	[pc, r6]
 8006e74:	201d0314 	.word	0x201d0314
 8006e78:	14          	.byte	0x14
 8006e79:	00          	.byte	0x00
 8006e7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006e7e:	05e1      	lsls	r1, r4, #23
 8006e80:	bf48      	it	mi
 8006e82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006e86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e8a:	0d1b      	lsrs	r3, r3, #20
 8006e8c:	051b      	lsls	r3, r3, #20
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1bb      	bne.n	8006e0a <_strtod_l+0x72>
 8006e92:	f000 fea9 	bl	8007be8 <__errno>
 8006e96:	2322      	movs	r3, #34	@ 0x22
 8006e98:	6003      	str	r3, [r0, #0]
 8006e9a:	e7b6      	b.n	8006e0a <_strtod_l+0x72>
 8006e9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006ea0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006ea4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ea8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006eac:	e7e7      	b.n	8006e7e <_strtod_l+0xe6>
 8006eae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800702c <_strtod_l+0x294>
 8006eb2:	e7e4      	b.n	8006e7e <_strtod_l+0xe6>
 8006eb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006eb8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006ebc:	e7df      	b.n	8006e7e <_strtod_l+0xe6>
 8006ebe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ec4:	785b      	ldrb	r3, [r3, #1]
 8006ec6:	2b30      	cmp	r3, #48	@ 0x30
 8006ec8:	d0f9      	beq.n	8006ebe <_strtod_l+0x126>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d09d      	beq.n	8006e0a <_strtod_l+0x72>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ed2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ed4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9308      	str	r3, [sp, #32]
 8006eda:	930a      	str	r3, [sp, #40]	@ 0x28
 8006edc:	461f      	mov	r7, r3
 8006ede:	220a      	movs	r2, #10
 8006ee0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006ee2:	7805      	ldrb	r5, [r0, #0]
 8006ee4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006ee8:	b2d9      	uxtb	r1, r3
 8006eea:	2909      	cmp	r1, #9
 8006eec:	d928      	bls.n	8006f40 <_strtod_l+0x1a8>
 8006eee:	494e      	ldr	r1, [pc, #312]	@ (8007028 <_strtod_l+0x290>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f000 fe45 	bl	8007b80 <strncmp>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d032      	beq.n	8006f60 <_strtod_l+0x1c8>
 8006efa:	2000      	movs	r0, #0
 8006efc:	462a      	mov	r2, r5
 8006efe:	4681      	mov	r9, r0
 8006f00:	463d      	mov	r5, r7
 8006f02:	4603      	mov	r3, r0
 8006f04:	2a65      	cmp	r2, #101	@ 0x65
 8006f06:	d001      	beq.n	8006f0c <_strtod_l+0x174>
 8006f08:	2a45      	cmp	r2, #69	@ 0x45
 8006f0a:	d114      	bne.n	8006f36 <_strtod_l+0x19e>
 8006f0c:	b91d      	cbnz	r5, 8006f16 <_strtod_l+0x17e>
 8006f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f10:	4302      	orrs	r2, r0
 8006f12:	d095      	beq.n	8006e40 <_strtod_l+0xa8>
 8006f14:	2500      	movs	r5, #0
 8006f16:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006f18:	1c62      	adds	r2, r4, #1
 8006f1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f1c:	7862      	ldrb	r2, [r4, #1]
 8006f1e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006f20:	d077      	beq.n	8007012 <_strtod_l+0x27a>
 8006f22:	2a2d      	cmp	r2, #45	@ 0x2d
 8006f24:	d07b      	beq.n	800701e <_strtod_l+0x286>
 8006f26:	f04f 0c00 	mov.w	ip, #0
 8006f2a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006f2e:	2909      	cmp	r1, #9
 8006f30:	f240 8082 	bls.w	8007038 <_strtod_l+0x2a0>
 8006f34:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	e0a2      	b.n	8007082 <_strtod_l+0x2ea>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e7c7      	b.n	8006ed0 <_strtod_l+0x138>
 8006f40:	2f08      	cmp	r7, #8
 8006f42:	bfd5      	itete	le
 8006f44:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006f46:	9908      	ldrgt	r1, [sp, #32]
 8006f48:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f50:	f100 0001 	add.w	r0, r0, #1
 8006f54:	bfd4      	ite	le
 8006f56:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006f58:	9308      	strgt	r3, [sp, #32]
 8006f5a:	3701      	adds	r7, #1
 8006f5c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f5e:	e7bf      	b.n	8006ee0 <_strtod_l+0x148>
 8006f60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f66:	785a      	ldrb	r2, [r3, #1]
 8006f68:	b37f      	cbz	r7, 8006fca <_strtod_l+0x232>
 8006f6a:	4681      	mov	r9, r0
 8006f6c:	463d      	mov	r5, r7
 8006f6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006f72:	2b09      	cmp	r3, #9
 8006f74:	d912      	bls.n	8006f9c <_strtod_l+0x204>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e7c4      	b.n	8006f04 <_strtod_l+0x16c>
 8006f7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f80:	785a      	ldrb	r2, [r3, #1]
 8006f82:	3001      	adds	r0, #1
 8006f84:	2a30      	cmp	r2, #48	@ 0x30
 8006f86:	d0f8      	beq.n	8006f7a <_strtod_l+0x1e2>
 8006f88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	f200 84d3 	bhi.w	8007938 <_strtod_l+0xba0>
 8006f92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f94:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f96:	4681      	mov	r9, r0
 8006f98:	2000      	movs	r0, #0
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	3a30      	subs	r2, #48	@ 0x30
 8006f9e:	f100 0301 	add.w	r3, r0, #1
 8006fa2:	d02a      	beq.n	8006ffa <_strtod_l+0x262>
 8006fa4:	4499      	add	r9, r3
 8006fa6:	eb00 0c05 	add.w	ip, r0, r5
 8006faa:	462b      	mov	r3, r5
 8006fac:	210a      	movs	r1, #10
 8006fae:	4563      	cmp	r3, ip
 8006fb0:	d10d      	bne.n	8006fce <_strtod_l+0x236>
 8006fb2:	1c69      	adds	r1, r5, #1
 8006fb4:	4401      	add	r1, r0
 8006fb6:	4428      	add	r0, r5
 8006fb8:	2808      	cmp	r0, #8
 8006fba:	dc16      	bgt.n	8006fea <_strtod_l+0x252>
 8006fbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fbe:	230a      	movs	r3, #10
 8006fc0:	fb03 2300 	mla	r3, r3, r0, r2
 8006fc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e018      	b.n	8006ffc <_strtod_l+0x264>
 8006fca:	4638      	mov	r0, r7
 8006fcc:	e7da      	b.n	8006f84 <_strtod_l+0x1ec>
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	f103 0301 	add.w	r3, r3, #1
 8006fd4:	dc03      	bgt.n	8006fde <_strtod_l+0x246>
 8006fd6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006fd8:	434e      	muls	r6, r1
 8006fda:	960a      	str	r6, [sp, #40]	@ 0x28
 8006fdc:	e7e7      	b.n	8006fae <_strtod_l+0x216>
 8006fde:	2b10      	cmp	r3, #16
 8006fe0:	bfde      	ittt	le
 8006fe2:	9e08      	ldrle	r6, [sp, #32]
 8006fe4:	434e      	mulle	r6, r1
 8006fe6:	9608      	strle	r6, [sp, #32]
 8006fe8:	e7e1      	b.n	8006fae <_strtod_l+0x216>
 8006fea:	280f      	cmp	r0, #15
 8006fec:	dceb      	bgt.n	8006fc6 <_strtod_l+0x22e>
 8006fee:	9808      	ldr	r0, [sp, #32]
 8006ff0:	230a      	movs	r3, #10
 8006ff2:	fb03 2300 	mla	r3, r3, r0, r2
 8006ff6:	9308      	str	r3, [sp, #32]
 8006ff8:	e7e5      	b.n	8006fc6 <_strtod_l+0x22e>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ffe:	1c50      	adds	r0, r2, #1
 8007000:	9019      	str	r0, [sp, #100]	@ 0x64
 8007002:	7852      	ldrb	r2, [r2, #1]
 8007004:	4618      	mov	r0, r3
 8007006:	460d      	mov	r5, r1
 8007008:	e7b1      	b.n	8006f6e <_strtod_l+0x1d6>
 800700a:	f04f 0900 	mov.w	r9, #0
 800700e:	2301      	movs	r3, #1
 8007010:	e77d      	b.n	8006f0e <_strtod_l+0x176>
 8007012:	f04f 0c00 	mov.w	ip, #0
 8007016:	1ca2      	adds	r2, r4, #2
 8007018:	9219      	str	r2, [sp, #100]	@ 0x64
 800701a:	78a2      	ldrb	r2, [r4, #2]
 800701c:	e785      	b.n	8006f2a <_strtod_l+0x192>
 800701e:	f04f 0c01 	mov.w	ip, #1
 8007022:	e7f8      	b.n	8007016 <_strtod_l+0x27e>
 8007024:	0800a890 	.word	0x0800a890
 8007028:	0800a879 	.word	0x0800a879
 800702c:	7ff00000 	.word	0x7ff00000
 8007030:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007032:	1c51      	adds	r1, r2, #1
 8007034:	9119      	str	r1, [sp, #100]	@ 0x64
 8007036:	7852      	ldrb	r2, [r2, #1]
 8007038:	2a30      	cmp	r2, #48	@ 0x30
 800703a:	d0f9      	beq.n	8007030 <_strtod_l+0x298>
 800703c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007040:	2908      	cmp	r1, #8
 8007042:	f63f af78 	bhi.w	8006f36 <_strtod_l+0x19e>
 8007046:	3a30      	subs	r2, #48	@ 0x30
 8007048:	920e      	str	r2, [sp, #56]	@ 0x38
 800704a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800704c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800704e:	f04f 080a 	mov.w	r8, #10
 8007052:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007054:	1c56      	adds	r6, r2, #1
 8007056:	9619      	str	r6, [sp, #100]	@ 0x64
 8007058:	7852      	ldrb	r2, [r2, #1]
 800705a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800705e:	f1be 0f09 	cmp.w	lr, #9
 8007062:	d939      	bls.n	80070d8 <_strtod_l+0x340>
 8007064:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007066:	1a76      	subs	r6, r6, r1
 8007068:	2e08      	cmp	r6, #8
 800706a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800706e:	dc03      	bgt.n	8007078 <_strtod_l+0x2e0>
 8007070:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007072:	4588      	cmp	r8, r1
 8007074:	bfa8      	it	ge
 8007076:	4688      	movge	r8, r1
 8007078:	f1bc 0f00 	cmp.w	ip, #0
 800707c:	d001      	beq.n	8007082 <_strtod_l+0x2ea>
 800707e:	f1c8 0800 	rsb	r8, r8, #0
 8007082:	2d00      	cmp	r5, #0
 8007084:	d14e      	bne.n	8007124 <_strtod_l+0x38c>
 8007086:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007088:	4308      	orrs	r0, r1
 800708a:	f47f aebe 	bne.w	8006e0a <_strtod_l+0x72>
 800708e:	2b00      	cmp	r3, #0
 8007090:	f47f aed6 	bne.w	8006e40 <_strtod_l+0xa8>
 8007094:	2a69      	cmp	r2, #105	@ 0x69
 8007096:	d028      	beq.n	80070ea <_strtod_l+0x352>
 8007098:	dc25      	bgt.n	80070e6 <_strtod_l+0x34e>
 800709a:	2a49      	cmp	r2, #73	@ 0x49
 800709c:	d025      	beq.n	80070ea <_strtod_l+0x352>
 800709e:	2a4e      	cmp	r2, #78	@ 0x4e
 80070a0:	f47f aece 	bne.w	8006e40 <_strtod_l+0xa8>
 80070a4:	499b      	ldr	r1, [pc, #620]	@ (8007314 <_strtod_l+0x57c>)
 80070a6:	a819      	add	r0, sp, #100	@ 0x64
 80070a8:	f001 fec0 	bl	8008e2c <__match>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f43f aec7 	beq.w	8006e40 <_strtod_l+0xa8>
 80070b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b28      	cmp	r3, #40	@ 0x28
 80070b8:	d12e      	bne.n	8007118 <_strtod_l+0x380>
 80070ba:	4997      	ldr	r1, [pc, #604]	@ (8007318 <_strtod_l+0x580>)
 80070bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80070be:	a819      	add	r0, sp, #100	@ 0x64
 80070c0:	f001 fec8 	bl	8008e54 <__hexnan>
 80070c4:	2805      	cmp	r0, #5
 80070c6:	d127      	bne.n	8007118 <_strtod_l+0x380>
 80070c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80070ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80070ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80070d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80070d6:	e698      	b.n	8006e0a <_strtod_l+0x72>
 80070d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80070da:	fb08 2101 	mla	r1, r8, r1, r2
 80070de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80070e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80070e4:	e7b5      	b.n	8007052 <_strtod_l+0x2ba>
 80070e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80070e8:	e7da      	b.n	80070a0 <_strtod_l+0x308>
 80070ea:	498c      	ldr	r1, [pc, #560]	@ (800731c <_strtod_l+0x584>)
 80070ec:	a819      	add	r0, sp, #100	@ 0x64
 80070ee:	f001 fe9d 	bl	8008e2c <__match>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	f43f aea4 	beq.w	8006e40 <_strtod_l+0xa8>
 80070f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070fa:	4989      	ldr	r1, [pc, #548]	@ (8007320 <_strtod_l+0x588>)
 80070fc:	3b01      	subs	r3, #1
 80070fe:	a819      	add	r0, sp, #100	@ 0x64
 8007100:	9319      	str	r3, [sp, #100]	@ 0x64
 8007102:	f001 fe93 	bl	8008e2c <__match>
 8007106:	b910      	cbnz	r0, 800710e <_strtod_l+0x376>
 8007108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800710a:	3301      	adds	r3, #1
 800710c:	9319      	str	r3, [sp, #100]	@ 0x64
 800710e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007330 <_strtod_l+0x598>
 8007112:	f04f 0a00 	mov.w	sl, #0
 8007116:	e678      	b.n	8006e0a <_strtod_l+0x72>
 8007118:	4882      	ldr	r0, [pc, #520]	@ (8007324 <_strtod_l+0x58c>)
 800711a:	f000 fda1 	bl	8007c60 <nan>
 800711e:	ec5b ab10 	vmov	sl, fp, d0
 8007122:	e672      	b.n	8006e0a <_strtod_l+0x72>
 8007124:	eba8 0309 	sub.w	r3, r8, r9
 8007128:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800712a:	9309      	str	r3, [sp, #36]	@ 0x24
 800712c:	2f00      	cmp	r7, #0
 800712e:	bf08      	it	eq
 8007130:	462f      	moveq	r7, r5
 8007132:	2d10      	cmp	r5, #16
 8007134:	462c      	mov	r4, r5
 8007136:	bfa8      	it	ge
 8007138:	2410      	movge	r4, #16
 800713a:	f7f9 fa0b 	bl	8000554 <__aeabi_ui2d>
 800713e:	2d09      	cmp	r5, #9
 8007140:	4682      	mov	sl, r0
 8007142:	468b      	mov	fp, r1
 8007144:	dc13      	bgt.n	800716e <_strtod_l+0x3d6>
 8007146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	f43f ae5e 	beq.w	8006e0a <_strtod_l+0x72>
 800714e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007150:	dd78      	ble.n	8007244 <_strtod_l+0x4ac>
 8007152:	2b16      	cmp	r3, #22
 8007154:	dc5f      	bgt.n	8007216 <_strtod_l+0x47e>
 8007156:	4974      	ldr	r1, [pc, #464]	@ (8007328 <_strtod_l+0x590>)
 8007158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800715c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007160:	4652      	mov	r2, sl
 8007162:	465b      	mov	r3, fp
 8007164:	f7f9 fa70 	bl	8000648 <__aeabi_dmul>
 8007168:	4682      	mov	sl, r0
 800716a:	468b      	mov	fp, r1
 800716c:	e64d      	b.n	8006e0a <_strtod_l+0x72>
 800716e:	4b6e      	ldr	r3, [pc, #440]	@ (8007328 <_strtod_l+0x590>)
 8007170:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007174:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007178:	f7f9 fa66 	bl	8000648 <__aeabi_dmul>
 800717c:	4682      	mov	sl, r0
 800717e:	9808      	ldr	r0, [sp, #32]
 8007180:	468b      	mov	fp, r1
 8007182:	f7f9 f9e7 	bl	8000554 <__aeabi_ui2d>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4650      	mov	r0, sl
 800718c:	4659      	mov	r1, fp
 800718e:	f7f9 f8a5 	bl	80002dc <__adddf3>
 8007192:	2d0f      	cmp	r5, #15
 8007194:	4682      	mov	sl, r0
 8007196:	468b      	mov	fp, r1
 8007198:	ddd5      	ble.n	8007146 <_strtod_l+0x3ae>
 800719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719c:	1b2c      	subs	r4, r5, r4
 800719e:	441c      	add	r4, r3
 80071a0:	2c00      	cmp	r4, #0
 80071a2:	f340 8096 	ble.w	80072d2 <_strtod_l+0x53a>
 80071a6:	f014 030f 	ands.w	r3, r4, #15
 80071aa:	d00a      	beq.n	80071c2 <_strtod_l+0x42a>
 80071ac:	495e      	ldr	r1, [pc, #376]	@ (8007328 <_strtod_l+0x590>)
 80071ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071b2:	4652      	mov	r2, sl
 80071b4:	465b      	mov	r3, fp
 80071b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ba:	f7f9 fa45 	bl	8000648 <__aeabi_dmul>
 80071be:	4682      	mov	sl, r0
 80071c0:	468b      	mov	fp, r1
 80071c2:	f034 040f 	bics.w	r4, r4, #15
 80071c6:	d073      	beq.n	80072b0 <_strtod_l+0x518>
 80071c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80071cc:	dd48      	ble.n	8007260 <_strtod_l+0x4c8>
 80071ce:	2400      	movs	r4, #0
 80071d0:	46a0      	mov	r8, r4
 80071d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80071d4:	46a1      	mov	r9, r4
 80071d6:	9a05      	ldr	r2, [sp, #20]
 80071d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007330 <_strtod_l+0x598>
 80071dc:	2322      	movs	r3, #34	@ 0x22
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	f04f 0a00 	mov.w	sl, #0
 80071e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f43f ae0f 	beq.w	8006e0a <_strtod_l+0x72>
 80071ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071ee:	9805      	ldr	r0, [sp, #20]
 80071f0:	f002 fb18 	bl	8009824 <_Bfree>
 80071f4:	9805      	ldr	r0, [sp, #20]
 80071f6:	4649      	mov	r1, r9
 80071f8:	f002 fb14 	bl	8009824 <_Bfree>
 80071fc:	9805      	ldr	r0, [sp, #20]
 80071fe:	4641      	mov	r1, r8
 8007200:	f002 fb10 	bl	8009824 <_Bfree>
 8007204:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007206:	9805      	ldr	r0, [sp, #20]
 8007208:	f002 fb0c 	bl	8009824 <_Bfree>
 800720c:	9805      	ldr	r0, [sp, #20]
 800720e:	4621      	mov	r1, r4
 8007210:	f002 fb08 	bl	8009824 <_Bfree>
 8007214:	e5f9      	b.n	8006e0a <_strtod_l+0x72>
 8007216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007218:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800721c:	4293      	cmp	r3, r2
 800721e:	dbbc      	blt.n	800719a <_strtod_l+0x402>
 8007220:	4c41      	ldr	r4, [pc, #260]	@ (8007328 <_strtod_l+0x590>)
 8007222:	f1c5 050f 	rsb	r5, r5, #15
 8007226:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800722a:	4652      	mov	r2, sl
 800722c:	465b      	mov	r3, fp
 800722e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007232:	f7f9 fa09 	bl	8000648 <__aeabi_dmul>
 8007236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007238:	1b5d      	subs	r5, r3, r5
 800723a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800723e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007242:	e78f      	b.n	8007164 <_strtod_l+0x3cc>
 8007244:	3316      	adds	r3, #22
 8007246:	dba8      	blt.n	800719a <_strtod_l+0x402>
 8007248:	4b37      	ldr	r3, [pc, #220]	@ (8007328 <_strtod_l+0x590>)
 800724a:	eba9 0808 	sub.w	r8, r9, r8
 800724e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007252:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007256:	4650      	mov	r0, sl
 8007258:	4659      	mov	r1, fp
 800725a:	f7f9 fb1f 	bl	800089c <__aeabi_ddiv>
 800725e:	e783      	b.n	8007168 <_strtod_l+0x3d0>
 8007260:	4b32      	ldr	r3, [pc, #200]	@ (800732c <_strtod_l+0x594>)
 8007262:	9308      	str	r3, [sp, #32]
 8007264:	2300      	movs	r3, #0
 8007266:	1124      	asrs	r4, r4, #4
 8007268:	4650      	mov	r0, sl
 800726a:	4659      	mov	r1, fp
 800726c:	461e      	mov	r6, r3
 800726e:	2c01      	cmp	r4, #1
 8007270:	dc21      	bgt.n	80072b6 <_strtod_l+0x51e>
 8007272:	b10b      	cbz	r3, 8007278 <_strtod_l+0x4e0>
 8007274:	4682      	mov	sl, r0
 8007276:	468b      	mov	fp, r1
 8007278:	492c      	ldr	r1, [pc, #176]	@ (800732c <_strtod_l+0x594>)
 800727a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800727e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007282:	4652      	mov	r2, sl
 8007284:	465b      	mov	r3, fp
 8007286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800728a:	f7f9 f9dd 	bl	8000648 <__aeabi_dmul>
 800728e:	4b28      	ldr	r3, [pc, #160]	@ (8007330 <_strtod_l+0x598>)
 8007290:	460a      	mov	r2, r1
 8007292:	400b      	ands	r3, r1
 8007294:	4927      	ldr	r1, [pc, #156]	@ (8007334 <_strtod_l+0x59c>)
 8007296:	428b      	cmp	r3, r1
 8007298:	4682      	mov	sl, r0
 800729a:	d898      	bhi.n	80071ce <_strtod_l+0x436>
 800729c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80072a0:	428b      	cmp	r3, r1
 80072a2:	bf86      	itte	hi
 80072a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007338 <_strtod_l+0x5a0>
 80072a8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80072ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80072b0:	2300      	movs	r3, #0
 80072b2:	9308      	str	r3, [sp, #32]
 80072b4:	e07a      	b.n	80073ac <_strtod_l+0x614>
 80072b6:	07e2      	lsls	r2, r4, #31
 80072b8:	d505      	bpl.n	80072c6 <_strtod_l+0x52e>
 80072ba:	9b08      	ldr	r3, [sp, #32]
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f7f9 f9c2 	bl	8000648 <__aeabi_dmul>
 80072c4:	2301      	movs	r3, #1
 80072c6:	9a08      	ldr	r2, [sp, #32]
 80072c8:	3208      	adds	r2, #8
 80072ca:	3601      	adds	r6, #1
 80072cc:	1064      	asrs	r4, r4, #1
 80072ce:	9208      	str	r2, [sp, #32]
 80072d0:	e7cd      	b.n	800726e <_strtod_l+0x4d6>
 80072d2:	d0ed      	beq.n	80072b0 <_strtod_l+0x518>
 80072d4:	4264      	negs	r4, r4
 80072d6:	f014 020f 	ands.w	r2, r4, #15
 80072da:	d00a      	beq.n	80072f2 <_strtod_l+0x55a>
 80072dc:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <_strtod_l+0x590>)
 80072de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072e2:	4650      	mov	r0, sl
 80072e4:	4659      	mov	r1, fp
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f7f9 fad7 	bl	800089c <__aeabi_ddiv>
 80072ee:	4682      	mov	sl, r0
 80072f0:	468b      	mov	fp, r1
 80072f2:	1124      	asrs	r4, r4, #4
 80072f4:	d0dc      	beq.n	80072b0 <_strtod_l+0x518>
 80072f6:	2c1f      	cmp	r4, #31
 80072f8:	dd20      	ble.n	800733c <_strtod_l+0x5a4>
 80072fa:	2400      	movs	r4, #0
 80072fc:	46a0      	mov	r8, r4
 80072fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8007300:	46a1      	mov	r9, r4
 8007302:	9a05      	ldr	r2, [sp, #20]
 8007304:	2322      	movs	r3, #34	@ 0x22
 8007306:	f04f 0a00 	mov.w	sl, #0
 800730a:	f04f 0b00 	mov.w	fp, #0
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	e768      	b.n	80071e4 <_strtod_l+0x44c>
 8007312:	bf00      	nop
 8007314:	0800a84d 	.word	0x0800a84d
 8007318:	0800a87c 	.word	0x0800a87c
 800731c:	0800a845 	.word	0x0800a845
 8007320:	0800a9dc 	.word	0x0800a9dc
 8007324:	0800ac6b 	.word	0x0800ac6b
 8007328:	0800ab68 	.word	0x0800ab68
 800732c:	0800ab40 	.word	0x0800ab40
 8007330:	7ff00000 	.word	0x7ff00000
 8007334:	7ca00000 	.word	0x7ca00000
 8007338:	7fefffff 	.word	0x7fefffff
 800733c:	f014 0310 	ands.w	r3, r4, #16
 8007340:	bf18      	it	ne
 8007342:	236a      	movne	r3, #106	@ 0x6a
 8007344:	4ea9      	ldr	r6, [pc, #676]	@ (80075ec <_strtod_l+0x854>)
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	4650      	mov	r0, sl
 800734a:	4659      	mov	r1, fp
 800734c:	2300      	movs	r3, #0
 800734e:	07e2      	lsls	r2, r4, #31
 8007350:	d504      	bpl.n	800735c <_strtod_l+0x5c4>
 8007352:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007356:	f7f9 f977 	bl	8000648 <__aeabi_dmul>
 800735a:	2301      	movs	r3, #1
 800735c:	1064      	asrs	r4, r4, #1
 800735e:	f106 0608 	add.w	r6, r6, #8
 8007362:	d1f4      	bne.n	800734e <_strtod_l+0x5b6>
 8007364:	b10b      	cbz	r3, 800736a <_strtod_l+0x5d2>
 8007366:	4682      	mov	sl, r0
 8007368:	468b      	mov	fp, r1
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	b1b3      	cbz	r3, 800739c <_strtod_l+0x604>
 800736e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007372:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007376:	2b00      	cmp	r3, #0
 8007378:	4659      	mov	r1, fp
 800737a:	dd0f      	ble.n	800739c <_strtod_l+0x604>
 800737c:	2b1f      	cmp	r3, #31
 800737e:	dd55      	ble.n	800742c <_strtod_l+0x694>
 8007380:	2b34      	cmp	r3, #52	@ 0x34
 8007382:	bfde      	ittt	le
 8007384:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007388:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800738c:	4093      	lslle	r3, r2
 800738e:	f04f 0a00 	mov.w	sl, #0
 8007392:	bfcc      	ite	gt
 8007394:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007398:	ea03 0b01 	andle.w	fp, r3, r1
 800739c:	2200      	movs	r2, #0
 800739e:	2300      	movs	r3, #0
 80073a0:	4650      	mov	r0, sl
 80073a2:	4659      	mov	r1, fp
 80073a4:	f7f9 fbb8 	bl	8000b18 <__aeabi_dcmpeq>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d1a6      	bne.n	80072fa <_strtod_l+0x562>
 80073ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80073b2:	9805      	ldr	r0, [sp, #20]
 80073b4:	462b      	mov	r3, r5
 80073b6:	463a      	mov	r2, r7
 80073b8:	f002 fa9c 	bl	80098f4 <__s2b>
 80073bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80073be:	2800      	cmp	r0, #0
 80073c0:	f43f af05 	beq.w	80071ce <_strtod_l+0x436>
 80073c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c6:	2a00      	cmp	r2, #0
 80073c8:	eba9 0308 	sub.w	r3, r9, r8
 80073cc:	bfa8      	it	ge
 80073ce:	2300      	movge	r3, #0
 80073d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80073d2:	2400      	movs	r4, #0
 80073d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80073d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80073da:	46a0      	mov	r8, r4
 80073dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073de:	9805      	ldr	r0, [sp, #20]
 80073e0:	6859      	ldr	r1, [r3, #4]
 80073e2:	f002 f9df 	bl	80097a4 <_Balloc>
 80073e6:	4681      	mov	r9, r0
 80073e8:	2800      	cmp	r0, #0
 80073ea:	f43f aef4 	beq.w	80071d6 <_strtod_l+0x43e>
 80073ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	3202      	adds	r2, #2
 80073f4:	f103 010c 	add.w	r1, r3, #12
 80073f8:	0092      	lsls	r2, r2, #2
 80073fa:	300c      	adds	r0, #12
 80073fc:	f000 fc21 	bl	8007c42 <memcpy>
 8007400:	ec4b ab10 	vmov	d0, sl, fp
 8007404:	9805      	ldr	r0, [sp, #20]
 8007406:	aa1c      	add	r2, sp, #112	@ 0x70
 8007408:	a91b      	add	r1, sp, #108	@ 0x6c
 800740a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800740e:	f002 fdad 	bl	8009f6c <__d2b>
 8007412:	901a      	str	r0, [sp, #104]	@ 0x68
 8007414:	2800      	cmp	r0, #0
 8007416:	f43f aede 	beq.w	80071d6 <_strtod_l+0x43e>
 800741a:	9805      	ldr	r0, [sp, #20]
 800741c:	2101      	movs	r1, #1
 800741e:	f002 faff 	bl	8009a20 <__i2b>
 8007422:	4680      	mov	r8, r0
 8007424:	b948      	cbnz	r0, 800743a <_strtod_l+0x6a2>
 8007426:	f04f 0800 	mov.w	r8, #0
 800742a:	e6d4      	b.n	80071d6 <_strtod_l+0x43e>
 800742c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	ea03 0a0a 	and.w	sl, r3, sl
 8007438:	e7b0      	b.n	800739c <_strtod_l+0x604>
 800743a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800743c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800743e:	2d00      	cmp	r5, #0
 8007440:	bfab      	itete	ge
 8007442:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007444:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007446:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007448:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800744a:	bfac      	ite	ge
 800744c:	18ef      	addge	r7, r5, r3
 800744e:	1b5e      	sublt	r6, r3, r5
 8007450:	9b08      	ldr	r3, [sp, #32]
 8007452:	1aed      	subs	r5, r5, r3
 8007454:	4415      	add	r5, r2
 8007456:	4b66      	ldr	r3, [pc, #408]	@ (80075f0 <_strtod_l+0x858>)
 8007458:	3d01      	subs	r5, #1
 800745a:	429d      	cmp	r5, r3
 800745c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007460:	da50      	bge.n	8007504 <_strtod_l+0x76c>
 8007462:	1b5b      	subs	r3, r3, r5
 8007464:	2b1f      	cmp	r3, #31
 8007466:	eba2 0203 	sub.w	r2, r2, r3
 800746a:	f04f 0101 	mov.w	r1, #1
 800746e:	dc3d      	bgt.n	80074ec <_strtod_l+0x754>
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007476:	2300      	movs	r3, #0
 8007478:	9310      	str	r3, [sp, #64]	@ 0x40
 800747a:	18bd      	adds	r5, r7, r2
 800747c:	9b08      	ldr	r3, [sp, #32]
 800747e:	42af      	cmp	r7, r5
 8007480:	4416      	add	r6, r2
 8007482:	441e      	add	r6, r3
 8007484:	463b      	mov	r3, r7
 8007486:	bfa8      	it	ge
 8007488:	462b      	movge	r3, r5
 800748a:	42b3      	cmp	r3, r6
 800748c:	bfa8      	it	ge
 800748e:	4633      	movge	r3, r6
 8007490:	2b00      	cmp	r3, #0
 8007492:	bfc2      	ittt	gt
 8007494:	1aed      	subgt	r5, r5, r3
 8007496:	1af6      	subgt	r6, r6, r3
 8007498:	1aff      	subgt	r7, r7, r3
 800749a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800749c:	2b00      	cmp	r3, #0
 800749e:	dd16      	ble.n	80074ce <_strtod_l+0x736>
 80074a0:	4641      	mov	r1, r8
 80074a2:	9805      	ldr	r0, [sp, #20]
 80074a4:	461a      	mov	r2, r3
 80074a6:	f002 fb7b 	bl	8009ba0 <__pow5mult>
 80074aa:	4680      	mov	r8, r0
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d0ba      	beq.n	8007426 <_strtod_l+0x68e>
 80074b0:	4601      	mov	r1, r0
 80074b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80074b4:	9805      	ldr	r0, [sp, #20]
 80074b6:	f002 fac9 	bl	8009a4c <__multiply>
 80074ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80074bc:	2800      	cmp	r0, #0
 80074be:	f43f ae8a 	beq.w	80071d6 <_strtod_l+0x43e>
 80074c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074c4:	9805      	ldr	r0, [sp, #20]
 80074c6:	f002 f9ad 	bl	8009824 <_Bfree>
 80074ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	dc1d      	bgt.n	800750e <_strtod_l+0x776>
 80074d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dd23      	ble.n	8007520 <_strtod_l+0x788>
 80074d8:	4649      	mov	r1, r9
 80074da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80074dc:	9805      	ldr	r0, [sp, #20]
 80074de:	f002 fb5f 	bl	8009ba0 <__pow5mult>
 80074e2:	4681      	mov	r9, r0
 80074e4:	b9e0      	cbnz	r0, 8007520 <_strtod_l+0x788>
 80074e6:	f04f 0900 	mov.w	r9, #0
 80074ea:	e674      	b.n	80071d6 <_strtod_l+0x43e>
 80074ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80074f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80074f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80074f8:	35e2      	adds	r5, #226	@ 0xe2
 80074fa:	fa01 f305 	lsl.w	r3, r1, r5
 80074fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007500:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007502:	e7ba      	b.n	800747a <_strtod_l+0x6e2>
 8007504:	2300      	movs	r3, #0
 8007506:	9310      	str	r3, [sp, #64]	@ 0x40
 8007508:	2301      	movs	r3, #1
 800750a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800750c:	e7b5      	b.n	800747a <_strtod_l+0x6e2>
 800750e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007510:	9805      	ldr	r0, [sp, #20]
 8007512:	462a      	mov	r2, r5
 8007514:	f002 fb9e 	bl	8009c54 <__lshift>
 8007518:	901a      	str	r0, [sp, #104]	@ 0x68
 800751a:	2800      	cmp	r0, #0
 800751c:	d1d9      	bne.n	80074d2 <_strtod_l+0x73a>
 800751e:	e65a      	b.n	80071d6 <_strtod_l+0x43e>
 8007520:	2e00      	cmp	r6, #0
 8007522:	dd07      	ble.n	8007534 <_strtod_l+0x79c>
 8007524:	4649      	mov	r1, r9
 8007526:	9805      	ldr	r0, [sp, #20]
 8007528:	4632      	mov	r2, r6
 800752a:	f002 fb93 	bl	8009c54 <__lshift>
 800752e:	4681      	mov	r9, r0
 8007530:	2800      	cmp	r0, #0
 8007532:	d0d8      	beq.n	80074e6 <_strtod_l+0x74e>
 8007534:	2f00      	cmp	r7, #0
 8007536:	dd08      	ble.n	800754a <_strtod_l+0x7b2>
 8007538:	4641      	mov	r1, r8
 800753a:	9805      	ldr	r0, [sp, #20]
 800753c:	463a      	mov	r2, r7
 800753e:	f002 fb89 	bl	8009c54 <__lshift>
 8007542:	4680      	mov	r8, r0
 8007544:	2800      	cmp	r0, #0
 8007546:	f43f ae46 	beq.w	80071d6 <_strtod_l+0x43e>
 800754a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800754c:	9805      	ldr	r0, [sp, #20]
 800754e:	464a      	mov	r2, r9
 8007550:	f002 fc08 	bl	8009d64 <__mdiff>
 8007554:	4604      	mov	r4, r0
 8007556:	2800      	cmp	r0, #0
 8007558:	f43f ae3d 	beq.w	80071d6 <_strtod_l+0x43e>
 800755c:	68c3      	ldr	r3, [r0, #12]
 800755e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007560:	2300      	movs	r3, #0
 8007562:	60c3      	str	r3, [r0, #12]
 8007564:	4641      	mov	r1, r8
 8007566:	f002 fbe1 	bl	8009d2c <__mcmp>
 800756a:	2800      	cmp	r0, #0
 800756c:	da46      	bge.n	80075fc <_strtod_l+0x864>
 800756e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007570:	ea53 030a 	orrs.w	r3, r3, sl
 8007574:	d16c      	bne.n	8007650 <_strtod_l+0x8b8>
 8007576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800757a:	2b00      	cmp	r3, #0
 800757c:	d168      	bne.n	8007650 <_strtod_l+0x8b8>
 800757e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007582:	0d1b      	lsrs	r3, r3, #20
 8007584:	051b      	lsls	r3, r3, #20
 8007586:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800758a:	d961      	bls.n	8007650 <_strtod_l+0x8b8>
 800758c:	6963      	ldr	r3, [r4, #20]
 800758e:	b913      	cbnz	r3, 8007596 <_strtod_l+0x7fe>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	2b01      	cmp	r3, #1
 8007594:	dd5c      	ble.n	8007650 <_strtod_l+0x8b8>
 8007596:	4621      	mov	r1, r4
 8007598:	2201      	movs	r2, #1
 800759a:	9805      	ldr	r0, [sp, #20]
 800759c:	f002 fb5a 	bl	8009c54 <__lshift>
 80075a0:	4641      	mov	r1, r8
 80075a2:	4604      	mov	r4, r0
 80075a4:	f002 fbc2 	bl	8009d2c <__mcmp>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	dd51      	ble.n	8007650 <_strtod_l+0x8b8>
 80075ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075b0:	9a08      	ldr	r2, [sp, #32]
 80075b2:	0d1b      	lsrs	r3, r3, #20
 80075b4:	051b      	lsls	r3, r3, #20
 80075b6:	2a00      	cmp	r2, #0
 80075b8:	d06b      	beq.n	8007692 <_strtod_l+0x8fa>
 80075ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80075be:	d868      	bhi.n	8007692 <_strtod_l+0x8fa>
 80075c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80075c4:	f67f ae9d 	bls.w	8007302 <_strtod_l+0x56a>
 80075c8:	4b0a      	ldr	r3, [pc, #40]	@ (80075f4 <_strtod_l+0x85c>)
 80075ca:	4650      	mov	r0, sl
 80075cc:	4659      	mov	r1, fp
 80075ce:	2200      	movs	r2, #0
 80075d0:	f7f9 f83a 	bl	8000648 <__aeabi_dmul>
 80075d4:	4b08      	ldr	r3, [pc, #32]	@ (80075f8 <_strtod_l+0x860>)
 80075d6:	400b      	ands	r3, r1
 80075d8:	4682      	mov	sl, r0
 80075da:	468b      	mov	fp, r1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f47f ae05 	bne.w	80071ec <_strtod_l+0x454>
 80075e2:	9a05      	ldr	r2, [sp, #20]
 80075e4:	2322      	movs	r3, #34	@ 0x22
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e600      	b.n	80071ec <_strtod_l+0x454>
 80075ea:	bf00      	nop
 80075ec:	0800a8a8 	.word	0x0800a8a8
 80075f0:	fffffc02 	.word	0xfffffc02
 80075f4:	39500000 	.word	0x39500000
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007600:	d165      	bne.n	80076ce <_strtod_l+0x936>
 8007602:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007604:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007608:	b35a      	cbz	r2, 8007662 <_strtod_l+0x8ca>
 800760a:	4a9f      	ldr	r2, [pc, #636]	@ (8007888 <_strtod_l+0xaf0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d12b      	bne.n	8007668 <_strtod_l+0x8d0>
 8007610:	9b08      	ldr	r3, [sp, #32]
 8007612:	4651      	mov	r1, sl
 8007614:	b303      	cbz	r3, 8007658 <_strtod_l+0x8c0>
 8007616:	4b9d      	ldr	r3, [pc, #628]	@ (800788c <_strtod_l+0xaf4>)
 8007618:	465a      	mov	r2, fp
 800761a:	4013      	ands	r3, r2
 800761c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007620:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007624:	d81b      	bhi.n	800765e <_strtod_l+0x8c6>
 8007626:	0d1b      	lsrs	r3, r3, #20
 8007628:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800762c:	fa02 f303 	lsl.w	r3, r2, r3
 8007630:	4299      	cmp	r1, r3
 8007632:	d119      	bne.n	8007668 <_strtod_l+0x8d0>
 8007634:	4b96      	ldr	r3, [pc, #600]	@ (8007890 <_strtod_l+0xaf8>)
 8007636:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007638:	429a      	cmp	r2, r3
 800763a:	d102      	bne.n	8007642 <_strtod_l+0x8aa>
 800763c:	3101      	adds	r1, #1
 800763e:	f43f adca 	beq.w	80071d6 <_strtod_l+0x43e>
 8007642:	4b92      	ldr	r3, [pc, #584]	@ (800788c <_strtod_l+0xaf4>)
 8007644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007646:	401a      	ands	r2, r3
 8007648:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800764c:	f04f 0a00 	mov.w	sl, #0
 8007650:	9b08      	ldr	r3, [sp, #32]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1b8      	bne.n	80075c8 <_strtod_l+0x830>
 8007656:	e5c9      	b.n	80071ec <_strtod_l+0x454>
 8007658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800765c:	e7e8      	b.n	8007630 <_strtod_l+0x898>
 800765e:	4613      	mov	r3, r2
 8007660:	e7e6      	b.n	8007630 <_strtod_l+0x898>
 8007662:	ea53 030a 	orrs.w	r3, r3, sl
 8007666:	d0a1      	beq.n	80075ac <_strtod_l+0x814>
 8007668:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800766a:	b1db      	cbz	r3, 80076a4 <_strtod_l+0x90c>
 800766c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800766e:	4213      	tst	r3, r2
 8007670:	d0ee      	beq.n	8007650 <_strtod_l+0x8b8>
 8007672:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007674:	9a08      	ldr	r2, [sp, #32]
 8007676:	4650      	mov	r0, sl
 8007678:	4659      	mov	r1, fp
 800767a:	b1bb      	cbz	r3, 80076ac <_strtod_l+0x914>
 800767c:	f7ff fb6c 	bl	8006d58 <sulp>
 8007680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007684:	ec53 2b10 	vmov	r2, r3, d0
 8007688:	f7f8 fe28 	bl	80002dc <__adddf3>
 800768c:	4682      	mov	sl, r0
 800768e:	468b      	mov	fp, r1
 8007690:	e7de      	b.n	8007650 <_strtod_l+0x8b8>
 8007692:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007696:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800769a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800769e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80076a2:	e7d5      	b.n	8007650 <_strtod_l+0x8b8>
 80076a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076a6:	ea13 0f0a 	tst.w	r3, sl
 80076aa:	e7e1      	b.n	8007670 <_strtod_l+0x8d8>
 80076ac:	f7ff fb54 	bl	8006d58 <sulp>
 80076b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076b4:	ec53 2b10 	vmov	r2, r3, d0
 80076b8:	f7f8 fe0e 	bl	80002d8 <__aeabi_dsub>
 80076bc:	2200      	movs	r2, #0
 80076be:	2300      	movs	r3, #0
 80076c0:	4682      	mov	sl, r0
 80076c2:	468b      	mov	fp, r1
 80076c4:	f7f9 fa28 	bl	8000b18 <__aeabi_dcmpeq>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d0c1      	beq.n	8007650 <_strtod_l+0x8b8>
 80076cc:	e619      	b.n	8007302 <_strtod_l+0x56a>
 80076ce:	4641      	mov	r1, r8
 80076d0:	4620      	mov	r0, r4
 80076d2:	f002 fca3 	bl	800a01c <__ratio>
 80076d6:	ec57 6b10 	vmov	r6, r7, d0
 80076da:	2200      	movs	r2, #0
 80076dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f9 fa2c 	bl	8000b40 <__aeabi_dcmple>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d06f      	beq.n	80077cc <_strtod_l+0xa34>
 80076ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d17a      	bne.n	80077e8 <_strtod_l+0xa50>
 80076f2:	f1ba 0f00 	cmp.w	sl, #0
 80076f6:	d158      	bne.n	80077aa <_strtod_l+0xa12>
 80076f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d15a      	bne.n	80077b8 <_strtod_l+0xa20>
 8007702:	4b64      	ldr	r3, [pc, #400]	@ (8007894 <_strtod_l+0xafc>)
 8007704:	2200      	movs	r2, #0
 8007706:	4630      	mov	r0, r6
 8007708:	4639      	mov	r1, r7
 800770a:	f7f9 fa0f 	bl	8000b2c <__aeabi_dcmplt>
 800770e:	2800      	cmp	r0, #0
 8007710:	d159      	bne.n	80077c6 <_strtod_l+0xa2e>
 8007712:	4630      	mov	r0, r6
 8007714:	4639      	mov	r1, r7
 8007716:	4b60      	ldr	r3, [pc, #384]	@ (8007898 <_strtod_l+0xb00>)
 8007718:	2200      	movs	r2, #0
 800771a:	f7f8 ff95 	bl	8000648 <__aeabi_dmul>
 800771e:	4606      	mov	r6, r0
 8007720:	460f      	mov	r7, r1
 8007722:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007726:	9606      	str	r6, [sp, #24]
 8007728:	9307      	str	r3, [sp, #28]
 800772a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800772e:	4d57      	ldr	r5, [pc, #348]	@ (800788c <_strtod_l+0xaf4>)
 8007730:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007736:	401d      	ands	r5, r3
 8007738:	4b58      	ldr	r3, [pc, #352]	@ (800789c <_strtod_l+0xb04>)
 800773a:	429d      	cmp	r5, r3
 800773c:	f040 80b2 	bne.w	80078a4 <_strtod_l+0xb0c>
 8007740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007742:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007746:	ec4b ab10 	vmov	d0, sl, fp
 800774a:	f002 fb9f 	bl	8009e8c <__ulp>
 800774e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007752:	ec51 0b10 	vmov	r0, r1, d0
 8007756:	f7f8 ff77 	bl	8000648 <__aeabi_dmul>
 800775a:	4652      	mov	r2, sl
 800775c:	465b      	mov	r3, fp
 800775e:	f7f8 fdbd 	bl	80002dc <__adddf3>
 8007762:	460b      	mov	r3, r1
 8007764:	4949      	ldr	r1, [pc, #292]	@ (800788c <_strtod_l+0xaf4>)
 8007766:	4a4e      	ldr	r2, [pc, #312]	@ (80078a0 <_strtod_l+0xb08>)
 8007768:	4019      	ands	r1, r3
 800776a:	4291      	cmp	r1, r2
 800776c:	4682      	mov	sl, r0
 800776e:	d942      	bls.n	80077f6 <_strtod_l+0xa5e>
 8007770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007772:	4b47      	ldr	r3, [pc, #284]	@ (8007890 <_strtod_l+0xaf8>)
 8007774:	429a      	cmp	r2, r3
 8007776:	d103      	bne.n	8007780 <_strtod_l+0x9e8>
 8007778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800777a:	3301      	adds	r3, #1
 800777c:	f43f ad2b 	beq.w	80071d6 <_strtod_l+0x43e>
 8007780:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007890 <_strtod_l+0xaf8>
 8007784:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007788:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800778a:	9805      	ldr	r0, [sp, #20]
 800778c:	f002 f84a 	bl	8009824 <_Bfree>
 8007790:	9805      	ldr	r0, [sp, #20]
 8007792:	4649      	mov	r1, r9
 8007794:	f002 f846 	bl	8009824 <_Bfree>
 8007798:	9805      	ldr	r0, [sp, #20]
 800779a:	4641      	mov	r1, r8
 800779c:	f002 f842 	bl	8009824 <_Bfree>
 80077a0:	9805      	ldr	r0, [sp, #20]
 80077a2:	4621      	mov	r1, r4
 80077a4:	f002 f83e 	bl	8009824 <_Bfree>
 80077a8:	e618      	b.n	80073dc <_strtod_l+0x644>
 80077aa:	f1ba 0f01 	cmp.w	sl, #1
 80077ae:	d103      	bne.n	80077b8 <_strtod_l+0xa20>
 80077b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f43f ada5 	beq.w	8007302 <_strtod_l+0x56a>
 80077b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007868 <_strtod_l+0xad0>
 80077bc:	4f35      	ldr	r7, [pc, #212]	@ (8007894 <_strtod_l+0xafc>)
 80077be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077c2:	2600      	movs	r6, #0
 80077c4:	e7b1      	b.n	800772a <_strtod_l+0x992>
 80077c6:	4f34      	ldr	r7, [pc, #208]	@ (8007898 <_strtod_l+0xb00>)
 80077c8:	2600      	movs	r6, #0
 80077ca:	e7aa      	b.n	8007722 <_strtod_l+0x98a>
 80077cc:	4b32      	ldr	r3, [pc, #200]	@ (8007898 <_strtod_l+0xb00>)
 80077ce:	4630      	mov	r0, r6
 80077d0:	4639      	mov	r1, r7
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7f8 ff38 	bl	8000648 <__aeabi_dmul>
 80077d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077da:	4606      	mov	r6, r0
 80077dc:	460f      	mov	r7, r1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d09f      	beq.n	8007722 <_strtod_l+0x98a>
 80077e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80077e6:	e7a0      	b.n	800772a <_strtod_l+0x992>
 80077e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007870 <_strtod_l+0xad8>
 80077ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077f0:	ec57 6b17 	vmov	r6, r7, d7
 80077f4:	e799      	b.n	800772a <_strtod_l+0x992>
 80077f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1c1      	bne.n	8007788 <_strtod_l+0x9f0>
 8007804:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007808:	0d1b      	lsrs	r3, r3, #20
 800780a:	051b      	lsls	r3, r3, #20
 800780c:	429d      	cmp	r5, r3
 800780e:	d1bb      	bne.n	8007788 <_strtod_l+0x9f0>
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f9 fa78 	bl	8000d08 <__aeabi_d2lz>
 8007818:	f7f8 fee8 	bl	80005ec <__aeabi_l2d>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4630      	mov	r0, r6
 8007822:	4639      	mov	r1, r7
 8007824:	f7f8 fd58 	bl	80002d8 <__aeabi_dsub>
 8007828:	460b      	mov	r3, r1
 800782a:	4602      	mov	r2, r0
 800782c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007830:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007836:	ea46 060a 	orr.w	r6, r6, sl
 800783a:	431e      	orrs	r6, r3
 800783c:	d06f      	beq.n	800791e <_strtod_l+0xb86>
 800783e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007878 <_strtod_l+0xae0>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f9 f972 	bl	8000b2c <__aeabi_dcmplt>
 8007848:	2800      	cmp	r0, #0
 800784a:	f47f accf 	bne.w	80071ec <_strtod_l+0x454>
 800784e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007880 <_strtod_l+0xae8>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007858:	f7f9 f986 	bl	8000b68 <__aeabi_dcmpgt>
 800785c:	2800      	cmp	r0, #0
 800785e:	d093      	beq.n	8007788 <_strtod_l+0x9f0>
 8007860:	e4c4      	b.n	80071ec <_strtod_l+0x454>
 8007862:	bf00      	nop
 8007864:	f3af 8000 	nop.w
 8007868:	00000000 	.word	0x00000000
 800786c:	bff00000 	.word	0xbff00000
 8007870:	00000000 	.word	0x00000000
 8007874:	3ff00000 	.word	0x3ff00000
 8007878:	94a03595 	.word	0x94a03595
 800787c:	3fdfffff 	.word	0x3fdfffff
 8007880:	35afe535 	.word	0x35afe535
 8007884:	3fe00000 	.word	0x3fe00000
 8007888:	000fffff 	.word	0x000fffff
 800788c:	7ff00000 	.word	0x7ff00000
 8007890:	7fefffff 	.word	0x7fefffff
 8007894:	3ff00000 	.word	0x3ff00000
 8007898:	3fe00000 	.word	0x3fe00000
 800789c:	7fe00000 	.word	0x7fe00000
 80078a0:	7c9fffff 	.word	0x7c9fffff
 80078a4:	9b08      	ldr	r3, [sp, #32]
 80078a6:	b323      	cbz	r3, 80078f2 <_strtod_l+0xb5a>
 80078a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80078ac:	d821      	bhi.n	80078f2 <_strtod_l+0xb5a>
 80078ae:	a328      	add	r3, pc, #160	@ (adr r3, 8007950 <_strtod_l+0xbb8>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	4630      	mov	r0, r6
 80078b6:	4639      	mov	r1, r7
 80078b8:	f7f9 f942 	bl	8000b40 <__aeabi_dcmple>
 80078bc:	b1a0      	cbz	r0, 80078e8 <_strtod_l+0xb50>
 80078be:	4639      	mov	r1, r7
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7f9 f999 	bl	8000bf8 <__aeabi_d2uiz>
 80078c6:	2801      	cmp	r0, #1
 80078c8:	bf38      	it	cc
 80078ca:	2001      	movcc	r0, #1
 80078cc:	f7f8 fe42 	bl	8000554 <__aeabi_ui2d>
 80078d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d2:	4606      	mov	r6, r0
 80078d4:	460f      	mov	r7, r1
 80078d6:	b9fb      	cbnz	r3, 8007918 <_strtod_l+0xb80>
 80078d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80078de:	9315      	str	r3, [sp, #84]	@ 0x54
 80078e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80078e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80078e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80078ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80078ee:	1b5b      	subs	r3, r3, r5
 80078f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80078f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80078f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80078fa:	f002 fac7 	bl	8009e8c <__ulp>
 80078fe:	4650      	mov	r0, sl
 8007900:	ec53 2b10 	vmov	r2, r3, d0
 8007904:	4659      	mov	r1, fp
 8007906:	f7f8 fe9f 	bl	8000648 <__aeabi_dmul>
 800790a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800790e:	f7f8 fce5 	bl	80002dc <__adddf3>
 8007912:	4682      	mov	sl, r0
 8007914:	468b      	mov	fp, r1
 8007916:	e770      	b.n	80077fa <_strtod_l+0xa62>
 8007918:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800791c:	e7e0      	b.n	80078e0 <_strtod_l+0xb48>
 800791e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007958 <_strtod_l+0xbc0>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f9 f902 	bl	8000b2c <__aeabi_dcmplt>
 8007928:	e798      	b.n	800785c <_strtod_l+0xac4>
 800792a:	2300      	movs	r3, #0
 800792c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800792e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007930:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	f7ff ba6d 	b.w	8006e12 <_strtod_l+0x7a>
 8007938:	2a65      	cmp	r2, #101	@ 0x65
 800793a:	f43f ab66 	beq.w	800700a <_strtod_l+0x272>
 800793e:	2a45      	cmp	r2, #69	@ 0x45
 8007940:	f43f ab63 	beq.w	800700a <_strtod_l+0x272>
 8007944:	2301      	movs	r3, #1
 8007946:	f7ff bb9e 	b.w	8007086 <_strtod_l+0x2ee>
 800794a:	bf00      	nop
 800794c:	f3af 8000 	nop.w
 8007950:	ffc00000 	.word	0xffc00000
 8007954:	41dfffff 	.word	0x41dfffff
 8007958:	94a03595 	.word	0x94a03595
 800795c:	3fcfffff 	.word	0x3fcfffff

08007960 <_strtod_r>:
 8007960:	4b01      	ldr	r3, [pc, #4]	@ (8007968 <_strtod_r+0x8>)
 8007962:	f7ff ba19 	b.w	8006d98 <_strtod_l>
 8007966:	bf00      	nop
 8007968:	20000018 	.word	0x20000018

0800796c <_strtol_l.constprop.0>:
 800796c:	2b24      	cmp	r3, #36	@ 0x24
 800796e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007972:	4686      	mov	lr, r0
 8007974:	4690      	mov	r8, r2
 8007976:	d801      	bhi.n	800797c <_strtol_l.constprop.0+0x10>
 8007978:	2b01      	cmp	r3, #1
 800797a:	d106      	bne.n	800798a <_strtol_l.constprop.0+0x1e>
 800797c:	f000 f934 	bl	8007be8 <__errno>
 8007980:	2316      	movs	r3, #22
 8007982:	6003      	str	r3, [r0, #0]
 8007984:	2000      	movs	r0, #0
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	4834      	ldr	r0, [pc, #208]	@ (8007a5c <_strtol_l.constprop.0+0xf0>)
 800798c:	460d      	mov	r5, r1
 800798e:	462a      	mov	r2, r5
 8007990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007994:	5d06      	ldrb	r6, [r0, r4]
 8007996:	f016 0608 	ands.w	r6, r6, #8
 800799a:	d1f8      	bne.n	800798e <_strtol_l.constprop.0+0x22>
 800799c:	2c2d      	cmp	r4, #45	@ 0x2d
 800799e:	d12d      	bne.n	80079fc <_strtol_l.constprop.0+0x90>
 80079a0:	782c      	ldrb	r4, [r5, #0]
 80079a2:	2601      	movs	r6, #1
 80079a4:	1c95      	adds	r5, r2, #2
 80079a6:	f033 0210 	bics.w	r2, r3, #16
 80079aa:	d109      	bne.n	80079c0 <_strtol_l.constprop.0+0x54>
 80079ac:	2c30      	cmp	r4, #48	@ 0x30
 80079ae:	d12a      	bne.n	8007a06 <_strtol_l.constprop.0+0x9a>
 80079b0:	782a      	ldrb	r2, [r5, #0]
 80079b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079b6:	2a58      	cmp	r2, #88	@ 0x58
 80079b8:	d125      	bne.n	8007a06 <_strtol_l.constprop.0+0x9a>
 80079ba:	786c      	ldrb	r4, [r5, #1]
 80079bc:	2310      	movs	r3, #16
 80079be:	3502      	adds	r5, #2
 80079c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80079c8:	2200      	movs	r2, #0
 80079ca:	fbbc f9f3 	udiv	r9, ip, r3
 80079ce:	4610      	mov	r0, r2
 80079d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80079d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80079d8:	2f09      	cmp	r7, #9
 80079da:	d81b      	bhi.n	8007a14 <_strtol_l.constprop.0+0xa8>
 80079dc:	463c      	mov	r4, r7
 80079de:	42a3      	cmp	r3, r4
 80079e0:	dd27      	ble.n	8007a32 <_strtol_l.constprop.0+0xc6>
 80079e2:	1c57      	adds	r7, r2, #1
 80079e4:	d007      	beq.n	80079f6 <_strtol_l.constprop.0+0x8a>
 80079e6:	4581      	cmp	r9, r0
 80079e8:	d320      	bcc.n	8007a2c <_strtol_l.constprop.0+0xc0>
 80079ea:	d101      	bne.n	80079f0 <_strtol_l.constprop.0+0x84>
 80079ec:	45a2      	cmp	sl, r4
 80079ee:	db1d      	blt.n	8007a2c <_strtol_l.constprop.0+0xc0>
 80079f0:	fb00 4003 	mla	r0, r0, r3, r4
 80079f4:	2201      	movs	r2, #1
 80079f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079fa:	e7eb      	b.n	80079d4 <_strtol_l.constprop.0+0x68>
 80079fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80079fe:	bf04      	itt	eq
 8007a00:	782c      	ldrbeq	r4, [r5, #0]
 8007a02:	1c95      	addeq	r5, r2, #2
 8007a04:	e7cf      	b.n	80079a6 <_strtol_l.constprop.0+0x3a>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1da      	bne.n	80079c0 <_strtol_l.constprop.0+0x54>
 8007a0a:	2c30      	cmp	r4, #48	@ 0x30
 8007a0c:	bf0c      	ite	eq
 8007a0e:	2308      	moveq	r3, #8
 8007a10:	230a      	movne	r3, #10
 8007a12:	e7d5      	b.n	80079c0 <_strtol_l.constprop.0+0x54>
 8007a14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a18:	2f19      	cmp	r7, #25
 8007a1a:	d801      	bhi.n	8007a20 <_strtol_l.constprop.0+0xb4>
 8007a1c:	3c37      	subs	r4, #55	@ 0x37
 8007a1e:	e7de      	b.n	80079de <_strtol_l.constprop.0+0x72>
 8007a20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a24:	2f19      	cmp	r7, #25
 8007a26:	d804      	bhi.n	8007a32 <_strtol_l.constprop.0+0xc6>
 8007a28:	3c57      	subs	r4, #87	@ 0x57
 8007a2a:	e7d8      	b.n	80079de <_strtol_l.constprop.0+0x72>
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a30:	e7e1      	b.n	80079f6 <_strtol_l.constprop.0+0x8a>
 8007a32:	1c53      	adds	r3, r2, #1
 8007a34:	d108      	bne.n	8007a48 <_strtol_l.constprop.0+0xdc>
 8007a36:	2322      	movs	r3, #34	@ 0x22
 8007a38:	f8ce 3000 	str.w	r3, [lr]
 8007a3c:	4660      	mov	r0, ip
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	d0a0      	beq.n	8007986 <_strtol_l.constprop.0+0x1a>
 8007a44:	1e69      	subs	r1, r5, #1
 8007a46:	e006      	b.n	8007a56 <_strtol_l.constprop.0+0xea>
 8007a48:	b106      	cbz	r6, 8007a4c <_strtol_l.constprop.0+0xe0>
 8007a4a:	4240      	negs	r0, r0
 8007a4c:	f1b8 0f00 	cmp.w	r8, #0
 8007a50:	d099      	beq.n	8007986 <_strtol_l.constprop.0+0x1a>
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	d1f6      	bne.n	8007a44 <_strtol_l.constprop.0+0xd8>
 8007a56:	f8c8 1000 	str.w	r1, [r8]
 8007a5a:	e794      	b.n	8007986 <_strtol_l.constprop.0+0x1a>
 8007a5c:	0800a8d9 	.word	0x0800a8d9

08007a60 <_strtol_r>:
 8007a60:	f7ff bf84 	b.w	800796c <_strtol_l.constprop.0>

08007a64 <_fwalk_sglue>:
 8007a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a68:	4607      	mov	r7, r0
 8007a6a:	4688      	mov	r8, r1
 8007a6c:	4614      	mov	r4, r2
 8007a6e:	2600      	movs	r6, #0
 8007a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a74:	f1b9 0901 	subs.w	r9, r9, #1
 8007a78:	d505      	bpl.n	8007a86 <_fwalk_sglue+0x22>
 8007a7a:	6824      	ldr	r4, [r4, #0]
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	d1f7      	bne.n	8007a70 <_fwalk_sglue+0xc>
 8007a80:	4630      	mov	r0, r6
 8007a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d907      	bls.n	8007a9c <_fwalk_sglue+0x38>
 8007a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a90:	3301      	adds	r3, #1
 8007a92:	d003      	beq.n	8007a9c <_fwalk_sglue+0x38>
 8007a94:	4629      	mov	r1, r5
 8007a96:	4638      	mov	r0, r7
 8007a98:	47c0      	blx	r8
 8007a9a:	4306      	orrs	r6, r0
 8007a9c:	3568      	adds	r5, #104	@ 0x68
 8007a9e:	e7e9      	b.n	8007a74 <_fwalk_sglue+0x10>

08007aa0 <iprintf>:
 8007aa0:	b40f      	push	{r0, r1, r2, r3}
 8007aa2:	b507      	push	{r0, r1, r2, lr}
 8007aa4:	4906      	ldr	r1, [pc, #24]	@ (8007ac0 <iprintf+0x20>)
 8007aa6:	ab04      	add	r3, sp, #16
 8007aa8:	6808      	ldr	r0, [r1, #0]
 8007aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aae:	6881      	ldr	r1, [r0, #8]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	f001 fbeb 	bl	800928c <_vfiprintf_r>
 8007ab6:	b003      	add	sp, #12
 8007ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007abc:	b004      	add	sp, #16
 8007abe:	4770      	bx	lr
 8007ac0:	20000184 	.word	0x20000184

08007ac4 <_puts_r>:
 8007ac4:	6a03      	ldr	r3, [r0, #32]
 8007ac6:	b570      	push	{r4, r5, r6, lr}
 8007ac8:	6884      	ldr	r4, [r0, #8]
 8007aca:	4605      	mov	r5, r0
 8007acc:	460e      	mov	r6, r1
 8007ace:	b90b      	cbnz	r3, 8007ad4 <_puts_r+0x10>
 8007ad0:	f7ff f92a 	bl	8006d28 <__sinit>
 8007ad4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ad6:	07db      	lsls	r3, r3, #31
 8007ad8:	d405      	bmi.n	8007ae6 <_puts_r+0x22>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	0598      	lsls	r0, r3, #22
 8007ade:	d402      	bmi.n	8007ae6 <_puts_r+0x22>
 8007ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ae2:	f000 f8ac 	bl	8007c3e <__retarget_lock_acquire_recursive>
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	0719      	lsls	r1, r3, #28
 8007aea:	d502      	bpl.n	8007af2 <_puts_r+0x2e>
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d135      	bne.n	8007b5e <_puts_r+0x9a>
 8007af2:	4621      	mov	r1, r4
 8007af4:	4628      	mov	r0, r5
 8007af6:	f002 fbb7 	bl	800a268 <__swsetup_r>
 8007afa:	b380      	cbz	r0, 8007b5e <_puts_r+0x9a>
 8007afc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007b00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b02:	07da      	lsls	r2, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_puts_r+0x4e>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	059b      	lsls	r3, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_puts_r+0x4e>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b0e:	f000 f897 	bl	8007c40 <__retarget_lock_release_recursive>
 8007b12:	4628      	mov	r0, r5
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da04      	bge.n	8007b24 <_puts_r+0x60>
 8007b1a:	69a2      	ldr	r2, [r4, #24]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	dc17      	bgt.n	8007b50 <_puts_r+0x8c>
 8007b20:	290a      	cmp	r1, #10
 8007b22:	d015      	beq.n	8007b50 <_puts_r+0x8c>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	6022      	str	r2, [r4, #0]
 8007b2a:	7019      	strb	r1, [r3, #0]
 8007b2c:	68a3      	ldr	r3, [r4, #8]
 8007b2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b32:	3b01      	subs	r3, #1
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	2900      	cmp	r1, #0
 8007b38:	d1ed      	bne.n	8007b16 <_puts_r+0x52>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	da11      	bge.n	8007b62 <_puts_r+0x9e>
 8007b3e:	4622      	mov	r2, r4
 8007b40:	210a      	movs	r1, #10
 8007b42:	4628      	mov	r0, r5
 8007b44:	f002 fb51 	bl	800a1ea <__swbuf_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d0d7      	beq.n	8007afc <_puts_r+0x38>
 8007b4c:	250a      	movs	r5, #10
 8007b4e:	e7d7      	b.n	8007b00 <_puts_r+0x3c>
 8007b50:	4622      	mov	r2, r4
 8007b52:	4628      	mov	r0, r5
 8007b54:	f002 fb49 	bl	800a1ea <__swbuf_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d1e7      	bne.n	8007b2c <_puts_r+0x68>
 8007b5c:	e7ce      	b.n	8007afc <_puts_r+0x38>
 8007b5e:	3e01      	subs	r6, #1
 8007b60:	e7e4      	b.n	8007b2c <_puts_r+0x68>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	6022      	str	r2, [r4, #0]
 8007b68:	220a      	movs	r2, #10
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	e7ee      	b.n	8007b4c <_puts_r+0x88>
	...

08007b70 <puts>:
 8007b70:	4b02      	ldr	r3, [pc, #8]	@ (8007b7c <puts+0xc>)
 8007b72:	4601      	mov	r1, r0
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	f7ff bfa5 	b.w	8007ac4 <_puts_r>
 8007b7a:	bf00      	nop
 8007b7c:	20000184 	.word	0x20000184

08007b80 <strncmp>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	b16a      	cbz	r2, 8007ba0 <strncmp+0x20>
 8007b84:	3901      	subs	r1, #1
 8007b86:	1884      	adds	r4, r0, r2
 8007b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d103      	bne.n	8007b9c <strncmp+0x1c>
 8007b94:	42a0      	cmp	r0, r4
 8007b96:	d001      	beq.n	8007b9c <strncmp+0x1c>
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	d1f5      	bne.n	8007b88 <strncmp+0x8>
 8007b9c:	1ad0      	subs	r0, r2, r3
 8007b9e:	bd10      	pop	{r4, pc}
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	e7fc      	b.n	8007b9e <strncmp+0x1e>

08007ba4 <strstr>:
 8007ba4:	780a      	ldrb	r2, [r1, #0]
 8007ba6:	b570      	push	{r4, r5, r6, lr}
 8007ba8:	b96a      	cbnz	r2, 8007bc6 <strstr+0x22>
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d109      	bne.n	8007bc4 <strstr+0x20>
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0f6      	beq.n	8007baa <strstr+0x6>
 8007bbc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007bc0:	429e      	cmp	r6, r3
 8007bc2:	d0f7      	beq.n	8007bb4 <strstr+0x10>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	7803      	ldrb	r3, [r0, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1ef      	bne.n	8007bac <strstr+0x8>
 8007bcc:	4618      	mov	r0, r3
 8007bce:	e7ec      	b.n	8007baa <strstr+0x6>

08007bd0 <memset>:
 8007bd0:	4402      	add	r2, r0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d100      	bne.n	8007bda <memset+0xa>
 8007bd8:	4770      	bx	lr
 8007bda:	f803 1b01 	strb.w	r1, [r3], #1
 8007bde:	e7f9      	b.n	8007bd4 <memset+0x4>

08007be0 <_localeconv_r>:
 8007be0:	4800      	ldr	r0, [pc, #0]	@ (8007be4 <_localeconv_r+0x4>)
 8007be2:	4770      	bx	lr
 8007be4:	20000108 	.word	0x20000108

08007be8 <__errno>:
 8007be8:	4b01      	ldr	r3, [pc, #4]	@ (8007bf0 <__errno+0x8>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000184 	.word	0x20000184

08007bf4 <__libc_init_array>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8007c2c <__libc_init_array+0x38>)
 8007bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8007c30 <__libc_init_array+0x3c>)
 8007bfa:	1b64      	subs	r4, r4, r5
 8007bfc:	10a4      	asrs	r4, r4, #2
 8007bfe:	2600      	movs	r6, #0
 8007c00:	42a6      	cmp	r6, r4
 8007c02:	d109      	bne.n	8007c18 <__libc_init_array+0x24>
 8007c04:	4d0b      	ldr	r5, [pc, #44]	@ (8007c34 <__libc_init_array+0x40>)
 8007c06:	4c0c      	ldr	r4, [pc, #48]	@ (8007c38 <__libc_init_array+0x44>)
 8007c08:	f002 fd68 	bl	800a6dc <_init>
 8007c0c:	1b64      	subs	r4, r4, r5
 8007c0e:	10a4      	asrs	r4, r4, #2
 8007c10:	2600      	movs	r6, #0
 8007c12:	42a6      	cmp	r6, r4
 8007c14:	d105      	bne.n	8007c22 <__libc_init_array+0x2e>
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1c:	4798      	blx	r3
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7ee      	b.n	8007c00 <__libc_init_array+0xc>
 8007c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c26:	4798      	blx	r3
 8007c28:	3601      	adds	r6, #1
 8007c2a:	e7f2      	b.n	8007c12 <__libc_init_array+0x1e>
 8007c2c:	0800ac74 	.word	0x0800ac74
 8007c30:	0800ac74 	.word	0x0800ac74
 8007c34:	0800ac74 	.word	0x0800ac74
 8007c38:	0800ac78 	.word	0x0800ac78

08007c3c <__retarget_lock_init_recursive>:
 8007c3c:	4770      	bx	lr

08007c3e <__retarget_lock_acquire_recursive>:
 8007c3e:	4770      	bx	lr

08007c40 <__retarget_lock_release_recursive>:
 8007c40:	4770      	bx	lr

08007c42 <memcpy>:
 8007c42:	440a      	add	r2, r1
 8007c44:	4291      	cmp	r1, r2
 8007c46:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007c4a:	d100      	bne.n	8007c4e <memcpy+0xc>
 8007c4c:	4770      	bx	lr
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c58:	4291      	cmp	r1, r2
 8007c5a:	d1f9      	bne.n	8007c50 <memcpy+0xe>
 8007c5c:	bd10      	pop	{r4, pc}
	...

08007c60 <nan>:
 8007c60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007c68 <nan+0x8>
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	00000000 	.word	0x00000000
 8007c6c:	7ff80000 	.word	0x7ff80000

08007c70 <nanf>:
 8007c70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007c78 <nanf+0x8>
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	7fc00000 	.word	0x7fc00000

08007c7c <quorem>:
 8007c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	6903      	ldr	r3, [r0, #16]
 8007c82:	690c      	ldr	r4, [r1, #16]
 8007c84:	42a3      	cmp	r3, r4
 8007c86:	4607      	mov	r7, r0
 8007c88:	db7e      	blt.n	8007d88 <quorem+0x10c>
 8007c8a:	3c01      	subs	r4, #1
 8007c8c:	f101 0814 	add.w	r8, r1, #20
 8007c90:	00a3      	lsls	r3, r4, #2
 8007c92:	f100 0514 	add.w	r5, r0, #20
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ca2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cae:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cb2:	d32e      	bcc.n	8007d12 <quorem+0x96>
 8007cb4:	f04f 0a00 	mov.w	sl, #0
 8007cb8:	46c4      	mov	ip, r8
 8007cba:	46ae      	mov	lr, r5
 8007cbc:	46d3      	mov	fp, sl
 8007cbe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cc2:	b298      	uxth	r0, r3
 8007cc4:	fb06 a000 	mla	r0, r6, r0, sl
 8007cc8:	0c02      	lsrs	r2, r0, #16
 8007cca:	0c1b      	lsrs	r3, r3, #16
 8007ccc:	fb06 2303 	mla	r3, r6, r3, r2
 8007cd0:	f8de 2000 	ldr.w	r2, [lr]
 8007cd4:	b280      	uxth	r0, r0
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	1a12      	subs	r2, r2, r0
 8007cda:	445a      	add	r2, fp
 8007cdc:	f8de 0000 	ldr.w	r0, [lr]
 8007ce0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007cea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007cee:	b292      	uxth	r2, r2
 8007cf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cf4:	45e1      	cmp	r9, ip
 8007cf6:	f84e 2b04 	str.w	r2, [lr], #4
 8007cfa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007cfe:	d2de      	bcs.n	8007cbe <quorem+0x42>
 8007d00:	9b00      	ldr	r3, [sp, #0]
 8007d02:	58eb      	ldr	r3, [r5, r3]
 8007d04:	b92b      	cbnz	r3, 8007d12 <quorem+0x96>
 8007d06:	9b01      	ldr	r3, [sp, #4]
 8007d08:	3b04      	subs	r3, #4
 8007d0a:	429d      	cmp	r5, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	d32f      	bcc.n	8007d70 <quorem+0xf4>
 8007d10:	613c      	str	r4, [r7, #16]
 8007d12:	4638      	mov	r0, r7
 8007d14:	f002 f80a 	bl	8009d2c <__mcmp>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	db25      	blt.n	8007d68 <quorem+0xec>
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d24:	f8d1 c000 	ldr.w	ip, [r1]
 8007d28:	fa1f fe82 	uxth.w	lr, r2
 8007d2c:	fa1f f38c 	uxth.w	r3, ip
 8007d30:	eba3 030e 	sub.w	r3, r3, lr
 8007d34:	4403      	add	r3, r0
 8007d36:	0c12      	lsrs	r2, r2, #16
 8007d38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d46:	45c1      	cmp	r9, r8
 8007d48:	f841 3b04 	str.w	r3, [r1], #4
 8007d4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d50:	d2e6      	bcs.n	8007d20 <quorem+0xa4>
 8007d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d5a:	b922      	cbnz	r2, 8007d66 <quorem+0xea>
 8007d5c:	3b04      	subs	r3, #4
 8007d5e:	429d      	cmp	r5, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	d30b      	bcc.n	8007d7c <quorem+0x100>
 8007d64:	613c      	str	r4, [r7, #16]
 8007d66:	3601      	adds	r6, #1
 8007d68:	4630      	mov	r0, r6
 8007d6a:	b003      	add	sp, #12
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d70:	6812      	ldr	r2, [r2, #0]
 8007d72:	3b04      	subs	r3, #4
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	d1cb      	bne.n	8007d10 <quorem+0x94>
 8007d78:	3c01      	subs	r4, #1
 8007d7a:	e7c6      	b.n	8007d0a <quorem+0x8e>
 8007d7c:	6812      	ldr	r2, [r2, #0]
 8007d7e:	3b04      	subs	r3, #4
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	d1ef      	bne.n	8007d64 <quorem+0xe8>
 8007d84:	3c01      	subs	r4, #1
 8007d86:	e7ea      	b.n	8007d5e <quorem+0xe2>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e7ee      	b.n	8007d6a <quorem+0xee>
 8007d8c:	0000      	movs	r0, r0
	...

08007d90 <_dtoa_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	69c7      	ldr	r7, [r0, #28]
 8007d96:	b099      	sub	sp, #100	@ 0x64
 8007d98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d9c:	ec55 4b10 	vmov	r4, r5, d0
 8007da0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007da2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007da4:	4683      	mov	fp, r0
 8007da6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007da8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007daa:	b97f      	cbnz	r7, 8007dcc <_dtoa_r+0x3c>
 8007dac:	2010      	movs	r0, #16
 8007dae:	f001 fb85 	bl	80094bc <malloc>
 8007db2:	4602      	mov	r2, r0
 8007db4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007db8:	b920      	cbnz	r0, 8007dc4 <_dtoa_r+0x34>
 8007dba:	4ba7      	ldr	r3, [pc, #668]	@ (8008058 <_dtoa_r+0x2c8>)
 8007dbc:	21ef      	movs	r1, #239	@ 0xef
 8007dbe:	48a7      	ldr	r0, [pc, #668]	@ (800805c <_dtoa_r+0x2cc>)
 8007dc0:	f002 fbaa 	bl	800a518 <__assert_func>
 8007dc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007dc8:	6007      	str	r7, [r0, #0]
 8007dca:	60c7      	str	r7, [r0, #12]
 8007dcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007dd0:	6819      	ldr	r1, [r3, #0]
 8007dd2:	b159      	cbz	r1, 8007dec <_dtoa_r+0x5c>
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	604a      	str	r2, [r1, #4]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	4093      	lsls	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
 8007dde:	4658      	mov	r0, fp
 8007de0:	f001 fd20 	bl	8009824 <_Bfree>
 8007de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	1e2b      	subs	r3, r5, #0
 8007dee:	bfb9      	ittee	lt
 8007df0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007df4:	9303      	strlt	r3, [sp, #12]
 8007df6:	2300      	movge	r3, #0
 8007df8:	6033      	strge	r3, [r6, #0]
 8007dfa:	9f03      	ldr	r7, [sp, #12]
 8007dfc:	4b98      	ldr	r3, [pc, #608]	@ (8008060 <_dtoa_r+0x2d0>)
 8007dfe:	bfbc      	itt	lt
 8007e00:	2201      	movlt	r2, #1
 8007e02:	6032      	strlt	r2, [r6, #0]
 8007e04:	43bb      	bics	r3, r7
 8007e06:	d112      	bne.n	8007e2e <_dtoa_r+0x9e>
 8007e08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e14:	4323      	orrs	r3, r4
 8007e16:	f000 854d 	beq.w	80088b4 <_dtoa_r+0xb24>
 8007e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008074 <_dtoa_r+0x2e4>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 854f 	beq.w	80088c4 <_dtoa_r+0xb34>
 8007e26:	f10a 0303 	add.w	r3, sl, #3
 8007e2a:	f000 bd49 	b.w	80088c0 <_dtoa_r+0xb30>
 8007e2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	ec51 0b17 	vmov	r0, r1, d7
 8007e38:	2300      	movs	r3, #0
 8007e3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007e3e:	f7f8 fe6b 	bl	8000b18 <__aeabi_dcmpeq>
 8007e42:	4680      	mov	r8, r0
 8007e44:	b158      	cbz	r0, 8007e5e <_dtoa_r+0xce>
 8007e46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e48:	2301      	movs	r3, #1
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e4e:	b113      	cbz	r3, 8007e56 <_dtoa_r+0xc6>
 8007e50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e52:	4b84      	ldr	r3, [pc, #528]	@ (8008064 <_dtoa_r+0x2d4>)
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008078 <_dtoa_r+0x2e8>
 8007e5a:	f000 bd33 	b.w	80088c4 <_dtoa_r+0xb34>
 8007e5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007e62:	aa16      	add	r2, sp, #88	@ 0x58
 8007e64:	a917      	add	r1, sp, #92	@ 0x5c
 8007e66:	4658      	mov	r0, fp
 8007e68:	f002 f880 	bl	8009f6c <__d2b>
 8007e6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007e70:	4681      	mov	r9, r0
 8007e72:	2e00      	cmp	r6, #0
 8007e74:	d077      	beq.n	8007f66 <_dtoa_r+0x1d6>
 8007e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e90:	4619      	mov	r1, r3
 8007e92:	2200      	movs	r2, #0
 8007e94:	4b74      	ldr	r3, [pc, #464]	@ (8008068 <_dtoa_r+0x2d8>)
 8007e96:	f7f8 fa1f 	bl	80002d8 <__aeabi_dsub>
 8007e9a:	a369      	add	r3, pc, #420	@ (adr r3, 8008040 <_dtoa_r+0x2b0>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 fbd2 	bl	8000648 <__aeabi_dmul>
 8007ea4:	a368      	add	r3, pc, #416	@ (adr r3, 8008048 <_dtoa_r+0x2b8>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f7f8 fa17 	bl	80002dc <__adddf3>
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	f7f8 fb5e 	bl	8000574 <__aeabi_i2d>
 8007eb8:	a365      	add	r3, pc, #404	@ (adr r3, 8008050 <_dtoa_r+0x2c0>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 fbc3 	bl	8000648 <__aeabi_dmul>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	4629      	mov	r1, r5
 8007eca:	f7f8 fa07 	bl	80002dc <__adddf3>
 8007ece:	4604      	mov	r4, r0
 8007ed0:	460d      	mov	r5, r1
 8007ed2:	f7f8 fe69 	bl	8000ba8 <__aeabi_d2iz>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4607      	mov	r7, r0
 8007eda:	2300      	movs	r3, #0
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 fe24 	bl	8000b2c <__aeabi_dcmplt>
 8007ee4:	b140      	cbz	r0, 8007ef8 <_dtoa_r+0x168>
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	f7f8 fb44 	bl	8000574 <__aeabi_i2d>
 8007eec:	4622      	mov	r2, r4
 8007eee:	462b      	mov	r3, r5
 8007ef0:	f7f8 fe12 	bl	8000b18 <__aeabi_dcmpeq>
 8007ef4:	b900      	cbnz	r0, 8007ef8 <_dtoa_r+0x168>
 8007ef6:	3f01      	subs	r7, #1
 8007ef8:	2f16      	cmp	r7, #22
 8007efa:	d851      	bhi.n	8007fa0 <_dtoa_r+0x210>
 8007efc:	4b5b      	ldr	r3, [pc, #364]	@ (800806c <_dtoa_r+0x2dc>)
 8007efe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f0a:	f7f8 fe0f 	bl	8000b2c <__aeabi_dcmplt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d048      	beq.n	8007fa4 <_dtoa_r+0x214>
 8007f12:	3f01      	subs	r7, #1
 8007f14:	2300      	movs	r3, #0
 8007f16:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f1a:	1b9b      	subs	r3, r3, r6
 8007f1c:	1e5a      	subs	r2, r3, #1
 8007f1e:	bf44      	itt	mi
 8007f20:	f1c3 0801 	rsbmi	r8, r3, #1
 8007f24:	2300      	movmi	r3, #0
 8007f26:	9208      	str	r2, [sp, #32]
 8007f28:	bf54      	ite	pl
 8007f2a:	f04f 0800 	movpl.w	r8, #0
 8007f2e:	9308      	strmi	r3, [sp, #32]
 8007f30:	2f00      	cmp	r7, #0
 8007f32:	db39      	blt.n	8007fa8 <_dtoa_r+0x218>
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007f38:	443b      	add	r3, r7
 8007f3a:	9308      	str	r3, [sp, #32]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f42:	2b09      	cmp	r3, #9
 8007f44:	d864      	bhi.n	8008010 <_dtoa_r+0x280>
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	bfc4      	itt	gt
 8007f4a:	3b04      	subgt	r3, #4
 8007f4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f50:	f1a3 0302 	sub.w	r3, r3, #2
 8007f54:	bfcc      	ite	gt
 8007f56:	2400      	movgt	r4, #0
 8007f58:	2401      	movle	r4, #1
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d863      	bhi.n	8008026 <_dtoa_r+0x296>
 8007f5e:	e8df f003 	tbb	[pc, r3]
 8007f62:	372a      	.short	0x372a
 8007f64:	5535      	.short	0x5535
 8007f66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007f6a:	441e      	add	r6, r3
 8007f6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	bfc1      	itttt	gt
 8007f74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f78:	409f      	lslgt	r7, r3
 8007f7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f82:	bfd6      	itet	le
 8007f84:	f1c3 0320 	rsble	r3, r3, #32
 8007f88:	ea47 0003 	orrgt.w	r0, r7, r3
 8007f8c:	fa04 f003 	lslle.w	r0, r4, r3
 8007f90:	f7f8 fae0 	bl	8000554 <__aeabi_ui2d>
 8007f94:	2201      	movs	r2, #1
 8007f96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f9a:	3e01      	subs	r6, #1
 8007f9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007f9e:	e777      	b.n	8007e90 <_dtoa_r+0x100>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e7b8      	b.n	8007f16 <_dtoa_r+0x186>
 8007fa4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007fa6:	e7b7      	b.n	8007f18 <_dtoa_r+0x188>
 8007fa8:	427b      	negs	r3, r7
 8007faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fac:	2300      	movs	r3, #0
 8007fae:	eba8 0807 	sub.w	r8, r8, r7
 8007fb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fb4:	e7c4      	b.n	8007f40 <_dtoa_r+0x1b0>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc35      	bgt.n	800802c <_dtoa_r+0x29c>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	9307      	str	r3, [sp, #28]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007fca:	e00b      	b.n	8007fe4 <_dtoa_r+0x254>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e7f3      	b.n	8007fb8 <_dtoa_r+0x228>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fd6:	18fb      	adds	r3, r7, r3
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	bfb8      	it	lt
 8007fe2:	2301      	movlt	r3, #1
 8007fe4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	2204      	movs	r2, #4
 8007fec:	f102 0514 	add.w	r5, r2, #20
 8007ff0:	429d      	cmp	r5, r3
 8007ff2:	d91f      	bls.n	8008034 <_dtoa_r+0x2a4>
 8007ff4:	6041      	str	r1, [r0, #4]
 8007ff6:	4658      	mov	r0, fp
 8007ff8:	f001 fbd4 	bl	80097a4 <_Balloc>
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d13c      	bne.n	800807c <_dtoa_r+0x2ec>
 8008002:	4b1b      	ldr	r3, [pc, #108]	@ (8008070 <_dtoa_r+0x2e0>)
 8008004:	4602      	mov	r2, r0
 8008006:	f240 11af 	movw	r1, #431	@ 0x1af
 800800a:	e6d8      	b.n	8007dbe <_dtoa_r+0x2e>
 800800c:	2301      	movs	r3, #1
 800800e:	e7e0      	b.n	8007fd2 <_dtoa_r+0x242>
 8008010:	2401      	movs	r4, #1
 8008012:	2300      	movs	r3, #0
 8008014:	9309      	str	r3, [sp, #36]	@ 0x24
 8008016:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	9307      	str	r3, [sp, #28]
 8008020:	2200      	movs	r2, #0
 8008022:	2312      	movs	r3, #18
 8008024:	e7d0      	b.n	8007fc8 <_dtoa_r+0x238>
 8008026:	2301      	movs	r3, #1
 8008028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800802a:	e7f5      	b.n	8008018 <_dtoa_r+0x288>
 800802c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	9307      	str	r3, [sp, #28]
 8008032:	e7d7      	b.n	8007fe4 <_dtoa_r+0x254>
 8008034:	3101      	adds	r1, #1
 8008036:	0052      	lsls	r2, r2, #1
 8008038:	e7d8      	b.n	8007fec <_dtoa_r+0x25c>
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w
 8008040:	636f4361 	.word	0x636f4361
 8008044:	3fd287a7 	.word	0x3fd287a7
 8008048:	8b60c8b3 	.word	0x8b60c8b3
 800804c:	3fc68a28 	.word	0x3fc68a28
 8008050:	509f79fb 	.word	0x509f79fb
 8008054:	3fd34413 	.word	0x3fd34413
 8008058:	0800a9e6 	.word	0x0800a9e6
 800805c:	0800a9fd 	.word	0x0800a9fd
 8008060:	7ff00000 	.word	0x7ff00000
 8008064:	0800a851 	.word	0x0800a851
 8008068:	3ff80000 	.word	0x3ff80000
 800806c:	0800ab68 	.word	0x0800ab68
 8008070:	0800aa55 	.word	0x0800aa55
 8008074:	0800a9e2 	.word	0x0800a9e2
 8008078:	0800a850 	.word	0x0800a850
 800807c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008080:	6018      	str	r0, [r3, #0]
 8008082:	9b07      	ldr	r3, [sp, #28]
 8008084:	2b0e      	cmp	r3, #14
 8008086:	f200 80a4 	bhi.w	80081d2 <_dtoa_r+0x442>
 800808a:	2c00      	cmp	r4, #0
 800808c:	f000 80a1 	beq.w	80081d2 <_dtoa_r+0x442>
 8008090:	2f00      	cmp	r7, #0
 8008092:	dd33      	ble.n	80080fc <_dtoa_r+0x36c>
 8008094:	4bad      	ldr	r3, [pc, #692]	@ (800834c <_dtoa_r+0x5bc>)
 8008096:	f007 020f 	and.w	r2, r7, #15
 800809a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800809e:	ed93 7b00 	vldr	d7, [r3]
 80080a2:	05f8      	lsls	r0, r7, #23
 80080a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80080a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80080ac:	d516      	bpl.n	80080dc <_dtoa_r+0x34c>
 80080ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008350 <_dtoa_r+0x5c0>)
 80080b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080b8:	f7f8 fbf0 	bl	800089c <__aeabi_ddiv>
 80080bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c0:	f004 040f 	and.w	r4, r4, #15
 80080c4:	2603      	movs	r6, #3
 80080c6:	4da2      	ldr	r5, [pc, #648]	@ (8008350 <_dtoa_r+0x5c0>)
 80080c8:	b954      	cbnz	r4, 80080e0 <_dtoa_r+0x350>
 80080ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d2:	f7f8 fbe3 	bl	800089c <__aeabi_ddiv>
 80080d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080da:	e028      	b.n	800812e <_dtoa_r+0x39e>
 80080dc:	2602      	movs	r6, #2
 80080de:	e7f2      	b.n	80080c6 <_dtoa_r+0x336>
 80080e0:	07e1      	lsls	r1, r4, #31
 80080e2:	d508      	bpl.n	80080f6 <_dtoa_r+0x366>
 80080e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080ec:	f7f8 faac 	bl	8000648 <__aeabi_dmul>
 80080f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080f4:	3601      	adds	r6, #1
 80080f6:	1064      	asrs	r4, r4, #1
 80080f8:	3508      	adds	r5, #8
 80080fa:	e7e5      	b.n	80080c8 <_dtoa_r+0x338>
 80080fc:	f000 80d2 	beq.w	80082a4 <_dtoa_r+0x514>
 8008100:	427c      	negs	r4, r7
 8008102:	4b92      	ldr	r3, [pc, #584]	@ (800834c <_dtoa_r+0x5bc>)
 8008104:	4d92      	ldr	r5, [pc, #584]	@ (8008350 <_dtoa_r+0x5c0>)
 8008106:	f004 020f 	and.w	r2, r4, #15
 800810a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008116:	f7f8 fa97 	bl	8000648 <__aeabi_dmul>
 800811a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800811e:	1124      	asrs	r4, r4, #4
 8008120:	2300      	movs	r3, #0
 8008122:	2602      	movs	r6, #2
 8008124:	2c00      	cmp	r4, #0
 8008126:	f040 80b2 	bne.w	800828e <_dtoa_r+0x4fe>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1d3      	bne.n	80080d6 <_dtoa_r+0x346>
 800812e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008130:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80b7 	beq.w	80082a8 <_dtoa_r+0x518>
 800813a:	4b86      	ldr	r3, [pc, #536]	@ (8008354 <_dtoa_r+0x5c4>)
 800813c:	2200      	movs	r2, #0
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 fcf3 	bl	8000b2c <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f000 80ae 	beq.w	80082a8 <_dtoa_r+0x518>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 80aa 	beq.w	80082a8 <_dtoa_r+0x518>
 8008154:	9b00      	ldr	r3, [sp, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	dd37      	ble.n	80081ca <_dtoa_r+0x43a>
 800815a:	1e7b      	subs	r3, r7, #1
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	4620      	mov	r0, r4
 8008160:	4b7d      	ldr	r3, [pc, #500]	@ (8008358 <_dtoa_r+0x5c8>)
 8008162:	2200      	movs	r2, #0
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 fa6f 	bl	8000648 <__aeabi_dmul>
 800816a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800816e:	9c00      	ldr	r4, [sp, #0]
 8008170:	3601      	adds	r6, #1
 8008172:	4630      	mov	r0, r6
 8008174:	f7f8 f9fe 	bl	8000574 <__aeabi_i2d>
 8008178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800817c:	f7f8 fa64 	bl	8000648 <__aeabi_dmul>
 8008180:	4b76      	ldr	r3, [pc, #472]	@ (800835c <_dtoa_r+0x5cc>)
 8008182:	2200      	movs	r2, #0
 8008184:	f7f8 f8aa 	bl	80002dc <__adddf3>
 8008188:	4605      	mov	r5, r0
 800818a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800818e:	2c00      	cmp	r4, #0
 8008190:	f040 808d 	bne.w	80082ae <_dtoa_r+0x51e>
 8008194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008198:	4b71      	ldr	r3, [pc, #452]	@ (8008360 <_dtoa_r+0x5d0>)
 800819a:	2200      	movs	r2, #0
 800819c:	f7f8 f89c 	bl	80002d8 <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081a8:	462a      	mov	r2, r5
 80081aa:	4633      	mov	r3, r6
 80081ac:	f7f8 fcdc 	bl	8000b68 <__aeabi_dcmpgt>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	f040 828b 	bne.w	80086cc <_dtoa_r+0x93c>
 80081b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ba:	462a      	mov	r2, r5
 80081bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081c0:	f7f8 fcb4 	bl	8000b2c <__aeabi_dcmplt>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f040 8128 	bne.w	800841a <_dtoa_r+0x68a>
 80081ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80081ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80081d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f2c0 815a 	blt.w	800848e <_dtoa_r+0x6fe>
 80081da:	2f0e      	cmp	r7, #14
 80081dc:	f300 8157 	bgt.w	800848e <_dtoa_r+0x6fe>
 80081e0:	4b5a      	ldr	r3, [pc, #360]	@ (800834c <_dtoa_r+0x5bc>)
 80081e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081e6:	ed93 7b00 	vldr	d7, [r3]
 80081ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	ed8d 7b00 	vstr	d7, [sp]
 80081f2:	da03      	bge.n	80081fc <_dtoa_r+0x46c>
 80081f4:	9b07      	ldr	r3, [sp, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f340 8101 	ble.w	80083fe <_dtoa_r+0x66e>
 80081fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008200:	4656      	mov	r6, sl
 8008202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008206:	4620      	mov	r0, r4
 8008208:	4629      	mov	r1, r5
 800820a:	f7f8 fb47 	bl	800089c <__aeabi_ddiv>
 800820e:	f7f8 fccb 	bl	8000ba8 <__aeabi_d2iz>
 8008212:	4680      	mov	r8, r0
 8008214:	f7f8 f9ae 	bl	8000574 <__aeabi_i2d>
 8008218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800821c:	f7f8 fa14 	bl	8000648 <__aeabi_dmul>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800822c:	f7f8 f854 	bl	80002d8 <__aeabi_dsub>
 8008230:	f806 4b01 	strb.w	r4, [r6], #1
 8008234:	9d07      	ldr	r5, [sp, #28]
 8008236:	eba6 040a 	sub.w	r4, r6, sl
 800823a:	42a5      	cmp	r5, r4
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	f040 8117 	bne.w	8008472 <_dtoa_r+0x6e2>
 8008244:	f7f8 f84a 	bl	80002dc <__adddf3>
 8008248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800824c:	4604      	mov	r4, r0
 800824e:	460d      	mov	r5, r1
 8008250:	f7f8 fc8a 	bl	8000b68 <__aeabi_dcmpgt>
 8008254:	2800      	cmp	r0, #0
 8008256:	f040 80f9 	bne.w	800844c <_dtoa_r+0x6bc>
 800825a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800825e:	4620      	mov	r0, r4
 8008260:	4629      	mov	r1, r5
 8008262:	f7f8 fc59 	bl	8000b18 <__aeabi_dcmpeq>
 8008266:	b118      	cbz	r0, 8008270 <_dtoa_r+0x4e0>
 8008268:	f018 0f01 	tst.w	r8, #1
 800826c:	f040 80ee 	bne.w	800844c <_dtoa_r+0x6bc>
 8008270:	4649      	mov	r1, r9
 8008272:	4658      	mov	r0, fp
 8008274:	f001 fad6 	bl	8009824 <_Bfree>
 8008278:	2300      	movs	r3, #0
 800827a:	7033      	strb	r3, [r6, #0]
 800827c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800827e:	3701      	adds	r7, #1
 8008280:	601f      	str	r7, [r3, #0]
 8008282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 831d 	beq.w	80088c4 <_dtoa_r+0xb34>
 800828a:	601e      	str	r6, [r3, #0]
 800828c:	e31a      	b.n	80088c4 <_dtoa_r+0xb34>
 800828e:	07e2      	lsls	r2, r4, #31
 8008290:	d505      	bpl.n	800829e <_dtoa_r+0x50e>
 8008292:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008296:	f7f8 f9d7 	bl	8000648 <__aeabi_dmul>
 800829a:	3601      	adds	r6, #1
 800829c:	2301      	movs	r3, #1
 800829e:	1064      	asrs	r4, r4, #1
 80082a0:	3508      	adds	r5, #8
 80082a2:	e73f      	b.n	8008124 <_dtoa_r+0x394>
 80082a4:	2602      	movs	r6, #2
 80082a6:	e742      	b.n	800812e <_dtoa_r+0x39e>
 80082a8:	9c07      	ldr	r4, [sp, #28]
 80082aa:	9704      	str	r7, [sp, #16]
 80082ac:	e761      	b.n	8008172 <_dtoa_r+0x3e2>
 80082ae:	4b27      	ldr	r3, [pc, #156]	@ (800834c <_dtoa_r+0x5bc>)
 80082b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082ba:	4454      	add	r4, sl
 80082bc:	2900      	cmp	r1, #0
 80082be:	d053      	beq.n	8008368 <_dtoa_r+0x5d8>
 80082c0:	4928      	ldr	r1, [pc, #160]	@ (8008364 <_dtoa_r+0x5d4>)
 80082c2:	2000      	movs	r0, #0
 80082c4:	f7f8 faea 	bl	800089c <__aeabi_ddiv>
 80082c8:	4633      	mov	r3, r6
 80082ca:	462a      	mov	r2, r5
 80082cc:	f7f8 f804 	bl	80002d8 <__aeabi_dsub>
 80082d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082d4:	4656      	mov	r6, sl
 80082d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082da:	f7f8 fc65 	bl	8000ba8 <__aeabi_d2iz>
 80082de:	4605      	mov	r5, r0
 80082e0:	f7f8 f948 	bl	8000574 <__aeabi_i2d>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ec:	f7f7 fff4 	bl	80002d8 <__aeabi_dsub>
 80082f0:	3530      	adds	r5, #48	@ 0x30
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082fa:	f806 5b01 	strb.w	r5, [r6], #1
 80082fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008302:	f7f8 fc13 	bl	8000b2c <__aeabi_dcmplt>
 8008306:	2800      	cmp	r0, #0
 8008308:	d171      	bne.n	80083ee <_dtoa_r+0x65e>
 800830a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800830e:	4911      	ldr	r1, [pc, #68]	@ (8008354 <_dtoa_r+0x5c4>)
 8008310:	2000      	movs	r0, #0
 8008312:	f7f7 ffe1 	bl	80002d8 <__aeabi_dsub>
 8008316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800831a:	f7f8 fc07 	bl	8000b2c <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	f040 8095 	bne.w	800844e <_dtoa_r+0x6be>
 8008324:	42a6      	cmp	r6, r4
 8008326:	f43f af50 	beq.w	80081ca <_dtoa_r+0x43a>
 800832a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800832e:	4b0a      	ldr	r3, [pc, #40]	@ (8008358 <_dtoa_r+0x5c8>)
 8008330:	2200      	movs	r2, #0
 8008332:	f7f8 f989 	bl	8000648 <__aeabi_dmul>
 8008336:	4b08      	ldr	r3, [pc, #32]	@ (8008358 <_dtoa_r+0x5c8>)
 8008338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800833c:	2200      	movs	r2, #0
 800833e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008342:	f7f8 f981 	bl	8000648 <__aeabi_dmul>
 8008346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800834a:	e7c4      	b.n	80082d6 <_dtoa_r+0x546>
 800834c:	0800ab68 	.word	0x0800ab68
 8008350:	0800ab40 	.word	0x0800ab40
 8008354:	3ff00000 	.word	0x3ff00000
 8008358:	40240000 	.word	0x40240000
 800835c:	401c0000 	.word	0x401c0000
 8008360:	40140000 	.word	0x40140000
 8008364:	3fe00000 	.word	0x3fe00000
 8008368:	4631      	mov	r1, r6
 800836a:	4628      	mov	r0, r5
 800836c:	f7f8 f96c 	bl	8000648 <__aeabi_dmul>
 8008370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008374:	9415      	str	r4, [sp, #84]	@ 0x54
 8008376:	4656      	mov	r6, sl
 8008378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800837c:	f7f8 fc14 	bl	8000ba8 <__aeabi_d2iz>
 8008380:	4605      	mov	r5, r0
 8008382:	f7f8 f8f7 	bl	8000574 <__aeabi_i2d>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838e:	f7f7 ffa3 	bl	80002d8 <__aeabi_dsub>
 8008392:	3530      	adds	r5, #48	@ 0x30
 8008394:	f806 5b01 	strb.w	r5, [r6], #1
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	42a6      	cmp	r6, r4
 800839e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083a2:	f04f 0200 	mov.w	r2, #0
 80083a6:	d124      	bne.n	80083f2 <_dtoa_r+0x662>
 80083a8:	4bac      	ldr	r3, [pc, #688]	@ (800865c <_dtoa_r+0x8cc>)
 80083aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083ae:	f7f7 ff95 	bl	80002dc <__adddf3>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ba:	f7f8 fbd5 	bl	8000b68 <__aeabi_dcmpgt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d145      	bne.n	800844e <_dtoa_r+0x6be>
 80083c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083c6:	49a5      	ldr	r1, [pc, #660]	@ (800865c <_dtoa_r+0x8cc>)
 80083c8:	2000      	movs	r0, #0
 80083ca:	f7f7 ff85 	bl	80002d8 <__aeabi_dsub>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083d6:	f7f8 fba9 	bl	8000b2c <__aeabi_dcmplt>
 80083da:	2800      	cmp	r0, #0
 80083dc:	f43f aef5 	beq.w	80081ca <_dtoa_r+0x43a>
 80083e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80083e2:	1e73      	subs	r3, r6, #1
 80083e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80083e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083ea:	2b30      	cmp	r3, #48	@ 0x30
 80083ec:	d0f8      	beq.n	80083e0 <_dtoa_r+0x650>
 80083ee:	9f04      	ldr	r7, [sp, #16]
 80083f0:	e73e      	b.n	8008270 <_dtoa_r+0x4e0>
 80083f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008660 <_dtoa_r+0x8d0>)
 80083f4:	f7f8 f928 	bl	8000648 <__aeabi_dmul>
 80083f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083fc:	e7bc      	b.n	8008378 <_dtoa_r+0x5e8>
 80083fe:	d10c      	bne.n	800841a <_dtoa_r+0x68a>
 8008400:	4b98      	ldr	r3, [pc, #608]	@ (8008664 <_dtoa_r+0x8d4>)
 8008402:	2200      	movs	r2, #0
 8008404:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008408:	f7f8 f91e 	bl	8000648 <__aeabi_dmul>
 800840c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008410:	f7f8 fba0 	bl	8000b54 <__aeabi_dcmpge>
 8008414:	2800      	cmp	r0, #0
 8008416:	f000 8157 	beq.w	80086c8 <_dtoa_r+0x938>
 800841a:	2400      	movs	r4, #0
 800841c:	4625      	mov	r5, r4
 800841e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008420:	43db      	mvns	r3, r3
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	4656      	mov	r6, sl
 8008426:	2700      	movs	r7, #0
 8008428:	4621      	mov	r1, r4
 800842a:	4658      	mov	r0, fp
 800842c:	f001 f9fa 	bl	8009824 <_Bfree>
 8008430:	2d00      	cmp	r5, #0
 8008432:	d0dc      	beq.n	80083ee <_dtoa_r+0x65e>
 8008434:	b12f      	cbz	r7, 8008442 <_dtoa_r+0x6b2>
 8008436:	42af      	cmp	r7, r5
 8008438:	d003      	beq.n	8008442 <_dtoa_r+0x6b2>
 800843a:	4639      	mov	r1, r7
 800843c:	4658      	mov	r0, fp
 800843e:	f001 f9f1 	bl	8009824 <_Bfree>
 8008442:	4629      	mov	r1, r5
 8008444:	4658      	mov	r0, fp
 8008446:	f001 f9ed 	bl	8009824 <_Bfree>
 800844a:	e7d0      	b.n	80083ee <_dtoa_r+0x65e>
 800844c:	9704      	str	r7, [sp, #16]
 800844e:	4633      	mov	r3, r6
 8008450:	461e      	mov	r6, r3
 8008452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008456:	2a39      	cmp	r2, #57	@ 0x39
 8008458:	d107      	bne.n	800846a <_dtoa_r+0x6da>
 800845a:	459a      	cmp	sl, r3
 800845c:	d1f8      	bne.n	8008450 <_dtoa_r+0x6c0>
 800845e:	9a04      	ldr	r2, [sp, #16]
 8008460:	3201      	adds	r2, #1
 8008462:	9204      	str	r2, [sp, #16]
 8008464:	2230      	movs	r2, #48	@ 0x30
 8008466:	f88a 2000 	strb.w	r2, [sl]
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	3201      	adds	r2, #1
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	e7bd      	b.n	80083ee <_dtoa_r+0x65e>
 8008472:	4b7b      	ldr	r3, [pc, #492]	@ (8008660 <_dtoa_r+0x8d0>)
 8008474:	2200      	movs	r2, #0
 8008476:	f7f8 f8e7 	bl	8000648 <__aeabi_dmul>
 800847a:	2200      	movs	r2, #0
 800847c:	2300      	movs	r3, #0
 800847e:	4604      	mov	r4, r0
 8008480:	460d      	mov	r5, r1
 8008482:	f7f8 fb49 	bl	8000b18 <__aeabi_dcmpeq>
 8008486:	2800      	cmp	r0, #0
 8008488:	f43f aebb 	beq.w	8008202 <_dtoa_r+0x472>
 800848c:	e6f0      	b.n	8008270 <_dtoa_r+0x4e0>
 800848e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008490:	2a00      	cmp	r2, #0
 8008492:	f000 80db 	beq.w	800864c <_dtoa_r+0x8bc>
 8008496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008498:	2a01      	cmp	r2, #1
 800849a:	f300 80bf 	bgt.w	800861c <_dtoa_r+0x88c>
 800849e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80084a0:	2a00      	cmp	r2, #0
 80084a2:	f000 80b7 	beq.w	8008614 <_dtoa_r+0x884>
 80084a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80084aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084ac:	4646      	mov	r6, r8
 80084ae:	9a08      	ldr	r2, [sp, #32]
 80084b0:	2101      	movs	r1, #1
 80084b2:	441a      	add	r2, r3
 80084b4:	4658      	mov	r0, fp
 80084b6:	4498      	add	r8, r3
 80084b8:	9208      	str	r2, [sp, #32]
 80084ba:	f001 fab1 	bl	8009a20 <__i2b>
 80084be:	4605      	mov	r5, r0
 80084c0:	b15e      	cbz	r6, 80084da <_dtoa_r+0x74a>
 80084c2:	9b08      	ldr	r3, [sp, #32]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dd08      	ble.n	80084da <_dtoa_r+0x74a>
 80084c8:	42b3      	cmp	r3, r6
 80084ca:	9a08      	ldr	r2, [sp, #32]
 80084cc:	bfa8      	it	ge
 80084ce:	4633      	movge	r3, r6
 80084d0:	eba8 0803 	sub.w	r8, r8, r3
 80084d4:	1af6      	subs	r6, r6, r3
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	9308      	str	r3, [sp, #32]
 80084da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084dc:	b1f3      	cbz	r3, 800851c <_dtoa_r+0x78c>
 80084de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80b7 	beq.w	8008654 <_dtoa_r+0x8c4>
 80084e6:	b18c      	cbz	r4, 800850c <_dtoa_r+0x77c>
 80084e8:	4629      	mov	r1, r5
 80084ea:	4622      	mov	r2, r4
 80084ec:	4658      	mov	r0, fp
 80084ee:	f001 fb57 	bl	8009ba0 <__pow5mult>
 80084f2:	464a      	mov	r2, r9
 80084f4:	4601      	mov	r1, r0
 80084f6:	4605      	mov	r5, r0
 80084f8:	4658      	mov	r0, fp
 80084fa:	f001 faa7 	bl	8009a4c <__multiply>
 80084fe:	4649      	mov	r1, r9
 8008500:	9004      	str	r0, [sp, #16]
 8008502:	4658      	mov	r0, fp
 8008504:	f001 f98e 	bl	8009824 <_Bfree>
 8008508:	9b04      	ldr	r3, [sp, #16]
 800850a:	4699      	mov	r9, r3
 800850c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800850e:	1b1a      	subs	r2, r3, r4
 8008510:	d004      	beq.n	800851c <_dtoa_r+0x78c>
 8008512:	4649      	mov	r1, r9
 8008514:	4658      	mov	r0, fp
 8008516:	f001 fb43 	bl	8009ba0 <__pow5mult>
 800851a:	4681      	mov	r9, r0
 800851c:	2101      	movs	r1, #1
 800851e:	4658      	mov	r0, fp
 8008520:	f001 fa7e 	bl	8009a20 <__i2b>
 8008524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008526:	4604      	mov	r4, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 81cf 	beq.w	80088cc <_dtoa_r+0xb3c>
 800852e:	461a      	mov	r2, r3
 8008530:	4601      	mov	r1, r0
 8008532:	4658      	mov	r0, fp
 8008534:	f001 fb34 	bl	8009ba0 <__pow5mult>
 8008538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853a:	2b01      	cmp	r3, #1
 800853c:	4604      	mov	r4, r0
 800853e:	f300 8095 	bgt.w	800866c <_dtoa_r+0x8dc>
 8008542:	9b02      	ldr	r3, [sp, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f040 8087 	bne.w	8008658 <_dtoa_r+0x8c8>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008550:	2b00      	cmp	r3, #0
 8008552:	f040 8089 	bne.w	8008668 <_dtoa_r+0x8d8>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800855c:	0d1b      	lsrs	r3, r3, #20
 800855e:	051b      	lsls	r3, r3, #20
 8008560:	b12b      	cbz	r3, 800856e <_dtoa_r+0x7de>
 8008562:	9b08      	ldr	r3, [sp, #32]
 8008564:	3301      	adds	r3, #1
 8008566:	9308      	str	r3, [sp, #32]
 8008568:	f108 0801 	add.w	r8, r8, #1
 800856c:	2301      	movs	r3, #1
 800856e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 81b0 	beq.w	80088d8 <_dtoa_r+0xb48>
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800857e:	6918      	ldr	r0, [r3, #16]
 8008580:	f001 fa02 	bl	8009988 <__hi0bits>
 8008584:	f1c0 0020 	rsb	r0, r0, #32
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	4418      	add	r0, r3
 800858c:	f010 001f 	ands.w	r0, r0, #31
 8008590:	d077      	beq.n	8008682 <_dtoa_r+0x8f2>
 8008592:	f1c0 0320 	rsb	r3, r0, #32
 8008596:	2b04      	cmp	r3, #4
 8008598:	dd6b      	ble.n	8008672 <_dtoa_r+0x8e2>
 800859a:	9b08      	ldr	r3, [sp, #32]
 800859c:	f1c0 001c 	rsb	r0, r0, #28
 80085a0:	4403      	add	r3, r0
 80085a2:	4480      	add	r8, r0
 80085a4:	4406      	add	r6, r0
 80085a6:	9308      	str	r3, [sp, #32]
 80085a8:	f1b8 0f00 	cmp.w	r8, #0
 80085ac:	dd05      	ble.n	80085ba <_dtoa_r+0x82a>
 80085ae:	4649      	mov	r1, r9
 80085b0:	4642      	mov	r2, r8
 80085b2:	4658      	mov	r0, fp
 80085b4:	f001 fb4e 	bl	8009c54 <__lshift>
 80085b8:	4681      	mov	r9, r0
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd05      	ble.n	80085cc <_dtoa_r+0x83c>
 80085c0:	4621      	mov	r1, r4
 80085c2:	461a      	mov	r2, r3
 80085c4:	4658      	mov	r0, fp
 80085c6:	f001 fb45 	bl	8009c54 <__lshift>
 80085ca:	4604      	mov	r4, r0
 80085cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d059      	beq.n	8008686 <_dtoa_r+0x8f6>
 80085d2:	4621      	mov	r1, r4
 80085d4:	4648      	mov	r0, r9
 80085d6:	f001 fba9 	bl	8009d2c <__mcmp>
 80085da:	2800      	cmp	r0, #0
 80085dc:	da53      	bge.n	8008686 <_dtoa_r+0x8f6>
 80085de:	1e7b      	subs	r3, r7, #1
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	4649      	mov	r1, r9
 80085e4:	2300      	movs	r3, #0
 80085e6:	220a      	movs	r2, #10
 80085e8:	4658      	mov	r0, fp
 80085ea:	f001 f93d 	bl	8009868 <__multadd>
 80085ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085f0:	4681      	mov	r9, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 8172 	beq.w	80088dc <_dtoa_r+0xb4c>
 80085f8:	2300      	movs	r3, #0
 80085fa:	4629      	mov	r1, r5
 80085fc:	220a      	movs	r2, #10
 80085fe:	4658      	mov	r0, fp
 8008600:	f001 f932 	bl	8009868 <__multadd>
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	4605      	mov	r5, r0
 800860a:	dc67      	bgt.n	80086dc <_dtoa_r+0x94c>
 800860c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800860e:	2b02      	cmp	r3, #2
 8008610:	dc41      	bgt.n	8008696 <_dtoa_r+0x906>
 8008612:	e063      	b.n	80086dc <_dtoa_r+0x94c>
 8008614:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008616:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800861a:	e746      	b.n	80084aa <_dtoa_r+0x71a>
 800861c:	9b07      	ldr	r3, [sp, #28]
 800861e:	1e5c      	subs	r4, r3, #1
 8008620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008622:	42a3      	cmp	r3, r4
 8008624:	bfbf      	itttt	lt
 8008626:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008628:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800862a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800862c:	1ae3      	sublt	r3, r4, r3
 800862e:	bfb4      	ite	lt
 8008630:	18d2      	addlt	r2, r2, r3
 8008632:	1b1c      	subge	r4, r3, r4
 8008634:	9b07      	ldr	r3, [sp, #28]
 8008636:	bfbc      	itt	lt
 8008638:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800863a:	2400      	movlt	r4, #0
 800863c:	2b00      	cmp	r3, #0
 800863e:	bfb5      	itete	lt
 8008640:	eba8 0603 	sublt.w	r6, r8, r3
 8008644:	9b07      	ldrge	r3, [sp, #28]
 8008646:	2300      	movlt	r3, #0
 8008648:	4646      	movge	r6, r8
 800864a:	e730      	b.n	80084ae <_dtoa_r+0x71e>
 800864c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800864e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008650:	4646      	mov	r6, r8
 8008652:	e735      	b.n	80084c0 <_dtoa_r+0x730>
 8008654:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008656:	e75c      	b.n	8008512 <_dtoa_r+0x782>
 8008658:	2300      	movs	r3, #0
 800865a:	e788      	b.n	800856e <_dtoa_r+0x7de>
 800865c:	3fe00000 	.word	0x3fe00000
 8008660:	40240000 	.word	0x40240000
 8008664:	40140000 	.word	0x40140000
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	e780      	b.n	800856e <_dtoa_r+0x7de>
 800866c:	2300      	movs	r3, #0
 800866e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008670:	e782      	b.n	8008578 <_dtoa_r+0x7e8>
 8008672:	d099      	beq.n	80085a8 <_dtoa_r+0x818>
 8008674:	9a08      	ldr	r2, [sp, #32]
 8008676:	331c      	adds	r3, #28
 8008678:	441a      	add	r2, r3
 800867a:	4498      	add	r8, r3
 800867c:	441e      	add	r6, r3
 800867e:	9208      	str	r2, [sp, #32]
 8008680:	e792      	b.n	80085a8 <_dtoa_r+0x818>
 8008682:	4603      	mov	r3, r0
 8008684:	e7f6      	b.n	8008674 <_dtoa_r+0x8e4>
 8008686:	9b07      	ldr	r3, [sp, #28]
 8008688:	9704      	str	r7, [sp, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	dc20      	bgt.n	80086d0 <_dtoa_r+0x940>
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008692:	2b02      	cmp	r3, #2
 8008694:	dd1e      	ble.n	80086d4 <_dtoa_r+0x944>
 8008696:	9b00      	ldr	r3, [sp, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f47f aec0 	bne.w	800841e <_dtoa_r+0x68e>
 800869e:	4621      	mov	r1, r4
 80086a0:	2205      	movs	r2, #5
 80086a2:	4658      	mov	r0, fp
 80086a4:	f001 f8e0 	bl	8009868 <__multadd>
 80086a8:	4601      	mov	r1, r0
 80086aa:	4604      	mov	r4, r0
 80086ac:	4648      	mov	r0, r9
 80086ae:	f001 fb3d 	bl	8009d2c <__mcmp>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f77f aeb3 	ble.w	800841e <_dtoa_r+0x68e>
 80086b8:	4656      	mov	r6, sl
 80086ba:	2331      	movs	r3, #49	@ 0x31
 80086bc:	f806 3b01 	strb.w	r3, [r6], #1
 80086c0:	9b04      	ldr	r3, [sp, #16]
 80086c2:	3301      	adds	r3, #1
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	e6ae      	b.n	8008426 <_dtoa_r+0x696>
 80086c8:	9c07      	ldr	r4, [sp, #28]
 80086ca:	9704      	str	r7, [sp, #16]
 80086cc:	4625      	mov	r5, r4
 80086ce:	e7f3      	b.n	80086b8 <_dtoa_r+0x928>
 80086d0:	9b07      	ldr	r3, [sp, #28]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 8104 	beq.w	80088e4 <_dtoa_r+0xb54>
 80086dc:	2e00      	cmp	r6, #0
 80086de:	dd05      	ble.n	80086ec <_dtoa_r+0x95c>
 80086e0:	4629      	mov	r1, r5
 80086e2:	4632      	mov	r2, r6
 80086e4:	4658      	mov	r0, fp
 80086e6:	f001 fab5 	bl	8009c54 <__lshift>
 80086ea:	4605      	mov	r5, r0
 80086ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d05a      	beq.n	80087a8 <_dtoa_r+0xa18>
 80086f2:	6869      	ldr	r1, [r5, #4]
 80086f4:	4658      	mov	r0, fp
 80086f6:	f001 f855 	bl	80097a4 <_Balloc>
 80086fa:	4606      	mov	r6, r0
 80086fc:	b928      	cbnz	r0, 800870a <_dtoa_r+0x97a>
 80086fe:	4b84      	ldr	r3, [pc, #528]	@ (8008910 <_dtoa_r+0xb80>)
 8008700:	4602      	mov	r2, r0
 8008702:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008706:	f7ff bb5a 	b.w	8007dbe <_dtoa_r+0x2e>
 800870a:	692a      	ldr	r2, [r5, #16]
 800870c:	3202      	adds	r2, #2
 800870e:	0092      	lsls	r2, r2, #2
 8008710:	f105 010c 	add.w	r1, r5, #12
 8008714:	300c      	adds	r0, #12
 8008716:	f7ff fa94 	bl	8007c42 <memcpy>
 800871a:	2201      	movs	r2, #1
 800871c:	4631      	mov	r1, r6
 800871e:	4658      	mov	r0, fp
 8008720:	f001 fa98 	bl	8009c54 <__lshift>
 8008724:	f10a 0301 	add.w	r3, sl, #1
 8008728:	9307      	str	r3, [sp, #28]
 800872a:	9b00      	ldr	r3, [sp, #0]
 800872c:	4453      	add	r3, sl
 800872e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008730:	9b02      	ldr	r3, [sp, #8]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	462f      	mov	r7, r5
 8008738:	930a      	str	r3, [sp, #40]	@ 0x28
 800873a:	4605      	mov	r5, r0
 800873c:	9b07      	ldr	r3, [sp, #28]
 800873e:	4621      	mov	r1, r4
 8008740:	3b01      	subs	r3, #1
 8008742:	4648      	mov	r0, r9
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	f7ff fa99 	bl	8007c7c <quorem>
 800874a:	4639      	mov	r1, r7
 800874c:	9002      	str	r0, [sp, #8]
 800874e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008752:	4648      	mov	r0, r9
 8008754:	f001 faea 	bl	8009d2c <__mcmp>
 8008758:	462a      	mov	r2, r5
 800875a:	9008      	str	r0, [sp, #32]
 800875c:	4621      	mov	r1, r4
 800875e:	4658      	mov	r0, fp
 8008760:	f001 fb00 	bl	8009d64 <__mdiff>
 8008764:	68c2      	ldr	r2, [r0, #12]
 8008766:	4606      	mov	r6, r0
 8008768:	bb02      	cbnz	r2, 80087ac <_dtoa_r+0xa1c>
 800876a:	4601      	mov	r1, r0
 800876c:	4648      	mov	r0, r9
 800876e:	f001 fadd 	bl	8009d2c <__mcmp>
 8008772:	4602      	mov	r2, r0
 8008774:	4631      	mov	r1, r6
 8008776:	4658      	mov	r0, fp
 8008778:	920e      	str	r2, [sp, #56]	@ 0x38
 800877a:	f001 f853 	bl	8009824 <_Bfree>
 800877e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008780:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008782:	9e07      	ldr	r6, [sp, #28]
 8008784:	ea43 0102 	orr.w	r1, r3, r2
 8008788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800878a:	4319      	orrs	r1, r3
 800878c:	d110      	bne.n	80087b0 <_dtoa_r+0xa20>
 800878e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008792:	d029      	beq.n	80087e8 <_dtoa_r+0xa58>
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	2b00      	cmp	r3, #0
 8008798:	dd02      	ble.n	80087a0 <_dtoa_r+0xa10>
 800879a:	9b02      	ldr	r3, [sp, #8]
 800879c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80087a0:	9b00      	ldr	r3, [sp, #0]
 80087a2:	f883 8000 	strb.w	r8, [r3]
 80087a6:	e63f      	b.n	8008428 <_dtoa_r+0x698>
 80087a8:	4628      	mov	r0, r5
 80087aa:	e7bb      	b.n	8008724 <_dtoa_r+0x994>
 80087ac:	2201      	movs	r2, #1
 80087ae:	e7e1      	b.n	8008774 <_dtoa_r+0x9e4>
 80087b0:	9b08      	ldr	r3, [sp, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	db04      	blt.n	80087c0 <_dtoa_r+0xa30>
 80087b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087b8:	430b      	orrs	r3, r1
 80087ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087bc:	430b      	orrs	r3, r1
 80087be:	d120      	bne.n	8008802 <_dtoa_r+0xa72>
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	dded      	ble.n	80087a0 <_dtoa_r+0xa10>
 80087c4:	4649      	mov	r1, r9
 80087c6:	2201      	movs	r2, #1
 80087c8:	4658      	mov	r0, fp
 80087ca:	f001 fa43 	bl	8009c54 <__lshift>
 80087ce:	4621      	mov	r1, r4
 80087d0:	4681      	mov	r9, r0
 80087d2:	f001 faab 	bl	8009d2c <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	dc03      	bgt.n	80087e2 <_dtoa_r+0xa52>
 80087da:	d1e1      	bne.n	80087a0 <_dtoa_r+0xa10>
 80087dc:	f018 0f01 	tst.w	r8, #1
 80087e0:	d0de      	beq.n	80087a0 <_dtoa_r+0xa10>
 80087e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087e6:	d1d8      	bne.n	800879a <_dtoa_r+0xa0a>
 80087e8:	9a00      	ldr	r2, [sp, #0]
 80087ea:	2339      	movs	r3, #57	@ 0x39
 80087ec:	7013      	strb	r3, [r2, #0]
 80087ee:	4633      	mov	r3, r6
 80087f0:	461e      	mov	r6, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80087f8:	2a39      	cmp	r2, #57	@ 0x39
 80087fa:	d052      	beq.n	80088a2 <_dtoa_r+0xb12>
 80087fc:	3201      	adds	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e612      	b.n	8008428 <_dtoa_r+0x698>
 8008802:	2a00      	cmp	r2, #0
 8008804:	dd07      	ble.n	8008816 <_dtoa_r+0xa86>
 8008806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800880a:	d0ed      	beq.n	80087e8 <_dtoa_r+0xa58>
 800880c:	9a00      	ldr	r2, [sp, #0]
 800880e:	f108 0301 	add.w	r3, r8, #1
 8008812:	7013      	strb	r3, [r2, #0]
 8008814:	e608      	b.n	8008428 <_dtoa_r+0x698>
 8008816:	9b07      	ldr	r3, [sp, #28]
 8008818:	9a07      	ldr	r2, [sp, #28]
 800881a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800881e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008820:	4293      	cmp	r3, r2
 8008822:	d028      	beq.n	8008876 <_dtoa_r+0xae6>
 8008824:	4649      	mov	r1, r9
 8008826:	2300      	movs	r3, #0
 8008828:	220a      	movs	r2, #10
 800882a:	4658      	mov	r0, fp
 800882c:	f001 f81c 	bl	8009868 <__multadd>
 8008830:	42af      	cmp	r7, r5
 8008832:	4681      	mov	r9, r0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	f04f 020a 	mov.w	r2, #10
 800883c:	4639      	mov	r1, r7
 800883e:	4658      	mov	r0, fp
 8008840:	d107      	bne.n	8008852 <_dtoa_r+0xac2>
 8008842:	f001 f811 	bl	8009868 <__multadd>
 8008846:	4607      	mov	r7, r0
 8008848:	4605      	mov	r5, r0
 800884a:	9b07      	ldr	r3, [sp, #28]
 800884c:	3301      	adds	r3, #1
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	e774      	b.n	800873c <_dtoa_r+0x9ac>
 8008852:	f001 f809 	bl	8009868 <__multadd>
 8008856:	4629      	mov	r1, r5
 8008858:	4607      	mov	r7, r0
 800885a:	2300      	movs	r3, #0
 800885c:	220a      	movs	r2, #10
 800885e:	4658      	mov	r0, fp
 8008860:	f001 f802 	bl	8009868 <__multadd>
 8008864:	4605      	mov	r5, r0
 8008866:	e7f0      	b.n	800884a <_dtoa_r+0xaba>
 8008868:	9b00      	ldr	r3, [sp, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	bfcc      	ite	gt
 800886e:	461e      	movgt	r6, r3
 8008870:	2601      	movle	r6, #1
 8008872:	4456      	add	r6, sl
 8008874:	2700      	movs	r7, #0
 8008876:	4649      	mov	r1, r9
 8008878:	2201      	movs	r2, #1
 800887a:	4658      	mov	r0, fp
 800887c:	f001 f9ea 	bl	8009c54 <__lshift>
 8008880:	4621      	mov	r1, r4
 8008882:	4681      	mov	r9, r0
 8008884:	f001 fa52 	bl	8009d2c <__mcmp>
 8008888:	2800      	cmp	r0, #0
 800888a:	dcb0      	bgt.n	80087ee <_dtoa_r+0xa5e>
 800888c:	d102      	bne.n	8008894 <_dtoa_r+0xb04>
 800888e:	f018 0f01 	tst.w	r8, #1
 8008892:	d1ac      	bne.n	80087ee <_dtoa_r+0xa5e>
 8008894:	4633      	mov	r3, r6
 8008896:	461e      	mov	r6, r3
 8008898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800889c:	2a30      	cmp	r2, #48	@ 0x30
 800889e:	d0fa      	beq.n	8008896 <_dtoa_r+0xb06>
 80088a0:	e5c2      	b.n	8008428 <_dtoa_r+0x698>
 80088a2:	459a      	cmp	sl, r3
 80088a4:	d1a4      	bne.n	80087f0 <_dtoa_r+0xa60>
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	3301      	adds	r3, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	2331      	movs	r3, #49	@ 0x31
 80088ae:	f88a 3000 	strb.w	r3, [sl]
 80088b2:	e5b9      	b.n	8008428 <_dtoa_r+0x698>
 80088b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008914 <_dtoa_r+0xb84>
 80088ba:	b11b      	cbz	r3, 80088c4 <_dtoa_r+0xb34>
 80088bc:	f10a 0308 	add.w	r3, sl, #8
 80088c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	4650      	mov	r0, sl
 80088c6:	b019      	add	sp, #100	@ 0x64
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	f77f ae37 	ble.w	8008542 <_dtoa_r+0x7b2>
 80088d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088d8:	2001      	movs	r0, #1
 80088da:	e655      	b.n	8008588 <_dtoa_r+0x7f8>
 80088dc:	9b00      	ldr	r3, [sp, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f77f aed6 	ble.w	8008690 <_dtoa_r+0x900>
 80088e4:	4656      	mov	r6, sl
 80088e6:	4621      	mov	r1, r4
 80088e8:	4648      	mov	r0, r9
 80088ea:	f7ff f9c7 	bl	8007c7c <quorem>
 80088ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80088f2:	f806 8b01 	strb.w	r8, [r6], #1
 80088f6:	9b00      	ldr	r3, [sp, #0]
 80088f8:	eba6 020a 	sub.w	r2, r6, sl
 80088fc:	4293      	cmp	r3, r2
 80088fe:	ddb3      	ble.n	8008868 <_dtoa_r+0xad8>
 8008900:	4649      	mov	r1, r9
 8008902:	2300      	movs	r3, #0
 8008904:	220a      	movs	r2, #10
 8008906:	4658      	mov	r0, fp
 8008908:	f000 ffae 	bl	8009868 <__multadd>
 800890c:	4681      	mov	r9, r0
 800890e:	e7ea      	b.n	80088e6 <_dtoa_r+0xb56>
 8008910:	0800aa55 	.word	0x0800aa55
 8008914:	0800a9d9 	.word	0x0800a9d9

08008918 <rshift>:
 8008918:	6903      	ldr	r3, [r0, #16]
 800891a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800891e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008922:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008926:	f100 0414 	add.w	r4, r0, #20
 800892a:	dd45      	ble.n	80089b8 <rshift+0xa0>
 800892c:	f011 011f 	ands.w	r1, r1, #31
 8008930:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008934:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008938:	d10c      	bne.n	8008954 <rshift+0x3c>
 800893a:	f100 0710 	add.w	r7, r0, #16
 800893e:	4629      	mov	r1, r5
 8008940:	42b1      	cmp	r1, r6
 8008942:	d334      	bcc.n	80089ae <rshift+0x96>
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	1eea      	subs	r2, r5, #3
 800894a:	4296      	cmp	r6, r2
 800894c:	bf38      	it	cc
 800894e:	2300      	movcc	r3, #0
 8008950:	4423      	add	r3, r4
 8008952:	e015      	b.n	8008980 <rshift+0x68>
 8008954:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008958:	f1c1 0820 	rsb	r8, r1, #32
 800895c:	40cf      	lsrs	r7, r1
 800895e:	f105 0e04 	add.w	lr, r5, #4
 8008962:	46a1      	mov	r9, r4
 8008964:	4576      	cmp	r6, lr
 8008966:	46f4      	mov	ip, lr
 8008968:	d815      	bhi.n	8008996 <rshift+0x7e>
 800896a:	1a9a      	subs	r2, r3, r2
 800896c:	0092      	lsls	r2, r2, #2
 800896e:	3a04      	subs	r2, #4
 8008970:	3501      	adds	r5, #1
 8008972:	42ae      	cmp	r6, r5
 8008974:	bf38      	it	cc
 8008976:	2200      	movcc	r2, #0
 8008978:	18a3      	adds	r3, r4, r2
 800897a:	50a7      	str	r7, [r4, r2]
 800897c:	b107      	cbz	r7, 8008980 <rshift+0x68>
 800897e:	3304      	adds	r3, #4
 8008980:	1b1a      	subs	r2, r3, r4
 8008982:	42a3      	cmp	r3, r4
 8008984:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008988:	bf08      	it	eq
 800898a:	2300      	moveq	r3, #0
 800898c:	6102      	str	r2, [r0, #16]
 800898e:	bf08      	it	eq
 8008990:	6143      	streq	r3, [r0, #20]
 8008992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008996:	f8dc c000 	ldr.w	ip, [ip]
 800899a:	fa0c fc08 	lsl.w	ip, ip, r8
 800899e:	ea4c 0707 	orr.w	r7, ip, r7
 80089a2:	f849 7b04 	str.w	r7, [r9], #4
 80089a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089aa:	40cf      	lsrs	r7, r1
 80089ac:	e7da      	b.n	8008964 <rshift+0x4c>
 80089ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80089b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80089b6:	e7c3      	b.n	8008940 <rshift+0x28>
 80089b8:	4623      	mov	r3, r4
 80089ba:	e7e1      	b.n	8008980 <rshift+0x68>

080089bc <__hexdig_fun>:
 80089bc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80089c0:	2b09      	cmp	r3, #9
 80089c2:	d802      	bhi.n	80089ca <__hexdig_fun+0xe>
 80089c4:	3820      	subs	r0, #32
 80089c6:	b2c0      	uxtb	r0, r0
 80089c8:	4770      	bx	lr
 80089ca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d801      	bhi.n	80089d6 <__hexdig_fun+0x1a>
 80089d2:	3847      	subs	r0, #71	@ 0x47
 80089d4:	e7f7      	b.n	80089c6 <__hexdig_fun+0xa>
 80089d6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80089da:	2b05      	cmp	r3, #5
 80089dc:	d801      	bhi.n	80089e2 <__hexdig_fun+0x26>
 80089de:	3827      	subs	r0, #39	@ 0x27
 80089e0:	e7f1      	b.n	80089c6 <__hexdig_fun+0xa>
 80089e2:	2000      	movs	r0, #0
 80089e4:	4770      	bx	lr
	...

080089e8 <__gethex>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	b085      	sub	sp, #20
 80089ee:	468a      	mov	sl, r1
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	680b      	ldr	r3, [r1, #0]
 80089f4:	9001      	str	r0, [sp, #4]
 80089f6:	4690      	mov	r8, r2
 80089f8:	1c9c      	adds	r4, r3, #2
 80089fa:	46a1      	mov	r9, r4
 80089fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008a00:	2830      	cmp	r0, #48	@ 0x30
 8008a02:	d0fa      	beq.n	80089fa <__gethex+0x12>
 8008a04:	eba9 0303 	sub.w	r3, r9, r3
 8008a08:	f1a3 0b02 	sub.w	fp, r3, #2
 8008a0c:	f7ff ffd6 	bl	80089bc <__hexdig_fun>
 8008a10:	4605      	mov	r5, r0
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d168      	bne.n	8008ae8 <__gethex+0x100>
 8008a16:	49a0      	ldr	r1, [pc, #640]	@ (8008c98 <__gethex+0x2b0>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	4648      	mov	r0, r9
 8008a1c:	f7ff f8b0 	bl	8007b80 <strncmp>
 8008a20:	4607      	mov	r7, r0
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d167      	bne.n	8008af6 <__gethex+0x10e>
 8008a26:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008a2a:	4626      	mov	r6, r4
 8008a2c:	f7ff ffc6 	bl	80089bc <__hexdig_fun>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d062      	beq.n	8008afa <__gethex+0x112>
 8008a34:	4623      	mov	r3, r4
 8008a36:	7818      	ldrb	r0, [r3, #0]
 8008a38:	2830      	cmp	r0, #48	@ 0x30
 8008a3a:	4699      	mov	r9, r3
 8008a3c:	f103 0301 	add.w	r3, r3, #1
 8008a40:	d0f9      	beq.n	8008a36 <__gethex+0x4e>
 8008a42:	f7ff ffbb 	bl	80089bc <__hexdig_fun>
 8008a46:	fab0 f580 	clz	r5, r0
 8008a4a:	096d      	lsrs	r5, r5, #5
 8008a4c:	f04f 0b01 	mov.w	fp, #1
 8008a50:	464a      	mov	r2, r9
 8008a52:	4616      	mov	r6, r2
 8008a54:	3201      	adds	r2, #1
 8008a56:	7830      	ldrb	r0, [r6, #0]
 8008a58:	f7ff ffb0 	bl	80089bc <__hexdig_fun>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d1f8      	bne.n	8008a52 <__gethex+0x6a>
 8008a60:	498d      	ldr	r1, [pc, #564]	@ (8008c98 <__gethex+0x2b0>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff f88b 	bl	8007b80 <strncmp>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d13f      	bne.n	8008aee <__gethex+0x106>
 8008a6e:	b944      	cbnz	r4, 8008a82 <__gethex+0x9a>
 8008a70:	1c74      	adds	r4, r6, #1
 8008a72:	4622      	mov	r2, r4
 8008a74:	4616      	mov	r6, r2
 8008a76:	3201      	adds	r2, #1
 8008a78:	7830      	ldrb	r0, [r6, #0]
 8008a7a:	f7ff ff9f 	bl	80089bc <__hexdig_fun>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d1f8      	bne.n	8008a74 <__gethex+0x8c>
 8008a82:	1ba4      	subs	r4, r4, r6
 8008a84:	00a7      	lsls	r7, r4, #2
 8008a86:	7833      	ldrb	r3, [r6, #0]
 8008a88:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a8c:	2b50      	cmp	r3, #80	@ 0x50
 8008a8e:	d13e      	bne.n	8008b0e <__gethex+0x126>
 8008a90:	7873      	ldrb	r3, [r6, #1]
 8008a92:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a94:	d033      	beq.n	8008afe <__gethex+0x116>
 8008a96:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a98:	d034      	beq.n	8008b04 <__gethex+0x11c>
 8008a9a:	1c71      	adds	r1, r6, #1
 8008a9c:	2400      	movs	r4, #0
 8008a9e:	7808      	ldrb	r0, [r1, #0]
 8008aa0:	f7ff ff8c 	bl	80089bc <__hexdig_fun>
 8008aa4:	1e43      	subs	r3, r0, #1
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b18      	cmp	r3, #24
 8008aaa:	d830      	bhi.n	8008b0e <__gethex+0x126>
 8008aac:	f1a0 0210 	sub.w	r2, r0, #16
 8008ab0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ab4:	f7ff ff82 	bl	80089bc <__hexdig_fun>
 8008ab8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008abc:	fa5f fc8c 	uxtb.w	ip, ip
 8008ac0:	f1bc 0f18 	cmp.w	ip, #24
 8008ac4:	f04f 030a 	mov.w	r3, #10
 8008ac8:	d91e      	bls.n	8008b08 <__gethex+0x120>
 8008aca:	b104      	cbz	r4, 8008ace <__gethex+0xe6>
 8008acc:	4252      	negs	r2, r2
 8008ace:	4417      	add	r7, r2
 8008ad0:	f8ca 1000 	str.w	r1, [sl]
 8008ad4:	b1ed      	cbz	r5, 8008b12 <__gethex+0x12a>
 8008ad6:	f1bb 0f00 	cmp.w	fp, #0
 8008ada:	bf0c      	ite	eq
 8008adc:	2506      	moveq	r5, #6
 8008ade:	2500      	movne	r5, #0
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	b005      	add	sp, #20
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	2500      	movs	r5, #0
 8008aea:	462c      	mov	r4, r5
 8008aec:	e7b0      	b.n	8008a50 <__gethex+0x68>
 8008aee:	2c00      	cmp	r4, #0
 8008af0:	d1c7      	bne.n	8008a82 <__gethex+0x9a>
 8008af2:	4627      	mov	r7, r4
 8008af4:	e7c7      	b.n	8008a86 <__gethex+0x9e>
 8008af6:	464e      	mov	r6, r9
 8008af8:	462f      	mov	r7, r5
 8008afa:	2501      	movs	r5, #1
 8008afc:	e7c3      	b.n	8008a86 <__gethex+0x9e>
 8008afe:	2400      	movs	r4, #0
 8008b00:	1cb1      	adds	r1, r6, #2
 8008b02:	e7cc      	b.n	8008a9e <__gethex+0xb6>
 8008b04:	2401      	movs	r4, #1
 8008b06:	e7fb      	b.n	8008b00 <__gethex+0x118>
 8008b08:	fb03 0002 	mla	r0, r3, r2, r0
 8008b0c:	e7ce      	b.n	8008aac <__gethex+0xc4>
 8008b0e:	4631      	mov	r1, r6
 8008b10:	e7de      	b.n	8008ad0 <__gethex+0xe8>
 8008b12:	eba6 0309 	sub.w	r3, r6, r9
 8008b16:	3b01      	subs	r3, #1
 8008b18:	4629      	mov	r1, r5
 8008b1a:	2b07      	cmp	r3, #7
 8008b1c:	dc0a      	bgt.n	8008b34 <__gethex+0x14c>
 8008b1e:	9801      	ldr	r0, [sp, #4]
 8008b20:	f000 fe40 	bl	80097a4 <_Balloc>
 8008b24:	4604      	mov	r4, r0
 8008b26:	b940      	cbnz	r0, 8008b3a <__gethex+0x152>
 8008b28:	4b5c      	ldr	r3, [pc, #368]	@ (8008c9c <__gethex+0x2b4>)
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	21e4      	movs	r1, #228	@ 0xe4
 8008b2e:	485c      	ldr	r0, [pc, #368]	@ (8008ca0 <__gethex+0x2b8>)
 8008b30:	f001 fcf2 	bl	800a518 <__assert_func>
 8008b34:	3101      	adds	r1, #1
 8008b36:	105b      	asrs	r3, r3, #1
 8008b38:	e7ef      	b.n	8008b1a <__gethex+0x132>
 8008b3a:	f100 0a14 	add.w	sl, r0, #20
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4655      	mov	r5, sl
 8008b42:	469b      	mov	fp, r3
 8008b44:	45b1      	cmp	r9, r6
 8008b46:	d337      	bcc.n	8008bb8 <__gethex+0x1d0>
 8008b48:	f845 bb04 	str.w	fp, [r5], #4
 8008b4c:	eba5 050a 	sub.w	r5, r5, sl
 8008b50:	10ad      	asrs	r5, r5, #2
 8008b52:	6125      	str	r5, [r4, #16]
 8008b54:	4658      	mov	r0, fp
 8008b56:	f000 ff17 	bl	8009988 <__hi0bits>
 8008b5a:	016d      	lsls	r5, r5, #5
 8008b5c:	f8d8 6000 	ldr.w	r6, [r8]
 8008b60:	1a2d      	subs	r5, r5, r0
 8008b62:	42b5      	cmp	r5, r6
 8008b64:	dd54      	ble.n	8008c10 <__gethex+0x228>
 8008b66:	1bad      	subs	r5, r5, r6
 8008b68:	4629      	mov	r1, r5
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f001 faab 	bl	800a0c6 <__any_on>
 8008b70:	4681      	mov	r9, r0
 8008b72:	b178      	cbz	r0, 8008b94 <__gethex+0x1ac>
 8008b74:	1e6b      	subs	r3, r5, #1
 8008b76:	1159      	asrs	r1, r3, #5
 8008b78:	f003 021f 	and.w	r2, r3, #31
 8008b7c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b80:	f04f 0901 	mov.w	r9, #1
 8008b84:	fa09 f202 	lsl.w	r2, r9, r2
 8008b88:	420a      	tst	r2, r1
 8008b8a:	d003      	beq.n	8008b94 <__gethex+0x1ac>
 8008b8c:	454b      	cmp	r3, r9
 8008b8e:	dc36      	bgt.n	8008bfe <__gethex+0x216>
 8008b90:	f04f 0902 	mov.w	r9, #2
 8008b94:	4629      	mov	r1, r5
 8008b96:	4620      	mov	r0, r4
 8008b98:	f7ff febe 	bl	8008918 <rshift>
 8008b9c:	442f      	add	r7, r5
 8008b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ba2:	42bb      	cmp	r3, r7
 8008ba4:	da42      	bge.n	8008c2c <__gethex+0x244>
 8008ba6:	9801      	ldr	r0, [sp, #4]
 8008ba8:	4621      	mov	r1, r4
 8008baa:	f000 fe3b 	bl	8009824 <_Bfree>
 8008bae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	25a3      	movs	r5, #163	@ 0xa3
 8008bb6:	e793      	b.n	8008ae0 <__gethex+0xf8>
 8008bb8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008bbc:	2a2e      	cmp	r2, #46	@ 0x2e
 8008bbe:	d012      	beq.n	8008be6 <__gethex+0x1fe>
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d104      	bne.n	8008bce <__gethex+0x1e6>
 8008bc4:	f845 bb04 	str.w	fp, [r5], #4
 8008bc8:	f04f 0b00 	mov.w	fp, #0
 8008bcc:	465b      	mov	r3, fp
 8008bce:	7830      	ldrb	r0, [r6, #0]
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	f7ff fef3 	bl	80089bc <__hexdig_fun>
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	f000 000f 	and.w	r0, r0, #15
 8008bdc:	4098      	lsls	r0, r3
 8008bde:	ea4b 0b00 	orr.w	fp, fp, r0
 8008be2:	3304      	adds	r3, #4
 8008be4:	e7ae      	b.n	8008b44 <__gethex+0x15c>
 8008be6:	45b1      	cmp	r9, r6
 8008be8:	d8ea      	bhi.n	8008bc0 <__gethex+0x1d8>
 8008bea:	492b      	ldr	r1, [pc, #172]	@ (8008c98 <__gethex+0x2b0>)
 8008bec:	9303      	str	r3, [sp, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7fe ffc5 	bl	8007b80 <strncmp>
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d1e1      	bne.n	8008bc0 <__gethex+0x1d8>
 8008bfc:	e7a2      	b.n	8008b44 <__gethex+0x15c>
 8008bfe:	1ea9      	subs	r1, r5, #2
 8008c00:	4620      	mov	r0, r4
 8008c02:	f001 fa60 	bl	800a0c6 <__any_on>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d0c2      	beq.n	8008b90 <__gethex+0x1a8>
 8008c0a:	f04f 0903 	mov.w	r9, #3
 8008c0e:	e7c1      	b.n	8008b94 <__gethex+0x1ac>
 8008c10:	da09      	bge.n	8008c26 <__gethex+0x23e>
 8008c12:	1b75      	subs	r5, r6, r5
 8008c14:	4621      	mov	r1, r4
 8008c16:	9801      	ldr	r0, [sp, #4]
 8008c18:	462a      	mov	r2, r5
 8008c1a:	f001 f81b 	bl	8009c54 <__lshift>
 8008c1e:	1b7f      	subs	r7, r7, r5
 8008c20:	4604      	mov	r4, r0
 8008c22:	f100 0a14 	add.w	sl, r0, #20
 8008c26:	f04f 0900 	mov.w	r9, #0
 8008c2a:	e7b8      	b.n	8008b9e <__gethex+0x1b6>
 8008c2c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c30:	42bd      	cmp	r5, r7
 8008c32:	dd6f      	ble.n	8008d14 <__gethex+0x32c>
 8008c34:	1bed      	subs	r5, r5, r7
 8008c36:	42ae      	cmp	r6, r5
 8008c38:	dc34      	bgt.n	8008ca4 <__gethex+0x2bc>
 8008c3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d022      	beq.n	8008c88 <__gethex+0x2a0>
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d024      	beq.n	8008c90 <__gethex+0x2a8>
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d115      	bne.n	8008c76 <__gethex+0x28e>
 8008c4a:	42ae      	cmp	r6, r5
 8008c4c:	d113      	bne.n	8008c76 <__gethex+0x28e>
 8008c4e:	2e01      	cmp	r6, #1
 8008c50:	d10b      	bne.n	8008c6a <__gethex+0x282>
 8008c52:	9a02      	ldr	r2, [sp, #8]
 8008c54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	6123      	str	r3, [r4, #16]
 8008c5e:	f8ca 3000 	str.w	r3, [sl]
 8008c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c64:	2562      	movs	r5, #98	@ 0x62
 8008c66:	601c      	str	r4, [r3, #0]
 8008c68:	e73a      	b.n	8008ae0 <__gethex+0xf8>
 8008c6a:	1e71      	subs	r1, r6, #1
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f001 fa2a 	bl	800a0c6 <__any_on>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d1ed      	bne.n	8008c52 <__gethex+0x26a>
 8008c76:	9801      	ldr	r0, [sp, #4]
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f000 fdd3 	bl	8009824 <_Bfree>
 8008c7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c80:	2300      	movs	r3, #0
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	2550      	movs	r5, #80	@ 0x50
 8008c86:	e72b      	b.n	8008ae0 <__gethex+0xf8>
 8008c88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f3      	bne.n	8008c76 <__gethex+0x28e>
 8008c8e:	e7e0      	b.n	8008c52 <__gethex+0x26a>
 8008c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1dd      	bne.n	8008c52 <__gethex+0x26a>
 8008c96:	e7ee      	b.n	8008c76 <__gethex+0x28e>
 8008c98:	0800a879 	.word	0x0800a879
 8008c9c:	0800aa55 	.word	0x0800aa55
 8008ca0:	0800aa66 	.word	0x0800aa66
 8008ca4:	1e6f      	subs	r7, r5, #1
 8008ca6:	f1b9 0f00 	cmp.w	r9, #0
 8008caa:	d130      	bne.n	8008d0e <__gethex+0x326>
 8008cac:	b127      	cbz	r7, 8008cb8 <__gethex+0x2d0>
 8008cae:	4639      	mov	r1, r7
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f001 fa08 	bl	800a0c6 <__any_on>
 8008cb6:	4681      	mov	r9, r0
 8008cb8:	117a      	asrs	r2, r7, #5
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008cc0:	f007 071f 	and.w	r7, r7, #31
 8008cc4:	40bb      	lsls	r3, r7
 8008cc6:	4213      	tst	r3, r2
 8008cc8:	4629      	mov	r1, r5
 8008cca:	4620      	mov	r0, r4
 8008ccc:	bf18      	it	ne
 8008cce:	f049 0902 	orrne.w	r9, r9, #2
 8008cd2:	f7ff fe21 	bl	8008918 <rshift>
 8008cd6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008cda:	1b76      	subs	r6, r6, r5
 8008cdc:	2502      	movs	r5, #2
 8008cde:	f1b9 0f00 	cmp.w	r9, #0
 8008ce2:	d047      	beq.n	8008d74 <__gethex+0x38c>
 8008ce4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d015      	beq.n	8008d18 <__gethex+0x330>
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d017      	beq.n	8008d20 <__gethex+0x338>
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d109      	bne.n	8008d08 <__gethex+0x320>
 8008cf4:	f019 0f02 	tst.w	r9, #2
 8008cf8:	d006      	beq.n	8008d08 <__gethex+0x320>
 8008cfa:	f8da 3000 	ldr.w	r3, [sl]
 8008cfe:	ea49 0903 	orr.w	r9, r9, r3
 8008d02:	f019 0f01 	tst.w	r9, #1
 8008d06:	d10e      	bne.n	8008d26 <__gethex+0x33e>
 8008d08:	f045 0510 	orr.w	r5, r5, #16
 8008d0c:	e032      	b.n	8008d74 <__gethex+0x38c>
 8008d0e:	f04f 0901 	mov.w	r9, #1
 8008d12:	e7d1      	b.n	8008cb8 <__gethex+0x2d0>
 8008d14:	2501      	movs	r5, #1
 8008d16:	e7e2      	b.n	8008cde <__gethex+0x2f6>
 8008d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d1a:	f1c3 0301 	rsb	r3, r3, #1
 8008d1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0f0      	beq.n	8008d08 <__gethex+0x320>
 8008d26:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d2a:	f104 0314 	add.w	r3, r4, #20
 8008d2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d32:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d36:	f04f 0c00 	mov.w	ip, #0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d40:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008d44:	d01b      	beq.n	8008d7e <__gethex+0x396>
 8008d46:	3201      	adds	r2, #1
 8008d48:	6002      	str	r2, [r0, #0]
 8008d4a:	2d02      	cmp	r5, #2
 8008d4c:	f104 0314 	add.w	r3, r4, #20
 8008d50:	d13c      	bne.n	8008dcc <__gethex+0x3e4>
 8008d52:	f8d8 2000 	ldr.w	r2, [r8]
 8008d56:	3a01      	subs	r2, #1
 8008d58:	42b2      	cmp	r2, r6
 8008d5a:	d109      	bne.n	8008d70 <__gethex+0x388>
 8008d5c:	1171      	asrs	r1, r6, #5
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d64:	f006 061f 	and.w	r6, r6, #31
 8008d68:	fa02 f606 	lsl.w	r6, r2, r6
 8008d6c:	421e      	tst	r6, r3
 8008d6e:	d13a      	bne.n	8008de6 <__gethex+0x3fe>
 8008d70:	f045 0520 	orr.w	r5, r5, #32
 8008d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d76:	601c      	str	r4, [r3, #0]
 8008d78:	9b02      	ldr	r3, [sp, #8]
 8008d7a:	601f      	str	r7, [r3, #0]
 8008d7c:	e6b0      	b.n	8008ae0 <__gethex+0xf8>
 8008d7e:	4299      	cmp	r1, r3
 8008d80:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d84:	d8d9      	bhi.n	8008d3a <__gethex+0x352>
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	459b      	cmp	fp, r3
 8008d8a:	db17      	blt.n	8008dbc <__gethex+0x3d4>
 8008d8c:	6861      	ldr	r1, [r4, #4]
 8008d8e:	9801      	ldr	r0, [sp, #4]
 8008d90:	3101      	adds	r1, #1
 8008d92:	f000 fd07 	bl	80097a4 <_Balloc>
 8008d96:	4681      	mov	r9, r0
 8008d98:	b918      	cbnz	r0, 8008da2 <__gethex+0x3ba>
 8008d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008e04 <__gethex+0x41c>)
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	2184      	movs	r1, #132	@ 0x84
 8008da0:	e6c5      	b.n	8008b2e <__gethex+0x146>
 8008da2:	6922      	ldr	r2, [r4, #16]
 8008da4:	3202      	adds	r2, #2
 8008da6:	f104 010c 	add.w	r1, r4, #12
 8008daa:	0092      	lsls	r2, r2, #2
 8008dac:	300c      	adds	r0, #12
 8008dae:	f7fe ff48 	bl	8007c42 <memcpy>
 8008db2:	4621      	mov	r1, r4
 8008db4:	9801      	ldr	r0, [sp, #4]
 8008db6:	f000 fd35 	bl	8009824 <_Bfree>
 8008dba:	464c      	mov	r4, r9
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dc4:	6122      	str	r2, [r4, #16]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	615a      	str	r2, [r3, #20]
 8008dca:	e7be      	b.n	8008d4a <__gethex+0x362>
 8008dcc:	6922      	ldr	r2, [r4, #16]
 8008dce:	455a      	cmp	r2, fp
 8008dd0:	dd0b      	ble.n	8008dea <__gethex+0x402>
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7ff fd9f 	bl	8008918 <rshift>
 8008dda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dde:	3701      	adds	r7, #1
 8008de0:	42bb      	cmp	r3, r7
 8008de2:	f6ff aee0 	blt.w	8008ba6 <__gethex+0x1be>
 8008de6:	2501      	movs	r5, #1
 8008de8:	e7c2      	b.n	8008d70 <__gethex+0x388>
 8008dea:	f016 061f 	ands.w	r6, r6, #31
 8008dee:	d0fa      	beq.n	8008de6 <__gethex+0x3fe>
 8008df0:	4453      	add	r3, sl
 8008df2:	f1c6 0620 	rsb	r6, r6, #32
 8008df6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dfa:	f000 fdc5 	bl	8009988 <__hi0bits>
 8008dfe:	42b0      	cmp	r0, r6
 8008e00:	dbe7      	blt.n	8008dd2 <__gethex+0x3ea>
 8008e02:	e7f0      	b.n	8008de6 <__gethex+0x3fe>
 8008e04:	0800aa55 	.word	0x0800aa55

08008e08 <L_shift>:
 8008e08:	f1c2 0208 	rsb	r2, r2, #8
 8008e0c:	0092      	lsls	r2, r2, #2
 8008e0e:	b570      	push	{r4, r5, r6, lr}
 8008e10:	f1c2 0620 	rsb	r6, r2, #32
 8008e14:	6843      	ldr	r3, [r0, #4]
 8008e16:	6804      	ldr	r4, [r0, #0]
 8008e18:	fa03 f506 	lsl.w	r5, r3, r6
 8008e1c:	432c      	orrs	r4, r5
 8008e1e:	40d3      	lsrs	r3, r2
 8008e20:	6004      	str	r4, [r0, #0]
 8008e22:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e26:	4288      	cmp	r0, r1
 8008e28:	d3f4      	bcc.n	8008e14 <L_shift+0xc>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}

08008e2c <__match>:
 8008e2c:	b530      	push	{r4, r5, lr}
 8008e2e:	6803      	ldr	r3, [r0, #0]
 8008e30:	3301      	adds	r3, #1
 8008e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e36:	b914      	cbnz	r4, 8008e3e <__match+0x12>
 8008e38:	6003      	str	r3, [r0, #0]
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	bd30      	pop	{r4, r5, pc}
 8008e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e42:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008e46:	2d19      	cmp	r5, #25
 8008e48:	bf98      	it	ls
 8008e4a:	3220      	addls	r2, #32
 8008e4c:	42a2      	cmp	r2, r4
 8008e4e:	d0f0      	beq.n	8008e32 <__match+0x6>
 8008e50:	2000      	movs	r0, #0
 8008e52:	e7f3      	b.n	8008e3c <__match+0x10>

08008e54 <__hexnan>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	680b      	ldr	r3, [r1, #0]
 8008e5a:	6801      	ldr	r1, [r0, #0]
 8008e5c:	115e      	asrs	r6, r3, #5
 8008e5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e62:	f013 031f 	ands.w	r3, r3, #31
 8008e66:	b087      	sub	sp, #28
 8008e68:	bf18      	it	ne
 8008e6a:	3604      	addne	r6, #4
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	1f37      	subs	r7, r6, #4
 8008e70:	4682      	mov	sl, r0
 8008e72:	4690      	mov	r8, r2
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e7a:	46b9      	mov	r9, r7
 8008e7c:	463c      	mov	r4, r7
 8008e7e:	9502      	str	r5, [sp, #8]
 8008e80:	46ab      	mov	fp, r5
 8008e82:	784a      	ldrb	r2, [r1, #1]
 8008e84:	1c4b      	adds	r3, r1, #1
 8008e86:	9303      	str	r3, [sp, #12]
 8008e88:	b342      	cbz	r2, 8008edc <__hexnan+0x88>
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	9105      	str	r1, [sp, #20]
 8008e8e:	9204      	str	r2, [sp, #16]
 8008e90:	f7ff fd94 	bl	80089bc <__hexdig_fun>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d151      	bne.n	8008f3c <__hexnan+0xe8>
 8008e98:	9a04      	ldr	r2, [sp, #16]
 8008e9a:	9905      	ldr	r1, [sp, #20]
 8008e9c:	2a20      	cmp	r2, #32
 8008e9e:	d818      	bhi.n	8008ed2 <__hexnan+0x7e>
 8008ea0:	9b02      	ldr	r3, [sp, #8]
 8008ea2:	459b      	cmp	fp, r3
 8008ea4:	dd13      	ble.n	8008ece <__hexnan+0x7a>
 8008ea6:	454c      	cmp	r4, r9
 8008ea8:	d206      	bcs.n	8008eb8 <__hexnan+0x64>
 8008eaa:	2d07      	cmp	r5, #7
 8008eac:	dc04      	bgt.n	8008eb8 <__hexnan+0x64>
 8008eae:	462a      	mov	r2, r5
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f7ff ffa8 	bl	8008e08 <L_shift>
 8008eb8:	4544      	cmp	r4, r8
 8008eba:	d952      	bls.n	8008f62 <__hexnan+0x10e>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f1a4 0904 	sub.w	r9, r4, #4
 8008ec2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ec6:	f8cd b008 	str.w	fp, [sp, #8]
 8008eca:	464c      	mov	r4, r9
 8008ecc:	461d      	mov	r5, r3
 8008ece:	9903      	ldr	r1, [sp, #12]
 8008ed0:	e7d7      	b.n	8008e82 <__hexnan+0x2e>
 8008ed2:	2a29      	cmp	r2, #41	@ 0x29
 8008ed4:	d157      	bne.n	8008f86 <__hexnan+0x132>
 8008ed6:	3102      	adds	r1, #2
 8008ed8:	f8ca 1000 	str.w	r1, [sl]
 8008edc:	f1bb 0f00 	cmp.w	fp, #0
 8008ee0:	d051      	beq.n	8008f86 <__hexnan+0x132>
 8008ee2:	454c      	cmp	r4, r9
 8008ee4:	d206      	bcs.n	8008ef4 <__hexnan+0xa0>
 8008ee6:	2d07      	cmp	r5, #7
 8008ee8:	dc04      	bgt.n	8008ef4 <__hexnan+0xa0>
 8008eea:	462a      	mov	r2, r5
 8008eec:	4649      	mov	r1, r9
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff ff8a 	bl	8008e08 <L_shift>
 8008ef4:	4544      	cmp	r4, r8
 8008ef6:	d936      	bls.n	8008f66 <__hexnan+0x112>
 8008ef8:	f1a8 0204 	sub.w	r2, r8, #4
 8008efc:	4623      	mov	r3, r4
 8008efe:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f02:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f06:	429f      	cmp	r7, r3
 8008f08:	d2f9      	bcs.n	8008efe <__hexnan+0xaa>
 8008f0a:	1b3b      	subs	r3, r7, r4
 8008f0c:	f023 0303 	bic.w	r3, r3, #3
 8008f10:	3304      	adds	r3, #4
 8008f12:	3401      	adds	r4, #1
 8008f14:	3e03      	subs	r6, #3
 8008f16:	42b4      	cmp	r4, r6
 8008f18:	bf88      	it	hi
 8008f1a:	2304      	movhi	r3, #4
 8008f1c:	4443      	add	r3, r8
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f843 2b04 	str.w	r2, [r3], #4
 8008f24:	429f      	cmp	r7, r3
 8008f26:	d2fb      	bcs.n	8008f20 <__hexnan+0xcc>
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	b91b      	cbnz	r3, 8008f34 <__hexnan+0xe0>
 8008f2c:	4547      	cmp	r7, r8
 8008f2e:	d128      	bne.n	8008f82 <__hexnan+0x12e>
 8008f30:	2301      	movs	r3, #1
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	2005      	movs	r0, #5
 8008f36:	b007      	add	sp, #28
 8008f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	2d08      	cmp	r5, #8
 8008f40:	f10b 0b01 	add.w	fp, fp, #1
 8008f44:	dd06      	ble.n	8008f54 <__hexnan+0x100>
 8008f46:	4544      	cmp	r4, r8
 8008f48:	d9c1      	bls.n	8008ece <__hexnan+0x7a>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f50:	2501      	movs	r5, #1
 8008f52:	3c04      	subs	r4, #4
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	f000 000f 	and.w	r0, r0, #15
 8008f5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f5e:	6020      	str	r0, [r4, #0]
 8008f60:	e7b5      	b.n	8008ece <__hexnan+0x7a>
 8008f62:	2508      	movs	r5, #8
 8008f64:	e7b3      	b.n	8008ece <__hexnan+0x7a>
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0dd      	beq.n	8008f28 <__hexnan+0xd4>
 8008f6c:	f1c3 0320 	rsb	r3, r3, #32
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f74:	40da      	lsrs	r2, r3
 8008f76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f80:	e7d2      	b.n	8008f28 <__hexnan+0xd4>
 8008f82:	3f04      	subs	r7, #4
 8008f84:	e7d0      	b.n	8008f28 <__hexnan+0xd4>
 8008f86:	2004      	movs	r0, #4
 8008f88:	e7d5      	b.n	8008f36 <__hexnan+0xe2>

08008f8a <__ssputs_r>:
 8008f8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8e:	688e      	ldr	r6, [r1, #8]
 8008f90:	461f      	mov	r7, r3
 8008f92:	42be      	cmp	r6, r7
 8008f94:	680b      	ldr	r3, [r1, #0]
 8008f96:	4682      	mov	sl, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	4690      	mov	r8, r2
 8008f9c:	d82d      	bhi.n	8008ffa <__ssputs_r+0x70>
 8008f9e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fa2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fa6:	d026      	beq.n	8008ff6 <__ssputs_r+0x6c>
 8008fa8:	6965      	ldr	r5, [r4, #20]
 8008faa:	6909      	ldr	r1, [r1, #16]
 8008fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fb0:	eba3 0901 	sub.w	r9, r3, r1
 8008fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb8:	1c7b      	adds	r3, r7, #1
 8008fba:	444b      	add	r3, r9
 8008fbc:	106d      	asrs	r5, r5, #1
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	bf38      	it	cc
 8008fc2:	461d      	movcc	r5, r3
 8008fc4:	0553      	lsls	r3, r2, #21
 8008fc6:	d527      	bpl.n	8009018 <__ssputs_r+0x8e>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f000 faa1 	bl	8009510 <_malloc_r>
 8008fce:	4606      	mov	r6, r0
 8008fd0:	b360      	cbz	r0, 800902c <__ssputs_r+0xa2>
 8008fd2:	6921      	ldr	r1, [r4, #16]
 8008fd4:	464a      	mov	r2, r9
 8008fd6:	f7fe fe34 	bl	8007c42 <memcpy>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	6126      	str	r6, [r4, #16]
 8008fe8:	6165      	str	r5, [r4, #20]
 8008fea:	444e      	add	r6, r9
 8008fec:	eba5 0509 	sub.w	r5, r5, r9
 8008ff0:	6026      	str	r6, [r4, #0]
 8008ff2:	60a5      	str	r5, [r4, #8]
 8008ff4:	463e      	mov	r6, r7
 8008ff6:	42be      	cmp	r6, r7
 8008ff8:	d900      	bls.n	8008ffc <__ssputs_r+0x72>
 8008ffa:	463e      	mov	r6, r7
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	4632      	mov	r2, r6
 8009000:	4641      	mov	r1, r8
 8009002:	f001 f9f6 	bl	800a3f2 <memmove>
 8009006:	68a3      	ldr	r3, [r4, #8]
 8009008:	1b9b      	subs	r3, r3, r6
 800900a:	60a3      	str	r3, [r4, #8]
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	4433      	add	r3, r6
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	2000      	movs	r0, #0
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	462a      	mov	r2, r5
 800901a:	f001 f8b8 	bl	800a18e <_realloc_r>
 800901e:	4606      	mov	r6, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	d1e0      	bne.n	8008fe6 <__ssputs_r+0x5c>
 8009024:	6921      	ldr	r1, [r4, #16]
 8009026:	4650      	mov	r0, sl
 8009028:	f001 faa8 	bl	800a57c <_free_r>
 800902c:	230c      	movs	r3, #12
 800902e:	f8ca 3000 	str.w	r3, [sl]
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800903e:	e7e9      	b.n	8009014 <__ssputs_r+0x8a>

08009040 <_svfiprintf_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	4698      	mov	r8, r3
 8009046:	898b      	ldrh	r3, [r1, #12]
 8009048:	061b      	lsls	r3, r3, #24
 800904a:	b09d      	sub	sp, #116	@ 0x74
 800904c:	4607      	mov	r7, r0
 800904e:	460d      	mov	r5, r1
 8009050:	4614      	mov	r4, r2
 8009052:	d510      	bpl.n	8009076 <_svfiprintf_r+0x36>
 8009054:	690b      	ldr	r3, [r1, #16]
 8009056:	b973      	cbnz	r3, 8009076 <_svfiprintf_r+0x36>
 8009058:	2140      	movs	r1, #64	@ 0x40
 800905a:	f000 fa59 	bl	8009510 <_malloc_r>
 800905e:	6028      	str	r0, [r5, #0]
 8009060:	6128      	str	r0, [r5, #16]
 8009062:	b930      	cbnz	r0, 8009072 <_svfiprintf_r+0x32>
 8009064:	230c      	movs	r3, #12
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800906c:	b01d      	add	sp, #116	@ 0x74
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009072:	2340      	movs	r3, #64	@ 0x40
 8009074:	616b      	str	r3, [r5, #20]
 8009076:	2300      	movs	r3, #0
 8009078:	9309      	str	r3, [sp, #36]	@ 0x24
 800907a:	2320      	movs	r3, #32
 800907c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009080:	f8cd 800c 	str.w	r8, [sp, #12]
 8009084:	2330      	movs	r3, #48	@ 0x30
 8009086:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009224 <_svfiprintf_r+0x1e4>
 800908a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800908e:	f04f 0901 	mov.w	r9, #1
 8009092:	4623      	mov	r3, r4
 8009094:	469a      	mov	sl, r3
 8009096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800909a:	b10a      	cbz	r2, 80090a0 <_svfiprintf_r+0x60>
 800909c:	2a25      	cmp	r2, #37	@ 0x25
 800909e:	d1f9      	bne.n	8009094 <_svfiprintf_r+0x54>
 80090a0:	ebba 0b04 	subs.w	fp, sl, r4
 80090a4:	d00b      	beq.n	80090be <_svfiprintf_r+0x7e>
 80090a6:	465b      	mov	r3, fp
 80090a8:	4622      	mov	r2, r4
 80090aa:	4629      	mov	r1, r5
 80090ac:	4638      	mov	r0, r7
 80090ae:	f7ff ff6c 	bl	8008f8a <__ssputs_r>
 80090b2:	3001      	adds	r0, #1
 80090b4:	f000 80a7 	beq.w	8009206 <_svfiprintf_r+0x1c6>
 80090b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ba:	445a      	add	r2, fp
 80090bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80090be:	f89a 3000 	ldrb.w	r3, [sl]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 809f 	beq.w	8009206 <_svfiprintf_r+0x1c6>
 80090c8:	2300      	movs	r3, #0
 80090ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090d2:	f10a 0a01 	add.w	sl, sl, #1
 80090d6:	9304      	str	r3, [sp, #16]
 80090d8:	9307      	str	r3, [sp, #28]
 80090da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090de:	931a      	str	r3, [sp, #104]	@ 0x68
 80090e0:	4654      	mov	r4, sl
 80090e2:	2205      	movs	r2, #5
 80090e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e8:	484e      	ldr	r0, [pc, #312]	@ (8009224 <_svfiprintf_r+0x1e4>)
 80090ea:	f7f7 f899 	bl	8000220 <memchr>
 80090ee:	9a04      	ldr	r2, [sp, #16]
 80090f0:	b9d8      	cbnz	r0, 800912a <_svfiprintf_r+0xea>
 80090f2:	06d0      	lsls	r0, r2, #27
 80090f4:	bf44      	itt	mi
 80090f6:	2320      	movmi	r3, #32
 80090f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090fc:	0711      	lsls	r1, r2, #28
 80090fe:	bf44      	itt	mi
 8009100:	232b      	movmi	r3, #43	@ 0x2b
 8009102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009106:	f89a 3000 	ldrb.w	r3, [sl]
 800910a:	2b2a      	cmp	r3, #42	@ 0x2a
 800910c:	d015      	beq.n	800913a <_svfiprintf_r+0xfa>
 800910e:	9a07      	ldr	r2, [sp, #28]
 8009110:	4654      	mov	r4, sl
 8009112:	2000      	movs	r0, #0
 8009114:	f04f 0c0a 	mov.w	ip, #10
 8009118:	4621      	mov	r1, r4
 800911a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800911e:	3b30      	subs	r3, #48	@ 0x30
 8009120:	2b09      	cmp	r3, #9
 8009122:	d94b      	bls.n	80091bc <_svfiprintf_r+0x17c>
 8009124:	b1b0      	cbz	r0, 8009154 <_svfiprintf_r+0x114>
 8009126:	9207      	str	r2, [sp, #28]
 8009128:	e014      	b.n	8009154 <_svfiprintf_r+0x114>
 800912a:	eba0 0308 	sub.w	r3, r0, r8
 800912e:	fa09 f303 	lsl.w	r3, r9, r3
 8009132:	4313      	orrs	r3, r2
 8009134:	9304      	str	r3, [sp, #16]
 8009136:	46a2      	mov	sl, r4
 8009138:	e7d2      	b.n	80090e0 <_svfiprintf_r+0xa0>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	1d19      	adds	r1, r3, #4
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	9103      	str	r1, [sp, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	bfbb      	ittet	lt
 8009146:	425b      	neglt	r3, r3
 8009148:	f042 0202 	orrlt.w	r2, r2, #2
 800914c:	9307      	strge	r3, [sp, #28]
 800914e:	9307      	strlt	r3, [sp, #28]
 8009150:	bfb8      	it	lt
 8009152:	9204      	strlt	r2, [sp, #16]
 8009154:	7823      	ldrb	r3, [r4, #0]
 8009156:	2b2e      	cmp	r3, #46	@ 0x2e
 8009158:	d10a      	bne.n	8009170 <_svfiprintf_r+0x130>
 800915a:	7863      	ldrb	r3, [r4, #1]
 800915c:	2b2a      	cmp	r3, #42	@ 0x2a
 800915e:	d132      	bne.n	80091c6 <_svfiprintf_r+0x186>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	1d1a      	adds	r2, r3, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	9203      	str	r2, [sp, #12]
 8009168:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800916c:	3402      	adds	r4, #2
 800916e:	9305      	str	r3, [sp, #20]
 8009170:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009234 <_svfiprintf_r+0x1f4>
 8009174:	7821      	ldrb	r1, [r4, #0]
 8009176:	2203      	movs	r2, #3
 8009178:	4650      	mov	r0, sl
 800917a:	f7f7 f851 	bl	8000220 <memchr>
 800917e:	b138      	cbz	r0, 8009190 <_svfiprintf_r+0x150>
 8009180:	9b04      	ldr	r3, [sp, #16]
 8009182:	eba0 000a 	sub.w	r0, r0, sl
 8009186:	2240      	movs	r2, #64	@ 0x40
 8009188:	4082      	lsls	r2, r0
 800918a:	4313      	orrs	r3, r2
 800918c:	3401      	adds	r4, #1
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009194:	4824      	ldr	r0, [pc, #144]	@ (8009228 <_svfiprintf_r+0x1e8>)
 8009196:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800919a:	2206      	movs	r2, #6
 800919c:	f7f7 f840 	bl	8000220 <memchr>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d036      	beq.n	8009212 <_svfiprintf_r+0x1d2>
 80091a4:	4b21      	ldr	r3, [pc, #132]	@ (800922c <_svfiprintf_r+0x1ec>)
 80091a6:	bb1b      	cbnz	r3, 80091f0 <_svfiprintf_r+0x1b0>
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	3307      	adds	r3, #7
 80091ac:	f023 0307 	bic.w	r3, r3, #7
 80091b0:	3308      	adds	r3, #8
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b6:	4433      	add	r3, r6
 80091b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ba:	e76a      	b.n	8009092 <_svfiprintf_r+0x52>
 80091bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80091c0:	460c      	mov	r4, r1
 80091c2:	2001      	movs	r0, #1
 80091c4:	e7a8      	b.n	8009118 <_svfiprintf_r+0xd8>
 80091c6:	2300      	movs	r3, #0
 80091c8:	3401      	adds	r4, #1
 80091ca:	9305      	str	r3, [sp, #20]
 80091cc:	4619      	mov	r1, r3
 80091ce:	f04f 0c0a 	mov.w	ip, #10
 80091d2:	4620      	mov	r0, r4
 80091d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d8:	3a30      	subs	r2, #48	@ 0x30
 80091da:	2a09      	cmp	r2, #9
 80091dc:	d903      	bls.n	80091e6 <_svfiprintf_r+0x1a6>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0c6      	beq.n	8009170 <_svfiprintf_r+0x130>
 80091e2:	9105      	str	r1, [sp, #20]
 80091e4:	e7c4      	b.n	8009170 <_svfiprintf_r+0x130>
 80091e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ea:	4604      	mov	r4, r0
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7f0      	b.n	80091d2 <_svfiprintf_r+0x192>
 80091f0:	ab03      	add	r3, sp, #12
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	462a      	mov	r2, r5
 80091f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009230 <_svfiprintf_r+0x1f0>)
 80091f8:	a904      	add	r1, sp, #16
 80091fa:	4638      	mov	r0, r7
 80091fc:	f7fc ff1c 	bl	8006038 <_printf_float>
 8009200:	1c42      	adds	r2, r0, #1
 8009202:	4606      	mov	r6, r0
 8009204:	d1d6      	bne.n	80091b4 <_svfiprintf_r+0x174>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	065b      	lsls	r3, r3, #25
 800920a:	f53f af2d 	bmi.w	8009068 <_svfiprintf_r+0x28>
 800920e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009210:	e72c      	b.n	800906c <_svfiprintf_r+0x2c>
 8009212:	ab03      	add	r3, sp, #12
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	462a      	mov	r2, r5
 8009218:	4b05      	ldr	r3, [pc, #20]	@ (8009230 <_svfiprintf_r+0x1f0>)
 800921a:	a904      	add	r1, sp, #16
 800921c:	4638      	mov	r0, r7
 800921e:	f7fd f9a3 	bl	8006568 <_printf_i>
 8009222:	e7ed      	b.n	8009200 <_svfiprintf_r+0x1c0>
 8009224:	0800aac6 	.word	0x0800aac6
 8009228:	0800aad0 	.word	0x0800aad0
 800922c:	08006039 	.word	0x08006039
 8009230:	08008f8b 	.word	0x08008f8b
 8009234:	0800aacc 	.word	0x0800aacc

08009238 <__sfputc_r>:
 8009238:	6893      	ldr	r3, [r2, #8]
 800923a:	3b01      	subs	r3, #1
 800923c:	2b00      	cmp	r3, #0
 800923e:	b410      	push	{r4}
 8009240:	6093      	str	r3, [r2, #8]
 8009242:	da08      	bge.n	8009256 <__sfputc_r+0x1e>
 8009244:	6994      	ldr	r4, [r2, #24]
 8009246:	42a3      	cmp	r3, r4
 8009248:	db01      	blt.n	800924e <__sfputc_r+0x16>
 800924a:	290a      	cmp	r1, #10
 800924c:	d103      	bne.n	8009256 <__sfputc_r+0x1e>
 800924e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009252:	f000 bfca 	b.w	800a1ea <__swbuf_r>
 8009256:	6813      	ldr	r3, [r2, #0]
 8009258:	1c58      	adds	r0, r3, #1
 800925a:	6010      	str	r0, [r2, #0]
 800925c:	7019      	strb	r1, [r3, #0]
 800925e:	4608      	mov	r0, r1
 8009260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009264:	4770      	bx	lr

08009266 <__sfputs_r>:
 8009266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009268:	4606      	mov	r6, r0
 800926a:	460f      	mov	r7, r1
 800926c:	4614      	mov	r4, r2
 800926e:	18d5      	adds	r5, r2, r3
 8009270:	42ac      	cmp	r4, r5
 8009272:	d101      	bne.n	8009278 <__sfputs_r+0x12>
 8009274:	2000      	movs	r0, #0
 8009276:	e007      	b.n	8009288 <__sfputs_r+0x22>
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	463a      	mov	r2, r7
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ffda 	bl	8009238 <__sfputc_r>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d1f3      	bne.n	8009270 <__sfputs_r+0xa>
 8009288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800928c <_vfiprintf_r>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	460d      	mov	r5, r1
 8009292:	b09d      	sub	sp, #116	@ 0x74
 8009294:	4614      	mov	r4, r2
 8009296:	4698      	mov	r8, r3
 8009298:	4606      	mov	r6, r0
 800929a:	b118      	cbz	r0, 80092a4 <_vfiprintf_r+0x18>
 800929c:	6a03      	ldr	r3, [r0, #32]
 800929e:	b90b      	cbnz	r3, 80092a4 <_vfiprintf_r+0x18>
 80092a0:	f7fd fd42 	bl	8006d28 <__sinit>
 80092a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092a6:	07d9      	lsls	r1, r3, #31
 80092a8:	d405      	bmi.n	80092b6 <_vfiprintf_r+0x2a>
 80092aa:	89ab      	ldrh	r3, [r5, #12]
 80092ac:	059a      	lsls	r2, r3, #22
 80092ae:	d402      	bmi.n	80092b6 <_vfiprintf_r+0x2a>
 80092b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092b2:	f7fe fcc4 	bl	8007c3e <__retarget_lock_acquire_recursive>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	071b      	lsls	r3, r3, #28
 80092ba:	d501      	bpl.n	80092c0 <_vfiprintf_r+0x34>
 80092bc:	692b      	ldr	r3, [r5, #16]
 80092be:	b99b      	cbnz	r3, 80092e8 <_vfiprintf_r+0x5c>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 ffd0 	bl	800a268 <__swsetup_r>
 80092c8:	b170      	cbz	r0, 80092e8 <_vfiprintf_r+0x5c>
 80092ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092cc:	07dc      	lsls	r4, r3, #31
 80092ce:	d504      	bpl.n	80092da <_vfiprintf_r+0x4e>
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092d4:	b01d      	add	sp, #116	@ 0x74
 80092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	0598      	lsls	r0, r3, #22
 80092de:	d4f7      	bmi.n	80092d0 <_vfiprintf_r+0x44>
 80092e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092e2:	f7fe fcad 	bl	8007c40 <__retarget_lock_release_recursive>
 80092e6:	e7f3      	b.n	80092d0 <_vfiprintf_r+0x44>
 80092e8:	2300      	movs	r3, #0
 80092ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ec:	2320      	movs	r3, #32
 80092ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f6:	2330      	movs	r3, #48	@ 0x30
 80092f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094a8 <_vfiprintf_r+0x21c>
 80092fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009300:	f04f 0901 	mov.w	r9, #1
 8009304:	4623      	mov	r3, r4
 8009306:	469a      	mov	sl, r3
 8009308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930c:	b10a      	cbz	r2, 8009312 <_vfiprintf_r+0x86>
 800930e:	2a25      	cmp	r2, #37	@ 0x25
 8009310:	d1f9      	bne.n	8009306 <_vfiprintf_r+0x7a>
 8009312:	ebba 0b04 	subs.w	fp, sl, r4
 8009316:	d00b      	beq.n	8009330 <_vfiprintf_r+0xa4>
 8009318:	465b      	mov	r3, fp
 800931a:	4622      	mov	r2, r4
 800931c:	4629      	mov	r1, r5
 800931e:	4630      	mov	r0, r6
 8009320:	f7ff ffa1 	bl	8009266 <__sfputs_r>
 8009324:	3001      	adds	r0, #1
 8009326:	f000 80a7 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 800932a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800932c:	445a      	add	r2, fp
 800932e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009330:	f89a 3000 	ldrb.w	r3, [sl]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 809f 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 800933a:	2300      	movs	r3, #0
 800933c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009344:	f10a 0a01 	add.w	sl, sl, #1
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	9307      	str	r3, [sp, #28]
 800934c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009350:	931a      	str	r3, [sp, #104]	@ 0x68
 8009352:	4654      	mov	r4, sl
 8009354:	2205      	movs	r2, #5
 8009356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935a:	4853      	ldr	r0, [pc, #332]	@ (80094a8 <_vfiprintf_r+0x21c>)
 800935c:	f7f6 ff60 	bl	8000220 <memchr>
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	b9d8      	cbnz	r0, 800939c <_vfiprintf_r+0x110>
 8009364:	06d1      	lsls	r1, r2, #27
 8009366:	bf44      	itt	mi
 8009368:	2320      	movmi	r3, #32
 800936a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800936e:	0713      	lsls	r3, r2, #28
 8009370:	bf44      	itt	mi
 8009372:	232b      	movmi	r3, #43	@ 0x2b
 8009374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009378:	f89a 3000 	ldrb.w	r3, [sl]
 800937c:	2b2a      	cmp	r3, #42	@ 0x2a
 800937e:	d015      	beq.n	80093ac <_vfiprintf_r+0x120>
 8009380:	9a07      	ldr	r2, [sp, #28]
 8009382:	4654      	mov	r4, sl
 8009384:	2000      	movs	r0, #0
 8009386:	f04f 0c0a 	mov.w	ip, #10
 800938a:	4621      	mov	r1, r4
 800938c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009390:	3b30      	subs	r3, #48	@ 0x30
 8009392:	2b09      	cmp	r3, #9
 8009394:	d94b      	bls.n	800942e <_vfiprintf_r+0x1a2>
 8009396:	b1b0      	cbz	r0, 80093c6 <_vfiprintf_r+0x13a>
 8009398:	9207      	str	r2, [sp, #28]
 800939a:	e014      	b.n	80093c6 <_vfiprintf_r+0x13a>
 800939c:	eba0 0308 	sub.w	r3, r0, r8
 80093a0:	fa09 f303 	lsl.w	r3, r9, r3
 80093a4:	4313      	orrs	r3, r2
 80093a6:	9304      	str	r3, [sp, #16]
 80093a8:	46a2      	mov	sl, r4
 80093aa:	e7d2      	b.n	8009352 <_vfiprintf_r+0xc6>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	1d19      	adds	r1, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	9103      	str	r1, [sp, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfbb      	ittet	lt
 80093b8:	425b      	neglt	r3, r3
 80093ba:	f042 0202 	orrlt.w	r2, r2, #2
 80093be:	9307      	strge	r3, [sp, #28]
 80093c0:	9307      	strlt	r3, [sp, #28]
 80093c2:	bfb8      	it	lt
 80093c4:	9204      	strlt	r2, [sp, #16]
 80093c6:	7823      	ldrb	r3, [r4, #0]
 80093c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ca:	d10a      	bne.n	80093e2 <_vfiprintf_r+0x156>
 80093cc:	7863      	ldrb	r3, [r4, #1]
 80093ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80093d0:	d132      	bne.n	8009438 <_vfiprintf_r+0x1ac>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	1d1a      	adds	r2, r3, #4
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	9203      	str	r2, [sp, #12]
 80093da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093de:	3402      	adds	r4, #2
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094b8 <_vfiprintf_r+0x22c>
 80093e6:	7821      	ldrb	r1, [r4, #0]
 80093e8:	2203      	movs	r2, #3
 80093ea:	4650      	mov	r0, sl
 80093ec:	f7f6 ff18 	bl	8000220 <memchr>
 80093f0:	b138      	cbz	r0, 8009402 <_vfiprintf_r+0x176>
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	eba0 000a 	sub.w	r0, r0, sl
 80093f8:	2240      	movs	r2, #64	@ 0x40
 80093fa:	4082      	lsls	r2, r0
 80093fc:	4313      	orrs	r3, r2
 80093fe:	3401      	adds	r4, #1
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009406:	4829      	ldr	r0, [pc, #164]	@ (80094ac <_vfiprintf_r+0x220>)
 8009408:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800940c:	2206      	movs	r2, #6
 800940e:	f7f6 ff07 	bl	8000220 <memchr>
 8009412:	2800      	cmp	r0, #0
 8009414:	d03f      	beq.n	8009496 <_vfiprintf_r+0x20a>
 8009416:	4b26      	ldr	r3, [pc, #152]	@ (80094b0 <_vfiprintf_r+0x224>)
 8009418:	bb1b      	cbnz	r3, 8009462 <_vfiprintf_r+0x1d6>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	3307      	adds	r3, #7
 800941e:	f023 0307 	bic.w	r3, r3, #7
 8009422:	3308      	adds	r3, #8
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009428:	443b      	add	r3, r7
 800942a:	9309      	str	r3, [sp, #36]	@ 0x24
 800942c:	e76a      	b.n	8009304 <_vfiprintf_r+0x78>
 800942e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009432:	460c      	mov	r4, r1
 8009434:	2001      	movs	r0, #1
 8009436:	e7a8      	b.n	800938a <_vfiprintf_r+0xfe>
 8009438:	2300      	movs	r3, #0
 800943a:	3401      	adds	r4, #1
 800943c:	9305      	str	r3, [sp, #20]
 800943e:	4619      	mov	r1, r3
 8009440:	f04f 0c0a 	mov.w	ip, #10
 8009444:	4620      	mov	r0, r4
 8009446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944a:	3a30      	subs	r2, #48	@ 0x30
 800944c:	2a09      	cmp	r2, #9
 800944e:	d903      	bls.n	8009458 <_vfiprintf_r+0x1cc>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0c6      	beq.n	80093e2 <_vfiprintf_r+0x156>
 8009454:	9105      	str	r1, [sp, #20]
 8009456:	e7c4      	b.n	80093e2 <_vfiprintf_r+0x156>
 8009458:	fb0c 2101 	mla	r1, ip, r1, r2
 800945c:	4604      	mov	r4, r0
 800945e:	2301      	movs	r3, #1
 8009460:	e7f0      	b.n	8009444 <_vfiprintf_r+0x1b8>
 8009462:	ab03      	add	r3, sp, #12
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	462a      	mov	r2, r5
 8009468:	4b12      	ldr	r3, [pc, #72]	@ (80094b4 <_vfiprintf_r+0x228>)
 800946a:	a904      	add	r1, sp, #16
 800946c:	4630      	mov	r0, r6
 800946e:	f7fc fde3 	bl	8006038 <_printf_float>
 8009472:	4607      	mov	r7, r0
 8009474:	1c78      	adds	r0, r7, #1
 8009476:	d1d6      	bne.n	8009426 <_vfiprintf_r+0x19a>
 8009478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800947a:	07d9      	lsls	r1, r3, #31
 800947c:	d405      	bmi.n	800948a <_vfiprintf_r+0x1fe>
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	059a      	lsls	r2, r3, #22
 8009482:	d402      	bmi.n	800948a <_vfiprintf_r+0x1fe>
 8009484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009486:	f7fe fbdb 	bl	8007c40 <__retarget_lock_release_recursive>
 800948a:	89ab      	ldrh	r3, [r5, #12]
 800948c:	065b      	lsls	r3, r3, #25
 800948e:	f53f af1f 	bmi.w	80092d0 <_vfiprintf_r+0x44>
 8009492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009494:	e71e      	b.n	80092d4 <_vfiprintf_r+0x48>
 8009496:	ab03      	add	r3, sp, #12
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462a      	mov	r2, r5
 800949c:	4b05      	ldr	r3, [pc, #20]	@ (80094b4 <_vfiprintf_r+0x228>)
 800949e:	a904      	add	r1, sp, #16
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7fd f861 	bl	8006568 <_printf_i>
 80094a6:	e7e4      	b.n	8009472 <_vfiprintf_r+0x1e6>
 80094a8:	0800aac6 	.word	0x0800aac6
 80094ac:	0800aad0 	.word	0x0800aad0
 80094b0:	08006039 	.word	0x08006039
 80094b4:	08009267 	.word	0x08009267
 80094b8:	0800aacc 	.word	0x0800aacc

080094bc <malloc>:
 80094bc:	4b02      	ldr	r3, [pc, #8]	@ (80094c8 <malloc+0xc>)
 80094be:	4601      	mov	r1, r0
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	f000 b825 	b.w	8009510 <_malloc_r>
 80094c6:	bf00      	nop
 80094c8:	20000184 	.word	0x20000184

080094cc <sbrk_aligned>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	4e0f      	ldr	r6, [pc, #60]	@ (800950c <sbrk_aligned+0x40>)
 80094d0:	460c      	mov	r4, r1
 80094d2:	6831      	ldr	r1, [r6, #0]
 80094d4:	4605      	mov	r5, r0
 80094d6:	b911      	cbnz	r1, 80094de <sbrk_aligned+0x12>
 80094d8:	f000 fffc 	bl	800a4d4 <_sbrk_r>
 80094dc:	6030      	str	r0, [r6, #0]
 80094de:	4621      	mov	r1, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 fff7 	bl	800a4d4 <_sbrk_r>
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	d103      	bne.n	80094f2 <sbrk_aligned+0x26>
 80094ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80094ee:	4620      	mov	r0, r4
 80094f0:	bd70      	pop	{r4, r5, r6, pc}
 80094f2:	1cc4      	adds	r4, r0, #3
 80094f4:	f024 0403 	bic.w	r4, r4, #3
 80094f8:	42a0      	cmp	r0, r4
 80094fa:	d0f8      	beq.n	80094ee <sbrk_aligned+0x22>
 80094fc:	1a21      	subs	r1, r4, r0
 80094fe:	4628      	mov	r0, r5
 8009500:	f000 ffe8 	bl	800a4d4 <_sbrk_r>
 8009504:	3001      	adds	r0, #1
 8009506:	d1f2      	bne.n	80094ee <sbrk_aligned+0x22>
 8009508:	e7ef      	b.n	80094ea <sbrk_aligned+0x1e>
 800950a:	bf00      	nop
 800950c:	20000cd8 	.word	0x20000cd8

08009510 <_malloc_r>:
 8009510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009514:	1ccd      	adds	r5, r1, #3
 8009516:	f025 0503 	bic.w	r5, r5, #3
 800951a:	3508      	adds	r5, #8
 800951c:	2d0c      	cmp	r5, #12
 800951e:	bf38      	it	cc
 8009520:	250c      	movcc	r5, #12
 8009522:	2d00      	cmp	r5, #0
 8009524:	4606      	mov	r6, r0
 8009526:	db01      	blt.n	800952c <_malloc_r+0x1c>
 8009528:	42a9      	cmp	r1, r5
 800952a:	d904      	bls.n	8009536 <_malloc_r+0x26>
 800952c:	230c      	movs	r3, #12
 800952e:	6033      	str	r3, [r6, #0]
 8009530:	2000      	movs	r0, #0
 8009532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800960c <_malloc_r+0xfc>
 800953a:	f000 f927 	bl	800978c <__malloc_lock>
 800953e:	f8d8 3000 	ldr.w	r3, [r8]
 8009542:	461c      	mov	r4, r3
 8009544:	bb44      	cbnz	r4, 8009598 <_malloc_r+0x88>
 8009546:	4629      	mov	r1, r5
 8009548:	4630      	mov	r0, r6
 800954a:	f7ff ffbf 	bl	80094cc <sbrk_aligned>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	4604      	mov	r4, r0
 8009552:	d158      	bne.n	8009606 <_malloc_r+0xf6>
 8009554:	f8d8 4000 	ldr.w	r4, [r8]
 8009558:	4627      	mov	r7, r4
 800955a:	2f00      	cmp	r7, #0
 800955c:	d143      	bne.n	80095e6 <_malloc_r+0xd6>
 800955e:	2c00      	cmp	r4, #0
 8009560:	d04b      	beq.n	80095fa <_malloc_r+0xea>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	4639      	mov	r1, r7
 8009566:	4630      	mov	r0, r6
 8009568:	eb04 0903 	add.w	r9, r4, r3
 800956c:	f000 ffb2 	bl	800a4d4 <_sbrk_r>
 8009570:	4581      	cmp	r9, r0
 8009572:	d142      	bne.n	80095fa <_malloc_r+0xea>
 8009574:	6821      	ldr	r1, [r4, #0]
 8009576:	1a6d      	subs	r5, r5, r1
 8009578:	4629      	mov	r1, r5
 800957a:	4630      	mov	r0, r6
 800957c:	f7ff ffa6 	bl	80094cc <sbrk_aligned>
 8009580:	3001      	adds	r0, #1
 8009582:	d03a      	beq.n	80095fa <_malloc_r+0xea>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	442b      	add	r3, r5
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	f8d8 3000 	ldr.w	r3, [r8]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	bb62      	cbnz	r2, 80095ec <_malloc_r+0xdc>
 8009592:	f8c8 7000 	str.w	r7, [r8]
 8009596:	e00f      	b.n	80095b8 <_malloc_r+0xa8>
 8009598:	6822      	ldr	r2, [r4, #0]
 800959a:	1b52      	subs	r2, r2, r5
 800959c:	d420      	bmi.n	80095e0 <_malloc_r+0xd0>
 800959e:	2a0b      	cmp	r2, #11
 80095a0:	d917      	bls.n	80095d2 <_malloc_r+0xc2>
 80095a2:	1961      	adds	r1, r4, r5
 80095a4:	42a3      	cmp	r3, r4
 80095a6:	6025      	str	r5, [r4, #0]
 80095a8:	bf18      	it	ne
 80095aa:	6059      	strne	r1, [r3, #4]
 80095ac:	6863      	ldr	r3, [r4, #4]
 80095ae:	bf08      	it	eq
 80095b0:	f8c8 1000 	streq.w	r1, [r8]
 80095b4:	5162      	str	r2, [r4, r5]
 80095b6:	604b      	str	r3, [r1, #4]
 80095b8:	4630      	mov	r0, r6
 80095ba:	f000 f8ed 	bl	8009798 <__malloc_unlock>
 80095be:	f104 000b 	add.w	r0, r4, #11
 80095c2:	1d23      	adds	r3, r4, #4
 80095c4:	f020 0007 	bic.w	r0, r0, #7
 80095c8:	1ac2      	subs	r2, r0, r3
 80095ca:	bf1c      	itt	ne
 80095cc:	1a1b      	subne	r3, r3, r0
 80095ce:	50a3      	strne	r3, [r4, r2]
 80095d0:	e7af      	b.n	8009532 <_malloc_r+0x22>
 80095d2:	6862      	ldr	r2, [r4, #4]
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	bf0c      	ite	eq
 80095d8:	f8c8 2000 	streq.w	r2, [r8]
 80095dc:	605a      	strne	r2, [r3, #4]
 80095de:	e7eb      	b.n	80095b8 <_malloc_r+0xa8>
 80095e0:	4623      	mov	r3, r4
 80095e2:	6864      	ldr	r4, [r4, #4]
 80095e4:	e7ae      	b.n	8009544 <_malloc_r+0x34>
 80095e6:	463c      	mov	r4, r7
 80095e8:	687f      	ldr	r7, [r7, #4]
 80095ea:	e7b6      	b.n	800955a <_malloc_r+0x4a>
 80095ec:	461a      	mov	r2, r3
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	42a3      	cmp	r3, r4
 80095f2:	d1fb      	bne.n	80095ec <_malloc_r+0xdc>
 80095f4:	2300      	movs	r3, #0
 80095f6:	6053      	str	r3, [r2, #4]
 80095f8:	e7de      	b.n	80095b8 <_malloc_r+0xa8>
 80095fa:	230c      	movs	r3, #12
 80095fc:	6033      	str	r3, [r6, #0]
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 f8ca 	bl	8009798 <__malloc_unlock>
 8009604:	e794      	b.n	8009530 <_malloc_r+0x20>
 8009606:	6005      	str	r5, [r0, #0]
 8009608:	e7d6      	b.n	80095b8 <_malloc_r+0xa8>
 800960a:	bf00      	nop
 800960c:	20000cdc 	.word	0x20000cdc

08009610 <__ascii_mbtowc>:
 8009610:	b082      	sub	sp, #8
 8009612:	b901      	cbnz	r1, 8009616 <__ascii_mbtowc+0x6>
 8009614:	a901      	add	r1, sp, #4
 8009616:	b142      	cbz	r2, 800962a <__ascii_mbtowc+0x1a>
 8009618:	b14b      	cbz	r3, 800962e <__ascii_mbtowc+0x1e>
 800961a:	7813      	ldrb	r3, [r2, #0]
 800961c:	600b      	str	r3, [r1, #0]
 800961e:	7812      	ldrb	r2, [r2, #0]
 8009620:	1e10      	subs	r0, r2, #0
 8009622:	bf18      	it	ne
 8009624:	2001      	movne	r0, #1
 8009626:	b002      	add	sp, #8
 8009628:	4770      	bx	lr
 800962a:	4610      	mov	r0, r2
 800962c:	e7fb      	b.n	8009626 <__ascii_mbtowc+0x16>
 800962e:	f06f 0001 	mvn.w	r0, #1
 8009632:	e7f8      	b.n	8009626 <__ascii_mbtowc+0x16>

08009634 <__sflush_r>:
 8009634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963c:	0716      	lsls	r6, r2, #28
 800963e:	4605      	mov	r5, r0
 8009640:	460c      	mov	r4, r1
 8009642:	d454      	bmi.n	80096ee <__sflush_r+0xba>
 8009644:	684b      	ldr	r3, [r1, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	dc02      	bgt.n	8009650 <__sflush_r+0x1c>
 800964a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800964c:	2b00      	cmp	r3, #0
 800964e:	dd48      	ble.n	80096e2 <__sflush_r+0xae>
 8009650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009652:	2e00      	cmp	r6, #0
 8009654:	d045      	beq.n	80096e2 <__sflush_r+0xae>
 8009656:	2300      	movs	r3, #0
 8009658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800965c:	682f      	ldr	r7, [r5, #0]
 800965e:	6a21      	ldr	r1, [r4, #32]
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	d030      	beq.n	80096c6 <__sflush_r+0x92>
 8009664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	0759      	lsls	r1, r3, #29
 800966a:	d505      	bpl.n	8009678 <__sflush_r+0x44>
 800966c:	6863      	ldr	r3, [r4, #4]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009672:	b10b      	cbz	r3, 8009678 <__sflush_r+0x44>
 8009674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009676:	1ad2      	subs	r2, r2, r3
 8009678:	2300      	movs	r3, #0
 800967a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800967c:	6a21      	ldr	r1, [r4, #32]
 800967e:	4628      	mov	r0, r5
 8009680:	47b0      	blx	r6
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	d106      	bne.n	8009696 <__sflush_r+0x62>
 8009688:	6829      	ldr	r1, [r5, #0]
 800968a:	291d      	cmp	r1, #29
 800968c:	d82b      	bhi.n	80096e6 <__sflush_r+0xb2>
 800968e:	4a2a      	ldr	r2, [pc, #168]	@ (8009738 <__sflush_r+0x104>)
 8009690:	410a      	asrs	r2, r1
 8009692:	07d6      	lsls	r6, r2, #31
 8009694:	d427      	bmi.n	80096e6 <__sflush_r+0xb2>
 8009696:	2200      	movs	r2, #0
 8009698:	6062      	str	r2, [r4, #4]
 800969a:	04d9      	lsls	r1, r3, #19
 800969c:	6922      	ldr	r2, [r4, #16]
 800969e:	6022      	str	r2, [r4, #0]
 80096a0:	d504      	bpl.n	80096ac <__sflush_r+0x78>
 80096a2:	1c42      	adds	r2, r0, #1
 80096a4:	d101      	bne.n	80096aa <__sflush_r+0x76>
 80096a6:	682b      	ldr	r3, [r5, #0]
 80096a8:	b903      	cbnz	r3, 80096ac <__sflush_r+0x78>
 80096aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80096ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096ae:	602f      	str	r7, [r5, #0]
 80096b0:	b1b9      	cbz	r1, 80096e2 <__sflush_r+0xae>
 80096b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096b6:	4299      	cmp	r1, r3
 80096b8:	d002      	beq.n	80096c0 <__sflush_r+0x8c>
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 ff5e 	bl	800a57c <_free_r>
 80096c0:	2300      	movs	r3, #0
 80096c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80096c4:	e00d      	b.n	80096e2 <__sflush_r+0xae>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b0      	blx	r6
 80096cc:	4602      	mov	r2, r0
 80096ce:	1c50      	adds	r0, r2, #1
 80096d0:	d1c9      	bne.n	8009666 <__sflush_r+0x32>
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0c6      	beq.n	8009666 <__sflush_r+0x32>
 80096d8:	2b1d      	cmp	r3, #29
 80096da:	d001      	beq.n	80096e0 <__sflush_r+0xac>
 80096dc:	2b16      	cmp	r3, #22
 80096de:	d11e      	bne.n	800971e <__sflush_r+0xea>
 80096e0:	602f      	str	r7, [r5, #0]
 80096e2:	2000      	movs	r0, #0
 80096e4:	e022      	b.n	800972c <__sflush_r+0xf8>
 80096e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ea:	b21b      	sxth	r3, r3
 80096ec:	e01b      	b.n	8009726 <__sflush_r+0xf2>
 80096ee:	690f      	ldr	r7, [r1, #16]
 80096f0:	2f00      	cmp	r7, #0
 80096f2:	d0f6      	beq.n	80096e2 <__sflush_r+0xae>
 80096f4:	0793      	lsls	r3, r2, #30
 80096f6:	680e      	ldr	r6, [r1, #0]
 80096f8:	bf08      	it	eq
 80096fa:	694b      	ldreq	r3, [r1, #20]
 80096fc:	600f      	str	r7, [r1, #0]
 80096fe:	bf18      	it	ne
 8009700:	2300      	movne	r3, #0
 8009702:	eba6 0807 	sub.w	r8, r6, r7
 8009706:	608b      	str	r3, [r1, #8]
 8009708:	f1b8 0f00 	cmp.w	r8, #0
 800970c:	dde9      	ble.n	80096e2 <__sflush_r+0xae>
 800970e:	6a21      	ldr	r1, [r4, #32]
 8009710:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009712:	4643      	mov	r3, r8
 8009714:	463a      	mov	r2, r7
 8009716:	4628      	mov	r0, r5
 8009718:	47b0      	blx	r6
 800971a:	2800      	cmp	r0, #0
 800971c:	dc08      	bgt.n	8009730 <__sflush_r+0xfc>
 800971e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009730:	4407      	add	r7, r0
 8009732:	eba8 0800 	sub.w	r8, r8, r0
 8009736:	e7e7      	b.n	8009708 <__sflush_r+0xd4>
 8009738:	dfbffffe 	.word	0xdfbffffe

0800973c <_fflush_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	690b      	ldr	r3, [r1, #16]
 8009740:	4605      	mov	r5, r0
 8009742:	460c      	mov	r4, r1
 8009744:	b913      	cbnz	r3, 800974c <_fflush_r+0x10>
 8009746:	2500      	movs	r5, #0
 8009748:	4628      	mov	r0, r5
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	b118      	cbz	r0, 8009756 <_fflush_r+0x1a>
 800974e:	6a03      	ldr	r3, [r0, #32]
 8009750:	b90b      	cbnz	r3, 8009756 <_fflush_r+0x1a>
 8009752:	f7fd fae9 	bl	8006d28 <__sinit>
 8009756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0f3      	beq.n	8009746 <_fflush_r+0xa>
 800975e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009760:	07d0      	lsls	r0, r2, #31
 8009762:	d404      	bmi.n	800976e <_fflush_r+0x32>
 8009764:	0599      	lsls	r1, r3, #22
 8009766:	d402      	bmi.n	800976e <_fflush_r+0x32>
 8009768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800976a:	f7fe fa68 	bl	8007c3e <__retarget_lock_acquire_recursive>
 800976e:	4628      	mov	r0, r5
 8009770:	4621      	mov	r1, r4
 8009772:	f7ff ff5f 	bl	8009634 <__sflush_r>
 8009776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009778:	07da      	lsls	r2, r3, #31
 800977a:	4605      	mov	r5, r0
 800977c:	d4e4      	bmi.n	8009748 <_fflush_r+0xc>
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	059b      	lsls	r3, r3, #22
 8009782:	d4e1      	bmi.n	8009748 <_fflush_r+0xc>
 8009784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009786:	f7fe fa5b 	bl	8007c40 <__retarget_lock_release_recursive>
 800978a:	e7dd      	b.n	8009748 <_fflush_r+0xc>

0800978c <__malloc_lock>:
 800978c:	4801      	ldr	r0, [pc, #4]	@ (8009794 <__malloc_lock+0x8>)
 800978e:	f7fe ba56 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 8009792:	bf00      	nop
 8009794:	20000cd4 	.word	0x20000cd4

08009798 <__malloc_unlock>:
 8009798:	4801      	ldr	r0, [pc, #4]	@ (80097a0 <__malloc_unlock+0x8>)
 800979a:	f7fe ba51 	b.w	8007c40 <__retarget_lock_release_recursive>
 800979e:	bf00      	nop
 80097a0:	20000cd4 	.word	0x20000cd4

080097a4 <_Balloc>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	69c6      	ldr	r6, [r0, #28]
 80097a8:	4604      	mov	r4, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	b976      	cbnz	r6, 80097cc <_Balloc+0x28>
 80097ae:	2010      	movs	r0, #16
 80097b0:	f7ff fe84 	bl	80094bc <malloc>
 80097b4:	4602      	mov	r2, r0
 80097b6:	61e0      	str	r0, [r4, #28]
 80097b8:	b920      	cbnz	r0, 80097c4 <_Balloc+0x20>
 80097ba:	4b18      	ldr	r3, [pc, #96]	@ (800981c <_Balloc+0x78>)
 80097bc:	4818      	ldr	r0, [pc, #96]	@ (8009820 <_Balloc+0x7c>)
 80097be:	216b      	movs	r1, #107	@ 0x6b
 80097c0:	f000 feaa 	bl	800a518 <__assert_func>
 80097c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097c8:	6006      	str	r6, [r0, #0]
 80097ca:	60c6      	str	r6, [r0, #12]
 80097cc:	69e6      	ldr	r6, [r4, #28]
 80097ce:	68f3      	ldr	r3, [r6, #12]
 80097d0:	b183      	cbz	r3, 80097f4 <_Balloc+0x50>
 80097d2:	69e3      	ldr	r3, [r4, #28]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097da:	b9b8      	cbnz	r0, 800980c <_Balloc+0x68>
 80097dc:	2101      	movs	r1, #1
 80097de:	fa01 f605 	lsl.w	r6, r1, r5
 80097e2:	1d72      	adds	r2, r6, #5
 80097e4:	0092      	lsls	r2, r2, #2
 80097e6:	4620      	mov	r0, r4
 80097e8:	f000 feb4 	bl	800a554 <_calloc_r>
 80097ec:	b160      	cbz	r0, 8009808 <_Balloc+0x64>
 80097ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097f2:	e00e      	b.n	8009812 <_Balloc+0x6e>
 80097f4:	2221      	movs	r2, #33	@ 0x21
 80097f6:	2104      	movs	r1, #4
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 feab 	bl	800a554 <_calloc_r>
 80097fe:	69e3      	ldr	r3, [r4, #28]
 8009800:	60f0      	str	r0, [r6, #12]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e4      	bne.n	80097d2 <_Balloc+0x2e>
 8009808:	2000      	movs	r0, #0
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	6802      	ldr	r2, [r0, #0]
 800980e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009812:	2300      	movs	r3, #0
 8009814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009818:	e7f7      	b.n	800980a <_Balloc+0x66>
 800981a:	bf00      	nop
 800981c:	0800a9e6 	.word	0x0800a9e6
 8009820:	0800aad7 	.word	0x0800aad7

08009824 <_Bfree>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	69c6      	ldr	r6, [r0, #28]
 8009828:	4605      	mov	r5, r0
 800982a:	460c      	mov	r4, r1
 800982c:	b976      	cbnz	r6, 800984c <_Bfree+0x28>
 800982e:	2010      	movs	r0, #16
 8009830:	f7ff fe44 	bl	80094bc <malloc>
 8009834:	4602      	mov	r2, r0
 8009836:	61e8      	str	r0, [r5, #28]
 8009838:	b920      	cbnz	r0, 8009844 <_Bfree+0x20>
 800983a:	4b09      	ldr	r3, [pc, #36]	@ (8009860 <_Bfree+0x3c>)
 800983c:	4809      	ldr	r0, [pc, #36]	@ (8009864 <_Bfree+0x40>)
 800983e:	218f      	movs	r1, #143	@ 0x8f
 8009840:	f000 fe6a 	bl	800a518 <__assert_func>
 8009844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009848:	6006      	str	r6, [r0, #0]
 800984a:	60c6      	str	r6, [r0, #12]
 800984c:	b13c      	cbz	r4, 800985e <_Bfree+0x3a>
 800984e:	69eb      	ldr	r3, [r5, #28]
 8009850:	6862      	ldr	r2, [r4, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009858:	6021      	str	r1, [r4, #0]
 800985a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	0800a9e6 	.word	0x0800a9e6
 8009864:	0800aad7 	.word	0x0800aad7

08009868 <__multadd>:
 8009868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986c:	690d      	ldr	r5, [r1, #16]
 800986e:	4607      	mov	r7, r0
 8009870:	460c      	mov	r4, r1
 8009872:	461e      	mov	r6, r3
 8009874:	f101 0c14 	add.w	ip, r1, #20
 8009878:	2000      	movs	r0, #0
 800987a:	f8dc 3000 	ldr.w	r3, [ip]
 800987e:	b299      	uxth	r1, r3
 8009880:	fb02 6101 	mla	r1, r2, r1, r6
 8009884:	0c1e      	lsrs	r6, r3, #16
 8009886:	0c0b      	lsrs	r3, r1, #16
 8009888:	fb02 3306 	mla	r3, r2, r6, r3
 800988c:	b289      	uxth	r1, r1
 800988e:	3001      	adds	r0, #1
 8009890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009894:	4285      	cmp	r5, r0
 8009896:	f84c 1b04 	str.w	r1, [ip], #4
 800989a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800989e:	dcec      	bgt.n	800987a <__multadd+0x12>
 80098a0:	b30e      	cbz	r6, 80098e6 <__multadd+0x7e>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	42ab      	cmp	r3, r5
 80098a6:	dc19      	bgt.n	80098dc <__multadd+0x74>
 80098a8:	6861      	ldr	r1, [r4, #4]
 80098aa:	4638      	mov	r0, r7
 80098ac:	3101      	adds	r1, #1
 80098ae:	f7ff ff79 	bl	80097a4 <_Balloc>
 80098b2:	4680      	mov	r8, r0
 80098b4:	b928      	cbnz	r0, 80098c2 <__multadd+0x5a>
 80098b6:	4602      	mov	r2, r0
 80098b8:	4b0c      	ldr	r3, [pc, #48]	@ (80098ec <__multadd+0x84>)
 80098ba:	480d      	ldr	r0, [pc, #52]	@ (80098f0 <__multadd+0x88>)
 80098bc:	21ba      	movs	r1, #186	@ 0xba
 80098be:	f000 fe2b 	bl	800a518 <__assert_func>
 80098c2:	6922      	ldr	r2, [r4, #16]
 80098c4:	3202      	adds	r2, #2
 80098c6:	f104 010c 	add.w	r1, r4, #12
 80098ca:	0092      	lsls	r2, r2, #2
 80098cc:	300c      	adds	r0, #12
 80098ce:	f7fe f9b8 	bl	8007c42 <memcpy>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4638      	mov	r0, r7
 80098d6:	f7ff ffa5 	bl	8009824 <_Bfree>
 80098da:	4644      	mov	r4, r8
 80098dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098e0:	3501      	adds	r5, #1
 80098e2:	615e      	str	r6, [r3, #20]
 80098e4:	6125      	str	r5, [r4, #16]
 80098e6:	4620      	mov	r0, r4
 80098e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ec:	0800aa55 	.word	0x0800aa55
 80098f0:	0800aad7 	.word	0x0800aad7

080098f4 <__s2b>:
 80098f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	460c      	mov	r4, r1
 80098fa:	4615      	mov	r5, r2
 80098fc:	461f      	mov	r7, r3
 80098fe:	2209      	movs	r2, #9
 8009900:	3308      	adds	r3, #8
 8009902:	4606      	mov	r6, r0
 8009904:	fb93 f3f2 	sdiv	r3, r3, r2
 8009908:	2100      	movs	r1, #0
 800990a:	2201      	movs	r2, #1
 800990c:	429a      	cmp	r2, r3
 800990e:	db09      	blt.n	8009924 <__s2b+0x30>
 8009910:	4630      	mov	r0, r6
 8009912:	f7ff ff47 	bl	80097a4 <_Balloc>
 8009916:	b940      	cbnz	r0, 800992a <__s2b+0x36>
 8009918:	4602      	mov	r2, r0
 800991a:	4b19      	ldr	r3, [pc, #100]	@ (8009980 <__s2b+0x8c>)
 800991c:	4819      	ldr	r0, [pc, #100]	@ (8009984 <__s2b+0x90>)
 800991e:	21d3      	movs	r1, #211	@ 0xd3
 8009920:	f000 fdfa 	bl	800a518 <__assert_func>
 8009924:	0052      	lsls	r2, r2, #1
 8009926:	3101      	adds	r1, #1
 8009928:	e7f0      	b.n	800990c <__s2b+0x18>
 800992a:	9b08      	ldr	r3, [sp, #32]
 800992c:	6143      	str	r3, [r0, #20]
 800992e:	2d09      	cmp	r5, #9
 8009930:	f04f 0301 	mov.w	r3, #1
 8009934:	6103      	str	r3, [r0, #16]
 8009936:	dd16      	ble.n	8009966 <__s2b+0x72>
 8009938:	f104 0909 	add.w	r9, r4, #9
 800993c:	46c8      	mov	r8, r9
 800993e:	442c      	add	r4, r5
 8009940:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009944:	4601      	mov	r1, r0
 8009946:	3b30      	subs	r3, #48	@ 0x30
 8009948:	220a      	movs	r2, #10
 800994a:	4630      	mov	r0, r6
 800994c:	f7ff ff8c 	bl	8009868 <__multadd>
 8009950:	45a0      	cmp	r8, r4
 8009952:	d1f5      	bne.n	8009940 <__s2b+0x4c>
 8009954:	f1a5 0408 	sub.w	r4, r5, #8
 8009958:	444c      	add	r4, r9
 800995a:	1b2d      	subs	r5, r5, r4
 800995c:	1963      	adds	r3, r4, r5
 800995e:	42bb      	cmp	r3, r7
 8009960:	db04      	blt.n	800996c <__s2b+0x78>
 8009962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009966:	340a      	adds	r4, #10
 8009968:	2509      	movs	r5, #9
 800996a:	e7f6      	b.n	800995a <__s2b+0x66>
 800996c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009970:	4601      	mov	r1, r0
 8009972:	3b30      	subs	r3, #48	@ 0x30
 8009974:	220a      	movs	r2, #10
 8009976:	4630      	mov	r0, r6
 8009978:	f7ff ff76 	bl	8009868 <__multadd>
 800997c:	e7ee      	b.n	800995c <__s2b+0x68>
 800997e:	bf00      	nop
 8009980:	0800aa55 	.word	0x0800aa55
 8009984:	0800aad7 	.word	0x0800aad7

08009988 <__hi0bits>:
 8009988:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800998c:	4603      	mov	r3, r0
 800998e:	bf36      	itet	cc
 8009990:	0403      	lslcc	r3, r0, #16
 8009992:	2000      	movcs	r0, #0
 8009994:	2010      	movcc	r0, #16
 8009996:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800999a:	bf3c      	itt	cc
 800999c:	021b      	lslcc	r3, r3, #8
 800999e:	3008      	addcc	r0, #8
 80099a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099a4:	bf3c      	itt	cc
 80099a6:	011b      	lslcc	r3, r3, #4
 80099a8:	3004      	addcc	r0, #4
 80099aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ae:	bf3c      	itt	cc
 80099b0:	009b      	lslcc	r3, r3, #2
 80099b2:	3002      	addcc	r0, #2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	db05      	blt.n	80099c4 <__hi0bits+0x3c>
 80099b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80099bc:	f100 0001 	add.w	r0, r0, #1
 80099c0:	bf08      	it	eq
 80099c2:	2020      	moveq	r0, #32
 80099c4:	4770      	bx	lr

080099c6 <__lo0bits>:
 80099c6:	6803      	ldr	r3, [r0, #0]
 80099c8:	4602      	mov	r2, r0
 80099ca:	f013 0007 	ands.w	r0, r3, #7
 80099ce:	d00b      	beq.n	80099e8 <__lo0bits+0x22>
 80099d0:	07d9      	lsls	r1, r3, #31
 80099d2:	d421      	bmi.n	8009a18 <__lo0bits+0x52>
 80099d4:	0798      	lsls	r0, r3, #30
 80099d6:	bf49      	itett	mi
 80099d8:	085b      	lsrmi	r3, r3, #1
 80099da:	089b      	lsrpl	r3, r3, #2
 80099dc:	2001      	movmi	r0, #1
 80099de:	6013      	strmi	r3, [r2, #0]
 80099e0:	bf5c      	itt	pl
 80099e2:	6013      	strpl	r3, [r2, #0]
 80099e4:	2002      	movpl	r0, #2
 80099e6:	4770      	bx	lr
 80099e8:	b299      	uxth	r1, r3
 80099ea:	b909      	cbnz	r1, 80099f0 <__lo0bits+0x2a>
 80099ec:	0c1b      	lsrs	r3, r3, #16
 80099ee:	2010      	movs	r0, #16
 80099f0:	b2d9      	uxtb	r1, r3
 80099f2:	b909      	cbnz	r1, 80099f8 <__lo0bits+0x32>
 80099f4:	3008      	adds	r0, #8
 80099f6:	0a1b      	lsrs	r3, r3, #8
 80099f8:	0719      	lsls	r1, r3, #28
 80099fa:	bf04      	itt	eq
 80099fc:	091b      	lsreq	r3, r3, #4
 80099fe:	3004      	addeq	r0, #4
 8009a00:	0799      	lsls	r1, r3, #30
 8009a02:	bf04      	itt	eq
 8009a04:	089b      	lsreq	r3, r3, #2
 8009a06:	3002      	addeq	r0, #2
 8009a08:	07d9      	lsls	r1, r3, #31
 8009a0a:	d403      	bmi.n	8009a14 <__lo0bits+0x4e>
 8009a0c:	085b      	lsrs	r3, r3, #1
 8009a0e:	f100 0001 	add.w	r0, r0, #1
 8009a12:	d003      	beq.n	8009a1c <__lo0bits+0x56>
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	4770      	bx	lr
 8009a18:	2000      	movs	r0, #0
 8009a1a:	4770      	bx	lr
 8009a1c:	2020      	movs	r0, #32
 8009a1e:	4770      	bx	lr

08009a20 <__i2b>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	460c      	mov	r4, r1
 8009a24:	2101      	movs	r1, #1
 8009a26:	f7ff febd 	bl	80097a4 <_Balloc>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	b928      	cbnz	r0, 8009a3a <__i2b+0x1a>
 8009a2e:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <__i2b+0x24>)
 8009a30:	4805      	ldr	r0, [pc, #20]	@ (8009a48 <__i2b+0x28>)
 8009a32:	f240 1145 	movw	r1, #325	@ 0x145
 8009a36:	f000 fd6f 	bl	800a518 <__assert_func>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	6144      	str	r4, [r0, #20]
 8009a3e:	6103      	str	r3, [r0, #16]
 8009a40:	bd10      	pop	{r4, pc}
 8009a42:	bf00      	nop
 8009a44:	0800aa55 	.word	0x0800aa55
 8009a48:	0800aad7 	.word	0x0800aad7

08009a4c <__multiply>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	4614      	mov	r4, r2
 8009a52:	690a      	ldr	r2, [r1, #16]
 8009a54:	6923      	ldr	r3, [r4, #16]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	bfa8      	it	ge
 8009a5a:	4623      	movge	r3, r4
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	bfa4      	itt	ge
 8009a60:	460c      	movge	r4, r1
 8009a62:	461f      	movge	r7, r3
 8009a64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	6861      	ldr	r1, [r4, #4]
 8009a70:	eb0a 0609 	add.w	r6, sl, r9
 8009a74:	42b3      	cmp	r3, r6
 8009a76:	b085      	sub	sp, #20
 8009a78:	bfb8      	it	lt
 8009a7a:	3101      	addlt	r1, #1
 8009a7c:	f7ff fe92 	bl	80097a4 <_Balloc>
 8009a80:	b930      	cbnz	r0, 8009a90 <__multiply+0x44>
 8009a82:	4602      	mov	r2, r0
 8009a84:	4b44      	ldr	r3, [pc, #272]	@ (8009b98 <__multiply+0x14c>)
 8009a86:	4845      	ldr	r0, [pc, #276]	@ (8009b9c <__multiply+0x150>)
 8009a88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a8c:	f000 fd44 	bl	800a518 <__assert_func>
 8009a90:	f100 0514 	add.w	r5, r0, #20
 8009a94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a98:	462b      	mov	r3, r5
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4543      	cmp	r3, r8
 8009a9e:	d321      	bcc.n	8009ae4 <__multiply+0x98>
 8009aa0:	f107 0114 	add.w	r1, r7, #20
 8009aa4:	f104 0214 	add.w	r2, r4, #20
 8009aa8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009aac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ab0:	9302      	str	r3, [sp, #8]
 8009ab2:	1b13      	subs	r3, r2, r4
 8009ab4:	3b15      	subs	r3, #21
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	3304      	adds	r3, #4
 8009abc:	f104 0715 	add.w	r7, r4, #21
 8009ac0:	42ba      	cmp	r2, r7
 8009ac2:	bf38      	it	cc
 8009ac4:	2304      	movcc	r3, #4
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	9b02      	ldr	r3, [sp, #8]
 8009aca:	9103      	str	r1, [sp, #12]
 8009acc:	428b      	cmp	r3, r1
 8009ace:	d80c      	bhi.n	8009aea <__multiply+0x9e>
 8009ad0:	2e00      	cmp	r6, #0
 8009ad2:	dd03      	ble.n	8009adc <__multiply+0x90>
 8009ad4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d05b      	beq.n	8009b94 <__multiply+0x148>
 8009adc:	6106      	str	r6, [r0, #16]
 8009ade:	b005      	add	sp, #20
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	f843 2b04 	str.w	r2, [r3], #4
 8009ae8:	e7d8      	b.n	8009a9c <__multiply+0x50>
 8009aea:	f8b1 a000 	ldrh.w	sl, [r1]
 8009aee:	f1ba 0f00 	cmp.w	sl, #0
 8009af2:	d024      	beq.n	8009b3e <__multiply+0xf2>
 8009af4:	f104 0e14 	add.w	lr, r4, #20
 8009af8:	46a9      	mov	r9, r5
 8009afa:	f04f 0c00 	mov.w	ip, #0
 8009afe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b02:	f8d9 3000 	ldr.w	r3, [r9]
 8009b06:	fa1f fb87 	uxth.w	fp, r7
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009b14:	f8d9 7000 	ldr.w	r7, [r9]
 8009b18:	4463      	add	r3, ip
 8009b1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b1e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009b22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b2c:	4572      	cmp	r2, lr
 8009b2e:	f849 3b04 	str.w	r3, [r9], #4
 8009b32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b36:	d8e2      	bhi.n	8009afe <__multiply+0xb2>
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	f845 c003 	str.w	ip, [r5, r3]
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b44:	3104      	adds	r1, #4
 8009b46:	f1b9 0f00 	cmp.w	r9, #0
 8009b4a:	d021      	beq.n	8009b90 <__multiply+0x144>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	f104 0c14 	add.w	ip, r4, #20
 8009b52:	46ae      	mov	lr, r5
 8009b54:	f04f 0a00 	mov.w	sl, #0
 8009b58:	f8bc b000 	ldrh.w	fp, [ip]
 8009b5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b60:	fb09 770b 	mla	r7, r9, fp, r7
 8009b64:	4457      	add	r7, sl
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b6c:	f84e 3b04 	str.w	r3, [lr], #4
 8009b70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b78:	f8be 3000 	ldrh.w	r3, [lr]
 8009b7c:	fb09 330a 	mla	r3, r9, sl, r3
 8009b80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b84:	4562      	cmp	r2, ip
 8009b86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b8a:	d8e5      	bhi.n	8009b58 <__multiply+0x10c>
 8009b8c:	9f01      	ldr	r7, [sp, #4]
 8009b8e:	51eb      	str	r3, [r5, r7]
 8009b90:	3504      	adds	r5, #4
 8009b92:	e799      	b.n	8009ac8 <__multiply+0x7c>
 8009b94:	3e01      	subs	r6, #1
 8009b96:	e79b      	b.n	8009ad0 <__multiply+0x84>
 8009b98:	0800aa55 	.word	0x0800aa55
 8009b9c:	0800aad7 	.word	0x0800aad7

08009ba0 <__pow5mult>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	f012 0203 	ands.w	r2, r2, #3
 8009baa:	4607      	mov	r7, r0
 8009bac:	460e      	mov	r6, r1
 8009bae:	d007      	beq.n	8009bc0 <__pow5mult+0x20>
 8009bb0:	4c25      	ldr	r4, [pc, #148]	@ (8009c48 <__pow5mult+0xa8>)
 8009bb2:	3a01      	subs	r2, #1
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bba:	f7ff fe55 	bl	8009868 <__multadd>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	10ad      	asrs	r5, r5, #2
 8009bc2:	d03d      	beq.n	8009c40 <__pow5mult+0xa0>
 8009bc4:	69fc      	ldr	r4, [r7, #28]
 8009bc6:	b97c      	cbnz	r4, 8009be8 <__pow5mult+0x48>
 8009bc8:	2010      	movs	r0, #16
 8009bca:	f7ff fc77 	bl	80094bc <malloc>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	61f8      	str	r0, [r7, #28]
 8009bd2:	b928      	cbnz	r0, 8009be0 <__pow5mult+0x40>
 8009bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c4c <__pow5mult+0xac>)
 8009bd6:	481e      	ldr	r0, [pc, #120]	@ (8009c50 <__pow5mult+0xb0>)
 8009bd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009bdc:	f000 fc9c 	bl	800a518 <__assert_func>
 8009be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009be4:	6004      	str	r4, [r0, #0]
 8009be6:	60c4      	str	r4, [r0, #12]
 8009be8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bf0:	b94c      	cbnz	r4, 8009c06 <__pow5mult+0x66>
 8009bf2:	f240 2171 	movw	r1, #625	@ 0x271
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f7ff ff12 	bl	8009a20 <__i2b>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c02:	4604      	mov	r4, r0
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	f04f 0900 	mov.w	r9, #0
 8009c0a:	07eb      	lsls	r3, r5, #31
 8009c0c:	d50a      	bpl.n	8009c24 <__pow5mult+0x84>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4622      	mov	r2, r4
 8009c12:	4638      	mov	r0, r7
 8009c14:	f7ff ff1a 	bl	8009a4c <__multiply>
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff fe01 	bl	8009824 <_Bfree>
 8009c22:	4646      	mov	r6, r8
 8009c24:	106d      	asrs	r5, r5, #1
 8009c26:	d00b      	beq.n	8009c40 <__pow5mult+0xa0>
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	b938      	cbnz	r0, 8009c3c <__pow5mult+0x9c>
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff ff0b 	bl	8009a4c <__multiply>
 8009c36:	6020      	str	r0, [r4, #0]
 8009c38:	f8c0 9000 	str.w	r9, [r0]
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	e7e4      	b.n	8009c0a <__pow5mult+0x6a>
 8009c40:	4630      	mov	r0, r6
 8009c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c46:	bf00      	nop
 8009c48:	0800ab30 	.word	0x0800ab30
 8009c4c:	0800a9e6 	.word	0x0800a9e6
 8009c50:	0800aad7 	.word	0x0800aad7

08009c54 <__lshift>:
 8009c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c58:	460c      	mov	r4, r1
 8009c5a:	6849      	ldr	r1, [r1, #4]
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c62:	68a3      	ldr	r3, [r4, #8]
 8009c64:	4607      	mov	r7, r0
 8009c66:	4691      	mov	r9, r2
 8009c68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c6c:	f108 0601 	add.w	r6, r8, #1
 8009c70:	42b3      	cmp	r3, r6
 8009c72:	db0b      	blt.n	8009c8c <__lshift+0x38>
 8009c74:	4638      	mov	r0, r7
 8009c76:	f7ff fd95 	bl	80097a4 <_Balloc>
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	b948      	cbnz	r0, 8009c92 <__lshift+0x3e>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b28      	ldr	r3, [pc, #160]	@ (8009d24 <__lshift+0xd0>)
 8009c82:	4829      	ldr	r0, [pc, #164]	@ (8009d28 <__lshift+0xd4>)
 8009c84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c88:	f000 fc46 	bl	800a518 <__assert_func>
 8009c8c:	3101      	adds	r1, #1
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	e7ee      	b.n	8009c70 <__lshift+0x1c>
 8009c92:	2300      	movs	r3, #0
 8009c94:	f100 0114 	add.w	r1, r0, #20
 8009c98:	f100 0210 	add.w	r2, r0, #16
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	4553      	cmp	r3, sl
 8009ca0:	db33      	blt.n	8009d0a <__lshift+0xb6>
 8009ca2:	6920      	ldr	r0, [r4, #16]
 8009ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ca8:	f104 0314 	add.w	r3, r4, #20
 8009cac:	f019 091f 	ands.w	r9, r9, #31
 8009cb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cb8:	d02b      	beq.n	8009d12 <__lshift+0xbe>
 8009cba:	f1c9 0e20 	rsb	lr, r9, #32
 8009cbe:	468a      	mov	sl, r1
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	fa00 f009 	lsl.w	r0, r0, r9
 8009cc8:	4310      	orrs	r0, r2
 8009cca:	f84a 0b04 	str.w	r0, [sl], #4
 8009cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd2:	459c      	cmp	ip, r3
 8009cd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cd8:	d8f3      	bhi.n	8009cc2 <__lshift+0x6e>
 8009cda:	ebac 0304 	sub.w	r3, ip, r4
 8009cde:	3b15      	subs	r3, #21
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	f104 0015 	add.w	r0, r4, #21
 8009cea:	4584      	cmp	ip, r0
 8009cec:	bf38      	it	cc
 8009cee:	2304      	movcc	r3, #4
 8009cf0:	50ca      	str	r2, [r1, r3]
 8009cf2:	b10a      	cbz	r2, 8009cf8 <__lshift+0xa4>
 8009cf4:	f108 0602 	add.w	r6, r8, #2
 8009cf8:	3e01      	subs	r6, #1
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	612e      	str	r6, [r5, #16]
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f7ff fd90 	bl	8009824 <_Bfree>
 8009d04:	4628      	mov	r0, r5
 8009d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d0e:	3301      	adds	r3, #1
 8009d10:	e7c5      	b.n	8009c9e <__lshift+0x4a>
 8009d12:	3904      	subs	r1, #4
 8009d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d1c:	459c      	cmp	ip, r3
 8009d1e:	d8f9      	bhi.n	8009d14 <__lshift+0xc0>
 8009d20:	e7ea      	b.n	8009cf8 <__lshift+0xa4>
 8009d22:	bf00      	nop
 8009d24:	0800aa55 	.word	0x0800aa55
 8009d28:	0800aad7 	.word	0x0800aad7

08009d2c <__mcmp>:
 8009d2c:	690a      	ldr	r2, [r1, #16]
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6900      	ldr	r0, [r0, #16]
 8009d32:	1a80      	subs	r0, r0, r2
 8009d34:	b530      	push	{r4, r5, lr}
 8009d36:	d10e      	bne.n	8009d56 <__mcmp+0x2a>
 8009d38:	3314      	adds	r3, #20
 8009d3a:	3114      	adds	r1, #20
 8009d3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d4c:	4295      	cmp	r5, r2
 8009d4e:	d003      	beq.n	8009d58 <__mcmp+0x2c>
 8009d50:	d205      	bcs.n	8009d5e <__mcmp+0x32>
 8009d52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d56:	bd30      	pop	{r4, r5, pc}
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d3f3      	bcc.n	8009d44 <__mcmp+0x18>
 8009d5c:	e7fb      	b.n	8009d56 <__mcmp+0x2a>
 8009d5e:	2001      	movs	r0, #1
 8009d60:	e7f9      	b.n	8009d56 <__mcmp+0x2a>
	...

08009d64 <__mdiff>:
 8009d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	4689      	mov	r9, r1
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4648      	mov	r0, r9
 8009d70:	4614      	mov	r4, r2
 8009d72:	f7ff ffdb 	bl	8009d2c <__mcmp>
 8009d76:	1e05      	subs	r5, r0, #0
 8009d78:	d112      	bne.n	8009da0 <__mdiff+0x3c>
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f7ff fd11 	bl	80097a4 <_Balloc>
 8009d82:	4602      	mov	r2, r0
 8009d84:	b928      	cbnz	r0, 8009d92 <__mdiff+0x2e>
 8009d86:	4b3f      	ldr	r3, [pc, #252]	@ (8009e84 <__mdiff+0x120>)
 8009d88:	f240 2137 	movw	r1, #567	@ 0x237
 8009d8c:	483e      	ldr	r0, [pc, #248]	@ (8009e88 <__mdiff+0x124>)
 8009d8e:	f000 fbc3 	bl	800a518 <__assert_func>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d98:	4610      	mov	r0, r2
 8009d9a:	b003      	add	sp, #12
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	bfbc      	itt	lt
 8009da2:	464b      	movlt	r3, r9
 8009da4:	46a1      	movlt	r9, r4
 8009da6:	4630      	mov	r0, r6
 8009da8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009dac:	bfba      	itte	lt
 8009dae:	461c      	movlt	r4, r3
 8009db0:	2501      	movlt	r5, #1
 8009db2:	2500      	movge	r5, #0
 8009db4:	f7ff fcf6 	bl	80097a4 <_Balloc>
 8009db8:	4602      	mov	r2, r0
 8009dba:	b918      	cbnz	r0, 8009dc4 <__mdiff+0x60>
 8009dbc:	4b31      	ldr	r3, [pc, #196]	@ (8009e84 <__mdiff+0x120>)
 8009dbe:	f240 2145 	movw	r1, #581	@ 0x245
 8009dc2:	e7e3      	b.n	8009d8c <__mdiff+0x28>
 8009dc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009dc8:	6926      	ldr	r6, [r4, #16]
 8009dca:	60c5      	str	r5, [r0, #12]
 8009dcc:	f109 0310 	add.w	r3, r9, #16
 8009dd0:	f109 0514 	add.w	r5, r9, #20
 8009dd4:	f104 0e14 	add.w	lr, r4, #20
 8009dd8:	f100 0b14 	add.w	fp, r0, #20
 8009ddc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009de0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	46d9      	mov	r9, fp
 8009de8:	f04f 0c00 	mov.w	ip, #0
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009df2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	fa1f f38a 	uxth.w	r3, sl
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	b283      	uxth	r3, r0
 8009e00:	1acb      	subs	r3, r1, r3
 8009e02:	0c00      	lsrs	r0, r0, #16
 8009e04:	4463      	add	r3, ip
 8009e06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e14:	4576      	cmp	r6, lr
 8009e16:	f849 3b04 	str.w	r3, [r9], #4
 8009e1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e1e:	d8e5      	bhi.n	8009dec <__mdiff+0x88>
 8009e20:	1b33      	subs	r3, r6, r4
 8009e22:	3b15      	subs	r3, #21
 8009e24:	f023 0303 	bic.w	r3, r3, #3
 8009e28:	3415      	adds	r4, #21
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	42a6      	cmp	r6, r4
 8009e2e:	bf38      	it	cc
 8009e30:	2304      	movcc	r3, #4
 8009e32:	441d      	add	r5, r3
 8009e34:	445b      	add	r3, fp
 8009e36:	461e      	mov	r6, r3
 8009e38:	462c      	mov	r4, r5
 8009e3a:	4544      	cmp	r4, r8
 8009e3c:	d30e      	bcc.n	8009e5c <__mdiff+0xf8>
 8009e3e:	f108 0103 	add.w	r1, r8, #3
 8009e42:	1b49      	subs	r1, r1, r5
 8009e44:	f021 0103 	bic.w	r1, r1, #3
 8009e48:	3d03      	subs	r5, #3
 8009e4a:	45a8      	cmp	r8, r5
 8009e4c:	bf38      	it	cc
 8009e4e:	2100      	movcc	r1, #0
 8009e50:	440b      	add	r3, r1
 8009e52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e56:	b191      	cbz	r1, 8009e7e <__mdiff+0x11a>
 8009e58:	6117      	str	r7, [r2, #16]
 8009e5a:	e79d      	b.n	8009d98 <__mdiff+0x34>
 8009e5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e60:	46e6      	mov	lr, ip
 8009e62:	0c08      	lsrs	r0, r1, #16
 8009e64:	fa1c fc81 	uxtah	ip, ip, r1
 8009e68:	4471      	add	r1, lr
 8009e6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e6e:	b289      	uxth	r1, r1
 8009e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e74:	f846 1b04 	str.w	r1, [r6], #4
 8009e78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e7c:	e7dd      	b.n	8009e3a <__mdiff+0xd6>
 8009e7e:	3f01      	subs	r7, #1
 8009e80:	e7e7      	b.n	8009e52 <__mdiff+0xee>
 8009e82:	bf00      	nop
 8009e84:	0800aa55 	.word	0x0800aa55
 8009e88:	0800aad7 	.word	0x0800aad7

08009e8c <__ulp>:
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	ed8d 0b00 	vstr	d0, [sp]
 8009e92:	9a01      	ldr	r2, [sp, #4]
 8009e94:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed4 <__ulp+0x48>)
 8009e96:	4013      	ands	r3, r2
 8009e98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dc08      	bgt.n	8009eb2 <__ulp+0x26>
 8009ea0:	425b      	negs	r3, r3
 8009ea2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009ea6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009eaa:	da04      	bge.n	8009eb6 <__ulp+0x2a>
 8009eac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009eb0:	4113      	asrs	r3, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	e008      	b.n	8009ec8 <__ulp+0x3c>
 8009eb6:	f1a2 0314 	sub.w	r3, r2, #20
 8009eba:	2b1e      	cmp	r3, #30
 8009ebc:	bfda      	itte	le
 8009ebe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009ec2:	40da      	lsrle	r2, r3
 8009ec4:	2201      	movgt	r2, #1
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	ec41 0b10 	vmov	d0, r0, r1
 8009ed0:	b002      	add	sp, #8
 8009ed2:	4770      	bx	lr
 8009ed4:	7ff00000 	.word	0x7ff00000

08009ed8 <__b2d>:
 8009ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009edc:	6906      	ldr	r6, [r0, #16]
 8009ede:	f100 0814 	add.w	r8, r0, #20
 8009ee2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009ee6:	1f37      	subs	r7, r6, #4
 8009ee8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7ff fd4b 	bl	8009988 <__hi0bits>
 8009ef2:	f1c0 0320 	rsb	r3, r0, #32
 8009ef6:	280a      	cmp	r0, #10
 8009ef8:	600b      	str	r3, [r1, #0]
 8009efa:	491b      	ldr	r1, [pc, #108]	@ (8009f68 <__b2d+0x90>)
 8009efc:	dc15      	bgt.n	8009f2a <__b2d+0x52>
 8009efe:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f02:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f06:	45b8      	cmp	r8, r7
 8009f08:	ea43 0501 	orr.w	r5, r3, r1
 8009f0c:	bf34      	ite	cc
 8009f0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f12:	2300      	movcs	r3, #0
 8009f14:	3015      	adds	r0, #21
 8009f16:	fa02 f000 	lsl.w	r0, r2, r0
 8009f1a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f1e:	4303      	orrs	r3, r0
 8009f20:	461c      	mov	r4, r3
 8009f22:	ec45 4b10 	vmov	d0, r4, r5
 8009f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2a:	45b8      	cmp	r8, r7
 8009f2c:	bf3a      	itte	cc
 8009f2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f32:	f1a6 0708 	subcc.w	r7, r6, #8
 8009f36:	2300      	movcs	r3, #0
 8009f38:	380b      	subs	r0, #11
 8009f3a:	d012      	beq.n	8009f62 <__b2d+0x8a>
 8009f3c:	f1c0 0120 	rsb	r1, r0, #32
 8009f40:	fa23 f401 	lsr.w	r4, r3, r1
 8009f44:	4082      	lsls	r2, r0
 8009f46:	4322      	orrs	r2, r4
 8009f48:	4547      	cmp	r7, r8
 8009f4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009f4e:	bf8c      	ite	hi
 8009f50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f54:	2200      	movls	r2, #0
 8009f56:	4083      	lsls	r3, r0
 8009f58:	40ca      	lsrs	r2, r1
 8009f5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	e7de      	b.n	8009f20 <__b2d+0x48>
 8009f62:	ea42 0501 	orr.w	r5, r2, r1
 8009f66:	e7db      	b.n	8009f20 <__b2d+0x48>
 8009f68:	3ff00000 	.word	0x3ff00000

08009f6c <__d2b>:
 8009f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	460f      	mov	r7, r1
 8009f72:	2101      	movs	r1, #1
 8009f74:	ec59 8b10 	vmov	r8, r9, d0
 8009f78:	4616      	mov	r6, r2
 8009f7a:	f7ff fc13 	bl	80097a4 <_Balloc>
 8009f7e:	4604      	mov	r4, r0
 8009f80:	b930      	cbnz	r0, 8009f90 <__d2b+0x24>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b23      	ldr	r3, [pc, #140]	@ (800a014 <__d2b+0xa8>)
 8009f86:	4824      	ldr	r0, [pc, #144]	@ (800a018 <__d2b+0xac>)
 8009f88:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f8c:	f000 fac4 	bl	800a518 <__assert_func>
 8009f90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f98:	b10d      	cbz	r5, 8009f9e <__d2b+0x32>
 8009f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8009fa4:	d023      	beq.n	8009fee <__d2b+0x82>
 8009fa6:	4668      	mov	r0, sp
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	f7ff fd0c 	bl	80099c6 <__lo0bits>
 8009fae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fb2:	b1d0      	cbz	r0, 8009fea <__d2b+0x7e>
 8009fb4:	f1c0 0320 	rsb	r3, r0, #32
 8009fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fbc:	430b      	orrs	r3, r1
 8009fbe:	40c2      	lsrs	r2, r0
 8009fc0:	6163      	str	r3, [r4, #20]
 8009fc2:	9201      	str	r2, [sp, #4]
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	61a3      	str	r3, [r4, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	bf0c      	ite	eq
 8009fcc:	2201      	moveq	r2, #1
 8009fce:	2202      	movne	r2, #2
 8009fd0:	6122      	str	r2, [r4, #16]
 8009fd2:	b1a5      	cbz	r5, 8009ffe <__d2b+0x92>
 8009fd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fd8:	4405      	add	r5, r0
 8009fda:	603d      	str	r5, [r7, #0]
 8009fdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fe0:	6030      	str	r0, [r6, #0]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	b003      	add	sp, #12
 8009fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fea:	6161      	str	r1, [r4, #20]
 8009fec:	e7ea      	b.n	8009fc4 <__d2b+0x58>
 8009fee:	a801      	add	r0, sp, #4
 8009ff0:	f7ff fce9 	bl	80099c6 <__lo0bits>
 8009ff4:	9b01      	ldr	r3, [sp, #4]
 8009ff6:	6163      	str	r3, [r4, #20]
 8009ff8:	3020      	adds	r0, #32
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	e7e8      	b.n	8009fd0 <__d2b+0x64>
 8009ffe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a002:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a006:	6038      	str	r0, [r7, #0]
 800a008:	6918      	ldr	r0, [r3, #16]
 800a00a:	f7ff fcbd 	bl	8009988 <__hi0bits>
 800a00e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a012:	e7e5      	b.n	8009fe0 <__d2b+0x74>
 800a014:	0800aa55 	.word	0x0800aa55
 800a018:	0800aad7 	.word	0x0800aad7

0800a01c <__ratio>:
 800a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	b085      	sub	sp, #20
 800a022:	e9cd 1000 	strd	r1, r0, [sp]
 800a026:	a902      	add	r1, sp, #8
 800a028:	f7ff ff56 	bl	8009ed8 <__b2d>
 800a02c:	9800      	ldr	r0, [sp, #0]
 800a02e:	a903      	add	r1, sp, #12
 800a030:	ec55 4b10 	vmov	r4, r5, d0
 800a034:	f7ff ff50 	bl	8009ed8 <__b2d>
 800a038:	9b01      	ldr	r3, [sp, #4]
 800a03a:	6919      	ldr	r1, [r3, #16]
 800a03c:	9b00      	ldr	r3, [sp, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	1ac9      	subs	r1, r1, r3
 800a042:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	ec5b ab10 	vmov	sl, fp, d0
 800a04c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a050:	2b00      	cmp	r3, #0
 800a052:	bfce      	itee	gt
 800a054:	462a      	movgt	r2, r5
 800a056:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a05a:	465a      	movle	r2, fp
 800a05c:	462f      	mov	r7, r5
 800a05e:	46d9      	mov	r9, fp
 800a060:	bfcc      	ite	gt
 800a062:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a066:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a06a:	464b      	mov	r3, r9
 800a06c:	4652      	mov	r2, sl
 800a06e:	4620      	mov	r0, r4
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 fc13 	bl	800089c <__aeabi_ddiv>
 800a076:	ec41 0b10 	vmov	d0, r0, r1
 800a07a:	b005      	add	sp, #20
 800a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a080 <__copybits>:
 800a080:	3901      	subs	r1, #1
 800a082:	b570      	push	{r4, r5, r6, lr}
 800a084:	1149      	asrs	r1, r1, #5
 800a086:	6914      	ldr	r4, [r2, #16]
 800a088:	3101      	adds	r1, #1
 800a08a:	f102 0314 	add.w	r3, r2, #20
 800a08e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a092:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a096:	1f05      	subs	r5, r0, #4
 800a098:	42a3      	cmp	r3, r4
 800a09a:	d30c      	bcc.n	800a0b6 <__copybits+0x36>
 800a09c:	1aa3      	subs	r3, r4, r2
 800a09e:	3b11      	subs	r3, #17
 800a0a0:	f023 0303 	bic.w	r3, r3, #3
 800a0a4:	3211      	adds	r2, #17
 800a0a6:	42a2      	cmp	r2, r4
 800a0a8:	bf88      	it	hi
 800a0aa:	2300      	movhi	r3, #0
 800a0ac:	4418      	add	r0, r3
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4288      	cmp	r0, r1
 800a0b2:	d305      	bcc.n	800a0c0 <__copybits+0x40>
 800a0b4:	bd70      	pop	{r4, r5, r6, pc}
 800a0b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a0ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800a0be:	e7eb      	b.n	800a098 <__copybits+0x18>
 800a0c0:	f840 3b04 	str.w	r3, [r0], #4
 800a0c4:	e7f4      	b.n	800a0b0 <__copybits+0x30>

0800a0c6 <__any_on>:
 800a0c6:	f100 0214 	add.w	r2, r0, #20
 800a0ca:	6900      	ldr	r0, [r0, #16]
 800a0cc:	114b      	asrs	r3, r1, #5
 800a0ce:	4298      	cmp	r0, r3
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	db11      	blt.n	800a0f8 <__any_on+0x32>
 800a0d4:	dd0a      	ble.n	800a0ec <__any_on+0x26>
 800a0d6:	f011 011f 	ands.w	r1, r1, #31
 800a0da:	d007      	beq.n	800a0ec <__any_on+0x26>
 800a0dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0e0:	fa24 f001 	lsr.w	r0, r4, r1
 800a0e4:	fa00 f101 	lsl.w	r1, r0, r1
 800a0e8:	428c      	cmp	r4, r1
 800a0ea:	d10b      	bne.n	800a104 <__any_on+0x3e>
 800a0ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d803      	bhi.n	800a0fc <__any_on+0x36>
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	bd10      	pop	{r4, pc}
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	e7f7      	b.n	800a0ec <__any_on+0x26>
 800a0fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a100:	2900      	cmp	r1, #0
 800a102:	d0f5      	beq.n	800a0f0 <__any_on+0x2a>
 800a104:	2001      	movs	r0, #1
 800a106:	e7f6      	b.n	800a0f6 <__any_on+0x30>

0800a108 <__sread>:
 800a108:	b510      	push	{r4, lr}
 800a10a:	460c      	mov	r4, r1
 800a10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a110:	f000 f9ce 	bl	800a4b0 <_read_r>
 800a114:	2800      	cmp	r0, #0
 800a116:	bfab      	itete	ge
 800a118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a11a:	89a3      	ldrhlt	r3, [r4, #12]
 800a11c:	181b      	addge	r3, r3, r0
 800a11e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a122:	bfac      	ite	ge
 800a124:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a126:	81a3      	strhlt	r3, [r4, #12]
 800a128:	bd10      	pop	{r4, pc}

0800a12a <__swrite>:
 800a12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12e:	461f      	mov	r7, r3
 800a130:	898b      	ldrh	r3, [r1, #12]
 800a132:	05db      	lsls	r3, r3, #23
 800a134:	4605      	mov	r5, r0
 800a136:	460c      	mov	r4, r1
 800a138:	4616      	mov	r6, r2
 800a13a:	d505      	bpl.n	800a148 <__swrite+0x1e>
 800a13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a140:	2302      	movs	r3, #2
 800a142:	2200      	movs	r2, #0
 800a144:	f000 f9a2 	bl	800a48c <_lseek_r>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a14e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	4632      	mov	r2, r6
 800a156:	463b      	mov	r3, r7
 800a158:	4628      	mov	r0, r5
 800a15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a15e:	f000 b9c9 	b.w	800a4f4 <_write_r>

0800a162 <__sseek>:
 800a162:	b510      	push	{r4, lr}
 800a164:	460c      	mov	r4, r1
 800a166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16a:	f000 f98f 	bl	800a48c <_lseek_r>
 800a16e:	1c43      	adds	r3, r0, #1
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	bf15      	itete	ne
 800a174:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a17a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a17e:	81a3      	strheq	r3, [r4, #12]
 800a180:	bf18      	it	ne
 800a182:	81a3      	strhne	r3, [r4, #12]
 800a184:	bd10      	pop	{r4, pc}

0800a186 <__sclose>:
 800a186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18a:	f000 b94d 	b.w	800a428 <_close_r>

0800a18e <_realloc_r>:
 800a18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a192:	4680      	mov	r8, r0
 800a194:	4615      	mov	r5, r2
 800a196:	460c      	mov	r4, r1
 800a198:	b921      	cbnz	r1, 800a1a4 <_realloc_r+0x16>
 800a19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a19e:	4611      	mov	r1, r2
 800a1a0:	f7ff b9b6 	b.w	8009510 <_malloc_r>
 800a1a4:	b92a      	cbnz	r2, 800a1b2 <_realloc_r+0x24>
 800a1a6:	f000 f9e9 	bl	800a57c <_free_r>
 800a1aa:	2400      	movs	r4, #0
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b2:	f000 fa2d 	bl	800a610 <_malloc_usable_size_r>
 800a1b6:	4285      	cmp	r5, r0
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	d802      	bhi.n	800a1c2 <_realloc_r+0x34>
 800a1bc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a1c0:	d8f4      	bhi.n	800a1ac <_realloc_r+0x1e>
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	f7ff f9a3 	bl	8009510 <_malloc_r>
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d0ec      	beq.n	800a1aa <_realloc_r+0x1c>
 800a1d0:	42b5      	cmp	r5, r6
 800a1d2:	462a      	mov	r2, r5
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	bf28      	it	cs
 800a1d8:	4632      	movcs	r2, r6
 800a1da:	f7fd fd32 	bl	8007c42 <memcpy>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	f000 f9cb 	bl	800a57c <_free_r>
 800a1e6:	463c      	mov	r4, r7
 800a1e8:	e7e0      	b.n	800a1ac <_realloc_r+0x1e>

0800a1ea <__swbuf_r>:
 800a1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ec:	460e      	mov	r6, r1
 800a1ee:	4614      	mov	r4, r2
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	b118      	cbz	r0, 800a1fc <__swbuf_r+0x12>
 800a1f4:	6a03      	ldr	r3, [r0, #32]
 800a1f6:	b90b      	cbnz	r3, 800a1fc <__swbuf_r+0x12>
 800a1f8:	f7fc fd96 	bl	8006d28 <__sinit>
 800a1fc:	69a3      	ldr	r3, [r4, #24]
 800a1fe:	60a3      	str	r3, [r4, #8]
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	071a      	lsls	r2, r3, #28
 800a204:	d501      	bpl.n	800a20a <__swbuf_r+0x20>
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	b943      	cbnz	r3, 800a21c <__swbuf_r+0x32>
 800a20a:	4621      	mov	r1, r4
 800a20c:	4628      	mov	r0, r5
 800a20e:	f000 f82b 	bl	800a268 <__swsetup_r>
 800a212:	b118      	cbz	r0, 800a21c <__swbuf_r+0x32>
 800a214:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a218:	4638      	mov	r0, r7
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	6922      	ldr	r2, [r4, #16]
 800a220:	1a98      	subs	r0, r3, r2
 800a222:	6963      	ldr	r3, [r4, #20]
 800a224:	b2f6      	uxtb	r6, r6
 800a226:	4283      	cmp	r3, r0
 800a228:	4637      	mov	r7, r6
 800a22a:	dc05      	bgt.n	800a238 <__swbuf_r+0x4e>
 800a22c:	4621      	mov	r1, r4
 800a22e:	4628      	mov	r0, r5
 800a230:	f7ff fa84 	bl	800973c <_fflush_r>
 800a234:	2800      	cmp	r0, #0
 800a236:	d1ed      	bne.n	800a214 <__swbuf_r+0x2a>
 800a238:	68a3      	ldr	r3, [r4, #8]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	60a3      	str	r3, [r4, #8]
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	6022      	str	r2, [r4, #0]
 800a244:	701e      	strb	r6, [r3, #0]
 800a246:	6962      	ldr	r2, [r4, #20]
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d004      	beq.n	800a258 <__swbuf_r+0x6e>
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	07db      	lsls	r3, r3, #31
 800a252:	d5e1      	bpl.n	800a218 <__swbuf_r+0x2e>
 800a254:	2e0a      	cmp	r6, #10
 800a256:	d1df      	bne.n	800a218 <__swbuf_r+0x2e>
 800a258:	4621      	mov	r1, r4
 800a25a:	4628      	mov	r0, r5
 800a25c:	f7ff fa6e 	bl	800973c <_fflush_r>
 800a260:	2800      	cmp	r0, #0
 800a262:	d0d9      	beq.n	800a218 <__swbuf_r+0x2e>
 800a264:	e7d6      	b.n	800a214 <__swbuf_r+0x2a>
	...

0800a268 <__swsetup_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4b29      	ldr	r3, [pc, #164]	@ (800a310 <__swsetup_r+0xa8>)
 800a26c:	4605      	mov	r5, r0
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	460c      	mov	r4, r1
 800a272:	b118      	cbz	r0, 800a27c <__swsetup_r+0x14>
 800a274:	6a03      	ldr	r3, [r0, #32]
 800a276:	b90b      	cbnz	r3, 800a27c <__swsetup_r+0x14>
 800a278:	f7fc fd56 	bl	8006d28 <__sinit>
 800a27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a280:	0719      	lsls	r1, r3, #28
 800a282:	d422      	bmi.n	800a2ca <__swsetup_r+0x62>
 800a284:	06da      	lsls	r2, r3, #27
 800a286:	d407      	bmi.n	800a298 <__swsetup_r+0x30>
 800a288:	2209      	movs	r2, #9
 800a28a:	602a      	str	r2, [r5, #0]
 800a28c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a296:	e033      	b.n	800a300 <__swsetup_r+0x98>
 800a298:	0758      	lsls	r0, r3, #29
 800a29a:	d512      	bpl.n	800a2c2 <__swsetup_r+0x5a>
 800a29c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a29e:	b141      	cbz	r1, 800a2b2 <__swsetup_r+0x4a>
 800a2a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2a4:	4299      	cmp	r1, r3
 800a2a6:	d002      	beq.n	800a2ae <__swsetup_r+0x46>
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f000 f967 	bl	800a57c <_free_r>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	6063      	str	r3, [r4, #4]
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f043 0308 	orr.w	r3, r3, #8
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	b94b      	cbnz	r3, 800a2e2 <__swsetup_r+0x7a>
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2d8:	d003      	beq.n	800a2e2 <__swsetup_r+0x7a>
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f000 f84c 	bl	800a37a <__smakebuf_r>
 800a2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e6:	f013 0201 	ands.w	r2, r3, #1
 800a2ea:	d00a      	beq.n	800a302 <__swsetup_r+0x9a>
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	60a2      	str	r2, [r4, #8]
 800a2f0:	6962      	ldr	r2, [r4, #20]
 800a2f2:	4252      	negs	r2, r2
 800a2f4:	61a2      	str	r2, [r4, #24]
 800a2f6:	6922      	ldr	r2, [r4, #16]
 800a2f8:	b942      	cbnz	r2, 800a30c <__swsetup_r+0xa4>
 800a2fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2fe:	d1c5      	bne.n	800a28c <__swsetup_r+0x24>
 800a300:	bd38      	pop	{r3, r4, r5, pc}
 800a302:	0799      	lsls	r1, r3, #30
 800a304:	bf58      	it	pl
 800a306:	6962      	ldrpl	r2, [r4, #20]
 800a308:	60a2      	str	r2, [r4, #8]
 800a30a:	e7f4      	b.n	800a2f6 <__swsetup_r+0x8e>
 800a30c:	2000      	movs	r0, #0
 800a30e:	e7f7      	b.n	800a300 <__swsetup_r+0x98>
 800a310:	20000184 	.word	0x20000184

0800a314 <__ascii_wctomb>:
 800a314:	4603      	mov	r3, r0
 800a316:	4608      	mov	r0, r1
 800a318:	b141      	cbz	r1, 800a32c <__ascii_wctomb+0x18>
 800a31a:	2aff      	cmp	r2, #255	@ 0xff
 800a31c:	d904      	bls.n	800a328 <__ascii_wctomb+0x14>
 800a31e:	228a      	movs	r2, #138	@ 0x8a
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a326:	4770      	bx	lr
 800a328:	700a      	strb	r2, [r1, #0]
 800a32a:	2001      	movs	r0, #1
 800a32c:	4770      	bx	lr

0800a32e <__swhatbuf_r>:
 800a32e:	b570      	push	{r4, r5, r6, lr}
 800a330:	460c      	mov	r4, r1
 800a332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a336:	2900      	cmp	r1, #0
 800a338:	b096      	sub	sp, #88	@ 0x58
 800a33a:	4615      	mov	r5, r2
 800a33c:	461e      	mov	r6, r3
 800a33e:	da0d      	bge.n	800a35c <__swhatbuf_r+0x2e>
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a346:	f04f 0100 	mov.w	r1, #0
 800a34a:	bf14      	ite	ne
 800a34c:	2340      	movne	r3, #64	@ 0x40
 800a34e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a352:	2000      	movs	r0, #0
 800a354:	6031      	str	r1, [r6, #0]
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	b016      	add	sp, #88	@ 0x58
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	466a      	mov	r2, sp
 800a35e:	f000 f873 	bl	800a448 <_fstat_r>
 800a362:	2800      	cmp	r0, #0
 800a364:	dbec      	blt.n	800a340 <__swhatbuf_r+0x12>
 800a366:	9901      	ldr	r1, [sp, #4]
 800a368:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a36c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a370:	4259      	negs	r1, r3
 800a372:	4159      	adcs	r1, r3
 800a374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a378:	e7eb      	b.n	800a352 <__swhatbuf_r+0x24>

0800a37a <__smakebuf_r>:
 800a37a:	898b      	ldrh	r3, [r1, #12]
 800a37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a37e:	079d      	lsls	r5, r3, #30
 800a380:	4606      	mov	r6, r0
 800a382:	460c      	mov	r4, r1
 800a384:	d507      	bpl.n	800a396 <__smakebuf_r+0x1c>
 800a386:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	6123      	str	r3, [r4, #16]
 800a38e:	2301      	movs	r3, #1
 800a390:	6163      	str	r3, [r4, #20]
 800a392:	b003      	add	sp, #12
 800a394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a396:	ab01      	add	r3, sp, #4
 800a398:	466a      	mov	r2, sp
 800a39a:	f7ff ffc8 	bl	800a32e <__swhatbuf_r>
 800a39e:	9f00      	ldr	r7, [sp, #0]
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7ff f8b3 	bl	8009510 <_malloc_r>
 800a3aa:	b948      	cbnz	r0, 800a3c0 <__smakebuf_r+0x46>
 800a3ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b0:	059a      	lsls	r2, r3, #22
 800a3b2:	d4ee      	bmi.n	800a392 <__smakebuf_r+0x18>
 800a3b4:	f023 0303 	bic.w	r3, r3, #3
 800a3b8:	f043 0302 	orr.w	r3, r3, #2
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	e7e2      	b.n	800a386 <__smakebuf_r+0xc>
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	6020      	str	r0, [r4, #0]
 800a3c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	9b01      	ldr	r3, [sp, #4]
 800a3cc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3d0:	b15b      	cbz	r3, 800a3ea <__smakebuf_r+0x70>
 800a3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f000 f848 	bl	800a46c <_isatty_r>
 800a3dc:	b128      	cbz	r0, 800a3ea <__smakebuf_r+0x70>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	f043 0301 	orr.w	r3, r3, #1
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	431d      	orrs	r5, r3
 800a3ee:	81a5      	strh	r5, [r4, #12]
 800a3f0:	e7cf      	b.n	800a392 <__smakebuf_r+0x18>

0800a3f2 <memmove>:
 800a3f2:	4288      	cmp	r0, r1
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	eb01 0402 	add.w	r4, r1, r2
 800a3fa:	d902      	bls.n	800a402 <memmove+0x10>
 800a3fc:	4284      	cmp	r4, r0
 800a3fe:	4623      	mov	r3, r4
 800a400:	d807      	bhi.n	800a412 <memmove+0x20>
 800a402:	1e43      	subs	r3, r0, #1
 800a404:	42a1      	cmp	r1, r4
 800a406:	d008      	beq.n	800a41a <memmove+0x28>
 800a408:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a40c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a410:	e7f8      	b.n	800a404 <memmove+0x12>
 800a412:	4402      	add	r2, r0
 800a414:	4601      	mov	r1, r0
 800a416:	428a      	cmp	r2, r1
 800a418:	d100      	bne.n	800a41c <memmove+0x2a>
 800a41a:	bd10      	pop	{r4, pc}
 800a41c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a420:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a424:	e7f7      	b.n	800a416 <memmove+0x24>
	...

0800a428 <_close_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d06      	ldr	r5, [pc, #24]	@ (800a444 <_close_r+0x1c>)
 800a42c:	2300      	movs	r3, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f7f7 fb6e 	bl	8001b14 <_close>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_close_r+0x1a>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_close_r+0x1a>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20000ce0 	.word	0x20000ce0

0800a448 <_fstat_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d07      	ldr	r5, [pc, #28]	@ (800a468 <_fstat_r+0x20>)
 800a44c:	2300      	movs	r3, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	4611      	mov	r1, r2
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	f7f7 fb69 	bl	8001b2c <_fstat>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	d102      	bne.n	800a464 <_fstat_r+0x1c>
 800a45e:	682b      	ldr	r3, [r5, #0]
 800a460:	b103      	cbz	r3, 800a464 <_fstat_r+0x1c>
 800a462:	6023      	str	r3, [r4, #0]
 800a464:	bd38      	pop	{r3, r4, r5, pc}
 800a466:	bf00      	nop
 800a468:	20000ce0 	.word	0x20000ce0

0800a46c <_isatty_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d06      	ldr	r5, [pc, #24]	@ (800a488 <_isatty_r+0x1c>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	602b      	str	r3, [r5, #0]
 800a478:	f7f7 fb68 	bl	8001b4c <_isatty>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_isatty_r+0x1a>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_isatty_r+0x1a>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	20000ce0 	.word	0x20000ce0

0800a48c <_lseek_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d07      	ldr	r5, [pc, #28]	@ (800a4ac <_lseek_r+0x20>)
 800a490:	4604      	mov	r4, r0
 800a492:	4608      	mov	r0, r1
 800a494:	4611      	mov	r1, r2
 800a496:	2200      	movs	r2, #0
 800a498:	602a      	str	r2, [r5, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	f7f7 fb61 	bl	8001b62 <_lseek>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_lseek_r+0x1e>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_lseek_r+0x1e>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	20000ce0 	.word	0x20000ce0

0800a4b0 <_read_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4d07      	ldr	r5, [pc, #28]	@ (800a4d0 <_read_r+0x20>)
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	4608      	mov	r0, r1
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	602a      	str	r2, [r5, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f7f7 faef 	bl	8001aa2 <_read>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d102      	bne.n	800a4ce <_read_r+0x1e>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	b103      	cbz	r3, 800a4ce <_read_r+0x1e>
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	20000ce0 	.word	0x20000ce0

0800a4d4 <_sbrk_r>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	4d06      	ldr	r5, [pc, #24]	@ (800a4f0 <_sbrk_r+0x1c>)
 800a4d8:	2300      	movs	r3, #0
 800a4da:	4604      	mov	r4, r0
 800a4dc:	4608      	mov	r0, r1
 800a4de:	602b      	str	r3, [r5, #0]
 800a4e0:	f7f7 fb4c 	bl	8001b7c <_sbrk>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_sbrk_r+0x1a>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_sbrk_r+0x1a>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	20000ce0 	.word	0x20000ce0

0800a4f4 <_write_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4d07      	ldr	r5, [pc, #28]	@ (800a514 <_write_r+0x20>)
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	4608      	mov	r0, r1
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	2200      	movs	r2, #0
 800a500:	602a      	str	r2, [r5, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	f7f7 faea 	bl	8001adc <_write>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_write_r+0x1e>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_write_r+0x1e>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	20000ce0 	.word	0x20000ce0

0800a518 <__assert_func>:
 800a518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a51a:	4614      	mov	r4, r2
 800a51c:	461a      	mov	r2, r3
 800a51e:	4b09      	ldr	r3, [pc, #36]	@ (800a544 <__assert_func+0x2c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4605      	mov	r5, r0
 800a524:	68d8      	ldr	r0, [r3, #12]
 800a526:	b954      	cbnz	r4, 800a53e <__assert_func+0x26>
 800a528:	4b07      	ldr	r3, [pc, #28]	@ (800a548 <__assert_func+0x30>)
 800a52a:	461c      	mov	r4, r3
 800a52c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a530:	9100      	str	r1, [sp, #0]
 800a532:	462b      	mov	r3, r5
 800a534:	4905      	ldr	r1, [pc, #20]	@ (800a54c <__assert_func+0x34>)
 800a536:	f000 f873 	bl	800a620 <fiprintf>
 800a53a:	f000 f883 	bl	800a644 <abort>
 800a53e:	4b04      	ldr	r3, [pc, #16]	@ (800a550 <__assert_func+0x38>)
 800a540:	e7f4      	b.n	800a52c <__assert_func+0x14>
 800a542:	bf00      	nop
 800a544:	20000184 	.word	0x20000184
 800a548:	0800ac6b 	.word	0x0800ac6b
 800a54c:	0800ac3d 	.word	0x0800ac3d
 800a550:	0800ac30 	.word	0x0800ac30

0800a554 <_calloc_r>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	fba1 5402 	umull	r5, r4, r1, r2
 800a55a:	b93c      	cbnz	r4, 800a56c <_calloc_r+0x18>
 800a55c:	4629      	mov	r1, r5
 800a55e:	f7fe ffd7 	bl	8009510 <_malloc_r>
 800a562:	4606      	mov	r6, r0
 800a564:	b928      	cbnz	r0, 800a572 <_calloc_r+0x1e>
 800a566:	2600      	movs	r6, #0
 800a568:	4630      	mov	r0, r6
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	220c      	movs	r2, #12
 800a56e:	6002      	str	r2, [r0, #0]
 800a570:	e7f9      	b.n	800a566 <_calloc_r+0x12>
 800a572:	462a      	mov	r2, r5
 800a574:	4621      	mov	r1, r4
 800a576:	f7fd fb2b 	bl	8007bd0 <memset>
 800a57a:	e7f5      	b.n	800a568 <_calloc_r+0x14>

0800a57c <_free_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4605      	mov	r5, r0
 800a580:	2900      	cmp	r1, #0
 800a582:	d041      	beq.n	800a608 <_free_r+0x8c>
 800a584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a588:	1f0c      	subs	r4, r1, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfb8      	it	lt
 800a58e:	18e4      	addlt	r4, r4, r3
 800a590:	f7ff f8fc 	bl	800978c <__malloc_lock>
 800a594:	4a1d      	ldr	r2, [pc, #116]	@ (800a60c <_free_r+0x90>)
 800a596:	6813      	ldr	r3, [r2, #0]
 800a598:	b933      	cbnz	r3, 800a5a8 <_free_r+0x2c>
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	4628      	mov	r0, r5
 800a5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a4:	f7ff b8f8 	b.w	8009798 <__malloc_unlock>
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d908      	bls.n	800a5be <_free_r+0x42>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf01      	itttt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	1809      	addeq	r1, r1, r0
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	e7ed      	b.n	800a59a <_free_r+0x1e>
 800a5be:	461a      	mov	r2, r3
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	b10b      	cbz	r3, 800a5c8 <_free_r+0x4c>
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d9fa      	bls.n	800a5be <_free_r+0x42>
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	1850      	adds	r0, r2, r1
 800a5cc:	42a0      	cmp	r0, r4
 800a5ce:	d10b      	bne.n	800a5e8 <_free_r+0x6c>
 800a5d0:	6820      	ldr	r0, [r4, #0]
 800a5d2:	4401      	add	r1, r0
 800a5d4:	1850      	adds	r0, r2, r1
 800a5d6:	4283      	cmp	r3, r0
 800a5d8:	6011      	str	r1, [r2, #0]
 800a5da:	d1e0      	bne.n	800a59e <_free_r+0x22>
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	6053      	str	r3, [r2, #4]
 800a5e2:	4408      	add	r0, r1
 800a5e4:	6010      	str	r0, [r2, #0]
 800a5e6:	e7da      	b.n	800a59e <_free_r+0x22>
 800a5e8:	d902      	bls.n	800a5f0 <_free_r+0x74>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	e7d6      	b.n	800a59e <_free_r+0x22>
 800a5f0:	6820      	ldr	r0, [r4, #0]
 800a5f2:	1821      	adds	r1, r4, r0
 800a5f4:	428b      	cmp	r3, r1
 800a5f6:	bf04      	itt	eq
 800a5f8:	6819      	ldreq	r1, [r3, #0]
 800a5fa:	685b      	ldreq	r3, [r3, #4]
 800a5fc:	6063      	str	r3, [r4, #4]
 800a5fe:	bf04      	itt	eq
 800a600:	1809      	addeq	r1, r1, r0
 800a602:	6021      	streq	r1, [r4, #0]
 800a604:	6054      	str	r4, [r2, #4]
 800a606:	e7ca      	b.n	800a59e <_free_r+0x22>
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	20000cdc 	.word	0x20000cdc

0800a610 <_malloc_usable_size_r>:
 800a610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a614:	1f18      	subs	r0, r3, #4
 800a616:	2b00      	cmp	r3, #0
 800a618:	bfbc      	itt	lt
 800a61a:	580b      	ldrlt	r3, [r1, r0]
 800a61c:	18c0      	addlt	r0, r0, r3
 800a61e:	4770      	bx	lr

0800a620 <fiprintf>:
 800a620:	b40e      	push	{r1, r2, r3}
 800a622:	b503      	push	{r0, r1, lr}
 800a624:	4601      	mov	r1, r0
 800a626:	ab03      	add	r3, sp, #12
 800a628:	4805      	ldr	r0, [pc, #20]	@ (800a640 <fiprintf+0x20>)
 800a62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62e:	6800      	ldr	r0, [r0, #0]
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	f7fe fe2b 	bl	800928c <_vfiprintf_r>
 800a636:	b002      	add	sp, #8
 800a638:	f85d eb04 	ldr.w	lr, [sp], #4
 800a63c:	b003      	add	sp, #12
 800a63e:	4770      	bx	lr
 800a640:	20000184 	.word	0x20000184

0800a644 <abort>:
 800a644:	b508      	push	{r3, lr}
 800a646:	2006      	movs	r0, #6
 800a648:	f000 f82c 	bl	800a6a4 <raise>
 800a64c:	2001      	movs	r0, #1
 800a64e:	f7f7 fa1d 	bl	8001a8c <_exit>

0800a652 <_raise_r>:
 800a652:	291f      	cmp	r1, #31
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4605      	mov	r5, r0
 800a658:	460c      	mov	r4, r1
 800a65a:	d904      	bls.n	800a666 <_raise_r+0x14>
 800a65c:	2316      	movs	r3, #22
 800a65e:	6003      	str	r3, [r0, #0]
 800a660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a664:	bd38      	pop	{r3, r4, r5, pc}
 800a666:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a668:	b112      	cbz	r2, 800a670 <_raise_r+0x1e>
 800a66a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a66e:	b94b      	cbnz	r3, 800a684 <_raise_r+0x32>
 800a670:	4628      	mov	r0, r5
 800a672:	f000 f831 	bl	800a6d8 <_getpid_r>
 800a676:	4622      	mov	r2, r4
 800a678:	4601      	mov	r1, r0
 800a67a:	4628      	mov	r0, r5
 800a67c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a680:	f000 b818 	b.w	800a6b4 <_kill_r>
 800a684:	2b01      	cmp	r3, #1
 800a686:	d00a      	beq.n	800a69e <_raise_r+0x4c>
 800a688:	1c59      	adds	r1, r3, #1
 800a68a:	d103      	bne.n	800a694 <_raise_r+0x42>
 800a68c:	2316      	movs	r3, #22
 800a68e:	6003      	str	r3, [r0, #0]
 800a690:	2001      	movs	r0, #1
 800a692:	e7e7      	b.n	800a664 <_raise_r+0x12>
 800a694:	2100      	movs	r1, #0
 800a696:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a69a:	4620      	mov	r0, r4
 800a69c:	4798      	blx	r3
 800a69e:	2000      	movs	r0, #0
 800a6a0:	e7e0      	b.n	800a664 <_raise_r+0x12>
	...

0800a6a4 <raise>:
 800a6a4:	4b02      	ldr	r3, [pc, #8]	@ (800a6b0 <raise+0xc>)
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	f7ff bfd2 	b.w	800a652 <_raise_r>
 800a6ae:	bf00      	nop
 800a6b0:	20000184 	.word	0x20000184

0800a6b4 <_kill_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	@ (800a6d4 <_kill_r+0x20>)
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	4611      	mov	r1, r2
 800a6c0:	602b      	str	r3, [r5, #0]
 800a6c2:	f7f7 f9d3 	bl	8001a6c <_kill>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	d102      	bne.n	800a6d0 <_kill_r+0x1c>
 800a6ca:	682b      	ldr	r3, [r5, #0]
 800a6cc:	b103      	cbz	r3, 800a6d0 <_kill_r+0x1c>
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	bd38      	pop	{r3, r4, r5, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000ce0 	.word	0x20000ce0

0800a6d8 <_getpid_r>:
 800a6d8:	f7f7 b9c0 	b.w	8001a5c <_getpid>

0800a6dc <_init>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr

0800a6e8 <_fini>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	bf00      	nop
 800a6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	469e      	mov	lr, r3
 800a6f2:	4770      	bx	lr
