/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include <tests.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LIDAR_HUART huart1
#define PC_HUART huart2
//#define DO_TESTS 1
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t flag_reception_uart2 = 0,
		flag_reception_uart1 = 0;

#define size_msg 7
#define number_point 50
uint8_t lidar_msg[number_point][size_msg];
uint8_t byte_received = 0;
float distance[number_point];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);

	return ch;
}

uint8_t caractere;
uint8_t buffer[300];
size_t index_write = 0;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  // Début des tests
#ifdef DO_TESTS
  do_all_tests();
#endif
  // Fin des tests
    int i = 0;

    uint8_t message[40] = "";//read_byte_from_buffer

    //HAL_UART_Receive_IT(&LIDAR_HUART, lidar_msg, size_msg);
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1); // A laisser proche de la boucle while(1)
    HAL_UART_Receive_IT(&LIDAR_HUART, &byte_received, 1);
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_reception_uart2 == 1) {
	  		  if (caractere == '\n') {
	  			  HAL_UART_Transmit(&PC_HUART, message, strlen(message), HAL_MAX_DELAY);
	  			  HAL_UART_Transmit(&LIDAR_HUART, message, strlen(message), HAL_MAX_DELAY);
	  			  message[0] = "\0";
	  			  i = 0;
	  		  }

	  		  message[i++] = caractere;
	  		  flag_reception_uart2 = 0;

	  		  HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);

	  	  }

/*
	  if (flag_reception_uart1 == 1) {
		  flag_reception_uart1 = 0;
		  printf("Byte received : 0x%X\n", read_byte_from_buffer());
	  }*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 1000000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2) {
		flag_reception_uart2 = 1;
		/*
		 * Relancer la réception dans l'interruption
	     */
		HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
	}

	if (huart->Instance == USART1) {
		flag_reception_uart1 = 1;


		// Mettre la valeur reçu directement dans le buffer
		// Si ça marche pas regarder en DMA

		//printf("0x%x\n", byte_received);

		HAL_UART_Receive_IT(&LIDAR_HUART, &byte_received, 1);
		//write_byte_to_buffer(byte_received);

		printf("0x%x\n", byte_received);
	}
}


float lidar_distance(frame_t frame)
{
   /**
	 * @brief Calcule la distance mesurée d'un point en mm
	 * @param la trame UART reçu
	 * @retval La distance entre le LIDAR et le point en mm
	 */
	uint16_t distance = (((uint16_t) frame[6] << 8) & 0xFF00) | (uint16_t) frame[5];
	return distance / 4.0;
}

float lidar_angle(frame_t frame)
{
	/**
	 * @brief Calcule la l'angle entre l'origine et le poin en degré
	 * @param la trame UART reçu
	 * @retval La valeu de l'angle en degrée
	 */

	uint16_t angle = (((uint16_t) frame[4] << 8) & 0xFF00) | (uint16_t) frame[3];

	// On retire le bit de vérification C
	angle >>= 1;

	return angle / 64.0;

}

bool lidar_check_bit(frame_t frame)
{
	/**
	 * @brief Retourne le bit de vérification qui vaut en permamence 1
	 * @param la trame UART reçu
	 * @retval La valeur de c
	 */

	return frame[3] & 0x1;
}

bool lidar_check_inversed_start_flag_bit(frame_t frame)
{
	/**
	 * @brief Vérifie les deux drapeaux inversé et non inversé
	 * @param la trame UART reçu
	 * @retval Retourne true si la valeur du bit de start est bien l'inverse de la valeur du bit de drapeau inversé
	 */

	bool no_inversed_bit = frame[2] & 0x1;
	bool inversed_bit = frame[2] & 0x2;


	return no_inversed_bit == !inversed_bit;
}

uint8_t lidar_get_quality(frame_t frame)
{
	/**
	 * @retval Donne la valeur de la force du signal laser
	 */

	return frame[2] >> 2;

}

bool lidar_is_new_scan(frame_t frame)
{
	/**
	 * @brief Vérifie la trame est la première trame du scan
	 * @param la trame UART reçu
	 * @retval booléen
	 */

	return frame[2] & 0x1;

}

void write_byte_to_buffer(uint8_t byte_to_write)
{
	if (index_write < 300)
	{
		buffer[index_write] = byte_to_write;
		index_write++;
	} else {
		index_write = 0;
		buffer[index_write] = byte_to_write;
	}
}

uint8_t read_byte_from_buffer(void)
{
	static size_t index_read = 0;

	if (index_write > index_read)
	{
		index_read++;
	}

	if (index_write < index_read)
	{
		index_read = index_write;
	}

	return buffer[index_read];
}

HAL_StatusTypeDef send_command_with_no_response(uint8_t *command, uint32_t timeout)
{
	return HAL_UART_Transmit(&huart1, command, strlen(command), timeout);
}

void lidar_send_stop() {
   /**
	 * @brief Envoi la commande d'arrêt de SCAN
	 * @retval void
	 */
	char command_stop[3] = "\xA5\x25";
	HAL_UART_Transmit(&huart1, command_stop, strlen(command_stop), HAL_MAX_DELAY);
}

void lidar_start_scan() {
   /**
	 * @brief Envoi la commande de démarrage du NORMAL SCAN
	 * @retval void
	 */
	char command_start_scan[3] = "\xA5\x20";
	HAL_UART_Transmit(&huart1, command_start_scan, strlen(command_start_scan), HAL_MAX_DELAY);
}

void lidar_send_reset() {
   /**
	 * @vrief Envoi la commande de RESET
	 * @retval void
	 */
	char command_reset[3] = "\xA5\x40";
	HAL_UART_Transmit(&huart1, command_reset, strlen(command_reset), HAL_MAX_DELAY);

	// TODO : Prochaine requete dans 2 ms
	HAL_Delay(2);
}

void lidar_get_info() {
   /**
	 * @brief Envoi de la comamnde pour obtenir des informations sur le RPLIDAR
	 * @retval void
	 */
	char command_get_info[3] = "\xA5\x50";
	HAL_UART_Transmit(&huart1, command_get_info, strlen(command_get_info), HAL_MAX_DELAY);
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
    if (huart->ErrorCode & HAL_UART_ERROR_FE) {
        // Gestion de l'erreur de framing
        printf("Erreur de framing detectee.\n");
    }
    if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
        // Gestion de l'erreur d'overrun
        printf("Erreur d'overrun detectee.\n");
    }
    if (huart->ErrorCode & HAL_UART_ERROR_PE) {
        // Gestion de l'erreur de parité
        printf("Erreur de parité detectee.\n");
    }
    if (huart->ErrorCode & HAL_UART_ERROR_NE) {
        // Gestion de l'erreur bruit
        printf("Erreur de bruit detectee.\n");
    }
    // Réinitialise la réception pour continuer la communication
    HAL_UART_Receive_IT(&PC_HUART, &caractere, 1);
    HAL_UART_Receive_IT(&LIDAR_HUART, &byte_received, 1);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
