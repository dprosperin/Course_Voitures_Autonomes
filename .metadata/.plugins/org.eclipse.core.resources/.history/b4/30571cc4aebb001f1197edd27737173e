/**
  ******************************************************************************
  * @file buffer.c
  * @brief Fonctions utilitaire pour le buffer circulaire
  * @author David PROSPÉRIN
  ******************************************************************************
  */

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>

size_t index_write = 0;
size_t index_read = 0;
size_t buffer_size = 0;
uint8_t buffer[2048] = {0};

/**
 * @brief Vérifie si le buffer est plein
 *
 * @retval Retourne True si le buffer est plein False sinon
 */
bool bufferIsFull()
{
	return buffer_size == 2048;
}

/**
 * @brief Vérifie si le buffer est vide
 *
 * @retval Retourne True si le buffer est vide False si le buffer contient un ou plusieurs élément(s)
 */
bool bufferIsEmpty()
{
	return buffer_size == 0;
}

/**
 * @brief Ajoute un élément au buffer circulaire
 *
 * @param Valeur à ajouter au buffer circulaire
 * @retval Retourne True si élément est bien ajouté au buffer False sinon
 */
bool enqueue(uint8_t value) {
	if (bufferIsFull())
	{
		printf("Le buffer est plein !\n");
		return false;
	}

	buffer[index_write] = value;

	index_write = (index_write + 1) % 2048;

	buffer_size++;

	return true;
}

/**
 * @brief Retire un élément du buffer circulaire
 *
 * @param Variable
 * @retval Retourne True si élément est bien retiré du buffer False sinon
 */

bool dequeue(int *value) {
    if (bufferIsEmpty()) {
        printf("Buffer vide ! Rien à retirer.\n");
        return false;
    }

    // Si on peut lire

    uint32_t remainingByte = 2048 - __HAL_DMA_GET_COUNTER(huart1.hdmarx);


    if (remainingByte > index_read)
    {
    	*value = buffer[index_read];

    	index_read = (index_read + 1) % 2048;  // Boucle autour
    }

    //buffer_size--;

    return true;
}



