/*
 * automate.c
 *
 *  Created on: Nov 14, 2024
 *      Author: davidprosperin
 */
#include <automate.h>
#include <stdio.h>

void automate_decode(uint8_t receivedByte)
{
    static state_automate_t next_state = FLAG_START1;
    static state_automate_t current_state;

    uint8_t quality = 0;
    uint8_t constant_bit = 0;
    uint8_t s = 0;
    uint8_t not_s = 0;

    static uint8_t distance_low_byte = 0;
    static uint8_t distance_high_byte = 0;

    static uint8_t angle_low_byte = 0;
    static uint8_t angle_high_byte = 0;

    static float distance = 0;
    static float angle = 0;

    current_state = next_state;

    switch (current_state)
    {
    case FLAG_START1 :
    	//printf("Etat courant : FLAG_START1\n");
    	if (receivedByte == 0xA5)
        {
             next_state = FLAG_START2;
        }
    break;

    case FLAG_START2:
    	//printf("Etat courant : FLAG_START2\n");
        if (receivedByte == 0x5A)
        {
            next_state = RESPONSE_DESCRIPTOR1;
        } else {
        	next_state = FLAG_START1;
        }
    break;

    case RESPONSE_DESCRIPTOR1:
    	if (receivedByte == 0x05)
    	{
    		next_state = RESPONSE_DESCRIPTOR2;
    	}
    	break;
    case RESPONSE_DESCRIPTOR2:
    	if (receivedByte == 0x00)
    	{
    		next_state = RESPONSE_DESCRIPTOR3;
    	}
    	break;

    case RESPONSE_DESCRIPTOR3:
        if (receivedByte == 0x00)
        {
        	next_state = RESPONSE_DESCRIPTOR4;
        }
        break;
    case RESPONSE_DESCRIPTOR4:
    	if (receivedByte == 0x40)
    	{
    	    next_state = RESPONSE_DESCRIPTOR5;
    	}
    	break;

    case RESPONSE_DESCRIPTOR5:
        if (receivedByte == 0x81)
        {
        	printf("Response descriptor correctement lu debut a %d\n", index_read);
        	next_state = QUALITY;
        }
        break;

    case QUALITY:
    		quality = receivedByte >> 2;
    		not_s = (receivedByte >> 1) & 1;
    		s = receivedByte & 1;


    		if (s)
    		{
    			printf("Tour complet\n");
    		}

            if (!not_s == s)
            {
            	//printf("Pass QUALITY : not S : %d S : %d, Quality : %d\n", not_s, s, quality);
            	next_state = ANGLE_FIRST_PART;

            } else {
            	//printf("No pass QUALITY : not S : %d S : %d, Quality : %d\n", not_s, s, quality);
            	next_state = QUALITY;
            }
    break;

    case ANGLE_FIRST_PART:
    	constant_bit = receivedByte & 0b1;
    	angle_low_byte = receivedByte;

    	//printf("ANGLE_FIRST_PART\n");

        if (constant_bit)
        {
            next_state = ANGLE_SECOND_PART;
        } else {
        	next_state = QUALITY;
        }
    break;

    case ANGLE_SECOND_PART:
    	angle_high_byte = receivedByte;

    	angle = (((uint16_t)(angle_high_byte) << 7) | ((uint16_t)(angle_low_byte) & 0x00FF)) / 64.0;

    	//printf("angle_high_byte : 0x%x angle_low_byte : 0x%x Angle %f degree\n", angle_high_byte, angle_low_byte, angle);

    	next_state = DISTANCE_FIRST_PART;
    break;

    case DISTANCE_FIRST_PART:
    	distance_low_byte = receivedByte;

    	next_state = DISTANCE_SECOND_PART;

    break;

    case DISTANCE_SECOND_PART:
    	distance_high_byte = receivedByte;

    	distance = ((((uint16_t) distance_high_byte << 8) & 0xFF00 ) | ((uint16_t) distance_low_byte & 0x00FF)) / 4.0;

    	//printf("distance_high_byte : 0x%x distance_low_byte : 0x%x Distance %3.6f mm\n", distance_high_byte, distance_low_byte, distance);

    	if (distance > 0)
    	{
    		printf("(%4.3f, %4.3f) index_write : %d index_read : %d\n", angle, distance, index_write, index_read);
    	}
        next_state = QUALITY;
    break;
    }
}
