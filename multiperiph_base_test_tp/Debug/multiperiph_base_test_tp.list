
multiperiph_base_test_tp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008874  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08008a58  08008a58  00009a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed8  08008ed8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed8  08008ed8  00009ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee0  08008ee0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee0  08008ee0  00009ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ee4  08008ee4  00009ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008ee8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200001d4  080090bc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  080090bc  0000a468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5b9  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250c  00000000  00000000  000197bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0001bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a1  00000000  00000000  0001c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eac7  00000000  00000000  0001d329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102da  00000000  00000000  0003bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd724  00000000  00000000  0004c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001097ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  00109834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010e054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008a3c 	.word	0x08008a3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008a3c 	.word	0x08008a3c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800103a:	4a20      	ldr	r2, [pc, #128]	@ (80010bc <MX_FDCAN1_Init+0x88>)
 800103c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001052:	2200      	movs	r2, #0
 8001054:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001058:	2200      	movs	r2, #0
 800105a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800105e:	2200      	movs	r2, #0
 8001060:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001064:	2211      	movs	r2, #17
 8001066:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800106a:	2201      	movs	r2, #1
 800106c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001070:	2207      	movs	r2, #7
 8001072:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001076:	2202      	movs	r2, #2
 8001078:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800107c:	2201      	movs	r2, #1
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001082:	2201      	movs	r2, #1
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001088:	2201      	movs	r2, #1
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800108e:	2201      	movs	r2, #1
 8001090:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <MX_FDCAN1_Init+0x84>)
 80010a6:	f000 fd87 	bl	8001bb8 <HAL_FDCAN_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80010b0:	f000 f909 	bl	80012c6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f0 	.word	0x200001f0
 80010bc:	40006400 	.word	0x40006400

080010c0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09a      	sub	sp, #104	@ 0x68
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	2244      	movs	r2, #68	@ 0x44
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 f8d6 	bl	8005292 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a24      	ldr	r2, [pc, #144]	@ (800117c <HAL_FDCAN_MspInit+0xbc>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d141      	bne.n	8001174 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80010f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4618      	mov	r0, r3
 8001102:	f002 f907 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800110c:	f000 f8db 	bl	80012c6 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 8001112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001114:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 8001116:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800111a:	6593      	str	r3, [r2, #88]	@ 0x58
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_FDCAN_MspInit+0xc0>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001140:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001144:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001152:	2309      	movs	r3, #9
 8001154:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001160:	f001 f95c 	bl	800241c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2015      	movs	r0, #21
 800116a:	f000 fcf0 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800116e:	2015      	movs	r0, #21
 8001170:	f000 fd07 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3768      	adds	r7, #104	@ 0x68
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40006400 	.word	0x40006400
 8001180:	40021000 	.word	0x40021000

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_GPIO_Init+0x78>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_GPIO_Init+0x78>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <MX_GPIO_Init+0x7c>)
 80011d2:	f001 faa5 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MX_GPIO_Init+0x7c>)
 80011f0:	f001 f914 	bl	800241c <HAL_GPIO_Init>

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400

08001204 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001208:	f000 fb33 	bl	8001872 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800120c:	f000 f810 	bl	8001230 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001210:	f7ff ffb8 	bl	8001184 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001214:	f000 fa60 	bl	80016d8 <MX_USART2_UART_Init>
	MX_FDCAN1_Init();
 8001218:	f7ff ff0c 	bl	8001034 <MX_FDCAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_FDCAN_Start(&hfdcan1);
 800121c:	4803      	ldr	r0, [pc, #12]	@ (800122c <main+0x28>)
 800121e:	f000 fe25 	bl	8001e6c <HAL_FDCAN_Start>

	setup();
 8001222:	f000 f8c7 	bl	80013b4 <setup>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		loop();
 8001226:	f000 f8eb 	bl	8001400 <loop>
 800122a:	e7fc      	b.n	8001226 <main+0x22>
 800122c:	200001f0 	.word	0x200001f0

08001230 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	2238      	movs	r2, #56	@ 0x38
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f004 f827 	bl	8005292 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001252:	2000      	movs	r0, #0
 8001254:	f001 fa7c 	bl	8002750 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001262:	2340      	movs	r3, #64	@ 0x40
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126a:	2302      	movs	r3, #2
 800126c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800126e:	2304      	movs	r3, #4
 8001270:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001272:	2355      	movs	r3, #85	@ 0x55
 8001274:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001276:	2302      	movs	r3, #2
 8001278:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127a:	2302      	movs	r3, #2
 800127c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fb16 	bl	80028b8 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001292:	f000 f818 	bl	80012c6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2303      	movs	r3, #3
 800129c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2104      	movs	r1, #4
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fe14 	bl	8002edc <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80012ba:	f000 f804 	bl	80012c6 <Error_Handler>
	}
}
 80012be:	bf00      	nop
 80012c0:	3750      	adds	r7, #80	@ 0x50
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ca:	b672      	cpsid	i
}
 80012cc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012ce:	bf00      	nop
 80012d0:	e7fd      	b.n	80012ce <Error_Handler+0x8>
 80012d2:	0000      	movs	r0, r0
 80012d4:	0000      	movs	r0, r0
	...

080012d8 <set_angle>:

uint8_t vitesse_m_s = 0 ;
uint8_t bit_fort ;
uint8_t bit_faible ;
uint16_t set_angle()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	f5ad 6db6 	sub.w	sp, sp, #1456	@ 0x5b0
 80012de:	af00      	add	r7, sp, #0
	 float data_lidar_main[360];

	 data_lidar_main [345] = 1405.0; // Assign float value
 80012e0:	f507 63b6 	add.w	r3, r7, #1456	@ 0x5b0
 80012e4:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 80012e8:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 80012ec:	4a2e      	ldr	r2, [pc, #184]	@ (80013a8 <set_angle+0xd0>)
 80012ee:	601a      	str	r2, [r3, #0]
	 data_lidar_main[45] = 1404.0;  // Assign another float value
 80012f0:	f507 63b6 	add.w	r3, r7, #1456	@ 0x5b0
 80012f4:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 80012f8:	4a2c      	ldr	r2, [pc, #176]	@ (80013ac <set_angle+0xd4>)
 80012fa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	 float difference  = data_lidar_main[345]-data_lidar_main [45] ;
 80012fe:	f507 63b6 	add.w	r3, r7, #1456	@ 0x5b0
 8001302:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8001306:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800130a:	ed93 7a00 	vldr	s14, [r3]
 800130e:	f507 63b6 	add.w	r3, r7, #1456	@ 0x5b0
 8001312:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8001316:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800131a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131e:	f207 53ac 	addw	r3, r7, #1452	@ 0x5ac
 8001322:	edc3 7a00 	vstr	s15, [r3]
	 float kp = 0.60 ;
 8001326:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <set_angle+0xd8>)
 8001328:	f507 62b5 	add.w	r2, r7, #1448	@ 0x5a8
 800132c:	6013      	str	r3, [r2, #0]
	 float angle = 0.0 ;
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	f207 52a4 	addw	r2, r7, #1444	@ 0x5a4
 8001336:	6013      	str	r3, [r2, #0]

	 uint16_t hexa_angle ;

	 angle = kp * difference ;
 8001338:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	f207 53ac 	addw	r3, r7, #1452	@ 0x5ac
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134c:	f207 53a4 	addw	r3, r7, #1444	@ 0x5a4
 8001350:	edc3 7a00 	vstr	s15, [r3]

	 hexa_angle = 0x200+(angle/0.35) ;
 8001354:	f207 53a4 	addw	r3, r7, #1444	@ 0x5a4
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f7ff f91d 	bl	8000598 <__aeabi_f2d>
 800135e:	a310      	add	r3, pc, #64	@ (adr r3, 80013a0 <set_angle+0xc8>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff fa9a 	bl	800089c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001378:	f7fe ffb0 	bl	80002dc <__adddf3>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc38 	bl	8000bf8 <__aeabi_d2uiz>
 8001388:	4603      	mov	r3, r0
 800138a:	f8a7 35a2 	strh.w	r3, [r7, #1442]	@ 0x5a2


	 return hexa_angle ;
 800138e:	f8b7 35a2 	ldrh.w	r3, [r7, #1442]	@ 0x5a2
}
 8001392:	4618      	mov	r0, r3
 8001394:	f507 67b6 	add.w	r7, r7, #1456	@ 0x5b0
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	f3af 8000 	nop.w
 80013a0:	66666666 	.word	0x66666666
 80013a4:	3fd66666 	.word	0x3fd66666
 80013a8:	44afa000 	.word	0x44afa000
 80013ac:	44af8000 	.word	0x44af8000
 80013b0:	3f19999a 	.word	0x3f19999a

080013b4 <setup>:

void setup()
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

	/******************* NE PAS TOUCHER **************************************/
	header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <setup+0x48>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
	header.BitRateSwitch = FDCAN_BRS_OFF;
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <setup+0x48>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
	header.FDFormat = FDCAN_CLASSIC_CAN;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <setup+0x48>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
	header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <setup+0x48>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	61da      	str	r2, [r3, #28]
	header.MessageMarker = 0;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <setup+0x48>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	621a      	str	r2, [r3, #32]
	/*************************************************************************/

	header.Identifier = 0x700; // Set your CAN identifier
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <setup+0x48>)
 80013d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013dc:	601a      	str	r2, [r3, #0]
	header.IdType = FDCAN_STANDARD_ID; // Standard ID
 80013de:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <setup+0x48>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
	header.TxFrameType = FDCAN_DATA_FRAME; // Data frame
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <setup+0x48>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
	header.DataLength = 3; // Data length
 80013ea:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <setup+0x48>)
 80013ec:	2203      	movs	r2, #3
 80013ee:	60da      	str	r2, [r3, #12]

}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000254 	.word	0x20000254

08001400 <loop>:

void loop()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	//if ( 0xFFFFFFFFFFFFFF9C < set_angle() && set_angle() < 0x64 )
	//{
		vitesse_m_s = 10;
 8001404:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <loop+0x54>)
 8001406:	220a      	movs	r2, #10
 8001408:	701a      	strb	r2, [r3, #0]
	//else
//	{
		//vitesse_m_s=5;
	//}

	bit_faible = set_angle() & 0xFF ;
 800140a:	f7ff ff65 	bl	80012d8 <set_angle>
 800140e:	4603      	mov	r3, r0
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <loop+0x58>)
 8001414:	701a      	strb	r2, [r3, #0]
	bit_fort = (set_angle()>>8)&0xFF;
 8001416:	f7ff ff5f 	bl	80012d8 <set_angle>
 800141a:	4603      	mov	r3, r0
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	b29b      	uxth	r3, r3
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <loop+0x5c>)
 8001424:	701a      	strb	r2, [r3, #0]





	data [1] = bit_faible ;
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <loop+0x58>)
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <loop+0x60>)
 800142c:	705a      	strb	r2, [r3, #1]
	data [0] = 	bit_fort ;
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <loop+0x5c>)
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <loop+0x60>)
 8001434:	701a      	strb	r2, [r3, #0]
	data [2] = vitesse_m_s ;
 8001436:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <loop+0x54>)
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <loop+0x60>)
 800143c:	709a      	strb	r2, [r3, #2]


	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header, data) ;
 800143e:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <loop+0x60>)
 8001440:	4908      	ldr	r1, [pc, #32]	@ (8001464 <loop+0x64>)
 8001442:	4809      	ldr	r0, [pc, #36]	@ (8001468 <loop+0x68>)
 8001444:	f000 fd3a 	bl	8001ebc <HAL_FDCAN_AddMessageToTxFifoQ>
    HAL_Delay(1000);
 8001448:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800144c:	f000 fa82 	bl	8001954 <HAL_Delay>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000027b 	.word	0x2000027b
 8001458:	2000027d 	.word	0x2000027d
 800145c:	2000027c 	.word	0x2000027c
 8001460:	20000278 	.word	0x20000278
 8001464:	20000254 	.word	0x20000254
 8001468:	200001f0 	.word	0x200001f0

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_MspInit+0x44>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_MspInit+0x44>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6613      	str	r3, [r2, #96]	@ 0x60
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_MspInit+0x44>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_MspInit+0x44>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_MspInit+0x44>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_MspInit+0x44>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014a2:	f001 f9f9 	bl	8002898 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <NMI_Handler+0x4>

080014bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <MemManage_Handler+0x4>

080014cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <UsageFault_Handler+0x4>

080014dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150a:	f000 fa05 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <FDCAN1_IT0_IRQHandler+0x10>)
 800151a:	f000 fd13 	bl	8001f44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001f0 	.word	0x200001f0

08001528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_kill>:

int _kill(int pid, int sig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001542:	f003 fef9 	bl	8005338 <__errno>
 8001546:	4603      	mov	r3, r0
 8001548:	2216      	movs	r2, #22
 800154a:	601a      	str	r2, [r3, #0]
  return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_exit>:

void _exit (int status)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffe7 	bl	8001538 <_kill>
  while (1) {}    /* Make sure we hang here */
 800156a:	bf00      	nop
 800156c:	e7fd      	b.n	800156a <_exit+0x12>

0800156e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e00a      	b.n	8001596 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001580:	f3af 8000 	nop.w
 8001584:	4601      	mov	r1, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	60ba      	str	r2, [r7, #8]
 800158c:	b2ca      	uxtb	r2, r1
 800158e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	dbf0      	blt.n	8001580 <_read+0x12>
  }

  return len;
 800159e:	687b      	ldr	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e009      	b.n	80015ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	60ba      	str	r2, [r7, #8]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbf1      	blt.n	80015ba <_write+0x12>
  }
  return len;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_close>:

int _close(int file)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001608:	605a      	str	r2, [r3, #4]
  return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_isatty>:

int _isatty(int file)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f003 fe5e 	bl	8005338 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20008000 	.word	0x20008000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	20000280 	.word	0x20000280
 80016b0:	20000468 	.word	0x20000468

080016b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 80016de:	4a23      	ldr	r2, [pc, #140]	@ (800176c <MX_USART2_UART_Init+0x94>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e2:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001720:	4811      	ldr	r0, [pc, #68]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 8001722:	f001 ffe7 	bl	80036f4 <HAL_UART_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800172c:	f7ff fdcb 	bl	80012c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001730:	2100      	movs	r1, #0
 8001732:	480d      	ldr	r0, [pc, #52]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 8001734:	f002 fd52 	bl	80041dc <HAL_UARTEx_SetTxFifoThreshold>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800173e:	f7ff fdc2 	bl	80012c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	4808      	ldr	r0, [pc, #32]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 8001746:	f002 fd87 	bl	8004258 <HAL_UARTEx_SetRxFifoThreshold>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001750:	f7ff fdb9 	bl	80012c6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	@ (8001768 <MX_USART2_UART_Init+0x90>)
 8001756:	f002 fd08 	bl	800416a <HAL_UARTEx_DisableFifoMode>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001760:	f7ff fdb1 	bl	80012c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000284 	.word	0x20000284
 800176c:	40004400 	.word	0x40004400

08001770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09a      	sub	sp, #104	@ 0x68
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2244      	movs	r2, #68	@ 0x44
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fd7e 	bl	8005292 <memset>
  if(uartHandle->Instance==USART2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <HAL_UART_MspInit+0xa8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d136      	bne.n	800180e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 fdb1 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017b8:	f7ff fd85 	bl	80012c6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_UART_MspInit+0xac>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <HAL_UART_MspInit+0xac>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_UART_MspInit+0xac>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_UART_MspInit+0xac>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	4a10      	ldr	r2, [pc, #64]	@ (800181c <HAL_UART_MspInit+0xac>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_UART_MspInit+0xac>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80017ec:	230c      	movs	r3, #12
 80017ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fc:	2307      	movs	r3, #7
 80017fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180a:	f000 fe07 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3768      	adds	r7, #104	@ 0x68
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40004400 	.word	0x40004400
 800181c:	40021000 	.word	0x40021000

08001820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001820:	480d      	ldr	r0, [pc, #52]	@ (8001858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001822:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001824:	f7ff ff46 	bl	80016b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <LoopForever+0x6>)
  ldr r1, =_edata
 800182a:	490d      	ldr	r1, [pc, #52]	@ (8001860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <LoopForever+0xe>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001840:	4c0a      	ldr	r4, [pc, #40]	@ (800186c <LoopForever+0x16>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800184e:	f003 fd79 	bl	8005344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001852:	f7ff fcd7 	bl	8001204 <main>

08001856 <LoopForever>:

LoopForever:
    b LoopForever
 8001856:	e7fe      	b.n	8001856 <LoopForever>
  ldr   r0, =_estack
 8001858:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001860:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001864:	08008ee8 	.word	0x08008ee8
  ldr r2, =_sbss
 8001868:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800186c:	20000468 	.word	0x20000468

08001870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC1_2_IRQHandler>

08001872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f95b 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001882:	2000      	movs	r0, #0
 8001884:	f000 f80e 	bl	80018a4 <HAL_InitTick>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	e001      	b.n	8001898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001894:	f7ff fdea 	bl	800146c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001898:	79fb      	ldrb	r3, [r7, #7]

}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <HAL_InitTick+0x68>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d022      	beq.n	80018fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_InitTick+0x6c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b13      	ldr	r3, [pc, #76]	@ (800190c <HAL_InitTick+0x68>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f966 	bl	8001b9e <HAL_SYSTICK_Config>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10f      	bne.n	80018f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	d809      	bhi.n	80018f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018de:	2200      	movs	r2, #0
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	f04f 30ff 	mov.w	r0, #4294967295
 80018e6:	f000 f932 	bl	8001b4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <HAL_InitTick+0x70>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e007      	b.n	8001902 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e004      	b.n	8001902 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e001      	b.n	8001902 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000008 	.word	0x20000008
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_IncTick+0x1c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_IncTick+0x20>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4413      	add	r3, r2
 8001926:	4a03      	ldr	r2, [pc, #12]	@ (8001934 <HAL_IncTick+0x1c>)
 8001928:	6013      	str	r3, [r2, #0]
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000318 	.word	0x20000318
 8001938:	20000008 	.word	0x20000008

0800193c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_GetTick+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000318 	.word	0x20000318

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d004      	beq.n	8001978 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_Delay+0x40>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001978:	bf00      	nop
 800197a:	f7ff ffdf 	bl	800193c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	429a      	cmp	r2, r3
 8001988:	d8f7      	bhi.n	800197a <HAL_Delay+0x26>
  {
  }
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000008 	.word	0x20000008

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	@ (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff40 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff90 	bl	8001a8c <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5f 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff33 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa4 	bl	8001af4 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e147      	b.n	8001e5a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fa6e 	bl	80010c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0210 	bic.w	r2, r2, #16
 8001bf2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff fea2 	bl	800193c <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001bfa:	e012      	b.n	8001c22 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001bfc:	f7ff fe9e 	bl	800193c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b0a      	cmp	r3, #10
 8001c08:	d90b      	bls.n	8001c22 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0e:	f043 0201 	orr.w	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e11b      	b.n	8001e5a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d0e5      	beq.n	8001bfc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c40:	f7ff fe7c 	bl	800193c <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c46:	e012      	b.n	8001c6e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001c48:	f7ff fe78 	bl	800193c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b0a      	cmp	r3, #10
 8001c54:	d90b      	bls.n	8001c6e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2203      	movs	r2, #3
 8001c66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0f5      	b.n	8001e5a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0e5      	beq.n	8001c48 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0202 	orr.w	r2, r2, #2
 8001c8a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a74      	ldr	r2, [pc, #464]	@ (8001e64 <HAL_FDCAN_Init+0x2ac>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d103      	bne.n	8001c9e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001c96:	4a74      	ldr	r2, [pc, #464]	@ (8001e68 <HAL_FDCAN_Init+0x2b0>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7c1b      	ldrb	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cb4:	619a      	str	r2, [r3, #24]
 8001cb6:	e007      	b.n	8001cc8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cc6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7c5b      	ldrb	r3, [r3, #17]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cde:	619a      	str	r2, [r3, #24]
 8001ce0:	e007      	b.n	8001cf2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cf0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7c9b      	ldrb	r3, [r3, #18]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d108      	bne.n	8001d0c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699a      	ldr	r2, [r3, #24]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d08:	619a      	str	r2, [r3, #24]
 8001d0a:	e007      	b.n	8001d1c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d1a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001d40:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0210 	bic.w	r2, r2, #16
 8001d50:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0204 	orr.w	r2, r2, #4
 8001d68:	619a      	str	r2, [r3, #24]
 8001d6a:	e02c      	b.n	8001dc6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d028      	beq.n	8001dc6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d01c      	beq.n	8001db6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d8a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0210 	orr.w	r2, r2, #16
 8001d9a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d110      	bne.n	8001dc6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	e007      	b.n	8001dc6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0220 	orr.w	r2, r2, #32
 8001dc4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dd6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001dde:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001dee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001df0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dfa:	d115      	bne.n	8001e28 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e06:	3b01      	subs	r3, #1
 8001e08:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e0a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	3b01      	subs	r3, #1
 8001e12:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001e14:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001e24:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e26:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa1a 	bl	8002278 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40006400 	.word	0x40006400
 8001e68:	40006500 	.word	0x40006500

08001e6c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d110      	bne.n	8001ea2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e006      	b.n	8001eb0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea6:	f043 0204 	orr.w	r2, r3, #4
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
  }
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d12c      	bne.n	8001f2e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e023      	b.n	8001f3c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fa0a 	bl	8002324 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2101      	movs	r1, #1
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001f20:	2201      	movs	r2, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	409a      	lsls	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e006      	b.n	8001f3c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f32:	f043 0208 	orr.w	r2, r3, #8
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
  }
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	@ 0x30
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f52:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f60:	4013      	ands	r3, r2
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f78:	4013      	ands	r3, r2
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	4013      	ands	r3, r2
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001f9e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	6a3a      	ldr	r2, [r7, #32]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fb6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f921 	bl	8002238 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d019      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d014      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002012:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800202a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800202c:	6939      	ldr	r1, [r7, #16]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8e3 	bl	80021fa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002040:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8a2 	bl	800218e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002056:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8a2 	bl	80021a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800206e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8a2 	bl	80021ba <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002092:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f89b 	bl	80021d0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d018      	beq.n	80020d6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d013      	beq.n	80020d6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020b6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2280      	movs	r2, #128	@ 0x80
 80020cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f887 	bl	80021e4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00c      	beq.n	80020fa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f88b 	bl	8002210 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00c      	beq.n	800211e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002116:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f883 	bl	8002224 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00f      	beq.n	8002148 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800213a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002140:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002156:	69f9      	ldr	r1, [r7, #28]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f881 	bl	8002260 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f863 	bl	800224c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002186:	bf00      	nop
 8002188:	3730      	adds	r7, #48	@ 0x30
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002280:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002282:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002292:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229a:	041a      	lsls	r2, r3, #16
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c0:	061a      	lsls	r2, r3, #24
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e005      	b.n	8002306 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	429a      	cmp	r2, r3
 8002310:	d3f3      	bcc.n	80022fa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	4000a400 	.word	0x4000a400

08002324 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002342:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800234a:	4313      	orrs	r3, r2
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e00a      	b.n	8002366 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002358:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800235e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002360:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002364:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002370:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002376:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800237c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	3304      	adds	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	3304      	adds	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e020      	b.n	80023fa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3303      	adds	r3, #3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3302      	adds	r3, #2
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	440b      	add	r3, r1
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80023d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	440b      	add	r3, r1
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80023de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	440a      	add	r2, r1
 80023e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80023e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3304      	adds	r3, #4
 80023f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3304      	adds	r3, #4
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a06      	ldr	r2, [pc, #24]	@ (8002418 <FDCAN_CopyMessageToRAM+0xf4>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	461a      	mov	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	4293      	cmp	r3, r2
 8002408:	d3d6      	bcc.n	80023b8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3724      	adds	r7, #36	@ 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	08008a70 	.word	0x08008a70

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800242a:	e15a      	b.n	80026e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 814c 	beq.w	80026dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d017      	beq.n	80024fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d123      	bne.n	800254e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	6939      	ldr	r1, [r7, #16]
 800254a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0203 	and.w	r2, r3, #3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80a6 	beq.w	80026dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002590:	4b5b      	ldr	r3, [pc, #364]	@ (8002700 <HAL_GPIO_Init+0x2e4>)
 8002592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002594:	4a5a      	ldr	r2, [pc, #360]	@ (8002700 <HAL_GPIO_Init+0x2e4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6613      	str	r3, [r2, #96]	@ 0x60
 800259c:	4b58      	ldr	r3, [pc, #352]	@ (8002700 <HAL_GPIO_Init+0x2e4>)
 800259e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a8:	4a56      	ldr	r2, [pc, #344]	@ (8002704 <HAL_GPIO_Init+0x2e8>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025d2:	d01f      	beq.n	8002614 <HAL_GPIO_Init+0x1f8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002708 <HAL_GPIO_Init+0x2ec>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d019      	beq.n	8002610 <HAL_GPIO_Init+0x1f4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4b      	ldr	r2, [pc, #300]	@ (800270c <HAL_GPIO_Init+0x2f0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d013      	beq.n	800260c <HAL_GPIO_Init+0x1f0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002710 <HAL_GPIO_Init+0x2f4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00d      	beq.n	8002608 <HAL_GPIO_Init+0x1ec>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a49      	ldr	r2, [pc, #292]	@ (8002714 <HAL_GPIO_Init+0x2f8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <HAL_GPIO_Init+0x1e8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a48      	ldr	r2, [pc, #288]	@ (8002718 <HAL_GPIO_Init+0x2fc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_GPIO_Init+0x1e4>
 80025fc:	2305      	movs	r3, #5
 80025fe:	e00a      	b.n	8002616 <HAL_GPIO_Init+0x1fa>
 8002600:	2306      	movs	r3, #6
 8002602:	e008      	b.n	8002616 <HAL_GPIO_Init+0x1fa>
 8002604:	2304      	movs	r3, #4
 8002606:	e006      	b.n	8002616 <HAL_GPIO_Init+0x1fa>
 8002608:	2303      	movs	r3, #3
 800260a:	e004      	b.n	8002616 <HAL_GPIO_Init+0x1fa>
 800260c:	2302      	movs	r3, #2
 800260e:	e002      	b.n	8002616 <HAL_GPIO_Init+0x1fa>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_GPIO_Init+0x1fa>
 8002614:	2300      	movs	r3, #0
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	f002 0203 	and.w	r2, r2, #3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	4093      	lsls	r3, r2
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002626:	4937      	ldr	r1, [pc, #220]	@ (8002704 <HAL_GPIO_Init+0x2e8>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002634:	4b39      	ldr	r3, [pc, #228]	@ (800271c <HAL_GPIO_Init+0x300>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002658:	4a30      	ldr	r2, [pc, #192]	@ (800271c <HAL_GPIO_Init+0x300>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800265e:	4b2f      	ldr	r3, [pc, #188]	@ (800271c <HAL_GPIO_Init+0x300>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002682:	4a26      	ldr	r2, [pc, #152]	@ (800271c <HAL_GPIO_Init+0x300>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002688:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_GPIO_Init+0x300>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ac:	4a1b      	ldr	r2, [pc, #108]	@ (800271c <HAL_GPIO_Init+0x300>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_GPIO_Init+0x300>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026d6:	4a11      	ldr	r2, [pc, #68]	@ (800271c <HAL_GPIO_Init+0x300>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f ae9d 	bne.w	800242c <HAL_GPIO_Init+0x10>
  }
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40021000 	.word	0x40021000
 8002704:	40010000 	.word	0x40010000
 8002708:	48000400 	.word	0x48000400
 800270c:	48000800 	.word	0x48000800
 8002710:	48000c00 	.word	0x48000c00
 8002714:	48001000 	.word	0x48001000
 8002718:	48001400 	.word	0x48001400
 800271c:	40010400 	.word	0x40010400

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
 800272c:	4613      	mov	r3, r2
 800272e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800273c:	e002      	b.n	8002744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d141      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800275e:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800276a:	d131      	bne.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800276c:	4b47      	ldr	r3, [pc, #284]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002772:	4a46      	ldr	r2, [pc, #280]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002778:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800277c:	4b43      	ldr	r3, [pc, #268]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002784:	4a41      	ldr	r2, [pc, #260]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800278a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800278c:	4b40      	ldr	r3, [pc, #256]	@ (8002890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2232      	movs	r2, #50	@ 0x32
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a3f      	ldr	r2, [pc, #252]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9b      	lsrs	r3, r3, #18
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a2:	e002      	b.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027aa:	4b38      	ldr	r3, [pc, #224]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b6:	d102      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f2      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027be:	4b33      	ldr	r3, [pc, #204]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ca:	d158      	bne.n	800287e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e057      	b.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d0:	4b2e      	ldr	r3, [pc, #184]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027d6:	4a2d      	ldr	r2, [pc, #180]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80027e0:	e04d      	b.n	800287e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e8:	d141      	bne.n	800286e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ea:	4b28      	ldr	r3, [pc, #160]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f6:	d131      	bne.n	800285c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027fe:	4a23      	ldr	r2, [pc, #140]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002808:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002810:	4a1e      	ldr	r2, [pc, #120]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002816:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002818:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2232      	movs	r2, #50	@ 0x32
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a1c      	ldr	r2, [pc, #112]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	3301      	adds	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800282e:	e002      	b.n	8002836 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3b01      	subs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002842:	d102      	bne.n	800284a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f2      	bne.n	8002830 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002856:	d112      	bne.n	800287e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e011      	b.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800286c:	e007      	b.n	800287e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800286e:	4b07      	ldr	r3, [pc, #28]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002876:	4a05      	ldr	r2, [pc, #20]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002878:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800287c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40007000 	.word	0x40007000
 8002890:	20000000 	.word	0x20000000
 8002894:	431bde83 	.word	0x431bde83

08002898 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a6:	6093      	str	r3, [r2, #8]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40007000 	.word	0x40007000

080028b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e2fe      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d075      	beq.n	80029c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d6:	4b97      	ldr	r3, [pc, #604]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e0:	4b94      	ldr	r3, [pc, #592]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d102      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3e>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d002      	beq.n	80028fc <HAL_RCC_OscConfig+0x44>
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d10b      	bne.n	8002914 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05b      	beq.n	80029c0 <HAL_RCC_OscConfig+0x108>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d157      	bne.n	80029c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e2d9      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x74>
 800291e:	4b85      	ldr	r3, [pc, #532]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a84      	ldr	r2, [pc, #528]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xb0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x98>
 8002936:	4b7f      	ldr	r3, [pc, #508]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b7c      	ldr	r3, [pc, #496]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7b      	ldr	r2, [pc, #492]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xb0>
 8002950:	4b78      	ldr	r3, [pc, #480]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a77      	ldr	r2, [pc, #476]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b75      	ldr	r3, [pc, #468]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a74      	ldr	r2, [pc, #464]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe ffe4 	bl	800193c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe ffe0 	bl	800193c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e29e      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xc0>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe ffd0 	bl	800193c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe ffcc 	bl	800193c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	@ 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e28a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b2:	4b60      	ldr	r3, [pc, #384]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0xe8>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d075      	beq.n	8002aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ce:	4b59      	ldr	r3, [pc, #356]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d8:	4b56      	ldr	r3, [pc, #344]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_OscConfig+0x136>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d002      	beq.n	80029f4 <HAL_RCC_OscConfig+0x13c>
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d11f      	bne.n	8002a34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_OscConfig+0x154>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e25d      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0c:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	4946      	ldr	r1, [pc, #280]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a20:	4b45      	ldr	r3, [pc, #276]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe ff3d 	bl	80018a4 <HAL_InitTick>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d043      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e249      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d023      	beq.n	8002a84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a3c      	ldr	r2, [pc, #240]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe ff78 	bl	800193c <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a50:	f7fe ff74 	bl	800193c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e232      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a62:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	061b      	lsls	r3, r3, #24
 8002a7c:	492d      	ldr	r1, [pc, #180]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
 8002a82:	e01a      	b.n	8002aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a84:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2a      	ldr	r2, [pc, #168]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002a8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe ff54 	bl	800193c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a98:	f7fe ff50 	bl	800193c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e20e      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aaa:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x1e0>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d041      	beq.n	8002b4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad4:	4a17      	ldr	r2, [pc, #92]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe ff2d 	bl	800193c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fe ff29 	bl	800193c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1e7      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002af8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ef      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x22e>
 8002b06:	e020      	b.n	8002b4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b08:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b0e:	4a09      	ldr	r2, [pc, #36]	@ (8002b34 <HAL_RCC_OscConfig+0x27c>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe ff10 	bl	800193c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b1e:	e00d      	b.n	8002b3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe ff0c 	bl	800193c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d906      	bls.n	8002b3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1ca      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ea      	bne.n	8002b20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80a6 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b5c:	4b84      	ldr	r3, [pc, #528]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2b4>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x2b6>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00d      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	4b7f      	ldr	r3, [pc, #508]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	4a7e      	ldr	r2, [pc, #504]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8e:	4b79      	ldr	r3, [pc, #484]	@ (8002d74 <HAL_RCC_OscConfig+0x4bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d118      	bne.n	8002bcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b9a:	4b76      	ldr	r3, [pc, #472]	@ (8002d74 <HAL_RCC_OscConfig+0x4bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a75      	ldr	r2, [pc, #468]	@ (8002d74 <HAL_RCC_OscConfig+0x4bc>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fec9 	bl	800193c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bae:	f7fe fec5 	bl	800193c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e183      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d74 <HAL_RCC_OscConfig+0x4bc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d108      	bne.n	8002be6 <HAL_RCC_OscConfig+0x32e>
 8002bd4:	4b66      	ldr	r3, [pc, #408]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bda:	4a65      	ldr	r2, [pc, #404]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002be4:	e024      	b.n	8002c30 <HAL_RCC_OscConfig+0x378>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	d110      	bne.n	8002c10 <HAL_RCC_OscConfig+0x358>
 8002bee:	4b60      	ldr	r3, [pc, #384]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002bf6:	f043 0304 	orr.w	r3, r3, #4
 8002bfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c04:	4a5a      	ldr	r2, [pc, #360]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c0e:	e00f      	b.n	8002c30 <HAL_RCC_OscConfig+0x378>
 8002c10:	4b57      	ldr	r3, [pc, #348]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c16:	4a56      	ldr	r2, [pc, #344]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c20:	4b53      	ldr	r3, [pc, #332]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	4a52      	ldr	r2, [pc, #328]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d016      	beq.n	8002c66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe fe80 	bl	800193c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe fe7c 	bl	800193c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e138      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c56:	4b46      	ldr	r3, [pc, #280]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ed      	beq.n	8002c40 <HAL_RCC_OscConfig+0x388>
 8002c64:	e015      	b.n	8002c92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7fe fe69 	bl	800193c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fe65 	bl	800193c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e121      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c84:	4b3a      	ldr	r3, [pc, #232]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1ed      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c92:	7ffb      	ldrb	r3, [r7, #31]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d105      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c98:	4b35      	ldr	r3, [pc, #212]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9c:	4a34      	ldr	r2, [pc, #208]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d03c      	beq.n	8002d2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01c      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fe38 	bl	800193c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd0:	f7fe fe34 	bl	800193c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0f2      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ce2:	4b23      	ldr	r3, [pc, #140]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ef      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x418>
 8002cf0:	e01b      	b.n	8002d2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe fe1b 	bl	800193c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d0a:	f7fe fe17 	bl	800193c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0d5      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d1c:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ef      	bne.n	8002d0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80c9 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d34:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	f000 8083 	beq.w	8002e48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d15e      	bne.n	8002e08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <HAL_RCC_OscConfig+0x4b8>)
 8002d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fdf1 	bl	800193c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe fded 	bl	800193c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d905      	bls.n	8002d78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0ab      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d78:	4b55      	ldr	r3, [pc, #340]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ec      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d84:	4b52      	ldr	r3, [pc, #328]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4b52      	ldr	r3, [pc, #328]	@ (8002ed4 <HAL_RCC_OscConfig+0x61c>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6a11      	ldr	r1, [r2, #32]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d94:	3a01      	subs	r2, #1
 8002d96:	0112      	lsls	r2, r2, #4
 8002d98:	4311      	orrs	r1, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d9e:	0212      	lsls	r2, r2, #8
 8002da0:	4311      	orrs	r1, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002da6:	0852      	lsrs	r2, r2, #1
 8002da8:	3a01      	subs	r2, #1
 8002daa:	0552      	lsls	r2, r2, #21
 8002dac:	4311      	orrs	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002db2:	0852      	lsrs	r2, r2, #1
 8002db4:	3a01      	subs	r2, #1
 8002db6:	0652      	lsls	r2, r2, #25
 8002db8:	4311      	orrs	r1, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dbe:	06d2      	lsls	r2, r2, #27
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	4943      	ldr	r1, [pc, #268]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc8:	4b41      	ldr	r3, [pc, #260]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a40      	ldr	r2, [pc, #256]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fdac 	bl	800193c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fda8 	bl	800193c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e066      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfa:	4b35      	ldr	r3, [pc, #212]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x530>
 8002e06:	e05e      	b.n	8002ec6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b31      	ldr	r3, [pc, #196]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a30      	ldr	r2, [pc, #192]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fd92 	bl	800193c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe fd8e 	bl	800193c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e04c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	4924      	ldr	r1, [pc, #144]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002e40:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <HAL_RCC_OscConfig+0x620>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	60cb      	str	r3, [r1, #12]
 8002e46:	e03e      	b.n	8002ec6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e039      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed0 <HAL_RCC_OscConfig+0x618>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d12c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	3b01      	subs	r3, #1
 8002e74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d123      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d11b      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d113      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d109      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	019f800c 	.word	0x019f800c
 8002ed8:	feeefffc 	.word	0xfeeefffc

08002edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e11e      	b.n	8003132 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b91      	ldr	r3, [pc, #580]	@ (800313c <HAL_RCC_ClockConfig+0x260>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b8e      	ldr	r3, [pc, #568]	@ (800313c <HAL_RCC_ClockConfig+0x260>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 020f 	bic.w	r2, r3, #15
 8002f0a:	498c      	ldr	r1, [pc, #560]	@ (800313c <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b8a      	ldr	r3, [pc, #552]	@ (800313c <HAL_RCC_ClockConfig+0x260>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e106      	b.n	8003132 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d073      	beq.n	8003018 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d129      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f38:	4b81      	ldr	r3, [pc, #516]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0f4      	b.n	8003132 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f48:	f000 f99e 	bl	8003288 <RCC_GetSysClockFreqFromPLLSource>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4a7c      	ldr	r2, [pc, #496]	@ (8003144 <HAL_RCC_ClockConfig+0x268>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d93f      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f56:	4b7a      	ldr	r3, [pc, #488]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d033      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d12f      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f76:	4b72      	ldr	r3, [pc, #456]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f7e:	4a70      	ldr	r2, [pc, #448]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f86:	2380      	movs	r3, #128	@ 0x80
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e024      	b.n	8002fd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f94:	4b6a      	ldr	r3, [pc, #424]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0c6      	b.n	8003132 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa4:	4b66      	ldr	r3, [pc, #408]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0be      	b.n	8003132 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002fb4:	f000 f8ce 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4a61      	ldr	r2, [pc, #388]	@ (8003144 <HAL_RCC_ClockConfig+0x268>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d909      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fca:	4a5d      	ldr	r2, [pc, #372]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4957      	ldr	r1, [pc, #348]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fca8 	bl	800193c <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe fca4 	bl	800193c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e095      	b.n	8003132 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b4e      	ldr	r3, [pc, #312]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003030:	4b43      	ldr	r3, [pc, #268]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a42      	ldr	r2, [pc, #264]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8003036:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800303a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003048:	4b3d      	ldr	r3, [pc, #244]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003050:	4a3b      	ldr	r2, [pc, #236]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8003052:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003056:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4936      	ldr	r1, [pc, #216]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
 800306a:	e008      	b.n	800307e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b80      	cmp	r3, #128	@ 0x80
 8003070:	d105      	bne.n	800307e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003072:	4b33      	ldr	r3, [pc, #204]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4a32      	ldr	r2, [pc, #200]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8003078:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800307c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307e:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <HAL_RCC_ClockConfig+0x260>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d21d      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308c:	4b2b      	ldr	r3, [pc, #172]	@ (800313c <HAL_RCC_ClockConfig+0x260>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 020f 	bic.w	r2, r3, #15
 8003094:	4929      	ldr	r1, [pc, #164]	@ (800313c <HAL_RCC_ClockConfig+0x260>)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800309c:	f7fe fc4e 	bl	800193c <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a4:	f7fe fc4a 	bl	800193c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e03b      	b.n	8003132 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	@ (800313c <HAL_RCC_ClockConfig+0x260>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1ed      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4917      	ldr	r1, [pc, #92]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f2:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490f      	ldr	r1, [pc, #60]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003106:	f000 f825 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <HAL_RCC_ClockConfig+0x264>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490c      	ldr	r1, [pc, #48]	@ (8003148 <HAL_RCC_ClockConfig+0x26c>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <HAL_RCC_ClockConfig+0x270>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003126:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <HAL_RCC_ClockConfig+0x274>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fbba 	bl	80018a4 <HAL_InitTick>
 8003130:	4603      	mov	r3, r0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40022000 	.word	0x40022000
 8003140:	40021000 	.word	0x40021000
 8003144:	04c4b400 	.word	0x04c4b400
 8003148:	08008a58 	.word	0x08008a58
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800315a:	4b2c      	ldr	r3, [pc, #176]	@ (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d102      	bne.n	800316c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003166:	4b2a      	ldr	r3, [pc, #168]	@ (8003210 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e047      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800316c:	4b27      	ldr	r3, [pc, #156]	@ (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b08      	cmp	r3, #8
 8003176:	d102      	bne.n	800317e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003178:	4b26      	ldr	r3, [pc, #152]	@ (8003214 <HAL_RCC_GetSysClockFreq+0xc0>)
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e03e      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800317e:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d136      	bne.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003194:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	3301      	adds	r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003214 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	4a16      	ldr	r2, [pc, #88]	@ (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031b2:	68d2      	ldr	r2, [r2, #12]
 80031b4:	0a12      	lsrs	r2, r2, #8
 80031b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	617b      	str	r3, [r7, #20]
      break;
 80031c0:	e00c      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031c2:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4a10      	ldr	r2, [pc, #64]	@ (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031cc:	68d2      	ldr	r2, [r2, #12]
 80031ce:	0a12      	lsrs	r2, r2, #8
 80031d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
      break;
 80031da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0e5b      	lsrs	r3, r3, #25
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	3301      	adds	r3, #1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e001      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031fc:	693b      	ldr	r3, [r7, #16]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	00f42400 	.word	0x00f42400
 8003214:	007a1200 	.word	0x007a1200

08003218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800321c:	4b03      	ldr	r3, [pc, #12]	@ (800322c <HAL_RCC_GetHCLKFreq+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000000 	.word	0x20000000

08003230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003234:	f7ff fff0 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4904      	ldr	r1, [pc, #16]	@ (8003258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	08008a68 	.word	0x08008a68

0800325c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003260:	f7ff ffda 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	0adb      	lsrs	r3, r3, #11
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4904      	ldr	r1, [pc, #16]	@ (8003284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	08008a68 	.word	0x08008a68

08003288 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800328e:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d10c      	bne.n	80032c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032ac:	4a17      	ldr	r2, [pc, #92]	@ (800330c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032b6:	68d2      	ldr	r2, [r2, #12]
 80032b8:	0a12      	lsrs	r2, r2, #8
 80032ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
    break;
 80032c4:	e00c      	b.n	80032e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032c6:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	0a12      	lsrs	r2, r2, #8
 80032d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
    break;
 80032de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0e5b      	lsrs	r3, r3, #25
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	3301      	adds	r3, #1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032fa:	687b      	ldr	r3, [r7, #4]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40021000 	.word	0x40021000
 800330c:	007a1200 	.word	0x007a1200
 8003310:	00f42400 	.word	0x00f42400

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800331c:	2300      	movs	r3, #0
 800331e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003320:	2300      	movs	r3, #0
 8003322:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8098 	beq.w	8003462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003336:	4b43      	ldr	r3, [pc, #268]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10d      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	4b40      	ldr	r3, [pc, #256]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	4a3f      	ldr	r2, [pc, #252]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	@ 0x58
 800334e:	4b3d      	ldr	r3, [pc, #244]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800335e:	4b3a      	ldr	r3, [pc, #232]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a39      	ldr	r2, [pc, #228]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003368:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800336a:	f7fe fae7 	bl	800193c <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003370:	e009      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003372:	f7fe fae3 	bl	800193c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d902      	bls.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	74fb      	strb	r3, [r7, #19]
        break;
 8003384:	e005      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003386:	4b30      	ldr	r3, [pc, #192]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ef      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d159      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003398:	4b2a      	ldr	r3, [pc, #168]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01e      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d019      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033b4:	4b23      	ldr	r3, [pc, #140]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033c0:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033e0:	4a18      	ldr	r2, [pc, #96]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe faa3 	bl	800193c <HAL_GetTick>
 80033f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f8:	e00b      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fe fa9f 	bl	800193c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d902      	bls.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	74fb      	strb	r3, [r7, #19]
            break;
 8003410:	e006      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ec      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003426:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	4903      	ldr	r1, [pc, #12]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800343c:	e008      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	74bb      	strb	r3, [r7, #18]
 8003442:	e005      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003450:	7c7b      	ldrb	r3, [r7, #17]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4ba6      	ldr	r3, [pc, #664]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	4aa5      	ldr	r2, [pc, #660]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003460:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800346e:	4ba0      	ldr	r3, [pc, #640]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003474:	f023 0203 	bic.w	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	499c      	ldr	r1, [pc, #624]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003490:	4b97      	ldr	r3, [pc, #604]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	f023 020c 	bic.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4994      	ldr	r1, [pc, #592]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034b2:	4b8f      	ldr	r3, [pc, #572]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	498b      	ldr	r1, [pc, #556]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034d4:	4b86      	ldr	r3, [pc, #536]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	4983      	ldr	r1, [pc, #524]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f6:	4b7e      	ldr	r3, [pc, #504]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	497a      	ldr	r1, [pc, #488]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003518:	4b75      	ldr	r3, [pc, #468]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	4972      	ldr	r1, [pc, #456]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800353a:	4b6d      	ldr	r3, [pc, #436]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003540:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4969      	ldr	r1, [pc, #420]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800355c:	4b64      	ldr	r3, [pc, #400]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003562:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4961      	ldr	r1, [pc, #388]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357e:	4b5c      	ldr	r3, [pc, #368]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003584:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	4958      	ldr	r1, [pc, #352]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035a0:	4b53      	ldr	r3, [pc, #332]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	4950      	ldr	r1, [pc, #320]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035be:	d105      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b4b      	ldr	r3, [pc, #300]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a4a      	ldr	r2, [pc, #296]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035d8:	4b45      	ldr	r3, [pc, #276]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e6:	4942      	ldr	r1, [pc, #264]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f6:	d105      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f8:	4b3d      	ldr	r3, [pc, #244]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a3c      	ldr	r2, [pc, #240]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003602:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003610:	4b37      	ldr	r3, [pc, #220]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	4934      	ldr	r1, [pc, #208]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800362e:	d105      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003630:	4b2f      	ldr	r3, [pc, #188]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a2e      	ldr	r2, [pc, #184]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800363a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003648:	4b29      	ldr	r3, [pc, #164]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003656:	4926      	ldr	r1, [pc, #152]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003666:	d105      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003668:	4b21      	ldr	r3, [pc, #132]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a20      	ldr	r2, [pc, #128]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003672:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368e:	4918      	ldr	r1, [pc, #96]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800369e:	d105      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a0:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a12      	ldr	r2, [pc, #72]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036b8:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	490a      	ldr	r1, [pc, #40]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036d6:	d105      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036d8:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a04      	ldr	r2, [pc, #16]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000

080036f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e042      	b.n	800378c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fe f829 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2224      	movs	r2, #36	@ 0x24
 8003722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 faf4 	bl	8003d2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f825 	bl	8003794 <UART_SetConfig>
 800374a:	4603      	mov	r3, r0
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e01b      	b.n	800378c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fb73 	bl	8003e70 <UART_CheckIdleState>
 800378a:	4603      	mov	r3, r0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b08c      	sub	sp, #48	@ 0x30
 800379a:	af00      	add	r7, sp, #0
 800379c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4bab      	ldr	r3, [pc, #684]	@ (8003a70 <UART_SetConfig+0x2dc>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4aa0      	ldr	r2, [pc, #640]	@ (8003a74 <UART_SetConfig+0x2e0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037fc:	4313      	orrs	r3, r2
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800380a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003814:	430b      	orrs	r3, r1
 8003816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	f023 010f 	bic.w	r1, r3, #15
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a91      	ldr	r2, [pc, #580]	@ (8003a78 <UART_SetConfig+0x2e4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d125      	bne.n	8003884 <UART_SetConfig+0xf0>
 8003838:	4b90      	ldr	r3, [pc, #576]	@ (8003a7c <UART_SetConfig+0x2e8>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b03      	cmp	r3, #3
 8003844:	d81a      	bhi.n	800387c <UART_SetConfig+0xe8>
 8003846:	a201      	add	r2, pc, #4	@ (adr r2, 800384c <UART_SetConfig+0xb8>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	0800385d 	.word	0x0800385d
 8003850:	0800386d 	.word	0x0800386d
 8003854:	08003865 	.word	0x08003865
 8003858:	08003875 	.word	0x08003875
 800385c:	2301      	movs	r3, #1
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003862:	e0d6      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003864:	2302      	movs	r3, #2
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386a:	e0d2      	b.n	8003a12 <UART_SetConfig+0x27e>
 800386c:	2304      	movs	r3, #4
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003872:	e0ce      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003874:	2308      	movs	r3, #8
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e0ca      	b.n	8003a12 <UART_SetConfig+0x27e>
 800387c:	2310      	movs	r3, #16
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e0c6      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7d      	ldr	r2, [pc, #500]	@ (8003a80 <UART_SetConfig+0x2ec>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d138      	bne.n	8003900 <UART_SetConfig+0x16c>
 800388e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a7c <UART_SetConfig+0x2e8>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d82d      	bhi.n	80038f8 <UART_SetConfig+0x164>
 800389c:	a201      	add	r2, pc, #4	@ (adr r2, 80038a4 <UART_SetConfig+0x110>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038d9 	.word	0x080038d9
 80038a8:	080038f9 	.word	0x080038f9
 80038ac:	080038f9 	.word	0x080038f9
 80038b0:	080038f9 	.word	0x080038f9
 80038b4:	080038e9 	.word	0x080038e9
 80038b8:	080038f9 	.word	0x080038f9
 80038bc:	080038f9 	.word	0x080038f9
 80038c0:	080038f9 	.word	0x080038f9
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	080038f9 	.word	0x080038f9
 80038cc:	080038f9 	.word	0x080038f9
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	080038f1 	.word	0x080038f1
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038de:	e098      	b.n	8003a12 <UART_SetConfig+0x27e>
 80038e0:	2302      	movs	r3, #2
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e6:	e094      	b.n	8003a12 <UART_SetConfig+0x27e>
 80038e8:	2304      	movs	r3, #4
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ee:	e090      	b.n	8003a12 <UART_SetConfig+0x27e>
 80038f0:	2308      	movs	r3, #8
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f6:	e08c      	b.n	8003a12 <UART_SetConfig+0x27e>
 80038f8:	2310      	movs	r3, #16
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038fe:	e088      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5f      	ldr	r2, [pc, #380]	@ (8003a84 <UART_SetConfig+0x2f0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d125      	bne.n	8003956 <UART_SetConfig+0x1c2>
 800390a:	4b5c      	ldr	r3, [pc, #368]	@ (8003a7c <UART_SetConfig+0x2e8>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003910:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003914:	2b30      	cmp	r3, #48	@ 0x30
 8003916:	d016      	beq.n	8003946 <UART_SetConfig+0x1b2>
 8003918:	2b30      	cmp	r3, #48	@ 0x30
 800391a:	d818      	bhi.n	800394e <UART_SetConfig+0x1ba>
 800391c:	2b20      	cmp	r3, #32
 800391e:	d00a      	beq.n	8003936 <UART_SetConfig+0x1a2>
 8003920:	2b20      	cmp	r3, #32
 8003922:	d814      	bhi.n	800394e <UART_SetConfig+0x1ba>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <UART_SetConfig+0x19a>
 8003928:	2b10      	cmp	r3, #16
 800392a:	d008      	beq.n	800393e <UART_SetConfig+0x1aa>
 800392c:	e00f      	b.n	800394e <UART_SetConfig+0x1ba>
 800392e:	2300      	movs	r3, #0
 8003930:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003934:	e06d      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003936:	2302      	movs	r3, #2
 8003938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393c:	e069      	b.n	8003a12 <UART_SetConfig+0x27e>
 800393e:	2304      	movs	r3, #4
 8003940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003944:	e065      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003946:	2308      	movs	r3, #8
 8003948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394c:	e061      	b.n	8003a12 <UART_SetConfig+0x27e>
 800394e:	2310      	movs	r3, #16
 8003950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003954:	e05d      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4b      	ldr	r2, [pc, #300]	@ (8003a88 <UART_SetConfig+0x2f4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d125      	bne.n	80039ac <UART_SetConfig+0x218>
 8003960:	4b46      	ldr	r3, [pc, #280]	@ (8003a7c <UART_SetConfig+0x2e8>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800396a:	2bc0      	cmp	r3, #192	@ 0xc0
 800396c:	d016      	beq.n	800399c <UART_SetConfig+0x208>
 800396e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003970:	d818      	bhi.n	80039a4 <UART_SetConfig+0x210>
 8003972:	2b80      	cmp	r3, #128	@ 0x80
 8003974:	d00a      	beq.n	800398c <UART_SetConfig+0x1f8>
 8003976:	2b80      	cmp	r3, #128	@ 0x80
 8003978:	d814      	bhi.n	80039a4 <UART_SetConfig+0x210>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <UART_SetConfig+0x1f0>
 800397e:	2b40      	cmp	r3, #64	@ 0x40
 8003980:	d008      	beq.n	8003994 <UART_SetConfig+0x200>
 8003982:	e00f      	b.n	80039a4 <UART_SetConfig+0x210>
 8003984:	2300      	movs	r3, #0
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398a:	e042      	b.n	8003a12 <UART_SetConfig+0x27e>
 800398c:	2302      	movs	r3, #2
 800398e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003992:	e03e      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003994:	2304      	movs	r3, #4
 8003996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800399a:	e03a      	b.n	8003a12 <UART_SetConfig+0x27e>
 800399c:	2308      	movs	r3, #8
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039a2:	e036      	b.n	8003a12 <UART_SetConfig+0x27e>
 80039a4:	2310      	movs	r3, #16
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039aa:	e032      	b.n	8003a12 <UART_SetConfig+0x27e>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a30      	ldr	r2, [pc, #192]	@ (8003a74 <UART_SetConfig+0x2e0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d12a      	bne.n	8003a0c <UART_SetConfig+0x278>
 80039b6:	4b31      	ldr	r3, [pc, #196]	@ (8003a7c <UART_SetConfig+0x2e8>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039c4:	d01a      	beq.n	80039fc <UART_SetConfig+0x268>
 80039c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ca:	d81b      	bhi.n	8003a04 <UART_SetConfig+0x270>
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d0:	d00c      	beq.n	80039ec <UART_SetConfig+0x258>
 80039d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d6:	d815      	bhi.n	8003a04 <UART_SetConfig+0x270>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <UART_SetConfig+0x250>
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e0:	d008      	beq.n	80039f4 <UART_SetConfig+0x260>
 80039e2:	e00f      	b.n	8003a04 <UART_SetConfig+0x270>
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ea:	e012      	b.n	8003a12 <UART_SetConfig+0x27e>
 80039ec:	2302      	movs	r3, #2
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f2:	e00e      	b.n	8003a12 <UART_SetConfig+0x27e>
 80039f4:	2304      	movs	r3, #4
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039fa:	e00a      	b.n	8003a12 <UART_SetConfig+0x27e>
 80039fc:	2308      	movs	r3, #8
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a02:	e006      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003a04:	2310      	movs	r3, #16
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a0a:	e002      	b.n	8003a12 <UART_SetConfig+0x27e>
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a17      	ldr	r2, [pc, #92]	@ (8003a74 <UART_SetConfig+0x2e0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	f040 80a8 	bne.w	8003b6e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d834      	bhi.n	8003a90 <UART_SetConfig+0x2fc>
 8003a26:	a201      	add	r2, pc, #4	@ (adr r2, 8003a2c <UART_SetConfig+0x298>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003a91 	.word	0x08003a91
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a91 	.word	0x08003a91
 8003a3c:	08003a5f 	.word	0x08003a5f
 8003a40:	08003a91 	.word	0x08003a91
 8003a44:	08003a91 	.word	0x08003a91
 8003a48:	08003a91 	.word	0x08003a91
 8003a4c:	08003a67 	.word	0x08003a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a50:	f7ff fbee 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8003a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a56:	e021      	b.n	8003a9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a58:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <UART_SetConfig+0x2f8>)
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a5c:	e01e      	b.n	8003a9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5e:	f7ff fb79 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003a62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a64:	e01a      	b.n	8003a9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a6c:	e016      	b.n	8003a9c <UART_SetConfig+0x308>
 8003a6e:	bf00      	nop
 8003a70:	cfff69f3 	.word	0xcfff69f3
 8003a74:	40008000 	.word	0x40008000
 8003a78:	40013800 	.word	0x40013800
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40004400 	.word	0x40004400
 8003a84:	40004800 	.word	0x40004800
 8003a88:	40004c00 	.word	0x40004c00
 8003a8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 812a 	beq.w	8003cf8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	4a9e      	ldr	r2, [pc, #632]	@ (8003d24 <UART_SetConfig+0x590>)
 8003aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d305      	bcc.n	8003ad4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d903      	bls.n	8003adc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ada:	e10d      	b.n	8003cf8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	60fa      	str	r2, [r7, #12]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	4a8e      	ldr	r2, [pc, #568]	@ (8003d24 <UART_SetConfig+0x590>)
 8003aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003afa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003afe:	f7fd f8eb 	bl	8000cd8 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	020b      	lsls	r3, r1, #8
 8003b14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b18:	0202      	lsls	r2, r0, #8
 8003b1a:	6979      	ldr	r1, [r7, #20]
 8003b1c:	6849      	ldr	r1, [r1, #4]
 8003b1e:	0849      	lsrs	r1, r1, #1
 8003b20:	2000      	movs	r0, #0
 8003b22:	460c      	mov	r4, r1
 8003b24:	4605      	mov	r5, r0
 8003b26:	eb12 0804 	adds.w	r8, r2, r4
 8003b2a:	eb43 0905 	adc.w	r9, r3, r5
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	469a      	mov	sl, r3
 8003b36:	4693      	mov	fp, r2
 8003b38:	4652      	mov	r2, sl
 8003b3a:	465b      	mov	r3, fp
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	4649      	mov	r1, r9
 8003b40:	f7fd f8ca 	bl	8000cd8 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b52:	d308      	bcc.n	8003b66 <UART_SetConfig+0x3d2>
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b5a:	d204      	bcs.n	8003b66 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	60da      	str	r2, [r3, #12]
 8003b64:	e0c8      	b.n	8003cf8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b6c:	e0c4      	b.n	8003cf8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b76:	d167      	bne.n	8003c48 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003b78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d828      	bhi.n	8003bd2 <UART_SetConfig+0x43e>
 8003b80:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <UART_SetConfig+0x3f4>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bb5 	.word	0x08003bb5
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	08003bd3 	.word	0x08003bd3
 8003b98:	08003bc3 	.word	0x08003bc3
 8003b9c:	08003bd3 	.word	0x08003bd3
 8003ba0:	08003bd3 	.word	0x08003bd3
 8003ba4:	08003bd3 	.word	0x08003bd3
 8003ba8:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7ff fb40 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bb2:	e014      	b.n	8003bde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb4:	f7ff fb52 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 8003bb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bba:	e010      	b.n	8003bde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8003d28 <UART_SetConfig+0x594>)
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bc0:	e00d      	b.n	8003bde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7ff fac7 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003bc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc8:	e009      	b.n	8003bde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bd0:	e005      	b.n	8003bde <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8089 	beq.w	8003cf8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	4a4e      	ldr	r2, [pc, #312]	@ (8003d24 <UART_SetConfig+0x590>)
 8003bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bf8:	005a      	lsls	r2, r3, #1
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	441a      	add	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	2b0f      	cmp	r3, #15
 8003c10:	d916      	bls.n	8003c40 <UART_SetConfig+0x4ac>
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d212      	bcs.n	8003c40 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f023 030f 	bic.w	r3, r3, #15
 8003c22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	8bfb      	ldrh	r3, [r7, #30]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	8bfa      	ldrh	r2, [r7, #30]
 8003c3c:	60da      	str	r2, [r3, #12]
 8003c3e:	e05b      	b.n	8003cf8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c46:	e057      	b.n	8003cf8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d828      	bhi.n	8003ca2 <UART_SetConfig+0x50e>
 8003c50:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <UART_SetConfig+0x4c4>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003ca3 	.word	0x08003ca3
 8003c68:	08003c93 	.word	0x08003c93
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003ca3 	.word	0x08003ca3
 8003c74:	08003ca3 	.word	0x08003ca3
 8003c78:	08003c9b 	.word	0x08003c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7ff fad8 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8003c80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c82:	e014      	b.n	8003cae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7ff faea 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 8003c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c8a:	e010      	b.n	8003cae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8c:	4b26      	ldr	r3, [pc, #152]	@ (8003d28 <UART_SetConfig+0x594>)
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c90:	e00d      	b.n	8003cae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c92:	f7ff fa5f 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003c96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c98:	e009      	b.n	8003cae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ca0:	e005      	b.n	8003cae <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003cac:	bf00      	nop
    }

    if (pclk != 0U)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d021      	beq.n	8003cf8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d24 <UART_SetConfig+0x590>)
 8003cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	441a      	add	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	d909      	bls.n	8003cf2 <UART_SetConfig+0x55e>
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce4:	d205      	bcs.n	8003cf2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	e002      	b.n	8003cf8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003d14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3730      	adds	r7, #48	@ 0x30
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d22:	bf00      	nop
 8003d24:	08008a80 	.word	0x08008a80
 8003d28:	00f42400 	.word	0x00f42400

08003d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01a      	beq.n	8003e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e2a:	d10a      	bne.n	8003e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]
  }
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b098      	sub	sp, #96	@ 0x60
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e80:	f7fd fd5c 	bl	800193c <HAL_GetTick>
 8003e84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d12f      	bne.n	8003ef4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f88e 	bl	8003fc4 <UART_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d022      	beq.n	8003ef4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ece:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e6      	bne.n	8003eae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e063      	b.n	8003fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d149      	bne.n	8003f96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f857 	bl	8003fc4 <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d03c      	beq.n	8003f96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	623b      	str	r3, [r7, #32]
   return(result);
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e6      	bne.n	8003f1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f6e:	61fa      	str	r2, [r7, #28]
 8003f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	69b9      	ldr	r1, [r7, #24]
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e012      	b.n	8003fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3758      	adds	r7, #88	@ 0x58
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd4:	e04f      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d04b      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fd fcad 	bl	800193c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e04e      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d037      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b80      	cmp	r3, #128	@ 0x80
 800400a:	d034      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b40      	cmp	r3, #64	@ 0x40
 8004010:	d031      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b08      	cmp	r3, #8
 800401e:	d110      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f838 	bl	800409e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2208      	movs	r2, #8
 8004032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e029      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004050:	d111      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800405a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f81e 	bl	800409e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	429a      	cmp	r2, r3
 8004092:	d0a0      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800409e:	b480      	push	{r7}
 80040a0:	b095      	sub	sp, #84	@ 0x54
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3308      	adds	r3, #8
 80040fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e3      	bne.n	80040d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d118      	bne.n	800414a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	60bb      	str	r3, [r7, #8]
   return(result);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f023 0310 	bic.w	r3, r3, #16
 800412c:	647b      	str	r3, [r7, #68]	@ 0x44
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6979      	ldr	r1, [r7, #20]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	613b      	str	r3, [r7, #16]
   return(result);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e6      	bne.n	8004118 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800415e:	bf00      	nop
 8004160:	3754      	adds	r7, #84	@ 0x54
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_UARTEx_DisableFifoMode+0x16>
 800417c:	2302      	movs	r3, #2
 800417e:	e027      	b.n	80041d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	@ 0x24
 800418c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0201 	bic.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80041ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e02d      	b.n	8004250 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	@ 0x24
 8004200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f84f 	bl	80042d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800426c:	2302      	movs	r3, #2
 800426e:	e02d      	b.n	80042cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	@ 0x24
 800427c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f811 	bl	80042d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d108      	bne.n	80042f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042f4:	e031      	b.n	800435a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042f6:	2308      	movs	r3, #8
 80042f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042fa:	2308      	movs	r3, #8
 80042fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	0e5b      	lsrs	r3, r3, #25
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	0f5b      	lsrs	r3, r3, #29
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800431e:	7bbb      	ldrb	r3, [r7, #14]
 8004320:	7b3a      	ldrb	r2, [r7, #12]
 8004322:	4911      	ldr	r1, [pc, #68]	@ (8004368 <UARTEx_SetNbDataToProcess+0x94>)
 8004324:	5c8a      	ldrb	r2, [r1, r2]
 8004326:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800432a:	7b3a      	ldrb	r2, [r7, #12]
 800432c:	490f      	ldr	r1, [pc, #60]	@ (800436c <UARTEx_SetNbDataToProcess+0x98>)
 800432e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004330:	fb93 f3f2 	sdiv	r3, r3, r2
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	7b7a      	ldrb	r2, [r7, #13]
 8004340:	4909      	ldr	r1, [pc, #36]	@ (8004368 <UARTEx_SetNbDataToProcess+0x94>)
 8004342:	5c8a      	ldrb	r2, [r1, r2]
 8004344:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004348:	7b7a      	ldrb	r2, [r7, #13]
 800434a:	4908      	ldr	r1, [pc, #32]	@ (800436c <UARTEx_SetNbDataToProcess+0x98>)
 800434c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800434e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	08008a98 	.word	0x08008a98
 800436c:	08008aa0 	.word	0x08008aa0

08004370 <__cvt>:
 8004370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	ec57 6b10 	vmov	r6, r7, d0
 8004378:	2f00      	cmp	r7, #0
 800437a:	460c      	mov	r4, r1
 800437c:	4619      	mov	r1, r3
 800437e:	463b      	mov	r3, r7
 8004380:	bfbb      	ittet	lt
 8004382:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004386:	461f      	movlt	r7, r3
 8004388:	2300      	movge	r3, #0
 800438a:	232d      	movlt	r3, #45	@ 0x2d
 800438c:	700b      	strb	r3, [r1, #0]
 800438e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004390:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004394:	4691      	mov	r9, r2
 8004396:	f023 0820 	bic.w	r8, r3, #32
 800439a:	bfbc      	itt	lt
 800439c:	4632      	movlt	r2, r6
 800439e:	4616      	movlt	r6, r2
 80043a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043a4:	d005      	beq.n	80043b2 <__cvt+0x42>
 80043a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80043aa:	d100      	bne.n	80043ae <__cvt+0x3e>
 80043ac:	3401      	adds	r4, #1
 80043ae:	2102      	movs	r1, #2
 80043b0:	e000      	b.n	80043b4 <__cvt+0x44>
 80043b2:	2103      	movs	r1, #3
 80043b4:	ab03      	add	r3, sp, #12
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	ab02      	add	r3, sp, #8
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	ec47 6b10 	vmov	d0, r6, r7
 80043c0:	4653      	mov	r3, sl
 80043c2:	4622      	mov	r2, r4
 80043c4:	f001 f874 	bl	80054b0 <_dtoa_r>
 80043c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80043cc:	4605      	mov	r5, r0
 80043ce:	d119      	bne.n	8004404 <__cvt+0x94>
 80043d0:	f019 0f01 	tst.w	r9, #1
 80043d4:	d00e      	beq.n	80043f4 <__cvt+0x84>
 80043d6:	eb00 0904 	add.w	r9, r0, r4
 80043da:	2200      	movs	r2, #0
 80043dc:	2300      	movs	r3, #0
 80043de:	4630      	mov	r0, r6
 80043e0:	4639      	mov	r1, r7
 80043e2:	f7fc fb99 	bl	8000b18 <__aeabi_dcmpeq>
 80043e6:	b108      	cbz	r0, 80043ec <__cvt+0x7c>
 80043e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80043ec:	2230      	movs	r2, #48	@ 0x30
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	454b      	cmp	r3, r9
 80043f2:	d31e      	bcc.n	8004432 <__cvt+0xc2>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043f8:	1b5b      	subs	r3, r3, r5
 80043fa:	4628      	mov	r0, r5
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	b004      	add	sp, #16
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004404:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004408:	eb00 0904 	add.w	r9, r0, r4
 800440c:	d1e5      	bne.n	80043da <__cvt+0x6a>
 800440e:	7803      	ldrb	r3, [r0, #0]
 8004410:	2b30      	cmp	r3, #48	@ 0x30
 8004412:	d10a      	bne.n	800442a <__cvt+0xba>
 8004414:	2200      	movs	r2, #0
 8004416:	2300      	movs	r3, #0
 8004418:	4630      	mov	r0, r6
 800441a:	4639      	mov	r1, r7
 800441c:	f7fc fb7c 	bl	8000b18 <__aeabi_dcmpeq>
 8004420:	b918      	cbnz	r0, 800442a <__cvt+0xba>
 8004422:	f1c4 0401 	rsb	r4, r4, #1
 8004426:	f8ca 4000 	str.w	r4, [sl]
 800442a:	f8da 3000 	ldr.w	r3, [sl]
 800442e:	4499      	add	r9, r3
 8004430:	e7d3      	b.n	80043da <__cvt+0x6a>
 8004432:	1c59      	adds	r1, r3, #1
 8004434:	9103      	str	r1, [sp, #12]
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e7d9      	b.n	80043ee <__cvt+0x7e>

0800443a <__exponent>:
 800443a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800443c:	2900      	cmp	r1, #0
 800443e:	bfba      	itte	lt
 8004440:	4249      	neglt	r1, r1
 8004442:	232d      	movlt	r3, #45	@ 0x2d
 8004444:	232b      	movge	r3, #43	@ 0x2b
 8004446:	2909      	cmp	r1, #9
 8004448:	7002      	strb	r2, [r0, #0]
 800444a:	7043      	strb	r3, [r0, #1]
 800444c:	dd29      	ble.n	80044a2 <__exponent+0x68>
 800444e:	f10d 0307 	add.w	r3, sp, #7
 8004452:	461d      	mov	r5, r3
 8004454:	270a      	movs	r7, #10
 8004456:	461a      	mov	r2, r3
 8004458:	fbb1 f6f7 	udiv	r6, r1, r7
 800445c:	fb07 1416 	mls	r4, r7, r6, r1
 8004460:	3430      	adds	r4, #48	@ 0x30
 8004462:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004466:	460c      	mov	r4, r1
 8004468:	2c63      	cmp	r4, #99	@ 0x63
 800446a:	f103 33ff 	add.w	r3, r3, #4294967295
 800446e:	4631      	mov	r1, r6
 8004470:	dcf1      	bgt.n	8004456 <__exponent+0x1c>
 8004472:	3130      	adds	r1, #48	@ 0x30
 8004474:	1e94      	subs	r4, r2, #2
 8004476:	f803 1c01 	strb.w	r1, [r3, #-1]
 800447a:	1c41      	adds	r1, r0, #1
 800447c:	4623      	mov	r3, r4
 800447e:	42ab      	cmp	r3, r5
 8004480:	d30a      	bcc.n	8004498 <__exponent+0x5e>
 8004482:	f10d 0309 	add.w	r3, sp, #9
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	42ac      	cmp	r4, r5
 800448a:	bf88      	it	hi
 800448c:	2300      	movhi	r3, #0
 800448e:	3302      	adds	r3, #2
 8004490:	4403      	add	r3, r0
 8004492:	1a18      	subs	r0, r3, r0
 8004494:	b003      	add	sp, #12
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004498:	f813 6b01 	ldrb.w	r6, [r3], #1
 800449c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80044a0:	e7ed      	b.n	800447e <__exponent+0x44>
 80044a2:	2330      	movs	r3, #48	@ 0x30
 80044a4:	3130      	adds	r1, #48	@ 0x30
 80044a6:	7083      	strb	r3, [r0, #2]
 80044a8:	70c1      	strb	r1, [r0, #3]
 80044aa:	1d03      	adds	r3, r0, #4
 80044ac:	e7f1      	b.n	8004492 <__exponent+0x58>
	...

080044b0 <_printf_float>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	b08d      	sub	sp, #52	@ 0x34
 80044b6:	460c      	mov	r4, r1
 80044b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80044bc:	4616      	mov	r6, r2
 80044be:	461f      	mov	r7, r3
 80044c0:	4605      	mov	r5, r0
 80044c2:	f000 feef 	bl	80052a4 <_localeconv_r>
 80044c6:	6803      	ldr	r3, [r0, #0]
 80044c8:	9304      	str	r3, [sp, #16]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fb fef8 	bl	80002c0 <strlen>
 80044d0:	2300      	movs	r3, #0
 80044d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80044d4:	f8d8 3000 	ldr.w	r3, [r8]
 80044d8:	9005      	str	r0, [sp, #20]
 80044da:	3307      	adds	r3, #7
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	f103 0208 	add.w	r2, r3, #8
 80044e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80044e8:	f8d4 b000 	ldr.w	fp, [r4]
 80044ec:	f8c8 2000 	str.w	r2, [r8]
 80044f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80044f8:	9307      	str	r3, [sp, #28]
 80044fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80044fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004506:	4b9c      	ldr	r3, [pc, #624]	@ (8004778 <_printf_float+0x2c8>)
 8004508:	f04f 32ff 	mov.w	r2, #4294967295
 800450c:	f7fc fb36 	bl	8000b7c <__aeabi_dcmpun>
 8004510:	bb70      	cbnz	r0, 8004570 <_printf_float+0xc0>
 8004512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004516:	4b98      	ldr	r3, [pc, #608]	@ (8004778 <_printf_float+0x2c8>)
 8004518:	f04f 32ff 	mov.w	r2, #4294967295
 800451c:	f7fc fb10 	bl	8000b40 <__aeabi_dcmple>
 8004520:	bb30      	cbnz	r0, 8004570 <_printf_float+0xc0>
 8004522:	2200      	movs	r2, #0
 8004524:	2300      	movs	r3, #0
 8004526:	4640      	mov	r0, r8
 8004528:	4649      	mov	r1, r9
 800452a:	f7fc faff 	bl	8000b2c <__aeabi_dcmplt>
 800452e:	b110      	cbz	r0, 8004536 <_printf_float+0x86>
 8004530:	232d      	movs	r3, #45	@ 0x2d
 8004532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004536:	4a91      	ldr	r2, [pc, #580]	@ (800477c <_printf_float+0x2cc>)
 8004538:	4b91      	ldr	r3, [pc, #580]	@ (8004780 <_printf_float+0x2d0>)
 800453a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800453e:	bf94      	ite	ls
 8004540:	4690      	movls	r8, r2
 8004542:	4698      	movhi	r8, r3
 8004544:	2303      	movs	r3, #3
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	f02b 0304 	bic.w	r3, fp, #4
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	f04f 0900 	mov.w	r9, #0
 8004552:	9700      	str	r7, [sp, #0]
 8004554:	4633      	mov	r3, r6
 8004556:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004558:	4621      	mov	r1, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f9d2 	bl	8004904 <_printf_common>
 8004560:	3001      	adds	r0, #1
 8004562:	f040 808d 	bne.w	8004680 <_printf_float+0x1d0>
 8004566:	f04f 30ff 	mov.w	r0, #4294967295
 800456a:	b00d      	add	sp, #52	@ 0x34
 800456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	4640      	mov	r0, r8
 8004576:	4649      	mov	r1, r9
 8004578:	f7fc fb00 	bl	8000b7c <__aeabi_dcmpun>
 800457c:	b140      	cbz	r0, 8004590 <_printf_float+0xe0>
 800457e:	464b      	mov	r3, r9
 8004580:	2b00      	cmp	r3, #0
 8004582:	bfbc      	itt	lt
 8004584:	232d      	movlt	r3, #45	@ 0x2d
 8004586:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800458a:	4a7e      	ldr	r2, [pc, #504]	@ (8004784 <_printf_float+0x2d4>)
 800458c:	4b7e      	ldr	r3, [pc, #504]	@ (8004788 <_printf_float+0x2d8>)
 800458e:	e7d4      	b.n	800453a <_printf_float+0x8a>
 8004590:	6863      	ldr	r3, [r4, #4]
 8004592:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004596:	9206      	str	r2, [sp, #24]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	d13b      	bne.n	8004614 <_printf_float+0x164>
 800459c:	2306      	movs	r3, #6
 800459e:	6063      	str	r3, [r4, #4]
 80045a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80045a4:	2300      	movs	r3, #0
 80045a6:	6022      	str	r2, [r4, #0]
 80045a8:	9303      	str	r3, [sp, #12]
 80045aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80045ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80045b0:	ab09      	add	r3, sp, #36	@ 0x24
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	6861      	ldr	r1, [r4, #4]
 80045b6:	ec49 8b10 	vmov	d0, r8, r9
 80045ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80045be:	4628      	mov	r0, r5
 80045c0:	f7ff fed6 	bl	8004370 <__cvt>
 80045c4:	9b06      	ldr	r3, [sp, #24]
 80045c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80045c8:	2b47      	cmp	r3, #71	@ 0x47
 80045ca:	4680      	mov	r8, r0
 80045cc:	d129      	bne.n	8004622 <_printf_float+0x172>
 80045ce:	1cc8      	adds	r0, r1, #3
 80045d0:	db02      	blt.n	80045d8 <_printf_float+0x128>
 80045d2:	6863      	ldr	r3, [r4, #4]
 80045d4:	4299      	cmp	r1, r3
 80045d6:	dd41      	ble.n	800465c <_printf_float+0x1ac>
 80045d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80045dc:	fa5f fa8a 	uxtb.w	sl, sl
 80045e0:	3901      	subs	r1, #1
 80045e2:	4652      	mov	r2, sl
 80045e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80045e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80045ea:	f7ff ff26 	bl	800443a <__exponent>
 80045ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045f0:	1813      	adds	r3, r2, r0
 80045f2:	2a01      	cmp	r2, #1
 80045f4:	4681      	mov	r9, r0
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	dc02      	bgt.n	8004600 <_printf_float+0x150>
 80045fa:	6822      	ldr	r2, [r4, #0]
 80045fc:	07d2      	lsls	r2, r2, #31
 80045fe:	d501      	bpl.n	8004604 <_printf_float+0x154>
 8004600:	3301      	adds	r3, #1
 8004602:	6123      	str	r3, [r4, #16]
 8004604:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0a2      	beq.n	8004552 <_printf_float+0xa2>
 800460c:	232d      	movs	r3, #45	@ 0x2d
 800460e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004612:	e79e      	b.n	8004552 <_printf_float+0xa2>
 8004614:	9a06      	ldr	r2, [sp, #24]
 8004616:	2a47      	cmp	r2, #71	@ 0x47
 8004618:	d1c2      	bne.n	80045a0 <_printf_float+0xf0>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1c0      	bne.n	80045a0 <_printf_float+0xf0>
 800461e:	2301      	movs	r3, #1
 8004620:	e7bd      	b.n	800459e <_printf_float+0xee>
 8004622:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004626:	d9db      	bls.n	80045e0 <_printf_float+0x130>
 8004628:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800462c:	d118      	bne.n	8004660 <_printf_float+0x1b0>
 800462e:	2900      	cmp	r1, #0
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	dd0b      	ble.n	800464c <_printf_float+0x19c>
 8004634:	6121      	str	r1, [r4, #16]
 8004636:	b913      	cbnz	r3, 800463e <_printf_float+0x18e>
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	07d0      	lsls	r0, r2, #31
 800463c:	d502      	bpl.n	8004644 <_printf_float+0x194>
 800463e:	3301      	adds	r3, #1
 8004640:	440b      	add	r3, r1
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004646:	f04f 0900 	mov.w	r9, #0
 800464a:	e7db      	b.n	8004604 <_printf_float+0x154>
 800464c:	b913      	cbnz	r3, 8004654 <_printf_float+0x1a4>
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	07d2      	lsls	r2, r2, #31
 8004652:	d501      	bpl.n	8004658 <_printf_float+0x1a8>
 8004654:	3302      	adds	r3, #2
 8004656:	e7f4      	b.n	8004642 <_printf_float+0x192>
 8004658:	2301      	movs	r3, #1
 800465a:	e7f2      	b.n	8004642 <_printf_float+0x192>
 800465c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004662:	4299      	cmp	r1, r3
 8004664:	db05      	blt.n	8004672 <_printf_float+0x1c2>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	6121      	str	r1, [r4, #16]
 800466a:	07d8      	lsls	r0, r3, #31
 800466c:	d5ea      	bpl.n	8004644 <_printf_float+0x194>
 800466e:	1c4b      	adds	r3, r1, #1
 8004670:	e7e7      	b.n	8004642 <_printf_float+0x192>
 8004672:	2900      	cmp	r1, #0
 8004674:	bfd4      	ite	le
 8004676:	f1c1 0202 	rsble	r2, r1, #2
 800467a:	2201      	movgt	r2, #1
 800467c:	4413      	add	r3, r2
 800467e:	e7e0      	b.n	8004642 <_printf_float+0x192>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	055a      	lsls	r2, r3, #21
 8004684:	d407      	bmi.n	8004696 <_printf_float+0x1e6>
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	4642      	mov	r2, r8
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	d12b      	bne.n	80046ec <_printf_float+0x23c>
 8004694:	e767      	b.n	8004566 <_printf_float+0xb6>
 8004696:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800469a:	f240 80dd 	bls.w	8004858 <_printf_float+0x3a8>
 800469e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80046a2:	2200      	movs	r2, #0
 80046a4:	2300      	movs	r3, #0
 80046a6:	f7fc fa37 	bl	8000b18 <__aeabi_dcmpeq>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d033      	beq.n	8004716 <_printf_float+0x266>
 80046ae:	4a37      	ldr	r2, [pc, #220]	@ (800478c <_printf_float+0x2dc>)
 80046b0:	2301      	movs	r3, #1
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b8      	blx	r7
 80046b8:	3001      	adds	r0, #1
 80046ba:	f43f af54 	beq.w	8004566 <_printf_float+0xb6>
 80046be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80046c2:	4543      	cmp	r3, r8
 80046c4:	db02      	blt.n	80046cc <_printf_float+0x21c>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	07d8      	lsls	r0, r3, #31
 80046ca:	d50f      	bpl.n	80046ec <_printf_float+0x23c>
 80046cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	f43f af45 	beq.w	8004566 <_printf_float+0xb6>
 80046dc:	f04f 0900 	mov.w	r9, #0
 80046e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80046e4:	f104 0a1a 	add.w	sl, r4, #26
 80046e8:	45c8      	cmp	r8, r9
 80046ea:	dc09      	bgt.n	8004700 <_printf_float+0x250>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	079b      	lsls	r3, r3, #30
 80046f0:	f100 8103 	bmi.w	80048fa <_printf_float+0x44a>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046f8:	4298      	cmp	r0, r3
 80046fa:	bfb8      	it	lt
 80046fc:	4618      	movlt	r0, r3
 80046fe:	e734      	b.n	800456a <_printf_float+0xba>
 8004700:	2301      	movs	r3, #1
 8004702:	4652      	mov	r2, sl
 8004704:	4631      	mov	r1, r6
 8004706:	4628      	mov	r0, r5
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f af2b 	beq.w	8004566 <_printf_float+0xb6>
 8004710:	f109 0901 	add.w	r9, r9, #1
 8004714:	e7e8      	b.n	80046e8 <_printf_float+0x238>
 8004716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	dc39      	bgt.n	8004790 <_printf_float+0x2e0>
 800471c:	4a1b      	ldr	r2, [pc, #108]	@ (800478c <_printf_float+0x2dc>)
 800471e:	2301      	movs	r3, #1
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	f43f af1d 	beq.w	8004566 <_printf_float+0xb6>
 800472c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004730:	ea59 0303 	orrs.w	r3, r9, r3
 8004734:	d102      	bne.n	800473c <_printf_float+0x28c>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	07d9      	lsls	r1, r3, #31
 800473a:	d5d7      	bpl.n	80046ec <_printf_float+0x23c>
 800473c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	f43f af0d 	beq.w	8004566 <_printf_float+0xb6>
 800474c:	f04f 0a00 	mov.w	sl, #0
 8004750:	f104 0b1a 	add.w	fp, r4, #26
 8004754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004756:	425b      	negs	r3, r3
 8004758:	4553      	cmp	r3, sl
 800475a:	dc01      	bgt.n	8004760 <_printf_float+0x2b0>
 800475c:	464b      	mov	r3, r9
 800475e:	e793      	b.n	8004688 <_printf_float+0x1d8>
 8004760:	2301      	movs	r3, #1
 8004762:	465a      	mov	r2, fp
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f aefb 	beq.w	8004566 <_printf_float+0xb6>
 8004770:	f10a 0a01 	add.w	sl, sl, #1
 8004774:	e7ee      	b.n	8004754 <_printf_float+0x2a4>
 8004776:	bf00      	nop
 8004778:	7fefffff 	.word	0x7fefffff
 800477c:	08008aa8 	.word	0x08008aa8
 8004780:	08008aac 	.word	0x08008aac
 8004784:	08008ab0 	.word	0x08008ab0
 8004788:	08008ab4 	.word	0x08008ab4
 800478c:	08008ab8 	.word	0x08008ab8
 8004790:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004792:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004796:	4553      	cmp	r3, sl
 8004798:	bfa8      	it	ge
 800479a:	4653      	movge	r3, sl
 800479c:	2b00      	cmp	r3, #0
 800479e:	4699      	mov	r9, r3
 80047a0:	dc36      	bgt.n	8004810 <_printf_float+0x360>
 80047a2:	f04f 0b00 	mov.w	fp, #0
 80047a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047aa:	f104 021a 	add.w	r2, r4, #26
 80047ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047b0:	9306      	str	r3, [sp, #24]
 80047b2:	eba3 0309 	sub.w	r3, r3, r9
 80047b6:	455b      	cmp	r3, fp
 80047b8:	dc31      	bgt.n	800481e <_printf_float+0x36e>
 80047ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047bc:	459a      	cmp	sl, r3
 80047be:	dc3a      	bgt.n	8004836 <_printf_float+0x386>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	07da      	lsls	r2, r3, #31
 80047c4:	d437      	bmi.n	8004836 <_printf_float+0x386>
 80047c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c8:	ebaa 0903 	sub.w	r9, sl, r3
 80047cc:	9b06      	ldr	r3, [sp, #24]
 80047ce:	ebaa 0303 	sub.w	r3, sl, r3
 80047d2:	4599      	cmp	r9, r3
 80047d4:	bfa8      	it	ge
 80047d6:	4699      	movge	r9, r3
 80047d8:	f1b9 0f00 	cmp.w	r9, #0
 80047dc:	dc33      	bgt.n	8004846 <_printf_float+0x396>
 80047de:	f04f 0800 	mov.w	r8, #0
 80047e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047e6:	f104 0b1a 	add.w	fp, r4, #26
 80047ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ec:	ebaa 0303 	sub.w	r3, sl, r3
 80047f0:	eba3 0309 	sub.w	r3, r3, r9
 80047f4:	4543      	cmp	r3, r8
 80047f6:	f77f af79 	ble.w	80046ec <_printf_float+0x23c>
 80047fa:	2301      	movs	r3, #1
 80047fc:	465a      	mov	r2, fp
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	47b8      	blx	r7
 8004804:	3001      	adds	r0, #1
 8004806:	f43f aeae 	beq.w	8004566 <_printf_float+0xb6>
 800480a:	f108 0801 	add.w	r8, r8, #1
 800480e:	e7ec      	b.n	80047ea <_printf_float+0x33a>
 8004810:	4642      	mov	r2, r8
 8004812:	4631      	mov	r1, r6
 8004814:	4628      	mov	r0, r5
 8004816:	47b8      	blx	r7
 8004818:	3001      	adds	r0, #1
 800481a:	d1c2      	bne.n	80047a2 <_printf_float+0x2f2>
 800481c:	e6a3      	b.n	8004566 <_printf_float+0xb6>
 800481e:	2301      	movs	r3, #1
 8004820:	4631      	mov	r1, r6
 8004822:	4628      	mov	r0, r5
 8004824:	9206      	str	r2, [sp, #24]
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	f43f ae9c 	beq.w	8004566 <_printf_float+0xb6>
 800482e:	9a06      	ldr	r2, [sp, #24]
 8004830:	f10b 0b01 	add.w	fp, fp, #1
 8004834:	e7bb      	b.n	80047ae <_printf_float+0x2fe>
 8004836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800483a:	4631      	mov	r1, r6
 800483c:	4628      	mov	r0, r5
 800483e:	47b8      	blx	r7
 8004840:	3001      	adds	r0, #1
 8004842:	d1c0      	bne.n	80047c6 <_printf_float+0x316>
 8004844:	e68f      	b.n	8004566 <_printf_float+0xb6>
 8004846:	9a06      	ldr	r2, [sp, #24]
 8004848:	464b      	mov	r3, r9
 800484a:	4442      	add	r2, r8
 800484c:	4631      	mov	r1, r6
 800484e:	4628      	mov	r0, r5
 8004850:	47b8      	blx	r7
 8004852:	3001      	adds	r0, #1
 8004854:	d1c3      	bne.n	80047de <_printf_float+0x32e>
 8004856:	e686      	b.n	8004566 <_printf_float+0xb6>
 8004858:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800485c:	f1ba 0f01 	cmp.w	sl, #1
 8004860:	dc01      	bgt.n	8004866 <_printf_float+0x3b6>
 8004862:	07db      	lsls	r3, r3, #31
 8004864:	d536      	bpl.n	80048d4 <_printf_float+0x424>
 8004866:	2301      	movs	r3, #1
 8004868:	4642      	mov	r2, r8
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	f43f ae78 	beq.w	8004566 <_printf_float+0xb6>
 8004876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	f43f ae70 	beq.w	8004566 <_printf_float+0xb6>
 8004886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004892:	f7fc f941 	bl	8000b18 <__aeabi_dcmpeq>
 8004896:	b9c0      	cbnz	r0, 80048ca <_printf_float+0x41a>
 8004898:	4653      	mov	r3, sl
 800489a:	f108 0201 	add.w	r2, r8, #1
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	d10c      	bne.n	80048c2 <_printf_float+0x412>
 80048a8:	e65d      	b.n	8004566 <_printf_float+0xb6>
 80048aa:	2301      	movs	r3, #1
 80048ac:	465a      	mov	r2, fp
 80048ae:	4631      	mov	r1, r6
 80048b0:	4628      	mov	r0, r5
 80048b2:	47b8      	blx	r7
 80048b4:	3001      	adds	r0, #1
 80048b6:	f43f ae56 	beq.w	8004566 <_printf_float+0xb6>
 80048ba:	f108 0801 	add.w	r8, r8, #1
 80048be:	45d0      	cmp	r8, sl
 80048c0:	dbf3      	blt.n	80048aa <_printf_float+0x3fa>
 80048c2:	464b      	mov	r3, r9
 80048c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80048c8:	e6df      	b.n	800468a <_printf_float+0x1da>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	f104 0b1a 	add.w	fp, r4, #26
 80048d2:	e7f4      	b.n	80048be <_printf_float+0x40e>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4642      	mov	r2, r8
 80048d8:	e7e1      	b.n	800489e <_printf_float+0x3ee>
 80048da:	2301      	movs	r3, #1
 80048dc:	464a      	mov	r2, r9
 80048de:	4631      	mov	r1, r6
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	f43f ae3e 	beq.w	8004566 <_printf_float+0xb6>
 80048ea:	f108 0801 	add.w	r8, r8, #1
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048f2:	1a5b      	subs	r3, r3, r1
 80048f4:	4543      	cmp	r3, r8
 80048f6:	dcf0      	bgt.n	80048da <_printf_float+0x42a>
 80048f8:	e6fc      	b.n	80046f4 <_printf_float+0x244>
 80048fa:	f04f 0800 	mov.w	r8, #0
 80048fe:	f104 0919 	add.w	r9, r4, #25
 8004902:	e7f4      	b.n	80048ee <_printf_float+0x43e>

08004904 <_printf_common>:
 8004904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	4616      	mov	r6, r2
 800490a:	4698      	mov	r8, r3
 800490c:	688a      	ldr	r2, [r1, #8]
 800490e:	690b      	ldr	r3, [r1, #16]
 8004910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004914:	4293      	cmp	r3, r2
 8004916:	bfb8      	it	lt
 8004918:	4613      	movlt	r3, r2
 800491a:	6033      	str	r3, [r6, #0]
 800491c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004920:	4607      	mov	r7, r0
 8004922:	460c      	mov	r4, r1
 8004924:	b10a      	cbz	r2, 800492a <_printf_common+0x26>
 8004926:	3301      	adds	r3, #1
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	0699      	lsls	r1, r3, #26
 800492e:	bf42      	ittt	mi
 8004930:	6833      	ldrmi	r3, [r6, #0]
 8004932:	3302      	addmi	r3, #2
 8004934:	6033      	strmi	r3, [r6, #0]
 8004936:	6825      	ldr	r5, [r4, #0]
 8004938:	f015 0506 	ands.w	r5, r5, #6
 800493c:	d106      	bne.n	800494c <_printf_common+0x48>
 800493e:	f104 0a19 	add.w	sl, r4, #25
 8004942:	68e3      	ldr	r3, [r4, #12]
 8004944:	6832      	ldr	r2, [r6, #0]
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	42ab      	cmp	r3, r5
 800494a:	dc26      	bgt.n	800499a <_printf_common+0x96>
 800494c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	3b00      	subs	r3, #0
 8004954:	bf18      	it	ne
 8004956:	2301      	movne	r3, #1
 8004958:	0692      	lsls	r2, r2, #26
 800495a:	d42b      	bmi.n	80049b4 <_printf_common+0xb0>
 800495c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004960:	4641      	mov	r1, r8
 8004962:	4638      	mov	r0, r7
 8004964:	47c8      	blx	r9
 8004966:	3001      	adds	r0, #1
 8004968:	d01e      	beq.n	80049a8 <_printf_common+0xa4>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	6922      	ldr	r2, [r4, #16]
 800496e:	f003 0306 	and.w	r3, r3, #6
 8004972:	2b04      	cmp	r3, #4
 8004974:	bf02      	ittt	eq
 8004976:	68e5      	ldreq	r5, [r4, #12]
 8004978:	6833      	ldreq	r3, [r6, #0]
 800497a:	1aed      	subeq	r5, r5, r3
 800497c:	68a3      	ldr	r3, [r4, #8]
 800497e:	bf0c      	ite	eq
 8004980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004984:	2500      	movne	r5, #0
 8004986:	4293      	cmp	r3, r2
 8004988:	bfc4      	itt	gt
 800498a:	1a9b      	subgt	r3, r3, r2
 800498c:	18ed      	addgt	r5, r5, r3
 800498e:	2600      	movs	r6, #0
 8004990:	341a      	adds	r4, #26
 8004992:	42b5      	cmp	r5, r6
 8004994:	d11a      	bne.n	80049cc <_printf_common+0xc8>
 8004996:	2000      	movs	r0, #0
 8004998:	e008      	b.n	80049ac <_printf_common+0xa8>
 800499a:	2301      	movs	r3, #1
 800499c:	4652      	mov	r2, sl
 800499e:	4641      	mov	r1, r8
 80049a0:	4638      	mov	r0, r7
 80049a2:	47c8      	blx	r9
 80049a4:	3001      	adds	r0, #1
 80049a6:	d103      	bne.n	80049b0 <_printf_common+0xac>
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	3501      	adds	r5, #1
 80049b2:	e7c6      	b.n	8004942 <_printf_common+0x3e>
 80049b4:	18e1      	adds	r1, r4, r3
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	2030      	movs	r0, #48	@ 0x30
 80049ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049be:	4422      	add	r2, r4
 80049c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049c8:	3302      	adds	r3, #2
 80049ca:	e7c7      	b.n	800495c <_printf_common+0x58>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4622      	mov	r2, r4
 80049d0:	4641      	mov	r1, r8
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c8      	blx	r9
 80049d6:	3001      	adds	r0, #1
 80049d8:	d0e6      	beq.n	80049a8 <_printf_common+0xa4>
 80049da:	3601      	adds	r6, #1
 80049dc:	e7d9      	b.n	8004992 <_printf_common+0x8e>
	...

080049e0 <_printf_i>:
 80049e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e4:	7e0f      	ldrb	r7, [r1, #24]
 80049e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049e8:	2f78      	cmp	r7, #120	@ 0x78
 80049ea:	4691      	mov	r9, r2
 80049ec:	4680      	mov	r8, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	469a      	mov	sl, r3
 80049f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049f6:	d807      	bhi.n	8004a08 <_printf_i+0x28>
 80049f8:	2f62      	cmp	r7, #98	@ 0x62
 80049fa:	d80a      	bhi.n	8004a12 <_printf_i+0x32>
 80049fc:	2f00      	cmp	r7, #0
 80049fe:	f000 80d2 	beq.w	8004ba6 <_printf_i+0x1c6>
 8004a02:	2f58      	cmp	r7, #88	@ 0x58
 8004a04:	f000 80b9 	beq.w	8004b7a <_printf_i+0x19a>
 8004a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a10:	e03a      	b.n	8004a88 <_printf_i+0xa8>
 8004a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a16:	2b15      	cmp	r3, #21
 8004a18:	d8f6      	bhi.n	8004a08 <_printf_i+0x28>
 8004a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a20 <_printf_i+0x40>)
 8004a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a20:	08004a79 	.word	0x08004a79
 8004a24:	08004a8d 	.word	0x08004a8d
 8004a28:	08004a09 	.word	0x08004a09
 8004a2c:	08004a09 	.word	0x08004a09
 8004a30:	08004a09 	.word	0x08004a09
 8004a34:	08004a09 	.word	0x08004a09
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004a09 	.word	0x08004a09
 8004a40:	08004a09 	.word	0x08004a09
 8004a44:	08004a09 	.word	0x08004a09
 8004a48:	08004a09 	.word	0x08004a09
 8004a4c:	08004b8d 	.word	0x08004b8d
 8004a50:	08004ab7 	.word	0x08004ab7
 8004a54:	08004b47 	.word	0x08004b47
 8004a58:	08004a09 	.word	0x08004a09
 8004a5c:	08004a09 	.word	0x08004a09
 8004a60:	08004baf 	.word	0x08004baf
 8004a64:	08004a09 	.word	0x08004a09
 8004a68:	08004ab7 	.word	0x08004ab7
 8004a6c:	08004a09 	.word	0x08004a09
 8004a70:	08004a09 	.word	0x08004a09
 8004a74:	08004b4f 	.word	0x08004b4f
 8004a78:	6833      	ldr	r3, [r6, #0]
 8004a7a:	1d1a      	adds	r2, r3, #4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6032      	str	r2, [r6, #0]
 8004a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e09d      	b.n	8004bc8 <_printf_i+0x1e8>
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	6820      	ldr	r0, [r4, #0]
 8004a90:	1d19      	adds	r1, r3, #4
 8004a92:	6031      	str	r1, [r6, #0]
 8004a94:	0606      	lsls	r6, r0, #24
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0xbc>
 8004a98:	681d      	ldr	r5, [r3, #0]
 8004a9a:	e003      	b.n	8004aa4 <_printf_i+0xc4>
 8004a9c:	0645      	lsls	r5, r0, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0xb8>
 8004aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	da03      	bge.n	8004ab0 <_printf_i+0xd0>
 8004aa8:	232d      	movs	r3, #45	@ 0x2d
 8004aaa:	426d      	negs	r5, r5
 8004aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ab0:	4859      	ldr	r0, [pc, #356]	@ (8004c18 <_printf_i+0x238>)
 8004ab2:	230a      	movs	r3, #10
 8004ab4:	e011      	b.n	8004ada <_printf_i+0xfa>
 8004ab6:	6821      	ldr	r1, [r4, #0]
 8004ab8:	6833      	ldr	r3, [r6, #0]
 8004aba:	0608      	lsls	r0, r1, #24
 8004abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ac0:	d402      	bmi.n	8004ac8 <_printf_i+0xe8>
 8004ac2:	0649      	lsls	r1, r1, #25
 8004ac4:	bf48      	it	mi
 8004ac6:	b2ad      	uxthmi	r5, r5
 8004ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004aca:	4853      	ldr	r0, [pc, #332]	@ (8004c18 <_printf_i+0x238>)
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	bf14      	ite	ne
 8004ad0:	230a      	movne	r3, #10
 8004ad2:	2308      	moveq	r3, #8
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ada:	6866      	ldr	r6, [r4, #4]
 8004adc:	60a6      	str	r6, [r4, #8]
 8004ade:	2e00      	cmp	r6, #0
 8004ae0:	bfa2      	ittt	ge
 8004ae2:	6821      	ldrge	r1, [r4, #0]
 8004ae4:	f021 0104 	bicge.w	r1, r1, #4
 8004ae8:	6021      	strge	r1, [r4, #0]
 8004aea:	b90d      	cbnz	r5, 8004af0 <_printf_i+0x110>
 8004aec:	2e00      	cmp	r6, #0
 8004aee:	d04b      	beq.n	8004b88 <_printf_i+0x1a8>
 8004af0:	4616      	mov	r6, r2
 8004af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004af6:	fb03 5711 	mls	r7, r3, r1, r5
 8004afa:	5dc7      	ldrb	r7, [r0, r7]
 8004afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b00:	462f      	mov	r7, r5
 8004b02:	42bb      	cmp	r3, r7
 8004b04:	460d      	mov	r5, r1
 8004b06:	d9f4      	bls.n	8004af2 <_printf_i+0x112>
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d10b      	bne.n	8004b24 <_printf_i+0x144>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	07df      	lsls	r7, r3, #31
 8004b10:	d508      	bpl.n	8004b24 <_printf_i+0x144>
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	6861      	ldr	r1, [r4, #4]
 8004b16:	4299      	cmp	r1, r3
 8004b18:	bfde      	ittt	le
 8004b1a:	2330      	movle	r3, #48	@ 0x30
 8004b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b24:	1b92      	subs	r2, r2, r6
 8004b26:	6122      	str	r2, [r4, #16]
 8004b28:	f8cd a000 	str.w	sl, [sp]
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	aa03      	add	r2, sp, #12
 8004b30:	4621      	mov	r1, r4
 8004b32:	4640      	mov	r0, r8
 8004b34:	f7ff fee6 	bl	8004904 <_printf_common>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d14a      	bne.n	8004bd2 <_printf_i+0x1f2>
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b40:	b004      	add	sp, #16
 8004b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	f043 0320 	orr.w	r3, r3, #32
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	4833      	ldr	r0, [pc, #204]	@ (8004c1c <_printf_i+0x23c>)
 8004b50:	2778      	movs	r7, #120	@ 0x78
 8004b52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	6831      	ldr	r1, [r6, #0]
 8004b5a:	061f      	lsls	r7, r3, #24
 8004b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b60:	d402      	bmi.n	8004b68 <_printf_i+0x188>
 8004b62:	065f      	lsls	r7, r3, #25
 8004b64:	bf48      	it	mi
 8004b66:	b2ad      	uxthmi	r5, r5
 8004b68:	6031      	str	r1, [r6, #0]
 8004b6a:	07d9      	lsls	r1, r3, #31
 8004b6c:	bf44      	itt	mi
 8004b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b72:	6023      	strmi	r3, [r4, #0]
 8004b74:	b11d      	cbz	r5, 8004b7e <_printf_i+0x19e>
 8004b76:	2310      	movs	r3, #16
 8004b78:	e7ac      	b.n	8004ad4 <_printf_i+0xf4>
 8004b7a:	4827      	ldr	r0, [pc, #156]	@ (8004c18 <_printf_i+0x238>)
 8004b7c:	e7e9      	b.n	8004b52 <_printf_i+0x172>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f023 0320 	bic.w	r3, r3, #32
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	e7f6      	b.n	8004b76 <_printf_i+0x196>
 8004b88:	4616      	mov	r6, r2
 8004b8a:	e7bd      	b.n	8004b08 <_printf_i+0x128>
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	6825      	ldr	r5, [r4, #0]
 8004b90:	6961      	ldr	r1, [r4, #20]
 8004b92:	1d18      	adds	r0, r3, #4
 8004b94:	6030      	str	r0, [r6, #0]
 8004b96:	062e      	lsls	r6, r5, #24
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	d501      	bpl.n	8004ba0 <_printf_i+0x1c0>
 8004b9c:	6019      	str	r1, [r3, #0]
 8004b9e:	e002      	b.n	8004ba6 <_printf_i+0x1c6>
 8004ba0:	0668      	lsls	r0, r5, #25
 8004ba2:	d5fb      	bpl.n	8004b9c <_printf_i+0x1bc>
 8004ba4:	8019      	strh	r1, [r3, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6123      	str	r3, [r4, #16]
 8004baa:	4616      	mov	r6, r2
 8004bac:	e7bc      	b.n	8004b28 <_printf_i+0x148>
 8004bae:	6833      	ldr	r3, [r6, #0]
 8004bb0:	1d1a      	adds	r2, r3, #4
 8004bb2:	6032      	str	r2, [r6, #0]
 8004bb4:	681e      	ldr	r6, [r3, #0]
 8004bb6:	6862      	ldr	r2, [r4, #4]
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7fb fb30 	bl	8000220 <memchr>
 8004bc0:	b108      	cbz	r0, 8004bc6 <_printf_i+0x1e6>
 8004bc2:	1b80      	subs	r0, r0, r6
 8004bc4:	6060      	str	r0, [r4, #4]
 8004bc6:	6863      	ldr	r3, [r4, #4]
 8004bc8:	6123      	str	r3, [r4, #16]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bd0:	e7aa      	b.n	8004b28 <_printf_i+0x148>
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	4640      	mov	r0, r8
 8004bda:	47d0      	blx	sl
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d0ad      	beq.n	8004b3c <_printf_i+0x15c>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	079b      	lsls	r3, r3, #30
 8004be4:	d413      	bmi.n	8004c0e <_printf_i+0x22e>
 8004be6:	68e0      	ldr	r0, [r4, #12]
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	4298      	cmp	r0, r3
 8004bec:	bfb8      	it	lt
 8004bee:	4618      	movlt	r0, r3
 8004bf0:	e7a6      	b.n	8004b40 <_printf_i+0x160>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	47d0      	blx	sl
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d09d      	beq.n	8004b3c <_printf_i+0x15c>
 8004c00:	3501      	adds	r5, #1
 8004c02:	68e3      	ldr	r3, [r4, #12]
 8004c04:	9903      	ldr	r1, [sp, #12]
 8004c06:	1a5b      	subs	r3, r3, r1
 8004c08:	42ab      	cmp	r3, r5
 8004c0a:	dcf2      	bgt.n	8004bf2 <_printf_i+0x212>
 8004c0c:	e7eb      	b.n	8004be6 <_printf_i+0x206>
 8004c0e:	2500      	movs	r5, #0
 8004c10:	f104 0619 	add.w	r6, r4, #25
 8004c14:	e7f5      	b.n	8004c02 <_printf_i+0x222>
 8004c16:	bf00      	nop
 8004c18:	08008aba 	.word	0x08008aba
 8004c1c:	08008acb 	.word	0x08008acb

08004c20 <_scanf_float>:
 8004c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c24:	b087      	sub	sp, #28
 8004c26:	4617      	mov	r7, r2
 8004c28:	9303      	str	r3, [sp, #12]
 8004c2a:	688b      	ldr	r3, [r1, #8]
 8004c2c:	1e5a      	subs	r2, r3, #1
 8004c2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004c32:	bf81      	itttt	hi
 8004c34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004c38:	eb03 0b05 	addhi.w	fp, r3, r5
 8004c3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004c40:	608b      	strhi	r3, [r1, #8]
 8004c42:	680b      	ldr	r3, [r1, #0]
 8004c44:	460a      	mov	r2, r1
 8004c46:	f04f 0500 	mov.w	r5, #0
 8004c4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004c4e:	f842 3b1c 	str.w	r3, [r2], #28
 8004c52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004c56:	4680      	mov	r8, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	bf98      	it	ls
 8004c5c:	f04f 0b00 	movls.w	fp, #0
 8004c60:	9201      	str	r2, [sp, #4]
 8004c62:	4616      	mov	r6, r2
 8004c64:	46aa      	mov	sl, r5
 8004c66:	46a9      	mov	r9, r5
 8004c68:	9502      	str	r5, [sp, #8]
 8004c6a:	68a2      	ldr	r2, [r4, #8]
 8004c6c:	b152      	cbz	r2, 8004c84 <_scanf_float+0x64>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b4e      	cmp	r3, #78	@ 0x4e
 8004c74:	d864      	bhi.n	8004d40 <_scanf_float+0x120>
 8004c76:	2b40      	cmp	r3, #64	@ 0x40
 8004c78:	d83c      	bhi.n	8004cf4 <_scanf_float+0xd4>
 8004c7a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004c7e:	b2c8      	uxtb	r0, r1
 8004c80:	280e      	cmp	r0, #14
 8004c82:	d93a      	bls.n	8004cfa <_scanf_float+0xda>
 8004c84:	f1b9 0f00 	cmp.w	r9, #0
 8004c88:	d003      	beq.n	8004c92 <_scanf_float+0x72>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c96:	f1ba 0f01 	cmp.w	sl, #1
 8004c9a:	f200 8117 	bhi.w	8004ecc <_scanf_float+0x2ac>
 8004c9e:	9b01      	ldr	r3, [sp, #4]
 8004ca0:	429e      	cmp	r6, r3
 8004ca2:	f200 8108 	bhi.w	8004eb6 <_scanf_float+0x296>
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	b007      	add	sp, #28
 8004caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004cb2:	2a0d      	cmp	r2, #13
 8004cb4:	d8e6      	bhi.n	8004c84 <_scanf_float+0x64>
 8004cb6:	a101      	add	r1, pc, #4	@ (adr r1, 8004cbc <_scanf_float+0x9c>)
 8004cb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004cbc:	08004e03 	.word	0x08004e03
 8004cc0:	08004c85 	.word	0x08004c85
 8004cc4:	08004c85 	.word	0x08004c85
 8004cc8:	08004c85 	.word	0x08004c85
 8004ccc:	08004e63 	.word	0x08004e63
 8004cd0:	08004e3b 	.word	0x08004e3b
 8004cd4:	08004c85 	.word	0x08004c85
 8004cd8:	08004c85 	.word	0x08004c85
 8004cdc:	08004e11 	.word	0x08004e11
 8004ce0:	08004c85 	.word	0x08004c85
 8004ce4:	08004c85 	.word	0x08004c85
 8004ce8:	08004c85 	.word	0x08004c85
 8004cec:	08004c85 	.word	0x08004c85
 8004cf0:	08004dc9 	.word	0x08004dc9
 8004cf4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004cf8:	e7db      	b.n	8004cb2 <_scanf_float+0x92>
 8004cfa:	290e      	cmp	r1, #14
 8004cfc:	d8c2      	bhi.n	8004c84 <_scanf_float+0x64>
 8004cfe:	a001      	add	r0, pc, #4	@ (adr r0, 8004d04 <_scanf_float+0xe4>)
 8004d00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004d04:	08004db9 	.word	0x08004db9
 8004d08:	08004c85 	.word	0x08004c85
 8004d0c:	08004db9 	.word	0x08004db9
 8004d10:	08004e4f 	.word	0x08004e4f
 8004d14:	08004c85 	.word	0x08004c85
 8004d18:	08004d61 	.word	0x08004d61
 8004d1c:	08004d9f 	.word	0x08004d9f
 8004d20:	08004d9f 	.word	0x08004d9f
 8004d24:	08004d9f 	.word	0x08004d9f
 8004d28:	08004d9f 	.word	0x08004d9f
 8004d2c:	08004d9f 	.word	0x08004d9f
 8004d30:	08004d9f 	.word	0x08004d9f
 8004d34:	08004d9f 	.word	0x08004d9f
 8004d38:	08004d9f 	.word	0x08004d9f
 8004d3c:	08004d9f 	.word	0x08004d9f
 8004d40:	2b6e      	cmp	r3, #110	@ 0x6e
 8004d42:	d809      	bhi.n	8004d58 <_scanf_float+0x138>
 8004d44:	2b60      	cmp	r3, #96	@ 0x60
 8004d46:	d8b2      	bhi.n	8004cae <_scanf_float+0x8e>
 8004d48:	2b54      	cmp	r3, #84	@ 0x54
 8004d4a:	d07b      	beq.n	8004e44 <_scanf_float+0x224>
 8004d4c:	2b59      	cmp	r3, #89	@ 0x59
 8004d4e:	d199      	bne.n	8004c84 <_scanf_float+0x64>
 8004d50:	2d07      	cmp	r5, #7
 8004d52:	d197      	bne.n	8004c84 <_scanf_float+0x64>
 8004d54:	2508      	movs	r5, #8
 8004d56:	e02c      	b.n	8004db2 <_scanf_float+0x192>
 8004d58:	2b74      	cmp	r3, #116	@ 0x74
 8004d5a:	d073      	beq.n	8004e44 <_scanf_float+0x224>
 8004d5c:	2b79      	cmp	r3, #121	@ 0x79
 8004d5e:	e7f6      	b.n	8004d4e <_scanf_float+0x12e>
 8004d60:	6821      	ldr	r1, [r4, #0]
 8004d62:	05c8      	lsls	r0, r1, #23
 8004d64:	d51b      	bpl.n	8004d9e <_scanf_float+0x17e>
 8004d66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004d6a:	6021      	str	r1, [r4, #0]
 8004d6c:	f109 0901 	add.w	r9, r9, #1
 8004d70:	f1bb 0f00 	cmp.w	fp, #0
 8004d74:	d003      	beq.n	8004d7e <_scanf_float+0x15e>
 8004d76:	3201      	adds	r2, #1
 8004d78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d7c:	60a2      	str	r2, [r4, #8]
 8004d7e:	68a3      	ldr	r3, [r4, #8]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	60a3      	str	r3, [r4, #8]
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	3301      	adds	r3, #1
 8004d88:	6123      	str	r3, [r4, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	f340 8087 	ble.w	8004ea4 <_scanf_float+0x284>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	e765      	b.n	8004c6a <_scanf_float+0x4a>
 8004d9e:	eb1a 0105 	adds.w	r1, sl, r5
 8004da2:	f47f af6f 	bne.w	8004c84 <_scanf_float+0x64>
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004dac:	6022      	str	r2, [r4, #0]
 8004dae:	460d      	mov	r5, r1
 8004db0:	468a      	mov	sl, r1
 8004db2:	f806 3b01 	strb.w	r3, [r6], #1
 8004db6:	e7e2      	b.n	8004d7e <_scanf_float+0x15e>
 8004db8:	6822      	ldr	r2, [r4, #0]
 8004dba:	0610      	lsls	r0, r2, #24
 8004dbc:	f57f af62 	bpl.w	8004c84 <_scanf_float+0x64>
 8004dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dc4:	6022      	str	r2, [r4, #0]
 8004dc6:	e7f4      	b.n	8004db2 <_scanf_float+0x192>
 8004dc8:	f1ba 0f00 	cmp.w	sl, #0
 8004dcc:	d10e      	bne.n	8004dec <_scanf_float+0x1cc>
 8004dce:	f1b9 0f00 	cmp.w	r9, #0
 8004dd2:	d10e      	bne.n	8004df2 <_scanf_float+0x1d2>
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004dda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004dde:	d108      	bne.n	8004df2 <_scanf_float+0x1d2>
 8004de0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004de4:	6022      	str	r2, [r4, #0]
 8004de6:	f04f 0a01 	mov.w	sl, #1
 8004dea:	e7e2      	b.n	8004db2 <_scanf_float+0x192>
 8004dec:	f1ba 0f02 	cmp.w	sl, #2
 8004df0:	d055      	beq.n	8004e9e <_scanf_float+0x27e>
 8004df2:	2d01      	cmp	r5, #1
 8004df4:	d002      	beq.n	8004dfc <_scanf_float+0x1dc>
 8004df6:	2d04      	cmp	r5, #4
 8004df8:	f47f af44 	bne.w	8004c84 <_scanf_float+0x64>
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	b2ed      	uxtb	r5, r5
 8004e00:	e7d7      	b.n	8004db2 <_scanf_float+0x192>
 8004e02:	f1ba 0f01 	cmp.w	sl, #1
 8004e06:	f47f af3d 	bne.w	8004c84 <_scanf_float+0x64>
 8004e0a:	f04f 0a02 	mov.w	sl, #2
 8004e0e:	e7d0      	b.n	8004db2 <_scanf_float+0x192>
 8004e10:	b97d      	cbnz	r5, 8004e32 <_scanf_float+0x212>
 8004e12:	f1b9 0f00 	cmp.w	r9, #0
 8004e16:	f47f af38 	bne.w	8004c8a <_scanf_float+0x6a>
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004e20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004e24:	f040 8108 	bne.w	8005038 <_scanf_float+0x418>
 8004e28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004e2c:	6022      	str	r2, [r4, #0]
 8004e2e:	2501      	movs	r5, #1
 8004e30:	e7bf      	b.n	8004db2 <_scanf_float+0x192>
 8004e32:	2d03      	cmp	r5, #3
 8004e34:	d0e2      	beq.n	8004dfc <_scanf_float+0x1dc>
 8004e36:	2d05      	cmp	r5, #5
 8004e38:	e7de      	b.n	8004df8 <_scanf_float+0x1d8>
 8004e3a:	2d02      	cmp	r5, #2
 8004e3c:	f47f af22 	bne.w	8004c84 <_scanf_float+0x64>
 8004e40:	2503      	movs	r5, #3
 8004e42:	e7b6      	b.n	8004db2 <_scanf_float+0x192>
 8004e44:	2d06      	cmp	r5, #6
 8004e46:	f47f af1d 	bne.w	8004c84 <_scanf_float+0x64>
 8004e4a:	2507      	movs	r5, #7
 8004e4c:	e7b1      	b.n	8004db2 <_scanf_float+0x192>
 8004e4e:	6822      	ldr	r2, [r4, #0]
 8004e50:	0591      	lsls	r1, r2, #22
 8004e52:	f57f af17 	bpl.w	8004c84 <_scanf_float+0x64>
 8004e56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004e60:	e7a7      	b.n	8004db2 <_scanf_float+0x192>
 8004e62:	6822      	ldr	r2, [r4, #0]
 8004e64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004e68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004e6c:	d006      	beq.n	8004e7c <_scanf_float+0x25c>
 8004e6e:	0550      	lsls	r0, r2, #21
 8004e70:	f57f af08 	bpl.w	8004c84 <_scanf_float+0x64>
 8004e74:	f1b9 0f00 	cmp.w	r9, #0
 8004e78:	f000 80de 	beq.w	8005038 <_scanf_float+0x418>
 8004e7c:	0591      	lsls	r1, r2, #22
 8004e7e:	bf58      	it	pl
 8004e80:	9902      	ldrpl	r1, [sp, #8]
 8004e82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004e86:	bf58      	it	pl
 8004e88:	eba9 0101 	subpl.w	r1, r9, r1
 8004e8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004e90:	bf58      	it	pl
 8004e92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e96:	6022      	str	r2, [r4, #0]
 8004e98:	f04f 0900 	mov.w	r9, #0
 8004e9c:	e789      	b.n	8004db2 <_scanf_float+0x192>
 8004e9e:	f04f 0a03 	mov.w	sl, #3
 8004ea2:	e786      	b.n	8004db2 <_scanf_float+0x192>
 8004ea4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	4640      	mov	r0, r8
 8004eac:	4798      	blx	r3
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f43f aedb 	beq.w	8004c6a <_scanf_float+0x4a>
 8004eb4:	e6e6      	b.n	8004c84 <_scanf_float+0x64>
 8004eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004eba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ebe:	463a      	mov	r2, r7
 8004ec0:	4640      	mov	r0, r8
 8004ec2:	4798      	blx	r3
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	e6e8      	b.n	8004c9e <_scanf_float+0x7e>
 8004ecc:	1e6b      	subs	r3, r5, #1
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d824      	bhi.n	8004f1c <_scanf_float+0x2fc>
 8004ed2:	2d02      	cmp	r5, #2
 8004ed4:	d836      	bhi.n	8004f44 <_scanf_float+0x324>
 8004ed6:	9b01      	ldr	r3, [sp, #4]
 8004ed8:	429e      	cmp	r6, r3
 8004eda:	f67f aee4 	bls.w	8004ca6 <_scanf_float+0x86>
 8004ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ee2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ee6:	463a      	mov	r2, r7
 8004ee8:	4640      	mov	r0, r8
 8004eea:	4798      	blx	r3
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	e7f0      	b.n	8004ed6 <_scanf_float+0x2b6>
 8004ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ef8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004efc:	463a      	mov	r2, r7
 8004efe:	4640      	mov	r0, r8
 8004f00:	4798      	blx	r3
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f0c:	fa5f fa8a 	uxtb.w	sl, sl
 8004f10:	f1ba 0f02 	cmp.w	sl, #2
 8004f14:	d1ee      	bne.n	8004ef4 <_scanf_float+0x2d4>
 8004f16:	3d03      	subs	r5, #3
 8004f18:	b2ed      	uxtb	r5, r5
 8004f1a:	1b76      	subs	r6, r6, r5
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	05da      	lsls	r2, r3, #23
 8004f20:	d530      	bpl.n	8004f84 <_scanf_float+0x364>
 8004f22:	055b      	lsls	r3, r3, #21
 8004f24:	d511      	bpl.n	8004f4a <_scanf_float+0x32a>
 8004f26:	9b01      	ldr	r3, [sp, #4]
 8004f28:	429e      	cmp	r6, r3
 8004f2a:	f67f aebc 	bls.w	8004ca6 <_scanf_float+0x86>
 8004f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f36:	463a      	mov	r2, r7
 8004f38:	4640      	mov	r0, r8
 8004f3a:	4798      	blx	r3
 8004f3c:	6923      	ldr	r3, [r4, #16]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	e7f0      	b.n	8004f26 <_scanf_float+0x306>
 8004f44:	46aa      	mov	sl, r5
 8004f46:	46b3      	mov	fp, r6
 8004f48:	e7de      	b.n	8004f08 <_scanf_float+0x2e8>
 8004f4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	2965      	cmp	r1, #101	@ 0x65
 8004f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f56:	f106 35ff 	add.w	r5, r6, #4294967295
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	d00c      	beq.n	8004f78 <_scanf_float+0x358>
 8004f5e:	2945      	cmp	r1, #69	@ 0x45
 8004f60:	d00a      	beq.n	8004f78 <_scanf_float+0x358>
 8004f62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f66:	463a      	mov	r2, r7
 8004f68:	4640      	mov	r0, r8
 8004f6a:	4798      	blx	r3
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	1eb5      	subs	r5, r6, #2
 8004f76:	6123      	str	r3, [r4, #16]
 8004f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f7c:	463a      	mov	r2, r7
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4798      	blx	r3
 8004f82:	462e      	mov	r6, r5
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	f012 0210 	ands.w	r2, r2, #16
 8004f8a:	d001      	beq.n	8004f90 <_scanf_float+0x370>
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e68b      	b.n	8004ca8 <_scanf_float+0x88>
 8004f90:	7032      	strb	r2, [r6, #0]
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9c:	d11c      	bne.n	8004fd8 <_scanf_float+0x3b8>
 8004f9e:	9b02      	ldr	r3, [sp, #8]
 8004fa0:	454b      	cmp	r3, r9
 8004fa2:	eba3 0209 	sub.w	r2, r3, r9
 8004fa6:	d123      	bne.n	8004ff0 <_scanf_float+0x3d0>
 8004fa8:	9901      	ldr	r1, [sp, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	4640      	mov	r0, r8
 8004fae:	f002 fbf7 	bl	80077a0 <_strtod_r>
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	6821      	ldr	r1, [r4, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f011 0f02 	tst.w	r1, #2
 8004fbc:	ec57 6b10 	vmov	r6, r7, d0
 8004fc0:	f103 0204 	add.w	r2, r3, #4
 8004fc4:	d01f      	beq.n	8005006 <_scanf_float+0x3e6>
 8004fc6:	9903      	ldr	r1, [sp, #12]
 8004fc8:	600a      	str	r2, [r1, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	e9c3 6700 	strd	r6, r7, [r3]
 8004fd0:	68e3      	ldr	r3, [r4, #12]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	60e3      	str	r3, [r4, #12]
 8004fd6:	e7d9      	b.n	8004f8c <_scanf_float+0x36c>
 8004fd8:	9b04      	ldr	r3, [sp, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0e4      	beq.n	8004fa8 <_scanf_float+0x388>
 8004fde:	9905      	ldr	r1, [sp, #20]
 8004fe0:	230a      	movs	r3, #10
 8004fe2:	3101      	adds	r1, #1
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	f002 fc5b 	bl	80078a0 <_strtol_r>
 8004fea:	9b04      	ldr	r3, [sp, #16]
 8004fec:	9e05      	ldr	r6, [sp, #20]
 8004fee:	1ac2      	subs	r2, r0, r3
 8004ff0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004ff4:	429e      	cmp	r6, r3
 8004ff6:	bf28      	it	cs
 8004ff8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004ffc:	4910      	ldr	r1, [pc, #64]	@ (8005040 <_scanf_float+0x420>)
 8004ffe:	4630      	mov	r0, r6
 8005000:	f000 f8e4 	bl	80051cc <siprintf>
 8005004:	e7d0      	b.n	8004fa8 <_scanf_float+0x388>
 8005006:	f011 0f04 	tst.w	r1, #4
 800500a:	9903      	ldr	r1, [sp, #12]
 800500c:	600a      	str	r2, [r1, #0]
 800500e:	d1dc      	bne.n	8004fca <_scanf_float+0x3aa>
 8005010:	681d      	ldr	r5, [r3, #0]
 8005012:	4632      	mov	r2, r6
 8005014:	463b      	mov	r3, r7
 8005016:	4630      	mov	r0, r6
 8005018:	4639      	mov	r1, r7
 800501a:	f7fb fdaf 	bl	8000b7c <__aeabi_dcmpun>
 800501e:	b128      	cbz	r0, 800502c <_scanf_float+0x40c>
 8005020:	4808      	ldr	r0, [pc, #32]	@ (8005044 <_scanf_float+0x424>)
 8005022:	f000 f9b7 	bl	8005394 <nanf>
 8005026:	ed85 0a00 	vstr	s0, [r5]
 800502a:	e7d1      	b.n	8004fd0 <_scanf_float+0x3b0>
 800502c:	4630      	mov	r0, r6
 800502e:	4639      	mov	r1, r7
 8005030:	f7fb fe02 	bl	8000c38 <__aeabi_d2f>
 8005034:	6028      	str	r0, [r5, #0]
 8005036:	e7cb      	b.n	8004fd0 <_scanf_float+0x3b0>
 8005038:	f04f 0900 	mov.w	r9, #0
 800503c:	e629      	b.n	8004c92 <_scanf_float+0x72>
 800503e:	bf00      	nop
 8005040:	08008adc 	.word	0x08008adc
 8005044:	08008e75 	.word	0x08008e75

08005048 <std>:
 8005048:	2300      	movs	r3, #0
 800504a:	b510      	push	{r4, lr}
 800504c:	4604      	mov	r4, r0
 800504e:	e9c0 3300 	strd	r3, r3, [r0]
 8005052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005056:	6083      	str	r3, [r0, #8]
 8005058:	8181      	strh	r1, [r0, #12]
 800505a:	6643      	str	r3, [r0, #100]	@ 0x64
 800505c:	81c2      	strh	r2, [r0, #14]
 800505e:	6183      	str	r3, [r0, #24]
 8005060:	4619      	mov	r1, r3
 8005062:	2208      	movs	r2, #8
 8005064:	305c      	adds	r0, #92	@ 0x5c
 8005066:	f000 f914 	bl	8005292 <memset>
 800506a:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <std+0x58>)
 800506c:	6263      	str	r3, [r4, #36]	@ 0x24
 800506e:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <std+0x5c>)
 8005070:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <std+0x60>)
 8005074:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <std+0x64>)
 8005078:	6323      	str	r3, [r4, #48]	@ 0x30
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <std+0x68>)
 800507c:	6224      	str	r4, [r4, #32]
 800507e:	429c      	cmp	r4, r3
 8005080:	d006      	beq.n	8005090 <std+0x48>
 8005082:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005086:	4294      	cmp	r4, r2
 8005088:	d002      	beq.n	8005090 <std+0x48>
 800508a:	33d0      	adds	r3, #208	@ 0xd0
 800508c:	429c      	cmp	r4, r3
 800508e:	d105      	bne.n	800509c <std+0x54>
 8005090:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005098:	f000 b978 	b.w	800538c <__retarget_lock_init_recursive>
 800509c:	bd10      	pop	{r4, pc}
 800509e:	bf00      	nop
 80050a0:	0800520d 	.word	0x0800520d
 80050a4:	0800522f 	.word	0x0800522f
 80050a8:	08005267 	.word	0x08005267
 80050ac:	0800528b 	.word	0x0800528b
 80050b0:	2000031c 	.word	0x2000031c

080050b4 <stdio_exit_handler>:
 80050b4:	4a02      	ldr	r2, [pc, #8]	@ (80050c0 <stdio_exit_handler+0xc>)
 80050b6:	4903      	ldr	r1, [pc, #12]	@ (80050c4 <stdio_exit_handler+0x10>)
 80050b8:	4803      	ldr	r0, [pc, #12]	@ (80050c8 <stdio_exit_handler+0x14>)
 80050ba:	f000 b869 	b.w	8005190 <_fwalk_sglue>
 80050be:	bf00      	nop
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	08007c5d 	.word	0x08007c5d
 80050c8:	2000001c 	.word	0x2000001c

080050cc <cleanup_stdio>:
 80050cc:	6841      	ldr	r1, [r0, #4]
 80050ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <cleanup_stdio+0x34>)
 80050d0:	4299      	cmp	r1, r3
 80050d2:	b510      	push	{r4, lr}
 80050d4:	4604      	mov	r4, r0
 80050d6:	d001      	beq.n	80050dc <cleanup_stdio+0x10>
 80050d8:	f002 fdc0 	bl	8007c5c <_fflush_r>
 80050dc:	68a1      	ldr	r1, [r4, #8]
 80050de:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <cleanup_stdio+0x38>)
 80050e0:	4299      	cmp	r1, r3
 80050e2:	d002      	beq.n	80050ea <cleanup_stdio+0x1e>
 80050e4:	4620      	mov	r0, r4
 80050e6:	f002 fdb9 	bl	8007c5c <_fflush_r>
 80050ea:	68e1      	ldr	r1, [r4, #12]
 80050ec:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <cleanup_stdio+0x3c>)
 80050ee:	4299      	cmp	r1, r3
 80050f0:	d004      	beq.n	80050fc <cleanup_stdio+0x30>
 80050f2:	4620      	mov	r0, r4
 80050f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f8:	f002 bdb0 	b.w	8007c5c <_fflush_r>
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	bf00      	nop
 8005100:	2000031c 	.word	0x2000031c
 8005104:	20000384 	.word	0x20000384
 8005108:	200003ec 	.word	0x200003ec

0800510c <global_stdio_init.part.0>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <global_stdio_init.part.0+0x30>)
 8005110:	4c0b      	ldr	r4, [pc, #44]	@ (8005140 <global_stdio_init.part.0+0x34>)
 8005112:	4a0c      	ldr	r2, [pc, #48]	@ (8005144 <global_stdio_init.part.0+0x38>)
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	4620      	mov	r0, r4
 8005118:	2200      	movs	r2, #0
 800511a:	2104      	movs	r1, #4
 800511c:	f7ff ff94 	bl	8005048 <std>
 8005120:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005124:	2201      	movs	r2, #1
 8005126:	2109      	movs	r1, #9
 8005128:	f7ff ff8e 	bl	8005048 <std>
 800512c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005130:	2202      	movs	r2, #2
 8005132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005136:	2112      	movs	r1, #18
 8005138:	f7ff bf86 	b.w	8005048 <std>
 800513c:	20000454 	.word	0x20000454
 8005140:	2000031c 	.word	0x2000031c
 8005144:	080050b5 	.word	0x080050b5

08005148 <__sfp_lock_acquire>:
 8005148:	4801      	ldr	r0, [pc, #4]	@ (8005150 <__sfp_lock_acquire+0x8>)
 800514a:	f000 b920 	b.w	800538e <__retarget_lock_acquire_recursive>
 800514e:	bf00      	nop
 8005150:	2000045d 	.word	0x2000045d

08005154 <__sfp_lock_release>:
 8005154:	4801      	ldr	r0, [pc, #4]	@ (800515c <__sfp_lock_release+0x8>)
 8005156:	f000 b91b 	b.w	8005390 <__retarget_lock_release_recursive>
 800515a:	bf00      	nop
 800515c:	2000045d 	.word	0x2000045d

08005160 <__sinit>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4604      	mov	r4, r0
 8005164:	f7ff fff0 	bl	8005148 <__sfp_lock_acquire>
 8005168:	6a23      	ldr	r3, [r4, #32]
 800516a:	b11b      	cbz	r3, 8005174 <__sinit+0x14>
 800516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005170:	f7ff bff0 	b.w	8005154 <__sfp_lock_release>
 8005174:	4b04      	ldr	r3, [pc, #16]	@ (8005188 <__sinit+0x28>)
 8005176:	6223      	str	r3, [r4, #32]
 8005178:	4b04      	ldr	r3, [pc, #16]	@ (800518c <__sinit+0x2c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f5      	bne.n	800516c <__sinit+0xc>
 8005180:	f7ff ffc4 	bl	800510c <global_stdio_init.part.0>
 8005184:	e7f2      	b.n	800516c <__sinit+0xc>
 8005186:	bf00      	nop
 8005188:	080050cd 	.word	0x080050cd
 800518c:	20000454 	.word	0x20000454

08005190 <_fwalk_sglue>:
 8005190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005194:	4607      	mov	r7, r0
 8005196:	4688      	mov	r8, r1
 8005198:	4614      	mov	r4, r2
 800519a:	2600      	movs	r6, #0
 800519c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051a0:	f1b9 0901 	subs.w	r9, r9, #1
 80051a4:	d505      	bpl.n	80051b2 <_fwalk_sglue+0x22>
 80051a6:	6824      	ldr	r4, [r4, #0]
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d1f7      	bne.n	800519c <_fwalk_sglue+0xc>
 80051ac:	4630      	mov	r0, r6
 80051ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b2:	89ab      	ldrh	r3, [r5, #12]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d907      	bls.n	80051c8 <_fwalk_sglue+0x38>
 80051b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051bc:	3301      	adds	r3, #1
 80051be:	d003      	beq.n	80051c8 <_fwalk_sglue+0x38>
 80051c0:	4629      	mov	r1, r5
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c0      	blx	r8
 80051c6:	4306      	orrs	r6, r0
 80051c8:	3568      	adds	r5, #104	@ 0x68
 80051ca:	e7e9      	b.n	80051a0 <_fwalk_sglue+0x10>

080051cc <siprintf>:
 80051cc:	b40e      	push	{r1, r2, r3}
 80051ce:	b500      	push	{lr}
 80051d0:	b09c      	sub	sp, #112	@ 0x70
 80051d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80051d4:	9002      	str	r0, [sp, #8]
 80051d6:	9006      	str	r0, [sp, #24]
 80051d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80051dc:	4809      	ldr	r0, [pc, #36]	@ (8005204 <siprintf+0x38>)
 80051de:	9107      	str	r1, [sp, #28]
 80051e0:	9104      	str	r1, [sp, #16]
 80051e2:	4909      	ldr	r1, [pc, #36]	@ (8005208 <siprintf+0x3c>)
 80051e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e8:	9105      	str	r1, [sp, #20]
 80051ea:	6800      	ldr	r0, [r0, #0]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	a902      	add	r1, sp, #8
 80051f0:	f002 fbb4 	bl	800795c <_svfiprintf_r>
 80051f4:	9b02      	ldr	r3, [sp, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	b01c      	add	sp, #112	@ 0x70
 80051fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005200:	b003      	add	sp, #12
 8005202:	4770      	bx	lr
 8005204:	20000018 	.word	0x20000018
 8005208:	ffff0208 	.word	0xffff0208

0800520c <__sread>:
 800520c:	b510      	push	{r4, lr}
 800520e:	460c      	mov	r4, r1
 8005210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005214:	f000 f86c 	bl	80052f0 <_read_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	bfab      	itete	ge
 800521c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800521e:	89a3      	ldrhlt	r3, [r4, #12]
 8005220:	181b      	addge	r3, r3, r0
 8005222:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005226:	bfac      	ite	ge
 8005228:	6563      	strge	r3, [r4, #84]	@ 0x54
 800522a:	81a3      	strhlt	r3, [r4, #12]
 800522c:	bd10      	pop	{r4, pc}

0800522e <__swrite>:
 800522e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005232:	461f      	mov	r7, r3
 8005234:	898b      	ldrh	r3, [r1, #12]
 8005236:	05db      	lsls	r3, r3, #23
 8005238:	4605      	mov	r5, r0
 800523a:	460c      	mov	r4, r1
 800523c:	4616      	mov	r6, r2
 800523e:	d505      	bpl.n	800524c <__swrite+0x1e>
 8005240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005244:	2302      	movs	r3, #2
 8005246:	2200      	movs	r2, #0
 8005248:	f000 f840 	bl	80052cc <_lseek_r>
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005252:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	4632      	mov	r2, r6
 800525a:	463b      	mov	r3, r7
 800525c:	4628      	mov	r0, r5
 800525e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005262:	f000 b857 	b.w	8005314 <_write_r>

08005266 <__sseek>:
 8005266:	b510      	push	{r4, lr}
 8005268:	460c      	mov	r4, r1
 800526a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526e:	f000 f82d 	bl	80052cc <_lseek_r>
 8005272:	1c43      	adds	r3, r0, #1
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	bf15      	itete	ne
 8005278:	6560      	strne	r0, [r4, #84]	@ 0x54
 800527a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800527e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005282:	81a3      	strheq	r3, [r4, #12]
 8005284:	bf18      	it	ne
 8005286:	81a3      	strhne	r3, [r4, #12]
 8005288:	bd10      	pop	{r4, pc}

0800528a <__sclose>:
 800528a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528e:	f000 b80d 	b.w	80052ac <_close_r>

08005292 <memset>:
 8005292:	4402      	add	r2, r0
 8005294:	4603      	mov	r3, r0
 8005296:	4293      	cmp	r3, r2
 8005298:	d100      	bne.n	800529c <memset+0xa>
 800529a:	4770      	bx	lr
 800529c:	f803 1b01 	strb.w	r1, [r3], #1
 80052a0:	e7f9      	b.n	8005296 <memset+0x4>
	...

080052a4 <_localeconv_r>:
 80052a4:	4800      	ldr	r0, [pc, #0]	@ (80052a8 <_localeconv_r+0x4>)
 80052a6:	4770      	bx	lr
 80052a8:	20000158 	.word	0x20000158

080052ac <_close_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d06      	ldr	r5, [pc, #24]	@ (80052c8 <_close_r+0x1c>)
 80052b0:	2300      	movs	r3, #0
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	f7fc f992 	bl	80015e0 <_close>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_close_r+0x1a>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_close_r+0x1a>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	20000458 	.word	0x20000458

080052cc <_lseek_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d07      	ldr	r5, [pc, #28]	@ (80052ec <_lseek_r+0x20>)
 80052d0:	4604      	mov	r4, r0
 80052d2:	4608      	mov	r0, r1
 80052d4:	4611      	mov	r1, r2
 80052d6:	2200      	movs	r2, #0
 80052d8:	602a      	str	r2, [r5, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7fc f9a7 	bl	800162e <_lseek>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_lseek_r+0x1e>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_lseek_r+0x1e>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20000458 	.word	0x20000458

080052f0 <_read_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	@ (8005310 <_read_r+0x20>)
 80052f4:	4604      	mov	r4, r0
 80052f6:	4608      	mov	r0, r1
 80052f8:	4611      	mov	r1, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	602a      	str	r2, [r5, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f7fc f935 	bl	800156e <_read>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_read_r+0x1e>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_read_r+0x1e>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	20000458 	.word	0x20000458

08005314 <_write_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d07      	ldr	r5, [pc, #28]	@ (8005334 <_write_r+0x20>)
 8005318:	4604      	mov	r4, r0
 800531a:	4608      	mov	r0, r1
 800531c:	4611      	mov	r1, r2
 800531e:	2200      	movs	r2, #0
 8005320:	602a      	str	r2, [r5, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	f7fc f940 	bl	80015a8 <_write>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d102      	bne.n	8005332 <_write_r+0x1e>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b103      	cbz	r3, 8005332 <_write_r+0x1e>
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	20000458 	.word	0x20000458

08005338 <__errno>:
 8005338:	4b01      	ldr	r3, [pc, #4]	@ (8005340 <__errno+0x8>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000018 	.word	0x20000018

08005344 <__libc_init_array>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	4d0d      	ldr	r5, [pc, #52]	@ (800537c <__libc_init_array+0x38>)
 8005348:	4c0d      	ldr	r4, [pc, #52]	@ (8005380 <__libc_init_array+0x3c>)
 800534a:	1b64      	subs	r4, r4, r5
 800534c:	10a4      	asrs	r4, r4, #2
 800534e:	2600      	movs	r6, #0
 8005350:	42a6      	cmp	r6, r4
 8005352:	d109      	bne.n	8005368 <__libc_init_array+0x24>
 8005354:	4d0b      	ldr	r5, [pc, #44]	@ (8005384 <__libc_init_array+0x40>)
 8005356:	4c0c      	ldr	r4, [pc, #48]	@ (8005388 <__libc_init_array+0x44>)
 8005358:	f003 fb70 	bl	8008a3c <_init>
 800535c:	1b64      	subs	r4, r4, r5
 800535e:	10a4      	asrs	r4, r4, #2
 8005360:	2600      	movs	r6, #0
 8005362:	42a6      	cmp	r6, r4
 8005364:	d105      	bne.n	8005372 <__libc_init_array+0x2e>
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	f855 3b04 	ldr.w	r3, [r5], #4
 800536c:	4798      	blx	r3
 800536e:	3601      	adds	r6, #1
 8005370:	e7ee      	b.n	8005350 <__libc_init_array+0xc>
 8005372:	f855 3b04 	ldr.w	r3, [r5], #4
 8005376:	4798      	blx	r3
 8005378:	3601      	adds	r6, #1
 800537a:	e7f2      	b.n	8005362 <__libc_init_array+0x1e>
 800537c:	08008ee0 	.word	0x08008ee0
 8005380:	08008ee0 	.word	0x08008ee0
 8005384:	08008ee0 	.word	0x08008ee0
 8005388:	08008ee4 	.word	0x08008ee4

0800538c <__retarget_lock_init_recursive>:
 800538c:	4770      	bx	lr

0800538e <__retarget_lock_acquire_recursive>:
 800538e:	4770      	bx	lr

08005390 <__retarget_lock_release_recursive>:
 8005390:	4770      	bx	lr
	...

08005394 <nanf>:
 8005394:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800539c <nanf+0x8>
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	7fc00000 	.word	0x7fc00000

080053a0 <quorem>:
 80053a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	6903      	ldr	r3, [r0, #16]
 80053a6:	690c      	ldr	r4, [r1, #16]
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	4607      	mov	r7, r0
 80053ac:	db7e      	blt.n	80054ac <quorem+0x10c>
 80053ae:	3c01      	subs	r4, #1
 80053b0:	f101 0814 	add.w	r8, r1, #20
 80053b4:	00a3      	lsls	r3, r4, #2
 80053b6:	f100 0514 	add.w	r5, r0, #20
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053ca:	3301      	adds	r3, #1
 80053cc:	429a      	cmp	r2, r3
 80053ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80053d6:	d32e      	bcc.n	8005436 <quorem+0x96>
 80053d8:	f04f 0a00 	mov.w	sl, #0
 80053dc:	46c4      	mov	ip, r8
 80053de:	46ae      	mov	lr, r5
 80053e0:	46d3      	mov	fp, sl
 80053e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80053e6:	b298      	uxth	r0, r3
 80053e8:	fb06 a000 	mla	r0, r6, r0, sl
 80053ec:	0c02      	lsrs	r2, r0, #16
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	fb06 2303 	mla	r3, r6, r3, r2
 80053f4:	f8de 2000 	ldr.w	r2, [lr]
 80053f8:	b280      	uxth	r0, r0
 80053fa:	b292      	uxth	r2, r2
 80053fc:	1a12      	subs	r2, r2, r0
 80053fe:	445a      	add	r2, fp
 8005400:	f8de 0000 	ldr.w	r0, [lr]
 8005404:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005408:	b29b      	uxth	r3, r3
 800540a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800540e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005412:	b292      	uxth	r2, r2
 8005414:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005418:	45e1      	cmp	r9, ip
 800541a:	f84e 2b04 	str.w	r2, [lr], #4
 800541e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005422:	d2de      	bcs.n	80053e2 <quorem+0x42>
 8005424:	9b00      	ldr	r3, [sp, #0]
 8005426:	58eb      	ldr	r3, [r5, r3]
 8005428:	b92b      	cbnz	r3, 8005436 <quorem+0x96>
 800542a:	9b01      	ldr	r3, [sp, #4]
 800542c:	3b04      	subs	r3, #4
 800542e:	429d      	cmp	r5, r3
 8005430:	461a      	mov	r2, r3
 8005432:	d32f      	bcc.n	8005494 <quorem+0xf4>
 8005434:	613c      	str	r4, [r7, #16]
 8005436:	4638      	mov	r0, r7
 8005438:	f001 f9c2 	bl	80067c0 <__mcmp>
 800543c:	2800      	cmp	r0, #0
 800543e:	db25      	blt.n	800548c <quorem+0xec>
 8005440:	4629      	mov	r1, r5
 8005442:	2000      	movs	r0, #0
 8005444:	f858 2b04 	ldr.w	r2, [r8], #4
 8005448:	f8d1 c000 	ldr.w	ip, [r1]
 800544c:	fa1f fe82 	uxth.w	lr, r2
 8005450:	fa1f f38c 	uxth.w	r3, ip
 8005454:	eba3 030e 	sub.w	r3, r3, lr
 8005458:	4403      	add	r3, r0
 800545a:	0c12      	lsrs	r2, r2, #16
 800545c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005460:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800546a:	45c1      	cmp	r9, r8
 800546c:	f841 3b04 	str.w	r3, [r1], #4
 8005470:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005474:	d2e6      	bcs.n	8005444 <quorem+0xa4>
 8005476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800547a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800547e:	b922      	cbnz	r2, 800548a <quorem+0xea>
 8005480:	3b04      	subs	r3, #4
 8005482:	429d      	cmp	r5, r3
 8005484:	461a      	mov	r2, r3
 8005486:	d30b      	bcc.n	80054a0 <quorem+0x100>
 8005488:	613c      	str	r4, [r7, #16]
 800548a:	3601      	adds	r6, #1
 800548c:	4630      	mov	r0, r6
 800548e:	b003      	add	sp, #12
 8005490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	3b04      	subs	r3, #4
 8005498:	2a00      	cmp	r2, #0
 800549a:	d1cb      	bne.n	8005434 <quorem+0x94>
 800549c:	3c01      	subs	r4, #1
 800549e:	e7c6      	b.n	800542e <quorem+0x8e>
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	3b04      	subs	r3, #4
 80054a4:	2a00      	cmp	r2, #0
 80054a6:	d1ef      	bne.n	8005488 <quorem+0xe8>
 80054a8:	3c01      	subs	r4, #1
 80054aa:	e7ea      	b.n	8005482 <quorem+0xe2>
 80054ac:	2000      	movs	r0, #0
 80054ae:	e7ee      	b.n	800548e <quorem+0xee>

080054b0 <_dtoa_r>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	69c7      	ldr	r7, [r0, #28]
 80054b6:	b099      	sub	sp, #100	@ 0x64
 80054b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80054bc:	ec55 4b10 	vmov	r4, r5, d0
 80054c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80054c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80054c4:	4683      	mov	fp, r0
 80054c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80054c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054ca:	b97f      	cbnz	r7, 80054ec <_dtoa_r+0x3c>
 80054cc:	2010      	movs	r0, #16
 80054ce:	f000 fdfd 	bl	80060cc <malloc>
 80054d2:	4602      	mov	r2, r0
 80054d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80054d8:	b920      	cbnz	r0, 80054e4 <_dtoa_r+0x34>
 80054da:	4ba7      	ldr	r3, [pc, #668]	@ (8005778 <_dtoa_r+0x2c8>)
 80054dc:	21ef      	movs	r1, #239	@ 0xef
 80054de:	48a7      	ldr	r0, [pc, #668]	@ (800577c <_dtoa_r+0x2cc>)
 80054e0:	f002 fc36 	bl	8007d50 <__assert_func>
 80054e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80054e8:	6007      	str	r7, [r0, #0]
 80054ea:	60c7      	str	r7, [r0, #12]
 80054ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	b159      	cbz	r1, 800550c <_dtoa_r+0x5c>
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	604a      	str	r2, [r1, #4]
 80054f8:	2301      	movs	r3, #1
 80054fa:	4093      	lsls	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
 80054fe:	4658      	mov	r0, fp
 8005500:	f000 feda 	bl	80062b8 <_Bfree>
 8005504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	1e2b      	subs	r3, r5, #0
 800550e:	bfb9      	ittee	lt
 8005510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005514:	9303      	strlt	r3, [sp, #12]
 8005516:	2300      	movge	r3, #0
 8005518:	6033      	strge	r3, [r6, #0]
 800551a:	9f03      	ldr	r7, [sp, #12]
 800551c:	4b98      	ldr	r3, [pc, #608]	@ (8005780 <_dtoa_r+0x2d0>)
 800551e:	bfbc      	itt	lt
 8005520:	2201      	movlt	r2, #1
 8005522:	6032      	strlt	r2, [r6, #0]
 8005524:	43bb      	bics	r3, r7
 8005526:	d112      	bne.n	800554e <_dtoa_r+0x9e>
 8005528:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800552a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005534:	4323      	orrs	r3, r4
 8005536:	f000 854d 	beq.w	8005fd4 <_dtoa_r+0xb24>
 800553a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800553c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005794 <_dtoa_r+0x2e4>
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 854f 	beq.w	8005fe4 <_dtoa_r+0xb34>
 8005546:	f10a 0303 	add.w	r3, sl, #3
 800554a:	f000 bd49 	b.w	8005fe0 <_dtoa_r+0xb30>
 800554e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	ec51 0b17 	vmov	r0, r1, d7
 8005558:	2300      	movs	r3, #0
 800555a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800555e:	f7fb fadb 	bl	8000b18 <__aeabi_dcmpeq>
 8005562:	4680      	mov	r8, r0
 8005564:	b158      	cbz	r0, 800557e <_dtoa_r+0xce>
 8005566:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005568:	2301      	movs	r3, #1
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800556e:	b113      	cbz	r3, 8005576 <_dtoa_r+0xc6>
 8005570:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005572:	4b84      	ldr	r3, [pc, #528]	@ (8005784 <_dtoa_r+0x2d4>)
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005798 <_dtoa_r+0x2e8>
 800557a:	f000 bd33 	b.w	8005fe4 <_dtoa_r+0xb34>
 800557e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005582:	aa16      	add	r2, sp, #88	@ 0x58
 8005584:	a917      	add	r1, sp, #92	@ 0x5c
 8005586:	4658      	mov	r0, fp
 8005588:	f001 fa3a 	bl	8006a00 <__d2b>
 800558c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005590:	4681      	mov	r9, r0
 8005592:	2e00      	cmp	r6, #0
 8005594:	d077      	beq.n	8005686 <_dtoa_r+0x1d6>
 8005596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005598:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800559c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80055a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80055ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80055b0:	4619      	mov	r1, r3
 80055b2:	2200      	movs	r2, #0
 80055b4:	4b74      	ldr	r3, [pc, #464]	@ (8005788 <_dtoa_r+0x2d8>)
 80055b6:	f7fa fe8f 	bl	80002d8 <__aeabi_dsub>
 80055ba:	a369      	add	r3, pc, #420	@ (adr r3, 8005760 <_dtoa_r+0x2b0>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fb f842 	bl	8000648 <__aeabi_dmul>
 80055c4:	a368      	add	r3, pc, #416	@ (adr r3, 8005768 <_dtoa_r+0x2b8>)
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f7fa fe87 	bl	80002dc <__adddf3>
 80055ce:	4604      	mov	r4, r0
 80055d0:	4630      	mov	r0, r6
 80055d2:	460d      	mov	r5, r1
 80055d4:	f7fa ffce 	bl	8000574 <__aeabi_i2d>
 80055d8:	a365      	add	r3, pc, #404	@ (adr r3, 8005770 <_dtoa_r+0x2c0>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fb f833 	bl	8000648 <__aeabi_dmul>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4620      	mov	r0, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7fa fe77 	bl	80002dc <__adddf3>
 80055ee:	4604      	mov	r4, r0
 80055f0:	460d      	mov	r5, r1
 80055f2:	f7fb fad9 	bl	8000ba8 <__aeabi_d2iz>
 80055f6:	2200      	movs	r2, #0
 80055f8:	4607      	mov	r7, r0
 80055fa:	2300      	movs	r3, #0
 80055fc:	4620      	mov	r0, r4
 80055fe:	4629      	mov	r1, r5
 8005600:	f7fb fa94 	bl	8000b2c <__aeabi_dcmplt>
 8005604:	b140      	cbz	r0, 8005618 <_dtoa_r+0x168>
 8005606:	4638      	mov	r0, r7
 8005608:	f7fa ffb4 	bl	8000574 <__aeabi_i2d>
 800560c:	4622      	mov	r2, r4
 800560e:	462b      	mov	r3, r5
 8005610:	f7fb fa82 	bl	8000b18 <__aeabi_dcmpeq>
 8005614:	b900      	cbnz	r0, 8005618 <_dtoa_r+0x168>
 8005616:	3f01      	subs	r7, #1
 8005618:	2f16      	cmp	r7, #22
 800561a:	d851      	bhi.n	80056c0 <_dtoa_r+0x210>
 800561c:	4b5b      	ldr	r3, [pc, #364]	@ (800578c <_dtoa_r+0x2dc>)
 800561e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800562a:	f7fb fa7f 	bl	8000b2c <__aeabi_dcmplt>
 800562e:	2800      	cmp	r0, #0
 8005630:	d048      	beq.n	80056c4 <_dtoa_r+0x214>
 8005632:	3f01      	subs	r7, #1
 8005634:	2300      	movs	r3, #0
 8005636:	9312      	str	r3, [sp, #72]	@ 0x48
 8005638:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800563a:	1b9b      	subs	r3, r3, r6
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	bf44      	itt	mi
 8005640:	f1c3 0801 	rsbmi	r8, r3, #1
 8005644:	2300      	movmi	r3, #0
 8005646:	9208      	str	r2, [sp, #32]
 8005648:	bf54      	ite	pl
 800564a:	f04f 0800 	movpl.w	r8, #0
 800564e:	9308      	strmi	r3, [sp, #32]
 8005650:	2f00      	cmp	r7, #0
 8005652:	db39      	blt.n	80056c8 <_dtoa_r+0x218>
 8005654:	9b08      	ldr	r3, [sp, #32]
 8005656:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005658:	443b      	add	r3, r7
 800565a:	9308      	str	r3, [sp, #32]
 800565c:	2300      	movs	r3, #0
 800565e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005662:	2b09      	cmp	r3, #9
 8005664:	d864      	bhi.n	8005730 <_dtoa_r+0x280>
 8005666:	2b05      	cmp	r3, #5
 8005668:	bfc4      	itt	gt
 800566a:	3b04      	subgt	r3, #4
 800566c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800566e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005670:	f1a3 0302 	sub.w	r3, r3, #2
 8005674:	bfcc      	ite	gt
 8005676:	2400      	movgt	r4, #0
 8005678:	2401      	movle	r4, #1
 800567a:	2b03      	cmp	r3, #3
 800567c:	d863      	bhi.n	8005746 <_dtoa_r+0x296>
 800567e:	e8df f003 	tbb	[pc, r3]
 8005682:	372a      	.short	0x372a
 8005684:	5535      	.short	0x5535
 8005686:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800568a:	441e      	add	r6, r3
 800568c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005690:	2b20      	cmp	r3, #32
 8005692:	bfc1      	itttt	gt
 8005694:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005698:	409f      	lslgt	r7, r3
 800569a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800569e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80056a2:	bfd6      	itet	le
 80056a4:	f1c3 0320 	rsble	r3, r3, #32
 80056a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80056ac:	fa04 f003 	lslle.w	r0, r4, r3
 80056b0:	f7fa ff50 	bl	8000554 <__aeabi_ui2d>
 80056b4:	2201      	movs	r2, #1
 80056b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80056ba:	3e01      	subs	r6, #1
 80056bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80056be:	e777      	b.n	80055b0 <_dtoa_r+0x100>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e7b8      	b.n	8005636 <_dtoa_r+0x186>
 80056c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80056c6:	e7b7      	b.n	8005638 <_dtoa_r+0x188>
 80056c8:	427b      	negs	r3, r7
 80056ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80056cc:	2300      	movs	r3, #0
 80056ce:	eba8 0807 	sub.w	r8, r8, r7
 80056d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80056d4:	e7c4      	b.n	8005660 <_dtoa_r+0x1b0>
 80056d6:	2300      	movs	r3, #0
 80056d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dc35      	bgt.n	800574c <_dtoa_r+0x29c>
 80056e0:	2301      	movs	r3, #1
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	9307      	str	r3, [sp, #28]
 80056e6:	461a      	mov	r2, r3
 80056e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80056ea:	e00b      	b.n	8005704 <_dtoa_r+0x254>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e7f3      	b.n	80056d8 <_dtoa_r+0x228>
 80056f0:	2300      	movs	r3, #0
 80056f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	bfb8      	it	lt
 8005702:	2301      	movlt	r3, #1
 8005704:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005708:	2100      	movs	r1, #0
 800570a:	2204      	movs	r2, #4
 800570c:	f102 0514 	add.w	r5, r2, #20
 8005710:	429d      	cmp	r5, r3
 8005712:	d91f      	bls.n	8005754 <_dtoa_r+0x2a4>
 8005714:	6041      	str	r1, [r0, #4]
 8005716:	4658      	mov	r0, fp
 8005718:	f000 fd8e 	bl	8006238 <_Balloc>
 800571c:	4682      	mov	sl, r0
 800571e:	2800      	cmp	r0, #0
 8005720:	d13c      	bne.n	800579c <_dtoa_r+0x2ec>
 8005722:	4b1b      	ldr	r3, [pc, #108]	@ (8005790 <_dtoa_r+0x2e0>)
 8005724:	4602      	mov	r2, r0
 8005726:	f240 11af 	movw	r1, #431	@ 0x1af
 800572a:	e6d8      	b.n	80054de <_dtoa_r+0x2e>
 800572c:	2301      	movs	r3, #1
 800572e:	e7e0      	b.n	80056f2 <_dtoa_r+0x242>
 8005730:	2401      	movs	r4, #1
 8005732:	2300      	movs	r3, #0
 8005734:	9309      	str	r3, [sp, #36]	@ 0x24
 8005736:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	9307      	str	r3, [sp, #28]
 8005740:	2200      	movs	r2, #0
 8005742:	2312      	movs	r3, #18
 8005744:	e7d0      	b.n	80056e8 <_dtoa_r+0x238>
 8005746:	2301      	movs	r3, #1
 8005748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800574a:	e7f5      	b.n	8005738 <_dtoa_r+0x288>
 800574c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	9307      	str	r3, [sp, #28]
 8005752:	e7d7      	b.n	8005704 <_dtoa_r+0x254>
 8005754:	3101      	adds	r1, #1
 8005756:	0052      	lsls	r2, r2, #1
 8005758:	e7d8      	b.n	800570c <_dtoa_r+0x25c>
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w
 8005760:	636f4361 	.word	0x636f4361
 8005764:	3fd287a7 	.word	0x3fd287a7
 8005768:	8b60c8b3 	.word	0x8b60c8b3
 800576c:	3fc68a28 	.word	0x3fc68a28
 8005770:	509f79fb 	.word	0x509f79fb
 8005774:	3fd34413 	.word	0x3fd34413
 8005778:	08008aee 	.word	0x08008aee
 800577c:	08008b05 	.word	0x08008b05
 8005780:	7ff00000 	.word	0x7ff00000
 8005784:	08008ab9 	.word	0x08008ab9
 8005788:	3ff80000 	.word	0x3ff80000
 800578c:	08008c00 	.word	0x08008c00
 8005790:	08008b5d 	.word	0x08008b5d
 8005794:	08008aea 	.word	0x08008aea
 8005798:	08008ab8 	.word	0x08008ab8
 800579c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057a0:	6018      	str	r0, [r3, #0]
 80057a2:	9b07      	ldr	r3, [sp, #28]
 80057a4:	2b0e      	cmp	r3, #14
 80057a6:	f200 80a4 	bhi.w	80058f2 <_dtoa_r+0x442>
 80057aa:	2c00      	cmp	r4, #0
 80057ac:	f000 80a1 	beq.w	80058f2 <_dtoa_r+0x442>
 80057b0:	2f00      	cmp	r7, #0
 80057b2:	dd33      	ble.n	800581c <_dtoa_r+0x36c>
 80057b4:	4bad      	ldr	r3, [pc, #692]	@ (8005a6c <_dtoa_r+0x5bc>)
 80057b6:	f007 020f 	and.w	r2, r7, #15
 80057ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057be:	ed93 7b00 	vldr	d7, [r3]
 80057c2:	05f8      	lsls	r0, r7, #23
 80057c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80057c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80057cc:	d516      	bpl.n	80057fc <_dtoa_r+0x34c>
 80057ce:	4ba8      	ldr	r3, [pc, #672]	@ (8005a70 <_dtoa_r+0x5c0>)
 80057d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057d8:	f7fb f860 	bl	800089c <__aeabi_ddiv>
 80057dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057e0:	f004 040f 	and.w	r4, r4, #15
 80057e4:	2603      	movs	r6, #3
 80057e6:	4da2      	ldr	r5, [pc, #648]	@ (8005a70 <_dtoa_r+0x5c0>)
 80057e8:	b954      	cbnz	r4, 8005800 <_dtoa_r+0x350>
 80057ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f2:	f7fb f853 	bl	800089c <__aeabi_ddiv>
 80057f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057fa:	e028      	b.n	800584e <_dtoa_r+0x39e>
 80057fc:	2602      	movs	r6, #2
 80057fe:	e7f2      	b.n	80057e6 <_dtoa_r+0x336>
 8005800:	07e1      	lsls	r1, r4, #31
 8005802:	d508      	bpl.n	8005816 <_dtoa_r+0x366>
 8005804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800580c:	f7fa ff1c 	bl	8000648 <__aeabi_dmul>
 8005810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005814:	3601      	adds	r6, #1
 8005816:	1064      	asrs	r4, r4, #1
 8005818:	3508      	adds	r5, #8
 800581a:	e7e5      	b.n	80057e8 <_dtoa_r+0x338>
 800581c:	f000 80d2 	beq.w	80059c4 <_dtoa_r+0x514>
 8005820:	427c      	negs	r4, r7
 8005822:	4b92      	ldr	r3, [pc, #584]	@ (8005a6c <_dtoa_r+0x5bc>)
 8005824:	4d92      	ldr	r5, [pc, #584]	@ (8005a70 <_dtoa_r+0x5c0>)
 8005826:	f004 020f 	and.w	r2, r4, #15
 800582a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005836:	f7fa ff07 	bl	8000648 <__aeabi_dmul>
 800583a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800583e:	1124      	asrs	r4, r4, #4
 8005840:	2300      	movs	r3, #0
 8005842:	2602      	movs	r6, #2
 8005844:	2c00      	cmp	r4, #0
 8005846:	f040 80b2 	bne.w	80059ae <_dtoa_r+0x4fe>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1d3      	bne.n	80057f6 <_dtoa_r+0x346>
 800584e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005850:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80b7 	beq.w	80059c8 <_dtoa_r+0x518>
 800585a:	4b86      	ldr	r3, [pc, #536]	@ (8005a74 <_dtoa_r+0x5c4>)
 800585c:	2200      	movs	r2, #0
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fb f963 	bl	8000b2c <__aeabi_dcmplt>
 8005866:	2800      	cmp	r0, #0
 8005868:	f000 80ae 	beq.w	80059c8 <_dtoa_r+0x518>
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80aa 	beq.w	80059c8 <_dtoa_r+0x518>
 8005874:	9b00      	ldr	r3, [sp, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	dd37      	ble.n	80058ea <_dtoa_r+0x43a>
 800587a:	1e7b      	subs	r3, r7, #1
 800587c:	9304      	str	r3, [sp, #16]
 800587e:	4620      	mov	r0, r4
 8005880:	4b7d      	ldr	r3, [pc, #500]	@ (8005a78 <_dtoa_r+0x5c8>)
 8005882:	2200      	movs	r2, #0
 8005884:	4629      	mov	r1, r5
 8005886:	f7fa fedf 	bl	8000648 <__aeabi_dmul>
 800588a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800588e:	9c00      	ldr	r4, [sp, #0]
 8005890:	3601      	adds	r6, #1
 8005892:	4630      	mov	r0, r6
 8005894:	f7fa fe6e 	bl	8000574 <__aeabi_i2d>
 8005898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800589c:	f7fa fed4 	bl	8000648 <__aeabi_dmul>
 80058a0:	4b76      	ldr	r3, [pc, #472]	@ (8005a7c <_dtoa_r+0x5cc>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	f7fa fd1a 	bl	80002dc <__adddf3>
 80058a8:	4605      	mov	r5, r0
 80058aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80058ae:	2c00      	cmp	r4, #0
 80058b0:	f040 808d 	bne.w	80059ce <_dtoa_r+0x51e>
 80058b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058b8:	4b71      	ldr	r3, [pc, #452]	@ (8005a80 <_dtoa_r+0x5d0>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	f7fa fd0c 	bl	80002d8 <__aeabi_dsub>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4633      	mov	r3, r6
 80058cc:	f7fb f94c 	bl	8000b68 <__aeabi_dcmpgt>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	f040 828b 	bne.w	8005dec <_dtoa_r+0x93c>
 80058d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058da:	462a      	mov	r2, r5
 80058dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80058e0:	f7fb f924 	bl	8000b2c <__aeabi_dcmplt>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	f040 8128 	bne.w	8005b3a <_dtoa_r+0x68a>
 80058ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80058ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80058f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f2c0 815a 	blt.w	8005bae <_dtoa_r+0x6fe>
 80058fa:	2f0e      	cmp	r7, #14
 80058fc:	f300 8157 	bgt.w	8005bae <_dtoa_r+0x6fe>
 8005900:	4b5a      	ldr	r3, [pc, #360]	@ (8005a6c <_dtoa_r+0x5bc>)
 8005902:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005906:	ed93 7b00 	vldr	d7, [r3]
 800590a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800590c:	2b00      	cmp	r3, #0
 800590e:	ed8d 7b00 	vstr	d7, [sp]
 8005912:	da03      	bge.n	800591c <_dtoa_r+0x46c>
 8005914:	9b07      	ldr	r3, [sp, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f340 8101 	ble.w	8005b1e <_dtoa_r+0x66e>
 800591c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005920:	4656      	mov	r6, sl
 8005922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005926:	4620      	mov	r0, r4
 8005928:	4629      	mov	r1, r5
 800592a:	f7fa ffb7 	bl	800089c <__aeabi_ddiv>
 800592e:	f7fb f93b 	bl	8000ba8 <__aeabi_d2iz>
 8005932:	4680      	mov	r8, r0
 8005934:	f7fa fe1e 	bl	8000574 <__aeabi_i2d>
 8005938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800593c:	f7fa fe84 	bl	8000648 <__aeabi_dmul>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4620      	mov	r0, r4
 8005946:	4629      	mov	r1, r5
 8005948:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800594c:	f7fa fcc4 	bl	80002d8 <__aeabi_dsub>
 8005950:	f806 4b01 	strb.w	r4, [r6], #1
 8005954:	9d07      	ldr	r5, [sp, #28]
 8005956:	eba6 040a 	sub.w	r4, r6, sl
 800595a:	42a5      	cmp	r5, r4
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	f040 8117 	bne.w	8005b92 <_dtoa_r+0x6e2>
 8005964:	f7fa fcba 	bl	80002dc <__adddf3>
 8005968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800596c:	4604      	mov	r4, r0
 800596e:	460d      	mov	r5, r1
 8005970:	f7fb f8fa 	bl	8000b68 <__aeabi_dcmpgt>
 8005974:	2800      	cmp	r0, #0
 8005976:	f040 80f9 	bne.w	8005b6c <_dtoa_r+0x6bc>
 800597a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fb f8c9 	bl	8000b18 <__aeabi_dcmpeq>
 8005986:	b118      	cbz	r0, 8005990 <_dtoa_r+0x4e0>
 8005988:	f018 0f01 	tst.w	r8, #1
 800598c:	f040 80ee 	bne.w	8005b6c <_dtoa_r+0x6bc>
 8005990:	4649      	mov	r1, r9
 8005992:	4658      	mov	r0, fp
 8005994:	f000 fc90 	bl	80062b8 <_Bfree>
 8005998:	2300      	movs	r3, #0
 800599a:	7033      	strb	r3, [r6, #0]
 800599c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800599e:	3701      	adds	r7, #1
 80059a0:	601f      	str	r7, [r3, #0]
 80059a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 831d 	beq.w	8005fe4 <_dtoa_r+0xb34>
 80059aa:	601e      	str	r6, [r3, #0]
 80059ac:	e31a      	b.n	8005fe4 <_dtoa_r+0xb34>
 80059ae:	07e2      	lsls	r2, r4, #31
 80059b0:	d505      	bpl.n	80059be <_dtoa_r+0x50e>
 80059b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059b6:	f7fa fe47 	bl	8000648 <__aeabi_dmul>
 80059ba:	3601      	adds	r6, #1
 80059bc:	2301      	movs	r3, #1
 80059be:	1064      	asrs	r4, r4, #1
 80059c0:	3508      	adds	r5, #8
 80059c2:	e73f      	b.n	8005844 <_dtoa_r+0x394>
 80059c4:	2602      	movs	r6, #2
 80059c6:	e742      	b.n	800584e <_dtoa_r+0x39e>
 80059c8:	9c07      	ldr	r4, [sp, #28]
 80059ca:	9704      	str	r7, [sp, #16]
 80059cc:	e761      	b.n	8005892 <_dtoa_r+0x3e2>
 80059ce:	4b27      	ldr	r3, [pc, #156]	@ (8005a6c <_dtoa_r+0x5bc>)
 80059d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80059d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059da:	4454      	add	r4, sl
 80059dc:	2900      	cmp	r1, #0
 80059de:	d053      	beq.n	8005a88 <_dtoa_r+0x5d8>
 80059e0:	4928      	ldr	r1, [pc, #160]	@ (8005a84 <_dtoa_r+0x5d4>)
 80059e2:	2000      	movs	r0, #0
 80059e4:	f7fa ff5a 	bl	800089c <__aeabi_ddiv>
 80059e8:	4633      	mov	r3, r6
 80059ea:	462a      	mov	r2, r5
 80059ec:	f7fa fc74 	bl	80002d8 <__aeabi_dsub>
 80059f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059f4:	4656      	mov	r6, sl
 80059f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059fa:	f7fb f8d5 	bl	8000ba8 <__aeabi_d2iz>
 80059fe:	4605      	mov	r5, r0
 8005a00:	f7fa fdb8 	bl	8000574 <__aeabi_i2d>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a0c:	f7fa fc64 	bl	80002d8 <__aeabi_dsub>
 8005a10:	3530      	adds	r5, #48	@ 0x30
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a1a:	f806 5b01 	strb.w	r5, [r6], #1
 8005a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a22:	f7fb f883 	bl	8000b2c <__aeabi_dcmplt>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d171      	bne.n	8005b0e <_dtoa_r+0x65e>
 8005a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a2e:	4911      	ldr	r1, [pc, #68]	@ (8005a74 <_dtoa_r+0x5c4>)
 8005a30:	2000      	movs	r0, #0
 8005a32:	f7fa fc51 	bl	80002d8 <__aeabi_dsub>
 8005a36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a3a:	f7fb f877 	bl	8000b2c <__aeabi_dcmplt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f040 8095 	bne.w	8005b6e <_dtoa_r+0x6be>
 8005a44:	42a6      	cmp	r6, r4
 8005a46:	f43f af50 	beq.w	80058ea <_dtoa_r+0x43a>
 8005a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <_dtoa_r+0x5c8>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	f7fa fdf9 	bl	8000648 <__aeabi_dmul>
 8005a56:	4b08      	ldr	r3, [pc, #32]	@ (8005a78 <_dtoa_r+0x5c8>)
 8005a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a62:	f7fa fdf1 	bl	8000648 <__aeabi_dmul>
 8005a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a6a:	e7c4      	b.n	80059f6 <_dtoa_r+0x546>
 8005a6c:	08008c00 	.word	0x08008c00
 8005a70:	08008bd8 	.word	0x08008bd8
 8005a74:	3ff00000 	.word	0x3ff00000
 8005a78:	40240000 	.word	0x40240000
 8005a7c:	401c0000 	.word	0x401c0000
 8005a80:	40140000 	.word	0x40140000
 8005a84:	3fe00000 	.word	0x3fe00000
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f7fa fddc 	bl	8000648 <__aeabi_dmul>
 8005a90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a94:	9415      	str	r4, [sp, #84]	@ 0x54
 8005a96:	4656      	mov	r6, sl
 8005a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a9c:	f7fb f884 	bl	8000ba8 <__aeabi_d2iz>
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	f7fa fd67 	bl	8000574 <__aeabi_i2d>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aae:	f7fa fc13 	bl	80002d8 <__aeabi_dsub>
 8005ab2:	3530      	adds	r5, #48	@ 0x30
 8005ab4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	d124      	bne.n	8005b12 <_dtoa_r+0x662>
 8005ac8:	4bac      	ldr	r3, [pc, #688]	@ (8005d7c <_dtoa_r+0x8cc>)
 8005aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ace:	f7fa fc05 	bl	80002dc <__adddf3>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ada:	f7fb f845 	bl	8000b68 <__aeabi_dcmpgt>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d145      	bne.n	8005b6e <_dtoa_r+0x6be>
 8005ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ae6:	49a5      	ldr	r1, [pc, #660]	@ (8005d7c <_dtoa_r+0x8cc>)
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f7fa fbf5 	bl	80002d8 <__aeabi_dsub>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005af6:	f7fb f819 	bl	8000b2c <__aeabi_dcmplt>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	f43f aef5 	beq.w	80058ea <_dtoa_r+0x43a>
 8005b00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005b02:	1e73      	subs	r3, r6, #1
 8005b04:	9315      	str	r3, [sp, #84]	@ 0x54
 8005b06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d0f8      	beq.n	8005b00 <_dtoa_r+0x650>
 8005b0e:	9f04      	ldr	r7, [sp, #16]
 8005b10:	e73e      	b.n	8005990 <_dtoa_r+0x4e0>
 8005b12:	4b9b      	ldr	r3, [pc, #620]	@ (8005d80 <_dtoa_r+0x8d0>)
 8005b14:	f7fa fd98 	bl	8000648 <__aeabi_dmul>
 8005b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1c:	e7bc      	b.n	8005a98 <_dtoa_r+0x5e8>
 8005b1e:	d10c      	bne.n	8005b3a <_dtoa_r+0x68a>
 8005b20:	4b98      	ldr	r3, [pc, #608]	@ (8005d84 <_dtoa_r+0x8d4>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b28:	f7fa fd8e 	bl	8000648 <__aeabi_dmul>
 8005b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b30:	f7fb f810 	bl	8000b54 <__aeabi_dcmpge>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f000 8157 	beq.w	8005de8 <_dtoa_r+0x938>
 8005b3a:	2400      	movs	r4, #0
 8005b3c:	4625      	mov	r5, r4
 8005b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b40:	43db      	mvns	r3, r3
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	4656      	mov	r6, sl
 8005b46:	2700      	movs	r7, #0
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4658      	mov	r0, fp
 8005b4c:	f000 fbb4 	bl	80062b8 <_Bfree>
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	d0dc      	beq.n	8005b0e <_dtoa_r+0x65e>
 8005b54:	b12f      	cbz	r7, 8005b62 <_dtoa_r+0x6b2>
 8005b56:	42af      	cmp	r7, r5
 8005b58:	d003      	beq.n	8005b62 <_dtoa_r+0x6b2>
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	4658      	mov	r0, fp
 8005b5e:	f000 fbab 	bl	80062b8 <_Bfree>
 8005b62:	4629      	mov	r1, r5
 8005b64:	4658      	mov	r0, fp
 8005b66:	f000 fba7 	bl	80062b8 <_Bfree>
 8005b6a:	e7d0      	b.n	8005b0e <_dtoa_r+0x65e>
 8005b6c:	9704      	str	r7, [sp, #16]
 8005b6e:	4633      	mov	r3, r6
 8005b70:	461e      	mov	r6, r3
 8005b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b76:	2a39      	cmp	r2, #57	@ 0x39
 8005b78:	d107      	bne.n	8005b8a <_dtoa_r+0x6da>
 8005b7a:	459a      	cmp	sl, r3
 8005b7c:	d1f8      	bne.n	8005b70 <_dtoa_r+0x6c0>
 8005b7e:	9a04      	ldr	r2, [sp, #16]
 8005b80:	3201      	adds	r2, #1
 8005b82:	9204      	str	r2, [sp, #16]
 8005b84:	2230      	movs	r2, #48	@ 0x30
 8005b86:	f88a 2000 	strb.w	r2, [sl]
 8005b8a:	781a      	ldrb	r2, [r3, #0]
 8005b8c:	3201      	adds	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	e7bd      	b.n	8005b0e <_dtoa_r+0x65e>
 8005b92:	4b7b      	ldr	r3, [pc, #492]	@ (8005d80 <_dtoa_r+0x8d0>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	f7fa fd57 	bl	8000648 <__aeabi_dmul>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	460d      	mov	r5, r1
 8005ba2:	f7fa ffb9 	bl	8000b18 <__aeabi_dcmpeq>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f43f aebb 	beq.w	8005922 <_dtoa_r+0x472>
 8005bac:	e6f0      	b.n	8005990 <_dtoa_r+0x4e0>
 8005bae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	f000 80db 	beq.w	8005d6c <_dtoa_r+0x8bc>
 8005bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bb8:	2a01      	cmp	r2, #1
 8005bba:	f300 80bf 	bgt.w	8005d3c <_dtoa_r+0x88c>
 8005bbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	f000 80b7 	beq.w	8005d34 <_dtoa_r+0x884>
 8005bc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005bca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005bcc:	4646      	mov	r6, r8
 8005bce:	9a08      	ldr	r2, [sp, #32]
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	441a      	add	r2, r3
 8005bd4:	4658      	mov	r0, fp
 8005bd6:	4498      	add	r8, r3
 8005bd8:	9208      	str	r2, [sp, #32]
 8005bda:	f000 fc6b 	bl	80064b4 <__i2b>
 8005bde:	4605      	mov	r5, r0
 8005be0:	b15e      	cbz	r6, 8005bfa <_dtoa_r+0x74a>
 8005be2:	9b08      	ldr	r3, [sp, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dd08      	ble.n	8005bfa <_dtoa_r+0x74a>
 8005be8:	42b3      	cmp	r3, r6
 8005bea:	9a08      	ldr	r2, [sp, #32]
 8005bec:	bfa8      	it	ge
 8005bee:	4633      	movge	r3, r6
 8005bf0:	eba8 0803 	sub.w	r8, r8, r3
 8005bf4:	1af6      	subs	r6, r6, r3
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	9308      	str	r3, [sp, #32]
 8005bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bfc:	b1f3      	cbz	r3, 8005c3c <_dtoa_r+0x78c>
 8005bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80b7 	beq.w	8005d74 <_dtoa_r+0x8c4>
 8005c06:	b18c      	cbz	r4, 8005c2c <_dtoa_r+0x77c>
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	4658      	mov	r0, fp
 8005c0e:	f000 fd11 	bl	8006634 <__pow5mult>
 8005c12:	464a      	mov	r2, r9
 8005c14:	4601      	mov	r1, r0
 8005c16:	4605      	mov	r5, r0
 8005c18:	4658      	mov	r0, fp
 8005c1a:	f000 fc61 	bl	80064e0 <__multiply>
 8005c1e:	4649      	mov	r1, r9
 8005c20:	9004      	str	r0, [sp, #16]
 8005c22:	4658      	mov	r0, fp
 8005c24:	f000 fb48 	bl	80062b8 <_Bfree>
 8005c28:	9b04      	ldr	r3, [sp, #16]
 8005c2a:	4699      	mov	r9, r3
 8005c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c2e:	1b1a      	subs	r2, r3, r4
 8005c30:	d004      	beq.n	8005c3c <_dtoa_r+0x78c>
 8005c32:	4649      	mov	r1, r9
 8005c34:	4658      	mov	r0, fp
 8005c36:	f000 fcfd 	bl	8006634 <__pow5mult>
 8005c3a:	4681      	mov	r9, r0
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4658      	mov	r0, fp
 8005c40:	f000 fc38 	bl	80064b4 <__i2b>
 8005c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c46:	4604      	mov	r4, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 81cf 	beq.w	8005fec <_dtoa_r+0xb3c>
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4601      	mov	r1, r0
 8005c52:	4658      	mov	r0, fp
 8005c54:	f000 fcee 	bl	8006634 <__pow5mult>
 8005c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	f300 8095 	bgt.w	8005d8c <_dtoa_r+0x8dc>
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 8087 	bne.w	8005d78 <_dtoa_r+0x8c8>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8089 	bne.w	8005d88 <_dtoa_r+0x8d8>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c7c:	0d1b      	lsrs	r3, r3, #20
 8005c7e:	051b      	lsls	r3, r3, #20
 8005c80:	b12b      	cbz	r3, 8005c8e <_dtoa_r+0x7de>
 8005c82:	9b08      	ldr	r3, [sp, #32]
 8005c84:	3301      	adds	r3, #1
 8005c86:	9308      	str	r3, [sp, #32]
 8005c88:	f108 0801 	add.w	r8, r8, #1
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 81b0 	beq.w	8005ff8 <_dtoa_r+0xb48>
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c9e:	6918      	ldr	r0, [r3, #16]
 8005ca0:	f000 fbbc 	bl	800641c <__hi0bits>
 8005ca4:	f1c0 0020 	rsb	r0, r0, #32
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	4418      	add	r0, r3
 8005cac:	f010 001f 	ands.w	r0, r0, #31
 8005cb0:	d077      	beq.n	8005da2 <_dtoa_r+0x8f2>
 8005cb2:	f1c0 0320 	rsb	r3, r0, #32
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	dd6b      	ble.n	8005d92 <_dtoa_r+0x8e2>
 8005cba:	9b08      	ldr	r3, [sp, #32]
 8005cbc:	f1c0 001c 	rsb	r0, r0, #28
 8005cc0:	4403      	add	r3, r0
 8005cc2:	4480      	add	r8, r0
 8005cc4:	4406      	add	r6, r0
 8005cc6:	9308      	str	r3, [sp, #32]
 8005cc8:	f1b8 0f00 	cmp.w	r8, #0
 8005ccc:	dd05      	ble.n	8005cda <_dtoa_r+0x82a>
 8005cce:	4649      	mov	r1, r9
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	4658      	mov	r0, fp
 8005cd4:	f000 fd08 	bl	80066e8 <__lshift>
 8005cd8:	4681      	mov	r9, r0
 8005cda:	9b08      	ldr	r3, [sp, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dd05      	ble.n	8005cec <_dtoa_r+0x83c>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4658      	mov	r0, fp
 8005ce6:	f000 fcff 	bl	80066e8 <__lshift>
 8005cea:	4604      	mov	r4, r0
 8005cec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d059      	beq.n	8005da6 <_dtoa_r+0x8f6>
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4648      	mov	r0, r9
 8005cf6:	f000 fd63 	bl	80067c0 <__mcmp>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	da53      	bge.n	8005da6 <_dtoa_r+0x8f6>
 8005cfe:	1e7b      	subs	r3, r7, #1
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	4649      	mov	r1, r9
 8005d04:	2300      	movs	r3, #0
 8005d06:	220a      	movs	r2, #10
 8005d08:	4658      	mov	r0, fp
 8005d0a:	f000 faf7 	bl	80062fc <__multadd>
 8005d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d10:	4681      	mov	r9, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 8172 	beq.w	8005ffc <_dtoa_r+0xb4c>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	4658      	mov	r0, fp
 8005d20:	f000 faec 	bl	80062fc <__multadd>
 8005d24:	9b00      	ldr	r3, [sp, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	4605      	mov	r5, r0
 8005d2a:	dc67      	bgt.n	8005dfc <_dtoa_r+0x94c>
 8005d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	dc41      	bgt.n	8005db6 <_dtoa_r+0x906>
 8005d32:	e063      	b.n	8005dfc <_dtoa_r+0x94c>
 8005d34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005d3a:	e746      	b.n	8005bca <_dtoa_r+0x71a>
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	1e5c      	subs	r4, r3, #1
 8005d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d42:	42a3      	cmp	r3, r4
 8005d44:	bfbf      	itttt	lt
 8005d46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005d48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005d4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005d4c:	1ae3      	sublt	r3, r4, r3
 8005d4e:	bfb4      	ite	lt
 8005d50:	18d2      	addlt	r2, r2, r3
 8005d52:	1b1c      	subge	r4, r3, r4
 8005d54:	9b07      	ldr	r3, [sp, #28]
 8005d56:	bfbc      	itt	lt
 8005d58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005d5a:	2400      	movlt	r4, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfb5      	itete	lt
 8005d60:	eba8 0603 	sublt.w	r6, r8, r3
 8005d64:	9b07      	ldrge	r3, [sp, #28]
 8005d66:	2300      	movlt	r3, #0
 8005d68:	4646      	movge	r6, r8
 8005d6a:	e730      	b.n	8005bce <_dtoa_r+0x71e>
 8005d6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005d70:	4646      	mov	r6, r8
 8005d72:	e735      	b.n	8005be0 <_dtoa_r+0x730>
 8005d74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d76:	e75c      	b.n	8005c32 <_dtoa_r+0x782>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e788      	b.n	8005c8e <_dtoa_r+0x7de>
 8005d7c:	3fe00000 	.word	0x3fe00000
 8005d80:	40240000 	.word	0x40240000
 8005d84:	40140000 	.word	0x40140000
 8005d88:	9b02      	ldr	r3, [sp, #8]
 8005d8a:	e780      	b.n	8005c8e <_dtoa_r+0x7de>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d90:	e782      	b.n	8005c98 <_dtoa_r+0x7e8>
 8005d92:	d099      	beq.n	8005cc8 <_dtoa_r+0x818>
 8005d94:	9a08      	ldr	r2, [sp, #32]
 8005d96:	331c      	adds	r3, #28
 8005d98:	441a      	add	r2, r3
 8005d9a:	4498      	add	r8, r3
 8005d9c:	441e      	add	r6, r3
 8005d9e:	9208      	str	r2, [sp, #32]
 8005da0:	e792      	b.n	8005cc8 <_dtoa_r+0x818>
 8005da2:	4603      	mov	r3, r0
 8005da4:	e7f6      	b.n	8005d94 <_dtoa_r+0x8e4>
 8005da6:	9b07      	ldr	r3, [sp, #28]
 8005da8:	9704      	str	r7, [sp, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	dc20      	bgt.n	8005df0 <_dtoa_r+0x940>
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	dd1e      	ble.n	8005df4 <_dtoa_r+0x944>
 8005db6:	9b00      	ldr	r3, [sp, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f47f aec0 	bne.w	8005b3e <_dtoa_r+0x68e>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	2205      	movs	r2, #5
 8005dc2:	4658      	mov	r0, fp
 8005dc4:	f000 fa9a 	bl	80062fc <__multadd>
 8005dc8:	4601      	mov	r1, r0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4648      	mov	r0, r9
 8005dce:	f000 fcf7 	bl	80067c0 <__mcmp>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	f77f aeb3 	ble.w	8005b3e <_dtoa_r+0x68e>
 8005dd8:	4656      	mov	r6, sl
 8005dda:	2331      	movs	r3, #49	@ 0x31
 8005ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	3301      	adds	r3, #1
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	e6ae      	b.n	8005b46 <_dtoa_r+0x696>
 8005de8:	9c07      	ldr	r4, [sp, #28]
 8005dea:	9704      	str	r7, [sp, #16]
 8005dec:	4625      	mov	r5, r4
 8005dee:	e7f3      	b.n	8005dd8 <_dtoa_r+0x928>
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8104 	beq.w	8006004 <_dtoa_r+0xb54>
 8005dfc:	2e00      	cmp	r6, #0
 8005dfe:	dd05      	ble.n	8005e0c <_dtoa_r+0x95c>
 8005e00:	4629      	mov	r1, r5
 8005e02:	4632      	mov	r2, r6
 8005e04:	4658      	mov	r0, fp
 8005e06:	f000 fc6f 	bl	80066e8 <__lshift>
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d05a      	beq.n	8005ec8 <_dtoa_r+0xa18>
 8005e12:	6869      	ldr	r1, [r5, #4]
 8005e14:	4658      	mov	r0, fp
 8005e16:	f000 fa0f 	bl	8006238 <_Balloc>
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	b928      	cbnz	r0, 8005e2a <_dtoa_r+0x97a>
 8005e1e:	4b84      	ldr	r3, [pc, #528]	@ (8006030 <_dtoa_r+0xb80>)
 8005e20:	4602      	mov	r2, r0
 8005e22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005e26:	f7ff bb5a 	b.w	80054de <_dtoa_r+0x2e>
 8005e2a:	692a      	ldr	r2, [r5, #16]
 8005e2c:	3202      	adds	r2, #2
 8005e2e:	0092      	lsls	r2, r2, #2
 8005e30:	f105 010c 	add.w	r1, r5, #12
 8005e34:	300c      	adds	r0, #12
 8005e36:	f001 ff75 	bl	8007d24 <memcpy>
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4658      	mov	r0, fp
 8005e40:	f000 fc52 	bl	80066e8 <__lshift>
 8005e44:	f10a 0301 	add.w	r3, sl, #1
 8005e48:	9307      	str	r3, [sp, #28]
 8005e4a:	9b00      	ldr	r3, [sp, #0]
 8005e4c:	4453      	add	r3, sl
 8005e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	462f      	mov	r7, r5
 8005e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	9b07      	ldr	r3, [sp, #28]
 8005e5e:	4621      	mov	r1, r4
 8005e60:	3b01      	subs	r3, #1
 8005e62:	4648      	mov	r0, r9
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	f7ff fa9b 	bl	80053a0 <quorem>
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	9002      	str	r0, [sp, #8]
 8005e6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e72:	4648      	mov	r0, r9
 8005e74:	f000 fca4 	bl	80067c0 <__mcmp>
 8005e78:	462a      	mov	r2, r5
 8005e7a:	9008      	str	r0, [sp, #32]
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4658      	mov	r0, fp
 8005e80:	f000 fcba 	bl	80067f8 <__mdiff>
 8005e84:	68c2      	ldr	r2, [r0, #12]
 8005e86:	4606      	mov	r6, r0
 8005e88:	bb02      	cbnz	r2, 8005ecc <_dtoa_r+0xa1c>
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	4648      	mov	r0, r9
 8005e8e:	f000 fc97 	bl	80067c0 <__mcmp>
 8005e92:	4602      	mov	r2, r0
 8005e94:	4631      	mov	r1, r6
 8005e96:	4658      	mov	r0, fp
 8005e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e9a:	f000 fa0d 	bl	80062b8 <_Bfree>
 8005e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ea2:	9e07      	ldr	r6, [sp, #28]
 8005ea4:	ea43 0102 	orr.w	r1, r3, r2
 8005ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eaa:	4319      	orrs	r1, r3
 8005eac:	d110      	bne.n	8005ed0 <_dtoa_r+0xa20>
 8005eae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005eb2:	d029      	beq.n	8005f08 <_dtoa_r+0xa58>
 8005eb4:	9b08      	ldr	r3, [sp, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dd02      	ble.n	8005ec0 <_dtoa_r+0xa10>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	f883 8000 	strb.w	r8, [r3]
 8005ec6:	e63f      	b.n	8005b48 <_dtoa_r+0x698>
 8005ec8:	4628      	mov	r0, r5
 8005eca:	e7bb      	b.n	8005e44 <_dtoa_r+0x994>
 8005ecc:	2201      	movs	r2, #1
 8005ece:	e7e1      	b.n	8005e94 <_dtoa_r+0x9e4>
 8005ed0:	9b08      	ldr	r3, [sp, #32]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	db04      	blt.n	8005ee0 <_dtoa_r+0xa30>
 8005ed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005edc:	430b      	orrs	r3, r1
 8005ede:	d120      	bne.n	8005f22 <_dtoa_r+0xa72>
 8005ee0:	2a00      	cmp	r2, #0
 8005ee2:	dded      	ble.n	8005ec0 <_dtoa_r+0xa10>
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	4658      	mov	r0, fp
 8005eea:	f000 fbfd 	bl	80066e8 <__lshift>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4681      	mov	r9, r0
 8005ef2:	f000 fc65 	bl	80067c0 <__mcmp>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	dc03      	bgt.n	8005f02 <_dtoa_r+0xa52>
 8005efa:	d1e1      	bne.n	8005ec0 <_dtoa_r+0xa10>
 8005efc:	f018 0f01 	tst.w	r8, #1
 8005f00:	d0de      	beq.n	8005ec0 <_dtoa_r+0xa10>
 8005f02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005f06:	d1d8      	bne.n	8005eba <_dtoa_r+0xa0a>
 8005f08:	9a00      	ldr	r2, [sp, #0]
 8005f0a:	2339      	movs	r3, #57	@ 0x39
 8005f0c:	7013      	strb	r3, [r2, #0]
 8005f0e:	4633      	mov	r3, r6
 8005f10:	461e      	mov	r6, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005f18:	2a39      	cmp	r2, #57	@ 0x39
 8005f1a:	d052      	beq.n	8005fc2 <_dtoa_r+0xb12>
 8005f1c:	3201      	adds	r2, #1
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e612      	b.n	8005b48 <_dtoa_r+0x698>
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	dd07      	ble.n	8005f36 <_dtoa_r+0xa86>
 8005f26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005f2a:	d0ed      	beq.n	8005f08 <_dtoa_r+0xa58>
 8005f2c:	9a00      	ldr	r2, [sp, #0]
 8005f2e:	f108 0301 	add.w	r3, r8, #1
 8005f32:	7013      	strb	r3, [r2, #0]
 8005f34:	e608      	b.n	8005b48 <_dtoa_r+0x698>
 8005f36:	9b07      	ldr	r3, [sp, #28]
 8005f38:	9a07      	ldr	r2, [sp, #28]
 8005f3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d028      	beq.n	8005f96 <_dtoa_r+0xae6>
 8005f44:	4649      	mov	r1, r9
 8005f46:	2300      	movs	r3, #0
 8005f48:	220a      	movs	r2, #10
 8005f4a:	4658      	mov	r0, fp
 8005f4c:	f000 f9d6 	bl	80062fc <__multadd>
 8005f50:	42af      	cmp	r7, r5
 8005f52:	4681      	mov	r9, r0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	f04f 020a 	mov.w	r2, #10
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	4658      	mov	r0, fp
 8005f60:	d107      	bne.n	8005f72 <_dtoa_r+0xac2>
 8005f62:	f000 f9cb 	bl	80062fc <__multadd>
 8005f66:	4607      	mov	r7, r0
 8005f68:	4605      	mov	r5, r0
 8005f6a:	9b07      	ldr	r3, [sp, #28]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	9307      	str	r3, [sp, #28]
 8005f70:	e774      	b.n	8005e5c <_dtoa_r+0x9ac>
 8005f72:	f000 f9c3 	bl	80062fc <__multadd>
 8005f76:	4629      	mov	r1, r5
 8005f78:	4607      	mov	r7, r0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	220a      	movs	r2, #10
 8005f7e:	4658      	mov	r0, fp
 8005f80:	f000 f9bc 	bl	80062fc <__multadd>
 8005f84:	4605      	mov	r5, r0
 8005f86:	e7f0      	b.n	8005f6a <_dtoa_r+0xaba>
 8005f88:	9b00      	ldr	r3, [sp, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bfcc      	ite	gt
 8005f8e:	461e      	movgt	r6, r3
 8005f90:	2601      	movle	r6, #1
 8005f92:	4456      	add	r6, sl
 8005f94:	2700      	movs	r7, #0
 8005f96:	4649      	mov	r1, r9
 8005f98:	2201      	movs	r2, #1
 8005f9a:	4658      	mov	r0, fp
 8005f9c:	f000 fba4 	bl	80066e8 <__lshift>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4681      	mov	r9, r0
 8005fa4:	f000 fc0c 	bl	80067c0 <__mcmp>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	dcb0      	bgt.n	8005f0e <_dtoa_r+0xa5e>
 8005fac:	d102      	bne.n	8005fb4 <_dtoa_r+0xb04>
 8005fae:	f018 0f01 	tst.w	r8, #1
 8005fb2:	d1ac      	bne.n	8005f0e <_dtoa_r+0xa5e>
 8005fb4:	4633      	mov	r3, r6
 8005fb6:	461e      	mov	r6, r3
 8005fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fbc:	2a30      	cmp	r2, #48	@ 0x30
 8005fbe:	d0fa      	beq.n	8005fb6 <_dtoa_r+0xb06>
 8005fc0:	e5c2      	b.n	8005b48 <_dtoa_r+0x698>
 8005fc2:	459a      	cmp	sl, r3
 8005fc4:	d1a4      	bne.n	8005f10 <_dtoa_r+0xa60>
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	2331      	movs	r3, #49	@ 0x31
 8005fce:	f88a 3000 	strb.w	r3, [sl]
 8005fd2:	e5b9      	b.n	8005b48 <_dtoa_r+0x698>
 8005fd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006034 <_dtoa_r+0xb84>
 8005fda:	b11b      	cbz	r3, 8005fe4 <_dtoa_r+0xb34>
 8005fdc:	f10a 0308 	add.w	r3, sl, #8
 8005fe0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	b019      	add	sp, #100	@ 0x64
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	f77f ae37 	ble.w	8005c62 <_dtoa_r+0x7b2>
 8005ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	e655      	b.n	8005ca8 <_dtoa_r+0x7f8>
 8005ffc:	9b00      	ldr	r3, [sp, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f77f aed6 	ble.w	8005db0 <_dtoa_r+0x900>
 8006004:	4656      	mov	r6, sl
 8006006:	4621      	mov	r1, r4
 8006008:	4648      	mov	r0, r9
 800600a:	f7ff f9c9 	bl	80053a0 <quorem>
 800600e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006012:	f806 8b01 	strb.w	r8, [r6], #1
 8006016:	9b00      	ldr	r3, [sp, #0]
 8006018:	eba6 020a 	sub.w	r2, r6, sl
 800601c:	4293      	cmp	r3, r2
 800601e:	ddb3      	ble.n	8005f88 <_dtoa_r+0xad8>
 8006020:	4649      	mov	r1, r9
 8006022:	2300      	movs	r3, #0
 8006024:	220a      	movs	r2, #10
 8006026:	4658      	mov	r0, fp
 8006028:	f000 f968 	bl	80062fc <__multadd>
 800602c:	4681      	mov	r9, r0
 800602e:	e7ea      	b.n	8006006 <_dtoa_r+0xb56>
 8006030:	08008b5d 	.word	0x08008b5d
 8006034:	08008ae1 	.word	0x08008ae1

08006038 <_free_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4605      	mov	r5, r0
 800603c:	2900      	cmp	r1, #0
 800603e:	d041      	beq.n	80060c4 <_free_r+0x8c>
 8006040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006044:	1f0c      	subs	r4, r1, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	bfb8      	it	lt
 800604a:	18e4      	addlt	r4, r4, r3
 800604c:	f000 f8e8 	bl	8006220 <__malloc_lock>
 8006050:	4a1d      	ldr	r2, [pc, #116]	@ (80060c8 <_free_r+0x90>)
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	b933      	cbnz	r3, 8006064 <_free_r+0x2c>
 8006056:	6063      	str	r3, [r4, #4]
 8006058:	6014      	str	r4, [r2, #0]
 800605a:	4628      	mov	r0, r5
 800605c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006060:	f000 b8e4 	b.w	800622c <__malloc_unlock>
 8006064:	42a3      	cmp	r3, r4
 8006066:	d908      	bls.n	800607a <_free_r+0x42>
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	1821      	adds	r1, r4, r0
 800606c:	428b      	cmp	r3, r1
 800606e:	bf01      	itttt	eq
 8006070:	6819      	ldreq	r1, [r3, #0]
 8006072:	685b      	ldreq	r3, [r3, #4]
 8006074:	1809      	addeq	r1, r1, r0
 8006076:	6021      	streq	r1, [r4, #0]
 8006078:	e7ed      	b.n	8006056 <_free_r+0x1e>
 800607a:	461a      	mov	r2, r3
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	b10b      	cbz	r3, 8006084 <_free_r+0x4c>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d9fa      	bls.n	800607a <_free_r+0x42>
 8006084:	6811      	ldr	r1, [r2, #0]
 8006086:	1850      	adds	r0, r2, r1
 8006088:	42a0      	cmp	r0, r4
 800608a:	d10b      	bne.n	80060a4 <_free_r+0x6c>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	4401      	add	r1, r0
 8006090:	1850      	adds	r0, r2, r1
 8006092:	4283      	cmp	r3, r0
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	d1e0      	bne.n	800605a <_free_r+0x22>
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	6053      	str	r3, [r2, #4]
 800609e:	4408      	add	r0, r1
 80060a0:	6010      	str	r0, [r2, #0]
 80060a2:	e7da      	b.n	800605a <_free_r+0x22>
 80060a4:	d902      	bls.n	80060ac <_free_r+0x74>
 80060a6:	230c      	movs	r3, #12
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	e7d6      	b.n	800605a <_free_r+0x22>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	1821      	adds	r1, r4, r0
 80060b0:	428b      	cmp	r3, r1
 80060b2:	bf04      	itt	eq
 80060b4:	6819      	ldreq	r1, [r3, #0]
 80060b6:	685b      	ldreq	r3, [r3, #4]
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	bf04      	itt	eq
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	6054      	str	r4, [r2, #4]
 80060c2:	e7ca      	b.n	800605a <_free_r+0x22>
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	bf00      	nop
 80060c8:	20000464 	.word	0x20000464

080060cc <malloc>:
 80060cc:	4b02      	ldr	r3, [pc, #8]	@ (80060d8 <malloc+0xc>)
 80060ce:	4601      	mov	r1, r0
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	f000 b825 	b.w	8006120 <_malloc_r>
 80060d6:	bf00      	nop
 80060d8:	20000018 	.word	0x20000018

080060dc <sbrk_aligned>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	4e0f      	ldr	r6, [pc, #60]	@ (800611c <sbrk_aligned+0x40>)
 80060e0:	460c      	mov	r4, r1
 80060e2:	6831      	ldr	r1, [r6, #0]
 80060e4:	4605      	mov	r5, r0
 80060e6:	b911      	cbnz	r1, 80060ee <sbrk_aligned+0x12>
 80060e8:	f001 fe0c 	bl	8007d04 <_sbrk_r>
 80060ec:	6030      	str	r0, [r6, #0]
 80060ee:	4621      	mov	r1, r4
 80060f0:	4628      	mov	r0, r5
 80060f2:	f001 fe07 	bl	8007d04 <_sbrk_r>
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	d103      	bne.n	8006102 <sbrk_aligned+0x26>
 80060fa:	f04f 34ff 	mov.w	r4, #4294967295
 80060fe:	4620      	mov	r0, r4
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	1cc4      	adds	r4, r0, #3
 8006104:	f024 0403 	bic.w	r4, r4, #3
 8006108:	42a0      	cmp	r0, r4
 800610a:	d0f8      	beq.n	80060fe <sbrk_aligned+0x22>
 800610c:	1a21      	subs	r1, r4, r0
 800610e:	4628      	mov	r0, r5
 8006110:	f001 fdf8 	bl	8007d04 <_sbrk_r>
 8006114:	3001      	adds	r0, #1
 8006116:	d1f2      	bne.n	80060fe <sbrk_aligned+0x22>
 8006118:	e7ef      	b.n	80060fa <sbrk_aligned+0x1e>
 800611a:	bf00      	nop
 800611c:	20000460 	.word	0x20000460

08006120 <_malloc_r>:
 8006120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006124:	1ccd      	adds	r5, r1, #3
 8006126:	f025 0503 	bic.w	r5, r5, #3
 800612a:	3508      	adds	r5, #8
 800612c:	2d0c      	cmp	r5, #12
 800612e:	bf38      	it	cc
 8006130:	250c      	movcc	r5, #12
 8006132:	2d00      	cmp	r5, #0
 8006134:	4606      	mov	r6, r0
 8006136:	db01      	blt.n	800613c <_malloc_r+0x1c>
 8006138:	42a9      	cmp	r1, r5
 800613a:	d904      	bls.n	8006146 <_malloc_r+0x26>
 800613c:	230c      	movs	r3, #12
 800613e:	6033      	str	r3, [r6, #0]
 8006140:	2000      	movs	r0, #0
 8006142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800621c <_malloc_r+0xfc>
 800614a:	f000 f869 	bl	8006220 <__malloc_lock>
 800614e:	f8d8 3000 	ldr.w	r3, [r8]
 8006152:	461c      	mov	r4, r3
 8006154:	bb44      	cbnz	r4, 80061a8 <_malloc_r+0x88>
 8006156:	4629      	mov	r1, r5
 8006158:	4630      	mov	r0, r6
 800615a:	f7ff ffbf 	bl	80060dc <sbrk_aligned>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	4604      	mov	r4, r0
 8006162:	d158      	bne.n	8006216 <_malloc_r+0xf6>
 8006164:	f8d8 4000 	ldr.w	r4, [r8]
 8006168:	4627      	mov	r7, r4
 800616a:	2f00      	cmp	r7, #0
 800616c:	d143      	bne.n	80061f6 <_malloc_r+0xd6>
 800616e:	2c00      	cmp	r4, #0
 8006170:	d04b      	beq.n	800620a <_malloc_r+0xea>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	4639      	mov	r1, r7
 8006176:	4630      	mov	r0, r6
 8006178:	eb04 0903 	add.w	r9, r4, r3
 800617c:	f001 fdc2 	bl	8007d04 <_sbrk_r>
 8006180:	4581      	cmp	r9, r0
 8006182:	d142      	bne.n	800620a <_malloc_r+0xea>
 8006184:	6821      	ldr	r1, [r4, #0]
 8006186:	1a6d      	subs	r5, r5, r1
 8006188:	4629      	mov	r1, r5
 800618a:	4630      	mov	r0, r6
 800618c:	f7ff ffa6 	bl	80060dc <sbrk_aligned>
 8006190:	3001      	adds	r0, #1
 8006192:	d03a      	beq.n	800620a <_malloc_r+0xea>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	442b      	add	r3, r5
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	f8d8 3000 	ldr.w	r3, [r8]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	bb62      	cbnz	r2, 80061fc <_malloc_r+0xdc>
 80061a2:	f8c8 7000 	str.w	r7, [r8]
 80061a6:	e00f      	b.n	80061c8 <_malloc_r+0xa8>
 80061a8:	6822      	ldr	r2, [r4, #0]
 80061aa:	1b52      	subs	r2, r2, r5
 80061ac:	d420      	bmi.n	80061f0 <_malloc_r+0xd0>
 80061ae:	2a0b      	cmp	r2, #11
 80061b0:	d917      	bls.n	80061e2 <_malloc_r+0xc2>
 80061b2:	1961      	adds	r1, r4, r5
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	6025      	str	r5, [r4, #0]
 80061b8:	bf18      	it	ne
 80061ba:	6059      	strne	r1, [r3, #4]
 80061bc:	6863      	ldr	r3, [r4, #4]
 80061be:	bf08      	it	eq
 80061c0:	f8c8 1000 	streq.w	r1, [r8]
 80061c4:	5162      	str	r2, [r4, r5]
 80061c6:	604b      	str	r3, [r1, #4]
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 f82f 	bl	800622c <__malloc_unlock>
 80061ce:	f104 000b 	add.w	r0, r4, #11
 80061d2:	1d23      	adds	r3, r4, #4
 80061d4:	f020 0007 	bic.w	r0, r0, #7
 80061d8:	1ac2      	subs	r2, r0, r3
 80061da:	bf1c      	itt	ne
 80061dc:	1a1b      	subne	r3, r3, r0
 80061de:	50a3      	strne	r3, [r4, r2]
 80061e0:	e7af      	b.n	8006142 <_malloc_r+0x22>
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	bf0c      	ite	eq
 80061e8:	f8c8 2000 	streq.w	r2, [r8]
 80061ec:	605a      	strne	r2, [r3, #4]
 80061ee:	e7eb      	b.n	80061c8 <_malloc_r+0xa8>
 80061f0:	4623      	mov	r3, r4
 80061f2:	6864      	ldr	r4, [r4, #4]
 80061f4:	e7ae      	b.n	8006154 <_malloc_r+0x34>
 80061f6:	463c      	mov	r4, r7
 80061f8:	687f      	ldr	r7, [r7, #4]
 80061fa:	e7b6      	b.n	800616a <_malloc_r+0x4a>
 80061fc:	461a      	mov	r2, r3
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	42a3      	cmp	r3, r4
 8006202:	d1fb      	bne.n	80061fc <_malloc_r+0xdc>
 8006204:	2300      	movs	r3, #0
 8006206:	6053      	str	r3, [r2, #4]
 8006208:	e7de      	b.n	80061c8 <_malloc_r+0xa8>
 800620a:	230c      	movs	r3, #12
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	4630      	mov	r0, r6
 8006210:	f000 f80c 	bl	800622c <__malloc_unlock>
 8006214:	e794      	b.n	8006140 <_malloc_r+0x20>
 8006216:	6005      	str	r5, [r0, #0]
 8006218:	e7d6      	b.n	80061c8 <_malloc_r+0xa8>
 800621a:	bf00      	nop
 800621c:	20000464 	.word	0x20000464

08006220 <__malloc_lock>:
 8006220:	4801      	ldr	r0, [pc, #4]	@ (8006228 <__malloc_lock+0x8>)
 8006222:	f7ff b8b4 	b.w	800538e <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	2000045c 	.word	0x2000045c

0800622c <__malloc_unlock>:
 800622c:	4801      	ldr	r0, [pc, #4]	@ (8006234 <__malloc_unlock+0x8>)
 800622e:	f7ff b8af 	b.w	8005390 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	2000045c 	.word	0x2000045c

08006238 <_Balloc>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	69c6      	ldr	r6, [r0, #28]
 800623c:	4604      	mov	r4, r0
 800623e:	460d      	mov	r5, r1
 8006240:	b976      	cbnz	r6, 8006260 <_Balloc+0x28>
 8006242:	2010      	movs	r0, #16
 8006244:	f7ff ff42 	bl	80060cc <malloc>
 8006248:	4602      	mov	r2, r0
 800624a:	61e0      	str	r0, [r4, #28]
 800624c:	b920      	cbnz	r0, 8006258 <_Balloc+0x20>
 800624e:	4b18      	ldr	r3, [pc, #96]	@ (80062b0 <_Balloc+0x78>)
 8006250:	4818      	ldr	r0, [pc, #96]	@ (80062b4 <_Balloc+0x7c>)
 8006252:	216b      	movs	r1, #107	@ 0x6b
 8006254:	f001 fd7c 	bl	8007d50 <__assert_func>
 8006258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800625c:	6006      	str	r6, [r0, #0]
 800625e:	60c6      	str	r6, [r0, #12]
 8006260:	69e6      	ldr	r6, [r4, #28]
 8006262:	68f3      	ldr	r3, [r6, #12]
 8006264:	b183      	cbz	r3, 8006288 <_Balloc+0x50>
 8006266:	69e3      	ldr	r3, [r4, #28]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800626e:	b9b8      	cbnz	r0, 80062a0 <_Balloc+0x68>
 8006270:	2101      	movs	r1, #1
 8006272:	fa01 f605 	lsl.w	r6, r1, r5
 8006276:	1d72      	adds	r2, r6, #5
 8006278:	0092      	lsls	r2, r2, #2
 800627a:	4620      	mov	r0, r4
 800627c:	f001 fd86 	bl	8007d8c <_calloc_r>
 8006280:	b160      	cbz	r0, 800629c <_Balloc+0x64>
 8006282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006286:	e00e      	b.n	80062a6 <_Balloc+0x6e>
 8006288:	2221      	movs	r2, #33	@ 0x21
 800628a:	2104      	movs	r1, #4
 800628c:	4620      	mov	r0, r4
 800628e:	f001 fd7d 	bl	8007d8c <_calloc_r>
 8006292:	69e3      	ldr	r3, [r4, #28]
 8006294:	60f0      	str	r0, [r6, #12]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e4      	bne.n	8006266 <_Balloc+0x2e>
 800629c:	2000      	movs	r0, #0
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	6802      	ldr	r2, [r0, #0]
 80062a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062a6:	2300      	movs	r3, #0
 80062a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062ac:	e7f7      	b.n	800629e <_Balloc+0x66>
 80062ae:	bf00      	nop
 80062b0:	08008aee 	.word	0x08008aee
 80062b4:	08008b6e 	.word	0x08008b6e

080062b8 <_Bfree>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	69c6      	ldr	r6, [r0, #28]
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	b976      	cbnz	r6, 80062e0 <_Bfree+0x28>
 80062c2:	2010      	movs	r0, #16
 80062c4:	f7ff ff02 	bl	80060cc <malloc>
 80062c8:	4602      	mov	r2, r0
 80062ca:	61e8      	str	r0, [r5, #28]
 80062cc:	b920      	cbnz	r0, 80062d8 <_Bfree+0x20>
 80062ce:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <_Bfree+0x3c>)
 80062d0:	4809      	ldr	r0, [pc, #36]	@ (80062f8 <_Bfree+0x40>)
 80062d2:	218f      	movs	r1, #143	@ 0x8f
 80062d4:	f001 fd3c 	bl	8007d50 <__assert_func>
 80062d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062dc:	6006      	str	r6, [r0, #0]
 80062de:	60c6      	str	r6, [r0, #12]
 80062e0:	b13c      	cbz	r4, 80062f2 <_Bfree+0x3a>
 80062e2:	69eb      	ldr	r3, [r5, #28]
 80062e4:	6862      	ldr	r2, [r4, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062ec:	6021      	str	r1, [r4, #0]
 80062ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	08008aee 	.word	0x08008aee
 80062f8:	08008b6e 	.word	0x08008b6e

080062fc <__multadd>:
 80062fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006300:	690d      	ldr	r5, [r1, #16]
 8006302:	4607      	mov	r7, r0
 8006304:	460c      	mov	r4, r1
 8006306:	461e      	mov	r6, r3
 8006308:	f101 0c14 	add.w	ip, r1, #20
 800630c:	2000      	movs	r0, #0
 800630e:	f8dc 3000 	ldr.w	r3, [ip]
 8006312:	b299      	uxth	r1, r3
 8006314:	fb02 6101 	mla	r1, r2, r1, r6
 8006318:	0c1e      	lsrs	r6, r3, #16
 800631a:	0c0b      	lsrs	r3, r1, #16
 800631c:	fb02 3306 	mla	r3, r2, r6, r3
 8006320:	b289      	uxth	r1, r1
 8006322:	3001      	adds	r0, #1
 8006324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006328:	4285      	cmp	r5, r0
 800632a:	f84c 1b04 	str.w	r1, [ip], #4
 800632e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006332:	dcec      	bgt.n	800630e <__multadd+0x12>
 8006334:	b30e      	cbz	r6, 800637a <__multadd+0x7e>
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	42ab      	cmp	r3, r5
 800633a:	dc19      	bgt.n	8006370 <__multadd+0x74>
 800633c:	6861      	ldr	r1, [r4, #4]
 800633e:	4638      	mov	r0, r7
 8006340:	3101      	adds	r1, #1
 8006342:	f7ff ff79 	bl	8006238 <_Balloc>
 8006346:	4680      	mov	r8, r0
 8006348:	b928      	cbnz	r0, 8006356 <__multadd+0x5a>
 800634a:	4602      	mov	r2, r0
 800634c:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <__multadd+0x84>)
 800634e:	480d      	ldr	r0, [pc, #52]	@ (8006384 <__multadd+0x88>)
 8006350:	21ba      	movs	r1, #186	@ 0xba
 8006352:	f001 fcfd 	bl	8007d50 <__assert_func>
 8006356:	6922      	ldr	r2, [r4, #16]
 8006358:	3202      	adds	r2, #2
 800635a:	f104 010c 	add.w	r1, r4, #12
 800635e:	0092      	lsls	r2, r2, #2
 8006360:	300c      	adds	r0, #12
 8006362:	f001 fcdf 	bl	8007d24 <memcpy>
 8006366:	4621      	mov	r1, r4
 8006368:	4638      	mov	r0, r7
 800636a:	f7ff ffa5 	bl	80062b8 <_Bfree>
 800636e:	4644      	mov	r4, r8
 8006370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006374:	3501      	adds	r5, #1
 8006376:	615e      	str	r6, [r3, #20]
 8006378:	6125      	str	r5, [r4, #16]
 800637a:	4620      	mov	r0, r4
 800637c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006380:	08008b5d 	.word	0x08008b5d
 8006384:	08008b6e 	.word	0x08008b6e

08006388 <__s2b>:
 8006388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800638c:	460c      	mov	r4, r1
 800638e:	4615      	mov	r5, r2
 8006390:	461f      	mov	r7, r3
 8006392:	2209      	movs	r2, #9
 8006394:	3308      	adds	r3, #8
 8006396:	4606      	mov	r6, r0
 8006398:	fb93 f3f2 	sdiv	r3, r3, r2
 800639c:	2100      	movs	r1, #0
 800639e:	2201      	movs	r2, #1
 80063a0:	429a      	cmp	r2, r3
 80063a2:	db09      	blt.n	80063b8 <__s2b+0x30>
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff ff47 	bl	8006238 <_Balloc>
 80063aa:	b940      	cbnz	r0, 80063be <__s2b+0x36>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <__s2b+0x8c>)
 80063b0:	4819      	ldr	r0, [pc, #100]	@ (8006418 <__s2b+0x90>)
 80063b2:	21d3      	movs	r1, #211	@ 0xd3
 80063b4:	f001 fccc 	bl	8007d50 <__assert_func>
 80063b8:	0052      	lsls	r2, r2, #1
 80063ba:	3101      	adds	r1, #1
 80063bc:	e7f0      	b.n	80063a0 <__s2b+0x18>
 80063be:	9b08      	ldr	r3, [sp, #32]
 80063c0:	6143      	str	r3, [r0, #20]
 80063c2:	2d09      	cmp	r5, #9
 80063c4:	f04f 0301 	mov.w	r3, #1
 80063c8:	6103      	str	r3, [r0, #16]
 80063ca:	dd16      	ble.n	80063fa <__s2b+0x72>
 80063cc:	f104 0909 	add.w	r9, r4, #9
 80063d0:	46c8      	mov	r8, r9
 80063d2:	442c      	add	r4, r5
 80063d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80063d8:	4601      	mov	r1, r0
 80063da:	3b30      	subs	r3, #48	@ 0x30
 80063dc:	220a      	movs	r2, #10
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff ff8c 	bl	80062fc <__multadd>
 80063e4:	45a0      	cmp	r8, r4
 80063e6:	d1f5      	bne.n	80063d4 <__s2b+0x4c>
 80063e8:	f1a5 0408 	sub.w	r4, r5, #8
 80063ec:	444c      	add	r4, r9
 80063ee:	1b2d      	subs	r5, r5, r4
 80063f0:	1963      	adds	r3, r4, r5
 80063f2:	42bb      	cmp	r3, r7
 80063f4:	db04      	blt.n	8006400 <__s2b+0x78>
 80063f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063fa:	340a      	adds	r4, #10
 80063fc:	2509      	movs	r5, #9
 80063fe:	e7f6      	b.n	80063ee <__s2b+0x66>
 8006400:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006404:	4601      	mov	r1, r0
 8006406:	3b30      	subs	r3, #48	@ 0x30
 8006408:	220a      	movs	r2, #10
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff ff76 	bl	80062fc <__multadd>
 8006410:	e7ee      	b.n	80063f0 <__s2b+0x68>
 8006412:	bf00      	nop
 8006414:	08008b5d 	.word	0x08008b5d
 8006418:	08008b6e 	.word	0x08008b6e

0800641c <__hi0bits>:
 800641c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006420:	4603      	mov	r3, r0
 8006422:	bf36      	itet	cc
 8006424:	0403      	lslcc	r3, r0, #16
 8006426:	2000      	movcs	r0, #0
 8006428:	2010      	movcc	r0, #16
 800642a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800642e:	bf3c      	itt	cc
 8006430:	021b      	lslcc	r3, r3, #8
 8006432:	3008      	addcc	r0, #8
 8006434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006438:	bf3c      	itt	cc
 800643a:	011b      	lslcc	r3, r3, #4
 800643c:	3004      	addcc	r0, #4
 800643e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006442:	bf3c      	itt	cc
 8006444:	009b      	lslcc	r3, r3, #2
 8006446:	3002      	addcc	r0, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	db05      	blt.n	8006458 <__hi0bits+0x3c>
 800644c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006450:	f100 0001 	add.w	r0, r0, #1
 8006454:	bf08      	it	eq
 8006456:	2020      	moveq	r0, #32
 8006458:	4770      	bx	lr

0800645a <__lo0bits>:
 800645a:	6803      	ldr	r3, [r0, #0]
 800645c:	4602      	mov	r2, r0
 800645e:	f013 0007 	ands.w	r0, r3, #7
 8006462:	d00b      	beq.n	800647c <__lo0bits+0x22>
 8006464:	07d9      	lsls	r1, r3, #31
 8006466:	d421      	bmi.n	80064ac <__lo0bits+0x52>
 8006468:	0798      	lsls	r0, r3, #30
 800646a:	bf49      	itett	mi
 800646c:	085b      	lsrmi	r3, r3, #1
 800646e:	089b      	lsrpl	r3, r3, #2
 8006470:	2001      	movmi	r0, #1
 8006472:	6013      	strmi	r3, [r2, #0]
 8006474:	bf5c      	itt	pl
 8006476:	6013      	strpl	r3, [r2, #0]
 8006478:	2002      	movpl	r0, #2
 800647a:	4770      	bx	lr
 800647c:	b299      	uxth	r1, r3
 800647e:	b909      	cbnz	r1, 8006484 <__lo0bits+0x2a>
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	2010      	movs	r0, #16
 8006484:	b2d9      	uxtb	r1, r3
 8006486:	b909      	cbnz	r1, 800648c <__lo0bits+0x32>
 8006488:	3008      	adds	r0, #8
 800648a:	0a1b      	lsrs	r3, r3, #8
 800648c:	0719      	lsls	r1, r3, #28
 800648e:	bf04      	itt	eq
 8006490:	091b      	lsreq	r3, r3, #4
 8006492:	3004      	addeq	r0, #4
 8006494:	0799      	lsls	r1, r3, #30
 8006496:	bf04      	itt	eq
 8006498:	089b      	lsreq	r3, r3, #2
 800649a:	3002      	addeq	r0, #2
 800649c:	07d9      	lsls	r1, r3, #31
 800649e:	d403      	bmi.n	80064a8 <__lo0bits+0x4e>
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	f100 0001 	add.w	r0, r0, #1
 80064a6:	d003      	beq.n	80064b0 <__lo0bits+0x56>
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	4770      	bx	lr
 80064ac:	2000      	movs	r0, #0
 80064ae:	4770      	bx	lr
 80064b0:	2020      	movs	r0, #32
 80064b2:	4770      	bx	lr

080064b4 <__i2b>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	460c      	mov	r4, r1
 80064b8:	2101      	movs	r1, #1
 80064ba:	f7ff febd 	bl	8006238 <_Balloc>
 80064be:	4602      	mov	r2, r0
 80064c0:	b928      	cbnz	r0, 80064ce <__i2b+0x1a>
 80064c2:	4b05      	ldr	r3, [pc, #20]	@ (80064d8 <__i2b+0x24>)
 80064c4:	4805      	ldr	r0, [pc, #20]	@ (80064dc <__i2b+0x28>)
 80064c6:	f240 1145 	movw	r1, #325	@ 0x145
 80064ca:	f001 fc41 	bl	8007d50 <__assert_func>
 80064ce:	2301      	movs	r3, #1
 80064d0:	6144      	str	r4, [r0, #20]
 80064d2:	6103      	str	r3, [r0, #16]
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	bf00      	nop
 80064d8:	08008b5d 	.word	0x08008b5d
 80064dc:	08008b6e 	.word	0x08008b6e

080064e0 <__multiply>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	4614      	mov	r4, r2
 80064e6:	690a      	ldr	r2, [r1, #16]
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	bfa8      	it	ge
 80064ee:	4623      	movge	r3, r4
 80064f0:	460f      	mov	r7, r1
 80064f2:	bfa4      	itt	ge
 80064f4:	460c      	movge	r4, r1
 80064f6:	461f      	movge	r7, r3
 80064f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80064fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	6861      	ldr	r1, [r4, #4]
 8006504:	eb0a 0609 	add.w	r6, sl, r9
 8006508:	42b3      	cmp	r3, r6
 800650a:	b085      	sub	sp, #20
 800650c:	bfb8      	it	lt
 800650e:	3101      	addlt	r1, #1
 8006510:	f7ff fe92 	bl	8006238 <_Balloc>
 8006514:	b930      	cbnz	r0, 8006524 <__multiply+0x44>
 8006516:	4602      	mov	r2, r0
 8006518:	4b44      	ldr	r3, [pc, #272]	@ (800662c <__multiply+0x14c>)
 800651a:	4845      	ldr	r0, [pc, #276]	@ (8006630 <__multiply+0x150>)
 800651c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006520:	f001 fc16 	bl	8007d50 <__assert_func>
 8006524:	f100 0514 	add.w	r5, r0, #20
 8006528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800652c:	462b      	mov	r3, r5
 800652e:	2200      	movs	r2, #0
 8006530:	4543      	cmp	r3, r8
 8006532:	d321      	bcc.n	8006578 <__multiply+0x98>
 8006534:	f107 0114 	add.w	r1, r7, #20
 8006538:	f104 0214 	add.w	r2, r4, #20
 800653c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006540:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006544:	9302      	str	r3, [sp, #8]
 8006546:	1b13      	subs	r3, r2, r4
 8006548:	3b15      	subs	r3, #21
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	3304      	adds	r3, #4
 8006550:	f104 0715 	add.w	r7, r4, #21
 8006554:	42ba      	cmp	r2, r7
 8006556:	bf38      	it	cc
 8006558:	2304      	movcc	r3, #4
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	9b02      	ldr	r3, [sp, #8]
 800655e:	9103      	str	r1, [sp, #12]
 8006560:	428b      	cmp	r3, r1
 8006562:	d80c      	bhi.n	800657e <__multiply+0x9e>
 8006564:	2e00      	cmp	r6, #0
 8006566:	dd03      	ble.n	8006570 <__multiply+0x90>
 8006568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800656c:	2b00      	cmp	r3, #0
 800656e:	d05b      	beq.n	8006628 <__multiply+0x148>
 8006570:	6106      	str	r6, [r0, #16]
 8006572:	b005      	add	sp, #20
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	f843 2b04 	str.w	r2, [r3], #4
 800657c:	e7d8      	b.n	8006530 <__multiply+0x50>
 800657e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006582:	f1ba 0f00 	cmp.w	sl, #0
 8006586:	d024      	beq.n	80065d2 <__multiply+0xf2>
 8006588:	f104 0e14 	add.w	lr, r4, #20
 800658c:	46a9      	mov	r9, r5
 800658e:	f04f 0c00 	mov.w	ip, #0
 8006592:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006596:	f8d9 3000 	ldr.w	r3, [r9]
 800659a:	fa1f fb87 	uxth.w	fp, r7
 800659e:	b29b      	uxth	r3, r3
 80065a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80065a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80065a8:	f8d9 7000 	ldr.w	r7, [r9]
 80065ac:	4463      	add	r3, ip
 80065ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80065b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80065b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80065c0:	4572      	cmp	r2, lr
 80065c2:	f849 3b04 	str.w	r3, [r9], #4
 80065c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80065ca:	d8e2      	bhi.n	8006592 <__multiply+0xb2>
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	f845 c003 	str.w	ip, [r5, r3]
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80065d8:	3104      	adds	r1, #4
 80065da:	f1b9 0f00 	cmp.w	r9, #0
 80065de:	d021      	beq.n	8006624 <__multiply+0x144>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	f104 0c14 	add.w	ip, r4, #20
 80065e6:	46ae      	mov	lr, r5
 80065e8:	f04f 0a00 	mov.w	sl, #0
 80065ec:	f8bc b000 	ldrh.w	fp, [ip]
 80065f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80065f4:	fb09 770b 	mla	r7, r9, fp, r7
 80065f8:	4457      	add	r7, sl
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006600:	f84e 3b04 	str.w	r3, [lr], #4
 8006604:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006608:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800660c:	f8be 3000 	ldrh.w	r3, [lr]
 8006610:	fb09 330a 	mla	r3, r9, sl, r3
 8006614:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006618:	4562      	cmp	r2, ip
 800661a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800661e:	d8e5      	bhi.n	80065ec <__multiply+0x10c>
 8006620:	9f01      	ldr	r7, [sp, #4]
 8006622:	51eb      	str	r3, [r5, r7]
 8006624:	3504      	adds	r5, #4
 8006626:	e799      	b.n	800655c <__multiply+0x7c>
 8006628:	3e01      	subs	r6, #1
 800662a:	e79b      	b.n	8006564 <__multiply+0x84>
 800662c:	08008b5d 	.word	0x08008b5d
 8006630:	08008b6e 	.word	0x08008b6e

08006634 <__pow5mult>:
 8006634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006638:	4615      	mov	r5, r2
 800663a:	f012 0203 	ands.w	r2, r2, #3
 800663e:	4607      	mov	r7, r0
 8006640:	460e      	mov	r6, r1
 8006642:	d007      	beq.n	8006654 <__pow5mult+0x20>
 8006644:	4c25      	ldr	r4, [pc, #148]	@ (80066dc <__pow5mult+0xa8>)
 8006646:	3a01      	subs	r2, #1
 8006648:	2300      	movs	r3, #0
 800664a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800664e:	f7ff fe55 	bl	80062fc <__multadd>
 8006652:	4606      	mov	r6, r0
 8006654:	10ad      	asrs	r5, r5, #2
 8006656:	d03d      	beq.n	80066d4 <__pow5mult+0xa0>
 8006658:	69fc      	ldr	r4, [r7, #28]
 800665a:	b97c      	cbnz	r4, 800667c <__pow5mult+0x48>
 800665c:	2010      	movs	r0, #16
 800665e:	f7ff fd35 	bl	80060cc <malloc>
 8006662:	4602      	mov	r2, r0
 8006664:	61f8      	str	r0, [r7, #28]
 8006666:	b928      	cbnz	r0, 8006674 <__pow5mult+0x40>
 8006668:	4b1d      	ldr	r3, [pc, #116]	@ (80066e0 <__pow5mult+0xac>)
 800666a:	481e      	ldr	r0, [pc, #120]	@ (80066e4 <__pow5mult+0xb0>)
 800666c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006670:	f001 fb6e 	bl	8007d50 <__assert_func>
 8006674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006678:	6004      	str	r4, [r0, #0]
 800667a:	60c4      	str	r4, [r0, #12]
 800667c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006684:	b94c      	cbnz	r4, 800669a <__pow5mult+0x66>
 8006686:	f240 2171 	movw	r1, #625	@ 0x271
 800668a:	4638      	mov	r0, r7
 800668c:	f7ff ff12 	bl	80064b4 <__i2b>
 8006690:	2300      	movs	r3, #0
 8006692:	f8c8 0008 	str.w	r0, [r8, #8]
 8006696:	4604      	mov	r4, r0
 8006698:	6003      	str	r3, [r0, #0]
 800669a:	f04f 0900 	mov.w	r9, #0
 800669e:	07eb      	lsls	r3, r5, #31
 80066a0:	d50a      	bpl.n	80066b8 <__pow5mult+0x84>
 80066a2:	4631      	mov	r1, r6
 80066a4:	4622      	mov	r2, r4
 80066a6:	4638      	mov	r0, r7
 80066a8:	f7ff ff1a 	bl	80064e0 <__multiply>
 80066ac:	4631      	mov	r1, r6
 80066ae:	4680      	mov	r8, r0
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff fe01 	bl	80062b8 <_Bfree>
 80066b6:	4646      	mov	r6, r8
 80066b8:	106d      	asrs	r5, r5, #1
 80066ba:	d00b      	beq.n	80066d4 <__pow5mult+0xa0>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	b938      	cbnz	r0, 80066d0 <__pow5mult+0x9c>
 80066c0:	4622      	mov	r2, r4
 80066c2:	4621      	mov	r1, r4
 80066c4:	4638      	mov	r0, r7
 80066c6:	f7ff ff0b 	bl	80064e0 <__multiply>
 80066ca:	6020      	str	r0, [r4, #0]
 80066cc:	f8c0 9000 	str.w	r9, [r0]
 80066d0:	4604      	mov	r4, r0
 80066d2:	e7e4      	b.n	800669e <__pow5mult+0x6a>
 80066d4:	4630      	mov	r0, r6
 80066d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066da:	bf00      	nop
 80066dc:	08008bc8 	.word	0x08008bc8
 80066e0:	08008aee 	.word	0x08008aee
 80066e4:	08008b6e 	.word	0x08008b6e

080066e8 <__lshift>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	460c      	mov	r4, r1
 80066ee:	6849      	ldr	r1, [r1, #4]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	4607      	mov	r7, r0
 80066fa:	4691      	mov	r9, r2
 80066fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006700:	f108 0601 	add.w	r6, r8, #1
 8006704:	42b3      	cmp	r3, r6
 8006706:	db0b      	blt.n	8006720 <__lshift+0x38>
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff fd95 	bl	8006238 <_Balloc>
 800670e:	4605      	mov	r5, r0
 8006710:	b948      	cbnz	r0, 8006726 <__lshift+0x3e>
 8006712:	4602      	mov	r2, r0
 8006714:	4b28      	ldr	r3, [pc, #160]	@ (80067b8 <__lshift+0xd0>)
 8006716:	4829      	ldr	r0, [pc, #164]	@ (80067bc <__lshift+0xd4>)
 8006718:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800671c:	f001 fb18 	bl	8007d50 <__assert_func>
 8006720:	3101      	adds	r1, #1
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	e7ee      	b.n	8006704 <__lshift+0x1c>
 8006726:	2300      	movs	r3, #0
 8006728:	f100 0114 	add.w	r1, r0, #20
 800672c:	f100 0210 	add.w	r2, r0, #16
 8006730:	4618      	mov	r0, r3
 8006732:	4553      	cmp	r3, sl
 8006734:	db33      	blt.n	800679e <__lshift+0xb6>
 8006736:	6920      	ldr	r0, [r4, #16]
 8006738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800673c:	f104 0314 	add.w	r3, r4, #20
 8006740:	f019 091f 	ands.w	r9, r9, #31
 8006744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800674c:	d02b      	beq.n	80067a6 <__lshift+0xbe>
 800674e:	f1c9 0e20 	rsb	lr, r9, #32
 8006752:	468a      	mov	sl, r1
 8006754:	2200      	movs	r2, #0
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	fa00 f009 	lsl.w	r0, r0, r9
 800675c:	4310      	orrs	r0, r2
 800675e:	f84a 0b04 	str.w	r0, [sl], #4
 8006762:	f853 2b04 	ldr.w	r2, [r3], #4
 8006766:	459c      	cmp	ip, r3
 8006768:	fa22 f20e 	lsr.w	r2, r2, lr
 800676c:	d8f3      	bhi.n	8006756 <__lshift+0x6e>
 800676e:	ebac 0304 	sub.w	r3, ip, r4
 8006772:	3b15      	subs	r3, #21
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	3304      	adds	r3, #4
 800677a:	f104 0015 	add.w	r0, r4, #21
 800677e:	4584      	cmp	ip, r0
 8006780:	bf38      	it	cc
 8006782:	2304      	movcc	r3, #4
 8006784:	50ca      	str	r2, [r1, r3]
 8006786:	b10a      	cbz	r2, 800678c <__lshift+0xa4>
 8006788:	f108 0602 	add.w	r6, r8, #2
 800678c:	3e01      	subs	r6, #1
 800678e:	4638      	mov	r0, r7
 8006790:	612e      	str	r6, [r5, #16]
 8006792:	4621      	mov	r1, r4
 8006794:	f7ff fd90 	bl	80062b8 <_Bfree>
 8006798:	4628      	mov	r0, r5
 800679a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679e:	f842 0f04 	str.w	r0, [r2, #4]!
 80067a2:	3301      	adds	r3, #1
 80067a4:	e7c5      	b.n	8006732 <__lshift+0x4a>
 80067a6:	3904      	subs	r1, #4
 80067a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80067b0:	459c      	cmp	ip, r3
 80067b2:	d8f9      	bhi.n	80067a8 <__lshift+0xc0>
 80067b4:	e7ea      	b.n	800678c <__lshift+0xa4>
 80067b6:	bf00      	nop
 80067b8:	08008b5d 	.word	0x08008b5d
 80067bc:	08008b6e 	.word	0x08008b6e

080067c0 <__mcmp>:
 80067c0:	690a      	ldr	r2, [r1, #16]
 80067c2:	4603      	mov	r3, r0
 80067c4:	6900      	ldr	r0, [r0, #16]
 80067c6:	1a80      	subs	r0, r0, r2
 80067c8:	b530      	push	{r4, r5, lr}
 80067ca:	d10e      	bne.n	80067ea <__mcmp+0x2a>
 80067cc:	3314      	adds	r3, #20
 80067ce:	3114      	adds	r1, #20
 80067d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80067d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80067d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067e0:	4295      	cmp	r5, r2
 80067e2:	d003      	beq.n	80067ec <__mcmp+0x2c>
 80067e4:	d205      	bcs.n	80067f2 <__mcmp+0x32>
 80067e6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ea:	bd30      	pop	{r4, r5, pc}
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	d3f3      	bcc.n	80067d8 <__mcmp+0x18>
 80067f0:	e7fb      	b.n	80067ea <__mcmp+0x2a>
 80067f2:	2001      	movs	r0, #1
 80067f4:	e7f9      	b.n	80067ea <__mcmp+0x2a>
	...

080067f8 <__mdiff>:
 80067f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	4689      	mov	r9, r1
 80067fe:	4606      	mov	r6, r0
 8006800:	4611      	mov	r1, r2
 8006802:	4648      	mov	r0, r9
 8006804:	4614      	mov	r4, r2
 8006806:	f7ff ffdb 	bl	80067c0 <__mcmp>
 800680a:	1e05      	subs	r5, r0, #0
 800680c:	d112      	bne.n	8006834 <__mdiff+0x3c>
 800680e:	4629      	mov	r1, r5
 8006810:	4630      	mov	r0, r6
 8006812:	f7ff fd11 	bl	8006238 <_Balloc>
 8006816:	4602      	mov	r2, r0
 8006818:	b928      	cbnz	r0, 8006826 <__mdiff+0x2e>
 800681a:	4b3f      	ldr	r3, [pc, #252]	@ (8006918 <__mdiff+0x120>)
 800681c:	f240 2137 	movw	r1, #567	@ 0x237
 8006820:	483e      	ldr	r0, [pc, #248]	@ (800691c <__mdiff+0x124>)
 8006822:	f001 fa95 	bl	8007d50 <__assert_func>
 8006826:	2301      	movs	r3, #1
 8006828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800682c:	4610      	mov	r0, r2
 800682e:	b003      	add	sp, #12
 8006830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006834:	bfbc      	itt	lt
 8006836:	464b      	movlt	r3, r9
 8006838:	46a1      	movlt	r9, r4
 800683a:	4630      	mov	r0, r6
 800683c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006840:	bfba      	itte	lt
 8006842:	461c      	movlt	r4, r3
 8006844:	2501      	movlt	r5, #1
 8006846:	2500      	movge	r5, #0
 8006848:	f7ff fcf6 	bl	8006238 <_Balloc>
 800684c:	4602      	mov	r2, r0
 800684e:	b918      	cbnz	r0, 8006858 <__mdiff+0x60>
 8006850:	4b31      	ldr	r3, [pc, #196]	@ (8006918 <__mdiff+0x120>)
 8006852:	f240 2145 	movw	r1, #581	@ 0x245
 8006856:	e7e3      	b.n	8006820 <__mdiff+0x28>
 8006858:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800685c:	6926      	ldr	r6, [r4, #16]
 800685e:	60c5      	str	r5, [r0, #12]
 8006860:	f109 0310 	add.w	r3, r9, #16
 8006864:	f109 0514 	add.w	r5, r9, #20
 8006868:	f104 0e14 	add.w	lr, r4, #20
 800686c:	f100 0b14 	add.w	fp, r0, #20
 8006870:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006874:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	46d9      	mov	r9, fp
 800687c:	f04f 0c00 	mov.w	ip, #0
 8006880:	9b01      	ldr	r3, [sp, #4]
 8006882:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006886:	f853 af04 	ldr.w	sl, [r3, #4]!
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	fa1f f38a 	uxth.w	r3, sl
 8006890:	4619      	mov	r1, r3
 8006892:	b283      	uxth	r3, r0
 8006894:	1acb      	subs	r3, r1, r3
 8006896:	0c00      	lsrs	r0, r0, #16
 8006898:	4463      	add	r3, ip
 800689a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800689e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80068a8:	4576      	cmp	r6, lr
 80068aa:	f849 3b04 	str.w	r3, [r9], #4
 80068ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068b2:	d8e5      	bhi.n	8006880 <__mdiff+0x88>
 80068b4:	1b33      	subs	r3, r6, r4
 80068b6:	3b15      	subs	r3, #21
 80068b8:	f023 0303 	bic.w	r3, r3, #3
 80068bc:	3415      	adds	r4, #21
 80068be:	3304      	adds	r3, #4
 80068c0:	42a6      	cmp	r6, r4
 80068c2:	bf38      	it	cc
 80068c4:	2304      	movcc	r3, #4
 80068c6:	441d      	add	r5, r3
 80068c8:	445b      	add	r3, fp
 80068ca:	461e      	mov	r6, r3
 80068cc:	462c      	mov	r4, r5
 80068ce:	4544      	cmp	r4, r8
 80068d0:	d30e      	bcc.n	80068f0 <__mdiff+0xf8>
 80068d2:	f108 0103 	add.w	r1, r8, #3
 80068d6:	1b49      	subs	r1, r1, r5
 80068d8:	f021 0103 	bic.w	r1, r1, #3
 80068dc:	3d03      	subs	r5, #3
 80068de:	45a8      	cmp	r8, r5
 80068e0:	bf38      	it	cc
 80068e2:	2100      	movcc	r1, #0
 80068e4:	440b      	add	r3, r1
 80068e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80068ea:	b191      	cbz	r1, 8006912 <__mdiff+0x11a>
 80068ec:	6117      	str	r7, [r2, #16]
 80068ee:	e79d      	b.n	800682c <__mdiff+0x34>
 80068f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80068f4:	46e6      	mov	lr, ip
 80068f6:	0c08      	lsrs	r0, r1, #16
 80068f8:	fa1c fc81 	uxtah	ip, ip, r1
 80068fc:	4471      	add	r1, lr
 80068fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006902:	b289      	uxth	r1, r1
 8006904:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006908:	f846 1b04 	str.w	r1, [r6], #4
 800690c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006910:	e7dd      	b.n	80068ce <__mdiff+0xd6>
 8006912:	3f01      	subs	r7, #1
 8006914:	e7e7      	b.n	80068e6 <__mdiff+0xee>
 8006916:	bf00      	nop
 8006918:	08008b5d 	.word	0x08008b5d
 800691c:	08008b6e 	.word	0x08008b6e

08006920 <__ulp>:
 8006920:	b082      	sub	sp, #8
 8006922:	ed8d 0b00 	vstr	d0, [sp]
 8006926:	9a01      	ldr	r2, [sp, #4]
 8006928:	4b0f      	ldr	r3, [pc, #60]	@ (8006968 <__ulp+0x48>)
 800692a:	4013      	ands	r3, r2
 800692c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006930:	2b00      	cmp	r3, #0
 8006932:	dc08      	bgt.n	8006946 <__ulp+0x26>
 8006934:	425b      	negs	r3, r3
 8006936:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800693a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800693e:	da04      	bge.n	800694a <__ulp+0x2a>
 8006940:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006944:	4113      	asrs	r3, r2
 8006946:	2200      	movs	r2, #0
 8006948:	e008      	b.n	800695c <__ulp+0x3c>
 800694a:	f1a2 0314 	sub.w	r3, r2, #20
 800694e:	2b1e      	cmp	r3, #30
 8006950:	bfda      	itte	le
 8006952:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006956:	40da      	lsrle	r2, r3
 8006958:	2201      	movgt	r2, #1
 800695a:	2300      	movs	r3, #0
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	ec41 0b10 	vmov	d0, r0, r1
 8006964:	b002      	add	sp, #8
 8006966:	4770      	bx	lr
 8006968:	7ff00000 	.word	0x7ff00000

0800696c <__b2d>:
 800696c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006970:	6906      	ldr	r6, [r0, #16]
 8006972:	f100 0814 	add.w	r8, r0, #20
 8006976:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800697a:	1f37      	subs	r7, r6, #4
 800697c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006980:	4610      	mov	r0, r2
 8006982:	f7ff fd4b 	bl	800641c <__hi0bits>
 8006986:	f1c0 0320 	rsb	r3, r0, #32
 800698a:	280a      	cmp	r0, #10
 800698c:	600b      	str	r3, [r1, #0]
 800698e:	491b      	ldr	r1, [pc, #108]	@ (80069fc <__b2d+0x90>)
 8006990:	dc15      	bgt.n	80069be <__b2d+0x52>
 8006992:	f1c0 0c0b 	rsb	ip, r0, #11
 8006996:	fa22 f30c 	lsr.w	r3, r2, ip
 800699a:	45b8      	cmp	r8, r7
 800699c:	ea43 0501 	orr.w	r5, r3, r1
 80069a0:	bf34      	ite	cc
 80069a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80069a6:	2300      	movcs	r3, #0
 80069a8:	3015      	adds	r0, #21
 80069aa:	fa02 f000 	lsl.w	r0, r2, r0
 80069ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80069b2:	4303      	orrs	r3, r0
 80069b4:	461c      	mov	r4, r3
 80069b6:	ec45 4b10 	vmov	d0, r4, r5
 80069ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069be:	45b8      	cmp	r8, r7
 80069c0:	bf3a      	itte	cc
 80069c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80069c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80069ca:	2300      	movcs	r3, #0
 80069cc:	380b      	subs	r0, #11
 80069ce:	d012      	beq.n	80069f6 <__b2d+0x8a>
 80069d0:	f1c0 0120 	rsb	r1, r0, #32
 80069d4:	fa23 f401 	lsr.w	r4, r3, r1
 80069d8:	4082      	lsls	r2, r0
 80069da:	4322      	orrs	r2, r4
 80069dc:	4547      	cmp	r7, r8
 80069de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80069e2:	bf8c      	ite	hi
 80069e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80069e8:	2200      	movls	r2, #0
 80069ea:	4083      	lsls	r3, r0
 80069ec:	40ca      	lsrs	r2, r1
 80069ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80069f2:	4313      	orrs	r3, r2
 80069f4:	e7de      	b.n	80069b4 <__b2d+0x48>
 80069f6:	ea42 0501 	orr.w	r5, r2, r1
 80069fa:	e7db      	b.n	80069b4 <__b2d+0x48>
 80069fc:	3ff00000 	.word	0x3ff00000

08006a00 <__d2b>:
 8006a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a04:	460f      	mov	r7, r1
 8006a06:	2101      	movs	r1, #1
 8006a08:	ec59 8b10 	vmov	r8, r9, d0
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	f7ff fc13 	bl	8006238 <_Balloc>
 8006a12:	4604      	mov	r4, r0
 8006a14:	b930      	cbnz	r0, 8006a24 <__d2b+0x24>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b23      	ldr	r3, [pc, #140]	@ (8006aa8 <__d2b+0xa8>)
 8006a1a:	4824      	ldr	r0, [pc, #144]	@ (8006aac <__d2b+0xac>)
 8006a1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a20:	f001 f996 	bl	8007d50 <__assert_func>
 8006a24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a2c:	b10d      	cbz	r5, 8006a32 <__d2b+0x32>
 8006a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	f1b8 0300 	subs.w	r3, r8, #0
 8006a38:	d023      	beq.n	8006a82 <__d2b+0x82>
 8006a3a:	4668      	mov	r0, sp
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	f7ff fd0c 	bl	800645a <__lo0bits>
 8006a42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a46:	b1d0      	cbz	r0, 8006a7e <__d2b+0x7e>
 8006a48:	f1c0 0320 	rsb	r3, r0, #32
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	430b      	orrs	r3, r1
 8006a52:	40c2      	lsrs	r2, r0
 8006a54:	6163      	str	r3, [r4, #20]
 8006a56:	9201      	str	r2, [sp, #4]
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	61a3      	str	r3, [r4, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bf0c      	ite	eq
 8006a60:	2201      	moveq	r2, #1
 8006a62:	2202      	movne	r2, #2
 8006a64:	6122      	str	r2, [r4, #16]
 8006a66:	b1a5      	cbz	r5, 8006a92 <__d2b+0x92>
 8006a68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a6c:	4405      	add	r5, r0
 8006a6e:	603d      	str	r5, [r7, #0]
 8006a70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a74:	6030      	str	r0, [r6, #0]
 8006a76:	4620      	mov	r0, r4
 8006a78:	b003      	add	sp, #12
 8006a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a7e:	6161      	str	r1, [r4, #20]
 8006a80:	e7ea      	b.n	8006a58 <__d2b+0x58>
 8006a82:	a801      	add	r0, sp, #4
 8006a84:	f7ff fce9 	bl	800645a <__lo0bits>
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	6163      	str	r3, [r4, #20]
 8006a8c:	3020      	adds	r0, #32
 8006a8e:	2201      	movs	r2, #1
 8006a90:	e7e8      	b.n	8006a64 <__d2b+0x64>
 8006a92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a9a:	6038      	str	r0, [r7, #0]
 8006a9c:	6918      	ldr	r0, [r3, #16]
 8006a9e:	f7ff fcbd 	bl	800641c <__hi0bits>
 8006aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006aa6:	e7e5      	b.n	8006a74 <__d2b+0x74>
 8006aa8:	08008b5d 	.word	0x08008b5d
 8006aac:	08008b6e 	.word	0x08008b6e

08006ab0 <__ratio>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	e9cd 1000 	strd	r1, r0, [sp]
 8006aba:	a902      	add	r1, sp, #8
 8006abc:	f7ff ff56 	bl	800696c <__b2d>
 8006ac0:	9800      	ldr	r0, [sp, #0]
 8006ac2:	a903      	add	r1, sp, #12
 8006ac4:	ec55 4b10 	vmov	r4, r5, d0
 8006ac8:	f7ff ff50 	bl	800696c <__b2d>
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	6919      	ldr	r1, [r3, #16]
 8006ad0:	9b00      	ldr	r3, [sp, #0]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	1ac9      	subs	r1, r1, r3
 8006ad6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	ec5b ab10 	vmov	sl, fp, d0
 8006ae0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	bfce      	itee	gt
 8006ae8:	462a      	movgt	r2, r5
 8006aea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006aee:	465a      	movle	r2, fp
 8006af0:	462f      	mov	r7, r5
 8006af2:	46d9      	mov	r9, fp
 8006af4:	bfcc      	ite	gt
 8006af6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006afa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006afe:	464b      	mov	r3, r9
 8006b00:	4652      	mov	r2, sl
 8006b02:	4620      	mov	r0, r4
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7f9 fec9 	bl	800089c <__aeabi_ddiv>
 8006b0a:	ec41 0b10 	vmov	d0, r0, r1
 8006b0e:	b005      	add	sp, #20
 8006b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b14 <__copybits>:
 8006b14:	3901      	subs	r1, #1
 8006b16:	b570      	push	{r4, r5, r6, lr}
 8006b18:	1149      	asrs	r1, r1, #5
 8006b1a:	6914      	ldr	r4, [r2, #16]
 8006b1c:	3101      	adds	r1, #1
 8006b1e:	f102 0314 	add.w	r3, r2, #20
 8006b22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006b26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006b2a:	1f05      	subs	r5, r0, #4
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d30c      	bcc.n	8006b4a <__copybits+0x36>
 8006b30:	1aa3      	subs	r3, r4, r2
 8006b32:	3b11      	subs	r3, #17
 8006b34:	f023 0303 	bic.w	r3, r3, #3
 8006b38:	3211      	adds	r2, #17
 8006b3a:	42a2      	cmp	r2, r4
 8006b3c:	bf88      	it	hi
 8006b3e:	2300      	movhi	r3, #0
 8006b40:	4418      	add	r0, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	4288      	cmp	r0, r1
 8006b46:	d305      	bcc.n	8006b54 <__copybits+0x40>
 8006b48:	bd70      	pop	{r4, r5, r6, pc}
 8006b4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006b4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006b52:	e7eb      	b.n	8006b2c <__copybits+0x18>
 8006b54:	f840 3b04 	str.w	r3, [r0], #4
 8006b58:	e7f4      	b.n	8006b44 <__copybits+0x30>

08006b5a <__any_on>:
 8006b5a:	f100 0214 	add.w	r2, r0, #20
 8006b5e:	6900      	ldr	r0, [r0, #16]
 8006b60:	114b      	asrs	r3, r1, #5
 8006b62:	4298      	cmp	r0, r3
 8006b64:	b510      	push	{r4, lr}
 8006b66:	db11      	blt.n	8006b8c <__any_on+0x32>
 8006b68:	dd0a      	ble.n	8006b80 <__any_on+0x26>
 8006b6a:	f011 011f 	ands.w	r1, r1, #31
 8006b6e:	d007      	beq.n	8006b80 <__any_on+0x26>
 8006b70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006b74:	fa24 f001 	lsr.w	r0, r4, r1
 8006b78:	fa00 f101 	lsl.w	r1, r0, r1
 8006b7c:	428c      	cmp	r4, r1
 8006b7e:	d10b      	bne.n	8006b98 <__any_on+0x3e>
 8006b80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d803      	bhi.n	8006b90 <__any_on+0x36>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	bd10      	pop	{r4, pc}
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	e7f7      	b.n	8006b80 <__any_on+0x26>
 8006b90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d0f5      	beq.n	8006b84 <__any_on+0x2a>
 8006b98:	2001      	movs	r0, #1
 8006b9a:	e7f6      	b.n	8006b8a <__any_on+0x30>

08006b9c <sulp>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	460d      	mov	r5, r1
 8006ba2:	ec45 4b10 	vmov	d0, r4, r5
 8006ba6:	4616      	mov	r6, r2
 8006ba8:	f7ff feba 	bl	8006920 <__ulp>
 8006bac:	ec51 0b10 	vmov	r0, r1, d0
 8006bb0:	b17e      	cbz	r6, 8006bd2 <sulp+0x36>
 8006bb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006bb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	dd09      	ble.n	8006bd2 <sulp+0x36>
 8006bbe:	051b      	lsls	r3, r3, #20
 8006bc0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006bc4:	2400      	movs	r4, #0
 8006bc6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006bca:	4622      	mov	r2, r4
 8006bcc:	462b      	mov	r3, r5
 8006bce:	f7f9 fd3b 	bl	8000648 <__aeabi_dmul>
 8006bd2:	ec41 0b10 	vmov	d0, r0, r1
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}

08006bd8 <_strtod_l>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	b09f      	sub	sp, #124	@ 0x7c
 8006bde:	460c      	mov	r4, r1
 8006be0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006be2:	2200      	movs	r2, #0
 8006be4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006be6:	9005      	str	r0, [sp, #20]
 8006be8:	f04f 0a00 	mov.w	sl, #0
 8006bec:	f04f 0b00 	mov.w	fp, #0
 8006bf0:	460a      	mov	r2, r1
 8006bf2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006bf4:	7811      	ldrb	r1, [r2, #0]
 8006bf6:	292b      	cmp	r1, #43	@ 0x2b
 8006bf8:	d04a      	beq.n	8006c90 <_strtod_l+0xb8>
 8006bfa:	d838      	bhi.n	8006c6e <_strtod_l+0x96>
 8006bfc:	290d      	cmp	r1, #13
 8006bfe:	d832      	bhi.n	8006c66 <_strtod_l+0x8e>
 8006c00:	2908      	cmp	r1, #8
 8006c02:	d832      	bhi.n	8006c6a <_strtod_l+0x92>
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d03b      	beq.n	8006c80 <_strtod_l+0xa8>
 8006c08:	2200      	movs	r2, #0
 8006c0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006c0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006c0e:	782a      	ldrb	r2, [r5, #0]
 8006c10:	2a30      	cmp	r2, #48	@ 0x30
 8006c12:	f040 80b3 	bne.w	8006d7c <_strtod_l+0x1a4>
 8006c16:	786a      	ldrb	r2, [r5, #1]
 8006c18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006c1c:	2a58      	cmp	r2, #88	@ 0x58
 8006c1e:	d16e      	bne.n	8006cfe <_strtod_l+0x126>
 8006c20:	9302      	str	r3, [sp, #8]
 8006c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	ab1a      	add	r3, sp, #104	@ 0x68
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	4a8e      	ldr	r2, [pc, #568]	@ (8006e64 <_strtod_l+0x28c>)
 8006c2c:	9805      	ldr	r0, [sp, #20]
 8006c2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006c30:	a919      	add	r1, sp, #100	@ 0x64
 8006c32:	f001 f927 	bl	8007e84 <__gethex>
 8006c36:	f010 060f 	ands.w	r6, r0, #15
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	d005      	beq.n	8006c4a <_strtod_l+0x72>
 8006c3e:	2e06      	cmp	r6, #6
 8006c40:	d128      	bne.n	8006c94 <_strtod_l+0xbc>
 8006c42:	3501      	adds	r5, #1
 8006c44:	2300      	movs	r3, #0
 8006c46:	9519      	str	r5, [sp, #100]	@ 0x64
 8006c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f040 858e 	bne.w	800776e <_strtod_l+0xb96>
 8006c52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c54:	b1cb      	cbz	r3, 8006c8a <_strtod_l+0xb2>
 8006c56:	4652      	mov	r2, sl
 8006c58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006c5c:	ec43 2b10 	vmov	d0, r2, r3
 8006c60:	b01f      	add	sp, #124	@ 0x7c
 8006c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c66:	2920      	cmp	r1, #32
 8006c68:	d1ce      	bne.n	8006c08 <_strtod_l+0x30>
 8006c6a:	3201      	adds	r2, #1
 8006c6c:	e7c1      	b.n	8006bf2 <_strtod_l+0x1a>
 8006c6e:	292d      	cmp	r1, #45	@ 0x2d
 8006c70:	d1ca      	bne.n	8006c08 <_strtod_l+0x30>
 8006c72:	2101      	movs	r1, #1
 8006c74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c76:	1c51      	adds	r1, r2, #1
 8006c78:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c7a:	7852      	ldrb	r2, [r2, #1]
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	d1c5      	bne.n	8006c0c <_strtod_l+0x34>
 8006c80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c82:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f040 8570 	bne.w	800776a <_strtod_l+0xb92>
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	e7e5      	b.n	8006c5c <_strtod_l+0x84>
 8006c90:	2100      	movs	r1, #0
 8006c92:	e7ef      	b.n	8006c74 <_strtod_l+0x9c>
 8006c94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c96:	b13a      	cbz	r2, 8006ca8 <_strtod_l+0xd0>
 8006c98:	2135      	movs	r1, #53	@ 0x35
 8006c9a:	a81c      	add	r0, sp, #112	@ 0x70
 8006c9c:	f7ff ff3a 	bl	8006b14 <__copybits>
 8006ca0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ca2:	9805      	ldr	r0, [sp, #20]
 8006ca4:	f7ff fb08 	bl	80062b8 <_Bfree>
 8006ca8:	3e01      	subs	r6, #1
 8006caa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006cac:	2e04      	cmp	r6, #4
 8006cae:	d806      	bhi.n	8006cbe <_strtod_l+0xe6>
 8006cb0:	e8df f006 	tbb	[pc, r6]
 8006cb4:	201d0314 	.word	0x201d0314
 8006cb8:	14          	.byte	0x14
 8006cb9:	00          	.byte	0x00
 8006cba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006cbe:	05e1      	lsls	r1, r4, #23
 8006cc0:	bf48      	it	mi
 8006cc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006cc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006cca:	0d1b      	lsrs	r3, r3, #20
 8006ccc:	051b      	lsls	r3, r3, #20
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1bb      	bne.n	8006c4a <_strtod_l+0x72>
 8006cd2:	f7fe fb31 	bl	8005338 <__errno>
 8006cd6:	2322      	movs	r3, #34	@ 0x22
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	e7b6      	b.n	8006c4a <_strtod_l+0x72>
 8006cdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006ce0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006ce4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ce8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006cec:	e7e7      	b.n	8006cbe <_strtod_l+0xe6>
 8006cee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006e6c <_strtod_l+0x294>
 8006cf2:	e7e4      	b.n	8006cbe <_strtod_l+0xe6>
 8006cf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006cf8:	f04f 3aff 	mov.w	sl, #4294967295
 8006cfc:	e7df      	b.n	8006cbe <_strtod_l+0xe6>
 8006cfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b30      	cmp	r3, #48	@ 0x30
 8006d08:	d0f9      	beq.n	8006cfe <_strtod_l+0x126>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d09d      	beq.n	8006c4a <_strtod_l+0x72>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d14:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d16:	2300      	movs	r3, #0
 8006d18:	9308      	str	r3, [sp, #32]
 8006d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1c:	461f      	mov	r7, r3
 8006d1e:	220a      	movs	r2, #10
 8006d20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006d22:	7805      	ldrb	r5, [r0, #0]
 8006d24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006d28:	b2d9      	uxtb	r1, r3
 8006d2a:	2909      	cmp	r1, #9
 8006d2c:	d928      	bls.n	8006d80 <_strtod_l+0x1a8>
 8006d2e:	494e      	ldr	r1, [pc, #312]	@ (8006e68 <_strtod_l+0x290>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	f000 ffd5 	bl	8007ce0 <strncmp>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d032      	beq.n	8006da0 <_strtod_l+0x1c8>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	462a      	mov	r2, r5
 8006d3e:	4681      	mov	r9, r0
 8006d40:	463d      	mov	r5, r7
 8006d42:	4603      	mov	r3, r0
 8006d44:	2a65      	cmp	r2, #101	@ 0x65
 8006d46:	d001      	beq.n	8006d4c <_strtod_l+0x174>
 8006d48:	2a45      	cmp	r2, #69	@ 0x45
 8006d4a:	d114      	bne.n	8006d76 <_strtod_l+0x19e>
 8006d4c:	b91d      	cbnz	r5, 8006d56 <_strtod_l+0x17e>
 8006d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d50:	4302      	orrs	r2, r0
 8006d52:	d095      	beq.n	8006c80 <_strtod_l+0xa8>
 8006d54:	2500      	movs	r5, #0
 8006d56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006d58:	1c62      	adds	r2, r4, #1
 8006d5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d5c:	7862      	ldrb	r2, [r4, #1]
 8006d5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006d60:	d077      	beq.n	8006e52 <_strtod_l+0x27a>
 8006d62:	2a2d      	cmp	r2, #45	@ 0x2d
 8006d64:	d07b      	beq.n	8006e5e <_strtod_l+0x286>
 8006d66:	f04f 0c00 	mov.w	ip, #0
 8006d6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006d6e:	2909      	cmp	r1, #9
 8006d70:	f240 8082 	bls.w	8006e78 <_strtod_l+0x2a0>
 8006d74:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d76:	f04f 0800 	mov.w	r8, #0
 8006d7a:	e0a2      	b.n	8006ec2 <_strtod_l+0x2ea>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e7c7      	b.n	8006d10 <_strtod_l+0x138>
 8006d80:	2f08      	cmp	r7, #8
 8006d82:	bfd5      	itete	le
 8006d84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006d86:	9908      	ldrgt	r1, [sp, #32]
 8006d88:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d90:	f100 0001 	add.w	r0, r0, #1
 8006d94:	bfd4      	ite	le
 8006d96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006d98:	9308      	strgt	r3, [sp, #32]
 8006d9a:	3701      	adds	r7, #1
 8006d9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d9e:	e7bf      	b.n	8006d20 <_strtod_l+0x148>
 8006da0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006da6:	785a      	ldrb	r2, [r3, #1]
 8006da8:	b37f      	cbz	r7, 8006e0a <_strtod_l+0x232>
 8006daa:	4681      	mov	r9, r0
 8006dac:	463d      	mov	r5, r7
 8006dae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006db2:	2b09      	cmp	r3, #9
 8006db4:	d912      	bls.n	8006ddc <_strtod_l+0x204>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7c4      	b.n	8006d44 <_strtod_l+0x16c>
 8006dba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dc0:	785a      	ldrb	r2, [r3, #1]
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	2a30      	cmp	r2, #48	@ 0x30
 8006dc6:	d0f8      	beq.n	8006dba <_strtod_l+0x1e2>
 8006dc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	f200 84d3 	bhi.w	8007778 <_strtod_l+0xba0>
 8006dd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006dd6:	4681      	mov	r9, r0
 8006dd8:	2000      	movs	r0, #0
 8006dda:	4605      	mov	r5, r0
 8006ddc:	3a30      	subs	r2, #48	@ 0x30
 8006dde:	f100 0301 	add.w	r3, r0, #1
 8006de2:	d02a      	beq.n	8006e3a <_strtod_l+0x262>
 8006de4:	4499      	add	r9, r3
 8006de6:	eb00 0c05 	add.w	ip, r0, r5
 8006dea:	462b      	mov	r3, r5
 8006dec:	210a      	movs	r1, #10
 8006dee:	4563      	cmp	r3, ip
 8006df0:	d10d      	bne.n	8006e0e <_strtod_l+0x236>
 8006df2:	1c69      	adds	r1, r5, #1
 8006df4:	4401      	add	r1, r0
 8006df6:	4428      	add	r0, r5
 8006df8:	2808      	cmp	r0, #8
 8006dfa:	dc16      	bgt.n	8006e2a <_strtod_l+0x252>
 8006dfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006dfe:	230a      	movs	r3, #10
 8006e00:	fb03 2300 	mla	r3, r3, r0, r2
 8006e04:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e06:	2300      	movs	r3, #0
 8006e08:	e018      	b.n	8006e3c <_strtod_l+0x264>
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	e7da      	b.n	8006dc4 <_strtod_l+0x1ec>
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	f103 0301 	add.w	r3, r3, #1
 8006e14:	dc03      	bgt.n	8006e1e <_strtod_l+0x246>
 8006e16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006e18:	434e      	muls	r6, r1
 8006e1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8006e1c:	e7e7      	b.n	8006dee <_strtod_l+0x216>
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	bfde      	ittt	le
 8006e22:	9e08      	ldrle	r6, [sp, #32]
 8006e24:	434e      	mulle	r6, r1
 8006e26:	9608      	strle	r6, [sp, #32]
 8006e28:	e7e1      	b.n	8006dee <_strtod_l+0x216>
 8006e2a:	280f      	cmp	r0, #15
 8006e2c:	dceb      	bgt.n	8006e06 <_strtod_l+0x22e>
 8006e2e:	9808      	ldr	r0, [sp, #32]
 8006e30:	230a      	movs	r3, #10
 8006e32:	fb03 2300 	mla	r3, r3, r0, r2
 8006e36:	9308      	str	r3, [sp, #32]
 8006e38:	e7e5      	b.n	8006e06 <_strtod_l+0x22e>
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e3e:	1c50      	adds	r0, r2, #1
 8006e40:	9019      	str	r0, [sp, #100]	@ 0x64
 8006e42:	7852      	ldrb	r2, [r2, #1]
 8006e44:	4618      	mov	r0, r3
 8006e46:	460d      	mov	r5, r1
 8006e48:	e7b1      	b.n	8006dae <_strtod_l+0x1d6>
 8006e4a:	f04f 0900 	mov.w	r9, #0
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e77d      	b.n	8006d4e <_strtod_l+0x176>
 8006e52:	f04f 0c00 	mov.w	ip, #0
 8006e56:	1ca2      	adds	r2, r4, #2
 8006e58:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e5a:	78a2      	ldrb	r2, [r4, #2]
 8006e5c:	e785      	b.n	8006d6a <_strtod_l+0x192>
 8006e5e:	f04f 0c01 	mov.w	ip, #1
 8006e62:	e7f8      	b.n	8006e56 <_strtod_l+0x27e>
 8006e64:	08008ce0 	.word	0x08008ce0
 8006e68:	08008cc8 	.word	0x08008cc8
 8006e6c:	7ff00000 	.word	0x7ff00000
 8006e70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e72:	1c51      	adds	r1, r2, #1
 8006e74:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e76:	7852      	ldrb	r2, [r2, #1]
 8006e78:	2a30      	cmp	r2, #48	@ 0x30
 8006e7a:	d0f9      	beq.n	8006e70 <_strtod_l+0x298>
 8006e7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006e80:	2908      	cmp	r1, #8
 8006e82:	f63f af78 	bhi.w	8006d76 <_strtod_l+0x19e>
 8006e86:	3a30      	subs	r2, #48	@ 0x30
 8006e88:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006e8e:	f04f 080a 	mov.w	r8, #10
 8006e92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e94:	1c56      	adds	r6, r2, #1
 8006e96:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e98:	7852      	ldrb	r2, [r2, #1]
 8006e9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e9e:	f1be 0f09 	cmp.w	lr, #9
 8006ea2:	d939      	bls.n	8006f18 <_strtod_l+0x340>
 8006ea4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006ea6:	1a76      	subs	r6, r6, r1
 8006ea8:	2e08      	cmp	r6, #8
 8006eaa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006eae:	dc03      	bgt.n	8006eb8 <_strtod_l+0x2e0>
 8006eb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006eb2:	4588      	cmp	r8, r1
 8006eb4:	bfa8      	it	ge
 8006eb6:	4688      	movge	r8, r1
 8006eb8:	f1bc 0f00 	cmp.w	ip, #0
 8006ebc:	d001      	beq.n	8006ec2 <_strtod_l+0x2ea>
 8006ebe:	f1c8 0800 	rsb	r8, r8, #0
 8006ec2:	2d00      	cmp	r5, #0
 8006ec4:	d14e      	bne.n	8006f64 <_strtod_l+0x38c>
 8006ec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ec8:	4308      	orrs	r0, r1
 8006eca:	f47f aebe 	bne.w	8006c4a <_strtod_l+0x72>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f47f aed6 	bne.w	8006c80 <_strtod_l+0xa8>
 8006ed4:	2a69      	cmp	r2, #105	@ 0x69
 8006ed6:	d028      	beq.n	8006f2a <_strtod_l+0x352>
 8006ed8:	dc25      	bgt.n	8006f26 <_strtod_l+0x34e>
 8006eda:	2a49      	cmp	r2, #73	@ 0x49
 8006edc:	d025      	beq.n	8006f2a <_strtod_l+0x352>
 8006ede:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ee0:	f47f aece 	bne.w	8006c80 <_strtod_l+0xa8>
 8006ee4:	499b      	ldr	r1, [pc, #620]	@ (8007154 <_strtod_l+0x57c>)
 8006ee6:	a819      	add	r0, sp, #100	@ 0x64
 8006ee8:	f001 f9ee 	bl	80082c8 <__match>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	f43f aec7 	beq.w	8006c80 <_strtod_l+0xa8>
 8006ef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b28      	cmp	r3, #40	@ 0x28
 8006ef8:	d12e      	bne.n	8006f58 <_strtod_l+0x380>
 8006efa:	4997      	ldr	r1, [pc, #604]	@ (8007158 <_strtod_l+0x580>)
 8006efc:	aa1c      	add	r2, sp, #112	@ 0x70
 8006efe:	a819      	add	r0, sp, #100	@ 0x64
 8006f00:	f001 f9f6 	bl	80082f0 <__hexnan>
 8006f04:	2805      	cmp	r0, #5
 8006f06:	d127      	bne.n	8006f58 <_strtod_l+0x380>
 8006f08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006f0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006f0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006f12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006f16:	e698      	b.n	8006c4a <_strtod_l+0x72>
 8006f18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006f1a:	fb08 2101 	mla	r1, r8, r1, r2
 8006f1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006f22:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f24:	e7b5      	b.n	8006e92 <_strtod_l+0x2ba>
 8006f26:	2a6e      	cmp	r2, #110	@ 0x6e
 8006f28:	e7da      	b.n	8006ee0 <_strtod_l+0x308>
 8006f2a:	498c      	ldr	r1, [pc, #560]	@ (800715c <_strtod_l+0x584>)
 8006f2c:	a819      	add	r0, sp, #100	@ 0x64
 8006f2e:	f001 f9cb 	bl	80082c8 <__match>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f43f aea4 	beq.w	8006c80 <_strtod_l+0xa8>
 8006f38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f3a:	4989      	ldr	r1, [pc, #548]	@ (8007160 <_strtod_l+0x588>)
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	a819      	add	r0, sp, #100	@ 0x64
 8006f40:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f42:	f001 f9c1 	bl	80082c8 <__match>
 8006f46:	b910      	cbnz	r0, 8006f4e <_strtod_l+0x376>
 8006f48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007170 <_strtod_l+0x598>
 8006f52:	f04f 0a00 	mov.w	sl, #0
 8006f56:	e678      	b.n	8006c4a <_strtod_l+0x72>
 8006f58:	4882      	ldr	r0, [pc, #520]	@ (8007164 <_strtod_l+0x58c>)
 8006f5a:	f000 fef1 	bl	8007d40 <nan>
 8006f5e:	ec5b ab10 	vmov	sl, fp, d0
 8006f62:	e672      	b.n	8006c4a <_strtod_l+0x72>
 8006f64:	eba8 0309 	sub.w	r3, r8, r9
 8006f68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f6c:	2f00      	cmp	r7, #0
 8006f6e:	bf08      	it	eq
 8006f70:	462f      	moveq	r7, r5
 8006f72:	2d10      	cmp	r5, #16
 8006f74:	462c      	mov	r4, r5
 8006f76:	bfa8      	it	ge
 8006f78:	2410      	movge	r4, #16
 8006f7a:	f7f9 faeb 	bl	8000554 <__aeabi_ui2d>
 8006f7e:	2d09      	cmp	r5, #9
 8006f80:	4682      	mov	sl, r0
 8006f82:	468b      	mov	fp, r1
 8006f84:	dc13      	bgt.n	8006fae <_strtod_l+0x3d6>
 8006f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f43f ae5e 	beq.w	8006c4a <_strtod_l+0x72>
 8006f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f90:	dd78      	ble.n	8007084 <_strtod_l+0x4ac>
 8006f92:	2b16      	cmp	r3, #22
 8006f94:	dc5f      	bgt.n	8007056 <_strtod_l+0x47e>
 8006f96:	4974      	ldr	r1, [pc, #464]	@ (8007168 <_strtod_l+0x590>)
 8006f98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fa0:	4652      	mov	r2, sl
 8006fa2:	465b      	mov	r3, fp
 8006fa4:	f7f9 fb50 	bl	8000648 <__aeabi_dmul>
 8006fa8:	4682      	mov	sl, r0
 8006faa:	468b      	mov	fp, r1
 8006fac:	e64d      	b.n	8006c4a <_strtod_l+0x72>
 8006fae:	4b6e      	ldr	r3, [pc, #440]	@ (8007168 <_strtod_l+0x590>)
 8006fb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006fb8:	f7f9 fb46 	bl	8000648 <__aeabi_dmul>
 8006fbc:	4682      	mov	sl, r0
 8006fbe:	9808      	ldr	r0, [sp, #32]
 8006fc0:	468b      	mov	fp, r1
 8006fc2:	f7f9 fac7 	bl	8000554 <__aeabi_ui2d>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4650      	mov	r0, sl
 8006fcc:	4659      	mov	r1, fp
 8006fce:	f7f9 f985 	bl	80002dc <__adddf3>
 8006fd2:	2d0f      	cmp	r5, #15
 8006fd4:	4682      	mov	sl, r0
 8006fd6:	468b      	mov	fp, r1
 8006fd8:	ddd5      	ble.n	8006f86 <_strtod_l+0x3ae>
 8006fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fdc:	1b2c      	subs	r4, r5, r4
 8006fde:	441c      	add	r4, r3
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	f340 8096 	ble.w	8007112 <_strtod_l+0x53a>
 8006fe6:	f014 030f 	ands.w	r3, r4, #15
 8006fea:	d00a      	beq.n	8007002 <_strtod_l+0x42a>
 8006fec:	495e      	ldr	r1, [pc, #376]	@ (8007168 <_strtod_l+0x590>)
 8006fee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ff2:	4652      	mov	r2, sl
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ffa:	f7f9 fb25 	bl	8000648 <__aeabi_dmul>
 8006ffe:	4682      	mov	sl, r0
 8007000:	468b      	mov	fp, r1
 8007002:	f034 040f 	bics.w	r4, r4, #15
 8007006:	d073      	beq.n	80070f0 <_strtod_l+0x518>
 8007008:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800700c:	dd48      	ble.n	80070a0 <_strtod_l+0x4c8>
 800700e:	2400      	movs	r4, #0
 8007010:	46a0      	mov	r8, r4
 8007012:	940a      	str	r4, [sp, #40]	@ 0x28
 8007014:	46a1      	mov	r9, r4
 8007016:	9a05      	ldr	r2, [sp, #20]
 8007018:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007170 <_strtod_l+0x598>
 800701c:	2322      	movs	r3, #34	@ 0x22
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	f04f 0a00 	mov.w	sl, #0
 8007024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	f43f ae0f 	beq.w	8006c4a <_strtod_l+0x72>
 800702c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800702e:	9805      	ldr	r0, [sp, #20]
 8007030:	f7ff f942 	bl	80062b8 <_Bfree>
 8007034:	9805      	ldr	r0, [sp, #20]
 8007036:	4649      	mov	r1, r9
 8007038:	f7ff f93e 	bl	80062b8 <_Bfree>
 800703c:	9805      	ldr	r0, [sp, #20]
 800703e:	4641      	mov	r1, r8
 8007040:	f7ff f93a 	bl	80062b8 <_Bfree>
 8007044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007046:	9805      	ldr	r0, [sp, #20]
 8007048:	f7ff f936 	bl	80062b8 <_Bfree>
 800704c:	9805      	ldr	r0, [sp, #20]
 800704e:	4621      	mov	r1, r4
 8007050:	f7ff f932 	bl	80062b8 <_Bfree>
 8007054:	e5f9      	b.n	8006c4a <_strtod_l+0x72>
 8007056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007058:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800705c:	4293      	cmp	r3, r2
 800705e:	dbbc      	blt.n	8006fda <_strtod_l+0x402>
 8007060:	4c41      	ldr	r4, [pc, #260]	@ (8007168 <_strtod_l+0x590>)
 8007062:	f1c5 050f 	rsb	r5, r5, #15
 8007066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800706a:	4652      	mov	r2, sl
 800706c:	465b      	mov	r3, fp
 800706e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007072:	f7f9 fae9 	bl	8000648 <__aeabi_dmul>
 8007076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007078:	1b5d      	subs	r5, r3, r5
 800707a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800707e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007082:	e78f      	b.n	8006fa4 <_strtod_l+0x3cc>
 8007084:	3316      	adds	r3, #22
 8007086:	dba8      	blt.n	8006fda <_strtod_l+0x402>
 8007088:	4b37      	ldr	r3, [pc, #220]	@ (8007168 <_strtod_l+0x590>)
 800708a:	eba9 0808 	sub.w	r8, r9, r8
 800708e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007092:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007096:	4650      	mov	r0, sl
 8007098:	4659      	mov	r1, fp
 800709a:	f7f9 fbff 	bl	800089c <__aeabi_ddiv>
 800709e:	e783      	b.n	8006fa8 <_strtod_l+0x3d0>
 80070a0:	4b32      	ldr	r3, [pc, #200]	@ (800716c <_strtod_l+0x594>)
 80070a2:	9308      	str	r3, [sp, #32]
 80070a4:	2300      	movs	r3, #0
 80070a6:	1124      	asrs	r4, r4, #4
 80070a8:	4650      	mov	r0, sl
 80070aa:	4659      	mov	r1, fp
 80070ac:	461e      	mov	r6, r3
 80070ae:	2c01      	cmp	r4, #1
 80070b0:	dc21      	bgt.n	80070f6 <_strtod_l+0x51e>
 80070b2:	b10b      	cbz	r3, 80070b8 <_strtod_l+0x4e0>
 80070b4:	4682      	mov	sl, r0
 80070b6:	468b      	mov	fp, r1
 80070b8:	492c      	ldr	r1, [pc, #176]	@ (800716c <_strtod_l+0x594>)
 80070ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80070be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80070c2:	4652      	mov	r2, sl
 80070c4:	465b      	mov	r3, fp
 80070c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ca:	f7f9 fabd 	bl	8000648 <__aeabi_dmul>
 80070ce:	4b28      	ldr	r3, [pc, #160]	@ (8007170 <_strtod_l+0x598>)
 80070d0:	460a      	mov	r2, r1
 80070d2:	400b      	ands	r3, r1
 80070d4:	4927      	ldr	r1, [pc, #156]	@ (8007174 <_strtod_l+0x59c>)
 80070d6:	428b      	cmp	r3, r1
 80070d8:	4682      	mov	sl, r0
 80070da:	d898      	bhi.n	800700e <_strtod_l+0x436>
 80070dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80070e0:	428b      	cmp	r3, r1
 80070e2:	bf86      	itte	hi
 80070e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007178 <_strtod_l+0x5a0>
 80070e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80070ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80070f0:	2300      	movs	r3, #0
 80070f2:	9308      	str	r3, [sp, #32]
 80070f4:	e07a      	b.n	80071ec <_strtod_l+0x614>
 80070f6:	07e2      	lsls	r2, r4, #31
 80070f8:	d505      	bpl.n	8007106 <_strtod_l+0x52e>
 80070fa:	9b08      	ldr	r3, [sp, #32]
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f7f9 faa2 	bl	8000648 <__aeabi_dmul>
 8007104:	2301      	movs	r3, #1
 8007106:	9a08      	ldr	r2, [sp, #32]
 8007108:	3208      	adds	r2, #8
 800710a:	3601      	adds	r6, #1
 800710c:	1064      	asrs	r4, r4, #1
 800710e:	9208      	str	r2, [sp, #32]
 8007110:	e7cd      	b.n	80070ae <_strtod_l+0x4d6>
 8007112:	d0ed      	beq.n	80070f0 <_strtod_l+0x518>
 8007114:	4264      	negs	r4, r4
 8007116:	f014 020f 	ands.w	r2, r4, #15
 800711a:	d00a      	beq.n	8007132 <_strtod_l+0x55a>
 800711c:	4b12      	ldr	r3, [pc, #72]	@ (8007168 <_strtod_l+0x590>)
 800711e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007122:	4650      	mov	r0, sl
 8007124:	4659      	mov	r1, fp
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 fbb7 	bl	800089c <__aeabi_ddiv>
 800712e:	4682      	mov	sl, r0
 8007130:	468b      	mov	fp, r1
 8007132:	1124      	asrs	r4, r4, #4
 8007134:	d0dc      	beq.n	80070f0 <_strtod_l+0x518>
 8007136:	2c1f      	cmp	r4, #31
 8007138:	dd20      	ble.n	800717c <_strtod_l+0x5a4>
 800713a:	2400      	movs	r4, #0
 800713c:	46a0      	mov	r8, r4
 800713e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007140:	46a1      	mov	r9, r4
 8007142:	9a05      	ldr	r2, [sp, #20]
 8007144:	2322      	movs	r3, #34	@ 0x22
 8007146:	f04f 0a00 	mov.w	sl, #0
 800714a:	f04f 0b00 	mov.w	fp, #0
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	e768      	b.n	8007024 <_strtod_l+0x44c>
 8007152:	bf00      	nop
 8007154:	08008ab5 	.word	0x08008ab5
 8007158:	08008ccc 	.word	0x08008ccc
 800715c:	08008aad 	.word	0x08008aad
 8007160:	08008ae4 	.word	0x08008ae4
 8007164:	08008e75 	.word	0x08008e75
 8007168:	08008c00 	.word	0x08008c00
 800716c:	08008bd8 	.word	0x08008bd8
 8007170:	7ff00000 	.word	0x7ff00000
 8007174:	7ca00000 	.word	0x7ca00000
 8007178:	7fefffff 	.word	0x7fefffff
 800717c:	f014 0310 	ands.w	r3, r4, #16
 8007180:	bf18      	it	ne
 8007182:	236a      	movne	r3, #106	@ 0x6a
 8007184:	4ea9      	ldr	r6, [pc, #676]	@ (800742c <_strtod_l+0x854>)
 8007186:	9308      	str	r3, [sp, #32]
 8007188:	4650      	mov	r0, sl
 800718a:	4659      	mov	r1, fp
 800718c:	2300      	movs	r3, #0
 800718e:	07e2      	lsls	r2, r4, #31
 8007190:	d504      	bpl.n	800719c <_strtod_l+0x5c4>
 8007192:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007196:	f7f9 fa57 	bl	8000648 <__aeabi_dmul>
 800719a:	2301      	movs	r3, #1
 800719c:	1064      	asrs	r4, r4, #1
 800719e:	f106 0608 	add.w	r6, r6, #8
 80071a2:	d1f4      	bne.n	800718e <_strtod_l+0x5b6>
 80071a4:	b10b      	cbz	r3, 80071aa <_strtod_l+0x5d2>
 80071a6:	4682      	mov	sl, r0
 80071a8:	468b      	mov	fp, r1
 80071aa:	9b08      	ldr	r3, [sp, #32]
 80071ac:	b1b3      	cbz	r3, 80071dc <_strtod_l+0x604>
 80071ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80071b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	4659      	mov	r1, fp
 80071ba:	dd0f      	ble.n	80071dc <_strtod_l+0x604>
 80071bc:	2b1f      	cmp	r3, #31
 80071be:	dd55      	ble.n	800726c <_strtod_l+0x694>
 80071c0:	2b34      	cmp	r3, #52	@ 0x34
 80071c2:	bfde      	ittt	le
 80071c4:	f04f 33ff 	movle.w	r3, #4294967295
 80071c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80071cc:	4093      	lslle	r3, r2
 80071ce:	f04f 0a00 	mov.w	sl, #0
 80071d2:	bfcc      	ite	gt
 80071d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80071d8:	ea03 0b01 	andle.w	fp, r3, r1
 80071dc:	2200      	movs	r2, #0
 80071de:	2300      	movs	r3, #0
 80071e0:	4650      	mov	r0, sl
 80071e2:	4659      	mov	r1, fp
 80071e4:	f7f9 fc98 	bl	8000b18 <__aeabi_dcmpeq>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d1a6      	bne.n	800713a <_strtod_l+0x562>
 80071ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80071f2:	9805      	ldr	r0, [sp, #20]
 80071f4:	462b      	mov	r3, r5
 80071f6:	463a      	mov	r2, r7
 80071f8:	f7ff f8c6 	bl	8006388 <__s2b>
 80071fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f af05 	beq.w	800700e <_strtod_l+0x436>
 8007204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007206:	2a00      	cmp	r2, #0
 8007208:	eba9 0308 	sub.w	r3, r9, r8
 800720c:	bfa8      	it	ge
 800720e:	2300      	movge	r3, #0
 8007210:	9312      	str	r3, [sp, #72]	@ 0x48
 8007212:	2400      	movs	r4, #0
 8007214:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007218:	9316      	str	r3, [sp, #88]	@ 0x58
 800721a:	46a0      	mov	r8, r4
 800721c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800721e:	9805      	ldr	r0, [sp, #20]
 8007220:	6859      	ldr	r1, [r3, #4]
 8007222:	f7ff f809 	bl	8006238 <_Balloc>
 8007226:	4681      	mov	r9, r0
 8007228:	2800      	cmp	r0, #0
 800722a:	f43f aef4 	beq.w	8007016 <_strtod_l+0x43e>
 800722e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	3202      	adds	r2, #2
 8007234:	f103 010c 	add.w	r1, r3, #12
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	300c      	adds	r0, #12
 800723c:	f000 fd72 	bl	8007d24 <memcpy>
 8007240:	ec4b ab10 	vmov	d0, sl, fp
 8007244:	9805      	ldr	r0, [sp, #20]
 8007246:	aa1c      	add	r2, sp, #112	@ 0x70
 8007248:	a91b      	add	r1, sp, #108	@ 0x6c
 800724a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800724e:	f7ff fbd7 	bl	8006a00 <__d2b>
 8007252:	901a      	str	r0, [sp, #104]	@ 0x68
 8007254:	2800      	cmp	r0, #0
 8007256:	f43f aede 	beq.w	8007016 <_strtod_l+0x43e>
 800725a:	9805      	ldr	r0, [sp, #20]
 800725c:	2101      	movs	r1, #1
 800725e:	f7ff f929 	bl	80064b4 <__i2b>
 8007262:	4680      	mov	r8, r0
 8007264:	b948      	cbnz	r0, 800727a <_strtod_l+0x6a2>
 8007266:	f04f 0800 	mov.w	r8, #0
 800726a:	e6d4      	b.n	8007016 <_strtod_l+0x43e>
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	ea03 0a0a 	and.w	sl, r3, sl
 8007278:	e7b0      	b.n	80071dc <_strtod_l+0x604>
 800727a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800727c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800727e:	2d00      	cmp	r5, #0
 8007280:	bfab      	itete	ge
 8007282:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007284:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007286:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007288:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800728a:	bfac      	ite	ge
 800728c:	18ef      	addge	r7, r5, r3
 800728e:	1b5e      	sublt	r6, r3, r5
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	1aed      	subs	r5, r5, r3
 8007294:	4415      	add	r5, r2
 8007296:	4b66      	ldr	r3, [pc, #408]	@ (8007430 <_strtod_l+0x858>)
 8007298:	3d01      	subs	r5, #1
 800729a:	429d      	cmp	r5, r3
 800729c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80072a0:	da50      	bge.n	8007344 <_strtod_l+0x76c>
 80072a2:	1b5b      	subs	r3, r3, r5
 80072a4:	2b1f      	cmp	r3, #31
 80072a6:	eba2 0203 	sub.w	r2, r2, r3
 80072aa:	f04f 0101 	mov.w	r1, #1
 80072ae:	dc3d      	bgt.n	800732c <_strtod_l+0x754>
 80072b0:	fa01 f303 	lsl.w	r3, r1, r3
 80072b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072b6:	2300      	movs	r3, #0
 80072b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80072ba:	18bd      	adds	r5, r7, r2
 80072bc:	9b08      	ldr	r3, [sp, #32]
 80072be:	42af      	cmp	r7, r5
 80072c0:	4416      	add	r6, r2
 80072c2:	441e      	add	r6, r3
 80072c4:	463b      	mov	r3, r7
 80072c6:	bfa8      	it	ge
 80072c8:	462b      	movge	r3, r5
 80072ca:	42b3      	cmp	r3, r6
 80072cc:	bfa8      	it	ge
 80072ce:	4633      	movge	r3, r6
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfc2      	ittt	gt
 80072d4:	1aed      	subgt	r5, r5, r3
 80072d6:	1af6      	subgt	r6, r6, r3
 80072d8:	1aff      	subgt	r7, r7, r3
 80072da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dd16      	ble.n	800730e <_strtod_l+0x736>
 80072e0:	4641      	mov	r1, r8
 80072e2:	9805      	ldr	r0, [sp, #20]
 80072e4:	461a      	mov	r2, r3
 80072e6:	f7ff f9a5 	bl	8006634 <__pow5mult>
 80072ea:	4680      	mov	r8, r0
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0ba      	beq.n	8007266 <_strtod_l+0x68e>
 80072f0:	4601      	mov	r1, r0
 80072f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072f4:	9805      	ldr	r0, [sp, #20]
 80072f6:	f7ff f8f3 	bl	80064e0 <__multiply>
 80072fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80072fc:	2800      	cmp	r0, #0
 80072fe:	f43f ae8a 	beq.w	8007016 <_strtod_l+0x43e>
 8007302:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007304:	9805      	ldr	r0, [sp, #20]
 8007306:	f7fe ffd7 	bl	80062b8 <_Bfree>
 800730a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800730c:	931a      	str	r3, [sp, #104]	@ 0x68
 800730e:	2d00      	cmp	r5, #0
 8007310:	dc1d      	bgt.n	800734e <_strtod_l+0x776>
 8007312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd23      	ble.n	8007360 <_strtod_l+0x788>
 8007318:	4649      	mov	r1, r9
 800731a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800731c:	9805      	ldr	r0, [sp, #20]
 800731e:	f7ff f989 	bl	8006634 <__pow5mult>
 8007322:	4681      	mov	r9, r0
 8007324:	b9e0      	cbnz	r0, 8007360 <_strtod_l+0x788>
 8007326:	f04f 0900 	mov.w	r9, #0
 800732a:	e674      	b.n	8007016 <_strtod_l+0x43e>
 800732c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007330:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007334:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007338:	35e2      	adds	r5, #226	@ 0xe2
 800733a:	fa01 f305 	lsl.w	r3, r1, r5
 800733e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007340:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007342:	e7ba      	b.n	80072ba <_strtod_l+0x6e2>
 8007344:	2300      	movs	r3, #0
 8007346:	9310      	str	r3, [sp, #64]	@ 0x40
 8007348:	2301      	movs	r3, #1
 800734a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800734c:	e7b5      	b.n	80072ba <_strtod_l+0x6e2>
 800734e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007350:	9805      	ldr	r0, [sp, #20]
 8007352:	462a      	mov	r2, r5
 8007354:	f7ff f9c8 	bl	80066e8 <__lshift>
 8007358:	901a      	str	r0, [sp, #104]	@ 0x68
 800735a:	2800      	cmp	r0, #0
 800735c:	d1d9      	bne.n	8007312 <_strtod_l+0x73a>
 800735e:	e65a      	b.n	8007016 <_strtod_l+0x43e>
 8007360:	2e00      	cmp	r6, #0
 8007362:	dd07      	ble.n	8007374 <_strtod_l+0x79c>
 8007364:	4649      	mov	r1, r9
 8007366:	9805      	ldr	r0, [sp, #20]
 8007368:	4632      	mov	r2, r6
 800736a:	f7ff f9bd 	bl	80066e8 <__lshift>
 800736e:	4681      	mov	r9, r0
 8007370:	2800      	cmp	r0, #0
 8007372:	d0d8      	beq.n	8007326 <_strtod_l+0x74e>
 8007374:	2f00      	cmp	r7, #0
 8007376:	dd08      	ble.n	800738a <_strtod_l+0x7b2>
 8007378:	4641      	mov	r1, r8
 800737a:	9805      	ldr	r0, [sp, #20]
 800737c:	463a      	mov	r2, r7
 800737e:	f7ff f9b3 	bl	80066e8 <__lshift>
 8007382:	4680      	mov	r8, r0
 8007384:	2800      	cmp	r0, #0
 8007386:	f43f ae46 	beq.w	8007016 <_strtod_l+0x43e>
 800738a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800738c:	9805      	ldr	r0, [sp, #20]
 800738e:	464a      	mov	r2, r9
 8007390:	f7ff fa32 	bl	80067f8 <__mdiff>
 8007394:	4604      	mov	r4, r0
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f ae3d 	beq.w	8007016 <_strtod_l+0x43e>
 800739c:	68c3      	ldr	r3, [r0, #12]
 800739e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073a0:	2300      	movs	r3, #0
 80073a2:	60c3      	str	r3, [r0, #12]
 80073a4:	4641      	mov	r1, r8
 80073a6:	f7ff fa0b 	bl	80067c0 <__mcmp>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	da46      	bge.n	800743c <_strtod_l+0x864>
 80073ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b0:	ea53 030a 	orrs.w	r3, r3, sl
 80073b4:	d16c      	bne.n	8007490 <_strtod_l+0x8b8>
 80073b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d168      	bne.n	8007490 <_strtod_l+0x8b8>
 80073be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073c2:	0d1b      	lsrs	r3, r3, #20
 80073c4:	051b      	lsls	r3, r3, #20
 80073c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80073ca:	d961      	bls.n	8007490 <_strtod_l+0x8b8>
 80073cc:	6963      	ldr	r3, [r4, #20]
 80073ce:	b913      	cbnz	r3, 80073d6 <_strtod_l+0x7fe>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	dd5c      	ble.n	8007490 <_strtod_l+0x8b8>
 80073d6:	4621      	mov	r1, r4
 80073d8:	2201      	movs	r2, #1
 80073da:	9805      	ldr	r0, [sp, #20]
 80073dc:	f7ff f984 	bl	80066e8 <__lshift>
 80073e0:	4641      	mov	r1, r8
 80073e2:	4604      	mov	r4, r0
 80073e4:	f7ff f9ec 	bl	80067c0 <__mcmp>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	dd51      	ble.n	8007490 <_strtod_l+0x8b8>
 80073ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073f0:	9a08      	ldr	r2, [sp, #32]
 80073f2:	0d1b      	lsrs	r3, r3, #20
 80073f4:	051b      	lsls	r3, r3, #20
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	d06b      	beq.n	80074d2 <_strtod_l+0x8fa>
 80073fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80073fe:	d868      	bhi.n	80074d2 <_strtod_l+0x8fa>
 8007400:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007404:	f67f ae9d 	bls.w	8007142 <_strtod_l+0x56a>
 8007408:	4b0a      	ldr	r3, [pc, #40]	@ (8007434 <_strtod_l+0x85c>)
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	2200      	movs	r2, #0
 8007410:	f7f9 f91a 	bl	8000648 <__aeabi_dmul>
 8007414:	4b08      	ldr	r3, [pc, #32]	@ (8007438 <_strtod_l+0x860>)
 8007416:	400b      	ands	r3, r1
 8007418:	4682      	mov	sl, r0
 800741a:	468b      	mov	fp, r1
 800741c:	2b00      	cmp	r3, #0
 800741e:	f47f ae05 	bne.w	800702c <_strtod_l+0x454>
 8007422:	9a05      	ldr	r2, [sp, #20]
 8007424:	2322      	movs	r3, #34	@ 0x22
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	e600      	b.n	800702c <_strtod_l+0x454>
 800742a:	bf00      	nop
 800742c:	08008cf8 	.word	0x08008cf8
 8007430:	fffffc02 	.word	0xfffffc02
 8007434:	39500000 	.word	0x39500000
 8007438:	7ff00000 	.word	0x7ff00000
 800743c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007440:	d165      	bne.n	800750e <_strtod_l+0x936>
 8007442:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007444:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007448:	b35a      	cbz	r2, 80074a2 <_strtod_l+0x8ca>
 800744a:	4a9f      	ldr	r2, [pc, #636]	@ (80076c8 <_strtod_l+0xaf0>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d12b      	bne.n	80074a8 <_strtod_l+0x8d0>
 8007450:	9b08      	ldr	r3, [sp, #32]
 8007452:	4651      	mov	r1, sl
 8007454:	b303      	cbz	r3, 8007498 <_strtod_l+0x8c0>
 8007456:	4b9d      	ldr	r3, [pc, #628]	@ (80076cc <_strtod_l+0xaf4>)
 8007458:	465a      	mov	r2, fp
 800745a:	4013      	ands	r3, r2
 800745c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007460:	f04f 32ff 	mov.w	r2, #4294967295
 8007464:	d81b      	bhi.n	800749e <_strtod_l+0x8c6>
 8007466:	0d1b      	lsrs	r3, r3, #20
 8007468:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800746c:	fa02 f303 	lsl.w	r3, r2, r3
 8007470:	4299      	cmp	r1, r3
 8007472:	d119      	bne.n	80074a8 <_strtod_l+0x8d0>
 8007474:	4b96      	ldr	r3, [pc, #600]	@ (80076d0 <_strtod_l+0xaf8>)
 8007476:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007478:	429a      	cmp	r2, r3
 800747a:	d102      	bne.n	8007482 <_strtod_l+0x8aa>
 800747c:	3101      	adds	r1, #1
 800747e:	f43f adca 	beq.w	8007016 <_strtod_l+0x43e>
 8007482:	4b92      	ldr	r3, [pc, #584]	@ (80076cc <_strtod_l+0xaf4>)
 8007484:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007486:	401a      	ands	r2, r3
 8007488:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800748c:	f04f 0a00 	mov.w	sl, #0
 8007490:	9b08      	ldr	r3, [sp, #32]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1b8      	bne.n	8007408 <_strtod_l+0x830>
 8007496:	e5c9      	b.n	800702c <_strtod_l+0x454>
 8007498:	f04f 33ff 	mov.w	r3, #4294967295
 800749c:	e7e8      	b.n	8007470 <_strtod_l+0x898>
 800749e:	4613      	mov	r3, r2
 80074a0:	e7e6      	b.n	8007470 <_strtod_l+0x898>
 80074a2:	ea53 030a 	orrs.w	r3, r3, sl
 80074a6:	d0a1      	beq.n	80073ec <_strtod_l+0x814>
 80074a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074aa:	b1db      	cbz	r3, 80074e4 <_strtod_l+0x90c>
 80074ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074ae:	4213      	tst	r3, r2
 80074b0:	d0ee      	beq.n	8007490 <_strtod_l+0x8b8>
 80074b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074b4:	9a08      	ldr	r2, [sp, #32]
 80074b6:	4650      	mov	r0, sl
 80074b8:	4659      	mov	r1, fp
 80074ba:	b1bb      	cbz	r3, 80074ec <_strtod_l+0x914>
 80074bc:	f7ff fb6e 	bl	8006b9c <sulp>
 80074c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074c4:	ec53 2b10 	vmov	r2, r3, d0
 80074c8:	f7f8 ff08 	bl	80002dc <__adddf3>
 80074cc:	4682      	mov	sl, r0
 80074ce:	468b      	mov	fp, r1
 80074d0:	e7de      	b.n	8007490 <_strtod_l+0x8b8>
 80074d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80074d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80074da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80074de:	f04f 3aff 	mov.w	sl, #4294967295
 80074e2:	e7d5      	b.n	8007490 <_strtod_l+0x8b8>
 80074e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074e6:	ea13 0f0a 	tst.w	r3, sl
 80074ea:	e7e1      	b.n	80074b0 <_strtod_l+0x8d8>
 80074ec:	f7ff fb56 	bl	8006b9c <sulp>
 80074f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074f4:	ec53 2b10 	vmov	r2, r3, d0
 80074f8:	f7f8 feee 	bl	80002d8 <__aeabi_dsub>
 80074fc:	2200      	movs	r2, #0
 80074fe:	2300      	movs	r3, #0
 8007500:	4682      	mov	sl, r0
 8007502:	468b      	mov	fp, r1
 8007504:	f7f9 fb08 	bl	8000b18 <__aeabi_dcmpeq>
 8007508:	2800      	cmp	r0, #0
 800750a:	d0c1      	beq.n	8007490 <_strtod_l+0x8b8>
 800750c:	e619      	b.n	8007142 <_strtod_l+0x56a>
 800750e:	4641      	mov	r1, r8
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff facd 	bl	8006ab0 <__ratio>
 8007516:	ec57 6b10 	vmov	r6, r7, d0
 800751a:	2200      	movs	r2, #0
 800751c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007520:	4630      	mov	r0, r6
 8007522:	4639      	mov	r1, r7
 8007524:	f7f9 fb0c 	bl	8000b40 <__aeabi_dcmple>
 8007528:	2800      	cmp	r0, #0
 800752a:	d06f      	beq.n	800760c <_strtod_l+0xa34>
 800752c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d17a      	bne.n	8007628 <_strtod_l+0xa50>
 8007532:	f1ba 0f00 	cmp.w	sl, #0
 8007536:	d158      	bne.n	80075ea <_strtod_l+0xa12>
 8007538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800753e:	2b00      	cmp	r3, #0
 8007540:	d15a      	bne.n	80075f8 <_strtod_l+0xa20>
 8007542:	4b64      	ldr	r3, [pc, #400]	@ (80076d4 <_strtod_l+0xafc>)
 8007544:	2200      	movs	r2, #0
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f9 faef 	bl	8000b2c <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	d159      	bne.n	8007606 <_strtod_l+0xa2e>
 8007552:	4630      	mov	r0, r6
 8007554:	4639      	mov	r1, r7
 8007556:	4b60      	ldr	r3, [pc, #384]	@ (80076d8 <_strtod_l+0xb00>)
 8007558:	2200      	movs	r2, #0
 800755a:	f7f9 f875 	bl	8000648 <__aeabi_dmul>
 800755e:	4606      	mov	r6, r0
 8007560:	460f      	mov	r7, r1
 8007562:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007566:	9606      	str	r6, [sp, #24]
 8007568:	9307      	str	r3, [sp, #28]
 800756a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800756e:	4d57      	ldr	r5, [pc, #348]	@ (80076cc <_strtod_l+0xaf4>)
 8007570:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007576:	401d      	ands	r5, r3
 8007578:	4b58      	ldr	r3, [pc, #352]	@ (80076dc <_strtod_l+0xb04>)
 800757a:	429d      	cmp	r5, r3
 800757c:	f040 80b2 	bne.w	80076e4 <_strtod_l+0xb0c>
 8007580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007582:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007586:	ec4b ab10 	vmov	d0, sl, fp
 800758a:	f7ff f9c9 	bl	8006920 <__ulp>
 800758e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007592:	ec51 0b10 	vmov	r0, r1, d0
 8007596:	f7f9 f857 	bl	8000648 <__aeabi_dmul>
 800759a:	4652      	mov	r2, sl
 800759c:	465b      	mov	r3, fp
 800759e:	f7f8 fe9d 	bl	80002dc <__adddf3>
 80075a2:	460b      	mov	r3, r1
 80075a4:	4949      	ldr	r1, [pc, #292]	@ (80076cc <_strtod_l+0xaf4>)
 80075a6:	4a4e      	ldr	r2, [pc, #312]	@ (80076e0 <_strtod_l+0xb08>)
 80075a8:	4019      	ands	r1, r3
 80075aa:	4291      	cmp	r1, r2
 80075ac:	4682      	mov	sl, r0
 80075ae:	d942      	bls.n	8007636 <_strtod_l+0xa5e>
 80075b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80075b2:	4b47      	ldr	r3, [pc, #284]	@ (80076d0 <_strtod_l+0xaf8>)
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d103      	bne.n	80075c0 <_strtod_l+0x9e8>
 80075b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075ba:	3301      	adds	r3, #1
 80075bc:	f43f ad2b 	beq.w	8007016 <_strtod_l+0x43e>
 80075c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80076d0 <_strtod_l+0xaf8>
 80075c4:	f04f 3aff 	mov.w	sl, #4294967295
 80075c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075ca:	9805      	ldr	r0, [sp, #20]
 80075cc:	f7fe fe74 	bl	80062b8 <_Bfree>
 80075d0:	9805      	ldr	r0, [sp, #20]
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7fe fe70 	bl	80062b8 <_Bfree>
 80075d8:	9805      	ldr	r0, [sp, #20]
 80075da:	4641      	mov	r1, r8
 80075dc:	f7fe fe6c 	bl	80062b8 <_Bfree>
 80075e0:	9805      	ldr	r0, [sp, #20]
 80075e2:	4621      	mov	r1, r4
 80075e4:	f7fe fe68 	bl	80062b8 <_Bfree>
 80075e8:	e618      	b.n	800721c <_strtod_l+0x644>
 80075ea:	f1ba 0f01 	cmp.w	sl, #1
 80075ee:	d103      	bne.n	80075f8 <_strtod_l+0xa20>
 80075f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f43f ada5 	beq.w	8007142 <_strtod_l+0x56a>
 80075f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80076a8 <_strtod_l+0xad0>
 80075fc:	4f35      	ldr	r7, [pc, #212]	@ (80076d4 <_strtod_l+0xafc>)
 80075fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007602:	2600      	movs	r6, #0
 8007604:	e7b1      	b.n	800756a <_strtod_l+0x992>
 8007606:	4f34      	ldr	r7, [pc, #208]	@ (80076d8 <_strtod_l+0xb00>)
 8007608:	2600      	movs	r6, #0
 800760a:	e7aa      	b.n	8007562 <_strtod_l+0x98a>
 800760c:	4b32      	ldr	r3, [pc, #200]	@ (80076d8 <_strtod_l+0xb00>)
 800760e:	4630      	mov	r0, r6
 8007610:	4639      	mov	r1, r7
 8007612:	2200      	movs	r2, #0
 8007614:	f7f9 f818 	bl	8000648 <__aeabi_dmul>
 8007618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800761a:	4606      	mov	r6, r0
 800761c:	460f      	mov	r7, r1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d09f      	beq.n	8007562 <_strtod_l+0x98a>
 8007622:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007626:	e7a0      	b.n	800756a <_strtod_l+0x992>
 8007628:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80076b0 <_strtod_l+0xad8>
 800762c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007630:	ec57 6b17 	vmov	r6, r7, d7
 8007634:	e799      	b.n	800756a <_strtod_l+0x992>
 8007636:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800763a:	9b08      	ldr	r3, [sp, #32]
 800763c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1c1      	bne.n	80075c8 <_strtod_l+0x9f0>
 8007644:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007648:	0d1b      	lsrs	r3, r3, #20
 800764a:	051b      	lsls	r3, r3, #20
 800764c:	429d      	cmp	r5, r3
 800764e:	d1bb      	bne.n	80075c8 <_strtod_l+0x9f0>
 8007650:	4630      	mov	r0, r6
 8007652:	4639      	mov	r1, r7
 8007654:	f7f9 fb58 	bl	8000d08 <__aeabi_d2lz>
 8007658:	f7f8 ffc8 	bl	80005ec <__aeabi_l2d>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4630      	mov	r0, r6
 8007662:	4639      	mov	r1, r7
 8007664:	f7f8 fe38 	bl	80002d8 <__aeabi_dsub>
 8007668:	460b      	mov	r3, r1
 800766a:	4602      	mov	r2, r0
 800766c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007670:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007676:	ea46 060a 	orr.w	r6, r6, sl
 800767a:	431e      	orrs	r6, r3
 800767c:	d06f      	beq.n	800775e <_strtod_l+0xb86>
 800767e:	a30e      	add	r3, pc, #56	@ (adr r3, 80076b8 <_strtod_l+0xae0>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f7f9 fa52 	bl	8000b2c <__aeabi_dcmplt>
 8007688:	2800      	cmp	r0, #0
 800768a:	f47f accf 	bne.w	800702c <_strtod_l+0x454>
 800768e:	a30c      	add	r3, pc, #48	@ (adr r3, 80076c0 <_strtod_l+0xae8>)
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007698:	f7f9 fa66 	bl	8000b68 <__aeabi_dcmpgt>
 800769c:	2800      	cmp	r0, #0
 800769e:	d093      	beq.n	80075c8 <_strtod_l+0x9f0>
 80076a0:	e4c4      	b.n	800702c <_strtod_l+0x454>
 80076a2:	bf00      	nop
 80076a4:	f3af 8000 	nop.w
 80076a8:	00000000 	.word	0x00000000
 80076ac:	bff00000 	.word	0xbff00000
 80076b0:	00000000 	.word	0x00000000
 80076b4:	3ff00000 	.word	0x3ff00000
 80076b8:	94a03595 	.word	0x94a03595
 80076bc:	3fdfffff 	.word	0x3fdfffff
 80076c0:	35afe535 	.word	0x35afe535
 80076c4:	3fe00000 	.word	0x3fe00000
 80076c8:	000fffff 	.word	0x000fffff
 80076cc:	7ff00000 	.word	0x7ff00000
 80076d0:	7fefffff 	.word	0x7fefffff
 80076d4:	3ff00000 	.word	0x3ff00000
 80076d8:	3fe00000 	.word	0x3fe00000
 80076dc:	7fe00000 	.word	0x7fe00000
 80076e0:	7c9fffff 	.word	0x7c9fffff
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	b323      	cbz	r3, 8007732 <_strtod_l+0xb5a>
 80076e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80076ec:	d821      	bhi.n	8007732 <_strtod_l+0xb5a>
 80076ee:	a328      	add	r3, pc, #160	@ (adr r3, 8007790 <_strtod_l+0xbb8>)
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	4630      	mov	r0, r6
 80076f6:	4639      	mov	r1, r7
 80076f8:	f7f9 fa22 	bl	8000b40 <__aeabi_dcmple>
 80076fc:	b1a0      	cbz	r0, 8007728 <_strtod_l+0xb50>
 80076fe:	4639      	mov	r1, r7
 8007700:	4630      	mov	r0, r6
 8007702:	f7f9 fa79 	bl	8000bf8 <__aeabi_d2uiz>
 8007706:	2801      	cmp	r0, #1
 8007708:	bf38      	it	cc
 800770a:	2001      	movcc	r0, #1
 800770c:	f7f8 ff22 	bl	8000554 <__aeabi_ui2d>
 8007710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007712:	4606      	mov	r6, r0
 8007714:	460f      	mov	r7, r1
 8007716:	b9fb      	cbnz	r3, 8007758 <_strtod_l+0xb80>
 8007718:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800771c:	9014      	str	r0, [sp, #80]	@ 0x50
 800771e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007720:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007724:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007728:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800772a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800772e:	1b5b      	subs	r3, r3, r5
 8007730:	9311      	str	r3, [sp, #68]	@ 0x44
 8007732:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007736:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800773a:	f7ff f8f1 	bl	8006920 <__ulp>
 800773e:	4650      	mov	r0, sl
 8007740:	ec53 2b10 	vmov	r2, r3, d0
 8007744:	4659      	mov	r1, fp
 8007746:	f7f8 ff7f 	bl	8000648 <__aeabi_dmul>
 800774a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800774e:	f7f8 fdc5 	bl	80002dc <__adddf3>
 8007752:	4682      	mov	sl, r0
 8007754:	468b      	mov	fp, r1
 8007756:	e770      	b.n	800763a <_strtod_l+0xa62>
 8007758:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800775c:	e7e0      	b.n	8007720 <_strtod_l+0xb48>
 800775e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007798 <_strtod_l+0xbc0>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f9 f9e2 	bl	8000b2c <__aeabi_dcmplt>
 8007768:	e798      	b.n	800769c <_strtod_l+0xac4>
 800776a:	2300      	movs	r3, #0
 800776c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800776e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	f7ff ba6d 	b.w	8006c52 <_strtod_l+0x7a>
 8007778:	2a65      	cmp	r2, #101	@ 0x65
 800777a:	f43f ab66 	beq.w	8006e4a <_strtod_l+0x272>
 800777e:	2a45      	cmp	r2, #69	@ 0x45
 8007780:	f43f ab63 	beq.w	8006e4a <_strtod_l+0x272>
 8007784:	2301      	movs	r3, #1
 8007786:	f7ff bb9e 	b.w	8006ec6 <_strtod_l+0x2ee>
 800778a:	bf00      	nop
 800778c:	f3af 8000 	nop.w
 8007790:	ffc00000 	.word	0xffc00000
 8007794:	41dfffff 	.word	0x41dfffff
 8007798:	94a03595 	.word	0x94a03595
 800779c:	3fcfffff 	.word	0x3fcfffff

080077a0 <_strtod_r>:
 80077a0:	4b01      	ldr	r3, [pc, #4]	@ (80077a8 <_strtod_r+0x8>)
 80077a2:	f7ff ba19 	b.w	8006bd8 <_strtod_l>
 80077a6:	bf00      	nop
 80077a8:	20000068 	.word	0x20000068

080077ac <_strtol_l.constprop.0>:
 80077ac:	2b24      	cmp	r3, #36	@ 0x24
 80077ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b2:	4686      	mov	lr, r0
 80077b4:	4690      	mov	r8, r2
 80077b6:	d801      	bhi.n	80077bc <_strtol_l.constprop.0+0x10>
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d106      	bne.n	80077ca <_strtol_l.constprop.0+0x1e>
 80077bc:	f7fd fdbc 	bl	8005338 <__errno>
 80077c0:	2316      	movs	r3, #22
 80077c2:	6003      	str	r3, [r0, #0]
 80077c4:	2000      	movs	r0, #0
 80077c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ca:	4834      	ldr	r0, [pc, #208]	@ (800789c <_strtol_l.constprop.0+0xf0>)
 80077cc:	460d      	mov	r5, r1
 80077ce:	462a      	mov	r2, r5
 80077d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077d4:	5d06      	ldrb	r6, [r0, r4]
 80077d6:	f016 0608 	ands.w	r6, r6, #8
 80077da:	d1f8      	bne.n	80077ce <_strtol_l.constprop.0+0x22>
 80077dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80077de:	d12d      	bne.n	800783c <_strtol_l.constprop.0+0x90>
 80077e0:	782c      	ldrb	r4, [r5, #0]
 80077e2:	2601      	movs	r6, #1
 80077e4:	1c95      	adds	r5, r2, #2
 80077e6:	f033 0210 	bics.w	r2, r3, #16
 80077ea:	d109      	bne.n	8007800 <_strtol_l.constprop.0+0x54>
 80077ec:	2c30      	cmp	r4, #48	@ 0x30
 80077ee:	d12a      	bne.n	8007846 <_strtol_l.constprop.0+0x9a>
 80077f0:	782a      	ldrb	r2, [r5, #0]
 80077f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077f6:	2a58      	cmp	r2, #88	@ 0x58
 80077f8:	d125      	bne.n	8007846 <_strtol_l.constprop.0+0x9a>
 80077fa:	786c      	ldrb	r4, [r5, #1]
 80077fc:	2310      	movs	r3, #16
 80077fe:	3502      	adds	r5, #2
 8007800:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007804:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007808:	2200      	movs	r2, #0
 800780a:	fbbc f9f3 	udiv	r9, ip, r3
 800780e:	4610      	mov	r0, r2
 8007810:	fb03 ca19 	mls	sl, r3, r9, ip
 8007814:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007818:	2f09      	cmp	r7, #9
 800781a:	d81b      	bhi.n	8007854 <_strtol_l.constprop.0+0xa8>
 800781c:	463c      	mov	r4, r7
 800781e:	42a3      	cmp	r3, r4
 8007820:	dd27      	ble.n	8007872 <_strtol_l.constprop.0+0xc6>
 8007822:	1c57      	adds	r7, r2, #1
 8007824:	d007      	beq.n	8007836 <_strtol_l.constprop.0+0x8a>
 8007826:	4581      	cmp	r9, r0
 8007828:	d320      	bcc.n	800786c <_strtol_l.constprop.0+0xc0>
 800782a:	d101      	bne.n	8007830 <_strtol_l.constprop.0+0x84>
 800782c:	45a2      	cmp	sl, r4
 800782e:	db1d      	blt.n	800786c <_strtol_l.constprop.0+0xc0>
 8007830:	fb00 4003 	mla	r0, r0, r3, r4
 8007834:	2201      	movs	r2, #1
 8007836:	f815 4b01 	ldrb.w	r4, [r5], #1
 800783a:	e7eb      	b.n	8007814 <_strtol_l.constprop.0+0x68>
 800783c:	2c2b      	cmp	r4, #43	@ 0x2b
 800783e:	bf04      	itt	eq
 8007840:	782c      	ldrbeq	r4, [r5, #0]
 8007842:	1c95      	addeq	r5, r2, #2
 8007844:	e7cf      	b.n	80077e6 <_strtol_l.constprop.0+0x3a>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1da      	bne.n	8007800 <_strtol_l.constprop.0+0x54>
 800784a:	2c30      	cmp	r4, #48	@ 0x30
 800784c:	bf0c      	ite	eq
 800784e:	2308      	moveq	r3, #8
 8007850:	230a      	movne	r3, #10
 8007852:	e7d5      	b.n	8007800 <_strtol_l.constprop.0+0x54>
 8007854:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007858:	2f19      	cmp	r7, #25
 800785a:	d801      	bhi.n	8007860 <_strtol_l.constprop.0+0xb4>
 800785c:	3c37      	subs	r4, #55	@ 0x37
 800785e:	e7de      	b.n	800781e <_strtol_l.constprop.0+0x72>
 8007860:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007864:	2f19      	cmp	r7, #25
 8007866:	d804      	bhi.n	8007872 <_strtol_l.constprop.0+0xc6>
 8007868:	3c57      	subs	r4, #87	@ 0x57
 800786a:	e7d8      	b.n	800781e <_strtol_l.constprop.0+0x72>
 800786c:	f04f 32ff 	mov.w	r2, #4294967295
 8007870:	e7e1      	b.n	8007836 <_strtol_l.constprop.0+0x8a>
 8007872:	1c53      	adds	r3, r2, #1
 8007874:	d108      	bne.n	8007888 <_strtol_l.constprop.0+0xdc>
 8007876:	2322      	movs	r3, #34	@ 0x22
 8007878:	f8ce 3000 	str.w	r3, [lr]
 800787c:	4660      	mov	r0, ip
 800787e:	f1b8 0f00 	cmp.w	r8, #0
 8007882:	d0a0      	beq.n	80077c6 <_strtol_l.constprop.0+0x1a>
 8007884:	1e69      	subs	r1, r5, #1
 8007886:	e006      	b.n	8007896 <_strtol_l.constprop.0+0xea>
 8007888:	b106      	cbz	r6, 800788c <_strtol_l.constprop.0+0xe0>
 800788a:	4240      	negs	r0, r0
 800788c:	f1b8 0f00 	cmp.w	r8, #0
 8007890:	d099      	beq.n	80077c6 <_strtol_l.constprop.0+0x1a>
 8007892:	2a00      	cmp	r2, #0
 8007894:	d1f6      	bne.n	8007884 <_strtol_l.constprop.0+0xd8>
 8007896:	f8c8 1000 	str.w	r1, [r8]
 800789a:	e794      	b.n	80077c6 <_strtol_l.constprop.0+0x1a>
 800789c:	08008d21 	.word	0x08008d21

080078a0 <_strtol_r>:
 80078a0:	f7ff bf84 	b.w	80077ac <_strtol_l.constprop.0>

080078a4 <__ssputs_r>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	688e      	ldr	r6, [r1, #8]
 80078aa:	461f      	mov	r7, r3
 80078ac:	42be      	cmp	r6, r7
 80078ae:	680b      	ldr	r3, [r1, #0]
 80078b0:	4682      	mov	sl, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	d82d      	bhi.n	8007914 <__ssputs_r+0x70>
 80078b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078c0:	d026      	beq.n	8007910 <__ssputs_r+0x6c>
 80078c2:	6965      	ldr	r5, [r4, #20]
 80078c4:	6909      	ldr	r1, [r1, #16]
 80078c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078ca:	eba3 0901 	sub.w	r9, r3, r1
 80078ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d2:	1c7b      	adds	r3, r7, #1
 80078d4:	444b      	add	r3, r9
 80078d6:	106d      	asrs	r5, r5, #1
 80078d8:	429d      	cmp	r5, r3
 80078da:	bf38      	it	cc
 80078dc:	461d      	movcc	r5, r3
 80078de:	0553      	lsls	r3, r2, #21
 80078e0:	d527      	bpl.n	8007932 <__ssputs_r+0x8e>
 80078e2:	4629      	mov	r1, r5
 80078e4:	f7fe fc1c 	bl	8006120 <_malloc_r>
 80078e8:	4606      	mov	r6, r0
 80078ea:	b360      	cbz	r0, 8007946 <__ssputs_r+0xa2>
 80078ec:	6921      	ldr	r1, [r4, #16]
 80078ee:	464a      	mov	r2, r9
 80078f0:	f000 fa18 	bl	8007d24 <memcpy>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	6126      	str	r6, [r4, #16]
 8007902:	6165      	str	r5, [r4, #20]
 8007904:	444e      	add	r6, r9
 8007906:	eba5 0509 	sub.w	r5, r5, r9
 800790a:	6026      	str	r6, [r4, #0]
 800790c:	60a5      	str	r5, [r4, #8]
 800790e:	463e      	mov	r6, r7
 8007910:	42be      	cmp	r6, r7
 8007912:	d900      	bls.n	8007916 <__ssputs_r+0x72>
 8007914:	463e      	mov	r6, r7
 8007916:	6820      	ldr	r0, [r4, #0]
 8007918:	4632      	mov	r2, r6
 800791a:	4641      	mov	r1, r8
 800791c:	f000 f9c6 	bl	8007cac <memmove>
 8007920:	68a3      	ldr	r3, [r4, #8]
 8007922:	1b9b      	subs	r3, r3, r6
 8007924:	60a3      	str	r3, [r4, #8]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	4433      	add	r3, r6
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	2000      	movs	r0, #0
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	462a      	mov	r2, r5
 8007934:	f000 fd89 	bl	800844a <_realloc_r>
 8007938:	4606      	mov	r6, r0
 800793a:	2800      	cmp	r0, #0
 800793c:	d1e0      	bne.n	8007900 <__ssputs_r+0x5c>
 800793e:	6921      	ldr	r1, [r4, #16]
 8007940:	4650      	mov	r0, sl
 8007942:	f7fe fb79 	bl	8006038 <_free_r>
 8007946:	230c      	movs	r3, #12
 8007948:	f8ca 3000 	str.w	r3, [sl]
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	e7e9      	b.n	800792e <__ssputs_r+0x8a>
	...

0800795c <_svfiprintf_r>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	4698      	mov	r8, r3
 8007962:	898b      	ldrh	r3, [r1, #12]
 8007964:	061b      	lsls	r3, r3, #24
 8007966:	b09d      	sub	sp, #116	@ 0x74
 8007968:	4607      	mov	r7, r0
 800796a:	460d      	mov	r5, r1
 800796c:	4614      	mov	r4, r2
 800796e:	d510      	bpl.n	8007992 <_svfiprintf_r+0x36>
 8007970:	690b      	ldr	r3, [r1, #16]
 8007972:	b973      	cbnz	r3, 8007992 <_svfiprintf_r+0x36>
 8007974:	2140      	movs	r1, #64	@ 0x40
 8007976:	f7fe fbd3 	bl	8006120 <_malloc_r>
 800797a:	6028      	str	r0, [r5, #0]
 800797c:	6128      	str	r0, [r5, #16]
 800797e:	b930      	cbnz	r0, 800798e <_svfiprintf_r+0x32>
 8007980:	230c      	movs	r3, #12
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	b01d      	add	sp, #116	@ 0x74
 800798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798e:	2340      	movs	r3, #64	@ 0x40
 8007990:	616b      	str	r3, [r5, #20]
 8007992:	2300      	movs	r3, #0
 8007994:	9309      	str	r3, [sp, #36]	@ 0x24
 8007996:	2320      	movs	r3, #32
 8007998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800799c:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a0:	2330      	movs	r3, #48	@ 0x30
 80079a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b40 <_svfiprintf_r+0x1e4>
 80079a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079aa:	f04f 0901 	mov.w	r9, #1
 80079ae:	4623      	mov	r3, r4
 80079b0:	469a      	mov	sl, r3
 80079b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b6:	b10a      	cbz	r2, 80079bc <_svfiprintf_r+0x60>
 80079b8:	2a25      	cmp	r2, #37	@ 0x25
 80079ba:	d1f9      	bne.n	80079b0 <_svfiprintf_r+0x54>
 80079bc:	ebba 0b04 	subs.w	fp, sl, r4
 80079c0:	d00b      	beq.n	80079da <_svfiprintf_r+0x7e>
 80079c2:	465b      	mov	r3, fp
 80079c4:	4622      	mov	r2, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ff6b 	bl	80078a4 <__ssputs_r>
 80079ce:	3001      	adds	r0, #1
 80079d0:	f000 80a7 	beq.w	8007b22 <_svfiprintf_r+0x1c6>
 80079d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079d6:	445a      	add	r2, fp
 80079d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80079da:	f89a 3000 	ldrb.w	r3, [sl]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 809f 	beq.w	8007b22 <_svfiprintf_r+0x1c6>
 80079e4:	2300      	movs	r3, #0
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ee:	f10a 0a01 	add.w	sl, sl, #1
 80079f2:	9304      	str	r3, [sp, #16]
 80079f4:	9307      	str	r3, [sp, #28]
 80079f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80079fc:	4654      	mov	r4, sl
 80079fe:	2205      	movs	r2, #5
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	484e      	ldr	r0, [pc, #312]	@ (8007b40 <_svfiprintf_r+0x1e4>)
 8007a06:	f7f8 fc0b 	bl	8000220 <memchr>
 8007a0a:	9a04      	ldr	r2, [sp, #16]
 8007a0c:	b9d8      	cbnz	r0, 8007a46 <_svfiprintf_r+0xea>
 8007a0e:	06d0      	lsls	r0, r2, #27
 8007a10:	bf44      	itt	mi
 8007a12:	2320      	movmi	r3, #32
 8007a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a18:	0711      	lsls	r1, r2, #28
 8007a1a:	bf44      	itt	mi
 8007a1c:	232b      	movmi	r3, #43	@ 0x2b
 8007a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a22:	f89a 3000 	ldrb.w	r3, [sl]
 8007a26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a28:	d015      	beq.n	8007a56 <_svfiprintf_r+0xfa>
 8007a2a:	9a07      	ldr	r2, [sp, #28]
 8007a2c:	4654      	mov	r4, sl
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f04f 0c0a 	mov.w	ip, #10
 8007a34:	4621      	mov	r1, r4
 8007a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a3a:	3b30      	subs	r3, #48	@ 0x30
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d94b      	bls.n	8007ad8 <_svfiprintf_r+0x17c>
 8007a40:	b1b0      	cbz	r0, 8007a70 <_svfiprintf_r+0x114>
 8007a42:	9207      	str	r2, [sp, #28]
 8007a44:	e014      	b.n	8007a70 <_svfiprintf_r+0x114>
 8007a46:	eba0 0308 	sub.w	r3, r0, r8
 8007a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	46a2      	mov	sl, r4
 8007a54:	e7d2      	b.n	80079fc <_svfiprintf_r+0xa0>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	1d19      	adds	r1, r3, #4
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	9103      	str	r1, [sp, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bfbb      	ittet	lt
 8007a62:	425b      	neglt	r3, r3
 8007a64:	f042 0202 	orrlt.w	r2, r2, #2
 8007a68:	9307      	strge	r3, [sp, #28]
 8007a6a:	9307      	strlt	r3, [sp, #28]
 8007a6c:	bfb8      	it	lt
 8007a6e:	9204      	strlt	r2, [sp, #16]
 8007a70:	7823      	ldrb	r3, [r4, #0]
 8007a72:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a74:	d10a      	bne.n	8007a8c <_svfiprintf_r+0x130>
 8007a76:	7863      	ldrb	r3, [r4, #1]
 8007a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a7a:	d132      	bne.n	8007ae2 <_svfiprintf_r+0x186>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	1d1a      	adds	r2, r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	9203      	str	r2, [sp, #12]
 8007a84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a88:	3402      	adds	r4, #2
 8007a8a:	9305      	str	r3, [sp, #20]
 8007a8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b50 <_svfiprintf_r+0x1f4>
 8007a90:	7821      	ldrb	r1, [r4, #0]
 8007a92:	2203      	movs	r2, #3
 8007a94:	4650      	mov	r0, sl
 8007a96:	f7f8 fbc3 	bl	8000220 <memchr>
 8007a9a:	b138      	cbz	r0, 8007aac <_svfiprintf_r+0x150>
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	eba0 000a 	sub.w	r0, r0, sl
 8007aa2:	2240      	movs	r2, #64	@ 0x40
 8007aa4:	4082      	lsls	r2, r0
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	3401      	adds	r4, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab0:	4824      	ldr	r0, [pc, #144]	@ (8007b44 <_svfiprintf_r+0x1e8>)
 8007ab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ab6:	2206      	movs	r2, #6
 8007ab8:	f7f8 fbb2 	bl	8000220 <memchr>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d036      	beq.n	8007b2e <_svfiprintf_r+0x1d2>
 8007ac0:	4b21      	ldr	r3, [pc, #132]	@ (8007b48 <_svfiprintf_r+0x1ec>)
 8007ac2:	bb1b      	cbnz	r3, 8007b0c <_svfiprintf_r+0x1b0>
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	3307      	adds	r3, #7
 8007ac8:	f023 0307 	bic.w	r3, r3, #7
 8007acc:	3308      	adds	r3, #8
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad2:	4433      	add	r3, r6
 8007ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ad6:	e76a      	b.n	80079ae <_svfiprintf_r+0x52>
 8007ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007adc:	460c      	mov	r4, r1
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7a8      	b.n	8007a34 <_svfiprintf_r+0xd8>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	3401      	adds	r4, #1
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0c0a 	mov.w	ip, #10
 8007aee:	4620      	mov	r0, r4
 8007af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af4:	3a30      	subs	r2, #48	@ 0x30
 8007af6:	2a09      	cmp	r2, #9
 8007af8:	d903      	bls.n	8007b02 <_svfiprintf_r+0x1a6>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0c6      	beq.n	8007a8c <_svfiprintf_r+0x130>
 8007afe:	9105      	str	r1, [sp, #20]
 8007b00:	e7c4      	b.n	8007a8c <_svfiprintf_r+0x130>
 8007b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b06:	4604      	mov	r4, r0
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7f0      	b.n	8007aee <_svfiprintf_r+0x192>
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	462a      	mov	r2, r5
 8007b12:	4b0e      	ldr	r3, [pc, #56]	@ (8007b4c <_svfiprintf_r+0x1f0>)
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	4638      	mov	r0, r7
 8007b18:	f7fc fcca 	bl	80044b0 <_printf_float>
 8007b1c:	1c42      	adds	r2, r0, #1
 8007b1e:	4606      	mov	r6, r0
 8007b20:	d1d6      	bne.n	8007ad0 <_svfiprintf_r+0x174>
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	065b      	lsls	r3, r3, #25
 8007b26:	f53f af2d 	bmi.w	8007984 <_svfiprintf_r+0x28>
 8007b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b2c:	e72c      	b.n	8007988 <_svfiprintf_r+0x2c>
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	462a      	mov	r2, r5
 8007b34:	4b05      	ldr	r3, [pc, #20]	@ (8007b4c <_svfiprintf_r+0x1f0>)
 8007b36:	a904      	add	r1, sp, #16
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f7fc ff51 	bl	80049e0 <_printf_i>
 8007b3e:	e7ed      	b.n	8007b1c <_svfiprintf_r+0x1c0>
 8007b40:	08008e21 	.word	0x08008e21
 8007b44:	08008e2b 	.word	0x08008e2b
 8007b48:	080044b1 	.word	0x080044b1
 8007b4c:	080078a5 	.word	0x080078a5
 8007b50:	08008e27 	.word	0x08008e27

08007b54 <__sflush_r>:
 8007b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5c:	0716      	lsls	r6, r2, #28
 8007b5e:	4605      	mov	r5, r0
 8007b60:	460c      	mov	r4, r1
 8007b62:	d454      	bmi.n	8007c0e <__sflush_r+0xba>
 8007b64:	684b      	ldr	r3, [r1, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dc02      	bgt.n	8007b70 <__sflush_r+0x1c>
 8007b6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dd48      	ble.n	8007c02 <__sflush_r+0xae>
 8007b70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	d045      	beq.n	8007c02 <__sflush_r+0xae>
 8007b76:	2300      	movs	r3, #0
 8007b78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b7c:	682f      	ldr	r7, [r5, #0]
 8007b7e:	6a21      	ldr	r1, [r4, #32]
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	d030      	beq.n	8007be6 <__sflush_r+0x92>
 8007b84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	0759      	lsls	r1, r3, #29
 8007b8a:	d505      	bpl.n	8007b98 <__sflush_r+0x44>
 8007b8c:	6863      	ldr	r3, [r4, #4]
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b92:	b10b      	cbz	r3, 8007b98 <__sflush_r+0x44>
 8007b94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b9c:	6a21      	ldr	r1, [r4, #32]
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b0      	blx	r6
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	d106      	bne.n	8007bb6 <__sflush_r+0x62>
 8007ba8:	6829      	ldr	r1, [r5, #0]
 8007baa:	291d      	cmp	r1, #29
 8007bac:	d82b      	bhi.n	8007c06 <__sflush_r+0xb2>
 8007bae:	4a2a      	ldr	r2, [pc, #168]	@ (8007c58 <__sflush_r+0x104>)
 8007bb0:	410a      	asrs	r2, r1
 8007bb2:	07d6      	lsls	r6, r2, #31
 8007bb4:	d427      	bmi.n	8007c06 <__sflush_r+0xb2>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	6062      	str	r2, [r4, #4]
 8007bba:	04d9      	lsls	r1, r3, #19
 8007bbc:	6922      	ldr	r2, [r4, #16]
 8007bbe:	6022      	str	r2, [r4, #0]
 8007bc0:	d504      	bpl.n	8007bcc <__sflush_r+0x78>
 8007bc2:	1c42      	adds	r2, r0, #1
 8007bc4:	d101      	bne.n	8007bca <__sflush_r+0x76>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b903      	cbnz	r3, 8007bcc <__sflush_r+0x78>
 8007bca:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bce:	602f      	str	r7, [r5, #0]
 8007bd0:	b1b9      	cbz	r1, 8007c02 <__sflush_r+0xae>
 8007bd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	d002      	beq.n	8007be0 <__sflush_r+0x8c>
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f7fe fa2c 	bl	8006038 <_free_r>
 8007be0:	2300      	movs	r3, #0
 8007be2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007be4:	e00d      	b.n	8007c02 <__sflush_r+0xae>
 8007be6:	2301      	movs	r3, #1
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b0      	blx	r6
 8007bec:	4602      	mov	r2, r0
 8007bee:	1c50      	adds	r0, r2, #1
 8007bf0:	d1c9      	bne.n	8007b86 <__sflush_r+0x32>
 8007bf2:	682b      	ldr	r3, [r5, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0c6      	beq.n	8007b86 <__sflush_r+0x32>
 8007bf8:	2b1d      	cmp	r3, #29
 8007bfa:	d001      	beq.n	8007c00 <__sflush_r+0xac>
 8007bfc:	2b16      	cmp	r3, #22
 8007bfe:	d11e      	bne.n	8007c3e <__sflush_r+0xea>
 8007c00:	602f      	str	r7, [r5, #0]
 8007c02:	2000      	movs	r0, #0
 8007c04:	e022      	b.n	8007c4c <__sflush_r+0xf8>
 8007c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c0a:	b21b      	sxth	r3, r3
 8007c0c:	e01b      	b.n	8007c46 <__sflush_r+0xf2>
 8007c0e:	690f      	ldr	r7, [r1, #16]
 8007c10:	2f00      	cmp	r7, #0
 8007c12:	d0f6      	beq.n	8007c02 <__sflush_r+0xae>
 8007c14:	0793      	lsls	r3, r2, #30
 8007c16:	680e      	ldr	r6, [r1, #0]
 8007c18:	bf08      	it	eq
 8007c1a:	694b      	ldreq	r3, [r1, #20]
 8007c1c:	600f      	str	r7, [r1, #0]
 8007c1e:	bf18      	it	ne
 8007c20:	2300      	movne	r3, #0
 8007c22:	eba6 0807 	sub.w	r8, r6, r7
 8007c26:	608b      	str	r3, [r1, #8]
 8007c28:	f1b8 0f00 	cmp.w	r8, #0
 8007c2c:	dde9      	ble.n	8007c02 <__sflush_r+0xae>
 8007c2e:	6a21      	ldr	r1, [r4, #32]
 8007c30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c32:	4643      	mov	r3, r8
 8007c34:	463a      	mov	r2, r7
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b0      	blx	r6
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	dc08      	bgt.n	8007c50 <__sflush_r+0xfc>
 8007c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c46:	81a3      	strh	r3, [r4, #12]
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	4407      	add	r7, r0
 8007c52:	eba8 0800 	sub.w	r8, r8, r0
 8007c56:	e7e7      	b.n	8007c28 <__sflush_r+0xd4>
 8007c58:	dfbffffe 	.word	0xdfbffffe

08007c5c <_fflush_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	690b      	ldr	r3, [r1, #16]
 8007c60:	4605      	mov	r5, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	b913      	cbnz	r3, 8007c6c <_fflush_r+0x10>
 8007c66:	2500      	movs	r5, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	b118      	cbz	r0, 8007c76 <_fflush_r+0x1a>
 8007c6e:	6a03      	ldr	r3, [r0, #32]
 8007c70:	b90b      	cbnz	r3, 8007c76 <_fflush_r+0x1a>
 8007c72:	f7fd fa75 	bl	8005160 <__sinit>
 8007c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f3      	beq.n	8007c66 <_fflush_r+0xa>
 8007c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c80:	07d0      	lsls	r0, r2, #31
 8007c82:	d404      	bmi.n	8007c8e <_fflush_r+0x32>
 8007c84:	0599      	lsls	r1, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_fflush_r+0x32>
 8007c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c8a:	f7fd fb80 	bl	800538e <__retarget_lock_acquire_recursive>
 8007c8e:	4628      	mov	r0, r5
 8007c90:	4621      	mov	r1, r4
 8007c92:	f7ff ff5f 	bl	8007b54 <__sflush_r>
 8007c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c98:	07da      	lsls	r2, r3, #31
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	d4e4      	bmi.n	8007c68 <_fflush_r+0xc>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	059b      	lsls	r3, r3, #22
 8007ca2:	d4e1      	bmi.n	8007c68 <_fflush_r+0xc>
 8007ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ca6:	f7fd fb73 	bl	8005390 <__retarget_lock_release_recursive>
 8007caa:	e7dd      	b.n	8007c68 <_fflush_r+0xc>

08007cac <memmove>:
 8007cac:	4288      	cmp	r0, r1
 8007cae:	b510      	push	{r4, lr}
 8007cb0:	eb01 0402 	add.w	r4, r1, r2
 8007cb4:	d902      	bls.n	8007cbc <memmove+0x10>
 8007cb6:	4284      	cmp	r4, r0
 8007cb8:	4623      	mov	r3, r4
 8007cba:	d807      	bhi.n	8007ccc <memmove+0x20>
 8007cbc:	1e43      	subs	r3, r0, #1
 8007cbe:	42a1      	cmp	r1, r4
 8007cc0:	d008      	beq.n	8007cd4 <memmove+0x28>
 8007cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cca:	e7f8      	b.n	8007cbe <memmove+0x12>
 8007ccc:	4402      	add	r2, r0
 8007cce:	4601      	mov	r1, r0
 8007cd0:	428a      	cmp	r2, r1
 8007cd2:	d100      	bne.n	8007cd6 <memmove+0x2a>
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cde:	e7f7      	b.n	8007cd0 <memmove+0x24>

08007ce0 <strncmp>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	b16a      	cbz	r2, 8007d00 <strncmp+0x20>
 8007ce4:	3901      	subs	r1, #1
 8007ce6:	1884      	adds	r4, r0, r2
 8007ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d103      	bne.n	8007cfc <strncmp+0x1c>
 8007cf4:	42a0      	cmp	r0, r4
 8007cf6:	d001      	beq.n	8007cfc <strncmp+0x1c>
 8007cf8:	2a00      	cmp	r2, #0
 8007cfa:	d1f5      	bne.n	8007ce8 <strncmp+0x8>
 8007cfc:	1ad0      	subs	r0, r2, r3
 8007cfe:	bd10      	pop	{r4, pc}
 8007d00:	4610      	mov	r0, r2
 8007d02:	e7fc      	b.n	8007cfe <strncmp+0x1e>

08007d04 <_sbrk_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d06      	ldr	r5, [pc, #24]	@ (8007d20 <_sbrk_r+0x1c>)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	602b      	str	r3, [r5, #0]
 8007d10:	f7f9 fc9a 	bl	8001648 <_sbrk>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_sbrk_r+0x1a>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_sbrk_r+0x1a>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	20000458 	.word	0x20000458

08007d24 <memcpy>:
 8007d24:	440a      	add	r2, r1
 8007d26:	4291      	cmp	r1, r2
 8007d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d2c:	d100      	bne.n	8007d30 <memcpy+0xc>
 8007d2e:	4770      	bx	lr
 8007d30:	b510      	push	{r4, lr}
 8007d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d3a:	4291      	cmp	r1, r2
 8007d3c:	d1f9      	bne.n	8007d32 <memcpy+0xe>
 8007d3e:	bd10      	pop	{r4, pc}

08007d40 <nan>:
 8007d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007d48 <nan+0x8>
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	00000000 	.word	0x00000000
 8007d4c:	7ff80000 	.word	0x7ff80000

08007d50 <__assert_func>:
 8007d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d52:	4614      	mov	r4, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4b09      	ldr	r3, [pc, #36]	@ (8007d7c <__assert_func+0x2c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	68d8      	ldr	r0, [r3, #12]
 8007d5e:	b954      	cbnz	r4, 8007d76 <__assert_func+0x26>
 8007d60:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <__assert_func+0x30>)
 8007d62:	461c      	mov	r4, r3
 8007d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d68:	9100      	str	r1, [sp, #0]
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	4905      	ldr	r1, [pc, #20]	@ (8007d84 <__assert_func+0x34>)
 8007d6e:	f000 fba7 	bl	80084c0 <fiprintf>
 8007d72:	f000 fbb7 	bl	80084e4 <abort>
 8007d76:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <__assert_func+0x38>)
 8007d78:	e7f4      	b.n	8007d64 <__assert_func+0x14>
 8007d7a:	bf00      	nop
 8007d7c:	20000018 	.word	0x20000018
 8007d80:	08008e75 	.word	0x08008e75
 8007d84:	08008e47 	.word	0x08008e47
 8007d88:	08008e3a 	.word	0x08008e3a

08007d8c <_calloc_r>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	fba1 5402 	umull	r5, r4, r1, r2
 8007d92:	b93c      	cbnz	r4, 8007da4 <_calloc_r+0x18>
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7fe f9c3 	bl	8006120 <_malloc_r>
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	b928      	cbnz	r0, 8007daa <_calloc_r+0x1e>
 8007d9e:	2600      	movs	r6, #0
 8007da0:	4630      	mov	r0, r6
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	220c      	movs	r2, #12
 8007da6:	6002      	str	r2, [r0, #0]
 8007da8:	e7f9      	b.n	8007d9e <_calloc_r+0x12>
 8007daa:	462a      	mov	r2, r5
 8007dac:	4621      	mov	r1, r4
 8007dae:	f7fd fa70 	bl	8005292 <memset>
 8007db2:	e7f5      	b.n	8007da0 <_calloc_r+0x14>

08007db4 <rshift>:
 8007db4:	6903      	ldr	r3, [r0, #16]
 8007db6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007dc2:	f100 0414 	add.w	r4, r0, #20
 8007dc6:	dd45      	ble.n	8007e54 <rshift+0xa0>
 8007dc8:	f011 011f 	ands.w	r1, r1, #31
 8007dcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007dd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007dd4:	d10c      	bne.n	8007df0 <rshift+0x3c>
 8007dd6:	f100 0710 	add.w	r7, r0, #16
 8007dda:	4629      	mov	r1, r5
 8007ddc:	42b1      	cmp	r1, r6
 8007dde:	d334      	bcc.n	8007e4a <rshift+0x96>
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	1eea      	subs	r2, r5, #3
 8007de6:	4296      	cmp	r6, r2
 8007de8:	bf38      	it	cc
 8007dea:	2300      	movcc	r3, #0
 8007dec:	4423      	add	r3, r4
 8007dee:	e015      	b.n	8007e1c <rshift+0x68>
 8007df0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007df4:	f1c1 0820 	rsb	r8, r1, #32
 8007df8:	40cf      	lsrs	r7, r1
 8007dfa:	f105 0e04 	add.w	lr, r5, #4
 8007dfe:	46a1      	mov	r9, r4
 8007e00:	4576      	cmp	r6, lr
 8007e02:	46f4      	mov	ip, lr
 8007e04:	d815      	bhi.n	8007e32 <rshift+0x7e>
 8007e06:	1a9a      	subs	r2, r3, r2
 8007e08:	0092      	lsls	r2, r2, #2
 8007e0a:	3a04      	subs	r2, #4
 8007e0c:	3501      	adds	r5, #1
 8007e0e:	42ae      	cmp	r6, r5
 8007e10:	bf38      	it	cc
 8007e12:	2200      	movcc	r2, #0
 8007e14:	18a3      	adds	r3, r4, r2
 8007e16:	50a7      	str	r7, [r4, r2]
 8007e18:	b107      	cbz	r7, 8007e1c <rshift+0x68>
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	1b1a      	subs	r2, r3, r4
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e24:	bf08      	it	eq
 8007e26:	2300      	moveq	r3, #0
 8007e28:	6102      	str	r2, [r0, #16]
 8007e2a:	bf08      	it	eq
 8007e2c:	6143      	streq	r3, [r0, #20]
 8007e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e32:	f8dc c000 	ldr.w	ip, [ip]
 8007e36:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e3a:	ea4c 0707 	orr.w	r7, ip, r7
 8007e3e:	f849 7b04 	str.w	r7, [r9], #4
 8007e42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e46:	40cf      	lsrs	r7, r1
 8007e48:	e7da      	b.n	8007e00 <rshift+0x4c>
 8007e4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e52:	e7c3      	b.n	8007ddc <rshift+0x28>
 8007e54:	4623      	mov	r3, r4
 8007e56:	e7e1      	b.n	8007e1c <rshift+0x68>

08007e58 <__hexdig_fun>:
 8007e58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007e5c:	2b09      	cmp	r3, #9
 8007e5e:	d802      	bhi.n	8007e66 <__hexdig_fun+0xe>
 8007e60:	3820      	subs	r0, #32
 8007e62:	b2c0      	uxtb	r0, r0
 8007e64:	4770      	bx	lr
 8007e66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d801      	bhi.n	8007e72 <__hexdig_fun+0x1a>
 8007e6e:	3847      	subs	r0, #71	@ 0x47
 8007e70:	e7f7      	b.n	8007e62 <__hexdig_fun+0xa>
 8007e72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d801      	bhi.n	8007e7e <__hexdig_fun+0x26>
 8007e7a:	3827      	subs	r0, #39	@ 0x27
 8007e7c:	e7f1      	b.n	8007e62 <__hexdig_fun+0xa>
 8007e7e:	2000      	movs	r0, #0
 8007e80:	4770      	bx	lr
	...

08007e84 <__gethex>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	468a      	mov	sl, r1
 8007e8c:	9302      	str	r3, [sp, #8]
 8007e8e:	680b      	ldr	r3, [r1, #0]
 8007e90:	9001      	str	r0, [sp, #4]
 8007e92:	4690      	mov	r8, r2
 8007e94:	1c9c      	adds	r4, r3, #2
 8007e96:	46a1      	mov	r9, r4
 8007e98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e9c:	2830      	cmp	r0, #48	@ 0x30
 8007e9e:	d0fa      	beq.n	8007e96 <__gethex+0x12>
 8007ea0:	eba9 0303 	sub.w	r3, r9, r3
 8007ea4:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ea8:	f7ff ffd6 	bl	8007e58 <__hexdig_fun>
 8007eac:	4605      	mov	r5, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d168      	bne.n	8007f84 <__gethex+0x100>
 8007eb2:	49a0      	ldr	r1, [pc, #640]	@ (8008134 <__gethex+0x2b0>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	4648      	mov	r0, r9
 8007eb8:	f7ff ff12 	bl	8007ce0 <strncmp>
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d167      	bne.n	8007f92 <__gethex+0x10e>
 8007ec2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007ec6:	4626      	mov	r6, r4
 8007ec8:	f7ff ffc6 	bl	8007e58 <__hexdig_fun>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d062      	beq.n	8007f96 <__gethex+0x112>
 8007ed0:	4623      	mov	r3, r4
 8007ed2:	7818      	ldrb	r0, [r3, #0]
 8007ed4:	2830      	cmp	r0, #48	@ 0x30
 8007ed6:	4699      	mov	r9, r3
 8007ed8:	f103 0301 	add.w	r3, r3, #1
 8007edc:	d0f9      	beq.n	8007ed2 <__gethex+0x4e>
 8007ede:	f7ff ffbb 	bl	8007e58 <__hexdig_fun>
 8007ee2:	fab0 f580 	clz	r5, r0
 8007ee6:	096d      	lsrs	r5, r5, #5
 8007ee8:	f04f 0b01 	mov.w	fp, #1
 8007eec:	464a      	mov	r2, r9
 8007eee:	4616      	mov	r6, r2
 8007ef0:	3201      	adds	r2, #1
 8007ef2:	7830      	ldrb	r0, [r6, #0]
 8007ef4:	f7ff ffb0 	bl	8007e58 <__hexdig_fun>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d1f8      	bne.n	8007eee <__gethex+0x6a>
 8007efc:	498d      	ldr	r1, [pc, #564]	@ (8008134 <__gethex+0x2b0>)
 8007efe:	2201      	movs	r2, #1
 8007f00:	4630      	mov	r0, r6
 8007f02:	f7ff feed 	bl	8007ce0 <strncmp>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d13f      	bne.n	8007f8a <__gethex+0x106>
 8007f0a:	b944      	cbnz	r4, 8007f1e <__gethex+0x9a>
 8007f0c:	1c74      	adds	r4, r6, #1
 8007f0e:	4622      	mov	r2, r4
 8007f10:	4616      	mov	r6, r2
 8007f12:	3201      	adds	r2, #1
 8007f14:	7830      	ldrb	r0, [r6, #0]
 8007f16:	f7ff ff9f 	bl	8007e58 <__hexdig_fun>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d1f8      	bne.n	8007f10 <__gethex+0x8c>
 8007f1e:	1ba4      	subs	r4, r4, r6
 8007f20:	00a7      	lsls	r7, r4, #2
 8007f22:	7833      	ldrb	r3, [r6, #0]
 8007f24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007f28:	2b50      	cmp	r3, #80	@ 0x50
 8007f2a:	d13e      	bne.n	8007faa <__gethex+0x126>
 8007f2c:	7873      	ldrb	r3, [r6, #1]
 8007f2e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f30:	d033      	beq.n	8007f9a <__gethex+0x116>
 8007f32:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f34:	d034      	beq.n	8007fa0 <__gethex+0x11c>
 8007f36:	1c71      	adds	r1, r6, #1
 8007f38:	2400      	movs	r4, #0
 8007f3a:	7808      	ldrb	r0, [r1, #0]
 8007f3c:	f7ff ff8c 	bl	8007e58 <__hexdig_fun>
 8007f40:	1e43      	subs	r3, r0, #1
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b18      	cmp	r3, #24
 8007f46:	d830      	bhi.n	8007faa <__gethex+0x126>
 8007f48:	f1a0 0210 	sub.w	r2, r0, #16
 8007f4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f50:	f7ff ff82 	bl	8007e58 <__hexdig_fun>
 8007f54:	f100 3cff 	add.w	ip, r0, #4294967295
 8007f58:	fa5f fc8c 	uxtb.w	ip, ip
 8007f5c:	f1bc 0f18 	cmp.w	ip, #24
 8007f60:	f04f 030a 	mov.w	r3, #10
 8007f64:	d91e      	bls.n	8007fa4 <__gethex+0x120>
 8007f66:	b104      	cbz	r4, 8007f6a <__gethex+0xe6>
 8007f68:	4252      	negs	r2, r2
 8007f6a:	4417      	add	r7, r2
 8007f6c:	f8ca 1000 	str.w	r1, [sl]
 8007f70:	b1ed      	cbz	r5, 8007fae <__gethex+0x12a>
 8007f72:	f1bb 0f00 	cmp.w	fp, #0
 8007f76:	bf0c      	ite	eq
 8007f78:	2506      	moveq	r5, #6
 8007f7a:	2500      	movne	r5, #0
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	b005      	add	sp, #20
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	2500      	movs	r5, #0
 8007f86:	462c      	mov	r4, r5
 8007f88:	e7b0      	b.n	8007eec <__gethex+0x68>
 8007f8a:	2c00      	cmp	r4, #0
 8007f8c:	d1c7      	bne.n	8007f1e <__gethex+0x9a>
 8007f8e:	4627      	mov	r7, r4
 8007f90:	e7c7      	b.n	8007f22 <__gethex+0x9e>
 8007f92:	464e      	mov	r6, r9
 8007f94:	462f      	mov	r7, r5
 8007f96:	2501      	movs	r5, #1
 8007f98:	e7c3      	b.n	8007f22 <__gethex+0x9e>
 8007f9a:	2400      	movs	r4, #0
 8007f9c:	1cb1      	adds	r1, r6, #2
 8007f9e:	e7cc      	b.n	8007f3a <__gethex+0xb6>
 8007fa0:	2401      	movs	r4, #1
 8007fa2:	e7fb      	b.n	8007f9c <__gethex+0x118>
 8007fa4:	fb03 0002 	mla	r0, r3, r2, r0
 8007fa8:	e7ce      	b.n	8007f48 <__gethex+0xc4>
 8007faa:	4631      	mov	r1, r6
 8007fac:	e7de      	b.n	8007f6c <__gethex+0xe8>
 8007fae:	eba6 0309 	sub.w	r3, r6, r9
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	2b07      	cmp	r3, #7
 8007fb8:	dc0a      	bgt.n	8007fd0 <__gethex+0x14c>
 8007fba:	9801      	ldr	r0, [sp, #4]
 8007fbc:	f7fe f93c 	bl	8006238 <_Balloc>
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	b940      	cbnz	r0, 8007fd6 <__gethex+0x152>
 8007fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8008138 <__gethex+0x2b4>)
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	21e4      	movs	r1, #228	@ 0xe4
 8007fca:	485c      	ldr	r0, [pc, #368]	@ (800813c <__gethex+0x2b8>)
 8007fcc:	f7ff fec0 	bl	8007d50 <__assert_func>
 8007fd0:	3101      	adds	r1, #1
 8007fd2:	105b      	asrs	r3, r3, #1
 8007fd4:	e7ef      	b.n	8007fb6 <__gethex+0x132>
 8007fd6:	f100 0a14 	add.w	sl, r0, #20
 8007fda:	2300      	movs	r3, #0
 8007fdc:	4655      	mov	r5, sl
 8007fde:	469b      	mov	fp, r3
 8007fe0:	45b1      	cmp	r9, r6
 8007fe2:	d337      	bcc.n	8008054 <__gethex+0x1d0>
 8007fe4:	f845 bb04 	str.w	fp, [r5], #4
 8007fe8:	eba5 050a 	sub.w	r5, r5, sl
 8007fec:	10ad      	asrs	r5, r5, #2
 8007fee:	6125      	str	r5, [r4, #16]
 8007ff0:	4658      	mov	r0, fp
 8007ff2:	f7fe fa13 	bl	800641c <__hi0bits>
 8007ff6:	016d      	lsls	r5, r5, #5
 8007ff8:	f8d8 6000 	ldr.w	r6, [r8]
 8007ffc:	1a2d      	subs	r5, r5, r0
 8007ffe:	42b5      	cmp	r5, r6
 8008000:	dd54      	ble.n	80080ac <__gethex+0x228>
 8008002:	1bad      	subs	r5, r5, r6
 8008004:	4629      	mov	r1, r5
 8008006:	4620      	mov	r0, r4
 8008008:	f7fe fda7 	bl	8006b5a <__any_on>
 800800c:	4681      	mov	r9, r0
 800800e:	b178      	cbz	r0, 8008030 <__gethex+0x1ac>
 8008010:	1e6b      	subs	r3, r5, #1
 8008012:	1159      	asrs	r1, r3, #5
 8008014:	f003 021f 	and.w	r2, r3, #31
 8008018:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800801c:	f04f 0901 	mov.w	r9, #1
 8008020:	fa09 f202 	lsl.w	r2, r9, r2
 8008024:	420a      	tst	r2, r1
 8008026:	d003      	beq.n	8008030 <__gethex+0x1ac>
 8008028:	454b      	cmp	r3, r9
 800802a:	dc36      	bgt.n	800809a <__gethex+0x216>
 800802c:	f04f 0902 	mov.w	r9, #2
 8008030:	4629      	mov	r1, r5
 8008032:	4620      	mov	r0, r4
 8008034:	f7ff febe 	bl	8007db4 <rshift>
 8008038:	442f      	add	r7, r5
 800803a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800803e:	42bb      	cmp	r3, r7
 8008040:	da42      	bge.n	80080c8 <__gethex+0x244>
 8008042:	9801      	ldr	r0, [sp, #4]
 8008044:	4621      	mov	r1, r4
 8008046:	f7fe f937 	bl	80062b8 <_Bfree>
 800804a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800804c:	2300      	movs	r3, #0
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	25a3      	movs	r5, #163	@ 0xa3
 8008052:	e793      	b.n	8007f7c <__gethex+0xf8>
 8008054:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008058:	2a2e      	cmp	r2, #46	@ 0x2e
 800805a:	d012      	beq.n	8008082 <__gethex+0x1fe>
 800805c:	2b20      	cmp	r3, #32
 800805e:	d104      	bne.n	800806a <__gethex+0x1e6>
 8008060:	f845 bb04 	str.w	fp, [r5], #4
 8008064:	f04f 0b00 	mov.w	fp, #0
 8008068:	465b      	mov	r3, fp
 800806a:	7830      	ldrb	r0, [r6, #0]
 800806c:	9303      	str	r3, [sp, #12]
 800806e:	f7ff fef3 	bl	8007e58 <__hexdig_fun>
 8008072:	9b03      	ldr	r3, [sp, #12]
 8008074:	f000 000f 	and.w	r0, r0, #15
 8008078:	4098      	lsls	r0, r3
 800807a:	ea4b 0b00 	orr.w	fp, fp, r0
 800807e:	3304      	adds	r3, #4
 8008080:	e7ae      	b.n	8007fe0 <__gethex+0x15c>
 8008082:	45b1      	cmp	r9, r6
 8008084:	d8ea      	bhi.n	800805c <__gethex+0x1d8>
 8008086:	492b      	ldr	r1, [pc, #172]	@ (8008134 <__gethex+0x2b0>)
 8008088:	9303      	str	r3, [sp, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff fe27 	bl	8007ce0 <strncmp>
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	2800      	cmp	r0, #0
 8008096:	d1e1      	bne.n	800805c <__gethex+0x1d8>
 8008098:	e7a2      	b.n	8007fe0 <__gethex+0x15c>
 800809a:	1ea9      	subs	r1, r5, #2
 800809c:	4620      	mov	r0, r4
 800809e:	f7fe fd5c 	bl	8006b5a <__any_on>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0c2      	beq.n	800802c <__gethex+0x1a8>
 80080a6:	f04f 0903 	mov.w	r9, #3
 80080aa:	e7c1      	b.n	8008030 <__gethex+0x1ac>
 80080ac:	da09      	bge.n	80080c2 <__gethex+0x23e>
 80080ae:	1b75      	subs	r5, r6, r5
 80080b0:	4621      	mov	r1, r4
 80080b2:	9801      	ldr	r0, [sp, #4]
 80080b4:	462a      	mov	r2, r5
 80080b6:	f7fe fb17 	bl	80066e8 <__lshift>
 80080ba:	1b7f      	subs	r7, r7, r5
 80080bc:	4604      	mov	r4, r0
 80080be:	f100 0a14 	add.w	sl, r0, #20
 80080c2:	f04f 0900 	mov.w	r9, #0
 80080c6:	e7b8      	b.n	800803a <__gethex+0x1b6>
 80080c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080cc:	42bd      	cmp	r5, r7
 80080ce:	dd6f      	ble.n	80081b0 <__gethex+0x32c>
 80080d0:	1bed      	subs	r5, r5, r7
 80080d2:	42ae      	cmp	r6, r5
 80080d4:	dc34      	bgt.n	8008140 <__gethex+0x2bc>
 80080d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d022      	beq.n	8008124 <__gethex+0x2a0>
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d024      	beq.n	800812c <__gethex+0x2a8>
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d115      	bne.n	8008112 <__gethex+0x28e>
 80080e6:	42ae      	cmp	r6, r5
 80080e8:	d113      	bne.n	8008112 <__gethex+0x28e>
 80080ea:	2e01      	cmp	r6, #1
 80080ec:	d10b      	bne.n	8008106 <__gethex+0x282>
 80080ee:	9a02      	ldr	r2, [sp, #8]
 80080f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	2301      	movs	r3, #1
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	f8ca 3000 	str.w	r3, [sl]
 80080fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008100:	2562      	movs	r5, #98	@ 0x62
 8008102:	601c      	str	r4, [r3, #0]
 8008104:	e73a      	b.n	8007f7c <__gethex+0xf8>
 8008106:	1e71      	subs	r1, r6, #1
 8008108:	4620      	mov	r0, r4
 800810a:	f7fe fd26 	bl	8006b5a <__any_on>
 800810e:	2800      	cmp	r0, #0
 8008110:	d1ed      	bne.n	80080ee <__gethex+0x26a>
 8008112:	9801      	ldr	r0, [sp, #4]
 8008114:	4621      	mov	r1, r4
 8008116:	f7fe f8cf 	bl	80062b8 <_Bfree>
 800811a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800811c:	2300      	movs	r3, #0
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	2550      	movs	r5, #80	@ 0x50
 8008122:	e72b      	b.n	8007f7c <__gethex+0xf8>
 8008124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f3      	bne.n	8008112 <__gethex+0x28e>
 800812a:	e7e0      	b.n	80080ee <__gethex+0x26a>
 800812c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1dd      	bne.n	80080ee <__gethex+0x26a>
 8008132:	e7ee      	b.n	8008112 <__gethex+0x28e>
 8008134:	08008cc8 	.word	0x08008cc8
 8008138:	08008b5d 	.word	0x08008b5d
 800813c:	08008e76 	.word	0x08008e76
 8008140:	1e6f      	subs	r7, r5, #1
 8008142:	f1b9 0f00 	cmp.w	r9, #0
 8008146:	d130      	bne.n	80081aa <__gethex+0x326>
 8008148:	b127      	cbz	r7, 8008154 <__gethex+0x2d0>
 800814a:	4639      	mov	r1, r7
 800814c:	4620      	mov	r0, r4
 800814e:	f7fe fd04 	bl	8006b5a <__any_on>
 8008152:	4681      	mov	r9, r0
 8008154:	117a      	asrs	r2, r7, #5
 8008156:	2301      	movs	r3, #1
 8008158:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800815c:	f007 071f 	and.w	r7, r7, #31
 8008160:	40bb      	lsls	r3, r7
 8008162:	4213      	tst	r3, r2
 8008164:	4629      	mov	r1, r5
 8008166:	4620      	mov	r0, r4
 8008168:	bf18      	it	ne
 800816a:	f049 0902 	orrne.w	r9, r9, #2
 800816e:	f7ff fe21 	bl	8007db4 <rshift>
 8008172:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008176:	1b76      	subs	r6, r6, r5
 8008178:	2502      	movs	r5, #2
 800817a:	f1b9 0f00 	cmp.w	r9, #0
 800817e:	d047      	beq.n	8008210 <__gethex+0x38c>
 8008180:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d015      	beq.n	80081b4 <__gethex+0x330>
 8008188:	2b03      	cmp	r3, #3
 800818a:	d017      	beq.n	80081bc <__gethex+0x338>
 800818c:	2b01      	cmp	r3, #1
 800818e:	d109      	bne.n	80081a4 <__gethex+0x320>
 8008190:	f019 0f02 	tst.w	r9, #2
 8008194:	d006      	beq.n	80081a4 <__gethex+0x320>
 8008196:	f8da 3000 	ldr.w	r3, [sl]
 800819a:	ea49 0903 	orr.w	r9, r9, r3
 800819e:	f019 0f01 	tst.w	r9, #1
 80081a2:	d10e      	bne.n	80081c2 <__gethex+0x33e>
 80081a4:	f045 0510 	orr.w	r5, r5, #16
 80081a8:	e032      	b.n	8008210 <__gethex+0x38c>
 80081aa:	f04f 0901 	mov.w	r9, #1
 80081ae:	e7d1      	b.n	8008154 <__gethex+0x2d0>
 80081b0:	2501      	movs	r5, #1
 80081b2:	e7e2      	b.n	800817a <__gethex+0x2f6>
 80081b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081b6:	f1c3 0301 	rsb	r3, r3, #1
 80081ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0f0      	beq.n	80081a4 <__gethex+0x320>
 80081c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081c6:	f104 0314 	add.w	r3, r4, #20
 80081ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80081ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80081d2:	f04f 0c00 	mov.w	ip, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80081e0:	d01b      	beq.n	800821a <__gethex+0x396>
 80081e2:	3201      	adds	r2, #1
 80081e4:	6002      	str	r2, [r0, #0]
 80081e6:	2d02      	cmp	r5, #2
 80081e8:	f104 0314 	add.w	r3, r4, #20
 80081ec:	d13c      	bne.n	8008268 <__gethex+0x3e4>
 80081ee:	f8d8 2000 	ldr.w	r2, [r8]
 80081f2:	3a01      	subs	r2, #1
 80081f4:	42b2      	cmp	r2, r6
 80081f6:	d109      	bne.n	800820c <__gethex+0x388>
 80081f8:	1171      	asrs	r1, r6, #5
 80081fa:	2201      	movs	r2, #1
 80081fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008200:	f006 061f 	and.w	r6, r6, #31
 8008204:	fa02 f606 	lsl.w	r6, r2, r6
 8008208:	421e      	tst	r6, r3
 800820a:	d13a      	bne.n	8008282 <__gethex+0x3fe>
 800820c:	f045 0520 	orr.w	r5, r5, #32
 8008210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008212:	601c      	str	r4, [r3, #0]
 8008214:	9b02      	ldr	r3, [sp, #8]
 8008216:	601f      	str	r7, [r3, #0]
 8008218:	e6b0      	b.n	8007f7c <__gethex+0xf8>
 800821a:	4299      	cmp	r1, r3
 800821c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008220:	d8d9      	bhi.n	80081d6 <__gethex+0x352>
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	459b      	cmp	fp, r3
 8008226:	db17      	blt.n	8008258 <__gethex+0x3d4>
 8008228:	6861      	ldr	r1, [r4, #4]
 800822a:	9801      	ldr	r0, [sp, #4]
 800822c:	3101      	adds	r1, #1
 800822e:	f7fe f803 	bl	8006238 <_Balloc>
 8008232:	4681      	mov	r9, r0
 8008234:	b918      	cbnz	r0, 800823e <__gethex+0x3ba>
 8008236:	4b1a      	ldr	r3, [pc, #104]	@ (80082a0 <__gethex+0x41c>)
 8008238:	4602      	mov	r2, r0
 800823a:	2184      	movs	r1, #132	@ 0x84
 800823c:	e6c5      	b.n	8007fca <__gethex+0x146>
 800823e:	6922      	ldr	r2, [r4, #16]
 8008240:	3202      	adds	r2, #2
 8008242:	f104 010c 	add.w	r1, r4, #12
 8008246:	0092      	lsls	r2, r2, #2
 8008248:	300c      	adds	r0, #12
 800824a:	f7ff fd6b 	bl	8007d24 <memcpy>
 800824e:	4621      	mov	r1, r4
 8008250:	9801      	ldr	r0, [sp, #4]
 8008252:	f7fe f831 	bl	80062b8 <_Bfree>
 8008256:	464c      	mov	r4, r9
 8008258:	6923      	ldr	r3, [r4, #16]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008260:	6122      	str	r2, [r4, #16]
 8008262:	2201      	movs	r2, #1
 8008264:	615a      	str	r2, [r3, #20]
 8008266:	e7be      	b.n	80081e6 <__gethex+0x362>
 8008268:	6922      	ldr	r2, [r4, #16]
 800826a:	455a      	cmp	r2, fp
 800826c:	dd0b      	ble.n	8008286 <__gethex+0x402>
 800826e:	2101      	movs	r1, #1
 8008270:	4620      	mov	r0, r4
 8008272:	f7ff fd9f 	bl	8007db4 <rshift>
 8008276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800827a:	3701      	adds	r7, #1
 800827c:	42bb      	cmp	r3, r7
 800827e:	f6ff aee0 	blt.w	8008042 <__gethex+0x1be>
 8008282:	2501      	movs	r5, #1
 8008284:	e7c2      	b.n	800820c <__gethex+0x388>
 8008286:	f016 061f 	ands.w	r6, r6, #31
 800828a:	d0fa      	beq.n	8008282 <__gethex+0x3fe>
 800828c:	4453      	add	r3, sl
 800828e:	f1c6 0620 	rsb	r6, r6, #32
 8008292:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008296:	f7fe f8c1 	bl	800641c <__hi0bits>
 800829a:	42b0      	cmp	r0, r6
 800829c:	dbe7      	blt.n	800826e <__gethex+0x3ea>
 800829e:	e7f0      	b.n	8008282 <__gethex+0x3fe>
 80082a0:	08008b5d 	.word	0x08008b5d

080082a4 <L_shift>:
 80082a4:	f1c2 0208 	rsb	r2, r2, #8
 80082a8:	0092      	lsls	r2, r2, #2
 80082aa:	b570      	push	{r4, r5, r6, lr}
 80082ac:	f1c2 0620 	rsb	r6, r2, #32
 80082b0:	6843      	ldr	r3, [r0, #4]
 80082b2:	6804      	ldr	r4, [r0, #0]
 80082b4:	fa03 f506 	lsl.w	r5, r3, r6
 80082b8:	432c      	orrs	r4, r5
 80082ba:	40d3      	lsrs	r3, r2
 80082bc:	6004      	str	r4, [r0, #0]
 80082be:	f840 3f04 	str.w	r3, [r0, #4]!
 80082c2:	4288      	cmp	r0, r1
 80082c4:	d3f4      	bcc.n	80082b0 <L_shift+0xc>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}

080082c8 <__match>:
 80082c8:	b530      	push	{r4, r5, lr}
 80082ca:	6803      	ldr	r3, [r0, #0]
 80082cc:	3301      	adds	r3, #1
 80082ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082d2:	b914      	cbnz	r4, 80082da <__match+0x12>
 80082d4:	6003      	str	r3, [r0, #0]
 80082d6:	2001      	movs	r0, #1
 80082d8:	bd30      	pop	{r4, r5, pc}
 80082da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80082e2:	2d19      	cmp	r5, #25
 80082e4:	bf98      	it	ls
 80082e6:	3220      	addls	r2, #32
 80082e8:	42a2      	cmp	r2, r4
 80082ea:	d0f0      	beq.n	80082ce <__match+0x6>
 80082ec:	2000      	movs	r0, #0
 80082ee:	e7f3      	b.n	80082d8 <__match+0x10>

080082f0 <__hexnan>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	680b      	ldr	r3, [r1, #0]
 80082f6:	6801      	ldr	r1, [r0, #0]
 80082f8:	115e      	asrs	r6, r3, #5
 80082fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082fe:	f013 031f 	ands.w	r3, r3, #31
 8008302:	b087      	sub	sp, #28
 8008304:	bf18      	it	ne
 8008306:	3604      	addne	r6, #4
 8008308:	2500      	movs	r5, #0
 800830a:	1f37      	subs	r7, r6, #4
 800830c:	4682      	mov	sl, r0
 800830e:	4690      	mov	r8, r2
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	f846 5c04 	str.w	r5, [r6, #-4]
 8008316:	46b9      	mov	r9, r7
 8008318:	463c      	mov	r4, r7
 800831a:	9502      	str	r5, [sp, #8]
 800831c:	46ab      	mov	fp, r5
 800831e:	784a      	ldrb	r2, [r1, #1]
 8008320:	1c4b      	adds	r3, r1, #1
 8008322:	9303      	str	r3, [sp, #12]
 8008324:	b342      	cbz	r2, 8008378 <__hexnan+0x88>
 8008326:	4610      	mov	r0, r2
 8008328:	9105      	str	r1, [sp, #20]
 800832a:	9204      	str	r2, [sp, #16]
 800832c:	f7ff fd94 	bl	8007e58 <__hexdig_fun>
 8008330:	2800      	cmp	r0, #0
 8008332:	d151      	bne.n	80083d8 <__hexnan+0xe8>
 8008334:	9a04      	ldr	r2, [sp, #16]
 8008336:	9905      	ldr	r1, [sp, #20]
 8008338:	2a20      	cmp	r2, #32
 800833a:	d818      	bhi.n	800836e <__hexnan+0x7e>
 800833c:	9b02      	ldr	r3, [sp, #8]
 800833e:	459b      	cmp	fp, r3
 8008340:	dd13      	ble.n	800836a <__hexnan+0x7a>
 8008342:	454c      	cmp	r4, r9
 8008344:	d206      	bcs.n	8008354 <__hexnan+0x64>
 8008346:	2d07      	cmp	r5, #7
 8008348:	dc04      	bgt.n	8008354 <__hexnan+0x64>
 800834a:	462a      	mov	r2, r5
 800834c:	4649      	mov	r1, r9
 800834e:	4620      	mov	r0, r4
 8008350:	f7ff ffa8 	bl	80082a4 <L_shift>
 8008354:	4544      	cmp	r4, r8
 8008356:	d952      	bls.n	80083fe <__hexnan+0x10e>
 8008358:	2300      	movs	r3, #0
 800835a:	f1a4 0904 	sub.w	r9, r4, #4
 800835e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008362:	f8cd b008 	str.w	fp, [sp, #8]
 8008366:	464c      	mov	r4, r9
 8008368:	461d      	mov	r5, r3
 800836a:	9903      	ldr	r1, [sp, #12]
 800836c:	e7d7      	b.n	800831e <__hexnan+0x2e>
 800836e:	2a29      	cmp	r2, #41	@ 0x29
 8008370:	d157      	bne.n	8008422 <__hexnan+0x132>
 8008372:	3102      	adds	r1, #2
 8008374:	f8ca 1000 	str.w	r1, [sl]
 8008378:	f1bb 0f00 	cmp.w	fp, #0
 800837c:	d051      	beq.n	8008422 <__hexnan+0x132>
 800837e:	454c      	cmp	r4, r9
 8008380:	d206      	bcs.n	8008390 <__hexnan+0xa0>
 8008382:	2d07      	cmp	r5, #7
 8008384:	dc04      	bgt.n	8008390 <__hexnan+0xa0>
 8008386:	462a      	mov	r2, r5
 8008388:	4649      	mov	r1, r9
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff ff8a 	bl	80082a4 <L_shift>
 8008390:	4544      	cmp	r4, r8
 8008392:	d936      	bls.n	8008402 <__hexnan+0x112>
 8008394:	f1a8 0204 	sub.w	r2, r8, #4
 8008398:	4623      	mov	r3, r4
 800839a:	f853 1b04 	ldr.w	r1, [r3], #4
 800839e:	f842 1f04 	str.w	r1, [r2, #4]!
 80083a2:	429f      	cmp	r7, r3
 80083a4:	d2f9      	bcs.n	800839a <__hexnan+0xaa>
 80083a6:	1b3b      	subs	r3, r7, r4
 80083a8:	f023 0303 	bic.w	r3, r3, #3
 80083ac:	3304      	adds	r3, #4
 80083ae:	3401      	adds	r4, #1
 80083b0:	3e03      	subs	r6, #3
 80083b2:	42b4      	cmp	r4, r6
 80083b4:	bf88      	it	hi
 80083b6:	2304      	movhi	r3, #4
 80083b8:	4443      	add	r3, r8
 80083ba:	2200      	movs	r2, #0
 80083bc:	f843 2b04 	str.w	r2, [r3], #4
 80083c0:	429f      	cmp	r7, r3
 80083c2:	d2fb      	bcs.n	80083bc <__hexnan+0xcc>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	b91b      	cbnz	r3, 80083d0 <__hexnan+0xe0>
 80083c8:	4547      	cmp	r7, r8
 80083ca:	d128      	bne.n	800841e <__hexnan+0x12e>
 80083cc:	2301      	movs	r3, #1
 80083ce:	603b      	str	r3, [r7, #0]
 80083d0:	2005      	movs	r0, #5
 80083d2:	b007      	add	sp, #28
 80083d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d8:	3501      	adds	r5, #1
 80083da:	2d08      	cmp	r5, #8
 80083dc:	f10b 0b01 	add.w	fp, fp, #1
 80083e0:	dd06      	ble.n	80083f0 <__hexnan+0x100>
 80083e2:	4544      	cmp	r4, r8
 80083e4:	d9c1      	bls.n	800836a <__hexnan+0x7a>
 80083e6:	2300      	movs	r3, #0
 80083e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80083ec:	2501      	movs	r5, #1
 80083ee:	3c04      	subs	r4, #4
 80083f0:	6822      	ldr	r2, [r4, #0]
 80083f2:	f000 000f 	and.w	r0, r0, #15
 80083f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80083fa:	6020      	str	r0, [r4, #0]
 80083fc:	e7b5      	b.n	800836a <__hexnan+0x7a>
 80083fe:	2508      	movs	r5, #8
 8008400:	e7b3      	b.n	800836a <__hexnan+0x7a>
 8008402:	9b01      	ldr	r3, [sp, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0dd      	beq.n	80083c4 <__hexnan+0xd4>
 8008408:	f1c3 0320 	rsb	r3, r3, #32
 800840c:	f04f 32ff 	mov.w	r2, #4294967295
 8008410:	40da      	lsrs	r2, r3
 8008412:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008416:	4013      	ands	r3, r2
 8008418:	f846 3c04 	str.w	r3, [r6, #-4]
 800841c:	e7d2      	b.n	80083c4 <__hexnan+0xd4>
 800841e:	3f04      	subs	r7, #4
 8008420:	e7d0      	b.n	80083c4 <__hexnan+0xd4>
 8008422:	2004      	movs	r0, #4
 8008424:	e7d5      	b.n	80083d2 <__hexnan+0xe2>

08008426 <__ascii_mbtowc>:
 8008426:	b082      	sub	sp, #8
 8008428:	b901      	cbnz	r1, 800842c <__ascii_mbtowc+0x6>
 800842a:	a901      	add	r1, sp, #4
 800842c:	b142      	cbz	r2, 8008440 <__ascii_mbtowc+0x1a>
 800842e:	b14b      	cbz	r3, 8008444 <__ascii_mbtowc+0x1e>
 8008430:	7813      	ldrb	r3, [r2, #0]
 8008432:	600b      	str	r3, [r1, #0]
 8008434:	7812      	ldrb	r2, [r2, #0]
 8008436:	1e10      	subs	r0, r2, #0
 8008438:	bf18      	it	ne
 800843a:	2001      	movne	r0, #1
 800843c:	b002      	add	sp, #8
 800843e:	4770      	bx	lr
 8008440:	4610      	mov	r0, r2
 8008442:	e7fb      	b.n	800843c <__ascii_mbtowc+0x16>
 8008444:	f06f 0001 	mvn.w	r0, #1
 8008448:	e7f8      	b.n	800843c <__ascii_mbtowc+0x16>

0800844a <_realloc_r>:
 800844a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844e:	4680      	mov	r8, r0
 8008450:	4615      	mov	r5, r2
 8008452:	460c      	mov	r4, r1
 8008454:	b921      	cbnz	r1, 8008460 <_realloc_r+0x16>
 8008456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800845a:	4611      	mov	r1, r2
 800845c:	f7fd be60 	b.w	8006120 <_malloc_r>
 8008460:	b92a      	cbnz	r2, 800846e <_realloc_r+0x24>
 8008462:	f7fd fde9 	bl	8006038 <_free_r>
 8008466:	2400      	movs	r4, #0
 8008468:	4620      	mov	r0, r4
 800846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800846e:	f000 f840 	bl	80084f2 <_malloc_usable_size_r>
 8008472:	4285      	cmp	r5, r0
 8008474:	4606      	mov	r6, r0
 8008476:	d802      	bhi.n	800847e <_realloc_r+0x34>
 8008478:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800847c:	d8f4      	bhi.n	8008468 <_realloc_r+0x1e>
 800847e:	4629      	mov	r1, r5
 8008480:	4640      	mov	r0, r8
 8008482:	f7fd fe4d 	bl	8006120 <_malloc_r>
 8008486:	4607      	mov	r7, r0
 8008488:	2800      	cmp	r0, #0
 800848a:	d0ec      	beq.n	8008466 <_realloc_r+0x1c>
 800848c:	42b5      	cmp	r5, r6
 800848e:	462a      	mov	r2, r5
 8008490:	4621      	mov	r1, r4
 8008492:	bf28      	it	cs
 8008494:	4632      	movcs	r2, r6
 8008496:	f7ff fc45 	bl	8007d24 <memcpy>
 800849a:	4621      	mov	r1, r4
 800849c:	4640      	mov	r0, r8
 800849e:	f7fd fdcb 	bl	8006038 <_free_r>
 80084a2:	463c      	mov	r4, r7
 80084a4:	e7e0      	b.n	8008468 <_realloc_r+0x1e>

080084a6 <__ascii_wctomb>:
 80084a6:	4603      	mov	r3, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	b141      	cbz	r1, 80084be <__ascii_wctomb+0x18>
 80084ac:	2aff      	cmp	r2, #255	@ 0xff
 80084ae:	d904      	bls.n	80084ba <__ascii_wctomb+0x14>
 80084b0:	228a      	movs	r2, #138	@ 0x8a
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	f04f 30ff 	mov.w	r0, #4294967295
 80084b8:	4770      	bx	lr
 80084ba:	700a      	strb	r2, [r1, #0]
 80084bc:	2001      	movs	r0, #1
 80084be:	4770      	bx	lr

080084c0 <fiprintf>:
 80084c0:	b40e      	push	{r1, r2, r3}
 80084c2:	b503      	push	{r0, r1, lr}
 80084c4:	4601      	mov	r1, r0
 80084c6:	ab03      	add	r3, sp, #12
 80084c8:	4805      	ldr	r0, [pc, #20]	@ (80084e0 <fiprintf+0x20>)
 80084ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ce:	6800      	ldr	r0, [r0, #0]
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	f000 f83f 	bl	8008554 <_vfiprintf_r>
 80084d6:	b002      	add	sp, #8
 80084d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084dc:	b003      	add	sp, #12
 80084de:	4770      	bx	lr
 80084e0:	20000018 	.word	0x20000018

080084e4 <abort>:
 80084e4:	b508      	push	{r3, lr}
 80084e6:	2006      	movs	r0, #6
 80084e8:	f000 fa08 	bl	80088fc <raise>
 80084ec:	2001      	movs	r0, #1
 80084ee:	f7f9 f833 	bl	8001558 <_exit>

080084f2 <_malloc_usable_size_r>:
 80084f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f6:	1f18      	subs	r0, r3, #4
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bfbc      	itt	lt
 80084fc:	580b      	ldrlt	r3, [r1, r0]
 80084fe:	18c0      	addlt	r0, r0, r3
 8008500:	4770      	bx	lr

08008502 <__sfputc_r>:
 8008502:	6893      	ldr	r3, [r2, #8]
 8008504:	3b01      	subs	r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	b410      	push	{r4}
 800850a:	6093      	str	r3, [r2, #8]
 800850c:	da08      	bge.n	8008520 <__sfputc_r+0x1e>
 800850e:	6994      	ldr	r4, [r2, #24]
 8008510:	42a3      	cmp	r3, r4
 8008512:	db01      	blt.n	8008518 <__sfputc_r+0x16>
 8008514:	290a      	cmp	r1, #10
 8008516:	d103      	bne.n	8008520 <__sfputc_r+0x1e>
 8008518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800851c:	f000 b932 	b.w	8008784 <__swbuf_r>
 8008520:	6813      	ldr	r3, [r2, #0]
 8008522:	1c58      	adds	r0, r3, #1
 8008524:	6010      	str	r0, [r2, #0]
 8008526:	7019      	strb	r1, [r3, #0]
 8008528:	4608      	mov	r0, r1
 800852a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800852e:	4770      	bx	lr

08008530 <__sfputs_r>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	4606      	mov	r6, r0
 8008534:	460f      	mov	r7, r1
 8008536:	4614      	mov	r4, r2
 8008538:	18d5      	adds	r5, r2, r3
 800853a:	42ac      	cmp	r4, r5
 800853c:	d101      	bne.n	8008542 <__sfputs_r+0x12>
 800853e:	2000      	movs	r0, #0
 8008540:	e007      	b.n	8008552 <__sfputs_r+0x22>
 8008542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008546:	463a      	mov	r2, r7
 8008548:	4630      	mov	r0, r6
 800854a:	f7ff ffda 	bl	8008502 <__sfputc_r>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d1f3      	bne.n	800853a <__sfputs_r+0xa>
 8008552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008554 <_vfiprintf_r>:
 8008554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	460d      	mov	r5, r1
 800855a:	b09d      	sub	sp, #116	@ 0x74
 800855c:	4614      	mov	r4, r2
 800855e:	4698      	mov	r8, r3
 8008560:	4606      	mov	r6, r0
 8008562:	b118      	cbz	r0, 800856c <_vfiprintf_r+0x18>
 8008564:	6a03      	ldr	r3, [r0, #32]
 8008566:	b90b      	cbnz	r3, 800856c <_vfiprintf_r+0x18>
 8008568:	f7fc fdfa 	bl	8005160 <__sinit>
 800856c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800856e:	07d9      	lsls	r1, r3, #31
 8008570:	d405      	bmi.n	800857e <_vfiprintf_r+0x2a>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	059a      	lsls	r2, r3, #22
 8008576:	d402      	bmi.n	800857e <_vfiprintf_r+0x2a>
 8008578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857a:	f7fc ff08 	bl	800538e <__retarget_lock_acquire_recursive>
 800857e:	89ab      	ldrh	r3, [r5, #12]
 8008580:	071b      	lsls	r3, r3, #28
 8008582:	d501      	bpl.n	8008588 <_vfiprintf_r+0x34>
 8008584:	692b      	ldr	r3, [r5, #16]
 8008586:	b99b      	cbnz	r3, 80085b0 <_vfiprintf_r+0x5c>
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f000 f938 	bl	8008800 <__swsetup_r>
 8008590:	b170      	cbz	r0, 80085b0 <_vfiprintf_r+0x5c>
 8008592:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008594:	07dc      	lsls	r4, r3, #31
 8008596:	d504      	bpl.n	80085a2 <_vfiprintf_r+0x4e>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	b01d      	add	sp, #116	@ 0x74
 800859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	0598      	lsls	r0, r3, #22
 80085a6:	d4f7      	bmi.n	8008598 <_vfiprintf_r+0x44>
 80085a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085aa:	f7fc fef1 	bl	8005390 <__retarget_lock_release_recursive>
 80085ae:	e7f3      	b.n	8008598 <_vfiprintf_r+0x44>
 80085b0:	2300      	movs	r3, #0
 80085b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b4:	2320      	movs	r3, #32
 80085b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80085be:	2330      	movs	r3, #48	@ 0x30
 80085c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008770 <_vfiprintf_r+0x21c>
 80085c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085c8:	f04f 0901 	mov.w	r9, #1
 80085cc:	4623      	mov	r3, r4
 80085ce:	469a      	mov	sl, r3
 80085d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d4:	b10a      	cbz	r2, 80085da <_vfiprintf_r+0x86>
 80085d6:	2a25      	cmp	r2, #37	@ 0x25
 80085d8:	d1f9      	bne.n	80085ce <_vfiprintf_r+0x7a>
 80085da:	ebba 0b04 	subs.w	fp, sl, r4
 80085de:	d00b      	beq.n	80085f8 <_vfiprintf_r+0xa4>
 80085e0:	465b      	mov	r3, fp
 80085e2:	4622      	mov	r2, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ffa2 	bl	8008530 <__sfputs_r>
 80085ec:	3001      	adds	r0, #1
 80085ee:	f000 80a7 	beq.w	8008740 <_vfiprintf_r+0x1ec>
 80085f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085f4:	445a      	add	r2, fp
 80085f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80085f8:	f89a 3000 	ldrb.w	r3, [sl]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 809f 	beq.w	8008740 <_vfiprintf_r+0x1ec>
 8008602:	2300      	movs	r3, #0
 8008604:	f04f 32ff 	mov.w	r2, #4294967295
 8008608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800860c:	f10a 0a01 	add.w	sl, sl, #1
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	9307      	str	r3, [sp, #28]
 8008614:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008618:	931a      	str	r3, [sp, #104]	@ 0x68
 800861a:	4654      	mov	r4, sl
 800861c:	2205      	movs	r2, #5
 800861e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008622:	4853      	ldr	r0, [pc, #332]	@ (8008770 <_vfiprintf_r+0x21c>)
 8008624:	f7f7 fdfc 	bl	8000220 <memchr>
 8008628:	9a04      	ldr	r2, [sp, #16]
 800862a:	b9d8      	cbnz	r0, 8008664 <_vfiprintf_r+0x110>
 800862c:	06d1      	lsls	r1, r2, #27
 800862e:	bf44      	itt	mi
 8008630:	2320      	movmi	r3, #32
 8008632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008636:	0713      	lsls	r3, r2, #28
 8008638:	bf44      	itt	mi
 800863a:	232b      	movmi	r3, #43	@ 0x2b
 800863c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008640:	f89a 3000 	ldrb.w	r3, [sl]
 8008644:	2b2a      	cmp	r3, #42	@ 0x2a
 8008646:	d015      	beq.n	8008674 <_vfiprintf_r+0x120>
 8008648:	9a07      	ldr	r2, [sp, #28]
 800864a:	4654      	mov	r4, sl
 800864c:	2000      	movs	r0, #0
 800864e:	f04f 0c0a 	mov.w	ip, #10
 8008652:	4621      	mov	r1, r4
 8008654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008658:	3b30      	subs	r3, #48	@ 0x30
 800865a:	2b09      	cmp	r3, #9
 800865c:	d94b      	bls.n	80086f6 <_vfiprintf_r+0x1a2>
 800865e:	b1b0      	cbz	r0, 800868e <_vfiprintf_r+0x13a>
 8008660:	9207      	str	r2, [sp, #28]
 8008662:	e014      	b.n	800868e <_vfiprintf_r+0x13a>
 8008664:	eba0 0308 	sub.w	r3, r0, r8
 8008668:	fa09 f303 	lsl.w	r3, r9, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	9304      	str	r3, [sp, #16]
 8008670:	46a2      	mov	sl, r4
 8008672:	e7d2      	b.n	800861a <_vfiprintf_r+0xc6>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	1d19      	adds	r1, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	9103      	str	r1, [sp, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	bfbb      	ittet	lt
 8008680:	425b      	neglt	r3, r3
 8008682:	f042 0202 	orrlt.w	r2, r2, #2
 8008686:	9307      	strge	r3, [sp, #28]
 8008688:	9307      	strlt	r3, [sp, #28]
 800868a:	bfb8      	it	lt
 800868c:	9204      	strlt	r2, [sp, #16]
 800868e:	7823      	ldrb	r3, [r4, #0]
 8008690:	2b2e      	cmp	r3, #46	@ 0x2e
 8008692:	d10a      	bne.n	80086aa <_vfiprintf_r+0x156>
 8008694:	7863      	ldrb	r3, [r4, #1]
 8008696:	2b2a      	cmp	r3, #42	@ 0x2a
 8008698:	d132      	bne.n	8008700 <_vfiprintf_r+0x1ac>
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	9203      	str	r2, [sp, #12]
 80086a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086a6:	3402      	adds	r4, #2
 80086a8:	9305      	str	r3, [sp, #20]
 80086aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008780 <_vfiprintf_r+0x22c>
 80086ae:	7821      	ldrb	r1, [r4, #0]
 80086b0:	2203      	movs	r2, #3
 80086b2:	4650      	mov	r0, sl
 80086b4:	f7f7 fdb4 	bl	8000220 <memchr>
 80086b8:	b138      	cbz	r0, 80086ca <_vfiprintf_r+0x176>
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	eba0 000a 	sub.w	r0, r0, sl
 80086c0:	2240      	movs	r2, #64	@ 0x40
 80086c2:	4082      	lsls	r2, r0
 80086c4:	4313      	orrs	r3, r2
 80086c6:	3401      	adds	r4, #1
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ce:	4829      	ldr	r0, [pc, #164]	@ (8008774 <_vfiprintf_r+0x220>)
 80086d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086d4:	2206      	movs	r2, #6
 80086d6:	f7f7 fda3 	bl	8000220 <memchr>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d03f      	beq.n	800875e <_vfiprintf_r+0x20a>
 80086de:	4b26      	ldr	r3, [pc, #152]	@ (8008778 <_vfiprintf_r+0x224>)
 80086e0:	bb1b      	cbnz	r3, 800872a <_vfiprintf_r+0x1d6>
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	3307      	adds	r3, #7
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	3308      	adds	r3, #8
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f0:	443b      	add	r3, r7
 80086f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f4:	e76a      	b.n	80085cc <_vfiprintf_r+0x78>
 80086f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fa:	460c      	mov	r4, r1
 80086fc:	2001      	movs	r0, #1
 80086fe:	e7a8      	b.n	8008652 <_vfiprintf_r+0xfe>
 8008700:	2300      	movs	r3, #0
 8008702:	3401      	adds	r4, #1
 8008704:	9305      	str	r3, [sp, #20]
 8008706:	4619      	mov	r1, r3
 8008708:	f04f 0c0a 	mov.w	ip, #10
 800870c:	4620      	mov	r0, r4
 800870e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008712:	3a30      	subs	r2, #48	@ 0x30
 8008714:	2a09      	cmp	r2, #9
 8008716:	d903      	bls.n	8008720 <_vfiprintf_r+0x1cc>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0c6      	beq.n	80086aa <_vfiprintf_r+0x156>
 800871c:	9105      	str	r1, [sp, #20]
 800871e:	e7c4      	b.n	80086aa <_vfiprintf_r+0x156>
 8008720:	fb0c 2101 	mla	r1, ip, r1, r2
 8008724:	4604      	mov	r4, r0
 8008726:	2301      	movs	r3, #1
 8008728:	e7f0      	b.n	800870c <_vfiprintf_r+0x1b8>
 800872a:	ab03      	add	r3, sp, #12
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	462a      	mov	r2, r5
 8008730:	4b12      	ldr	r3, [pc, #72]	@ (800877c <_vfiprintf_r+0x228>)
 8008732:	a904      	add	r1, sp, #16
 8008734:	4630      	mov	r0, r6
 8008736:	f7fb febb 	bl	80044b0 <_printf_float>
 800873a:	4607      	mov	r7, r0
 800873c:	1c78      	adds	r0, r7, #1
 800873e:	d1d6      	bne.n	80086ee <_vfiprintf_r+0x19a>
 8008740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008742:	07d9      	lsls	r1, r3, #31
 8008744:	d405      	bmi.n	8008752 <_vfiprintf_r+0x1fe>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	059a      	lsls	r2, r3, #22
 800874a:	d402      	bmi.n	8008752 <_vfiprintf_r+0x1fe>
 800874c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800874e:	f7fc fe1f 	bl	8005390 <__retarget_lock_release_recursive>
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	065b      	lsls	r3, r3, #25
 8008756:	f53f af1f 	bmi.w	8008598 <_vfiprintf_r+0x44>
 800875a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800875c:	e71e      	b.n	800859c <_vfiprintf_r+0x48>
 800875e:	ab03      	add	r3, sp, #12
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	462a      	mov	r2, r5
 8008764:	4b05      	ldr	r3, [pc, #20]	@ (800877c <_vfiprintf_r+0x228>)
 8008766:	a904      	add	r1, sp, #16
 8008768:	4630      	mov	r0, r6
 800876a:	f7fc f939 	bl	80049e0 <_printf_i>
 800876e:	e7e4      	b.n	800873a <_vfiprintf_r+0x1e6>
 8008770:	08008e21 	.word	0x08008e21
 8008774:	08008e2b 	.word	0x08008e2b
 8008778:	080044b1 	.word	0x080044b1
 800877c:	08008531 	.word	0x08008531
 8008780:	08008e27 	.word	0x08008e27

08008784 <__swbuf_r>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	460e      	mov	r6, r1
 8008788:	4614      	mov	r4, r2
 800878a:	4605      	mov	r5, r0
 800878c:	b118      	cbz	r0, 8008796 <__swbuf_r+0x12>
 800878e:	6a03      	ldr	r3, [r0, #32]
 8008790:	b90b      	cbnz	r3, 8008796 <__swbuf_r+0x12>
 8008792:	f7fc fce5 	bl	8005160 <__sinit>
 8008796:	69a3      	ldr	r3, [r4, #24]
 8008798:	60a3      	str	r3, [r4, #8]
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	071a      	lsls	r2, r3, #28
 800879e:	d501      	bpl.n	80087a4 <__swbuf_r+0x20>
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	b943      	cbnz	r3, 80087b6 <__swbuf_r+0x32>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f82a 	bl	8008800 <__swsetup_r>
 80087ac:	b118      	cbz	r0, 80087b6 <__swbuf_r+0x32>
 80087ae:	f04f 37ff 	mov.w	r7, #4294967295
 80087b2:	4638      	mov	r0, r7
 80087b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	6922      	ldr	r2, [r4, #16]
 80087ba:	1a98      	subs	r0, r3, r2
 80087bc:	6963      	ldr	r3, [r4, #20]
 80087be:	b2f6      	uxtb	r6, r6
 80087c0:	4283      	cmp	r3, r0
 80087c2:	4637      	mov	r7, r6
 80087c4:	dc05      	bgt.n	80087d2 <__swbuf_r+0x4e>
 80087c6:	4621      	mov	r1, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff fa47 	bl	8007c5c <_fflush_r>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d1ed      	bne.n	80087ae <__swbuf_r+0x2a>
 80087d2:	68a3      	ldr	r3, [r4, #8]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	60a3      	str	r3, [r4, #8]
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	6022      	str	r2, [r4, #0]
 80087de:	701e      	strb	r6, [r3, #0]
 80087e0:	6962      	ldr	r2, [r4, #20]
 80087e2:	1c43      	adds	r3, r0, #1
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d004      	beq.n	80087f2 <__swbuf_r+0x6e>
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	07db      	lsls	r3, r3, #31
 80087ec:	d5e1      	bpl.n	80087b2 <__swbuf_r+0x2e>
 80087ee:	2e0a      	cmp	r6, #10
 80087f0:	d1df      	bne.n	80087b2 <__swbuf_r+0x2e>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4628      	mov	r0, r5
 80087f6:	f7ff fa31 	bl	8007c5c <_fflush_r>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d0d9      	beq.n	80087b2 <__swbuf_r+0x2e>
 80087fe:	e7d6      	b.n	80087ae <__swbuf_r+0x2a>

08008800 <__swsetup_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4b29      	ldr	r3, [pc, #164]	@ (80088a8 <__swsetup_r+0xa8>)
 8008804:	4605      	mov	r5, r0
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	460c      	mov	r4, r1
 800880a:	b118      	cbz	r0, 8008814 <__swsetup_r+0x14>
 800880c:	6a03      	ldr	r3, [r0, #32]
 800880e:	b90b      	cbnz	r3, 8008814 <__swsetup_r+0x14>
 8008810:	f7fc fca6 	bl	8005160 <__sinit>
 8008814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008818:	0719      	lsls	r1, r3, #28
 800881a:	d422      	bmi.n	8008862 <__swsetup_r+0x62>
 800881c:	06da      	lsls	r2, r3, #27
 800881e:	d407      	bmi.n	8008830 <__swsetup_r+0x30>
 8008820:	2209      	movs	r2, #9
 8008822:	602a      	str	r2, [r5, #0]
 8008824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008828:	81a3      	strh	r3, [r4, #12]
 800882a:	f04f 30ff 	mov.w	r0, #4294967295
 800882e:	e033      	b.n	8008898 <__swsetup_r+0x98>
 8008830:	0758      	lsls	r0, r3, #29
 8008832:	d512      	bpl.n	800885a <__swsetup_r+0x5a>
 8008834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008836:	b141      	cbz	r1, 800884a <__swsetup_r+0x4a>
 8008838:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800883c:	4299      	cmp	r1, r3
 800883e:	d002      	beq.n	8008846 <__swsetup_r+0x46>
 8008840:	4628      	mov	r0, r5
 8008842:	f7fd fbf9 	bl	8006038 <_free_r>
 8008846:	2300      	movs	r3, #0
 8008848:	6363      	str	r3, [r4, #52]	@ 0x34
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	2300      	movs	r3, #0
 8008854:	6063      	str	r3, [r4, #4]
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f043 0308 	orr.w	r3, r3, #8
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	b94b      	cbnz	r3, 800887a <__swsetup_r+0x7a>
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800886c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008870:	d003      	beq.n	800887a <__swsetup_r+0x7a>
 8008872:	4621      	mov	r1, r4
 8008874:	4628      	mov	r0, r5
 8008876:	f000 f883 	bl	8008980 <__smakebuf_r>
 800887a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887e:	f013 0201 	ands.w	r2, r3, #1
 8008882:	d00a      	beq.n	800889a <__swsetup_r+0x9a>
 8008884:	2200      	movs	r2, #0
 8008886:	60a2      	str	r2, [r4, #8]
 8008888:	6962      	ldr	r2, [r4, #20]
 800888a:	4252      	negs	r2, r2
 800888c:	61a2      	str	r2, [r4, #24]
 800888e:	6922      	ldr	r2, [r4, #16]
 8008890:	b942      	cbnz	r2, 80088a4 <__swsetup_r+0xa4>
 8008892:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008896:	d1c5      	bne.n	8008824 <__swsetup_r+0x24>
 8008898:	bd38      	pop	{r3, r4, r5, pc}
 800889a:	0799      	lsls	r1, r3, #30
 800889c:	bf58      	it	pl
 800889e:	6962      	ldrpl	r2, [r4, #20]
 80088a0:	60a2      	str	r2, [r4, #8]
 80088a2:	e7f4      	b.n	800888e <__swsetup_r+0x8e>
 80088a4:	2000      	movs	r0, #0
 80088a6:	e7f7      	b.n	8008898 <__swsetup_r+0x98>
 80088a8:	20000018 	.word	0x20000018

080088ac <_raise_r>:
 80088ac:	291f      	cmp	r1, #31
 80088ae:	b538      	push	{r3, r4, r5, lr}
 80088b0:	4605      	mov	r5, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	d904      	bls.n	80088c0 <_raise_r+0x14>
 80088b6:	2316      	movs	r3, #22
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	f04f 30ff 	mov.w	r0, #4294967295
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088c2:	b112      	cbz	r2, 80088ca <_raise_r+0x1e>
 80088c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088c8:	b94b      	cbnz	r3, 80088de <_raise_r+0x32>
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f830 	bl	8008930 <_getpid_r>
 80088d0:	4622      	mov	r2, r4
 80088d2:	4601      	mov	r1, r0
 80088d4:	4628      	mov	r0, r5
 80088d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088da:	f000 b817 	b.w	800890c <_kill_r>
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d00a      	beq.n	80088f8 <_raise_r+0x4c>
 80088e2:	1c59      	adds	r1, r3, #1
 80088e4:	d103      	bne.n	80088ee <_raise_r+0x42>
 80088e6:	2316      	movs	r3, #22
 80088e8:	6003      	str	r3, [r0, #0]
 80088ea:	2001      	movs	r0, #1
 80088ec:	e7e7      	b.n	80088be <_raise_r+0x12>
 80088ee:	2100      	movs	r1, #0
 80088f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088f4:	4620      	mov	r0, r4
 80088f6:	4798      	blx	r3
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7e0      	b.n	80088be <_raise_r+0x12>

080088fc <raise>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	@ (8008908 <raise+0xc>)
 80088fe:	4601      	mov	r1, r0
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f7ff bfd3 	b.w	80088ac <_raise_r>
 8008906:	bf00      	nop
 8008908:	20000018 	.word	0x20000018

0800890c <_kill_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	@ (800892c <_kill_r+0x20>)
 8008910:	2300      	movs	r3, #0
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	f7f8 fe0d 	bl	8001538 <_kill>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	d102      	bne.n	8008928 <_kill_r+0x1c>
 8008922:	682b      	ldr	r3, [r5, #0]
 8008924:	b103      	cbz	r3, 8008928 <_kill_r+0x1c>
 8008926:	6023      	str	r3, [r4, #0]
 8008928:	bd38      	pop	{r3, r4, r5, pc}
 800892a:	bf00      	nop
 800892c:	20000458 	.word	0x20000458

08008930 <_getpid_r>:
 8008930:	f7f8 bdfa 	b.w	8001528 <_getpid>

08008934 <__swhatbuf_r>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	460c      	mov	r4, r1
 8008938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893c:	2900      	cmp	r1, #0
 800893e:	b096      	sub	sp, #88	@ 0x58
 8008940:	4615      	mov	r5, r2
 8008942:	461e      	mov	r6, r3
 8008944:	da0d      	bge.n	8008962 <__swhatbuf_r+0x2e>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800894c:	f04f 0100 	mov.w	r1, #0
 8008950:	bf14      	ite	ne
 8008952:	2340      	movne	r3, #64	@ 0x40
 8008954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008958:	2000      	movs	r0, #0
 800895a:	6031      	str	r1, [r6, #0]
 800895c:	602b      	str	r3, [r5, #0]
 800895e:	b016      	add	sp, #88	@ 0x58
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	466a      	mov	r2, sp
 8008964:	f000 f848 	bl	80089f8 <_fstat_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	dbec      	blt.n	8008946 <__swhatbuf_r+0x12>
 800896c:	9901      	ldr	r1, [sp, #4]
 800896e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008976:	4259      	negs	r1, r3
 8008978:	4159      	adcs	r1, r3
 800897a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800897e:	e7eb      	b.n	8008958 <__swhatbuf_r+0x24>

08008980 <__smakebuf_r>:
 8008980:	898b      	ldrh	r3, [r1, #12]
 8008982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008984:	079d      	lsls	r5, r3, #30
 8008986:	4606      	mov	r6, r0
 8008988:	460c      	mov	r4, r1
 800898a:	d507      	bpl.n	800899c <__smakebuf_r+0x1c>
 800898c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	2301      	movs	r3, #1
 8008996:	6163      	str	r3, [r4, #20]
 8008998:	b003      	add	sp, #12
 800899a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800899c:	ab01      	add	r3, sp, #4
 800899e:	466a      	mov	r2, sp
 80089a0:	f7ff ffc8 	bl	8008934 <__swhatbuf_r>
 80089a4:	9f00      	ldr	r7, [sp, #0]
 80089a6:	4605      	mov	r5, r0
 80089a8:	4639      	mov	r1, r7
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7fd fbb8 	bl	8006120 <_malloc_r>
 80089b0:	b948      	cbnz	r0, 80089c6 <__smakebuf_r+0x46>
 80089b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b6:	059a      	lsls	r2, r3, #22
 80089b8:	d4ee      	bmi.n	8008998 <__smakebuf_r+0x18>
 80089ba:	f023 0303 	bic.w	r3, r3, #3
 80089be:	f043 0302 	orr.w	r3, r3, #2
 80089c2:	81a3      	strh	r3, [r4, #12]
 80089c4:	e7e2      	b.n	800898c <__smakebuf_r+0xc>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	6020      	str	r0, [r4, #0]
 80089ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	9b01      	ldr	r3, [sp, #4]
 80089d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089d6:	b15b      	cbz	r3, 80089f0 <__smakebuf_r+0x70>
 80089d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089dc:	4630      	mov	r0, r6
 80089de:	f000 f81d 	bl	8008a1c <_isatty_r>
 80089e2:	b128      	cbz	r0, 80089f0 <__smakebuf_r+0x70>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	f023 0303 	bic.w	r3, r3, #3
 80089ea:	f043 0301 	orr.w	r3, r3, #1
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	431d      	orrs	r5, r3
 80089f4:	81a5      	strh	r5, [r4, #12]
 80089f6:	e7cf      	b.n	8008998 <__smakebuf_r+0x18>

080089f8 <_fstat_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d07      	ldr	r5, [pc, #28]	@ (8008a18 <_fstat_r+0x20>)
 80089fc:	2300      	movs	r3, #0
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	f7f8 fdf7 	bl	80015f8 <_fstat>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d102      	bne.n	8008a14 <_fstat_r+0x1c>
 8008a0e:	682b      	ldr	r3, [r5, #0]
 8008a10:	b103      	cbz	r3, 8008a14 <_fstat_r+0x1c>
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	bd38      	pop	{r3, r4, r5, pc}
 8008a16:	bf00      	nop
 8008a18:	20000458 	.word	0x20000458

08008a1c <_isatty_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d06      	ldr	r5, [pc, #24]	@ (8008a38 <_isatty_r+0x1c>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7f8 fdf6 	bl	8001618 <_isatty>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_isatty_r+0x1a>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_isatty_r+0x1a>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	20000458 	.word	0x20000458

08008a3c <_init>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr

08008a48 <_fini>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr
