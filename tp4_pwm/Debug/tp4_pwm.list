
tp4_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a74  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004c4c  08004c4c  00005c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c98  08004c98  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c98  08004c98  00005c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca0  08004ca0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00005ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ca8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004cb4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004cb4  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cad  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b30  00000000  00000000  00019ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d29  00000000  00000000  0001d910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0fd  00000000  00000000  0001e639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001526a  00000000  00000000  0003c736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c24bd  00000000  00000000  000519a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004698  00000000  00000000  00113ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  00118538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004c34 	.word	0x08004c34

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004c34 	.word	0x08004c34

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b17      	ldr	r3, [pc, #92]	@ (800057c <MX_GPIO_Init+0x74>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a16      	ldr	r2, [pc, #88]	@ (800057c <MX_GPIO_Init+0x74>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <MX_GPIO_Init+0x74>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_GPIO_Init+0x74>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a10      	ldr	r2, [pc, #64]	@ (800057c <MX_GPIO_Init+0x74>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_GPIO_Init+0x74>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2140      	movs	r1, #64	@ 0x40
 8000552:	480b      	ldr	r0, [pc, #44]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000554:	f000 ffc0 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dir_Pin;
 8000558:	2340      	movs	r3, #64	@ 0x40
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dir_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000570:	f000 fe30 	bl	80011d4 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	48000400 	.word	0x48000400

08000584 <calcul_checksum1>:

#include "herculex.h"


uint8_t calcul_checksum1(uint8_t size, uint8_t *trame)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
	uint8_t checksum1;
	checksum1=size ^ trame[3] ^ trame[4];
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	3303      	adds	r3, #3
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4053      	eors	r3, r2
 800059a:	b2da      	uxtb	r2, r3
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	3304      	adds	r3, #4
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4053      	eors	r3, r2
 80005a4:	73fb      	strb	r3, [r7, #15]
	for(int i=7;i<size;i++)
 80005a6:	2307      	movs	r3, #7
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	e009      	b.n	80005c0 <calcul_checksum1+0x3c>
	{
		checksum1=checksum1 ^ trame[i];
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	4413      	add	r3, r2
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	4053      	eors	r3, r2
 80005b8:	73fb      	strb	r3, [r7, #15]
	for(int i=7;i<size;i++)
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	3301      	adds	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbf1      	blt.n	80005ac <calcul_checksum1+0x28>
	}
	checksum1=checksum1 & 0xfe;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	f023 0301 	bic.w	r3, r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
	return checksum1;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <calcul_checksum2>:
uint8_t calcul_checksum2(uint8_t checksum1)
{
 80005de:	b480      	push	{r7}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	4603      	mov	r3, r0
 80005e6:	71fb      	strb	r3, [r7, #7]
	uint8_t checksum2;
	checksum2=(~checksum1) & 0xfe;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	43db      	mvns	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f023 0301 	bic.w	r3, r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
	return checksum2;
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <send_trame>:
void send_trame(uint8_t id,uint8_t size, uint8_t *trame)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	603a      	str	r2, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
	trame[3]=id;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	3303      	adds	r3, #3
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	701a      	strb	r2, [r3, #0]
	trame[5]=calcul_checksum1(size,trame);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	1d5c      	adds	r4, r3, #5
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	6839      	ldr	r1, [r7, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffad 	bl	8000584 <calcul_checksum1>
 800062a:	4603      	mov	r3, r0
 800062c:	7023      	strb	r3, [r4, #0]
	trame[6]=calcul_checksum2(trame[5]);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	3305      	adds	r3, #5
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	1d9c      	adds	r4, r3, #6
 8000638:	4610      	mov	r0, r2
 800063a:	f7ff ffd0 	bl	80005de <calcul_checksum2>
 800063e:	4603      	mov	r3, r0
 8000640:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2,trame,size, HAL_MAX_DELAY);
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	b29a      	uxth	r2, r3
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <send_trame+0x58>)
 800064e:	f003 f8a5 	bl	800379c <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	bf00      	nop
 800065c:	20000074 	.word	0x20000074

08000660 <send_torque_on>:
	uint8_t led_control[10]={0xff,0xff,0x0a,id,0x03,0xc0,0x3e,0x35,0x01,color};
	send_trame(id,0x0a,led_control);

}
void send_torque_on(uint8_t id)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	uint8_t torque_control[11]={0xff,0xff,0x0a,id,0x03,0xa0,0x5e,0x34,0x01,0x60};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	f8c3 2007 	str.w	r2, [r3, #7]
 8000678:	23ff      	movs	r3, #255	@ 0xff
 800067a:	733b      	strb	r3, [r7, #12]
 800067c:	23ff      	movs	r3, #255	@ 0xff
 800067e:	737b      	strb	r3, [r7, #13]
 8000680:	230a      	movs	r3, #10
 8000682:	73bb      	strb	r3, [r7, #14]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	2303      	movs	r3, #3
 800068a:	743b      	strb	r3, [r7, #16]
 800068c:	23a0      	movs	r3, #160	@ 0xa0
 800068e:	747b      	strb	r3, [r7, #17]
 8000690:	235e      	movs	r3, #94	@ 0x5e
 8000692:	74bb      	strb	r3, [r7, #18]
 8000694:	2334      	movs	r3, #52	@ 0x34
 8000696:	74fb      	strb	r3, [r7, #19]
 8000698:	2301      	movs	r3, #1
 800069a:	753b      	strb	r3, [r7, #20]
 800069c:	2360      	movs	r3, #96	@ 0x60
 800069e:	757b      	strb	r3, [r7, #21]
	send_trame(id,0x0b,torque_control);
 80006a0:	f107 020c 	add.w	r2, r7, #12
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	210b      	movs	r1, #11
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffab 	bl	8000604 <send_trame>
}
 80006ae:	bf00      	nop
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <send_pos_color>:
void send_pos_color(uint8_t id,uint16_t pos)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	460a      	mov	r2, r1
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	4613      	mov	r3, r2
 80006c4:	80bb      	strh	r3, [r7, #4]
	uint8_t position[2];
	position[0]=pos>>8;
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	753b      	strb	r3, [r7, #20]
	position[1]=(uint8_t)pos;
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	757b      	strb	r3, [r7, #21]
	uint8_t l_jog[12]={0xff,0xff,0x0c,0xfd,0x05,0x32,0xcc,position[1],position[0],0x04,0xfd,0x3c};
 80006d6:	23ff      	movs	r3, #255	@ 0xff
 80006d8:	723b      	strb	r3, [r7, #8]
 80006da:	23ff      	movs	r3, #255	@ 0xff
 80006dc:	727b      	strb	r3, [r7, #9]
 80006de:	230c      	movs	r3, #12
 80006e0:	72bb      	strb	r3, [r7, #10]
 80006e2:	23fd      	movs	r3, #253	@ 0xfd
 80006e4:	72fb      	strb	r3, [r7, #11]
 80006e6:	2305      	movs	r3, #5
 80006e8:	733b      	strb	r3, [r7, #12]
 80006ea:	2332      	movs	r3, #50	@ 0x32
 80006ec:	737b      	strb	r3, [r7, #13]
 80006ee:	23cc      	movs	r3, #204	@ 0xcc
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	7d7b      	ldrb	r3, [r7, #21]
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	7d3b      	ldrb	r3, [r7, #20]
 80006f8:	743b      	strb	r3, [r7, #16]
 80006fa:	2304      	movs	r3, #4
 80006fc:	747b      	strb	r3, [r7, #17]
 80006fe:	23fd      	movs	r3, #253	@ 0xfd
 8000700:	74bb      	strb	r3, [r7, #18]
 8000702:	233c      	movs	r3, #60	@ 0x3c
 8000704:	74fb      	strb	r3, [r7, #19]
	send_trame(id,0x0c,l_jog);
 8000706:	f107 0208 	add.w	r2, r7, #8
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	210c      	movs	r1, #12
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff78 	bl	8000604 <send_trame>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fb16 	bl	8000d52 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t l_jog[12]={0xff,0xff,0x0c,0xfd,0x05,0x32,0xcc,0x00,0x02,0x04,0xfd,0x3c};
 8000726:	4a10      	ldr	r2, [pc, #64]	@ (8000768 <main+0x4c>)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	ca07      	ldmia	r2, {r0, r1, r2}
 800072c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f81e 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff fee8 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000738:	f000 fa36 	bl	8000ba8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800073c:	f000 f92a 	bl	8000994 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	480a      	ldr	r0, [pc, #40]	@ (800076c <main+0x50>)
 8000744:	f001 ff6a 	bl	800261c <HAL_TIM_PWM_Start>
  PWM_write(&htim1, TIM_CHANNEL_1, 0.75);
 8000748:	eeb6 0a08 	vmov.f32	s0, #104	@ 0x3f400000  0.750
 800074c:	2100      	movs	r1, #0
 800074e:	4807      	ldr	r0, [pc, #28]	@ (800076c <main+0x50>)
 8000750:	f000 f85f 	bl	8000812 <PWM_write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  send_torque_on(0xfd);
 8000754:	20fd      	movs	r0, #253	@ 0xfd
 8000756:	f7ff ff83 	bl	8000660 <send_torque_on>
  send_pos_color(0xfd,0x0013,0x21);
 800075a:	2221      	movs	r2, #33	@ 0x21
 800075c:	2113      	movs	r1, #19
 800075e:	20fd      	movs	r0, #253	@ 0xfd
 8000760:	f7ff ffa9 	bl	80006b6 <send_pos_color>
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <main+0x48>
 8000768:	08004c4c 	.word	0x08004c4c
 800076c:	20000028 	.word	0x20000028

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2238      	movs	r2, #56	@ 0x38
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fa2c 	bl	8004bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 feb8 	bl	8001508 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2340      	movs	r3, #64	@ 0x40
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007b2:	2355      	movs	r3, #85	@ 0x55
 80007b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 ff52 	bl	8001670 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007d2:	f000 f818 	bl	8000806 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2303      	movs	r3, #3
 80007dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2104      	movs	r1, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fa50 	bl	8001c94 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007fa:	f000 f804 	bl	8000806 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080a:	b672      	cpsid	i
}
 800080c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080e:	bf00      	nop
 8000810:	e7fd      	b.n	800080e <Error_Handler+0x8>

08000812 <PWM_write>:
 */
#include "pwm_api.h"


void PWM_write(TIM_HandleTypeDef *htim, uint32_t pwm_channel, float duty_cycle)
{
 8000812:	b480      	push	{r7}
 8000814:	b087      	sub	sp, #28
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(htim);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000826:	617b      	str	r3, [r7, #20]
    uint32_t CRR = duty_cycle*(ARR+1)-1;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	3301      	adds	r3, #1
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000834:	edd7 7a01 	vldr	s15, [r7, #4]
 8000838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800083c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d104      	bne.n	800085e <PWM_write+0x4c>
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800085c:	e023      	b.n	80008a6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	2b04      	cmp	r3, #4
 8000862:	d104      	bne.n	800086e <PWM_write+0x5c>
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800086c:	e01b      	b.n	80008a6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	2b08      	cmp	r3, #8
 8000872:	d104      	bne.n	800087e <PWM_write+0x6c>
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800087c:	e013      	b.n	80008a6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d104      	bne.n	800088e <PWM_write+0x7c>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800088c:	e00b      	b.n	80008a6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b10      	cmp	r3, #16
 8000892:	d104      	bne.n	800089e <PWM_write+0x8c>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800089c:	e003      	b.n	80008a6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80008a6:	bf00      	nop
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	4a0e      	ldr	r2, [pc, #56]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_MspInit+0x44>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ea:	f000 feb1 	bl	8001650 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 fa51 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <USART2_IRQHandler+0x10>)
 8000962:	f002 ffa9 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000074 	.word	0x20000074

08000970 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09c      	sub	sp, #112	@ 0x70
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2234      	movs	r2, #52	@ 0x34
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 f904 	bl	8004bdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d4:	4b46      	ldr	r3, [pc, #280]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 80009d6:	4a47      	ldr	r2, [pc, #284]	@ (8000af4 <MX_TIM1_Init+0x160>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80009da:	4b45      	ldr	r3, [pc, #276]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b43      	ldr	r3, [pc, #268]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8500;
 80009e6:	4b42      	ldr	r3, [pc, #264]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 80009e8:	f242 1234 	movw	r2, #8500	@ 0x2134
 80009ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b40      	ldr	r3, [pc, #256]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f4:	4b3e      	ldr	r3, [pc, #248]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b3d      	ldr	r3, [pc, #244]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a00:	483b      	ldr	r0, [pc, #236]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 8000a02:	f001 fd53 	bl	80024ac <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f7ff fefb 	bl	8000806 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a16:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4834      	ldr	r0, [pc, #208]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 8000a1e:	f002 f811 	bl	8002a44 <HAL_TIM_ConfigClockSource>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a28:	f7ff feed 	bl	8000806 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a2c:	4830      	ldr	r0, [pc, #192]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 8000a2e:	f001 fd94 	bl	800255a <HAL_TIM_PWM_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a38:	f7ff fee5 	bl	8000806 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4828      	ldr	r0, [pc, #160]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 8000a50:	f002 fd46 	bl	80034e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a5a:	f7ff fed4 	bl	8000806 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5e:	2360      	movs	r3, #96	@ 0x60
 8000a60:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 8000a62:	f241 0399 	movw	r3, #4249	@ 0x1099
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	481a      	ldr	r0, [pc, #104]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 8000a86:	f001 fec9 	bl	800281c <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000a90:	f7ff feb9 	bl	8000806 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 8000ad2:	f002 fd87 	bl	80035e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000adc:	f7ff fe93 	bl	8000806 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae0:	4803      	ldr	r0, [pc, #12]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 8000ae2:	f000 f829 	bl	8000b38 <HAL_TIM_MspPostInit>

}
 8000ae6:	bf00      	nop
 8000ae8:	3770      	adds	r7, #112	@ 0x70
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000028 	.word	0x20000028
 8000af4:	40012c00 	.word	0x40012c00

08000af8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_TIM_Base_MspInit+0x38>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d10b      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_TIM_Base_MspInit+0x3c>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	4a09      	ldr	r2, [pc, #36]	@ (8000b34 <HAL_TIM_Base_MspInit+0x3c>)
 8000b10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <HAL_TIM_Base_MspInit+0x3c>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40012c00 	.word	0x40012c00
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <HAL_TIM_MspPostInit+0x68>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d11d      	bne.n	8000b96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_TIM_MspPostInit+0x6c>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ba4 <HAL_TIM_MspPostInit+0x6c>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_TIM_MspPostInit+0x6c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b84:	2306      	movs	r3, #6
 8000b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f000 fb1f 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012c00 	.word	0x40012c00
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf0:	4811      	ldr	r0, [pc, #68]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000bf2:	f002 fd83 	bl	80036fc <HAL_UART_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bfc:	f7ff fe03 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000c04:	f003 ff1f 	bl	8004a46 <HAL_UARTEx_SetTxFifoThreshold>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0e:	f7ff fdfa 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4808      	ldr	r0, [pc, #32]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000c16:	f003 ff54 	bl	8004ac2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f7ff fdf1 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_USART2_UART_Init+0x90>)
 8000c26:	f003 fed5 	bl	80049d4 <HAL_UARTEx_DisableFifoMode>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f7ff fde9 	bl	8000806 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000074 	.word	0x20000074
 8000c3c:	40004400 	.word	0x40004400

08000c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b09a      	sub	sp, #104	@ 0x68
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2244      	movs	r2, #68	@ 0x44
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 ffbb 	bl	8004bdc <memset>
  if(uartHandle->Instance==USART2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a23      	ldr	r2, [pc, #140]	@ (8000cf8 <HAL_UART_MspInit+0xb8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d13e      	bne.n	8000cee <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fa25 	bl	80020cc <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c88:	f7ff fdbd 	bl	8000806 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <HAL_UART_MspInit+0xbc>)
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c90:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <HAL_UART_MspInit+0xbc>)
 8000c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_UART_MspInit+0xbc>)
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_UART_MspInit+0xbc>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca8:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <HAL_UART_MspInit+0xbc>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_UART_MspInit+0xbc>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cda:	f000 fa7b 	bl	80011d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2026      	movs	r0, #38	@ 0x26
 8000ce4:	f000 f981 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce8:	2026      	movs	r0, #38	@ 0x26
 8000cea:	f000 f998 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3768      	adds	r7, #104	@ 0x68
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40021000 	.word	0x40021000

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8000d00:	480d      	ldr	r0, [pc, #52]	@ (8000d38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff fe34 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	@ (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	@ (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f003 ff5d 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fcf3 	bl	800071c <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
   ldr   r0, =_estack
 8000d38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d44:	08004ca8 	.word	0x08004ca8
  ldr r2, =_sbss
 8000d48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d4c:	2000010c 	.word	0x2000010c

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>

08000d52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f939 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f80e 	bl	8000d84 <HAL_InitTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	e001      	b.n	8000d78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d74:	f7ff fd9e 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d78:	79fb      	ldrb	r3, [r7, #7]

}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <HAL_InitTick+0x68>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d022      	beq.n	8000dde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_InitTick+0x6c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_InitTick+0x68>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f944 	bl	800103a <HAL_SYSTICK_Config>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10f      	bne.n	8000dd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	d809      	bhi.n	8000dd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc6:	f000 f910 	bl	8000fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_InitTick+0x70>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e007      	b.n	8000de2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e004      	b.n	8000de2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e001      	b.n	8000de2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_IncTick+0x1c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <HAL_IncTick+0x20>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	@ (8000e14 <HAL_IncTick+0x1c>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	20000108 	.word	0x20000108
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000108 	.word	0x20000108

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	@ (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	@ 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff40 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff90 	bl	8000f28 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5f 	bl	8000ed4 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff33 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa4 	bl	8000f90 <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d005      	beq.n	8001076 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2204      	movs	r2, #4
 800106e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e037      	b.n	80010e6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 020e 	bic.w	r2, r2, #14
 8001084:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001094:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f003 021f 	and.w	r2, r3, #31
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010c2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00c      	beq.n	80010e6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010da:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010e4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d00d      	beq.n	8001138 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e047      	b.n	80011c8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 020e 	bic.w	r2, r2, #14
 8001146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001162:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001184:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00c      	beq.n	80011a8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800119c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
    }
  }
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011e2:	e15a      	b.n	800149a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 814c 	beq.w	8001494 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d005      	beq.n	8001214 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001210:	2b02      	cmp	r3, #2
 8001212:	d130      	bne.n	8001276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124a:	2201      	movs	r2, #1
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 0201 	and.w	r2, r3, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b03      	cmp	r3, #3
 8001280:	d017      	beq.n	80012b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	6939      	ldr	r1, [r7, #16]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80a6 	beq.w	8001494 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b5b      	ldr	r3, [pc, #364]	@ (80014b8 <HAL_GPIO_Init+0x2e4>)
 800134a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134c:	4a5a      	ldr	r2, [pc, #360]	@ (80014b8 <HAL_GPIO_Init+0x2e4>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6613      	str	r3, [r2, #96]	@ 0x60
 8001354:	4b58      	ldr	r3, [pc, #352]	@ (80014b8 <HAL_GPIO_Init+0x2e4>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001360:	4a56      	ldr	r2, [pc, #344]	@ (80014bc <HAL_GPIO_Init+0x2e8>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800138a:	d01f      	beq.n	80013cc <HAL_GPIO_Init+0x1f8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a4c      	ldr	r2, [pc, #304]	@ (80014c0 <HAL_GPIO_Init+0x2ec>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d019      	beq.n	80013c8 <HAL_GPIO_Init+0x1f4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a4b      	ldr	r2, [pc, #300]	@ (80014c4 <HAL_GPIO_Init+0x2f0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_GPIO_Init+0x1f0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a4a      	ldr	r2, [pc, #296]	@ (80014c8 <HAL_GPIO_Init+0x2f4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d00d      	beq.n	80013c0 <HAL_GPIO_Init+0x1ec>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a49      	ldr	r2, [pc, #292]	@ (80014cc <HAL_GPIO_Init+0x2f8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d007      	beq.n	80013bc <HAL_GPIO_Init+0x1e8>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a48      	ldr	r2, [pc, #288]	@ (80014d0 <HAL_GPIO_Init+0x2fc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013b4:	2305      	movs	r3, #5
 80013b6:	e00a      	b.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013b8:	2306      	movs	r3, #6
 80013ba:	e008      	b.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013bc:	2304      	movs	r3, #4
 80013be:	e006      	b.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013c0:	2303      	movs	r3, #3
 80013c2:	e004      	b.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e002      	b.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013cc:	2300      	movs	r3, #0
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	f002 0203 	and.w	r2, r2, #3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	4093      	lsls	r3, r2
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013de:	4937      	ldr	r1, [pc, #220]	@ (80014bc <HAL_GPIO_Init+0x2e8>)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ec:	4b39      	ldr	r3, [pc, #228]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001410:	4a30      	ldr	r2, [pc, #192]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800143a:	4a26      	ldr	r2, [pc, #152]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001464:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800148e:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f47f ae9d 	bne.w	80011e4 <HAL_GPIO_Init+0x10>
  }
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	48000400 	.word	0x48000400
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000c00 	.word	0x48000c00
 80014cc:	48001000 	.word	0x48001000
 80014d0:	48001400 	.word	0x48001400
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d141      	bne.n	800159a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001516:	4b4b      	ldr	r3, [pc, #300]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001522:	d131      	bne.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001524:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800152a:	4a46      	ldr	r2, [pc, #280]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001534:	4b43      	ldr	r3, [pc, #268]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800153c:	4a41      	ldr	r2, [pc, #260]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001542:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001544:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2232      	movs	r2, #50	@ 0x32
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	4a3f      	ldr	r2, [pc, #252]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	0c9b      	lsrs	r3, r3, #18
 8001556:	3301      	adds	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155a:	e002      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3b01      	subs	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001562:	4b38      	ldr	r3, [pc, #224]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800156e:	d102      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f2      	bne.n	800155c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001582:	d158      	bne.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e057      	b.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800158e:	4a2d      	ldr	r2, [pc, #180]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001594:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001598:	e04d      	b.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015a0:	d141      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015a2:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ae:	d131      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b0:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015b6:	4a23      	ldr	r2, [pc, #140]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2232      	movs	r2, #50	@ 0x32
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e6:	e002      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015fa:	d102      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f2      	bne.n	80015e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800160e:	d112      	bne.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e011      	b.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001620:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001624:	e007      	b.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001634:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40007000 	.word	0x40007000
 8001648:	20000000 	.word	0x20000000
 800164c:	431bde83 	.word	0x431bde83

08001650 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165e:	6093      	str	r3, [r2, #8]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e2fe      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d075      	beq.n	800177a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168e:	4b97      	ldr	r3, [pc, #604]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001698:	4b94      	ldr	r3, [pc, #592]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d102      	bne.n	80016ae <HAL_RCC_OscConfig+0x3e>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d002      	beq.n	80016b4 <HAL_RCC_OscConfig+0x44>
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d10b      	bne.n	80016cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	4b8d      	ldr	r3, [pc, #564]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d05b      	beq.n	8001778 <HAL_RCC_OscConfig+0x108>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d157      	bne.n	8001778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e2d9      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d4:	d106      	bne.n	80016e4 <HAL_RCC_OscConfig+0x74>
 80016d6:	4b85      	ldr	r3, [pc, #532]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a84      	ldr	r2, [pc, #528]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e01d      	b.n	8001720 <HAL_RCC_OscConfig+0xb0>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x98>
 80016ee:	4b7f      	ldr	r3, [pc, #508]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a7e      	ldr	r2, [pc, #504]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b7c      	ldr	r3, [pc, #496]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a7b      	ldr	r2, [pc, #492]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0xb0>
 8001708:	4b78      	ldr	r3, [pc, #480]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a77      	ldr	r2, [pc, #476]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b75      	ldr	r3, [pc, #468]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a74      	ldr	r2, [pc, #464]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800171e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fb78 	bl	8000e1c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fb74 	bl	8000e1c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	@ 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e29e      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001742:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0xc0>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fb64 	bl	8000e1c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fb60 	bl	8000e1c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e28a      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176a:	4b60      	ldr	r3, [pc, #384]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0xe8>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d075      	beq.n	8001872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001786:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001790:	4b56      	ldr	r3, [pc, #344]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b0c      	cmp	r3, #12
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_OscConfig+0x136>
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d002      	beq.n	80017ac <HAL_RCC_OscConfig+0x13c>
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d11f      	bne.n	80017ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ac:	4b4f      	ldr	r3, [pc, #316]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x154>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e25d      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b49      	ldr	r3, [pc, #292]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	4946      	ldr	r1, [pc, #280]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017d8:	4b45      	ldr	r3, [pc, #276]	@ (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fad1 	bl	8000d84 <HAL_InitTick>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d043      	beq.n	8001870 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e249      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d023      	beq.n	800183c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a3c      	ldr	r2, [pc, #240]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb0c 	bl	8000e1c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fb08 	bl	8000e1c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e232      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181a:	4b34      	ldr	r3, [pc, #208]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	061b      	lsls	r3, r3, #24
 8001834:	492d      	ldr	r1, [pc, #180]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
 800183a:	e01a      	b.n	8001872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183c:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2a      	ldr	r2, [pc, #168]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001842:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fae8 	bl	8000e1c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fae4 	bl	8000e1c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e20e      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x1e0>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d041      	beq.n	8001902 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188c:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fac1 	bl	8000e1c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff fabd 	bl	8000e1c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1e7      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0ef      	beq.n	800189e <HAL_RCC_OscConfig+0x22e>
 80018be:	e020      	b.n	8001902 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c0:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80018c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <HAL_RCC_OscConfig+0x27c>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff faa4 	bl	8000e1c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d6:	e00d      	b.n	80018f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff faa0 	bl	8000e1c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d906      	bls.n	80018f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1ca      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ea      	bne.n	80018d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80a6 	beq.w	8001a5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001914:	4b84      	ldr	r3, [pc, #528]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_OscConfig+0x2b4>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x2b6>
 8001924:	2300      	movs	r3, #0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00d      	beq.n	8001946 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001934:	6593      	str	r3, [r2, #88]	@ 0x58
 8001936:	4b7c      	ldr	r3, [pc, #496]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001942:	2301      	movs	r3, #1
 8001944:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001946:	4b79      	ldr	r3, [pc, #484]	@ (8001b2c <HAL_RCC_OscConfig+0x4bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d118      	bne.n	8001984 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001952:	4b76      	ldr	r3, [pc, #472]	@ (8001b2c <HAL_RCC_OscConfig+0x4bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a75      	ldr	r2, [pc, #468]	@ (8001b2c <HAL_RCC_OscConfig+0x4bc>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195e:	f7ff fa5d 	bl	8000e1c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001966:	f7ff fa59 	bl	8000e1c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e183      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	4b6c      	ldr	r3, [pc, #432]	@ (8001b2c <HAL_RCC_OscConfig+0x4bc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d108      	bne.n	800199e <HAL_RCC_OscConfig+0x32e>
 800198c:	4b66      	ldr	r3, [pc, #408]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 800198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001992:	4a65      	ldr	r2, [pc, #404]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800199c:	e024      	b.n	80019e8 <HAL_RCC_OscConfig+0x378>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d110      	bne.n	80019c8 <HAL_RCC_OscConfig+0x358>
 80019a6:	4b60      	ldr	r3, [pc, #384]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ac:	4a5e      	ldr	r2, [pc, #376]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c6:	e00f      	b.n	80019e8 <HAL_RCC_OscConfig+0x378>
 80019c8:	4b57      	ldr	r3, [pc, #348]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ce:	4a56      	ldr	r2, [pc, #344]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d8:	4b53      	ldr	r3, [pc, #332]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019de:	4a52      	ldr	r2, [pc, #328]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d016      	beq.n	8001a1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fa14 	bl	8000e1c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff fa10 	bl	8000e1c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e138      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	4b46      	ldr	r3, [pc, #280]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ed      	beq.n	80019f8 <HAL_RCC_OscConfig+0x388>
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f9fd 	bl	8000e1c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff f9f9 	bl	8000e1c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e121      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ed      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a4a:	7ffb      	ldrb	r3, [r7, #31]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a50:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	4a34      	ldr	r2, [pc, #208]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d03c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a70:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a76:	4a2c      	ldr	r2, [pc, #176]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff f9cc 	bl	8000e1c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a88:	f7ff f9c8 	bl	8000e1c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0f2      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a9a:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ef      	beq.n	8001a88 <HAL_RCC_OscConfig+0x418>
 8001aa8:	e01b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff f9af 	bl	8000e1c <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac2:	f7ff f9ab 	bl	8000e1c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0d5      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ef      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80c9 	beq.w	8001c7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aec:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	f000 8083 	beq.w	8001c00 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d15e      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <HAL_RCC_OscConfig+0x4b8>)
 8001b08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f985 	bl	8000e1c <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b14:	e00c      	b.n	8001b30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff f981 	bl	8000e1c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d905      	bls.n	8001b30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0ab      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b30:	4b55      	ldr	r3, [pc, #340]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ec      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3c:	4b52      	ldr	r3, [pc, #328]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4b52      	ldr	r3, [pc, #328]	@ (8001c8c <HAL_RCC_OscConfig+0x61c>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6a11      	ldr	r1, [r2, #32]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b4c:	3a01      	subs	r2, #1
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	4311      	orrs	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b5e:	0852      	lsrs	r2, r2, #1
 8001b60:	3a01      	subs	r2, #1
 8001b62:	0552      	lsls	r2, r2, #21
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b6a:	0852      	lsrs	r2, r2, #1
 8001b6c:	3a01      	subs	r2, #1
 8001b6e:	0652      	lsls	r2, r2, #25
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b76:	06d2      	lsls	r2, r2, #27
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	4943      	ldr	r1, [pc, #268]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a40      	ldr	r2, [pc, #256]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4a3d      	ldr	r2, [pc, #244]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff f940 	bl	8000e1c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f93c 	bl	8000e1c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e066      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	4b35      	ldr	r3, [pc, #212]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x530>
 8001bbe:	e05e      	b.n	8001c7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a30      	ldr	r2, [pc, #192]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f926 	bl	8000e1c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff f922 	bl	8000e1c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e04c      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be6:	4b28      	ldr	r3, [pc, #160]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bf2:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	4924      	ldr	r1, [pc, #144]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_OscConfig+0x620>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60cb      	str	r3, [r1, #12]
 8001bfe:	e03e      	b.n	8001c7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e039      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <HAL_RCC_OscConfig+0x618>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0203 	and.w	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d12c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d123      	bne.n	8001c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d11b      	bne.n	8001c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d113      	bne.n	8001c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	3b01      	subs	r3, #1
 8001c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	019f800c 	.word	0x019f800c
 8001c90:	feeefffc 	.word	0xfeeefffc

08001c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e11e      	b.n	8001eea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b91      	ldr	r3, [pc, #580]	@ (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d910      	bls.n	8001cdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b8e      	ldr	r3, [pc, #568]	@ (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 020f 	bic.w	r2, r3, #15
 8001cc2:	498c      	ldr	r1, [pc, #560]	@ (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b8a      	ldr	r3, [pc, #552]	@ (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e106      	b.n	8001eea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d073      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d129      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf0:	4b81      	ldr	r3, [pc, #516]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0f4      	b.n	8001eea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d00:	f000 f99e 	bl	8002040 <RCC_GetSysClockFreqFromPLLSource>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4a7c      	ldr	r2, [pc, #496]	@ (8001efc <HAL_RCC_ClockConfig+0x268>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d93f      	bls.n	8001d8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d033      	beq.n	8001d8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d12f      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d36:	4a70      	ldr	r2, [pc, #448]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e024      	b.n	8001d8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0c6      	b.n	8001eea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5c:	4b66      	ldr	r3, [pc, #408]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0be      	b.n	8001eea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d6c:	f000 f8ce 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4a61      	ldr	r2, [pc, #388]	@ (8001efc <HAL_RCC_ClockConfig+0x268>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d909      	bls.n	8001d8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d82:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4957      	ldr	r1, [pc, #348]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da0:	f7ff f83c 	bl	8000e1c <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff f838 	bl	8000e1c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e095      	b.n	8001eea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d023      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de8:	4b43      	ldr	r3, [pc, #268]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a42      	ldr	r2, [pc, #264]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001dee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001df2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e00:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e08:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4936      	ldr	r1, [pc, #216]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b80      	cmp	r3, #128	@ 0x80
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e2a:	4b33      	ldr	r3, [pc, #204]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4a32      	ldr	r2, [pc, #200]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001e30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d21d      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 020f 	bic.w	r2, r3, #15
 8001e4c:	4929      	ldr	r1, [pc, #164]	@ (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e54:	f7fe ffe2 	bl	8000e1c <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7fe ffde 	bl	8000e1c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e03b      	b.n	8001eea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1ed      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4917      	ldr	r1, [pc, #92]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eaa:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	490f      	ldr	r1, [pc, #60]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ebe:	f000 f825 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	490c      	ldr	r1, [pc, #48]	@ (8001f00 <HAL_RCC_ClockConfig+0x26c>)
 8001ed0:	5ccb      	ldrb	r3, [r1, r3]
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <HAL_RCC_ClockConfig+0x270>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <HAL_RCC_ClockConfig+0x274>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ff4e 	bl	8000d84 <HAL_InitTick>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	04c4b400 	.word	0x04c4b400
 8001f00:	08004c58 	.word	0x08004c58
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f12:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d102      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e047      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f24:	4b27      	ldr	r3, [pc, #156]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d102      	bne.n	8001f36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f30:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	e03e      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f36:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d136      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3301      	adds	r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d10c      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f60:	4a1a      	ldr	r2, [pc, #104]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	4a16      	ldr	r2, [pc, #88]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6a:	68d2      	ldr	r2, [r2, #12]
 8001f6c:	0a12      	lsrs	r2, r2, #8
 8001f6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
      break;
 8001f78:	e00c      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f7a:	4a13      	ldr	r2, [pc, #76]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f84:	68d2      	ldr	r2, [r2, #12]
 8001f86:	0a12      	lsrs	r2, r2, #8
 8001f88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
      break;
 8001f92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0e5b      	lsrs	r3, r3, #25
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e001      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fb4:	693b      	ldr	r3, [r7, #16]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	007a1200 	.word	0x007a1200

08001fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4904      	ldr	r1, [pc, #16]	@ (8002010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	08004c68 	.word	0x08004c68

08002014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002018:	f7ff ffda 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0adb      	lsrs	r3, r3, #11
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4904      	ldr	r1, [pc, #16]	@ (800203c <HAL_RCC_GetPCLK2Freq+0x28>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08004c68 	.word	0x08004c68

08002040 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002046:	4b1e      	ldr	r3, [pc, #120]	@ (80020c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3301      	adds	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d10c      	bne.n	800207e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002064:	4a17      	ldr	r2, [pc, #92]	@ (80020c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800206e:	68d2      	ldr	r2, [r2, #12]
 8002070:	0a12      	lsrs	r2, r2, #8
 8002072:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
    break;
 800207c:	e00c      	b.n	8002098 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800207e:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4a0e      	ldr	r2, [pc, #56]	@ (80020c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002088:	68d2      	ldr	r2, [r2, #12]
 800208a:	0a12      	lsrs	r2, r2, #8
 800208c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
    break;
 8002096:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0e5b      	lsrs	r3, r3, #25
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020b2:	687b      	ldr	r3, [r7, #4]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	007a1200 	.word	0x007a1200
 80020c8:	00f42400 	.word	0x00f42400

080020cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020d4:	2300      	movs	r3, #0
 80020d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020d8:	2300      	movs	r3, #0
 80020da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8098 	beq.w	800221a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b40      	ldr	r3, [pc, #256]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	4a3f      	ldr	r2, [pc, #252]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6593      	str	r3, [r2, #88]	@ 0x58
 8002106:	4b3d      	ldr	r3, [pc, #244]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002116:	4b3a      	ldr	r3, [pc, #232]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a39      	ldr	r2, [pc, #228]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002120:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002122:	f7fe fe7b 	bl	8000e1c <HAL_GetTick>
 8002126:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002128:	e009      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7fe fe77 	bl	8000e1c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d902      	bls.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	74fb      	strb	r3, [r7, #19]
        break;
 800213c:	e005      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800213e:	4b30      	ldr	r3, [pc, #192]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0ef      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d159      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01e      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	d019      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800216c:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002178:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	4a1f      	ldr	r2, [pc, #124]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002188:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218e:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002198:	4a18      	ldr	r2, [pc, #96]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7fe fe37 	bl	8000e1c <HAL_GetTick>
 80021ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b0:	e00b      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fe33 	bl	8000e1c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d902      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	74fb      	strb	r3, [r7, #19]
            break;
 80021c8:	e006      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ec      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	4903      	ldr	r1, [pc, #12]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021f4:	e008      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	74bb      	strb	r3, [r7, #18]
 80021fa:	e005      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002208:	7c7b      	ldrb	r3, [r7, #17]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4ba6      	ldr	r3, [pc, #664]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	4aa5      	ldr	r2, [pc, #660]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002218:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002226:	4ba0      	ldr	r3, [pc, #640]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222c:	f023 0203 	bic.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	499c      	ldr	r1, [pc, #624]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002248:	4b97      	ldr	r3, [pc, #604]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	f023 020c 	bic.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4994      	ldr	r1, [pc, #592]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800226a:	4b8f      	ldr	r3, [pc, #572]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002270:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	498b      	ldr	r1, [pc, #556]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800228c:	4b86      	ldr	r3, [pc, #536]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	4983      	ldr	r1, [pc, #524]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ae:	4b7e      	ldr	r3, [pc, #504]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	497a      	ldr	r1, [pc, #488]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d0:	4b75      	ldr	r3, [pc, #468]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	4972      	ldr	r1, [pc, #456]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022f2:	4b6d      	ldr	r3, [pc, #436]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	4969      	ldr	r1, [pc, #420]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002314:	4b64      	ldr	r3, [pc, #400]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4961      	ldr	r1, [pc, #388]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002336:	4b5c      	ldr	r3, [pc, #368]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	4958      	ldr	r1, [pc, #352]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d015      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002358:	4b53      	ldr	r3, [pc, #332]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	4950      	ldr	r1, [pc, #320]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002376:	d105      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002378:	4b4b      	ldr	r3, [pc, #300]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a4a      	ldr	r2, [pc, #296]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002382:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002390:	4b45      	ldr	r3, [pc, #276]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002396:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	4942      	ldr	r1, [pc, #264]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ae:	d105      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b0:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a3c      	ldr	r2, [pc, #240]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023c8:	4b37      	ldr	r3, [pc, #220]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4934      	ldr	r1, [pc, #208]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e8:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a2e      	ldr	r2, [pc, #184]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002400:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002406:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240e:	4926      	ldr	r1, [pc, #152]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800241e:	d105      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002420:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a20      	ldr	r2, [pc, #128]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d015      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	4918      	ldr	r1, [pc, #96]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002456:	d105      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002458:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002462:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d015      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002470:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002476:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247e:	490a      	ldr	r1, [pc, #40]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800248e:	d105      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800249c:	7cbb      	ldrb	r3, [r7, #18]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e049      	b.n	8002552 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fb10 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 fba4 	bl	8002c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e049      	b.n	8002600 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f841 	bl	8002608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3304      	adds	r3, #4
 8002596:	4619      	mov	r1, r3
 8002598:	4610      	mov	r0, r2
 800259a:	f000 fb4d 	bl	8002c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_TIM_PWM_Start+0x24>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e03c      	b.n	80026ba <HAL_TIM_PWM_Start+0x9e>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d109      	bne.n	800265a <HAL_TIM_PWM_Start+0x3e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e02f      	b.n	80026ba <HAL_TIM_PWM_Start+0x9e>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d109      	bne.n	8002674 <HAL_TIM_PWM_Start+0x58>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e022      	b.n	80026ba <HAL_TIM_PWM_Start+0x9e>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d109      	bne.n	800268e <HAL_TIM_PWM_Start+0x72>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	e015      	b.n	80026ba <HAL_TIM_PWM_Start+0x9e>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b10      	cmp	r3, #16
 8002692:	d109      	bne.n	80026a8 <HAL_TIM_PWM_Start+0x8c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e008      	b.n	80026ba <HAL_TIM_PWM_Start+0x9e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e097      	b.n	80027f2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start+0xb6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026d0:	e023      	b.n	800271a <HAL_TIM_PWM_Start+0xfe>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_PWM_Start+0xc6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026e0:	e01b      	b.n	800271a <HAL_TIM_PWM_Start+0xfe>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_PWM_Start+0xd6>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026f0:	e013      	b.n	800271a <HAL_TIM_PWM_Start+0xfe>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d104      	bne.n	8002702 <HAL_TIM_PWM_Start+0xe6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002700:	e00b      	b.n	800271a <HAL_TIM_PWM_Start+0xfe>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b10      	cmp	r3, #16
 8002706:	d104      	bne.n	8002712 <HAL_TIM_PWM_Start+0xf6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002710:	e003      	b.n	800271a <HAL_TIM_PWM_Start+0xfe>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 feb6 	bl	8003494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a33      	ldr	r2, [pc, #204]	@ (80027fc <HAL_TIM_PWM_Start+0x1e0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_TIM_PWM_Start+0x13e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a32      	ldr	r2, [pc, #200]	@ (8002800 <HAL_TIM_PWM_Start+0x1e4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00e      	beq.n	800275a <HAL_TIM_PWM_Start+0x13e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a30      	ldr	r2, [pc, #192]	@ (8002804 <HAL_TIM_PWM_Start+0x1e8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_TIM_PWM_Start+0x13e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2f      	ldr	r2, [pc, #188]	@ (8002808 <HAL_TIM_PWM_Start+0x1ec>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_TIM_PWM_Start+0x13e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2d      	ldr	r2, [pc, #180]	@ (800280c <HAL_TIM_PWM_Start+0x1f0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_TIM_PWM_Start+0x142>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_TIM_PWM_Start+0x144>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a20      	ldr	r2, [pc, #128]	@ (80027fc <HAL_TIM_PWM_Start+0x1e0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_TIM_PWM_Start+0x194>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002786:	d013      	beq.n	80027b0 <HAL_TIM_PWM_Start+0x194>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a20      	ldr	r2, [pc, #128]	@ (8002810 <HAL_TIM_PWM_Start+0x1f4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_TIM_PWM_Start+0x194>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1f      	ldr	r2, [pc, #124]	@ (8002814 <HAL_TIM_PWM_Start+0x1f8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_TIM_PWM_Start+0x194>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_TIM_PWM_Start+0x1e4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_PWM_Start+0x194>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a16      	ldr	r2, [pc, #88]	@ (8002804 <HAL_TIM_PWM_Start+0x1e8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d115      	bne.n	80027dc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <HAL_TIM_PWM_Start+0x1fc>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d015      	beq.n	80027ee <HAL_TIM_PWM_Start+0x1d2>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c8:	d011      	beq.n	80027ee <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027da:	e008      	b.n	80027ee <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e000      	b.n	80027f0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40013400 	.word	0x40013400
 8002804:	40014000 	.word	0x40014000
 8002808:	40014400 	.word	0x40014400
 800280c:	40014800 	.word	0x40014800
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800
 8002818:	00010007 	.word	0x00010007

0800281c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002836:	2302      	movs	r3, #2
 8002838:	e0ff      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b14      	cmp	r3, #20
 8002846:	f200 80f0 	bhi.w	8002a2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800284a:	a201      	add	r2, pc, #4	@ (adr r2, 8002850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	080028a5 	.word	0x080028a5
 8002854:	08002a2b 	.word	0x08002a2b
 8002858:	08002a2b 	.word	0x08002a2b
 800285c:	08002a2b 	.word	0x08002a2b
 8002860:	080028e5 	.word	0x080028e5
 8002864:	08002a2b 	.word	0x08002a2b
 8002868:	08002a2b 	.word	0x08002a2b
 800286c:	08002a2b 	.word	0x08002a2b
 8002870:	08002927 	.word	0x08002927
 8002874:	08002a2b 	.word	0x08002a2b
 8002878:	08002a2b 	.word	0x08002a2b
 800287c:	08002a2b 	.word	0x08002a2b
 8002880:	08002967 	.word	0x08002967
 8002884:	08002a2b 	.word	0x08002a2b
 8002888:	08002a2b 	.word	0x08002a2b
 800288c:	08002a2b 	.word	0x08002a2b
 8002890:	080029a9 	.word	0x080029a9
 8002894:	08002a2b 	.word	0x08002a2b
 8002898:	08002a2b 	.word	0x08002a2b
 800289c:	08002a2b 	.word	0x08002a2b
 80028a0:	080029e9 	.word	0x080029e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fa60 	bl	8002d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0208 	orr.w	r2, r2, #8
 80028be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0204 	bic.w	r2, r2, #4
 80028ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6999      	ldr	r1, [r3, #24]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	619a      	str	r2, [r3, #24]
      break;
 80028e2:	e0a5      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fad0 	bl	8002e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6999      	ldr	r1, [r3, #24]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	021a      	lsls	r2, r3, #8
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	619a      	str	r2, [r3, #24]
      break;
 8002924:	e084      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fb39 	bl	8002fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0208 	orr.w	r2, r2, #8
 8002940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0204 	bic.w	r2, r2, #4
 8002950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69d9      	ldr	r1, [r3, #28]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	61da      	str	r2, [r3, #28]
      break;
 8002964:	e064      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fba1 	bl	80030b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69d9      	ldr	r1, [r3, #28]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	021a      	lsls	r2, r3, #8
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	61da      	str	r2, [r3, #28]
      break;
 80029a6:	e043      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fc0a 	bl	80031c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80029e6:	e023      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fc4e 	bl	8003290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	021a      	lsls	r2, r3, #8
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a28:	e002      	b.n	8002a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop

08002a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIM_ConfigClockSource+0x1c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0de      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1da>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002a7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a63      	ldr	r2, [pc, #396]	@ (8002c28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	f000 80a9 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002aa0:	4a61      	ldr	r2, [pc, #388]	@ (8002c28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f200 80ae 	bhi.w	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002aa8:	4a60      	ldr	r2, [pc, #384]	@ (8002c2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f000 80a1 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ab0:	4a5e      	ldr	r2, [pc, #376]	@ (8002c2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f200 80a6 	bhi.w	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ab8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	f000 8099 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ac0:	4a5b      	ldr	r2, [pc, #364]	@ (8002c30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	f200 809e 	bhi.w	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ac8:	4a5a      	ldr	r2, [pc, #360]	@ (8002c34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	f000 8091 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ad0:	4a58      	ldr	r2, [pc, #352]	@ (8002c34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f200 8096 	bhi.w	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ad8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002adc:	f000 8089 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ae0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002ae4:	f200 808e 	bhi.w	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aec:	d03e      	beq.n	8002b6c <HAL_TIM_ConfigClockSource+0x128>
 8002aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af2:	f200 8087 	bhi.w	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002afa:	f000 8086 	beq.w	8002c0a <HAL_TIM_ConfigClockSource+0x1c6>
 8002afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b02:	d87f      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b04:	2b70      	cmp	r3, #112	@ 0x70
 8002b06:	d01a      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0xfa>
 8002b08:	2b70      	cmp	r3, #112	@ 0x70
 8002b0a:	d87b      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b0c:	2b60      	cmp	r3, #96	@ 0x60
 8002b0e:	d050      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0x16e>
 8002b10:	2b60      	cmp	r3, #96	@ 0x60
 8002b12:	d877      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b14:	2b50      	cmp	r3, #80	@ 0x50
 8002b16:	d03c      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x14e>
 8002b18:	2b50      	cmp	r3, #80	@ 0x50
 8002b1a:	d873      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d058      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x18e>
 8002b20:	2b40      	cmp	r3, #64	@ 0x40
 8002b22:	d86f      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b24:	2b30      	cmp	r3, #48	@ 0x30
 8002b26:	d064      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b28:	2b30      	cmp	r3, #48	@ 0x30
 8002b2a:	d86b      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d060      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d867      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d05c      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d05a      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002b3c:	e062      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b4e:	f000 fc81 	bl	8003454 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	609a      	str	r2, [r3, #8]
      break;
 8002b6a:	e04f      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b7c:	f000 fc6a 	bl	8003454 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b8e:	609a      	str	r2, [r3, #8]
      break;
 8002b90:	e03c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f000 fbdc 	bl	800335c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2150      	movs	r1, #80	@ 0x50
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fc35 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8002bb0:	e02c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 fbfb 	bl	80033ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2160      	movs	r1, #96	@ 0x60
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fc25 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e01c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 fbbc 	bl	800335c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2140      	movs	r1, #64	@ 0x40
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fc15 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e00c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	f000 fc0c 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8002c02:	e003      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;
 8002c08:	e000      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	00100070 	.word	0x00100070
 8002c2c:	00100040 	.word	0x00100040
 8002c30:	00100030 	.word	0x00100030
 8002c34:	00100020 	.word	0x00100020

08002c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a42      	ldr	r2, [pc, #264]	@ (8002d54 <TIM_Base_SetConfig+0x11c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00f      	beq.n	8002c70 <TIM_Base_SetConfig+0x38>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c56:	d00b      	beq.n	8002c70 <TIM_Base_SetConfig+0x38>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d58 <TIM_Base_SetConfig+0x120>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <TIM_Base_SetConfig+0x38>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3e      	ldr	r2, [pc, #248]	@ (8002d5c <TIM_Base_SetConfig+0x124>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_Base_SetConfig+0x38>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d60 <TIM_Base_SetConfig+0x128>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d108      	bne.n	8002c82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a33      	ldr	r2, [pc, #204]	@ (8002d54 <TIM_Base_SetConfig+0x11c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01b      	beq.n	8002cc2 <TIM_Base_SetConfig+0x8a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c90:	d017      	beq.n	8002cc2 <TIM_Base_SetConfig+0x8a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a30      	ldr	r2, [pc, #192]	@ (8002d58 <TIM_Base_SetConfig+0x120>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <TIM_Base_SetConfig+0x8a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8002d5c <TIM_Base_SetConfig+0x124>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00f      	beq.n	8002cc2 <TIM_Base_SetConfig+0x8a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d60 <TIM_Base_SetConfig+0x128>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00b      	beq.n	8002cc2 <TIM_Base_SetConfig+0x8a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2d      	ldr	r2, [pc, #180]	@ (8002d64 <TIM_Base_SetConfig+0x12c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <TIM_Base_SetConfig+0x8a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <TIM_Base_SetConfig+0x130>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d003      	beq.n	8002cc2 <TIM_Base_SetConfig+0x8a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d6c <TIM_Base_SetConfig+0x134>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d108      	bne.n	8002cd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	@ (8002d54 <TIM_Base_SetConfig+0x11c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00f      	beq.n	8002d20 <TIM_Base_SetConfig+0xe8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a17      	ldr	r2, [pc, #92]	@ (8002d60 <TIM_Base_SetConfig+0x128>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <TIM_Base_SetConfig+0xe8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a16      	ldr	r2, [pc, #88]	@ (8002d64 <TIM_Base_SetConfig+0x12c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <TIM_Base_SetConfig+0xe8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a15      	ldr	r2, [pc, #84]	@ (8002d68 <TIM_Base_SetConfig+0x130>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0xe8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <TIM_Base_SetConfig+0x134>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d103      	bne.n	8002d28 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f023 0201 	bic.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]
  }
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40013400 	.word	0x40013400
 8002d64:	40014000 	.word	0x40014000
 8002d68:	40014400 	.word	0x40014400
 8002d6c:	40014800 	.word	0x40014800

08002d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 0201 	bic.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 0302 	bic.w	r3, r3, #2
 8002dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a2c      	ldr	r2, [pc, #176]	@ (8002e7c <TIM_OC1_SetConfig+0x10c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00f      	beq.n	8002df0 <TIM_OC1_SetConfig+0x80>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e80 <TIM_OC1_SetConfig+0x110>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <TIM_OC1_SetConfig+0x80>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a2a      	ldr	r2, [pc, #168]	@ (8002e84 <TIM_OC1_SetConfig+0x114>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <TIM_OC1_SetConfig+0x80>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a29      	ldr	r2, [pc, #164]	@ (8002e88 <TIM_OC1_SetConfig+0x118>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_OC1_SetConfig+0x80>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a28      	ldr	r2, [pc, #160]	@ (8002e8c <TIM_OC1_SetConfig+0x11c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d10c      	bne.n	8002e0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0308 	bic.w	r3, r3, #8
 8002df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 0304 	bic.w	r3, r3, #4
 8002e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002e7c <TIM_OC1_SetConfig+0x10c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00f      	beq.n	8002e32 <TIM_OC1_SetConfig+0xc2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1a      	ldr	r2, [pc, #104]	@ (8002e80 <TIM_OC1_SetConfig+0x110>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00b      	beq.n	8002e32 <TIM_OC1_SetConfig+0xc2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	@ (8002e84 <TIM_OC1_SetConfig+0x114>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <TIM_OC1_SetConfig+0xc2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <TIM_OC1_SetConfig+0x118>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_OC1_SetConfig+0xc2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <TIM_OC1_SetConfig+0x11c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d111      	bne.n	8002e56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	621a      	str	r2, [r3, #32]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	40013400 	.word	0x40013400
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40014400 	.word	0x40014400
 8002e8c:	40014800 	.word	0x40014800

08002e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f023 0210 	bic.w	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0320 	bic.w	r3, r3, #32
 8002ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a28      	ldr	r2, [pc, #160]	@ (8002f90 <TIM_OC2_SetConfig+0x100>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_OC2_SetConfig+0x6c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a27      	ldr	r2, [pc, #156]	@ (8002f94 <TIM_OC2_SetConfig+0x104>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d10d      	bne.n	8002f18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <TIM_OC2_SetConfig+0x100>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00f      	beq.n	8002f40 <TIM_OC2_SetConfig+0xb0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a1c      	ldr	r2, [pc, #112]	@ (8002f94 <TIM_OC2_SetConfig+0x104>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00b      	beq.n	8002f40 <TIM_OC2_SetConfig+0xb0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <TIM_OC2_SetConfig+0x108>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d007      	beq.n	8002f40 <TIM_OC2_SetConfig+0xb0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1a      	ldr	r2, [pc, #104]	@ (8002f9c <TIM_OC2_SetConfig+0x10c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <TIM_OC2_SetConfig+0xb0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a19      	ldr	r2, [pc, #100]	@ (8002fa0 <TIM_OC2_SetConfig+0x110>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d113      	bne.n	8002f68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40013400 	.word	0x40013400
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	40014400 	.word	0x40014400
 8002fa0:	40014800 	.word	0x40014800

08002fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a27      	ldr	r2, [pc, #156]	@ (80030a0 <TIM_OC3_SetConfig+0xfc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_OC3_SetConfig+0x6a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a26      	ldr	r2, [pc, #152]	@ (80030a4 <TIM_OC3_SetConfig+0x100>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10d      	bne.n	800302a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1c      	ldr	r2, [pc, #112]	@ (80030a0 <TIM_OC3_SetConfig+0xfc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00f      	beq.n	8003052 <TIM_OC3_SetConfig+0xae>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1b      	ldr	r2, [pc, #108]	@ (80030a4 <TIM_OC3_SetConfig+0x100>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00b      	beq.n	8003052 <TIM_OC3_SetConfig+0xae>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <TIM_OC3_SetConfig+0x104>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d007      	beq.n	8003052 <TIM_OC3_SetConfig+0xae>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a19      	ldr	r2, [pc, #100]	@ (80030ac <TIM_OC3_SetConfig+0x108>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <TIM_OC3_SetConfig+0xae>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a18      	ldr	r2, [pc, #96]	@ (80030b0 <TIM_OC3_SetConfig+0x10c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d113      	bne.n	800307a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	621a      	str	r2, [r3, #32]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40013400 	.word	0x40013400
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800

080030b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	031b      	lsls	r3, r3, #12
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a28      	ldr	r2, [pc, #160]	@ (80031b4 <TIM_OC4_SetConfig+0x100>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_OC4_SetConfig+0x6c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a27      	ldr	r2, [pc, #156]	@ (80031b8 <TIM_OC4_SetConfig+0x104>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d10d      	bne.n	800313c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	031b      	lsls	r3, r3, #12
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800313a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a1d      	ldr	r2, [pc, #116]	@ (80031b4 <TIM_OC4_SetConfig+0x100>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00f      	beq.n	8003164 <TIM_OC4_SetConfig+0xb0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a1c      	ldr	r2, [pc, #112]	@ (80031b8 <TIM_OC4_SetConfig+0x104>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_OC4_SetConfig+0xb0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a1b      	ldr	r2, [pc, #108]	@ (80031bc <TIM_OC4_SetConfig+0x108>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_OC4_SetConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a1a      	ldr	r2, [pc, #104]	@ (80031c0 <TIM_OC4_SetConfig+0x10c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_OC4_SetConfig+0xb0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a19      	ldr	r2, [pc, #100]	@ (80031c4 <TIM_OC4_SetConfig+0x110>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d113      	bne.n	800318c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800316a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003172:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	019b      	lsls	r3, r3, #6
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	019b      	lsls	r3, r3, #6
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40013400 	.word	0x40013400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40014400 	.word	0x40014400
 80031c4:	40014800 	.word	0x40014800

080031c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800320c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a17      	ldr	r2, [pc, #92]	@ (800327c <TIM_OC5_SetConfig+0xb4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00f      	beq.n	8003242 <TIM_OC5_SetConfig+0x7a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a16      	ldr	r2, [pc, #88]	@ (8003280 <TIM_OC5_SetConfig+0xb8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_OC5_SetConfig+0x7a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <TIM_OC5_SetConfig+0xbc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <TIM_OC5_SetConfig+0x7a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <TIM_OC5_SetConfig+0xc0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_OC5_SetConfig+0x7a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a13      	ldr	r2, [pc, #76]	@ (800328c <TIM_OC5_SetConfig+0xc4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d109      	bne.n	8003256 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40013400 	.word	0x40013400
 8003284:	40014000 	.word	0x40014000
 8003288:	40014400 	.word	0x40014400
 800328c:	40014800 	.word	0x40014800

08003290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	051b      	lsls	r3, r3, #20
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a18      	ldr	r2, [pc, #96]	@ (8003348 <TIM_OC6_SetConfig+0xb8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00f      	beq.n	800330c <TIM_OC6_SetConfig+0x7c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a17      	ldr	r2, [pc, #92]	@ (800334c <TIM_OC6_SetConfig+0xbc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00b      	beq.n	800330c <TIM_OC6_SetConfig+0x7c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a16      	ldr	r2, [pc, #88]	@ (8003350 <TIM_OC6_SetConfig+0xc0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_OC6_SetConfig+0x7c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a15      	ldr	r2, [pc, #84]	@ (8003354 <TIM_OC6_SetConfig+0xc4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_OC6_SetConfig+0x7c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a14      	ldr	r2, [pc, #80]	@ (8003358 <TIM_OC6_SetConfig+0xc8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d109      	bne.n	8003320 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	029b      	lsls	r3, r3, #10
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40013400 	.word	0x40013400
 8003350:	40014000 	.word	0x40014000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800

0800335c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0201 	bic.w	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 030a 	bic.w	r3, r3, #10
 8003398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	621a      	str	r2, [r3, #32]
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b087      	sub	sp, #28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 0210 	bic.w	r2, r3, #16
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	031b      	lsls	r3, r3, #12
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	f043 0307 	orr.w	r3, r3, #7
 8003440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	609a      	str	r2, [r3, #8]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800346e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	021a      	lsls	r2, r3, #8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	431a      	orrs	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	609a      	str	r2, [r3, #8]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1a      	ldr	r2, [r3, #32]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e065      	b.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d108      	bne.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003532:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1b      	ldr	r2, [pc, #108]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d018      	beq.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356e:	d013      	beq.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a18      	ldr	r2, [pc, #96]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a17      	ldr	r2, [pc, #92]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a12      	ldr	r2, [pc, #72]	@ (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d10c      	bne.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800359e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40014000 	.word	0x40014000

080035e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e073      	b.n	80036e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a19      	ldr	r2, [pc, #100]	@ (80036f4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d11c      	bne.n	80036d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	051b      	lsls	r3, r3, #20
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40013400 	.word	0x40013400

080036fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e042      	b.n	8003794 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fd fa8d 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2224      	movs	r2, #36	@ 0x24
 800372a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fec6 	bl	80044d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fbf7 	bl	8003f40 <UART_SetConfig>
 8003752:	4603      	mov	r3, r0
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e01b      	b.n	8003794 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800376a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800377a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 ff45 	bl	800461c <UART_CheckIdleState>
 8003792:	4603      	mov	r3, r0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	@ 0x28
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d17b      	bne.n	80038ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_UART_Transmit+0x26>
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e074      	b.n	80038b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2221      	movs	r2, #33	@ 0x21
 80037d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fd fb21 	bl	8000e1c <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x6c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003810:	e030      	b.n	8003874 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	2180      	movs	r1, #128	@ 0x80
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 ffa7 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e03d      	b.n	80038b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e007      	b.n	8003862 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1c8      	bne.n	8003812 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	2140      	movs	r1, #64	@ 0x40
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 ff70 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e006      	b.n	80038b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0ba      	sub	sp, #232	@ 0xe8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80038e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80038e6:	4013      	ands	r3, r2
 80038e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80038ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11b      	bne.n	800392c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800390c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d009      	beq.n	800392c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 82e3 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
      }
      return;
 800392a:	e2dd      	b.n	8003ee8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800392c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8123 	beq.w	8003b7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003936:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800393a:	4b8d      	ldr	r3, [pc, #564]	@ (8003b70 <HAL_UART_IRQHandler+0x2b8>)
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003942:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003946:	4b8b      	ldr	r3, [pc, #556]	@ (8003b74 <HAL_UART_IRQHandler+0x2bc>)
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8116 	beq.w	8003b7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d011      	beq.n	8003980 <HAL_UART_IRQHandler+0xc8>
 800395c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d011      	beq.n	80039b0 <HAL_UART_IRQHandler+0xf8>
 800398c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2202      	movs	r2, #2
 800399e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a6:	f043 0204 	orr.w	r2, r3, #4
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d011      	beq.n	80039e0 <HAL_UART_IRQHandler+0x128>
 80039bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2204      	movs	r2, #4
 80039ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d6:	f043 0202 	orr.w	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d017      	beq.n	8003a1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80039fc:	4b5c      	ldr	r3, [pc, #368]	@ (8003b70 <HAL_UART_IRQHandler+0x2b8>)
 80039fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a12:	f043 0208 	orr.w	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d012      	beq.n	8003a4e <HAL_UART_IRQHandler+0x196>
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00c      	beq.n	8003a4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8249 	beq.w	8003eec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d013      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa2:	2b40      	cmp	r3, #64	@ 0x40
 8003aa4:	d005      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d054      	beq.n	8003b5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fec9 	bl	800484a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d146      	bne.n	8003b54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3308      	adds	r3, #8
 8003acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003af2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003af6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1d9      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b22:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <HAL_UART_IRQHandler+0x2c0>)
 8003b24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd fae9 	bl	8001104 <HAL_DMA_Abort_IT>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d019      	beq.n	8003b6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003b46:	4610      	mov	r0, r2
 8003b48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4a:	e00f      	b.n	8003b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9e1 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b52:	e00b      	b.n	8003b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f9dd 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5a:	e007      	b.n	8003b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f9d9 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003b6a:	e1bf      	b.n	8003eec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	bf00      	nop
    return;
 8003b6e:	e1bd      	b.n	8003eec <HAL_UART_IRQHandler+0x634>
 8003b70:	10000001 	.word	0x10000001
 8003b74:	04000120 	.word	0x04000120
 8003b78:	08004917 	.word	0x08004917

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 8153 	bne.w	8003e2c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 814c 	beq.w	8003e2c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8145 	beq.w	8003e2c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb4:	2b40      	cmp	r3, #64	@ 0x40
 8003bb6:	f040 80bb 	bne.w	8003d30 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 818f 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f080 8187 	bcs.w	8003ef0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003be8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 8087 	bne.w	8003d0e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1da      	bne.n	8003c00 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e1      	bne.n	8003c4a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e3      	bne.n	8003c86 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cdc:	f023 0310 	bic.w	r3, r3, #16
 8003ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cf0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e4      	bne.n	8003ccc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd f9a2 	bl	8001052 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8fd 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d2e:	e0df      	b.n	8003ef0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80d1 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003d52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80cc 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d80:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e4      	bne.n	8003d5c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	623b      	str	r3, [r7, #32]
   return(result);
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dba:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e1      	bne.n	8003d92 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0310 	bic.w	r3, r3, #16
 8003df6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	69b9      	ldr	r1, [r7, #24]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	617b      	str	r3, [r7, #20]
   return(result);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e4      	bne.n	8003de2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f87f 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e2a:	e063      	b.n	8003ef4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <HAL_UART_IRQHandler+0x59e>
 8003e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fda2 	bl	8004998 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e54:	e051      	b.n	8003efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d014      	beq.n	8003e8c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d03a      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	4798      	blx	r3
    }
    return;
 8003e8a:	e035      	b.n	8003ef8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <HAL_UART_IRQHandler+0x5f4>
 8003e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fd4c 	bl	8004942 <UART_EndTransmit_IT>
    return;
 8003eaa:	e026      	b.n	8003efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <HAL_UART_IRQHandler+0x614>
 8003eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ebc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fd7b 	bl	80049c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003eca:	e016      	b.n	8003efa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <HAL_UART_IRQHandler+0x642>
 8003ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	da0c      	bge.n	8003efa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fd63 	bl	80049ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ee6:	e008      	b.n	8003efa <HAL_UART_IRQHandler+0x642>
      return;
 8003ee8:	bf00      	nop
 8003eea:	e006      	b.n	8003efa <HAL_UART_IRQHandler+0x642>
    return;
 8003eec:	bf00      	nop
 8003eee:	e004      	b.n	8003efa <HAL_UART_IRQHandler+0x642>
      return;
 8003ef0:	bf00      	nop
 8003ef2:	e002      	b.n	8003efa <HAL_UART_IRQHandler+0x642>
      return;
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <HAL_UART_IRQHandler+0x642>
    return;
 8003ef8:	bf00      	nop
  }
}
 8003efa:	37e8      	adds	r7, #232	@ 0xe8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f44:	b08c      	sub	sp, #48	@ 0x30
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4bab      	ldr	r3, [pc, #684]	@ (800421c <UART_SetConfig+0x2dc>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4aa0      	ldr	r2, [pc, #640]	@ (8004220 <UART_SetConfig+0x2e0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003fb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	f023 010f 	bic.w	r1, r3, #15
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a91      	ldr	r2, [pc, #580]	@ (8004224 <UART_SetConfig+0x2e4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d125      	bne.n	8004030 <UART_SetConfig+0xf0>
 8003fe4:	4b90      	ldr	r3, [pc, #576]	@ (8004228 <UART_SetConfig+0x2e8>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d81a      	bhi.n	8004028 <UART_SetConfig+0xe8>
 8003ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <UART_SetConfig+0xb8>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	08004019 	.word	0x08004019
 8004000:	08004011 	.word	0x08004011
 8004004:	08004021 	.word	0x08004021
 8004008:	2301      	movs	r3, #1
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400e:	e0d6      	b.n	80041be <UART_SetConfig+0x27e>
 8004010:	2302      	movs	r3, #2
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004016:	e0d2      	b.n	80041be <UART_SetConfig+0x27e>
 8004018:	2304      	movs	r3, #4
 800401a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401e:	e0ce      	b.n	80041be <UART_SetConfig+0x27e>
 8004020:	2308      	movs	r3, #8
 8004022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004026:	e0ca      	b.n	80041be <UART_SetConfig+0x27e>
 8004028:	2310      	movs	r3, #16
 800402a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800402e:	e0c6      	b.n	80041be <UART_SetConfig+0x27e>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a7d      	ldr	r2, [pc, #500]	@ (800422c <UART_SetConfig+0x2ec>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d138      	bne.n	80040ac <UART_SetConfig+0x16c>
 800403a:	4b7b      	ldr	r3, [pc, #492]	@ (8004228 <UART_SetConfig+0x2e8>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d82d      	bhi.n	80040a4 <UART_SetConfig+0x164>
 8004048:	a201      	add	r2, pc, #4	@ (adr r2, 8004050 <UART_SetConfig+0x110>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004085 	.word	0x08004085
 8004054:	080040a5 	.word	0x080040a5
 8004058:	080040a5 	.word	0x080040a5
 800405c:	080040a5 	.word	0x080040a5
 8004060:	08004095 	.word	0x08004095
 8004064:	080040a5 	.word	0x080040a5
 8004068:	080040a5 	.word	0x080040a5
 800406c:	080040a5 	.word	0x080040a5
 8004070:	0800408d 	.word	0x0800408d
 8004074:	080040a5 	.word	0x080040a5
 8004078:	080040a5 	.word	0x080040a5
 800407c:	080040a5 	.word	0x080040a5
 8004080:	0800409d 	.word	0x0800409d
 8004084:	2300      	movs	r3, #0
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408a:	e098      	b.n	80041be <UART_SetConfig+0x27e>
 800408c:	2302      	movs	r3, #2
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004092:	e094      	b.n	80041be <UART_SetConfig+0x27e>
 8004094:	2304      	movs	r3, #4
 8004096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800409a:	e090      	b.n	80041be <UART_SetConfig+0x27e>
 800409c:	2308      	movs	r3, #8
 800409e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a2:	e08c      	b.n	80041be <UART_SetConfig+0x27e>
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040aa:	e088      	b.n	80041be <UART_SetConfig+0x27e>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a5f      	ldr	r2, [pc, #380]	@ (8004230 <UART_SetConfig+0x2f0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d125      	bne.n	8004102 <UART_SetConfig+0x1c2>
 80040b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004228 <UART_SetConfig+0x2e8>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040c0:	2b30      	cmp	r3, #48	@ 0x30
 80040c2:	d016      	beq.n	80040f2 <UART_SetConfig+0x1b2>
 80040c4:	2b30      	cmp	r3, #48	@ 0x30
 80040c6:	d818      	bhi.n	80040fa <UART_SetConfig+0x1ba>
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d00a      	beq.n	80040e2 <UART_SetConfig+0x1a2>
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d814      	bhi.n	80040fa <UART_SetConfig+0x1ba>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <UART_SetConfig+0x19a>
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d008      	beq.n	80040ea <UART_SetConfig+0x1aa>
 80040d8:	e00f      	b.n	80040fa <UART_SetConfig+0x1ba>
 80040da:	2300      	movs	r3, #0
 80040dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e0:	e06d      	b.n	80041be <UART_SetConfig+0x27e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e8:	e069      	b.n	80041be <UART_SetConfig+0x27e>
 80040ea:	2304      	movs	r3, #4
 80040ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f0:	e065      	b.n	80041be <UART_SetConfig+0x27e>
 80040f2:	2308      	movs	r3, #8
 80040f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f8:	e061      	b.n	80041be <UART_SetConfig+0x27e>
 80040fa:	2310      	movs	r3, #16
 80040fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004100:	e05d      	b.n	80041be <UART_SetConfig+0x27e>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a4b      	ldr	r2, [pc, #300]	@ (8004234 <UART_SetConfig+0x2f4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d125      	bne.n	8004158 <UART_SetConfig+0x218>
 800410c:	4b46      	ldr	r3, [pc, #280]	@ (8004228 <UART_SetConfig+0x2e8>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004116:	2bc0      	cmp	r3, #192	@ 0xc0
 8004118:	d016      	beq.n	8004148 <UART_SetConfig+0x208>
 800411a:	2bc0      	cmp	r3, #192	@ 0xc0
 800411c:	d818      	bhi.n	8004150 <UART_SetConfig+0x210>
 800411e:	2b80      	cmp	r3, #128	@ 0x80
 8004120:	d00a      	beq.n	8004138 <UART_SetConfig+0x1f8>
 8004122:	2b80      	cmp	r3, #128	@ 0x80
 8004124:	d814      	bhi.n	8004150 <UART_SetConfig+0x210>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <UART_SetConfig+0x1f0>
 800412a:	2b40      	cmp	r3, #64	@ 0x40
 800412c:	d008      	beq.n	8004140 <UART_SetConfig+0x200>
 800412e:	e00f      	b.n	8004150 <UART_SetConfig+0x210>
 8004130:	2300      	movs	r3, #0
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004136:	e042      	b.n	80041be <UART_SetConfig+0x27e>
 8004138:	2302      	movs	r3, #2
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800413e:	e03e      	b.n	80041be <UART_SetConfig+0x27e>
 8004140:	2304      	movs	r3, #4
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004146:	e03a      	b.n	80041be <UART_SetConfig+0x27e>
 8004148:	2308      	movs	r3, #8
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800414e:	e036      	b.n	80041be <UART_SetConfig+0x27e>
 8004150:	2310      	movs	r3, #16
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004156:	e032      	b.n	80041be <UART_SetConfig+0x27e>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a30      	ldr	r2, [pc, #192]	@ (8004220 <UART_SetConfig+0x2e0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d12a      	bne.n	80041b8 <UART_SetConfig+0x278>
 8004162:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <UART_SetConfig+0x2e8>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004168:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800416c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004170:	d01a      	beq.n	80041a8 <UART_SetConfig+0x268>
 8004172:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004176:	d81b      	bhi.n	80041b0 <UART_SetConfig+0x270>
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800417c:	d00c      	beq.n	8004198 <UART_SetConfig+0x258>
 800417e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004182:	d815      	bhi.n	80041b0 <UART_SetConfig+0x270>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <UART_SetConfig+0x250>
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d008      	beq.n	80041a0 <UART_SetConfig+0x260>
 800418e:	e00f      	b.n	80041b0 <UART_SetConfig+0x270>
 8004190:	2300      	movs	r3, #0
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004196:	e012      	b.n	80041be <UART_SetConfig+0x27e>
 8004198:	2302      	movs	r3, #2
 800419a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800419e:	e00e      	b.n	80041be <UART_SetConfig+0x27e>
 80041a0:	2304      	movs	r3, #4
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041a6:	e00a      	b.n	80041be <UART_SetConfig+0x27e>
 80041a8:	2308      	movs	r3, #8
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ae:	e006      	b.n	80041be <UART_SetConfig+0x27e>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041b6:	e002      	b.n	80041be <UART_SetConfig+0x27e>
 80041b8:	2310      	movs	r3, #16
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <UART_SetConfig+0x2e0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	f040 80a8 	bne.w	800431a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d834      	bhi.n	800423c <UART_SetConfig+0x2fc>
 80041d2:	a201      	add	r2, pc, #4	@ (adr r2, 80041d8 <UART_SetConfig+0x298>)
 80041d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	0800423d 	.word	0x0800423d
 80041e0:	08004205 	.word	0x08004205
 80041e4:	0800423d 	.word	0x0800423d
 80041e8:	0800420b 	.word	0x0800420b
 80041ec:	0800423d 	.word	0x0800423d
 80041f0:	0800423d 	.word	0x0800423d
 80041f4:	0800423d 	.word	0x0800423d
 80041f8:	08004213 	.word	0x08004213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7fd fef4 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8004200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004202:	e021      	b.n	8004248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004204:	4b0c      	ldr	r3, [pc, #48]	@ (8004238 <UART_SetConfig+0x2f8>)
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004208:	e01e      	b.n	8004248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420a:	f7fd fe7f 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 800420e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004210:	e01a      	b.n	8004248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004218:	e016      	b.n	8004248 <UART_SetConfig+0x308>
 800421a:	bf00      	nop
 800421c:	cfff69f3 	.word	0xcfff69f3
 8004220:	40008000 	.word	0x40008000
 8004224:	40013800 	.word	0x40013800
 8004228:	40021000 	.word	0x40021000
 800422c:	40004400 	.word	0x40004400
 8004230:	40004800 	.word	0x40004800
 8004234:	40004c00 	.word	0x40004c00
 8004238:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004246:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 812a 	beq.w	80044a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	4a9e      	ldr	r2, [pc, #632]	@ (80044d0 <UART_SetConfig+0x590>)
 8004256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800425a:	461a      	mov	r2, r3
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004262:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	429a      	cmp	r2, r3
 8004272:	d305      	bcc.n	8004280 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004286:	e10d      	b.n	80044a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	2200      	movs	r2, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	60fa      	str	r2, [r7, #12]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	4a8e      	ldr	r2, [pc, #568]	@ (80044d0 <UART_SetConfig+0x590>)
 8004296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800429a:	b29b      	uxth	r3, r3
 800429c:	2200      	movs	r2, #0
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042aa:	f7fb ffb5 	bl	8000218 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	020b      	lsls	r3, r1, #8
 80042c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042c4:	0202      	lsls	r2, r0, #8
 80042c6:	6979      	ldr	r1, [r7, #20]
 80042c8:	6849      	ldr	r1, [r1, #4]
 80042ca:	0849      	lsrs	r1, r1, #1
 80042cc:	2000      	movs	r0, #0
 80042ce:	460c      	mov	r4, r1
 80042d0:	4605      	mov	r5, r0
 80042d2:	eb12 0804 	adds.w	r8, r2, r4
 80042d6:	eb43 0905 	adc.w	r9, r3, r5
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	469a      	mov	sl, r3
 80042e2:	4693      	mov	fp, r2
 80042e4:	4652      	mov	r2, sl
 80042e6:	465b      	mov	r3, fp
 80042e8:	4640      	mov	r0, r8
 80042ea:	4649      	mov	r1, r9
 80042ec:	f7fb ff94 	bl	8000218 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4613      	mov	r3, r2
 80042f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042fe:	d308      	bcc.n	8004312 <UART_SetConfig+0x3d2>
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004306:	d204      	bcs.n	8004312 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e0c8      	b.n	80044a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004318:	e0c4      	b.n	80044a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004322:	d167      	bne.n	80043f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004324:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004328:	2b08      	cmp	r3, #8
 800432a:	d828      	bhi.n	800437e <UART_SetConfig+0x43e>
 800432c:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <UART_SetConfig+0x3f4>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004359 	.word	0x08004359
 8004338:	08004361 	.word	0x08004361
 800433c:	08004369 	.word	0x08004369
 8004340:	0800437f 	.word	0x0800437f
 8004344:	0800436f 	.word	0x0800436f
 8004348:	0800437f 	.word	0x0800437f
 800434c:	0800437f 	.word	0x0800437f
 8004350:	0800437f 	.word	0x0800437f
 8004354:	08004377 	.word	0x08004377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004358:	f7fd fe46 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 800435c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800435e:	e014      	b.n	800438a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004360:	f7fd fe58 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8004364:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004366:	e010      	b.n	800438a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004368:	4b5a      	ldr	r3, [pc, #360]	@ (80044d4 <UART_SetConfig+0x594>)
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800436c:	e00d      	b.n	800438a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436e:	f7fd fdcd 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8004372:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004374:	e009      	b.n	800438a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800437a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800437c:	e005      	b.n	800438a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8089 	beq.w	80044a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	4a4e      	ldr	r2, [pc, #312]	@ (80044d0 <UART_SetConfig+0x590>)
 8004398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800439c:	461a      	mov	r2, r3
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80043a4:	005a      	lsls	r2, r3, #1
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	441a      	add	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	d916      	bls.n	80043ec <UART_SetConfig+0x4ac>
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c4:	d212      	bcs.n	80043ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f023 030f 	bic.w	r3, r3, #15
 80043ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	b29a      	uxth	r2, r3
 80043dc:	8bfb      	ldrh	r3, [r7, #30]
 80043de:	4313      	orrs	r3, r2
 80043e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	8bfa      	ldrh	r2, [r7, #30]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	e05b      	b.n	80044a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043f2:	e057      	b.n	80044a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d828      	bhi.n	800444e <UART_SetConfig+0x50e>
 80043fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004404 <UART_SetConfig+0x4c4>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004429 	.word	0x08004429
 8004408:	08004431 	.word	0x08004431
 800440c:	08004439 	.word	0x08004439
 8004410:	0800444f 	.word	0x0800444f
 8004414:	0800443f 	.word	0x0800443f
 8004418:	0800444f 	.word	0x0800444f
 800441c:	0800444f 	.word	0x0800444f
 8004420:	0800444f 	.word	0x0800444f
 8004424:	08004447 	.word	0x08004447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004428:	f7fd fdde 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 800442c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800442e:	e014      	b.n	800445a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004430:	f7fd fdf0 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8004434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004436:	e010      	b.n	800445a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004438:	4b26      	ldr	r3, [pc, #152]	@ (80044d4 <UART_SetConfig+0x594>)
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800443c:	e00d      	b.n	800445a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443e:	f7fd fd65 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8004442:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004444:	e009      	b.n	800445a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800444c:	e005      	b.n	800445a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004458:	bf00      	nop
    }

    if (pclk != 0U)
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	d021      	beq.n	80044a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <UART_SetConfig+0x590>)
 8004466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800446a:	461a      	mov	r2, r3
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	441a      	add	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d909      	bls.n	800449e <UART_SetConfig+0x55e>
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004490:	d205      	bcs.n	800449e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	b29a      	uxth	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60da      	str	r2, [r3, #12]
 800449c:	e002      	b.n	80044a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2200      	movs	r2, #0
 80044b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80044c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3730      	adds	r7, #48	@ 0x30
 80044c8:	46bd      	mov	sp, r7
 80044ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ce:	bf00      	nop
 80044d0:	08004c70 	.word	0x08004c70
 80044d4:	00f42400 	.word	0x00f42400

080044d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01a      	beq.n	80045ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045d6:	d10a      	bne.n	80045ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b098      	sub	sp, #96	@ 0x60
 8004620:	af02      	add	r7, sp, #8
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800462c:	f7fc fbf6 	bl	8000e1c <HAL_GetTick>
 8004630:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b08      	cmp	r3, #8
 800463e:	d12f      	bne.n	80046a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004648:	2200      	movs	r2, #0
 800464a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f88e 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d022      	beq.n	80046a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800466e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004678:	647b      	str	r3, [r7, #68]	@ 0x44
 800467a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800467e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e6      	bne.n	800465a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e063      	b.n	8004768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d149      	bne.n	8004742 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b6:	2200      	movs	r2, #0
 80046b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f857 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03c      	beq.n	8004742 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	623b      	str	r3, [r7, #32]
   return(result);
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e6      	bne.n	80046c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3308      	adds	r3, #8
 8004700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60fb      	str	r3, [r7, #12]
   return(result);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3308      	adds	r3, #8
 8004718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800471a:	61fa      	str	r2, [r7, #28]
 800471c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	617b      	str	r3, [r7, #20]
   return(result);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e012      	b.n	8004768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3758      	adds	r7, #88	@ 0x58
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004780:	e04f      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d04b      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fc fb47 	bl	8000e1c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e04e      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d037      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0xb2>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b80      	cmp	r3, #128	@ 0x80
 80047b6:	d034      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0xb2>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b40      	cmp	r3, #64	@ 0x40
 80047bc:	d031      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d110      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2208      	movs	r2, #8
 80047d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f838 	bl	800484a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2208      	movs	r2, #8
 80047de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e029      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047fc:	d111      	bne.n	8004822 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f81e 	bl	800484a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e00f      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4013      	ands	r3, r2
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	429a      	cmp	r2, r3
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	429a      	cmp	r2, r3
 800483e:	d0a0      	beq.n	8004782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800484a:	b480      	push	{r7}
 800484c:	b095      	sub	sp, #84	@ 0x54
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004862:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004870:	643b      	str	r3, [r7, #64]	@ 0x40
 8004872:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004876:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e6      	bne.n	8004852 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	61fb      	str	r3, [r7, #28]
   return(result);
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e3      	bne.n	8004884 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d118      	bne.n	80048f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f023 0310 	bic.w	r3, r3, #16
 80048d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6979      	ldr	r1, [r7, #20]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	613b      	str	r3, [r7, #16]
   return(result);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e6      	bne.n	80048c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800490a:	bf00      	nop
 800490c:	3754      	adds	r7, #84	@ 0x54
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff faed 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b088      	sub	sp, #32
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	60bb      	str	r3, [r7, #8]
   return(result);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6979      	ldr	r1, [r7, #20]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	613b      	str	r3, [r7, #16]
   return(result);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e6      	bne.n	800494a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fab8 	bl	8003f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004990:	bf00      	nop
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_UARTEx_DisableFifoMode+0x16>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e027      	b.n	8004a3a <HAL_UARTEx_DisableFifoMode+0x66>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2224      	movs	r2, #36	@ 0x24
 80049f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e02d      	b.n	8004aba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2224      	movs	r2, #36	@ 0x24
 8004a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f850 	bl	8004b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e02d      	b.n	8004b36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2224      	movs	r2, #36	@ 0x24
 8004ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f812 	bl	8004b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d108      	bne.n	8004b62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b60:	e031      	b.n	8004bc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b62:	2308      	movs	r3, #8
 8004b64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b66:	2308      	movs	r3, #8
 8004b68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	0e5b      	lsrs	r3, r3, #25
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	0f5b      	lsrs	r3, r3, #29
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b8a:	7bbb      	ldrb	r3, [r7, #14]
 8004b8c:	7b3a      	ldrb	r2, [r7, #12]
 8004b8e:	4911      	ldr	r1, [pc, #68]	@ (8004bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8004b90:	5c8a      	ldrb	r2, [r1, r2]
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b96:	7b3a      	ldrb	r2, [r7, #12]
 8004b98:	490f      	ldr	r1, [pc, #60]	@ (8004bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8004b9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	7b7a      	ldrb	r2, [r7, #13]
 8004bac:	4909      	ldr	r1, [pc, #36]	@ (8004bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8004bae:	5c8a      	ldrb	r2, [r1, r2]
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bb4:	7b7a      	ldrb	r2, [r7, #13]
 8004bb6:	4908      	ldr	r1, [pc, #32]	@ (8004bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8004bb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bba:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	08004c88 	.word	0x08004c88
 8004bd8:	08004c90 	.word	0x08004c90

08004bdc <memset>:
 8004bdc:	4402      	add	r2, r0
 8004bde:	4603      	mov	r3, r0
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4d0d      	ldr	r5, [pc, #52]	@ (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 f818 	bl	8004c34 <_init>
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2600      	movs	r6, #0
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004ca0 	.word	0x08004ca0
 8004c28:	08004ca0 	.word	0x08004ca0
 8004c2c:	08004ca0 	.word	0x08004ca0
 8004c30:	08004ca4 	.word	0x08004ca4

08004c34 <_init>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr

08004c40 <_fini>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr
