
tp4_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800547c  0800547c  0000647c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054bc  080054bc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080054bc  080054bc  000064bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054c4  080054c4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c4  080054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054c8  080054c8  000064c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080054cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080054d8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080054d8  0000710c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cb4  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b02  00000000  00000000  0001acf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2f  00000000  00000000  0001e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e10b  00000000  00000000  0001f61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015293  00000000  00000000  0003d72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c24ca  00000000  00000000  000529bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114e87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d8  00000000  00000000  00114ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  001196a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005464 	.word	0x08005464

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005464 	.word	0x08005464

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b96a 	b.w	8000ce0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14e      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a30:	4694      	mov	ip, r2
 8000a32:	458c      	cmp	ip, r1
 8000a34:	4686      	mov	lr, r0
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	d962      	bls.n	8000b02 <__udivmoddi4+0xde>
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0320 	rsb	r3, r2, #32
 8000a42:	4091      	lsls	r1, r2
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a56:	fa1f f68c 	uxth.w	r6, ip
 8000a5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a62:	fb07 1114 	mls	r1, r7, r4, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb04 f106 	mul.w	r1, r4, r6
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a7a:	f080 8112 	bcs.w	8000ca2 <__udivmoddi4+0x27e>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 810f 	bls.w	8000ca2 <__udivmoddi4+0x27e>
 8000a84:	3c02      	subs	r4, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a59      	subs	r1, r3, r1
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a92:	fb07 1110 	mls	r1, r7, r0, r1
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f606 	mul.w	r6, r0, r6
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x94>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aaa:	f080 80fc 	bcs.w	8000ca6 <__udivmoddi4+0x282>
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	f240 80f9 	bls.w	8000ca6 <__udivmoddi4+0x282>
 8000ab4:	4463      	add	r3, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	1b9b      	subs	r3, r3, r6
 8000aba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000abe:	2100      	movs	r1, #0
 8000ac0:	b11d      	cbz	r5, 8000aca <__udivmoddi4+0xa6>
 8000ac2:	40d3      	lsrs	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d905      	bls.n	8000ade <__udivmoddi4+0xba>
 8000ad2:	b10d      	cbz	r5, 8000ad8 <__udivmoddi4+0xb4>
 8000ad4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4608      	mov	r0, r1
 8000adc:	e7f5      	b.n	8000aca <__udivmoddi4+0xa6>
 8000ade:	fab3 f183 	clz	r1, r3
 8000ae2:	2900      	cmp	r1, #0
 8000ae4:	d146      	bne.n	8000b74 <__udivmoddi4+0x150>
 8000ae6:	42a3      	cmp	r3, r4
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xcc>
 8000aea:	4290      	cmp	r0, r2
 8000aec:	f0c0 80f0 	bcc.w	8000cd0 <__udivmoddi4+0x2ac>
 8000af0:	1a86      	subs	r6, r0, r2
 8000af2:	eb64 0303 	sbc.w	r3, r4, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d0e6      	beq.n	8000aca <__udivmoddi4+0xa6>
 8000afc:	e9c5 6300 	strd	r6, r3, [r5]
 8000b00:	e7e3      	b.n	8000aca <__udivmoddi4+0xa6>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	f040 8090 	bne.w	8000c28 <__udivmoddi4+0x204>
 8000b08:	eba1 040c 	sub.w	r4, r1, ip
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	fa1f f78c 	uxth.w	r7, ip
 8000b14:	2101      	movs	r1, #1
 8000b16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b26:	fb07 f006 	mul.w	r0, r7, r6
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x11c>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x11a>
 8000b38:	4298      	cmp	r0, r3
 8000b3a:	f200 80cd 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b3e:	4626      	mov	r6, r4
 8000b40:	1a1c      	subs	r4, r3, r0
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b52:	fb00 f707 	mul.w	r7, r0, r7
 8000b56:	429f      	cmp	r7, r3
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x148>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x146>
 8000b64:	429f      	cmp	r7, r3
 8000b66:	f200 80b0 	bhi.w	8000cca <__udivmoddi4+0x2a6>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	1bdb      	subs	r3, r3, r7
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	e7a5      	b.n	8000ac0 <__udivmoddi4+0x9c>
 8000b74:	f1c1 0620 	rsb	r6, r1, #32
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b84:	fa04 f301 	lsl.w	r3, r4, r1
 8000b88:	ea43 030c 	orr.w	r3, r3, ip
 8000b8c:	40f4      	lsrs	r4, r6
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	0c38      	lsrs	r0, r7, #16
 8000b94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b98:	fbb4 fef0 	udiv	lr, r4, r0
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ba4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bac:	45a1      	cmp	r9, r4
 8000bae:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb2:	d90a      	bls.n	8000bca <__udivmoddi4+0x1a6>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bba:	f080 8084 	bcs.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bbe:	45a1      	cmp	r9, r4
 8000bc0:	f240 8081 	bls.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bc8:	443c      	add	r4, r7
 8000bca:	eba4 0409 	sub.w	r4, r4, r9
 8000bce:	fa1f f983 	uxth.w	r9, r3
 8000bd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	d907      	bls.n	8000bf6 <__udivmoddi4+0x1d2>
 8000be6:	193c      	adds	r4, r7, r4
 8000be8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bec:	d267      	bcs.n	8000cbe <__udivmoddi4+0x29a>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0x29a>
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	443c      	add	r4, r7
 8000bf6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bfe:	eba4 040c 	sub.w	r4, r4, ip
 8000c02:	429c      	cmp	r4, r3
 8000c04:	46ce      	mov	lr, r9
 8000c06:	469c      	mov	ip, r3
 8000c08:	d351      	bcc.n	8000cae <__udivmoddi4+0x28a>
 8000c0a:	d04e      	beq.n	8000caa <__udivmoddi4+0x286>
 8000c0c:	b155      	cbz	r5, 8000c24 <__udivmoddi4+0x200>
 8000c0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c12:	eb64 040c 	sbc.w	r4, r4, ip
 8000c16:	fa04 f606 	lsl.w	r6, r4, r6
 8000c1a:	40cb      	lsrs	r3, r1
 8000c1c:	431e      	orrs	r6, r3
 8000c1e:	40cc      	lsrs	r4, r1
 8000c20:	e9c5 6400 	strd	r6, r4, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	e750      	b.n	8000aca <__udivmoddi4+0xa6>
 8000c28:	f1c2 0320 	rsb	r3, r2, #32
 8000c2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	fa24 f303 	lsr.w	r3, r4, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	430c      	orrs	r4, r1
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c44:	fa1f f78c 	uxth.w	r7, ip
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c50:	0c23      	lsrs	r3, r4, #16
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb00 f107 	mul.w	r1, r0, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x24c>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c66:	d22c      	bcs.n	8000cc2 <__udivmoddi4+0x29e>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d92a      	bls.n	8000cc2 <__udivmoddi4+0x29e>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c78:	fb08 3311 	mls	r3, r8, r1, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb01 f307 	mul.w	r3, r1, r7
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x276>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c90:	d213      	bcs.n	8000cba <__udivmoddi4+0x296>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d911      	bls.n	8000cba <__udivmoddi4+0x296>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	1ae4      	subs	r4, r4, r3
 8000c9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca0:	e739      	b.n	8000b16 <__udivmoddi4+0xf2>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	e6f0      	b.n	8000a88 <__udivmoddi4+0x64>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e706      	b.n	8000ab8 <__udivmoddi4+0x94>
 8000caa:	45c8      	cmp	r8, r9
 8000cac:	d2ae      	bcs.n	8000c0c <__udivmoddi4+0x1e8>
 8000cae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cb6:	3801      	subs	r0, #1
 8000cb8:	e7a8      	b.n	8000c0c <__udivmoddi4+0x1e8>
 8000cba:	4631      	mov	r1, r6
 8000cbc:	e7ed      	b.n	8000c9a <__udivmoddi4+0x276>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	e799      	b.n	8000bf6 <__udivmoddi4+0x1d2>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e7d4      	b.n	8000c70 <__udivmoddi4+0x24c>
 8000cc6:	46d6      	mov	lr, sl
 8000cc8:	e77f      	b.n	8000bca <__udivmoddi4+0x1a6>
 8000cca:	4463      	add	r3, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	e74d      	b.n	8000b6c <__udivmoddi4+0x148>
 8000cd0:	4606      	mov	r6, r0
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e70f      	b.n	8000af8 <__udivmoddi4+0xd4>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	e730      	b.n	8000b40 <__udivmoddi4+0x11c>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_GPIO_Init+0x74>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a16      	ldr	r2, [pc, #88]	@ (8000d58 <MX_GPIO_Init+0x74>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_GPIO_Init+0x74>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_GPIO_Init+0x74>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <MX_GPIO_Init+0x74>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <MX_GPIO_Init+0x74>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2140      	movs	r1, #64	@ 0x40
 8000d2e:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <MX_GPIO_Init+0x78>)
 8000d30:	f000 ffea 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dir_Pin;
 8000d34:	2340      	movs	r3, #64	@ 0x40
 8000d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dir_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <MX_GPIO_Init+0x78>)
 8000d4c:	f000 fe5a 	bl	8001a04 <HAL_GPIO_Init>

}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000400 	.word	0x48000400

08000d60 <calcul_checksum1>:

#include "herculex.h"


uint8_t calcul_checksum1(uint8_t size, uint8_t *trame)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
	uint8_t checksum1;
	checksum1=size ^ trame[3] ^ trame[4];
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3303      	adds	r3, #3
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4053      	eors	r3, r2
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4053      	eors	r3, r2
 8000d80:	73fb      	strb	r3, [r7, #15]
	for(int i=7;i<size;i++)
 8000d82:	2307      	movs	r3, #7
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	e009      	b.n	8000d9c <calcul_checksum1+0x3c>
	{
		checksum1=checksum1 ^ trame[i];
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	4053      	eors	r3, r2
 8000d94:	73fb      	strb	r3, [r7, #15]
	for(int i=7;i<size;i++)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf1      	blt.n	8000d88 <calcul_checksum1+0x28>
	}
	checksum1=checksum1 & 0xfe;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
	return checksum1;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <calcul_checksum2>:
uint8_t calcul_checksum2(uint8_t checksum1)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b085      	sub	sp, #20
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
	uint8_t checksum2;
	checksum2=(~checksum1) & 0xfe;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f023 0301 	bic.w	r3, r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
	return checksum2;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <send_trame>:
void send_trame(uint8_t id,uint8_t size, uint8_t *trame)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	603a      	str	r2, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	460b      	mov	r3, r1
 8000dee:	71bb      	strb	r3, [r7, #6]
	trame[3]=id;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	3303      	adds	r3, #3
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	701a      	strb	r2, [r3, #0]
	trame[5]=calcul_checksum1(size,trame);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	1d5c      	adds	r4, r3, #5
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffad 	bl	8000d60 <calcul_checksum1>
 8000e06:	4603      	mov	r3, r0
 8000e08:	7023      	strb	r3, [r4, #0]
	trame[6]=calcul_checksum2(trame[5]);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	3305      	adds	r3, #5
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	1d9c      	adds	r4, r3, #6
 8000e14:	4610      	mov	r0, r2
 8000e16:	f7ff ffd0 	bl	8000dba <calcul_checksum2>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2,trame,size, HAL_MAX_DELAY);
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	6839      	ldr	r1, [r7, #0]
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <send_trame+0x58>)
 8000e2a:	f003 f8cf 	bl	8003fcc <HAL_UART_Transmit>
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000074 	.word	0x20000074

08000e3c <send_torque_on>:
	uint8_t led_control[10]={0xff,0xff,0x0a,id,0x03,0xc0,0x3e,0x35,0x01,color};
	send_trame(id,0x0a,led_control);

}
void send_torque_on(uint8_t id)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	uint8_t torque_control[11]={0xff,0xff,0x0a,id,0x03,0xa0,0x5e,0x34,0x01,0x60};
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	f8c3 2007 	str.w	r2, [r3, #7]
 8000e54:	23ff      	movs	r3, #255	@ 0xff
 8000e56:	733b      	strb	r3, [r7, #12]
 8000e58:	23ff      	movs	r3, #255	@ 0xff
 8000e5a:	737b      	strb	r3, [r7, #13]
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	73bb      	strb	r3, [r7, #14]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	2303      	movs	r3, #3
 8000e66:	743b      	strb	r3, [r7, #16]
 8000e68:	23a0      	movs	r3, #160	@ 0xa0
 8000e6a:	747b      	strb	r3, [r7, #17]
 8000e6c:	235e      	movs	r3, #94	@ 0x5e
 8000e6e:	74bb      	strb	r3, [r7, #18]
 8000e70:	2334      	movs	r3, #52	@ 0x34
 8000e72:	74fb      	strb	r3, [r7, #19]
 8000e74:	2301      	movs	r3, #1
 8000e76:	753b      	strb	r3, [r7, #20]
 8000e78:	2360      	movs	r3, #96	@ 0x60
 8000e7a:	757b      	strb	r3, [r7, #21]
	send_trame(id,0x0b,torque_control);
 8000e7c:	f107 020c 	add.w	r2, r7, #12
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	210b      	movs	r1, #11
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ffab 	bl	8000de0 <send_trame>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <send_pos>:
void send_pos(uint8_t id,uint16_t pos_16b)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	71fb      	strb	r3, [r7, #7]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	80bb      	strh	r3, [r7, #4]
	uint8_t position[2];
	position[0]=pos_16b>>8;
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	753b      	strb	r3, [r7, #20]
	position[1]=(uint8_t)pos_16b;
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	757b      	strb	r3, [r7, #21]
	uint8_t l_jog[12]={0xff,0xff,0x0c,0xfd,0x05,0x32,0xcc,position[1],position[0],0x04,0xfd,0x3c};
 8000eb2:	23ff      	movs	r3, #255	@ 0xff
 8000eb4:	723b      	strb	r3, [r7, #8]
 8000eb6:	23ff      	movs	r3, #255	@ 0xff
 8000eb8:	727b      	strb	r3, [r7, #9]
 8000eba:	230c      	movs	r3, #12
 8000ebc:	72bb      	strb	r3, [r7, #10]
 8000ebe:	23fd      	movs	r3, #253	@ 0xfd
 8000ec0:	72fb      	strb	r3, [r7, #11]
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	733b      	strb	r3, [r7, #12]
 8000ec6:	2332      	movs	r3, #50	@ 0x32
 8000ec8:	737b      	strb	r3, [r7, #13]
 8000eca:	23cc      	movs	r3, #204	@ 0xcc
 8000ecc:	73bb      	strb	r3, [r7, #14]
 8000ece:	7d7b      	ldrb	r3, [r7, #21]
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	7d3b      	ldrb	r3, [r7, #20]
 8000ed4:	743b      	strb	r3, [r7, #16]
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	747b      	strb	r3, [r7, #17]
 8000eda:	23fd      	movs	r3, #253	@ 0xfd
 8000edc:	74bb      	strb	r3, [r7, #18]
 8000ede:	233c      	movs	r3, #60	@ 0x3c
 8000ee0:	74fb      	strb	r3, [r7, #19]
	send_trame(id,0x0c,l_jog);
 8000ee2:	f107 0208 	add.w	r2, r7, #8
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	210c      	movs	r1, #12
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff78 	bl	8000de0 <send_trame>
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <send_angle>:
void send_angle(uint8_t id, float angle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	ed87 0a00 	vstr	s0, [r7]
 8000f04:	71fb      	strb	r3, [r7, #7]
	  uint16_t pos=0x200+(angle/0.325);
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f7ff faea 	bl	80004e0 <__aeabi_f2d>
 8000f0c:	a310      	add	r3, pc, #64	@ (adr r3, 8000f50 <send_angle+0x58>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fc67 	bl	80007e4 <__aeabi_ddiv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8000f26:	f7ff f97d 	bl	8000224 <__adddf3>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f7ff fd3f 	bl	80009b4 <__aeabi_d2uiz>
 8000f36:	4603      	mov	r3, r0
 8000f38:	81fb      	strh	r3, [r7, #14]
	  send_pos(id,pos);
 8000f3a:	89fa      	ldrh	r2, [r7, #14]
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffa6 	bl	8000e92 <send_pos>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	cccccccd 	.word	0xcccccccd
 8000f54:	3fd4cccc 	.word	0x3fd4cccc

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fb11 	bl	8001582 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f81e 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f7ff febe 	bl	8000ce4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f68:	f000 fa36 	bl	80013d8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f6c:	f000 f92a 	bl	80011c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000f70:	2100      	movs	r1, #0
 8000f72:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <main+0x40>)
 8000f74:	f001 ff6a 	bl	8002e4c <HAL_TIM_PWM_Start>
  PWM_write(&htim1, TIM_CHANNEL_1, 0.75);
 8000f78:	eeb6 0a08 	vmov.f32	s0, #104	@ 0x3f400000  0.750
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <main+0x40>)
 8000f80:	f000 f85f 	bl	8001042 <PWM_write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  send_torque_on(0xfd);
 8000f84:	20fd      	movs	r0, #253	@ 0xfd
 8000f86:	f7ff ff59 	bl	8000e3c <send_torque_on>
  send_angle(0xfd, -120.0);
 8000f8a:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8000f9c <main+0x44>
 8000f8e:	20fd      	movs	r0, #253	@ 0xfd
 8000f90:	f7ff ffb2 	bl	8000ef8 <send_angle>
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <main+0x3c>
 8000f98:	20000028 	.word	0x20000028
 8000f9c:	c2f00000 	.word	0xc2f00000

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	@ 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	2238      	movs	r2, #56	@ 0x38
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 fa2c 	bl	800540c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 feb8 	bl	8001d38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd2:	2340      	movs	r3, #64	@ 0x40
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fe2:	2355      	movs	r3, #85	@ 0x55
 8000fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 ff52 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001002:	f000 f818 	bl	8001036 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	2303      	movs	r3, #3
 800100c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2104      	movs	r1, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fa50 	bl	80024c4 <HAL_RCC_ClockConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800102a:	f000 f804 	bl	8001036 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3750      	adds	r7, #80	@ 0x50
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103a:	b672      	cpsid	i
}
 800103c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103e:	bf00      	nop
 8001040:	e7fd      	b.n	800103e <Error_Handler+0x8>

08001042 <PWM_write>:
 */
#include "pwm_api.h"


void PWM_write(TIM_HandleTypeDef *htim, uint32_t pwm_channel, float duty_cycle)
{
 8001042:	b480      	push	{r7}
 8001044:	b087      	sub	sp, #28
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(htim);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001056:	617b      	str	r3, [r7, #20]
    uint32_t CRR = duty_cycle*(ARR+1)-1;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001064:	edd7 7a01 	vldr	s15, [r7, #4]
 8001068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001070:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001078:	ee17 3a90 	vmov	r3, s15
 800107c:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d104      	bne.n	800108e <PWM_write+0x4c>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800108c:	e023      	b.n	80010d6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d104      	bne.n	800109e <PWM_write+0x5c>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800109c:	e01b      	b.n	80010d6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d104      	bne.n	80010ae <PWM_write+0x6c>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80010ac:	e013      	b.n	80010d6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2b0c      	cmp	r3, #12
 80010b2:	d104      	bne.n	80010be <PWM_write+0x7c>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80010bc:	e00b      	b.n	80010d6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	d104      	bne.n	80010ce <PWM_write+0x8c>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80010cc:	e003      	b.n	80010d6 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80010d6:	bf00      	nop
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <HAL_MspInit+0x44>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <HAL_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_MspInit+0x44>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_MspInit+0x44>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001106:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <HAL_MspInit+0x44>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110c:	6593      	str	r3, [r2, #88]	@ 0x58
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_MspInit+0x44>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800111a:	f000 feb1 	bl	8001e80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <NMI_Handler+0x4>

08001134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <MemManage_Handler+0x4>

08001144 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <UsageFault_Handler+0x4>

08001154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001182:	f000 fa51 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <USART2_IRQHandler+0x10>)
 8001192:	f002 ffa9 	bl	80040e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000074 	.word	0x20000074

080011a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b09c      	sub	sp, #112	@ 0x70
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2234      	movs	r2, #52	@ 0x34
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 f904 	bl	800540c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001204:	4b46      	ldr	r3, [pc, #280]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001206:	4a47      	ldr	r2, [pc, #284]	@ (8001324 <MX_TIM1_Init+0x160>)
 8001208:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800120a:	4b45      	ldr	r3, [pc, #276]	@ (8001320 <MX_TIM1_Init+0x15c>)
 800120c:	2201      	movs	r2, #1
 800120e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8500;
 8001216:	4b42      	ldr	r3, [pc, #264]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001218:	f242 1234 	movw	r2, #8500	@ 0x2134
 800121c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001224:	4b3e      	ldr	r3, [pc, #248]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <MX_TIM1_Init+0x15c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001230:	483b      	ldr	r0, [pc, #236]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001232:	f001 fd53 	bl	8002cdc <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800123c:	f7ff fefb 	bl	8001036 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001244:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001246:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800124a:	4619      	mov	r1, r3
 800124c:	4834      	ldr	r0, [pc, #208]	@ (8001320 <MX_TIM1_Init+0x15c>)
 800124e:	f002 f811 	bl	8003274 <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001258:	f7ff feed 	bl	8001036 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800125c:	4830      	ldr	r0, [pc, #192]	@ (8001320 <MX_TIM1_Init+0x15c>)
 800125e:	f001 fd94 	bl	8002d8a <HAL_TIM_PWM_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001268:	f7ff fee5 	bl	8001036 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001278:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800127c:	4619      	mov	r1, r3
 800127e:	4828      	ldr	r0, [pc, #160]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001280:	f002 fd46 	bl	8003d10 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800128a:	f7ff fed4 	bl	8001036 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128e:	2360      	movs	r3, #96	@ 0x60
 8001290:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 8001292:	f241 0399 	movw	r3, #4249	@ 0x1099
 8001296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	481a      	ldr	r0, [pc, #104]	@ (8001320 <MX_TIM1_Init+0x15c>)
 80012b6:	f001 fec9 	bl	800304c <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80012c0:	f7ff feb9 	bl	8001036 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4807      	ldr	r0, [pc, #28]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001302:	f002 fd87 	bl	8003e14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800130c:	f7ff fe93 	bl	8001036 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <MX_TIM1_Init+0x15c>)
 8001312:	f000 f829 	bl	8001368 <HAL_TIM_MspPostInit>

}
 8001316:	bf00      	nop
 8001318:	3770      	adds	r7, #112	@ 0x70
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000028 	.word	0x20000028
 8001324:	40012c00 	.word	0x40012c00

08001328 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <HAL_TIM_Base_MspInit+0x38>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10b      	bne.n	8001352 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_TIM_Base_MspInit+0x3c>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133e:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <HAL_TIM_Base_MspInit+0x3c>)
 8001340:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001344:	6613      	str	r3, [r2, #96]	@ 0x60
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <HAL_TIM_Base_MspInit+0x3c>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40012c00 	.word	0x40012c00
 8001364:	40021000 	.word	0x40021000

08001368 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <HAL_TIM_MspPostInit+0x68>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d11d      	bne.n	80013c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_TIM_MspPostInit+0x6c>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <HAL_TIM_MspPostInit+0x6c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_TIM_MspPostInit+0x6c>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013b4:	2306      	movs	r3, #6
 80013b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c2:	f000 fb1f 	bl	8001a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40012c00 	.word	0x40012c00
 80013d4:	40021000 	.word	0x40021000

080013d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013de:	4a23      	ldr	r2, [pc, #140]	@ (800146c <MX_USART2_UART_Init+0x94>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141a:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001420:	4811      	ldr	r0, [pc, #68]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001422:	f002 fd83 	bl	8003f2c <HAL_UART_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800142c:	f7ff fe03 	bl	8001036 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001430:	2100      	movs	r1, #0
 8001432:	480d      	ldr	r0, [pc, #52]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001434:	f003 ff1f 	bl	8005276 <HAL_UARTEx_SetTxFifoThreshold>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800143e:	f7ff fdfa 	bl	8001036 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001442:	2100      	movs	r1, #0
 8001444:	4808      	ldr	r0, [pc, #32]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001446:	f003 ff54 	bl	80052f2 <HAL_UARTEx_SetRxFifoThreshold>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001450:	f7ff fdf1 	bl	8001036 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001456:	f003 fed5 	bl	8005204 <HAL_UARTEx_DisableFifoMode>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001460:	f7ff fde9 	bl	8001036 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000074 	.word	0x20000074
 800146c:	40004400 	.word	0x40004400

08001470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09a      	sub	sp, #104	@ 0x68
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	2244      	movs	r2, #68	@ 0x44
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f003 ffbb 	bl	800540c <memset>
  if(uartHandle->Instance==USART2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <HAL_UART_MspInit+0xb8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d13e      	bne.n	800151e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fa25 	bl	80028fc <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b8:	f7ff fdbd 	bl	8001036 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_UART_MspInit+0xbc>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	4a1a      	ldr	r2, [pc, #104]	@ (800152c <HAL_UART_MspInit+0xbc>)
 80014c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <HAL_UART_MspInit+0xbc>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_UART_MspInit+0xbc>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <HAL_UART_MspInit+0xbc>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_UART_MspInit+0xbc>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80014ec:	230c      	movs	r3, #12
 80014ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fc:	2307      	movs	r3, #7
 80014fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150a:	f000 fa7b 	bl	8001a04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2026      	movs	r0, #38	@ 0x26
 8001514:	f000 f981 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001518:	2026      	movs	r0, #38	@ 0x26
 800151a:	f000 f998 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3768      	adds	r7, #104	@ 0x68
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40004400 	.word	0x40004400
 800152c:	40021000 	.word	0x40021000

08001530 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8001530:	480d      	ldr	r0, [pc, #52]	@ (8001568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001532:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001534:	f7ff fe34 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <LoopForever+0x6>)
  ldr r1, =_edata
 800153a:	490d      	ldr	r1, [pc, #52]	@ (8001570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800153c:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <LoopForever+0xe>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001550:	4c0a      	ldr	r4, [pc, #40]	@ (800157c <LoopForever+0x16>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f003 ff5d 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001562:	f7ff fcf9 	bl	8000f58 <main>

08001566 <LoopForever>:

LoopForever:
    b LoopForever
 8001566:	e7fe      	b.n	8001566 <LoopForever>
   ldr   r0, =_estack
 8001568:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001574:	080054cc 	.word	0x080054cc
  ldr r2, =_sbss
 8001578:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800157c:	2000010c 	.word	0x2000010c

08001580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC1_2_IRQHandler>

08001582 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158c:	2003      	movs	r0, #3
 800158e:	f000 f939 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f80e 	bl	80015b4 <HAL_InitTick>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e001      	b.n	80015a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015a4:	f7ff fd9e 	bl	80010e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a8:	79fb      	ldrb	r3, [r7, #7]

}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_InitTick+0x68>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d022      	beq.n	800160e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_InitTick+0x6c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <HAL_InitTick+0x68>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f944 	bl	800186a <HAL_SYSTICK_Config>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10f      	bne.n	8001608 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	d809      	bhi.n	8001602 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ee:	2200      	movs	r2, #0
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	f04f 30ff 	mov.w	r0, #4294967295
 80015f6:	f000 f910 	bl	800181a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <HAL_InitTick+0x70>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e007      	b.n	8001612 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e004      	b.n	8001612 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e001      	b.n	8001612 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000008 	.word	0x20000008
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_IncTick+0x1c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_IncTick+0x20>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4413      	add	r3, r2
 8001636:	4a03      	ldr	r2, [pc, #12]	@ (8001644 <HAL_IncTick+0x1c>)
 8001638:	6013      	str	r3, [r2, #0]
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	20000108 	.word	0x20000108
 8001648:	20000008 	.word	0x20000008

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000108 	.word	0x20000108

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	@ (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	@ (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	@ 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff29 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff40 	bl	80016ac <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff90 	bl	8001758 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5f 	bl	8001704 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff33 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffa4 	bl	80017c0 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d005      	beq.n	80018a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2204      	movs	r2, #4
 800189e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e037      	b.n	8001916 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020e 	bic.w	r2, r2, #14
 80018b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f003 021f 	and.w	r2, r3, #31
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00c      	beq.n	8001916 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001906:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800190a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001914:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d00d      	beq.n	8001968 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e047      	b.n	80019f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 020e 	bic.w	r2, r2, #14
 8001976:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001992:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001996:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	2101      	movs	r1, #1
 80019a6:	fa01 f202 	lsl.w	r2, r1, r2
 80019aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
    }
  }
  return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a12:	e15a      	b.n	8001cca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 814c 	beq.w	8001cc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d005      	beq.n	8001a44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f003 0201 	and.w	r2, r3, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d017      	beq.n	8001ae2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d123      	bne.n	8001b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	6939      	ldr	r1, [r7, #16]
 8001b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0203 	and.w	r2, r3, #3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80a6 	beq.w	8001cc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b78:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce8 <HAL_GPIO_Init+0x2e4>)
 8001b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce8 <HAL_GPIO_Init+0x2e4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b84:	4b58      	ldr	r3, [pc, #352]	@ (8001ce8 <HAL_GPIO_Init+0x2e4>)
 8001b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b90:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_GPIO_Init+0x2e8>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bba:	d01f      	beq.n	8001bfc <HAL_GPIO_Init+0x1f8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d019      	beq.n	8001bf8 <HAL_GPIO_Init+0x1f4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf4 <HAL_GPIO_Init+0x2f0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d013      	beq.n	8001bf4 <HAL_GPIO_Init+0x1f0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a4a      	ldr	r2, [pc, #296]	@ (8001cf8 <HAL_GPIO_Init+0x2f4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_GPIO_Init+0x1ec>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a49      	ldr	r2, [pc, #292]	@ (8001cfc <HAL_GPIO_Init+0x2f8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d007      	beq.n	8001bec <HAL_GPIO_Init+0x1e8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a48      	ldr	r2, [pc, #288]	@ (8001d00 <HAL_GPIO_Init+0x2fc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001be4:	2305      	movs	r3, #5
 8001be6:	e00a      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001be8:	2306      	movs	r3, #6
 8001bea:	e008      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bec:	2304      	movs	r3, #4
 8001bee:	e006      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e004      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e002      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	f002 0203 	and.w	r2, r2, #3
 8001c04:	0092      	lsls	r2, r2, #2
 8001c06:	4093      	lsls	r3, r2
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0e:	4937      	ldr	r1, [pc, #220]	@ (8001cec <HAL_GPIO_Init+0x2e8>)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c1c:	4b39      	ldr	r3, [pc, #228]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c46:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c6a:	4a26      	ldr	r2, [pc, #152]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c94:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cbe:	4a11      	ldr	r2, [pc, #68]	@ (8001d04 <HAL_GPIO_Init+0x300>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f ae9d 	bne.w	8001a14 <HAL_GPIO_Init+0x10>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48000800 	.word	0x48000800
 8001cf8:	48000c00 	.word	0x48000c00
 8001cfc:	48001000 	.word	0x48001000
 8001d00:	48001400 	.word	0x48001400
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d141      	bne.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d46:	4b4b      	ldr	r3, [pc, #300]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d52:	d131      	bne.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d54:	4b47      	ldr	r3, [pc, #284]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d5a:	4a46      	ldr	r2, [pc, #280]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d64:	4b43      	ldr	r3, [pc, #268]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d6c:	4a41      	ldr	r2, [pc, #260]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d74:	4b40      	ldr	r3, [pc, #256]	@ (8001e78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2232      	movs	r2, #50	@ 0x32
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	3301      	adds	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8a:	e002      	b.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d92:	4b38      	ldr	r3, [pc, #224]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9e:	d102      	bne.n	8001da6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f2      	bne.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da6:	4b33      	ldr	r3, [pc, #204]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001db2:	d158      	bne.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e057      	b.n	8001e68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dc8:	e04d      	b.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd0:	d141      	bne.n	8001e56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dd2:	4b28      	ldr	r3, [pc, #160]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dde:	d131      	bne.n	8001e44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001de6:	4a23      	ldr	r2, [pc, #140]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df0:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001df8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2232      	movs	r2, #50	@ 0x32
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	0c9b      	lsrs	r3, r3, #18
 8001e12:	3301      	adds	r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e16:	e002      	b.n	8001e1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e2a:	d102      	bne.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f2      	bne.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e3e:	d112      	bne.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e011      	b.n	8001e68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e54:	e007      	b.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e56:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e5e:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40007000 	.word	0x40007000
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	431bde83 	.word	0x431bde83

08001e80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e8e:	6093      	str	r3, [r2, #8]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e2fe      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d075      	beq.n	8001faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	4b97      	ldr	r3, [pc, #604]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec8:	4b94      	ldr	r3, [pc, #592]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_OscConfig+0x3e>
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d002      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x44>
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b8d      	ldr	r3, [pc, #564]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x108>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d157      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e2d9      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x74>
 8001f06:	4b85      	ldr	r3, [pc, #532]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a84      	ldr	r2, [pc, #528]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x98>
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7e      	ldr	r2, [pc, #504]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f38:	4b78      	ldr	r3, [pc, #480]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a77      	ldr	r2, [pc, #476]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b75      	ldr	r3, [pc, #468]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a74      	ldr	r2, [pc, #464]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff fb78 	bl	800164c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fb74 	bl	800164c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	@ 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e29e      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	4b6a      	ldr	r3, [pc, #424]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff fb64 	bl	800164c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff fb60 	bl	800164c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	@ 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e28a      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9a:	4b60      	ldr	r3, [pc, #384]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0xe8>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d075      	beq.n	80020a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb6:	4b59      	ldr	r3, [pc, #356]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc0:	4b56      	ldr	r3, [pc, #344]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x136>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_OscConfig+0x13c>
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d11f      	bne.n	800201c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x154>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e25d      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b49      	ldr	r3, [pc, #292]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	4946      	ldr	r1, [pc, #280]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002008:	4b45      	ldr	r3, [pc, #276]	@ (8002120 <HAL_RCC_OscConfig+0x280>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fad1 	bl	80015b4 <HAL_InitTick>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d043      	beq.n	80020a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e249      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002024:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3c      	ldr	r2, [pc, #240]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff fb0c 	bl	800164c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff fb08 	bl	800164c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e232      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800204a:	4b34      	ldr	r3, [pc, #208]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	061b      	lsls	r3, r3, #24
 8002064:	492d      	ldr	r1, [pc, #180]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
 800206a:	e01a      	b.n	80020a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206c:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2a      	ldr	r2, [pc, #168]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8002072:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff fae8 	bl	800164c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff fae4 	bl	800164c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e20e      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002092:	4b22      	ldr	r3, [pc, #136]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1e0>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d041      	beq.n	8002132 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 80020b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020bc:	4a17      	ldr	r2, [pc, #92]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7ff fac1 	bl	800164c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ce:	f7ff fabd 	bl	800164c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1e7      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e0:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0ef      	beq.n	80020ce <HAL_RCC_OscConfig+0x22e>
 80020ee:	e020      	b.n	8002132 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 80020f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020f6:	4a09      	ldr	r2, [pc, #36]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff faa4 	bl	800164c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002106:	e00d      	b.n	8002124 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff faa0 	bl	800164c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d906      	bls.n	8002124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1ca      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002124:	4b8c      	ldr	r3, [pc, #560]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ea      	bne.n	8002108 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80a6 	beq.w	800228c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002144:	4b84      	ldr	r3, [pc, #528]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_OscConfig+0x2b4>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x2b6>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b7f      	ldr	r3, [pc, #508]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	4a7e      	ldr	r2, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	@ 0x58
 8002166:	4b7c      	ldr	r3, [pc, #496]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002176:	4b79      	ldr	r3, [pc, #484]	@ (800235c <HAL_RCC_OscConfig+0x4bc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002182:	4b76      	ldr	r3, [pc, #472]	@ (800235c <HAL_RCC_OscConfig+0x4bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a75      	ldr	r2, [pc, #468]	@ (800235c <HAL_RCC_OscConfig+0x4bc>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7ff fa5d 	bl	800164c <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7ff fa59 	bl	800164c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e183      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a8:	4b6c      	ldr	r3, [pc, #432]	@ (800235c <HAL_RCC_OscConfig+0x4bc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d108      	bne.n	80021ce <HAL_RCC_OscConfig+0x32e>
 80021bc:	4b66      	ldr	r3, [pc, #408]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c2:	4a65      	ldr	r2, [pc, #404]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021cc:	e024      	b.n	8002218 <HAL_RCC_OscConfig+0x378>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d110      	bne.n	80021f8 <HAL_RCC_OscConfig+0x358>
 80021d6:	4b60      	ldr	r3, [pc, #384]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021f6:	e00f      	b.n	8002218 <HAL_RCC_OscConfig+0x378>
 80021f8:	4b57      	ldr	r3, [pc, #348]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fe:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002208:	4b53      	ldr	r3, [pc, #332]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220e:	4a52      	ldr	r2, [pc, #328]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d016      	beq.n	800224e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff fa14 	bl	800164c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7ff fa10 	bl	800164c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e138      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223e:	4b46      	ldr	r3, [pc, #280]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ed      	beq.n	8002228 <HAL_RCC_OscConfig+0x388>
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7ff f9fd 	bl	800164c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7ff f9f9 	bl	800164c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e121      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800226c:	4b3a      	ldr	r3, [pc, #232]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ed      	bne.n	8002256 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800227a:	7ffb      	ldrb	r3, [r7, #31]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002284:	4a34      	ldr	r2, [pc, #208]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d03c      	beq.n	8002312 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01c      	beq.n	80022da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80022a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff f9cc 	bl	800164c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b8:	f7ff f9c8 	bl	800164c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0f2      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ca:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ef      	beq.n	80022b8 <HAL_RCC_OscConfig+0x418>
 80022d8:	e01b      	b.n	8002312 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022da:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80022dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff f9af 	bl	800164c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022f2:	f7ff f9ab 	bl	800164c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0d5      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ef      	bne.n	80022f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80c9 	beq.w	80024ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b0c      	cmp	r3, #12
 8002326:	f000 8083 	beq.w	8002430 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d15e      	bne.n	80023f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <HAL_RCC_OscConfig+0x4b8>)
 8002338:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800233c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7ff f985 	bl	800164c <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002344:	e00c      	b.n	8002360 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff f981 	bl	800164c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d905      	bls.n	8002360 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0ab      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002360:	4b55      	ldr	r3, [pc, #340]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ec      	bne.n	8002346 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236c:	4b52      	ldr	r3, [pc, #328]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	4b52      	ldr	r3, [pc, #328]	@ (80024bc <HAL_RCC_OscConfig+0x61c>)
 8002372:	4013      	ands	r3, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6a11      	ldr	r1, [r2, #32]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800237c:	3a01      	subs	r2, #1
 800237e:	0112      	lsls	r2, r2, #4
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002386:	0212      	lsls	r2, r2, #8
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800238e:	0852      	lsrs	r2, r2, #1
 8002390:	3a01      	subs	r2, #1
 8002392:	0552      	lsls	r2, r2, #21
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800239a:	0852      	lsrs	r2, r2, #1
 800239c:	3a01      	subs	r2, #1
 800239e:	0652      	lsls	r2, r2, #25
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023a6:	06d2      	lsls	r2, r2, #27
 80023a8:	430a      	orrs	r2, r1
 80023aa:	4943      	ldr	r1, [pc, #268]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a40      	ldr	r2, [pc, #256]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 80023b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023bc:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a3d      	ldr	r2, [pc, #244]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f940 	bl	800164c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7ff f93c 	bl	800164c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e066      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e2:	4b35      	ldr	r3, [pc, #212]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x530>
 80023ee:	e05e      	b.n	80024ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f0:	4b31      	ldr	r3, [pc, #196]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a30      	ldr	r2, [pc, #192]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 80023f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff f926 	bl	800164c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff f922 	bl	800164c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e04c      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002416:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002422:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4924      	ldr	r1, [pc, #144]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 8002428:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <HAL_RCC_OscConfig+0x620>)
 800242a:	4013      	ands	r3, r2
 800242c:	60cb      	str	r3, [r1, #12]
 800242e:	e03e      	b.n	80024ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e039      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800243c:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <HAL_RCC_OscConfig+0x618>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d12c      	bne.n	80024aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	3b01      	subs	r3, #1
 800245c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d123      	bne.n	80024aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d11b      	bne.n	80024aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d113      	bne.n	80024aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	3b01      	subs	r3, #1
 8002490:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d109      	bne.n	80024aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	3b01      	subs	r3, #1
 80024a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	019f800c 	.word	0x019f800c
 80024c0:	feeefffc 	.word	0xfeeefffc

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e11e      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b91      	ldr	r3, [pc, #580]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d910      	bls.n	800250c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 020f 	bic.w	r2, r3, #15
 80024f2:	498c      	ldr	r1, [pc, #560]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b8a      	ldr	r3, [pc, #552]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e106      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d073      	beq.n	8002600 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d129      	bne.n	8002574 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002520:	4b81      	ldr	r3, [pc, #516]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0f4      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002530:	f000 f99e 	bl	8002870 <RCC_GetSysClockFreqFromPLLSource>
 8002534:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4a7c      	ldr	r2, [pc, #496]	@ (800272c <HAL_RCC_ClockConfig+0x268>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d93f      	bls.n	80025be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800253e:	4b7a      	ldr	r3, [pc, #488]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002552:	2b00      	cmp	r3, #0
 8002554:	d033      	beq.n	80025be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	d12f      	bne.n	80025be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800255e:	4b72      	ldr	r3, [pc, #456]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002566:	4a70      	ldr	r2, [pc, #448]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e024      	b.n	80025be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d107      	bne.n	800258c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257c:	4b6a      	ldr	r3, [pc, #424]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0c6      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258c:	4b66      	ldr	r3, [pc, #408]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0be      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800259c:	f000 f8ce 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4a61      	ldr	r2, [pc, #388]	@ (800272c <HAL_RCC_ClockConfig+0x268>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d909      	bls.n	80025be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025ba:	2380      	movs	r3, #128	@ 0x80
 80025bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b5a      	ldr	r3, [pc, #360]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4957      	ldr	r1, [pc, #348]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d0:	f7ff f83c 	bl	800164c <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7ff f838 	bl	800164c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e095      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d023      	beq.n	8002654 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b43      	ldr	r3, [pc, #268]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a42      	ldr	r2, [pc, #264]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 800261e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002622:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002630:	4b3d      	ldr	r3, [pc, #244]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002638:	4a3b      	ldr	r2, [pc, #236]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 800263a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800263e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b39      	ldr	r3, [pc, #228]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4936      	ldr	r1, [pc, #216]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
 8002652:	e008      	b.n	8002666 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b80      	cmp	r3, #128	@ 0x80
 8002658:	d105      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800265a:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4a32      	ldr	r2, [pc, #200]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 8002660:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002664:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002666:	4b2f      	ldr	r3, [pc, #188]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d21d      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002674:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 020f 	bic.w	r2, r3, #15
 800267c:	4929      	ldr	r1, [pc, #164]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002684:	f7fe ffe2 	bl	800164c <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe ffde 	bl	800164c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e03b      	b.n	800271a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <HAL_RCC_ClockConfig+0x260>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1ed      	bne.n	800268c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4917      	ldr	r1, [pc, #92]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026da:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	490f      	ldr	r1, [pc, #60]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ee:	f000 f825 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <HAL_RCC_ClockConfig+0x264>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490c      	ldr	r1, [pc, #48]	@ (8002730 <HAL_RCC_ClockConfig+0x26c>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <HAL_RCC_ClockConfig+0x270>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800270e:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <HAL_RCC_ClockConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe ff4e 	bl	80015b4 <HAL_InitTick>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40022000 	.word	0x40022000
 8002728:	40021000 	.word	0x40021000
 800272c:	04c4b400 	.word	0x04c4b400
 8002730:	0800547c 	.word	0x0800547c
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002742:	4b2c      	ldr	r3, [pc, #176]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d102      	bne.n	8002754 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	e047      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002754:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b08      	cmp	r3, #8
 800275e:	d102      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002760:	4b26      	ldr	r3, [pc, #152]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e03e      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002766:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d136      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002772:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3301      	adds	r3, #1
 8002788:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002790:	4a1a      	ldr	r2, [pc, #104]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	4a16      	ldr	r2, [pc, #88]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279a:	68d2      	ldr	r2, [r2, #12]
 800279c:	0a12      	lsrs	r2, r2, #8
 800279e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
      break;
 80027a8:	e00c      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027aa:	4a13      	ldr	r2, [pc, #76]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4a10      	ldr	r2, [pc, #64]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	0a12      	lsrs	r2, r2, #8
 80027b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
      break;
 80027c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0e5b      	lsrs	r3, r3, #25
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e001      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027e4:	693b      	ldr	r3, [r7, #16]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	007a1200 	.word	0x007a1200

08002800 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_RCC_GetHCLKFreq+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000000 	.word	0x20000000

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800281c:	f7ff fff0 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4904      	ldr	r1, [pc, #16]	@ (8002840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	0800548c 	.word	0x0800548c

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002848:	f7ff ffda 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0adb      	lsrs	r3, r3, #11
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4904      	ldr	r1, [pc, #16]	@ (800286c <HAL_RCC_GetPCLK2Freq+0x28>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	0800548c 	.word	0x0800548c

08002870 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002876:	4b1e      	ldr	r3, [pc, #120]	@ (80028f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d10c      	bne.n	80028ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002894:	4a17      	ldr	r2, [pc, #92]	@ (80028f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800289e:	68d2      	ldr	r2, [r2, #12]
 80028a0:	0a12      	lsrs	r2, r2, #8
 80028a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
    break;
 80028ac:	e00c      	b.n	80028c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ae:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4a0e      	ldr	r2, [pc, #56]	@ (80028f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	0a12      	lsrs	r2, r2, #8
 80028bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
    break;
 80028c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	0e5b      	lsrs	r3, r3, #25
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	3301      	adds	r3, #1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028e2:	687b      	ldr	r3, [r7, #4]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40021000 	.word	0x40021000
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	00f42400 	.word	0x00f42400

080028fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002904:	2300      	movs	r3, #0
 8002906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002908:	2300      	movs	r3, #0
 800290a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8098 	beq.w	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291e:	4b43      	ldr	r3, [pc, #268]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10d      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b40      	ldr	r3, [pc, #256]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002934:	6593      	str	r3, [r2, #88]	@ 0x58
 8002936:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002942:	2301      	movs	r3, #1
 8002944:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002946:	4b3a      	ldr	r3, [pc, #232]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a39      	ldr	r2, [pc, #228]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002952:	f7fe fe7b 	bl	800164c <HAL_GetTick>
 8002956:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002958:	e009      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fe fe77 	bl	800164c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d902      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	74fb      	strb	r3, [r7, #19]
        break;
 800296c:	e005      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800296e:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ef      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d159      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002980:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01e      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	429a      	cmp	r2, r3
 800299a:	d019      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800299c:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a8:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	4a1f      	ldr	r2, [pc, #124]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029be:	4a1b      	ldr	r2, [pc, #108]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c8:	4a18      	ldr	r2, [pc, #96]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fe37 	bl	800164c <HAL_GetTick>
 80029de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e0:	e00b      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fe33 	bl	800164c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d902      	bls.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	74fb      	strb	r3, [r7, #19]
            break;
 80029f8:	e006      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fa:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ec      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0e:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	4903      	ldr	r1, [pc, #12]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a24:	e008      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	74bb      	strb	r3, [r7, #18]
 8002a2a:	e005      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a38:	7c7b      	ldrb	r3, [r7, #17]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4ba6      	ldr	r3, [pc, #664]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	4aa5      	ldr	r2, [pc, #660]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a56:	4ba0      	ldr	r3, [pc, #640]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5c:	f023 0203 	bic.w	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	499c      	ldr	r1, [pc, #624]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a78:	4b97      	ldr	r3, [pc, #604]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f023 020c 	bic.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4994      	ldr	r1, [pc, #592]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	498b      	ldr	r1, [pc, #556]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002abc:	4b86      	ldr	r3, [pc, #536]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	4983      	ldr	r1, [pc, #524]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ade:	4b7e      	ldr	r3, [pc, #504]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	497a      	ldr	r1, [pc, #488]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b00:	4b75      	ldr	r3, [pc, #468]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	4972      	ldr	r1, [pc, #456]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b22:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	4969      	ldr	r1, [pc, #420]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b44:	4b64      	ldr	r3, [pc, #400]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4961      	ldr	r1, [pc, #388]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b66:	4b5c      	ldr	r3, [pc, #368]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	4958      	ldr	r1, [pc, #352]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b88:	4b53      	ldr	r3, [pc, #332]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	4950      	ldr	r1, [pc, #320]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bc0:	4b45      	ldr	r3, [pc, #276]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	4942      	ldr	r1, [pc, #264]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bde:	d105      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be0:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bf8:	4b37      	ldr	r3, [pc, #220]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4934      	ldr	r1, [pc, #208]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c16:	d105      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c18:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c30:	4b29      	ldr	r3, [pc, #164]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	4926      	ldr	r1, [pc, #152]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c50:	4b21      	ldr	r3, [pc, #132]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a20      	ldr	r2, [pc, #128]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	4918      	ldr	r1, [pc, #96]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c86:	d105      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cae:	490a      	ldr	r1, [pc, #40]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ccc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e049      	b.n	8002d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fe fb10 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f000 fba4 	bl	8003468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e049      	b.n	8002e30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f841 	bl	8002e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 fb4d 	bl	8003468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_TIM_PWM_Start+0x24>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e03c      	b.n	8002eea <HAL_TIM_PWM_Start+0x9e>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d109      	bne.n	8002e8a <HAL_TIM_PWM_Start+0x3e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e02f      	b.n	8002eea <HAL_TIM_PWM_Start+0x9e>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d109      	bne.n	8002ea4 <HAL_TIM_PWM_Start+0x58>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e022      	b.n	8002eea <HAL_TIM_PWM_Start+0x9e>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d109      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x72>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e015      	b.n	8002eea <HAL_TIM_PWM_Start+0x9e>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d109      	bne.n	8002ed8 <HAL_TIM_PWM_Start+0x8c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e008      	b.n	8002eea <HAL_TIM_PWM_Start+0x9e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e097      	b.n	8003022 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_PWM_Start+0xb6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f00:	e023      	b.n	8002f4a <HAL_TIM_PWM_Start+0xfe>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_PWM_Start+0xc6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f10:	e01b      	b.n	8002f4a <HAL_TIM_PWM_Start+0xfe>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_PWM_Start+0xd6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f20:	e013      	b.n	8002f4a <HAL_TIM_PWM_Start+0xfe>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_PWM_Start+0xe6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f30:	e00b      	b.n	8002f4a <HAL_TIM_PWM_Start+0xfe>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_PWM_Start+0xf6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f40:	e003      	b.n	8002f4a <HAL_TIM_PWM_Start+0xfe>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 feb6 	bl	8003cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a33      	ldr	r2, [pc, #204]	@ (800302c <HAL_TIM_PWM_Start+0x1e0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x13e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a32      	ldr	r2, [pc, #200]	@ (8003030 <HAL_TIM_PWM_Start+0x1e4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00e      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x13e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a30      	ldr	r2, [pc, #192]	@ (8003034 <HAL_TIM_PWM_Start+0x1e8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x13e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8003038 <HAL_TIM_PWM_Start+0x1ec>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x13e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2d      	ldr	r2, [pc, #180]	@ (800303c <HAL_TIM_PWM_Start+0x1f0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x142>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_TIM_PWM_Start+0x144>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a20      	ldr	r2, [pc, #128]	@ (800302c <HAL_TIM_PWM_Start+0x1e0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d018      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x194>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb6:	d013      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x194>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	@ (8003040 <HAL_TIM_PWM_Start+0x1f4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x194>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HAL_TIM_PWM_Start+0x1f8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x194>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <HAL_TIM_PWM_Start+0x1e4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0x194>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a16      	ldr	r2, [pc, #88]	@ (8003034 <HAL_TIM_PWM_Start+0x1e8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d115      	bne.n	800300c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <HAL_TIM_PWM_Start+0x1fc>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d015      	beq.n	800301e <HAL_TIM_PWM_Start+0x1d2>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff8:	d011      	beq.n	800301e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300a:	e008      	b.n	800301e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e000      	b.n	8003020 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40013400 	.word	0x40013400
 8003034:	40014000 	.word	0x40014000
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	00010007 	.word	0x00010007

0800304c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003066:	2302      	movs	r3, #2
 8003068:	e0ff      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b14      	cmp	r3, #20
 8003076:	f200 80f0 	bhi.w	800325a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800307a:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030d5 	.word	0x080030d5
 8003084:	0800325b 	.word	0x0800325b
 8003088:	0800325b 	.word	0x0800325b
 800308c:	0800325b 	.word	0x0800325b
 8003090:	08003115 	.word	0x08003115
 8003094:	0800325b 	.word	0x0800325b
 8003098:	0800325b 	.word	0x0800325b
 800309c:	0800325b 	.word	0x0800325b
 80030a0:	08003157 	.word	0x08003157
 80030a4:	0800325b 	.word	0x0800325b
 80030a8:	0800325b 	.word	0x0800325b
 80030ac:	0800325b 	.word	0x0800325b
 80030b0:	08003197 	.word	0x08003197
 80030b4:	0800325b 	.word	0x0800325b
 80030b8:	0800325b 	.word	0x0800325b
 80030bc:	0800325b 	.word	0x0800325b
 80030c0:	080031d9 	.word	0x080031d9
 80030c4:	0800325b 	.word	0x0800325b
 80030c8:	0800325b 	.word	0x0800325b
 80030cc:	0800325b 	.word	0x0800325b
 80030d0:	08003219 	.word	0x08003219
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fa60 	bl	80035a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0208 	orr.w	r2, r2, #8
 80030ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0204 	bic.w	r2, r2, #4
 80030fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6999      	ldr	r1, [r3, #24]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	619a      	str	r2, [r3, #24]
      break;
 8003112:	e0a5      	b.n	8003260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fad0 	bl	80036c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6999      	ldr	r1, [r3, #24]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	021a      	lsls	r2, r3, #8
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	619a      	str	r2, [r3, #24]
      break;
 8003154:	e084      	b.n	8003260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fb39 	bl	80037d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0208 	orr.w	r2, r2, #8
 8003170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0204 	bic.w	r2, r2, #4
 8003180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69d9      	ldr	r1, [r3, #28]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	61da      	str	r2, [r3, #28]
      break;
 8003194:	e064      	b.n	8003260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fba1 	bl	80038e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69d9      	ldr	r1, [r3, #28]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	021a      	lsls	r2, r3, #8
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	61da      	str	r2, [r3, #28]
      break;
 80031d6:	e043      	b.n	8003260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fc0a 	bl	80039f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0208 	orr.w	r2, r2, #8
 80031f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0204 	bic.w	r2, r2, #4
 8003202:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003216:	e023      	b.n	8003260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fc4e 	bl	8003ac0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003232:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003242:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	021a      	lsls	r2, r3, #8
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003258:	e002      	b.n	8003260 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
      break;
 800325e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003268:	7dfb      	ldrb	r3, [r7, #23]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop

08003274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x1c>
 800328c:	2302      	movs	r3, #2
 800328e:	e0de      	b.n	800344e <HAL_TIM_ConfigClockSource+0x1da>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80032ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a63      	ldr	r2, [pc, #396]	@ (8003458 <HAL_TIM_ConfigClockSource+0x1e4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	f000 80a9 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 80032d0:	4a61      	ldr	r2, [pc, #388]	@ (8003458 <HAL_TIM_ConfigClockSource+0x1e4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	f200 80ae 	bhi.w	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 80032d8:	4a60      	ldr	r2, [pc, #384]	@ (800345c <HAL_TIM_ConfigClockSource+0x1e8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	f000 80a1 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 80032e0:	4a5e      	ldr	r2, [pc, #376]	@ (800345c <HAL_TIM_ConfigClockSource+0x1e8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f200 80a6 	bhi.w	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 80032e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003460 <HAL_TIM_ConfigClockSource+0x1ec>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	f000 8099 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 80032f0:	4a5b      	ldr	r2, [pc, #364]	@ (8003460 <HAL_TIM_ConfigClockSource+0x1ec>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	f200 809e 	bhi.w	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 80032f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003464 <HAL_TIM_ConfigClockSource+0x1f0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	f000 8091 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 8003300:	4a58      	ldr	r2, [pc, #352]	@ (8003464 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	f200 8096 	bhi.w	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 8003308:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800330c:	f000 8089 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 8003310:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003314:	f200 808e 	bhi.w	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800331c:	d03e      	beq.n	800339c <HAL_TIM_ConfigClockSource+0x128>
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003322:	f200 8087 	bhi.w	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800332a:	f000 8086 	beq.w	800343a <HAL_TIM_ConfigClockSource+0x1c6>
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003332:	d87f      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 8003334:	2b70      	cmp	r3, #112	@ 0x70
 8003336:	d01a      	beq.n	800336e <HAL_TIM_ConfigClockSource+0xfa>
 8003338:	2b70      	cmp	r3, #112	@ 0x70
 800333a:	d87b      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 800333c:	2b60      	cmp	r3, #96	@ 0x60
 800333e:	d050      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x16e>
 8003340:	2b60      	cmp	r3, #96	@ 0x60
 8003342:	d877      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 8003344:	2b50      	cmp	r3, #80	@ 0x50
 8003346:	d03c      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x14e>
 8003348:	2b50      	cmp	r3, #80	@ 0x50
 800334a:	d873      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 800334c:	2b40      	cmp	r3, #64	@ 0x40
 800334e:	d058      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x18e>
 8003350:	2b40      	cmp	r3, #64	@ 0x40
 8003352:	d86f      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 8003354:	2b30      	cmp	r3, #48	@ 0x30
 8003356:	d064      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 8003358:	2b30      	cmp	r3, #48	@ 0x30
 800335a:	d86b      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d060      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 8003360:	2b20      	cmp	r3, #32
 8003362:	d867      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05c      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 8003368:	2b10      	cmp	r3, #16
 800336a:	d05a      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x1ae>
 800336c:	e062      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800337e:	f000 fc81 	bl	8003c84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	609a      	str	r2, [r3, #8]
      break;
 800339a:	e04f      	b.n	800343c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ac:	f000 fc6a 	bl	8003c84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033be:	609a      	str	r2, [r3, #8]
      break;
 80033c0:	e03c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	461a      	mov	r2, r3
 80033d0:	f000 fbdc 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2150      	movs	r1, #80	@ 0x50
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fc35 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 80033e0:	e02c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ee:	461a      	mov	r2, r3
 80033f0:	f000 fbfb 	bl	8003bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2160      	movs	r1, #96	@ 0x60
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fc25 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 8003400:	e01c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	461a      	mov	r2, r3
 8003410:	f000 fbbc 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2140      	movs	r1, #64	@ 0x40
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fc15 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 8003420:	e00c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f000 fc0c 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 8003432:	e003      	b.n	800343c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      break;
 8003438:	e000      	b.n	800343c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800343a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	00100070 	.word	0x00100070
 800345c:	00100040 	.word	0x00100040
 8003460:	00100030 	.word	0x00100030
 8003464:	00100020 	.word	0x00100020

08003468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a42      	ldr	r2, [pc, #264]	@ (8003584 <TIM_Base_SetConfig+0x11c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00f      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003486:	d00b      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3f      	ldr	r2, [pc, #252]	@ (8003588 <TIM_Base_SetConfig+0x120>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3e      	ldr	r2, [pc, #248]	@ (800358c <TIM_Base_SetConfig+0x124>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3d      	ldr	r2, [pc, #244]	@ (8003590 <TIM_Base_SetConfig+0x128>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d108      	bne.n	80034b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a33      	ldr	r2, [pc, #204]	@ (8003584 <TIM_Base_SetConfig+0x11c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01b      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c0:	d017      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a30      	ldr	r2, [pc, #192]	@ (8003588 <TIM_Base_SetConfig+0x120>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2f      	ldr	r2, [pc, #188]	@ (800358c <TIM_Base_SetConfig+0x124>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003590 <TIM_Base_SetConfig+0x128>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003594 <TIM_Base_SetConfig+0x12c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003598 <TIM_Base_SetConfig+0x130>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a2b      	ldr	r2, [pc, #172]	@ (800359c <TIM_Base_SetConfig+0x134>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a16      	ldr	r2, [pc, #88]	@ (8003584 <TIM_Base_SetConfig+0x11c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00f      	beq.n	8003550 <TIM_Base_SetConfig+0xe8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a17      	ldr	r2, [pc, #92]	@ (8003590 <TIM_Base_SetConfig+0x128>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00b      	beq.n	8003550 <TIM_Base_SetConfig+0xe8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <TIM_Base_SetConfig+0x12c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d007      	beq.n	8003550 <TIM_Base_SetConfig+0xe8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a15      	ldr	r2, [pc, #84]	@ (8003598 <TIM_Base_SetConfig+0x130>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <TIM_Base_SetConfig+0xe8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a14      	ldr	r2, [pc, #80]	@ (800359c <TIM_Base_SetConfig+0x134>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d105      	bne.n	8003576 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]
  }
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800
 8003590:	40013400 	.word	0x40013400
 8003594:	40014000 	.word	0x40014000
 8003598:	40014400 	.word	0x40014400
 800359c:	40014800 	.word	0x40014800

080035a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f023 0201 	bic.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f023 0302 	bic.w	r3, r3, #2
 80035ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a2c      	ldr	r2, [pc, #176]	@ (80036ac <TIM_OC1_SetConfig+0x10c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00f      	beq.n	8003620 <TIM_OC1_SetConfig+0x80>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a2b      	ldr	r2, [pc, #172]	@ (80036b0 <TIM_OC1_SetConfig+0x110>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00b      	beq.n	8003620 <TIM_OC1_SetConfig+0x80>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a2a      	ldr	r2, [pc, #168]	@ (80036b4 <TIM_OC1_SetConfig+0x114>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_OC1_SetConfig+0x80>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a29      	ldr	r2, [pc, #164]	@ (80036b8 <TIM_OC1_SetConfig+0x118>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_OC1_SetConfig+0x80>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a28      	ldr	r2, [pc, #160]	@ (80036bc <TIM_OC1_SetConfig+0x11c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10c      	bne.n	800363a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0308 	bic.w	r3, r3, #8
 8003626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1b      	ldr	r2, [pc, #108]	@ (80036ac <TIM_OC1_SetConfig+0x10c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00f      	beq.n	8003662 <TIM_OC1_SetConfig+0xc2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1a      	ldr	r2, [pc, #104]	@ (80036b0 <TIM_OC1_SetConfig+0x110>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_OC1_SetConfig+0xc2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a19      	ldr	r2, [pc, #100]	@ (80036b4 <TIM_OC1_SetConfig+0x114>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_OC1_SetConfig+0xc2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a18      	ldr	r2, [pc, #96]	@ (80036b8 <TIM_OC1_SetConfig+0x118>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC1_SetConfig+0xc2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a17      	ldr	r2, [pc, #92]	@ (80036bc <TIM_OC1_SetConfig+0x11c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d111      	bne.n	8003686 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	621a      	str	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40013400 	.word	0x40013400
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800

080036c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f023 0210 	bic.w	r2, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a28      	ldr	r2, [pc, #160]	@ (80037c0 <TIM_OC2_SetConfig+0x100>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC2_SetConfig+0x6c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a27      	ldr	r2, [pc, #156]	@ (80037c4 <TIM_OC2_SetConfig+0x104>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10d      	bne.n	8003748 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a1d      	ldr	r2, [pc, #116]	@ (80037c0 <TIM_OC2_SetConfig+0x100>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00f      	beq.n	8003770 <TIM_OC2_SetConfig+0xb0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a1c      	ldr	r2, [pc, #112]	@ (80037c4 <TIM_OC2_SetConfig+0x104>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00b      	beq.n	8003770 <TIM_OC2_SetConfig+0xb0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a1b      	ldr	r2, [pc, #108]	@ (80037c8 <TIM_OC2_SetConfig+0x108>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d007      	beq.n	8003770 <TIM_OC2_SetConfig+0xb0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1a      	ldr	r2, [pc, #104]	@ (80037cc <TIM_OC2_SetConfig+0x10c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_OC2_SetConfig+0xb0>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <TIM_OC2_SetConfig+0x110>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d113      	bne.n	8003798 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40013400 	.word	0x40013400
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40014400 	.word	0x40014400
 80037d0:	40014800 	.word	0x40014800

080037d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a27      	ldr	r2, [pc, #156]	@ (80038d0 <TIM_OC3_SetConfig+0xfc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_OC3_SetConfig+0x6a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a26      	ldr	r2, [pc, #152]	@ (80038d4 <TIM_OC3_SetConfig+0x100>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10d      	bne.n	800385a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <TIM_OC3_SetConfig+0xfc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00f      	beq.n	8003882 <TIM_OC3_SetConfig+0xae>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <TIM_OC3_SetConfig+0x100>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00b      	beq.n	8003882 <TIM_OC3_SetConfig+0xae>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1a      	ldr	r2, [pc, #104]	@ (80038d8 <TIM_OC3_SetConfig+0x104>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <TIM_OC3_SetConfig+0xae>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <TIM_OC3_SetConfig+0x108>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_OC3_SetConfig+0xae>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <TIM_OC3_SetConfig+0x10c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d113      	bne.n	80038aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	621a      	str	r2, [r3, #32]
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40013400 	.word	0x40013400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800

080038e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800391e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	031b      	lsls	r3, r3, #12
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a28      	ldr	r2, [pc, #160]	@ (80039e4 <TIM_OC4_SetConfig+0x100>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_OC4_SetConfig+0x6c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a27      	ldr	r2, [pc, #156]	@ (80039e8 <TIM_OC4_SetConfig+0x104>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d10d      	bne.n	800396c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	031b      	lsls	r3, r3, #12
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800396a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a1d      	ldr	r2, [pc, #116]	@ (80039e4 <TIM_OC4_SetConfig+0x100>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00f      	beq.n	8003994 <TIM_OC4_SetConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a1c      	ldr	r2, [pc, #112]	@ (80039e8 <TIM_OC4_SetConfig+0x104>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00b      	beq.n	8003994 <TIM_OC4_SetConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ec <TIM_OC4_SetConfig+0x108>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_OC4_SetConfig+0xb0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a1a      	ldr	r2, [pc, #104]	@ (80039f0 <TIM_OC4_SetConfig+0x10c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_OC4_SetConfig+0xb0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a19      	ldr	r2, [pc, #100]	@ (80039f4 <TIM_OC4_SetConfig+0x110>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d113      	bne.n	80039bc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800399a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80039a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	019b      	lsls	r3, r3, #6
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40013400 	.word	0x40013400
 80039ec:	40014000 	.word	0x40014000
 80039f0:	40014400 	.word	0x40014400
 80039f4:	40014800 	.word	0x40014800

080039f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <TIM_OC5_SetConfig+0xb4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00f      	beq.n	8003a72 <TIM_OC5_SetConfig+0x7a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <TIM_OC5_SetConfig+0xb8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_OC5_SetConfig+0x7a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a15      	ldr	r2, [pc, #84]	@ (8003ab4 <TIM_OC5_SetConfig+0xbc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_OC5_SetConfig+0x7a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a14      	ldr	r2, [pc, #80]	@ (8003ab8 <TIM_OC5_SetConfig+0xc0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_OC5_SetConfig+0x7a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a13      	ldr	r2, [pc, #76]	@ (8003abc <TIM_OC5_SetConfig+0xc4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d109      	bne.n	8003a86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40013400 	.word	0x40013400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800

08003ac0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	051b      	lsls	r3, r3, #20
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <TIM_OC6_SetConfig+0xb8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00f      	beq.n	8003b3c <TIM_OC6_SetConfig+0x7c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <TIM_OC6_SetConfig+0xbc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <TIM_OC6_SetConfig+0x7c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <TIM_OC6_SetConfig+0xc0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_OC6_SetConfig+0x7c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <TIM_OC6_SetConfig+0xc4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_OC6_SetConfig+0x7c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a14      	ldr	r2, [pc, #80]	@ (8003b88 <TIM_OC6_SetConfig+0xc8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d109      	bne.n	8003b50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	029b      	lsls	r3, r3, #10
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40013400 	.word	0x40013400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0201 	bic.w	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 030a 	bic.w	r3, r3, #10
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b087      	sub	sp, #28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 0210 	bic.w	r2, r3, #16
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f043 0307 	orr.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e065      	b.n	8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1b      	ldr	r2, [pc, #108]	@ (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d9e:	d013      	beq.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a18      	ldr	r2, [pc, #96]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a17      	ldr	r2, [pc, #92]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10c      	bne.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40014000 	.word	0x40014000

08003e14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e073      	b.n	8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	@ (8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a18      	ldr	r2, [pc, #96]	@ (8003f28 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d11c      	bne.n	8003f06 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	051b      	lsls	r3, r3, #20
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40013400 	.word	0x40013400

08003f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e042      	b.n	8003fc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fd fa8d 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2224      	movs	r2, #36	@ 0x24
 8003f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fec6 	bl	8004d08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fbf7 	bl	8004770 <UART_SetConfig>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e01b      	b.n	8003fc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 ff45 	bl	8004e4c <UART_CheckIdleState>
 8003fc2:	4603      	mov	r3, r0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	@ 0x28
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d17b      	bne.n	80040de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <HAL_UART_Transmit+0x26>
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e074      	b.n	80040e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2221      	movs	r2, #33	@ 0x21
 8004002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004006:	f7fd fb21 	bl	800164c <HAL_GetTick>
 800400a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	88fa      	ldrh	r2, [r7, #6]
 8004018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004024:	d108      	bne.n	8004038 <HAL_UART_Transmit+0x6c>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e003      	b.n	8004040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004040:	e030      	b.n	80040a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	@ 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 ffa7 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e03d      	b.n	80040e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004078:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	3302      	adds	r3, #2
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	e007      	b.n	8004092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3301      	adds	r3, #1
 8004090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1c8      	bne.n	8004042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2200      	movs	r2, #0
 80040b8:	2140      	movs	r1, #64	@ 0x40
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 ff70 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e006      	b.n	80040e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80040de:	2302      	movs	r3, #2
  }
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b0ba      	sub	sp, #232	@ 0xe8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800410e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004112:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004116:	4013      	ands	r3, r2
 8004118:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800411c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11b      	bne.n	800415c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800413c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 82e3 	beq.w	8004718 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
      }
      return;
 800415a:	e2dd      	b.n	8004718 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800415c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8123 	beq.w	80043ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004166:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800416a:	4b8d      	ldr	r3, [pc, #564]	@ (80043a0 <HAL_UART_IRQHandler+0x2b8>)
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004172:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004176:	4b8b      	ldr	r3, [pc, #556]	@ (80043a4 <HAL_UART_IRQHandler+0x2bc>)
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8116 	beq.w	80043ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d011      	beq.n	80041b0 <HAL_UART_IRQHandler+0xc8>
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00b      	beq.n	80041b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2201      	movs	r2, #1
 800419e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f043 0201 	orr.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d011      	beq.n	80041e0 <HAL_UART_IRQHandler+0xf8>
 80041bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2202      	movs	r2, #2
 80041ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d6:	f043 0204 	orr.w	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d011      	beq.n	8004210 <HAL_UART_IRQHandler+0x128>
 80041ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2204      	movs	r2, #4
 80041fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004206:	f043 0202 	orr.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d017      	beq.n	800424c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004228:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800422c:	4b5c      	ldr	r3, [pc, #368]	@ (80043a0 <HAL_UART_IRQHandler+0x2b8>)
 800422e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2208      	movs	r2, #8
 800423a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	f043 0208 	orr.w	r2, r3, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004254:	2b00      	cmp	r3, #0
 8004256:	d012      	beq.n	800427e <HAL_UART_IRQHandler+0x196>
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00c      	beq.n	800427e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800426c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8249 	beq.w	800471c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d013      	beq.n	80042be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d2:	2b40      	cmp	r3, #64	@ 0x40
 80042d4:	d005      	beq.n	80042e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d054      	beq.n	800438c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fec9 	bl	800507a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d146      	bne.n	8004384 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800430c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004322:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800432e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800433a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1d9      	bne.n	80042f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d017      	beq.n	800437c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004352:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <HAL_UART_IRQHandler+0x2c0>)
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800435c:	4618      	mov	r0, r3
 800435e:	f7fd fae9 	bl	8001934 <HAL_DMA_Abort_IT>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d019      	beq.n	800439c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004376:	4610      	mov	r0, r2
 8004378:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437a:	e00f      	b.n	800439c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f9e1 	bl	8004744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004382:	e00b      	b.n	800439c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f9dd 	bl	8004744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438a:	e007      	b.n	800439c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f9d9 	bl	8004744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800439a:	e1bf      	b.n	800471c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	bf00      	nop
    return;
 800439e:	e1bd      	b.n	800471c <HAL_UART_IRQHandler+0x634>
 80043a0:	10000001 	.word	0x10000001
 80043a4:	04000120 	.word	0x04000120
 80043a8:	08005147 	.word	0x08005147

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 8153 	bne.w	800465c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 814c 	beq.w	800465c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8145 	beq.w	800465c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2210      	movs	r2, #16
 80043d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e4:	2b40      	cmp	r3, #64	@ 0x40
 80043e6:	f040 80bb 	bne.w	8004560 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 818f 	beq.w	8004720 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800440c:	429a      	cmp	r2, r3
 800440e:	f080 8187 	bcs.w	8004720 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004418:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 8087 	bne.w	800453e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800444c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800445a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800445e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004466:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1da      	bne.n	8004430 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800448a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800449e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e1      	bne.n	800447a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3308      	adds	r3, #8
 80044bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e3      	bne.n	80044b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800450a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800450c:	f023 0310 	bic.w	r3, r3, #16
 8004510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800451e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004520:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004524:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800452c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e4      	bne.n	80044fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd f9a2 	bl	8001882 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004550:	b29b      	uxth	r3, r3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8fd 	bl	8004758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800455e:	e0df      	b.n	8004720 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800456c:	b29b      	uxth	r3, r3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80d1 	beq.w	8004724 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004582:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80cc 	beq.w	8004724 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800459a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e4      	bne.n	800458c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3308      	adds	r3, #8
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	623b      	str	r3, [r7, #32]
   return(result);
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3308      	adds	r3, #8
 80045e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80045ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e1      	bne.n	80045c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	617b      	str	r3, [r7, #20]
   return(result);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e4      	bne.n	8004612 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800464e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f87f 	bl	8004758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800465a:	e063      	b.n	8004724 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <HAL_UART_IRQHandler+0x59e>
 8004668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800466c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800467c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fda2 	bl	80051c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004684:	e051      	b.n	800472a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d014      	beq.n	80046bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800469e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d03a      	beq.n	8004728 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
    }
    return;
 80046ba:	e035      	b.n	8004728 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <HAL_UART_IRQHandler+0x5f4>
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fd4c 	bl	8005172 <UART_EndTransmit_IT>
    return;
 80046da:	e026      	b.n	800472a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_UART_IRQHandler+0x614>
 80046e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fd7b 	bl	80051f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046fa:	e016      	b.n	800472a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80046fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d010      	beq.n	800472a <HAL_UART_IRQHandler+0x642>
 8004708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800470c:	2b00      	cmp	r3, #0
 800470e:	da0c      	bge.n	800472a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fd63 	bl	80051dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004716:	e008      	b.n	800472a <HAL_UART_IRQHandler+0x642>
      return;
 8004718:	bf00      	nop
 800471a:	e006      	b.n	800472a <HAL_UART_IRQHandler+0x642>
    return;
 800471c:	bf00      	nop
 800471e:	e004      	b.n	800472a <HAL_UART_IRQHandler+0x642>
      return;
 8004720:	bf00      	nop
 8004722:	e002      	b.n	800472a <HAL_UART_IRQHandler+0x642>
      return;
 8004724:	bf00      	nop
 8004726:	e000      	b.n	800472a <HAL_UART_IRQHandler+0x642>
    return;
 8004728:	bf00      	nop
  }
}
 800472a:	37e8      	adds	r7, #232	@ 0xe8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004774:	b08c      	sub	sp, #48	@ 0x30
 8004776:	af00      	add	r7, sp, #0
 8004778:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4bab      	ldr	r3, [pc, #684]	@ (8004a4c <UART_SetConfig+0x2dc>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4aa0      	ldr	r2, [pc, #640]	@ (8004a50 <UART_SetConfig+0x2e0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d8:	4313      	orrs	r3, r2
 80047da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80047e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	f023 010f 	bic.w	r1, r3, #15
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a91      	ldr	r2, [pc, #580]	@ (8004a54 <UART_SetConfig+0x2e4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d125      	bne.n	8004860 <UART_SetConfig+0xf0>
 8004814:	4b90      	ldr	r3, [pc, #576]	@ (8004a58 <UART_SetConfig+0x2e8>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b03      	cmp	r3, #3
 8004820:	d81a      	bhi.n	8004858 <UART_SetConfig+0xe8>
 8004822:	a201      	add	r2, pc, #4	@ (adr r2, 8004828 <UART_SetConfig+0xb8>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	08004839 	.word	0x08004839
 800482c:	08004849 	.word	0x08004849
 8004830:	08004841 	.word	0x08004841
 8004834:	08004851 	.word	0x08004851
 8004838:	2301      	movs	r3, #1
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800483e:	e0d6      	b.n	80049ee <UART_SetConfig+0x27e>
 8004840:	2302      	movs	r3, #2
 8004842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004846:	e0d2      	b.n	80049ee <UART_SetConfig+0x27e>
 8004848:	2304      	movs	r3, #4
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484e:	e0ce      	b.n	80049ee <UART_SetConfig+0x27e>
 8004850:	2308      	movs	r3, #8
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004856:	e0ca      	b.n	80049ee <UART_SetConfig+0x27e>
 8004858:	2310      	movs	r3, #16
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485e:	e0c6      	b.n	80049ee <UART_SetConfig+0x27e>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7d      	ldr	r2, [pc, #500]	@ (8004a5c <UART_SetConfig+0x2ec>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d138      	bne.n	80048dc <UART_SetConfig+0x16c>
 800486a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a58 <UART_SetConfig+0x2e8>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f003 030c 	and.w	r3, r3, #12
 8004874:	2b0c      	cmp	r3, #12
 8004876:	d82d      	bhi.n	80048d4 <UART_SetConfig+0x164>
 8004878:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <UART_SetConfig+0x110>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048b5 	.word	0x080048b5
 8004884:	080048d5 	.word	0x080048d5
 8004888:	080048d5 	.word	0x080048d5
 800488c:	080048d5 	.word	0x080048d5
 8004890:	080048c5 	.word	0x080048c5
 8004894:	080048d5 	.word	0x080048d5
 8004898:	080048d5 	.word	0x080048d5
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048bd 	.word	0x080048bd
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	080048d5 	.word	0x080048d5
 80048b0:	080048cd 	.word	0x080048cd
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	e098      	b.n	80049ee <UART_SetConfig+0x27e>
 80048bc:	2302      	movs	r3, #2
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c2:	e094      	b.n	80049ee <UART_SetConfig+0x27e>
 80048c4:	2304      	movs	r3, #4
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ca:	e090      	b.n	80049ee <UART_SetConfig+0x27e>
 80048cc:	2308      	movs	r3, #8
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d2:	e08c      	b.n	80049ee <UART_SetConfig+0x27e>
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048da:	e088      	b.n	80049ee <UART_SetConfig+0x27e>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a5f      	ldr	r2, [pc, #380]	@ (8004a60 <UART_SetConfig+0x2f0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d125      	bne.n	8004932 <UART_SetConfig+0x1c2>
 80048e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a58 <UART_SetConfig+0x2e8>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048f0:	2b30      	cmp	r3, #48	@ 0x30
 80048f2:	d016      	beq.n	8004922 <UART_SetConfig+0x1b2>
 80048f4:	2b30      	cmp	r3, #48	@ 0x30
 80048f6:	d818      	bhi.n	800492a <UART_SetConfig+0x1ba>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d00a      	beq.n	8004912 <UART_SetConfig+0x1a2>
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d814      	bhi.n	800492a <UART_SetConfig+0x1ba>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <UART_SetConfig+0x19a>
 8004904:	2b10      	cmp	r3, #16
 8004906:	d008      	beq.n	800491a <UART_SetConfig+0x1aa>
 8004908:	e00f      	b.n	800492a <UART_SetConfig+0x1ba>
 800490a:	2300      	movs	r3, #0
 800490c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004910:	e06d      	b.n	80049ee <UART_SetConfig+0x27e>
 8004912:	2302      	movs	r3, #2
 8004914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004918:	e069      	b.n	80049ee <UART_SetConfig+0x27e>
 800491a:	2304      	movs	r3, #4
 800491c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004920:	e065      	b.n	80049ee <UART_SetConfig+0x27e>
 8004922:	2308      	movs	r3, #8
 8004924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004928:	e061      	b.n	80049ee <UART_SetConfig+0x27e>
 800492a:	2310      	movs	r3, #16
 800492c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004930:	e05d      	b.n	80049ee <UART_SetConfig+0x27e>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a4b      	ldr	r2, [pc, #300]	@ (8004a64 <UART_SetConfig+0x2f4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d125      	bne.n	8004988 <UART_SetConfig+0x218>
 800493c:	4b46      	ldr	r3, [pc, #280]	@ (8004a58 <UART_SetConfig+0x2e8>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004942:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004946:	2bc0      	cmp	r3, #192	@ 0xc0
 8004948:	d016      	beq.n	8004978 <UART_SetConfig+0x208>
 800494a:	2bc0      	cmp	r3, #192	@ 0xc0
 800494c:	d818      	bhi.n	8004980 <UART_SetConfig+0x210>
 800494e:	2b80      	cmp	r3, #128	@ 0x80
 8004950:	d00a      	beq.n	8004968 <UART_SetConfig+0x1f8>
 8004952:	2b80      	cmp	r3, #128	@ 0x80
 8004954:	d814      	bhi.n	8004980 <UART_SetConfig+0x210>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <UART_SetConfig+0x1f0>
 800495a:	2b40      	cmp	r3, #64	@ 0x40
 800495c:	d008      	beq.n	8004970 <UART_SetConfig+0x200>
 800495e:	e00f      	b.n	8004980 <UART_SetConfig+0x210>
 8004960:	2300      	movs	r3, #0
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004966:	e042      	b.n	80049ee <UART_SetConfig+0x27e>
 8004968:	2302      	movs	r3, #2
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496e:	e03e      	b.n	80049ee <UART_SetConfig+0x27e>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004976:	e03a      	b.n	80049ee <UART_SetConfig+0x27e>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800497e:	e036      	b.n	80049ee <UART_SetConfig+0x27e>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004986:	e032      	b.n	80049ee <UART_SetConfig+0x27e>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a30      	ldr	r2, [pc, #192]	@ (8004a50 <UART_SetConfig+0x2e0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d12a      	bne.n	80049e8 <UART_SetConfig+0x278>
 8004992:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <UART_SetConfig+0x2e8>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004998:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800499c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049a0:	d01a      	beq.n	80049d8 <UART_SetConfig+0x268>
 80049a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049a6:	d81b      	bhi.n	80049e0 <UART_SetConfig+0x270>
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ac:	d00c      	beq.n	80049c8 <UART_SetConfig+0x258>
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b2:	d815      	bhi.n	80049e0 <UART_SetConfig+0x270>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <UART_SetConfig+0x250>
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049bc:	d008      	beq.n	80049d0 <UART_SetConfig+0x260>
 80049be:	e00f      	b.n	80049e0 <UART_SetConfig+0x270>
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c6:	e012      	b.n	80049ee <UART_SetConfig+0x27e>
 80049c8:	2302      	movs	r3, #2
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ce:	e00e      	b.n	80049ee <UART_SetConfig+0x27e>
 80049d0:	2304      	movs	r3, #4
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d6:	e00a      	b.n	80049ee <UART_SetConfig+0x27e>
 80049d8:	2308      	movs	r3, #8
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049de:	e006      	b.n	80049ee <UART_SetConfig+0x27e>
 80049e0:	2310      	movs	r3, #16
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e6:	e002      	b.n	80049ee <UART_SetConfig+0x27e>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a17      	ldr	r2, [pc, #92]	@ (8004a50 <UART_SetConfig+0x2e0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	f040 80a8 	bne.w	8004b4a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d834      	bhi.n	8004a6c <UART_SetConfig+0x2fc>
 8004a02:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <UART_SetConfig+0x298>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a6d 	.word	0x08004a6d
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a6d 	.word	0x08004a6d
 8004a18:	08004a3b 	.word	0x08004a3b
 8004a1c:	08004a6d 	.word	0x08004a6d
 8004a20:	08004a6d 	.word	0x08004a6d
 8004a24:	08004a6d 	.word	0x08004a6d
 8004a28:	08004a43 	.word	0x08004a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fd fef4 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8004a30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a32:	e021      	b.n	8004a78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <UART_SetConfig+0x2f8>)
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a38:	e01e      	b.n	8004a78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3a:	f7fd fe7f 	bl	800273c <HAL_RCC_GetSysClockFreq>
 8004a3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a40:	e01a      	b.n	8004a78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a48:	e016      	b.n	8004a78 <UART_SetConfig+0x308>
 8004a4a:	bf00      	nop
 8004a4c:	cfff69f3 	.word	0xcfff69f3
 8004a50:	40008000 	.word	0x40008000
 8004a54:	40013800 	.word	0x40013800
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40004400 	.word	0x40004400
 8004a60:	40004800 	.word	0x40004800
 8004a64:	40004c00 	.word	0x40004c00
 8004a68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 812a 	beq.w	8004cd4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	4a9e      	ldr	r2, [pc, #632]	@ (8004d00 <UART_SetConfig+0x590>)
 8004a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d305      	bcc.n	8004ab0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d903      	bls.n	8004ab8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ab6:	e10d      	b.n	8004cd4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	2200      	movs	r2, #0
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	60fa      	str	r2, [r7, #12]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	4a8e      	ldr	r2, [pc, #568]	@ (8004d00 <UART_SetConfig+0x590>)
 8004ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2200      	movs	r2, #0
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ada:	f7fb ff8b 	bl	80009f4 <__aeabi_uldivmod>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	020b      	lsls	r3, r1, #8
 8004af0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004af4:	0202      	lsls	r2, r0, #8
 8004af6:	6979      	ldr	r1, [r7, #20]
 8004af8:	6849      	ldr	r1, [r1, #4]
 8004afa:	0849      	lsrs	r1, r1, #1
 8004afc:	2000      	movs	r0, #0
 8004afe:	460c      	mov	r4, r1
 8004b00:	4605      	mov	r5, r0
 8004b02:	eb12 0804 	adds.w	r8, r2, r4
 8004b06:	eb43 0905 	adc.w	r9, r3, r5
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	469a      	mov	sl, r3
 8004b12:	4693      	mov	fp, r2
 8004b14:	4652      	mov	r2, sl
 8004b16:	465b      	mov	r3, fp
 8004b18:	4640      	mov	r0, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	f7fb ff6a 	bl	80009f4 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b2e:	d308      	bcc.n	8004b42 <UART_SetConfig+0x3d2>
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b36:	d204      	bcs.n	8004b42 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a3a      	ldr	r2, [r7, #32]
 8004b3e:	60da      	str	r2, [r3, #12]
 8004b40:	e0c8      	b.n	8004cd4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b48:	e0c4      	b.n	8004cd4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b52:	d167      	bne.n	8004c24 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004b54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d828      	bhi.n	8004bae <UART_SetConfig+0x43e>
 8004b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b64 <UART_SetConfig+0x3f4>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004baf 	.word	0x08004baf
 8004b74:	08004b9f 	.word	0x08004b9f
 8004b78:	08004baf 	.word	0x08004baf
 8004b7c:	08004baf 	.word	0x08004baf
 8004b80:	08004baf 	.word	0x08004baf
 8004b84:	08004ba7 	.word	0x08004ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b88:	f7fd fe46 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8004b8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b8e:	e014      	b.n	8004bba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b90:	f7fd fe58 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8004b94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b96:	e010      	b.n	8004bba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b98:	4b5a      	ldr	r3, [pc, #360]	@ (8004d04 <UART_SetConfig+0x594>)
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b9c:	e00d      	b.n	8004bba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9e:	f7fd fdcd 	bl	800273c <HAL_RCC_GetSysClockFreq>
 8004ba2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ba4:	e009      	b.n	8004bba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bac:	e005      	b.n	8004bba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8089 	beq.w	8004cd4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	4a4e      	ldr	r2, [pc, #312]	@ (8004d00 <UART_SetConfig+0x590>)
 8004bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bd4:	005a      	lsls	r2, r3, #1
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	441a      	add	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b0f      	cmp	r3, #15
 8004bec:	d916      	bls.n	8004c1c <UART_SetConfig+0x4ac>
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf4:	d212      	bcs.n	8004c1c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f023 030f 	bic.w	r3, r3, #15
 8004bfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	8bfb      	ldrh	r3, [r7, #30]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	8bfa      	ldrh	r2, [r7, #30]
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	e05b      	b.n	8004cd4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c22:	e057      	b.n	8004cd4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d828      	bhi.n	8004c7e <UART_SetConfig+0x50e>
 8004c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <UART_SetConfig+0x4c4>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fd fdde 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c5e:	e014      	b.n	8004c8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fd fdf0 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b26      	ldr	r3, [pc, #152]	@ (8004d04 <UART_SetConfig+0x594>)
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c6c:	e00d      	b.n	8004c8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fd fd65 	bl	800273c <HAL_RCC_GetSysClockFreq>
 8004c72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c88:	bf00      	nop
    }

    if (pclk != 0U)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d021      	beq.n	8004cd4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	4a1a      	ldr	r2, [pc, #104]	@ (8004d00 <UART_SetConfig+0x590>)
 8004c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	441a      	add	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	d909      	bls.n	8004cce <UART_SetConfig+0x55e>
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc0:	d205      	bcs.n	8004cce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60da      	str	r2, [r3, #12]
 8004ccc:	e002      	b.n	8004cd4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004cf0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3730      	adds	r7, #48	@ 0x30
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	08005494 	.word	0x08005494
 8004d04:	00f42400 	.word	0x00f42400

08004d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e06:	d10a      	bne.n	8004e1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b098      	sub	sp, #96	@ 0x60
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e5c:	f7fc fbf6 	bl	800164c <HAL_GetTick>
 8004e60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d12f      	bne.n	8004ed0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f88e 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d022      	beq.n	8004ed0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e6      	bne.n	8004e8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e063      	b.n	8004f98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d149      	bne.n	8004f72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ede:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f857 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d03c      	beq.n	8004f72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	623b      	str	r3, [r7, #32]
   return(result);
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e6      	bne.n	8004ef8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3308      	adds	r3, #8
 8004f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3308      	adds	r3, #8
 8004f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f4a:	61fa      	str	r2, [r7, #28]
 8004f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	69b9      	ldr	r1, [r7, #24]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	617b      	str	r3, [r7, #20]
   return(result);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e012      	b.n	8004f98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3758      	adds	r7, #88	@ 0x58
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb0:	e04f      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d04b      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fc fb47 	bl	800164c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e04e      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d037      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b80      	cmp	r3, #128	@ 0x80
 8004fe6:	d034      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b40      	cmp	r3, #64	@ 0x40
 8004fec:	d031      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d110      	bne.n	800501e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2208      	movs	r2, #8
 8005002:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f838 	bl	800507a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2208      	movs	r2, #8
 800500e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e029      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800502c:	d111      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005036:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f81e 	bl	800507a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e00f      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	429a      	cmp	r2, r3
 800506e:	d0a0      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800507a:	b480      	push	{r7}
 800507c:	b095      	sub	sp, #84	@ 0x54
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e6      	bne.n	8005082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e3      	bne.n	80050b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d118      	bne.n	8005126 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	60bb      	str	r3, [r7, #8]
   return(result);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f023 0310 	bic.w	r3, r3, #16
 8005108:	647b      	str	r3, [r7, #68]	@ 0x44
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6979      	ldr	r1, [r7, #20]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	613b      	str	r3, [r7, #16]
   return(result);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e6      	bne.n	80050f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800513a:	bf00      	nop
 800513c:	3754      	adds	r7, #84	@ 0x54
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff faed 	bl	8004744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b088      	sub	sp, #32
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	60bb      	str	r3, [r7, #8]
   return(result);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	6979      	ldr	r1, [r7, #20]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	613b      	str	r3, [r7, #16]
   return(result);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e6      	bne.n	800517a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fab8 	bl	8004730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c0:	bf00      	nop
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_UARTEx_DisableFifoMode+0x16>
 8005216:	2302      	movs	r3, #2
 8005218:	e027      	b.n	800526a <HAL_UARTEx_DisableFifoMode+0x66>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2224      	movs	r2, #36	@ 0x24
 8005226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005248:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800528a:	2302      	movs	r3, #2
 800528c:	e02d      	b.n	80052ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2224      	movs	r2, #36	@ 0x24
 800529a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f850 	bl	8005370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005306:	2302      	movs	r3, #2
 8005308:	e02d      	b.n	8005366 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2224      	movs	r2, #36	@ 0x24
 8005316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0201 	bic.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f812 	bl	8005370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800537c:	2b00      	cmp	r3, #0
 800537e:	d108      	bne.n	8005392 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005390:	e031      	b.n	80053f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005392:	2308      	movs	r3, #8
 8005394:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005396:	2308      	movs	r3, #8
 8005398:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	0e5b      	lsrs	r3, r3, #25
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	0f5b      	lsrs	r3, r3, #29
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	7b3a      	ldrb	r2, [r7, #12]
 80053be:	4911      	ldr	r1, [pc, #68]	@ (8005404 <UARTEx_SetNbDataToProcess+0x94>)
 80053c0:	5c8a      	ldrb	r2, [r1, r2]
 80053c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053c6:	7b3a      	ldrb	r2, [r7, #12]
 80053c8:	490f      	ldr	r1, [pc, #60]	@ (8005408 <UARTEx_SetNbDataToProcess+0x98>)
 80053ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	7b7a      	ldrb	r2, [r7, #13]
 80053dc:	4909      	ldr	r1, [pc, #36]	@ (8005404 <UARTEx_SetNbDataToProcess+0x94>)
 80053de:	5c8a      	ldrb	r2, [r1, r2]
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053e4:	7b7a      	ldrb	r2, [r7, #13]
 80053e6:	4908      	ldr	r1, [pc, #32]	@ (8005408 <UARTEx_SetNbDataToProcess+0x98>)
 80053e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	080054ac 	.word	0x080054ac
 8005408:	080054b4 	.word	0x080054b4

0800540c <memset>:
 800540c:	4402      	add	r2, r0
 800540e:	4603      	mov	r3, r0
 8005410:	4293      	cmp	r3, r2
 8005412:	d100      	bne.n	8005416 <memset+0xa>
 8005414:	4770      	bx	lr
 8005416:	f803 1b01 	strb.w	r1, [r3], #1
 800541a:	e7f9      	b.n	8005410 <memset+0x4>

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	@ (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	@ (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	@ (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	@ (8005460 <__libc_init_array+0x44>)
 8005430:	f000 f818 	bl	8005464 <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	080054c4 	.word	0x080054c4
 8005458:	080054c4 	.word	0x080054c4
 800545c:	080054c4 	.word	0x080054c4
 8005460:	080054c8 	.word	0x080054c8

08005464 <_init>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	bf00      	nop
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr

08005470 <_fini>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	bf00      	nop
 8005474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005476:	bc08      	pop	{r3}
 8005478:	469e      	mov	lr, r3
 800547a:	4770      	bx	lr
