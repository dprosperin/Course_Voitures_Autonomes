
tp4_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004814  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a2c  08004a2c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a2c  08004a2c  00005a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a34  08004a34  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a38  08004a38  00005a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004a48  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004a48  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013262  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002934  00000000  00000000  0001929e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0001bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf2  00000000  00000000  0001cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df1a  00000000  00000000  0001d96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a03  00000000  00000000  0003b884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2423  00000000  00000000  00050287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001126aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000457c  00000000  00000000  001126f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  00116c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080049d4 	.word	0x080049d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080049d4 	.word	0x080049d4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b17      	ldr	r3, [pc, #92]	@ (800057c <MX_GPIO_Init+0x74>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a16      	ldr	r2, [pc, #88]	@ (800057c <MX_GPIO_Init+0x74>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <MX_GPIO_Init+0x74>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_GPIO_Init+0x74>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a10      	ldr	r2, [pc, #64]	@ (800057c <MX_GPIO_Init+0x74>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_GPIO_Init+0x74>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2140      	movs	r1, #64	@ 0x40
 8000552:	480b      	ldr	r0, [pc, #44]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000554:	f000 ff1e 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dir_Pin;
 8000558:	2340      	movs	r3, #64	@ 0x40
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dir_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000570:	f000 fd8e 	bl	8001090 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	48000400 	.word	0x48000400

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fb1f 	bl	8000bca <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f824 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f7ff ffba 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fa44 	bl	8000a20 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000598:	f000 f938 	bl	800080c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800059c:	2100      	movs	r1, #0
 800059e:	480b      	ldr	r0, [pc, #44]	@ (80005cc <main+0x48>)
 80005a0:	f001 ff9a 	bl	80024d8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PWM_dir_and_cycle(1,&htim1, TIM_CHANNEL_1, 0.2);
 80005a4:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80005d0 <main+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	4908      	ldr	r1, [pc, #32]	@ (80005cc <main+0x48>)
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 f865 	bl	800067c <PWM_dir_and_cycle>
	  HAL_Delay(10000);
 80005b2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80005b6:	f000 fb79 	bl	8000cac <HAL_Delay>
	  PWM_dir_and_cycle(0,&htim1, TIM_CHANNEL_1, 0.00);
 80005ba:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80005d4 <main+0x50>
 80005be:	2200      	movs	r2, #0
 80005c0:	4902      	ldr	r1, [pc, #8]	@ (80005cc <main+0x48>)
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f85a 	bl	800067c <PWM_dir_and_cycle>
	  while(1);
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <main+0x44>
 80005cc:	20000028 	.word	0x20000028
 80005d0:	3e4ccccd 	.word	0x3e4ccccd
 80005d4:	00000000 	.word	0x00000000

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	2238      	movs	r2, #56	@ 0x38
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 f9c8 	bl	800497c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 fee2 	bl	80013c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060a:	2340      	movs	r3, #64	@ 0x40
 800060c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000616:	2304      	movs	r3, #4
 8000618:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800061a:	2355      	movs	r3, #85	@ 0x55
 800061c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	4618      	mov	r0, r3
 8000630:	f000 ff7c 	bl	800152c <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800063a:	f000 f818 	bl	800066e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2303      	movs	r3, #3
 8000644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2104      	movs	r1, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fa7a 	bl	8001b50 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000662:	f000 f804 	bl	800066e <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000672:	b672      	cpsid	i
}
 8000674:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000676:	bf00      	nop
 8000678:	e7fd      	b.n	8000676 <Error_Handler+0x8>
	...

0800067c <PWM_dir_and_cycle>:
void PWM_dir(int dir)
{
	HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, dir);
}
void PWM_dir_and_cycle(int dir,TIM_HandleTypeDef *htim, uint32_t pwm_channel, float duty_cycle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	ed87 0a00 	vstr	s0, [r7]
	HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, dir);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2140      	movs	r1, #64	@ 0x40
 8000694:	4824      	ldr	r0, [pc, #144]	@ (8000728 <PWM_dir_and_cycle+0xac>)
 8000696:	f000 fe7d 	bl	8001394 <HAL_GPIO_WritePin>
	uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(htim);
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a0:	617b      	str	r3, [r7, #20]
    uint32_t CRR = duty_cycle*(ARR+1)-1;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3301      	adds	r3, #1
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006ae:	edd7 7a00 	vldr	s15, [r7]
 80006b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c2:	ee17 3a90 	vmov	r3, s15
 80006c6:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d104      	bne.n	80006d8 <PWM_dir_and_cycle+0x5c>
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80006d6:	e023      	b.n	8000720 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d104      	bne.n	80006e8 <PWM_dir_and_cycle+0x6c>
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80006e6:	e01b      	b.n	8000720 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b08      	cmp	r3, #8
 80006ec:	d104      	bne.n	80006f8 <PWM_dir_and_cycle+0x7c>
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80006f6:	e013      	b.n	8000720 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b0c      	cmp	r3, #12
 80006fc:	d104      	bne.n	8000708 <PWM_dir_and_cycle+0x8c>
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000706:	e00b      	b.n	8000720 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b10      	cmp	r3, #16
 800070c:	d104      	bne.n	8000718 <PWM_dir_and_cycle+0x9c>
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8000716:	e003      	b.n	8000720 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	48000400 	.word	0x48000400

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <HAL_MspInit+0x44>)
 8000734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000736:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <HAL_MspInit+0x44>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6613      	str	r3, [r2, #96]	@ 0x60
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_MspInit+0x44>)
 8000740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <HAL_MspInit+0x44>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <HAL_MspInit+0x44>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000754:	6593      	str	r3, [r2, #88]	@ 0x58
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <HAL_MspInit+0x44>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000762:	f000 fed3 	bl	800150c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <MemManage_Handler+0x4>

0800078c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <UsageFault_Handler+0x4>

0800079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ca:	f000 fa51 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007d8:	4802      	ldr	r0, [pc, #8]	@ (80007e4 <USART2_IRQHandler+0x10>)
 80007da:	f002 ff3d 	bl	8003658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000074 	.word	0x20000074

080007e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <SystemInit+0x20>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007f2:	4a05      	ldr	r2, [pc, #20]	@ (8000808 <SystemInit+0x20>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09c      	sub	sp, #112	@ 0x70
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2234      	movs	r2, #52	@ 0x34
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f004 f898 	bl	800497c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084c:	4b46      	ldr	r3, [pc, #280]	@ (8000968 <MX_TIM1_Init+0x15c>)
 800084e:	4a47      	ldr	r2, [pc, #284]	@ (800096c <MX_TIM1_Init+0x160>)
 8000850:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000852:	4b45      	ldr	r3, [pc, #276]	@ (8000968 <MX_TIM1_Init+0x15c>)
 8000854:	2201      	movs	r2, #1
 8000856:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b43      	ldr	r3, [pc, #268]	@ (8000968 <MX_TIM1_Init+0x15c>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8500;
 800085e:	4b42      	ldr	r3, [pc, #264]	@ (8000968 <MX_TIM1_Init+0x15c>)
 8000860:	f242 1234 	movw	r2, #8500	@ 0x2134
 8000864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b40      	ldr	r3, [pc, #256]	@ (8000968 <MX_TIM1_Init+0x15c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086c:	4b3e      	ldr	r3, [pc, #248]	@ (8000968 <MX_TIM1_Init+0x15c>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b3d      	ldr	r3, [pc, #244]	@ (8000968 <MX_TIM1_Init+0x15c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000878:	483b      	ldr	r0, [pc, #236]	@ (8000968 <MX_TIM1_Init+0x15c>)
 800087a:	f001 fd75 	bl	8002368 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000884:	f7ff fef3 	bl	800066e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000892:	4619      	mov	r1, r3
 8000894:	4834      	ldr	r0, [pc, #208]	@ (8000968 <MX_TIM1_Init+0x15c>)
 8000896:	f002 f833 	bl	8002900 <HAL_TIM_ConfigClockSource>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008a0:	f7ff fee5 	bl	800066e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a4:	4830      	ldr	r0, [pc, #192]	@ (8000968 <MX_TIM1_Init+0x15c>)
 80008a6:	f001 fdb6 	bl	8002416 <HAL_TIM_PWM_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008b0:	f7ff fedd 	bl	800066e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008c4:	4619      	mov	r1, r3
 80008c6:	4828      	ldr	r0, [pc, #160]	@ (8000968 <MX_TIM1_Init+0x15c>)
 80008c8:	f002 fd68 	bl	800339c <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008d2:	f7ff fecc 	bl	800066e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d6:	2360      	movs	r3, #96	@ 0x60
 80008d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 80008da:	f241 0399 	movw	r3, #4249	@ 0x1099
 80008de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e0:	2300      	movs	r3, #0
 80008e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	481a      	ldr	r0, [pc, #104]	@ (8000968 <MX_TIM1_Init+0x15c>)
 80008fe:	f001 feeb 	bl	80026d8 <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000908:	f7ff feb1 	bl	800066e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <MX_TIM1_Init+0x15c>)
 800094a:	f002 fda9 	bl	80034a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000954:	f7ff fe8b 	bl	800066e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <MX_TIM1_Init+0x15c>)
 800095a:	f000 f829 	bl	80009b0 <HAL_TIM_MspPostInit>

}
 800095e:	bf00      	nop
 8000960:	3770      	adds	r7, #112	@ 0x70
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000028 	.word	0x20000028
 800096c:	40012c00 	.word	0x40012c00

08000970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_TIM_Base_MspInit+0x38>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d10b      	bne.n	800099a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	4a09      	ldr	r2, [pc, #36]	@ (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800098c:	6613      	str	r3, [r2, #96]	@ 0x60
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40012c00 	.word	0x40012c00
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <HAL_TIM_MspPostInit+0x68>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d11d      	bne.n	8000a0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_TIM_MspPostInit+0x6c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a11      	ldr	r2, [pc, #68]	@ (8000a1c <HAL_TIM_MspPostInit+0x6c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <HAL_TIM_MspPostInit+0x6c>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009fc:	2306      	movs	r3, #6
 80009fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0a:	f000 fb41 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012c00 	.word	0x40012c00
 8000a1c:	40021000 	.word	0x40021000

08000a20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a26:	4a23      	ldr	r2, [pc, #140]	@ (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a56:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a62:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a68:	4811      	ldr	r0, [pc, #68]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a6a:	f002 fda5 	bl	80035b8 <HAL_UART_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a74:	f7ff fdfb 	bl	800066e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a7c:	f003 feb3 	bl	80047e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f7ff fdf2 	bl	800066e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a8e:	f003 fee8 	bl	8004862 <HAL_UARTEx_SetRxFifoThreshold>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a98:	f7ff fde9 	bl	800066e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <MX_USART2_UART_Init+0x90>)
 8000a9e:	f003 fe69 	bl	8004774 <HAL_UARTEx_DisableFifoMode>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa8:	f7ff fde1 	bl	800066e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000074 	.word	0x20000074
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09a      	sub	sp, #104	@ 0x68
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2244      	movs	r2, #68	@ 0x44
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 ff4f 	bl	800497c <memset>
  if(uartHandle->Instance==USART2)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a23      	ldr	r2, [pc, #140]	@ (8000b70 <HAL_UART_MspInit+0xb8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d13e      	bne.n	8000b66 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fa47 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b00:	f7ff fdb5 	bl	800066e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <HAL_UART_MspInit+0xbc>)
 8000b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b08:	4a1a      	ldr	r2, [pc, #104]	@ (8000b74 <HAL_UART_MspInit+0xbc>)
 8000b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_UART_MspInit+0xbc>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_UART_MspInit+0xbc>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b20:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <HAL_UART_MspInit+0xbc>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_UART_MspInit+0xbc>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b34:	230c      	movs	r3, #12
 8000b36:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b44:	2307      	movs	r3, #7
 8000b46:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f000 fa9d 	bl	8001090 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2026      	movs	r0, #38	@ 0x26
 8000b5c:	f000 f9a3 	bl	8000ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b60:	2026      	movs	r0, #38	@ 0x26
 8000b62:	f000 f9ba 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b66:	bf00      	nop
 8000b68:	3768      	adds	r7, #104	@ 0x68
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40021000 	.word	0x40021000

08000b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8000b78:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b7c:	f7ff fe34 	bl	80007e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f003 fef1 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000baa:	f7ff fceb 	bl	8000584 <main>

08000bae <LoopForever>:

LoopForever:
    b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
   ldr   r0, =_estack
 8000bb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bbc:	08004a3c 	.word	0x08004a3c
  ldr r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc4:	2000010c 	.word	0x2000010c

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>

08000bca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f95b 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 f80e 	bl	8000bfc <HAL_InitTick>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	e001      	b.n	8000bf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bec:	f7ff fd9e 	bl	800072c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]

}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c08:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <HAL_InitTick+0x68>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d022      	beq.n	8000c56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <HAL_InitTick+0x6c>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <HAL_InitTick+0x68>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f966 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10f      	bne.n	8000c50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	d809      	bhi.n	8000c4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c36:	2200      	movs	r2, #0
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3e:	f000 f932 	bl	8000ea6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <HAL_InitTick+0x70>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e007      	b.n	8000c5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e004      	b.n	8000c5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	e001      	b.n	8000c5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_IncTick+0x1c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <HAL_IncTick+0x1c>)
 8000c80:	6013      	str	r3, [r2, #0]
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20000108 	.word	0x20000108
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000108 	.word	0x20000108

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d004      	beq.n	8000cd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_Delay+0x40>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd0:	bf00      	nop
 8000cd2:	f7ff ffdf 	bl	8000c94 <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d8f7      	bhi.n	8000cd2 <HAL_Delay+0x26>
  {
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000008 	.word	0x20000008

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	@ (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff29 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff40 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff90 	bl	8000de4 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5f 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff33 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa4 	bl	8000e4c <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d005      	beq.n	8000f32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2204      	movs	r2, #4
 8000f2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e037      	b.n	8000fa2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 020e 	bic.w	r2, r2, #14
 8000f40:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f50:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	f003 021f 	and.w	r2, r3, #31
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f7e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00c      	beq.n	8000fa2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f96:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000fa0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e047      	b.n	8001084 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020e 	bic.w	r2, r2, #14
 8001002:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800101e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001040:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00c      	beq.n	8001064 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001058:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001062:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	4798      	blx	r3
    }
  }
  return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800109e:	e15a      	b.n	8001356 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 814c 	beq.w	8001350 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d005      	beq.n	80010d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 0201 	and.w	r2, r3, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b03      	cmp	r3, #3
 800113c:	d017      	beq.n	800116e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	6939      	ldr	r1, [r7, #16]
 80011be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0203 	and.w	r2, r3, #3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80a6 	beq.w	8001350 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001204:	4b5b      	ldr	r3, [pc, #364]	@ (8001374 <HAL_GPIO_Init+0x2e4>)
 8001206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001208:	4a5a      	ldr	r2, [pc, #360]	@ (8001374 <HAL_GPIO_Init+0x2e4>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001210:	4b58      	ldr	r3, [pc, #352]	@ (8001374 <HAL_GPIO_Init+0x2e4>)
 8001212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121c:	4a56      	ldr	r2, [pc, #344]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001246:	d01f      	beq.n	8001288 <HAL_GPIO_Init+0x1f8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a4c      	ldr	r2, [pc, #304]	@ (800137c <HAL_GPIO_Init+0x2ec>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d019      	beq.n	8001284 <HAL_GPIO_Init+0x1f4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a4b      	ldr	r2, [pc, #300]	@ (8001380 <HAL_GPIO_Init+0x2f0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1f0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4a      	ldr	r2, [pc, #296]	@ (8001384 <HAL_GPIO_Init+0x2f4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1ec>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a49      	ldr	r2, [pc, #292]	@ (8001388 <HAL_GPIO_Init+0x2f8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1e8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a48      	ldr	r2, [pc, #288]	@ (800138c <HAL_GPIO_Init+0x2fc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1e4>
 8001270:	2305      	movs	r3, #5
 8001272:	e00a      	b.n	800128a <HAL_GPIO_Init+0x1fa>
 8001274:	2306      	movs	r3, #6
 8001276:	e008      	b.n	800128a <HAL_GPIO_Init+0x1fa>
 8001278:	2304      	movs	r3, #4
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x1fa>
 800127c:	2303      	movs	r3, #3
 800127e:	e004      	b.n	800128a <HAL_GPIO_Init+0x1fa>
 8001280:	2302      	movs	r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x1fa>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x1fa>
 8001288:	2300      	movs	r3, #0
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129a:	4937      	ldr	r1, [pc, #220]	@ (8001378 <HAL_GPIO_Init+0x2e8>)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <HAL_GPIO_Init+0x300>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012cc:	4a30      	ldr	r2, [pc, #192]	@ (8001390 <HAL_GPIO_Init+0x300>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <HAL_GPIO_Init+0x300>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f6:	4a26      	ldr	r2, [pc, #152]	@ (8001390 <HAL_GPIO_Init+0x300>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_GPIO_Init+0x300>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001320:	4a1b      	ldr	r2, [pc, #108]	@ (8001390 <HAL_GPIO_Init+0x300>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_GPIO_Init+0x300>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800134a:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <HAL_GPIO_Init+0x300>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	f47f ae9d 	bne.w	80010a0 <HAL_GPIO_Init+0x10>
  }
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	48001400 	.word	0x48001400
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d141      	bne.n	8001456 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013de:	d131      	bne.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e0:	4b47      	ldr	r3, [pc, #284]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e6:	4a46      	ldr	r2, [pc, #280]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	4b43      	ldr	r3, [pc, #268]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013f8:	4a41      	ldr	r2, [pc, #260]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001400:	4b40      	ldr	r3, [pc, #256]	@ (8001504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2232      	movs	r2, #50	@ 0x32
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4a3f      	ldr	r2, [pc, #252]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	0c9b      	lsrs	r3, r3, #18
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001416:	e002      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3b01      	subs	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141e:	4b38      	ldr	r3, [pc, #224]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142a:	d102      	bne.n	8001432 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f2      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001432:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143e:	d158      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e057      	b.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001444:	4b2e      	ldr	r3, [pc, #184]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800144a:	4a2d      	ldr	r2, [pc, #180]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001450:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001454:	e04d      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800145c:	d141      	bne.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800145e:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146a:	d131      	bne.n	80014d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001472:	4a23      	ldr	r2, [pc, #140]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001478:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001484:	4a1e      	ldr	r2, [pc, #120]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800148a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2232      	movs	r2, #50	@ 0x32
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	3301      	adds	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a2:	e002      	b.n	80014aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b6:	d102      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f2      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ca:	d112      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e011      	b.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014e0:	e007      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40007000 	.word	0x40007000
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83

0800150c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151a:	6093      	str	r3, [r2, #8]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000

0800152c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e2fe      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d075      	beq.n	8001636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154a:	4b97      	ldr	r3, [pc, #604]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001554:	4b94      	ldr	r3, [pc, #592]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b0c      	cmp	r3, #12
 8001562:	d102      	bne.n	800156a <HAL_RCC_OscConfig+0x3e>
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d002      	beq.n	8001570 <HAL_RCC_OscConfig+0x44>
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b08      	cmp	r3, #8
 800156e:	d10b      	bne.n	8001588 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	4b8d      	ldr	r3, [pc, #564]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d05b      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d157      	bne.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e2d9      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001590:	d106      	bne.n	80015a0 <HAL_RCC_OscConfig+0x74>
 8001592:	4b85      	ldr	r3, [pc, #532]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a84      	ldr	r2, [pc, #528]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xb0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x98>
 80015aa:	4b7f      	ldr	r3, [pc, #508]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a7e      	ldr	r2, [pc, #504]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b7c      	ldr	r3, [pc, #496]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7b      	ldr	r2, [pc, #492]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xb0>
 80015c4:	4b78      	ldr	r3, [pc, #480]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a77      	ldr	r2, [pc, #476]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b75      	ldr	r3, [pc, #468]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a74      	ldr	r2, [pc, #464]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb56 	bl	8000c94 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb52 	bl	8000c94 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e29e      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4b6a      	ldr	r3, [pc, #424]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xc0>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fb42 	bl	8000c94 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fb3e 	bl	8000c94 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	@ 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e28a      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001626:	4b60      	ldr	r3, [pc, #384]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d075      	beq.n	800172e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001642:	4b59      	ldr	r3, [pc, #356]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800164c:	4b56      	ldr	r3, [pc, #344]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0x136>
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d002      	beq.n	8001668 <HAL_RCC_OscConfig+0x13c>
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b04      	cmp	r3, #4
 8001666:	d11f      	bne.n	80016a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001668:	4b4f      	ldr	r3, [pc, #316]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_OscConfig+0x154>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e25d      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	4946      	ldr	r1, [pc, #280]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001694:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <HAL_RCC_OscConfig+0x280>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff faaf 	bl	8000bfc <HAL_InitTick>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d043      	beq.n	800172c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e249      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d023      	beq.n	80016f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a3c      	ldr	r2, [pc, #240]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff faea 	bl	8000c94 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fae6 	bl	8000c94 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e232      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d6:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b31      	ldr	r3, [pc, #196]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	061b      	lsls	r3, r3, #24
 80016f0:	492d      	ldr	r1, [pc, #180]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
 80016f6:	e01a      	b.n	800172e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f8:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a2a      	ldr	r2, [pc, #168]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fac6 	bl	8000c94 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fac2 	bl	8000c94 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e20e      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1e0>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d041      	beq.n	80017be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01c      	beq.n	800177c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001748:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fa9f 	bl	8000c94 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175a:	f7ff fa9b 	bl	8000c94 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1e7      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176c:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0ef      	beq.n	800175a <HAL_RCC_OscConfig+0x22e>
 800177a:	e020      	b.n	80017be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fa82 	bl	8000c94 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001792:	e00d      	b.n	80017b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fa7e 	bl	8000c94 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d906      	bls.n	80017b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e1ca      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b0:	4b8c      	ldr	r3, [pc, #560]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ea      	bne.n	8001794 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80a6 	beq.w	8001918 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017d0:	4b84      	ldr	r3, [pc, #528]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_OscConfig+0x2b4>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x2b6>
 80017e0:	2300      	movs	r3, #0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00d      	beq.n	8001802 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b7f      	ldr	r3, [pc, #508]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	4a7e      	ldr	r2, [pc, #504]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f2:	4b7c      	ldr	r3, [pc, #496]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017fe:	2301      	movs	r3, #1
 8001800:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001802:	4b79      	ldr	r3, [pc, #484]	@ (80019e8 <HAL_RCC_OscConfig+0x4bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d118      	bne.n	8001840 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800180e:	4b76      	ldr	r3, [pc, #472]	@ (80019e8 <HAL_RCC_OscConfig+0x4bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a75      	ldr	r2, [pc, #468]	@ (80019e8 <HAL_RCC_OscConfig+0x4bc>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181a:	f7ff fa3b 	bl	8000c94 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001822:	f7ff fa37 	bl	8000c94 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e183      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	4b6c      	ldr	r3, [pc, #432]	@ (80019e8 <HAL_RCC_OscConfig+0x4bc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d108      	bne.n	800185a <HAL_RCC_OscConfig+0x32e>
 8001848:	4b66      	ldr	r3, [pc, #408]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184e:	4a65      	ldr	r2, [pc, #404]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001858:	e024      	b.n	80018a4 <HAL_RCC_OscConfig+0x378>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d110      	bne.n	8001884 <HAL_RCC_OscConfig+0x358>
 8001862:	4b60      	ldr	r3, [pc, #384]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001868:	4a5e      	ldr	r2, [pc, #376]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001872:	4b5c      	ldr	r3, [pc, #368]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001878:	4a5a      	ldr	r2, [pc, #360]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001882:	e00f      	b.n	80018a4 <HAL_RCC_OscConfig+0x378>
 8001884:	4b57      	ldr	r3, [pc, #348]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188a:	4a56      	ldr	r2, [pc, #344]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189a:	4a52      	ldr	r2, [pc, #328]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d016      	beq.n	80018da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff f9f2 	bl	8000c94 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff f9ee 	bl	8000c94 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e138      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ca:	4b46      	ldr	r3, [pc, #280]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ed      	beq.n	80018b4 <HAL_RCC_OscConfig+0x388>
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff f9db 	bl	8000c94 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff f9d7 	bl	8000c94 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e121      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f8:	4b3a      	ldr	r3, [pc, #232]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ed      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b35      	ldr	r3, [pc, #212]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	4a34      	ldr	r2, [pc, #208]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01c      	beq.n	8001966 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800192c:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 800192e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001932:	4a2c      	ldr	r2, [pc, #176]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff f9aa 	bl	8000c94 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001944:	f7ff f9a6 	bl	8000c94 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0f2      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ef      	beq.n	8001944 <HAL_RCC_OscConfig+0x418>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001966:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800196c:	4a1d      	ldr	r2, [pc, #116]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff f98d 	bl	8000c94 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197e:	f7ff f989 	bl	8000c94 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0d5      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 8001992:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80c9 	beq.w	8001b3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019a8:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	f000 8083 	beq.w	8001abc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d15e      	bne.n	8001a7c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_RCC_OscConfig+0x4b8>)
 80019c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff f963 	bl	8000c94 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d0:	e00c      	b.n	80019ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff f95f 	bl	8000c94 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d905      	bls.n	80019ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0ab      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ec:	4b55      	ldr	r3, [pc, #340]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ec      	bne.n	80019d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f8:	4b52      	ldr	r3, [pc, #328]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	4b52      	ldr	r3, [pc, #328]	@ (8001b48 <HAL_RCC_OscConfig+0x61c>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6a11      	ldr	r1, [r2, #32]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a12:	0212      	lsls	r2, r2, #8
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a1a:	0852      	lsrs	r2, r2, #1
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	0552      	lsls	r2, r2, #21
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a26:	0852      	lsrs	r2, r2, #1
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0652      	lsls	r2, r2, #25
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a32:	06d2      	lsls	r2, r2, #27
 8001a34:	430a      	orrs	r2, r1
 8001a36:	4943      	ldr	r1, [pc, #268]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b41      	ldr	r3, [pc, #260]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a40      	ldr	r2, [pc, #256]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a48:	4b3e      	ldr	r3, [pc, #248]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f91e 	bl	8000c94 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f91a 	bl	8000c94 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e066      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	4b35      	ldr	r3, [pc, #212]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x530>
 8001a7a:	e05e      	b.n	8001b3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b31      	ldr	r3, [pc, #196]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a30      	ldr	r2, [pc, #192]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f904 	bl	8000c94 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f900 	bl	8000c94 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e04c      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001aae:	4b25      	ldr	r3, [pc, #148]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	4924      	ldr	r1, [pc, #144]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001ab4:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <HAL_RCC_OscConfig+0x620>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	60cb      	str	r3, [r1, #12]
 8001aba:	e03e      	b.n	8001b3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e039      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <HAL_RCC_OscConfig+0x618>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d12c      	bne.n	8001b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d123      	bne.n	8001b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d11b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d113      	bne.n	8001b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	019f800c 	.word	0x019f800c
 8001b4c:	feeefffc 	.word	0xfeeefffc

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e11e      	b.n	8001da6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b91      	ldr	r3, [pc, #580]	@ (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d910      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b8e      	ldr	r3, [pc, #568]	@ (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 020f 	bic.w	r2, r3, #15
 8001b7e:	498c      	ldr	r1, [pc, #560]	@ (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b8a      	ldr	r3, [pc, #552]	@ (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e106      	b.n	8001da6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d073      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d129      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bac:	4b81      	ldr	r3, [pc, #516]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0f4      	b.n	8001da6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bbc:	f000 f99e 	bl	8001efc <RCC_GetSysClockFreqFromPLLSource>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4a7c      	ldr	r2, [pc, #496]	@ (8001db8 <HAL_RCC_ClockConfig+0x268>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d93f      	bls.n	8001c4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bca:	4b7a      	ldr	r3, [pc, #488]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d033      	beq.n	8001c4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d12f      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bea:	4b72      	ldr	r3, [pc, #456]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bf2:	4a70      	ldr	r2, [pc, #448]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e024      	b.n	8001c4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c08:	4b6a      	ldr	r3, [pc, #424]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0c6      	b.n	8001da6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c18:	4b66      	ldr	r3, [pc, #408]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0be      	b.n	8001da6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c28:	f000 f8ce 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4a61      	ldr	r2, [pc, #388]	@ (8001db8 <HAL_RCC_ClockConfig+0x268>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d909      	bls.n	8001c4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c36:	4b5f      	ldr	r3, [pc, #380]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c3e:	4a5d      	ldr	r2, [pc, #372]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4957      	ldr	r1, [pc, #348]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c5c:	f7ff f81a 	bl	8000c94 <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c64:	f7ff f816 	bl	8000c94 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e095      	b.n	8001da6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 020c 	and.w	r2, r3, #12
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1eb      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b43      	ldr	r3, [pc, #268]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a42      	ldr	r2, [pc, #264]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001cc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b39      	ldr	r3, [pc, #228]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4936      	ldr	r1, [pc, #216]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b80      	cmp	r3, #128	@ 0x80
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ce6:	4b33      	ldr	r3, [pc, #204]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	4a32      	ldr	r2, [pc, #200]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cf0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d21d      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d00:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 020f 	bic.w	r2, r3, #15
 8001d08:	4929      	ldr	r1, [pc, #164]	@ (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d10:	f7fe ffc0 	bl	8000c94 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f7fe ffbc 	bl	8000c94 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e03b      	b.n	8001da6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1ed      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4917      	ldr	r1, [pc, #92]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490f      	ldr	r1, [pc, #60]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d7a:	f000 f825 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <HAL_RCC_ClockConfig+0x26c>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_RCC_ClockConfig+0x270>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_RCC_ClockConfig+0x274>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ff2c 	bl	8000bfc <HAL_InitTick>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	04c4b400 	.word	0x04c4b400
 8001dbc:	080049ec 	.word	0x080049ec
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dce:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	e047      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001de0:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dec:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e03e      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001df2:	4b23      	ldr	r3, [pc, #140]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d136      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3301      	adds	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	4a16      	ldr	r2, [pc, #88]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e26:	68d2      	ldr	r2, [r2, #12]
 8001e28:	0a12      	lsrs	r2, r2, #8
 8001e2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
      break;
 8001e34:	e00c      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e36:	4a13      	ldr	r2, [pc, #76]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e40:	68d2      	ldr	r2, [r2, #12]
 8001e42:	0a12      	lsrs	r2, r2, #8
 8001e44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
      break;
 8001e4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0e5b      	lsrs	r3, r3, #25
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	e001      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e70:	693b      	ldr	r3, [r7, #16]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	00f42400 	.word	0x00f42400
 8001e88:	007a1200 	.word	0x007a1200

08001e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4904      	ldr	r1, [pc, #16]	@ (8001ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	080049fc 	.word	0x080049fc

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ed4:	f7ff ffda 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0adb      	lsrs	r3, r3, #11
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4904      	ldr	r1, [pc, #16]	@ (8001ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	080049fc 	.word	0x080049fc

08001efc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f02:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3301      	adds	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d10c      	bne.n	8001f3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2a:	68d2      	ldr	r2, [r2, #12]
 8001f2c:	0a12      	lsrs	r2, r2, #8
 8001f2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
    break;
 8001f38:	e00c      	b.n	8001f54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f3a:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f44:	68d2      	ldr	r2, [r2, #12]
 8001f46:	0a12      	lsrs	r2, r2, #8
 8001f48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    break;
 8001f52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0e5b      	lsrs	r3, r3, #25
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	007a1200 	.word	0x007a1200
 8001f84:	00f42400 	.word	0x00f42400

08001f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f90:	2300      	movs	r3, #0
 8001f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f94:	2300      	movs	r3, #0
 8001f96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8098 	beq.w	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b43      	ldr	r3, [pc, #268]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b40      	ldr	r3, [pc, #256]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	4a3f      	ldr	r2, [pc, #252]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a39      	ldr	r2, [pc, #228]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fde:	f7fe fe59 	bl	8000c94 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe4:	e009      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe6:	f7fe fe55 	bl	8000c94 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	74fb      	strb	r3, [r7, #19]
        break;
 8001ff8:	e005      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ffa:	4b30      	ldr	r3, [pc, #192]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ef      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d159      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002016:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01e      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	d019      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002028:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002032:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	4a1f      	ldr	r2, [pc, #124]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002044:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204a:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002054:	4a18      	ldr	r2, [pc, #96]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7fe fe15 	bl	8000c94 <HAL_GetTick>
 800206a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206c:	e00b      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fe11 	bl	8000c94 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d902      	bls.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	74fb      	strb	r3, [r7, #19]
            break;
 8002084:	e006      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ec      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4903      	ldr	r1, [pc, #12]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020b0:	e008      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	74bb      	strb	r3, [r7, #18]
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c4:	7c7b      	ldrb	r3, [r7, #17]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	4aa5      	ldr	r2, [pc, #660]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e8:	f023 0203 	bic.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	499c      	ldr	r1, [pc, #624]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002104:	4b97      	ldr	r3, [pc, #604]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f023 020c 	bic.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4994      	ldr	r1, [pc, #592]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002126:	4b8f      	ldr	r3, [pc, #572]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	498b      	ldr	r1, [pc, #556]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002148:	4b86      	ldr	r3, [pc, #536]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	4983      	ldr	r1, [pc, #524]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800216a:	4b7e      	ldr	r3, [pc, #504]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	497a      	ldr	r1, [pc, #488]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218c:	4b75      	ldr	r3, [pc, #468]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4972      	ldr	r1, [pc, #456]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4969      	ldr	r1, [pc, #420]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d0:	4b64      	ldr	r3, [pc, #400]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4961      	ldr	r1, [pc, #388]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	4958      	ldr	r1, [pc, #352]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d015      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002214:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	4950      	ldr	r1, [pc, #320]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002232:	d105      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b4b      	ldr	r3, [pc, #300]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a4a      	ldr	r2, [pc, #296]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800224c:	4b45      	ldr	r3, [pc, #276]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	4942      	ldr	r1, [pc, #264]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800226a:	d105      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800226c:	4b3d      	ldr	r3, [pc, #244]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a3c      	ldr	r2, [pc, #240]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002276:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d015      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002284:	4b37      	ldr	r3, [pc, #220]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4934      	ldr	r1, [pc, #208]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a2:	d105      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022bc:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ca:	4926      	ldr	r1, [pc, #152]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022da:	d105      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022dc:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a20      	ldr	r2, [pc, #128]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d015      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002302:	4918      	ldr	r1, [pc, #96]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002312:	d105      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002314:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800231e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233a:	490a      	ldr	r1, [pc, #40]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800234a:	d105      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002356:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002358:	7cbb      	ldrb	r3, [r7, #18]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000

08002368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e049      	b.n	800240e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe faee 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f000 fba4 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e049      	b.n	80024bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f841 	bl	80024c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f000 fb4d 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_TIM_PWM_Start+0x24>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e03c      	b.n	8002576 <HAL_TIM_PWM_Start+0x9e>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d109      	bne.n	8002516 <HAL_TIM_PWM_Start+0x3e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b01      	cmp	r3, #1
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e02f      	b.n	8002576 <HAL_TIM_PWM_Start+0x9e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d109      	bne.n	8002530 <HAL_TIM_PWM_Start+0x58>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e022      	b.n	8002576 <HAL_TIM_PWM_Start+0x9e>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d109      	bne.n	800254a <HAL_TIM_PWM_Start+0x72>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	e015      	b.n	8002576 <HAL_TIM_PWM_Start+0x9e>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b10      	cmp	r3, #16
 800254e:	d109      	bne.n	8002564 <HAL_TIM_PWM_Start+0x8c>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e008      	b.n	8002576 <HAL_TIM_PWM_Start+0x9e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e097      	b.n	80026ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0xb6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800258c:	e023      	b.n	80025d6 <HAL_TIM_PWM_Start+0xfe>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d104      	bne.n	800259e <HAL_TIM_PWM_Start+0xc6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800259c:	e01b      	b.n	80025d6 <HAL_TIM_PWM_Start+0xfe>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_PWM_Start+0xd6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ac:	e013      	b.n	80025d6 <HAL_TIM_PWM_Start+0xfe>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	d104      	bne.n	80025be <HAL_TIM_PWM_Start+0xe6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80025bc:	e00b      	b.n	80025d6 <HAL_TIM_PWM_Start+0xfe>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_PWM_Start+0xf6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025cc:	e003      	b.n	80025d6 <HAL_TIM_PWM_Start+0xfe>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	6839      	ldr	r1, [r7, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 feb6 	bl	8003350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a33      	ldr	r2, [pc, #204]	@ (80026b8 <HAL_TIM_PWM_Start+0x1e0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_TIM_PWM_Start+0x13e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a32      	ldr	r2, [pc, #200]	@ (80026bc <HAL_TIM_PWM_Start+0x1e4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_TIM_PWM_Start+0x13e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a30      	ldr	r2, [pc, #192]	@ (80026c0 <HAL_TIM_PWM_Start+0x1e8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_TIM_PWM_Start+0x13e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2f      	ldr	r2, [pc, #188]	@ (80026c4 <HAL_TIM_PWM_Start+0x1ec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIM_PWM_Start+0x13e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2d      	ldr	r2, [pc, #180]	@ (80026c8 <HAL_TIM_PWM_Start+0x1f0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_TIM_PWM_Start+0x142>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_TIM_PWM_Start+0x144>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800262e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a20      	ldr	r2, [pc, #128]	@ (80026b8 <HAL_TIM_PWM_Start+0x1e0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d018      	beq.n	800266c <HAL_TIM_PWM_Start+0x194>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002642:	d013      	beq.n	800266c <HAL_TIM_PWM_Start+0x194>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a20      	ldr	r2, [pc, #128]	@ (80026cc <HAL_TIM_PWM_Start+0x1f4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00e      	beq.n	800266c <HAL_TIM_PWM_Start+0x194>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1f      	ldr	r2, [pc, #124]	@ (80026d0 <HAL_TIM_PWM_Start+0x1f8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_TIM_PWM_Start+0x194>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a17      	ldr	r2, [pc, #92]	@ (80026bc <HAL_TIM_PWM_Start+0x1e4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_TIM_PWM_Start+0x194>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a16      	ldr	r2, [pc, #88]	@ (80026c0 <HAL_TIM_PWM_Start+0x1e8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d115      	bne.n	8002698 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <HAL_TIM_PWM_Start+0x1fc>)
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b06      	cmp	r3, #6
 800267c:	d015      	beq.n	80026aa <HAL_TIM_PWM_Start+0x1d2>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002684:	d011      	beq.n	80026aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002696:	e008      	b.n	80026aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e000      	b.n	80026ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40013400 	.word	0x40013400
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40014400 	.word	0x40014400
 80026c8:	40014800 	.word	0x40014800
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	00010007 	.word	0x00010007

080026d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0ff      	b.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b14      	cmp	r3, #20
 8002702:	f200 80f0 	bhi.w	80028e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002706:	a201      	add	r2, pc, #4	@ (adr r2, 800270c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002761 	.word	0x08002761
 8002710:	080028e7 	.word	0x080028e7
 8002714:	080028e7 	.word	0x080028e7
 8002718:	080028e7 	.word	0x080028e7
 800271c:	080027a1 	.word	0x080027a1
 8002720:	080028e7 	.word	0x080028e7
 8002724:	080028e7 	.word	0x080028e7
 8002728:	080028e7 	.word	0x080028e7
 800272c:	080027e3 	.word	0x080027e3
 8002730:	080028e7 	.word	0x080028e7
 8002734:	080028e7 	.word	0x080028e7
 8002738:	080028e7 	.word	0x080028e7
 800273c:	08002823 	.word	0x08002823
 8002740:	080028e7 	.word	0x080028e7
 8002744:	080028e7 	.word	0x080028e7
 8002748:	080028e7 	.word	0x080028e7
 800274c:	08002865 	.word	0x08002865
 8002750:	080028e7 	.word	0x080028e7
 8002754:	080028e7 	.word	0x080028e7
 8002758:	080028e7 	.word	0x080028e7
 800275c:	080028a5 	.word	0x080028a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fa60 	bl	8002c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
      break;
 800279e:	e0a5      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fad0 	bl	8002d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6999      	ldr	r1, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	021a      	lsls	r2, r3, #8
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
      break;
 80027e0:	e084      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fb39 	bl	8002e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0208 	orr.w	r2, r2, #8
 80027fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0204 	bic.w	r2, r2, #4
 800280c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69d9      	ldr	r1, [r3, #28]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	61da      	str	r2, [r3, #28]
      break;
 8002820:	e064      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fba1 	bl	8002f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800283c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69d9      	ldr	r1, [r3, #28]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	61da      	str	r2, [r3, #28]
      break;
 8002862:	e043      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fc0a 	bl	8003084 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0208 	orr.w	r2, r2, #8
 800287e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0204 	bic.w	r2, r2, #4
 800288e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80028a2:	e023      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fc4e 	bl	800314c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	021a      	lsls	r2, r3, #8
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80028e4:	e002      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
      break;
 80028ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop

08002900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_TIM_ConfigClockSource+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e0de      	b.n	8002ada <HAL_TIM_ConfigClockSource+0x1da>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800293a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800293e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a63      	ldr	r2, [pc, #396]	@ (8002ae4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	f000 80a9 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 800295c:	4a61      	ldr	r2, [pc, #388]	@ (8002ae4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	f200 80ae 	bhi.w	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002964:	4a60      	ldr	r2, [pc, #384]	@ (8002ae8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f000 80a1 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 800296c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ae8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	f200 80a6 	bhi.w	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002974:	4a5d      	ldr	r2, [pc, #372]	@ (8002aec <HAL_TIM_ConfigClockSource+0x1ec>)
 8002976:	4293      	cmp	r3, r2
 8002978:	f000 8099 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 800297c:	4a5b      	ldr	r2, [pc, #364]	@ (8002aec <HAL_TIM_ConfigClockSource+0x1ec>)
 800297e:	4293      	cmp	r3, r2
 8002980:	f200 809e 	bhi.w	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002984:	4a5a      	ldr	r2, [pc, #360]	@ (8002af0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	f000 8091 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 800298c:	4a58      	ldr	r2, [pc, #352]	@ (8002af0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	f200 8096 	bhi.w	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002994:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002998:	f000 8089 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 800299c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80029a0:	f200 808e 	bhi.w	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029a8:	d03e      	beq.n	8002a28 <HAL_TIM_ConfigClockSource+0x128>
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ae:	f200 8087 	bhi.w	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b6:	f000 8086 	beq.w	8002ac6 <HAL_TIM_ConfigClockSource+0x1c6>
 80029ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029be:	d87f      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029c0:	2b70      	cmp	r3, #112	@ 0x70
 80029c2:	d01a      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0xfa>
 80029c4:	2b70      	cmp	r3, #112	@ 0x70
 80029c6:	d87b      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029c8:	2b60      	cmp	r3, #96	@ 0x60
 80029ca:	d050      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x16e>
 80029cc:	2b60      	cmp	r3, #96	@ 0x60
 80029ce:	d877      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029d0:	2b50      	cmp	r3, #80	@ 0x50
 80029d2:	d03c      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x14e>
 80029d4:	2b50      	cmp	r3, #80	@ 0x50
 80029d6:	d873      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029d8:	2b40      	cmp	r3, #64	@ 0x40
 80029da:	d058      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x18e>
 80029dc:	2b40      	cmp	r3, #64	@ 0x40
 80029de:	d86f      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029e0:	2b30      	cmp	r3, #48	@ 0x30
 80029e2:	d064      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 80029e4:	2b30      	cmp	r3, #48	@ 0x30
 80029e6:	d86b      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d060      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d867      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05c      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d05a      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x1ae>
 80029f8:	e062      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a0a:	f000 fc81 	bl	8003310 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	609a      	str	r2, [r3, #8]
      break;
 8002a26:	e04f      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a38:	f000 fc6a 	bl	8003310 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a4a:	609a      	str	r2, [r3, #8]
      break;
 8002a4c:	e03c      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 fbdc 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2150      	movs	r1, #80	@ 0x50
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fc35 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e02c      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f000 fbfb 	bl	8003276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2160      	movs	r1, #96	@ 0x60
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fc25 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e01c      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 fbbc 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2140      	movs	r1, #64	@ 0x40
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fc15 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e00c      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f000 fc0c 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8002abe:	e003      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac4:	e000      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002ac6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	00100070 	.word	0x00100070
 8002ae8:	00100040 	.word	0x00100040
 8002aec:	00100030 	.word	0x00100030
 8002af0:	00100020 	.word	0x00100020

08002af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a42      	ldr	r2, [pc, #264]	@ (8002c10 <TIM_Base_SetConfig+0x11c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00f      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b12:	d00b      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3f      	ldr	r2, [pc, #252]	@ (8002c14 <TIM_Base_SetConfig+0x120>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c18 <TIM_Base_SetConfig+0x124>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3d      	ldr	r2, [pc, #244]	@ (8002c1c <TIM_Base_SetConfig+0x128>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d108      	bne.n	8002b3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a33      	ldr	r2, [pc, #204]	@ (8002c10 <TIM_Base_SetConfig+0x11c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01b      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4c:	d017      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a30      	ldr	r2, [pc, #192]	@ (8002c14 <TIM_Base_SetConfig+0x120>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2f      	ldr	r2, [pc, #188]	@ (8002c18 <TIM_Base_SetConfig+0x124>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a2e      	ldr	r2, [pc, #184]	@ (8002c1c <TIM_Base_SetConfig+0x128>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a2d      	ldr	r2, [pc, #180]	@ (8002c20 <TIM_Base_SetConfig+0x12c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2c      	ldr	r2, [pc, #176]	@ (8002c24 <TIM_Base_SetConfig+0x130>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <TIM_Base_SetConfig+0x134>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a16      	ldr	r2, [pc, #88]	@ (8002c10 <TIM_Base_SetConfig+0x11c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00f      	beq.n	8002bdc <TIM_Base_SetConfig+0xe8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a17      	ldr	r2, [pc, #92]	@ (8002c1c <TIM_Base_SetConfig+0x128>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00b      	beq.n	8002bdc <TIM_Base_SetConfig+0xe8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a16      	ldr	r2, [pc, #88]	@ (8002c20 <TIM_Base_SetConfig+0x12c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d007      	beq.n	8002bdc <TIM_Base_SetConfig+0xe8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <TIM_Base_SetConfig+0x130>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <TIM_Base_SetConfig+0xe8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <TIM_Base_SetConfig+0x134>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]
  }
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40000800 	.word	0x40000800
 8002c1c:	40013400 	.word	0x40013400
 8002c20:	40014000 	.word	0x40014000
 8002c24:	40014400 	.word	0x40014400
 8002c28:	40014800 	.word	0x40014800

08002c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f023 0201 	bic.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f023 0302 	bic.w	r3, r3, #2
 8002c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a2c      	ldr	r2, [pc, #176]	@ (8002d38 <TIM_OC1_SetConfig+0x10c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00f      	beq.n	8002cac <TIM_OC1_SetConfig+0x80>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d3c <TIM_OC1_SetConfig+0x110>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00b      	beq.n	8002cac <TIM_OC1_SetConfig+0x80>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <TIM_OC1_SetConfig+0x114>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <TIM_OC1_SetConfig+0x80>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a29      	ldr	r2, [pc, #164]	@ (8002d44 <TIM_OC1_SetConfig+0x118>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_OC1_SetConfig+0x80>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a28      	ldr	r2, [pc, #160]	@ (8002d48 <TIM_OC1_SetConfig+0x11c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d10c      	bne.n	8002cc6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0308 	bic.w	r3, r3, #8
 8002cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d38 <TIM_OC1_SetConfig+0x10c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00f      	beq.n	8002cee <TIM_OC1_SetConfig+0xc2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d3c <TIM_OC1_SetConfig+0x110>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00b      	beq.n	8002cee <TIM_OC1_SetConfig+0xc2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <TIM_OC1_SetConfig+0x114>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <TIM_OC1_SetConfig+0xc2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	@ (8002d44 <TIM_OC1_SetConfig+0x118>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d003      	beq.n	8002cee <TIM_OC1_SetConfig+0xc2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a17      	ldr	r2, [pc, #92]	@ (8002d48 <TIM_OC1_SetConfig+0x11c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d111      	bne.n	8002d12 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	621a      	str	r2, [r3, #32]
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40013400 	.word	0x40013400
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800

08002d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 0210 	bic.w	r2, r3, #16
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0320 	bic.w	r3, r3, #32
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a28      	ldr	r2, [pc, #160]	@ (8002e4c <TIM_OC2_SetConfig+0x100>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_OC2_SetConfig+0x6c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <TIM_OC2_SetConfig+0x104>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d10d      	bne.n	8002dd4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <TIM_OC2_SetConfig+0x100>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00f      	beq.n	8002dfc <TIM_OC2_SetConfig+0xb0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <TIM_OC2_SetConfig+0x104>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <TIM_OC2_SetConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e54 <TIM_OC2_SetConfig+0x108>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d007      	beq.n	8002dfc <TIM_OC2_SetConfig+0xb0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a1a      	ldr	r2, [pc, #104]	@ (8002e58 <TIM_OC2_SetConfig+0x10c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_OC2_SetConfig+0xb0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <TIM_OC2_SetConfig+0x110>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d113      	bne.n	8002e24 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40013400 	.word	0x40013400
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800

08002e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a27      	ldr	r2, [pc, #156]	@ (8002f5c <TIM_OC3_SetConfig+0xfc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_OC3_SetConfig+0x6a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <TIM_OC3_SetConfig+0x100>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10d      	bne.n	8002ee6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f5c <TIM_OC3_SetConfig+0xfc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00f      	beq.n	8002f0e <TIM_OC3_SetConfig+0xae>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <TIM_OC3_SetConfig+0x100>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <TIM_OC3_SetConfig+0xae>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f64 <TIM_OC3_SetConfig+0x104>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <TIM_OC3_SetConfig+0xae>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a19      	ldr	r2, [pc, #100]	@ (8002f68 <TIM_OC3_SetConfig+0x108>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_OC3_SetConfig+0xae>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <TIM_OC3_SetConfig+0x10c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40013400 	.word	0x40013400
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40014400 	.word	0x40014400
 8002f6c:	40014800 	.word	0x40014800

08002f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	031b      	lsls	r3, r3, #12
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a28      	ldr	r2, [pc, #160]	@ (8003070 <TIM_OC4_SetConfig+0x100>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_OC4_SetConfig+0x6c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a27      	ldr	r2, [pc, #156]	@ (8003074 <TIM_OC4_SetConfig+0x104>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d10d      	bne.n	8002ff8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	031b      	lsls	r3, r3, #12
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8003070 <TIM_OC4_SetConfig+0x100>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <TIM_OC4_SetConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a1c      	ldr	r2, [pc, #112]	@ (8003074 <TIM_OC4_SetConfig+0x104>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00b      	beq.n	8003020 <TIM_OC4_SetConfig+0xb0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a1b      	ldr	r2, [pc, #108]	@ (8003078 <TIM_OC4_SetConfig+0x108>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_OC4_SetConfig+0xb0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1a      	ldr	r2, [pc, #104]	@ (800307c <TIM_OC4_SetConfig+0x10c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_OC4_SetConfig+0xb0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a19      	ldr	r2, [pc, #100]	@ (8003080 <TIM_OC4_SetConfig+0x110>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d113      	bne.n	8003048 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003026:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800302e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	019b      	lsls	r3, r3, #6
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	621a      	str	r2, [r3, #32]
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40013400 	.word	0x40013400
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80030c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <TIM_OC5_SetConfig+0xb4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00f      	beq.n	80030fe <TIM_OC5_SetConfig+0x7a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a16      	ldr	r2, [pc, #88]	@ (800313c <TIM_OC5_SetConfig+0xb8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00b      	beq.n	80030fe <TIM_OC5_SetConfig+0x7a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <TIM_OC5_SetConfig+0xbc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <TIM_OC5_SetConfig+0x7a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a14      	ldr	r2, [pc, #80]	@ (8003144 <TIM_OC5_SetConfig+0xc0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_OC5_SetConfig+0x7a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a13      	ldr	r2, [pc, #76]	@ (8003148 <TIM_OC5_SetConfig+0xc4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d109      	bne.n	8003112 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003104:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	621a      	str	r2, [r3, #32]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40013400 	.word	0x40013400
 8003140:	40014000 	.word	0x40014000
 8003144:	40014400 	.word	0x40014400
 8003148:	40014800 	.word	0x40014800

0800314c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800317a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	051b      	lsls	r3, r3, #20
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a18      	ldr	r2, [pc, #96]	@ (8003204 <TIM_OC6_SetConfig+0xb8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00f      	beq.n	80031c8 <TIM_OC6_SetConfig+0x7c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a17      	ldr	r2, [pc, #92]	@ (8003208 <TIM_OC6_SetConfig+0xbc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <TIM_OC6_SetConfig+0x7c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a16      	ldr	r2, [pc, #88]	@ (800320c <TIM_OC6_SetConfig+0xc0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <TIM_OC6_SetConfig+0x7c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a15      	ldr	r2, [pc, #84]	@ (8003210 <TIM_OC6_SetConfig+0xc4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_OC6_SetConfig+0x7c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <TIM_OC6_SetConfig+0xc8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d109      	bne.n	80031dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40013400 	.word	0x40013400
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800

08003218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 030a 	bic.w	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003276:	b480      	push	{r7}
 8003278:	b087      	sub	sp, #28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f023 0210 	bic.w	r2, r3, #16
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	031b      	lsls	r3, r3, #12
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80032ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f043 0307 	orr.w	r3, r3, #7
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800332a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	021a      	lsls	r2, r3, #8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	431a      	orrs	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2201      	movs	r2, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	43db      	mvns	r3, r3
 8003372:	401a      	ands	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1a      	ldr	r2, [r3, #32]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e065      	b.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d108      	bne.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80033ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003404:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1b      	ldr	r2, [pc, #108]	@ (800348c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d018      	beq.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342a:	d013      	beq.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a17      	ldr	r2, [pc, #92]	@ (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a12      	ldr	r2, [pc, #72]	@ (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a13      	ldr	r2, [pc, #76]	@ (800349c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d10c      	bne.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800345a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40013400 	.word	0x40013400
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40014000 	.word	0x40014000

080034a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e073      	b.n	80035a4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a18      	ldr	r2, [pc, #96]	@ (80035b4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d11c      	bne.n	8003592 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	051b      	lsls	r3, r3, #20
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40013400 	.word	0x40013400

080035b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e042      	b.n	8003650 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d106      	bne.n	80035e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7fd fa6b 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2224      	movs	r2, #36	@ 0x24
 80035e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fe38 	bl	8004278 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fb69 	bl	8003ce0 <UART_SetConfig>
 800360e:	4603      	mov	r3, r0
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e01b      	b.n	8003650 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003636:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 feb7 	bl	80043bc <UART_CheckIdleState>
 800364e:	4603      	mov	r3, r0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b0ba      	sub	sp, #232	@ 0xe8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800367e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003682:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003686:	4013      	ands	r3, r2
 8003688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800368c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11b      	bne.n	80036cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 82e3 	beq.w	8003c88 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
      }
      return;
 80036ca:	e2dd      	b.n	8003c88 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8123 	beq.w	800391c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80036d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80036da:	4b8d      	ldr	r3, [pc, #564]	@ (8003910 <HAL_UART_IRQHandler+0x2b8>)
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80036e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003914 <HAL_UART_IRQHandler+0x2bc>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8116 	beq.w	800391c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d011      	beq.n	8003720 <HAL_UART_IRQHandler+0xc8>
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d011      	beq.n	8003750 <HAL_UART_IRQHandler+0xf8>
 800372c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2202      	movs	r2, #2
 800373e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d011      	beq.n	8003780 <HAL_UART_IRQHandler+0x128>
 800375c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2204      	movs	r2, #4
 800376e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	f043 0202 	orr.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d017      	beq.n	80037bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003798:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800379c:	4b5c      	ldr	r3, [pc, #368]	@ (8003910 <HAL_UART_IRQHandler+0x2b8>)
 800379e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f043 0208 	orr.w	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d012      	beq.n	80037ee <HAL_UART_IRQHandler+0x196>
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8249 	beq.w	8003c8c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d013      	beq.n	800382e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d005      	beq.n	8003852 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800384a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800384e:	2b00      	cmp	r3, #0
 8003850:	d054      	beq.n	80038fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fec9 	bl	80045ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d146      	bne.n	80038f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3308      	adds	r3, #8
 800386c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800387c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800389e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1d9      	bne.n	8003866 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d017      	beq.n	80038ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <HAL_UART_IRQHandler+0x2c0>)
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fb77 	bl	8000fc0 <HAL_DMA_Abort_IT>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d019      	beq.n	800390c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80038e6:	4610      	mov	r0, r2
 80038e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ea:	e00f      	b.n	800390c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f9e1 	bl	8003cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f2:	e00b      	b.n	800390c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f9dd 	bl	8003cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fa:	e007      	b.n	800390c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f9d9 	bl	8003cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800390a:	e1bf      	b.n	8003c8c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	bf00      	nop
    return;
 800390e:	e1bd      	b.n	8003c8c <HAL_UART_IRQHandler+0x634>
 8003910:	10000001 	.word	0x10000001
 8003914:	04000120 	.word	0x04000120
 8003918:	080046b7 	.word	0x080046b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003920:	2b01      	cmp	r3, #1
 8003922:	f040 8153 	bne.w	8003bcc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 814c 	beq.w	8003bcc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8145 	beq.w	8003bcc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2210      	movs	r2, #16
 8003948:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	f040 80bb 	bne.w	8003ad0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003968:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 818f 	beq.w	8003c90 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003978:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800397c:	429a      	cmp	r2, r3
 800397e:	f080 8187 	bcs.w	8003c90 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003988:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 8087 	bne.w	8003aae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1da      	bne.n	80039a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3308      	adds	r3, #8
 80039f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e1      	bne.n	80039ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e3      	bne.n	8003a26 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a7c:	f023 0310 	bic.w	r3, r3, #16
 8003a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e4      	bne.n	8003a6c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd fa30 	bl	8000f0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8fd 	bl	8003cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ace:	e0df      	b.n	8003c90 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80d1 	beq.w	8003c94 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003af2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80cc 	beq.w	8003c94 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e4      	bne.n	8003afc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3308      	adds	r3, #8
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	623b      	str	r3, [r7, #32]
   return(result);
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3308      	adds	r3, #8
 8003b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e1      	bne.n	8003b32 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	69b9      	ldr	r1, [r7, #24]
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e4      	bne.n	8003b82 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f87f 	bl	8003cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bca:	e063      	b.n	8003c94 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x59e>
 8003bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fda2 	bl	8004738 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bf4:	e051      	b.n	8003c9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d014      	beq.n	8003c2c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d03a      	beq.n	8003c98 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
    }
    return;
 8003c2a:	e035      	b.n	8003c98 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <HAL_UART_IRQHandler+0x5f4>
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fd4c 	bl	80046e2 <UART_EndTransmit_IT>
    return;
 8003c4a:	e026      	b.n	8003c9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <HAL_UART_IRQHandler+0x614>
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fd7b 	bl	8004760 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c6a:	e016      	b.n	8003c9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <HAL_UART_IRQHandler+0x642>
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da0c      	bge.n	8003c9a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fd63 	bl	800474c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c86:	e008      	b.n	8003c9a <HAL_UART_IRQHandler+0x642>
      return;
 8003c88:	bf00      	nop
 8003c8a:	e006      	b.n	8003c9a <HAL_UART_IRQHandler+0x642>
    return;
 8003c8c:	bf00      	nop
 8003c8e:	e004      	b.n	8003c9a <HAL_UART_IRQHandler+0x642>
      return;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_UART_IRQHandler+0x642>
      return;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_UART_IRQHandler+0x642>
    return;
 8003c98:	bf00      	nop
  }
}
 8003c9a:	37e8      	adds	r7, #232	@ 0xe8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce4:	b08c      	sub	sp, #48	@ 0x30
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4bab      	ldr	r3, [pc, #684]	@ (8003fbc <UART_SetConfig+0x2dc>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4aa0      	ldr	r2, [pc, #640]	@ (8003fc0 <UART_SetConfig+0x2e0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d56:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	f023 010f 	bic.w	r1, r3, #15
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a91      	ldr	r2, [pc, #580]	@ (8003fc4 <UART_SetConfig+0x2e4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d125      	bne.n	8003dd0 <UART_SetConfig+0xf0>
 8003d84:	4b90      	ldr	r3, [pc, #576]	@ (8003fc8 <UART_SetConfig+0x2e8>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d81a      	bhi.n	8003dc8 <UART_SetConfig+0xe8>
 8003d92:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <UART_SetConfig+0xb8>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003db9 	.word	0x08003db9
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003dc1 	.word	0x08003dc1
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dae:	e0d6      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003db0:	2302      	movs	r3, #2
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db6:	e0d2      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003db8:	2304      	movs	r3, #4
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dbe:	e0ce      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc6:	e0ca      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	e0c6      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a7d      	ldr	r2, [pc, #500]	@ (8003fcc <UART_SetConfig+0x2ec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d138      	bne.n	8003e4c <UART_SetConfig+0x16c>
 8003dda:	4b7b      	ldr	r3, [pc, #492]	@ (8003fc8 <UART_SetConfig+0x2e8>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	d82d      	bhi.n	8003e44 <UART_SetConfig+0x164>
 8003de8:	a201      	add	r2, pc, #4	@ (adr r2, 8003df0 <UART_SetConfig+0x110>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003e45 	.word	0x08003e45
 8003df8:	08003e45 	.word	0x08003e45
 8003dfc:	08003e45 	.word	0x08003e45
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003e45 	.word	0x08003e45
 8003e08:	08003e45 	.word	0x08003e45
 8003e0c:	08003e45 	.word	0x08003e45
 8003e10:	08003e2d 	.word	0x08003e2d
 8003e14:	08003e45 	.word	0x08003e45
 8003e18:	08003e45 	.word	0x08003e45
 8003e1c:	08003e45 	.word	0x08003e45
 8003e20:	08003e3d 	.word	0x08003e3d
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e2a:	e098      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e32:	e094      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e34:	2304      	movs	r3, #4
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e3a:	e090      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e42:	e08c      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e44:	2310      	movs	r3, #16
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e4a:	e088      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd0 <UART_SetConfig+0x2f0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d125      	bne.n	8003ea2 <UART_SetConfig+0x1c2>
 8003e56:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc8 <UART_SetConfig+0x2e8>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e60:	2b30      	cmp	r3, #48	@ 0x30
 8003e62:	d016      	beq.n	8003e92 <UART_SetConfig+0x1b2>
 8003e64:	2b30      	cmp	r3, #48	@ 0x30
 8003e66:	d818      	bhi.n	8003e9a <UART_SetConfig+0x1ba>
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d00a      	beq.n	8003e82 <UART_SetConfig+0x1a2>
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d814      	bhi.n	8003e9a <UART_SetConfig+0x1ba>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <UART_SetConfig+0x19a>
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d008      	beq.n	8003e8a <UART_SetConfig+0x1aa>
 8003e78:	e00f      	b.n	8003e9a <UART_SetConfig+0x1ba>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e80:	e06d      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e82:	2302      	movs	r3, #2
 8003e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e88:	e069      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e90:	e065      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e92:	2308      	movs	r3, #8
 8003e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e98:	e061      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003e9a:	2310      	movs	r3, #16
 8003e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ea0:	e05d      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4b      	ldr	r2, [pc, #300]	@ (8003fd4 <UART_SetConfig+0x2f4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d125      	bne.n	8003ef8 <UART_SetConfig+0x218>
 8003eac:	4b46      	ldr	r3, [pc, #280]	@ (8003fc8 <UART_SetConfig+0x2e8>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eb8:	d016      	beq.n	8003ee8 <UART_SetConfig+0x208>
 8003eba:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ebc:	d818      	bhi.n	8003ef0 <UART_SetConfig+0x210>
 8003ebe:	2b80      	cmp	r3, #128	@ 0x80
 8003ec0:	d00a      	beq.n	8003ed8 <UART_SetConfig+0x1f8>
 8003ec2:	2b80      	cmp	r3, #128	@ 0x80
 8003ec4:	d814      	bhi.n	8003ef0 <UART_SetConfig+0x210>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <UART_SetConfig+0x1f0>
 8003eca:	2b40      	cmp	r3, #64	@ 0x40
 8003ecc:	d008      	beq.n	8003ee0 <UART_SetConfig+0x200>
 8003ece:	e00f      	b.n	8003ef0 <UART_SetConfig+0x210>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed6:	e042      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ede:	e03e      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee6:	e03a      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eee:	e036      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef6:	e032      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a30      	ldr	r2, [pc, #192]	@ (8003fc0 <UART_SetConfig+0x2e0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d12a      	bne.n	8003f58 <UART_SetConfig+0x278>
 8003f02:	4b31      	ldr	r3, [pc, #196]	@ (8003fc8 <UART_SetConfig+0x2e8>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f10:	d01a      	beq.n	8003f48 <UART_SetConfig+0x268>
 8003f12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f16:	d81b      	bhi.n	8003f50 <UART_SetConfig+0x270>
 8003f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f1c:	d00c      	beq.n	8003f38 <UART_SetConfig+0x258>
 8003f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f22:	d815      	bhi.n	8003f50 <UART_SetConfig+0x270>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <UART_SetConfig+0x250>
 8003f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2c:	d008      	beq.n	8003f40 <UART_SetConfig+0x260>
 8003f2e:	e00f      	b.n	8003f50 <UART_SetConfig+0x270>
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f36:	e012      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3e:	e00e      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003f40:	2304      	movs	r3, #4
 8003f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f46:	e00a      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003f48:	2308      	movs	r3, #8
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4e:	e006      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003f50:	2310      	movs	r3, #16
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f56:	e002      	b.n	8003f5e <UART_SetConfig+0x27e>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a17      	ldr	r2, [pc, #92]	@ (8003fc0 <UART_SetConfig+0x2e0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	f040 80a8 	bne.w	80040ba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d834      	bhi.n	8003fdc <UART_SetConfig+0x2fc>
 8003f72:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <UART_SetConfig+0x298>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fdd 	.word	0x08003fdd
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fdd 	.word	0x08003fdd
 8003f88:	08003fab 	.word	0x08003fab
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	08003fdd 	.word	0x08003fdd
 8003f94:	08003fdd 	.word	0x08003fdd
 8003f98:	08003fb3 	.word	0x08003fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fd ff82 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fa2:	e021      	b.n	8003fe8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <UART_SetConfig+0x2f8>)
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fa8:	e01e      	b.n	8003fe8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003faa:	f7fd ff0d 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8003fae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fb0:	e01a      	b.n	8003fe8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fb8:	e016      	b.n	8003fe8 <UART_SetConfig+0x308>
 8003fba:	bf00      	nop
 8003fbc:	cfff69f3 	.word	0xcfff69f3
 8003fc0:	40008000 	.word	0x40008000
 8003fc4:	40013800 	.word	0x40013800
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40004400 	.word	0x40004400
 8003fd0:	40004800 	.word	0x40004800
 8003fd4:	40004c00 	.word	0x40004c00
 8003fd8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fe6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 812a 	beq.w	8004244 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	4a9e      	ldr	r2, [pc, #632]	@ (8004270 <UART_SetConfig+0x590>)
 8003ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004002:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	429a      	cmp	r2, r3
 8004012:	d305      	bcc.n	8004020 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	429a      	cmp	r2, r3
 800401e:	d903      	bls.n	8004028 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004026:	e10d      	b.n	8004244 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	2200      	movs	r2, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	60fa      	str	r2, [r7, #12]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	4a8e      	ldr	r2, [pc, #568]	@ (8004270 <UART_SetConfig+0x590>)
 8004036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800403a:	b29b      	uxth	r3, r3
 800403c:	2200      	movs	r2, #0
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004046:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800404a:	f7fc f8e5 	bl	8000218 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	020b      	lsls	r3, r1, #8
 8004060:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004064:	0202      	lsls	r2, r0, #8
 8004066:	6979      	ldr	r1, [r7, #20]
 8004068:	6849      	ldr	r1, [r1, #4]
 800406a:	0849      	lsrs	r1, r1, #1
 800406c:	2000      	movs	r0, #0
 800406e:	460c      	mov	r4, r1
 8004070:	4605      	mov	r5, r0
 8004072:	eb12 0804 	adds.w	r8, r2, r4
 8004076:	eb43 0905 	adc.w	r9, r3, r5
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	469a      	mov	sl, r3
 8004082:	4693      	mov	fp, r2
 8004084:	4652      	mov	r2, sl
 8004086:	465b      	mov	r3, fp
 8004088:	4640      	mov	r0, r8
 800408a:	4649      	mov	r1, r9
 800408c:	f7fc f8c4 	bl	8000218 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4613      	mov	r3, r2
 8004096:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800409e:	d308      	bcc.n	80040b2 <UART_SetConfig+0x3d2>
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a6:	d204      	bcs.n	80040b2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6a3a      	ldr	r2, [r7, #32]
 80040ae:	60da      	str	r2, [r3, #12]
 80040b0:	e0c8      	b.n	8004244 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040b8:	e0c4      	b.n	8004244 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c2:	d167      	bne.n	8004194 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80040c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d828      	bhi.n	800411e <UART_SetConfig+0x43e>
 80040cc:	a201      	add	r2, pc, #4	@ (adr r2, 80040d4 <UART_SetConfig+0x3f4>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004109 	.word	0x08004109
 80040e0:	0800411f 	.word	0x0800411f
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	0800411f 	.word	0x0800411f
 80040ec:	0800411f 	.word	0x0800411f
 80040f0:	0800411f 	.word	0x0800411f
 80040f4:	08004117 	.word	0x08004117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fd fed4 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 80040fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040fe:	e014      	b.n	800412a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004100:	f7fd fee6 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8004104:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004106:	e010      	b.n	800412a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004108:	4b5a      	ldr	r3, [pc, #360]	@ (8004274 <UART_SetConfig+0x594>)
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800410c:	e00d      	b.n	800412a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410e:	f7fd fe5b 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8004112:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004114:	e009      	b.n	800412a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800411c:	e005      	b.n	800412a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8089 	beq.w	8004244 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	4a4e      	ldr	r2, [pc, #312]	@ (8004270 <UART_SetConfig+0x590>)
 8004138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800413c:	461a      	mov	r2, r3
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	fbb3 f3f2 	udiv	r3, r3, r2
 8004144:	005a      	lsls	r2, r3, #1
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	441a      	add	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	d916      	bls.n	800418c <UART_SetConfig+0x4ac>
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004164:	d212      	bcs.n	800418c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f023 030f 	bic.w	r3, r3, #15
 800416e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	085b      	lsrs	r3, r3, #1
 8004174:	b29b      	uxth	r3, r3
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	b29a      	uxth	r2, r3
 800417c:	8bfb      	ldrh	r3, [r7, #30]
 800417e:	4313      	orrs	r3, r2
 8004180:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	8bfa      	ldrh	r2, [r7, #30]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	e05b      	b.n	8004244 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004192:	e057      	b.n	8004244 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004194:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004198:	2b08      	cmp	r3, #8
 800419a:	d828      	bhi.n	80041ee <UART_SetConfig+0x50e>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <UART_SetConfig+0x4c4>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041d9 	.word	0x080041d9
 80041b0:	080041ef 	.word	0x080041ef
 80041b4:	080041df 	.word	0x080041df
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	080041ef 	.word	0x080041ef
 80041c0:	080041ef 	.word	0x080041ef
 80041c4:	080041e7 	.word	0x080041e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c8:	f7fd fe6c 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 80041cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ce:	e014      	b.n	80041fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7fd fe7e 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 80041d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041d6:	e010      	b.n	80041fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d8:	4b26      	ldr	r3, [pc, #152]	@ (8004274 <UART_SetConfig+0x594>)
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041dc:	e00d      	b.n	80041fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041de:	f7fd fdf3 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 80041e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041e4:	e009      	b.n	80041fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041ec:	e005      	b.n	80041fa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041f8:	bf00      	nop
    }

    if (pclk != 0U)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d021      	beq.n	8004244 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	4a1a      	ldr	r2, [pc, #104]	@ (8004270 <UART_SetConfig+0x590>)
 8004206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800420a:	461a      	mov	r2, r3
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	441a      	add	r2, r3
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	d909      	bls.n	800423e <UART_SetConfig+0x55e>
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004230:	d205      	bcs.n	800423e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	b29a      	uxth	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60da      	str	r2, [r3, #12]
 800423c:	e002      	b.n	8004244 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2201      	movs	r2, #1
 8004248:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2201      	movs	r2, #1
 8004250:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2200      	movs	r2, #0
 8004258:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004260:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004264:	4618      	mov	r0, r3
 8004266:	3730      	adds	r7, #48	@ 0x30
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426e:	bf00      	nop
 8004270:	08004a04 	.word	0x08004a04
 8004274:	00f42400 	.word	0x00f42400

08004278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01a      	beq.n	800438e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004376:	d10a      	bne.n	800438e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
  }
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b098      	sub	sp, #96	@ 0x60
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043cc:	f7fc fc62 	bl	8000c94 <HAL_GetTick>
 80043d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d12f      	bne.n	8004440 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f88e 	bl	8004510 <UART_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d022      	beq.n	8004440 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004418:	647b      	str	r3, [r7, #68]	@ 0x44
 800441a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800441e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e063      	b.n	8004508 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d149      	bne.n	80044e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800444e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004456:	2200      	movs	r2, #0
 8004458:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f857 	bl	8004510 <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d03c      	beq.n	80044e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	623b      	str	r3, [r7, #32]
   return(result);
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004486:	633b      	str	r3, [r7, #48]	@ 0x30
 8004488:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800448c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e6      	bne.n	8004468 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3308      	adds	r3, #8
 80044a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ba:	61fa      	str	r2, [r7, #28]
 80044bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	69b9      	ldr	r1, [r7, #24]
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	617b      	str	r3, [r7, #20]
   return(result);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e012      	b.n	8004508 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3758      	adds	r7, #88	@ 0x58
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004520:	e04f      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d04b      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fc fbb3 	bl	8000c94 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <UART_WaitOnFlagUntilTimeout+0x30>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e04e      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d037      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b80      	cmp	r3, #128	@ 0x80
 8004556:	d034      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b40      	cmp	r3, #64	@ 0x40
 800455c:	d031      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d110      	bne.n	800458e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2208      	movs	r2, #8
 8004572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f838 	bl	80045ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2208      	movs	r2, #8
 800457e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e029      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459c:	d111      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f81e 	bl	80045ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e00f      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d0a0      	beq.n	8004522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b095      	sub	sp, #84	@ 0x54
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004610:	643b      	str	r3, [r7, #64]	@ 0x40
 8004612:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004616:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	61fb      	str	r3, [r7, #28]
   return(result);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004648:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800464a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800464e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e3      	bne.n	8004624 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d118      	bne.n	8004696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	60bb      	str	r3, [r7, #8]
   return(result);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f023 0310 	bic.w	r3, r3, #16
 8004678:	647b      	str	r3, [r7, #68]	@ 0x44
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	613b      	str	r3, [r7, #16]
   return(result);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e6      	bne.n	8004664 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80046aa:	bf00      	nop
 80046ac:	3754      	adds	r7, #84	@ 0x54
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff faed 	bl	8003cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b088      	sub	sp, #32
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6979      	ldr	r1, [r7, #20]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	613b      	str	r3, [r7, #16]
   return(result);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e6      	bne.n	80046ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fab8 	bl	8003ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004730:	bf00      	nop
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_UARTEx_DisableFifoMode+0x16>
 8004786:	2302      	movs	r3, #2
 8004788:	e027      	b.n	80047da <HAL_UARTEx_DisableFifoMode+0x66>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2224      	movs	r2, #36	@ 0x24
 8004796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80047b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e02d      	b.n	800485a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2224      	movs	r2, #36	@ 0x24
 800480a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f850 	bl	80048e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004876:	2302      	movs	r3, #2
 8004878:	e02d      	b.n	80048d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2224      	movs	r2, #36	@ 0x24
 8004886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f812 	bl	80048e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004900:	e031      	b.n	8004966 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004902:	2308      	movs	r3, #8
 8004904:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004906:	2308      	movs	r3, #8
 8004908:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	0e5b      	lsrs	r3, r3, #25
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	0f5b      	lsrs	r3, r3, #29
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800492a:	7bbb      	ldrb	r3, [r7, #14]
 800492c:	7b3a      	ldrb	r2, [r7, #12]
 800492e:	4911      	ldr	r1, [pc, #68]	@ (8004974 <UARTEx_SetNbDataToProcess+0x94>)
 8004930:	5c8a      	ldrb	r2, [r1, r2]
 8004932:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004936:	7b3a      	ldrb	r2, [r7, #12]
 8004938:	490f      	ldr	r1, [pc, #60]	@ (8004978 <UARTEx_SetNbDataToProcess+0x98>)
 800493a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800493c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	7b7a      	ldrb	r2, [r7, #13]
 800494c:	4909      	ldr	r1, [pc, #36]	@ (8004974 <UARTEx_SetNbDataToProcess+0x94>)
 800494e:	5c8a      	ldrb	r2, [r1, r2]
 8004950:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004954:	7b7a      	ldrb	r2, [r7, #13]
 8004956:	4908      	ldr	r1, [pc, #32]	@ (8004978 <UARTEx_SetNbDataToProcess+0x98>)
 8004958:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800495a:	fb93 f3f2 	sdiv	r3, r3, r2
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	08004a1c 	.word	0x08004a1c
 8004978:	08004a24 	.word	0x08004a24

0800497c <memset>:
 800497c:	4402      	add	r2, r0
 800497e:	4603      	mov	r3, r0
 8004980:	4293      	cmp	r3, r2
 8004982:	d100      	bne.n	8004986 <memset+0xa>
 8004984:	4770      	bx	lr
 8004986:	f803 1b01 	strb.w	r1, [r3], #1
 800498a:	e7f9      	b.n	8004980 <memset+0x4>

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4d0d      	ldr	r5, [pc, #52]	@ (80049c4 <__libc_init_array+0x38>)
 8004990:	4c0d      	ldr	r4, [pc, #52]	@ (80049c8 <__libc_init_array+0x3c>)
 8004992:	1b64      	subs	r4, r4, r5
 8004994:	10a4      	asrs	r4, r4, #2
 8004996:	2600      	movs	r6, #0
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	4d0b      	ldr	r5, [pc, #44]	@ (80049cc <__libc_init_array+0x40>)
 800499e:	4c0c      	ldr	r4, [pc, #48]	@ (80049d0 <__libc_init_array+0x44>)
 80049a0:	f000 f818 	bl	80049d4 <_init>
 80049a4:	1b64      	subs	r4, r4, r5
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	2600      	movs	r6, #0
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08004a34 	.word	0x08004a34
 80049c8:	08004a34 	.word	0x08004a34
 80049cc:	08004a34 	.word	0x08004a34
 80049d0:	08004a38 	.word	0x08004a38

080049d4 <_init>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr

080049e0 <_fini>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr
